
CPRT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000207e4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000237c  080209c8  080209c8  000309c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022d44  08022d44  0004056c  2**0
                  CONTENTS
  4 .ARM          00000008  08022d44  08022d44  00032d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022d4c  08022d4c  0004056c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022d4c  08022d4c  00032d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022d50  08022d50  00032d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000056c  20000000  08022d54  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000099ac  2000056c  080232c0  0004056c  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20009f18  080232c0  00049f18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004056c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004929b  00000000  00000000  0004059c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000091cf  00000000  00000000  00089837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000031b8  00000000  00000000  00092a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002e30  00000000  00000000  00095bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003236d  00000000  00000000  000989f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00040e9d  00000000  00000000  000cad5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdd70  00000000  00000000  0010bbfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020996a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e59c  00000000  00000000  002099c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000056c 	.word	0x2000056c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080209ac 	.word	0x080209ac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000570 	.word	0x20000570
 800021c:	080209ac 	.word	0x080209ac

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a4 	b.w	8001058 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	468c      	mov	ip, r1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f040 8083 	bne.w	8000eaa <__udivmoddi4+0x116>
 8000da4:	428a      	cmp	r2, r1
 8000da6:	4617      	mov	r7, r2
 8000da8:	d947      	bls.n	8000e3a <__udivmoddi4+0xa6>
 8000daa:	fab2 f282 	clz	r2, r2
 8000dae:	b142      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000db0:	f1c2 0020 	rsb	r0, r2, #32
 8000db4:	fa24 f000 	lsr.w	r0, r4, r0
 8000db8:	4091      	lsls	r1, r2
 8000dba:	4097      	lsls	r7, r2
 8000dbc:	ea40 0c01 	orr.w	ip, r0, r1
 8000dc0:	4094      	lsls	r4, r2
 8000dc2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dc6:	0c23      	lsrs	r3, r4, #16
 8000dc8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dcc:	fa1f fe87 	uxth.w	lr, r7
 8000dd0:	fb08 c116 	mls	r1, r8, r6, ip
 8000dd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd8:	fb06 f10e 	mul.w	r1, r6, lr
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	d909      	bls.n	8000df4 <__udivmoddi4+0x60>
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000de6:	f080 8119 	bcs.w	800101c <__udivmoddi4+0x288>
 8000dea:	4299      	cmp	r1, r3
 8000dec:	f240 8116 	bls.w	800101c <__udivmoddi4+0x288>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	443b      	add	r3, r7
 8000df4:	1a5b      	subs	r3, r3, r1
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000e00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d909      	bls.n	8000e20 <__udivmoddi4+0x8c>
 8000e0c:	193c      	adds	r4, r7, r4
 8000e0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e12:	f080 8105 	bcs.w	8001020 <__udivmoddi4+0x28c>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f240 8102 	bls.w	8001020 <__udivmoddi4+0x28c>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	443c      	add	r4, r7
 8000e20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e24:	eba4 040e 	sub.w	r4, r4, lr
 8000e28:	2600      	movs	r6, #0
 8000e2a:	b11d      	cbz	r5, 8000e34 <__udivmoddi4+0xa0>
 8000e2c:	40d4      	lsrs	r4, r2
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e9c5 4300 	strd	r4, r3, [r5]
 8000e34:	4631      	mov	r1, r6
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	b902      	cbnz	r2, 8000e3e <__udivmoddi4+0xaa>
 8000e3c:	deff      	udf	#255	; 0xff
 8000e3e:	fab2 f282 	clz	r2, r2
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	d150      	bne.n	8000ee8 <__udivmoddi4+0x154>
 8000e46:	1bcb      	subs	r3, r1, r7
 8000e48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e4c:	fa1f f887 	uxth.w	r8, r7
 8000e50:	2601      	movs	r6, #1
 8000e52:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e56:	0c21      	lsrs	r1, r4, #16
 8000e58:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e60:	fb08 f30c 	mul.w	r3, r8, ip
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0xe4>
 8000e68:	1879      	adds	r1, r7, r1
 8000e6a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0xe2>
 8000e70:	428b      	cmp	r3, r1
 8000e72:	f200 80e9 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000e76:	4684      	mov	ip, r0
 8000e78:	1ac9      	subs	r1, r1, r3
 8000e7a:	b2a3      	uxth	r3, r4
 8000e7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e80:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e88:	fb08 f800 	mul.w	r8, r8, r0
 8000e8c:	45a0      	cmp	r8, r4
 8000e8e:	d907      	bls.n	8000ea0 <__udivmoddi4+0x10c>
 8000e90:	193c      	adds	r4, r7, r4
 8000e92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x10a>
 8000e98:	45a0      	cmp	r8, r4
 8000e9a:	f200 80d9 	bhi.w	8001050 <__udivmoddi4+0x2bc>
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	eba4 0408 	sub.w	r4, r4, r8
 8000ea4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ea8:	e7bf      	b.n	8000e2a <__udivmoddi4+0x96>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d909      	bls.n	8000ec2 <__udivmoddi4+0x12e>
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	f000 80b1 	beq.w	8001016 <__udivmoddi4+0x282>
 8000eb4:	2600      	movs	r6, #0
 8000eb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000eba:	4630      	mov	r0, r6
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	fab3 f683 	clz	r6, r3
 8000ec6:	2e00      	cmp	r6, #0
 8000ec8:	d14a      	bne.n	8000f60 <__udivmoddi4+0x1cc>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d302      	bcc.n	8000ed4 <__udivmoddi4+0x140>
 8000ece:	4282      	cmp	r2, r0
 8000ed0:	f200 80b8 	bhi.w	8001044 <__udivmoddi4+0x2b0>
 8000ed4:	1a84      	subs	r4, r0, r2
 8000ed6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eda:	2001      	movs	r0, #1
 8000edc:	468c      	mov	ip, r1
 8000ede:	2d00      	cmp	r5, #0
 8000ee0:	d0a8      	beq.n	8000e34 <__udivmoddi4+0xa0>
 8000ee2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ee6:	e7a5      	b.n	8000e34 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f603 	lsr.w	r6, r0, r3
 8000ef0:	4097      	lsls	r7, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000efa:	40d9      	lsrs	r1, r3
 8000efc:	4330      	orrs	r0, r6
 8000efe:	0c03      	lsrs	r3, r0, #16
 8000f00:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f04:	fa1f f887 	uxth.w	r8, r7
 8000f08:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f10:	fb06 f108 	mul.w	r1, r6, r8
 8000f14:	4299      	cmp	r1, r3
 8000f16:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1a:	d909      	bls.n	8000f30 <__udivmoddi4+0x19c>
 8000f1c:	18fb      	adds	r3, r7, r3
 8000f1e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f22:	f080 808d 	bcs.w	8001040 <__udivmoddi4+0x2ac>
 8000f26:	4299      	cmp	r1, r3
 8000f28:	f240 808a 	bls.w	8001040 <__udivmoddi4+0x2ac>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	443b      	add	r3, r7
 8000f30:	1a5b      	subs	r3, r3, r1
 8000f32:	b281      	uxth	r1, r0
 8000f34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f40:	fb00 f308 	mul.w	r3, r0, r8
 8000f44:	428b      	cmp	r3, r1
 8000f46:	d907      	bls.n	8000f58 <__udivmoddi4+0x1c4>
 8000f48:	1879      	adds	r1, r7, r1
 8000f4a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4e:	d273      	bcs.n	8001038 <__udivmoddi4+0x2a4>
 8000f50:	428b      	cmp	r3, r1
 8000f52:	d971      	bls.n	8001038 <__udivmoddi4+0x2a4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4439      	add	r1, r7
 8000f58:	1acb      	subs	r3, r1, r3
 8000f5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f5e:	e778      	b.n	8000e52 <__udivmoddi4+0xbe>
 8000f60:	f1c6 0c20 	rsb	ip, r6, #32
 8000f64:	fa03 f406 	lsl.w	r4, r3, r6
 8000f68:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f6c:	431c      	orrs	r4, r3
 8000f6e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f72:	fa01 f306 	lsl.w	r3, r1, r6
 8000f76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f7a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f7e:	431f      	orrs	r7, r3
 8000f80:	0c3b      	lsrs	r3, r7, #16
 8000f82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f86:	fa1f f884 	uxth.w	r8, r4
 8000f8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f92:	fb09 fa08 	mul.w	sl, r9, r8
 8000f96:	458a      	cmp	sl, r1
 8000f98:	fa02 f206 	lsl.w	r2, r2, r6
 8000f9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x220>
 8000fa2:	1861      	adds	r1, r4, r1
 8000fa4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fa8:	d248      	bcs.n	800103c <__udivmoddi4+0x2a8>
 8000faa:	458a      	cmp	sl, r1
 8000fac:	d946      	bls.n	800103c <__udivmoddi4+0x2a8>
 8000fae:	f1a9 0902 	sub.w	r9, r9, #2
 8000fb2:	4421      	add	r1, r4
 8000fb4:	eba1 010a 	sub.w	r1, r1, sl
 8000fb8:	b2bf      	uxth	r7, r7
 8000fba:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fbe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fc2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fc6:	fb00 f808 	mul.w	r8, r0, r8
 8000fca:	45b8      	cmp	r8, r7
 8000fcc:	d907      	bls.n	8000fde <__udivmoddi4+0x24a>
 8000fce:	19e7      	adds	r7, r4, r7
 8000fd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fd4:	d22e      	bcs.n	8001034 <__udivmoddi4+0x2a0>
 8000fd6:	45b8      	cmp	r8, r7
 8000fd8:	d92c      	bls.n	8001034 <__udivmoddi4+0x2a0>
 8000fda:	3802      	subs	r0, #2
 8000fdc:	4427      	add	r7, r4
 8000fde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fe2:	eba7 0708 	sub.w	r7, r7, r8
 8000fe6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fea:	454f      	cmp	r7, r9
 8000fec:	46c6      	mov	lr, r8
 8000fee:	4649      	mov	r1, r9
 8000ff0:	d31a      	bcc.n	8001028 <__udivmoddi4+0x294>
 8000ff2:	d017      	beq.n	8001024 <__udivmoddi4+0x290>
 8000ff4:	b15d      	cbz	r5, 800100e <__udivmoddi4+0x27a>
 8000ff6:	ebb3 020e 	subs.w	r2, r3, lr
 8000ffa:	eb67 0701 	sbc.w	r7, r7, r1
 8000ffe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001002:	40f2      	lsrs	r2, r6
 8001004:	ea4c 0202 	orr.w	r2, ip, r2
 8001008:	40f7      	lsrs	r7, r6
 800100a:	e9c5 2700 	strd	r2, r7, [r5]
 800100e:	2600      	movs	r6, #0
 8001010:	4631      	mov	r1, r6
 8001012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e70b      	b.n	8000e34 <__udivmoddi4+0xa0>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e9      	b.n	8000df4 <__udivmoddi4+0x60>
 8001020:	4618      	mov	r0, r3
 8001022:	e6fd      	b.n	8000e20 <__udivmoddi4+0x8c>
 8001024:	4543      	cmp	r3, r8
 8001026:	d2e5      	bcs.n	8000ff4 <__udivmoddi4+0x260>
 8001028:	ebb8 0e02 	subs.w	lr, r8, r2
 800102c:	eb69 0104 	sbc.w	r1, r9, r4
 8001030:	3801      	subs	r0, #1
 8001032:	e7df      	b.n	8000ff4 <__udivmoddi4+0x260>
 8001034:	4608      	mov	r0, r1
 8001036:	e7d2      	b.n	8000fde <__udivmoddi4+0x24a>
 8001038:	4660      	mov	r0, ip
 800103a:	e78d      	b.n	8000f58 <__udivmoddi4+0x1c4>
 800103c:	4681      	mov	r9, r0
 800103e:	e7b9      	b.n	8000fb4 <__udivmoddi4+0x220>
 8001040:	4666      	mov	r6, ip
 8001042:	e775      	b.n	8000f30 <__udivmoddi4+0x19c>
 8001044:	4630      	mov	r0, r6
 8001046:	e74a      	b.n	8000ede <__udivmoddi4+0x14a>
 8001048:	f1ac 0c02 	sub.w	ip, ip, #2
 800104c:	4439      	add	r1, r7
 800104e:	e713      	b.n	8000e78 <__udivmoddi4+0xe4>
 8001050:	3802      	subs	r0, #2
 8001052:	443c      	add	r4, r7
 8001054:	e724      	b.n	8000ea0 <__udivmoddi4+0x10c>
 8001056:	bf00      	nop

08001058 <__aeabi_idiv0>:
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <Adc1Init>:
static bool startupAdc3 = true;

/* ADC1 Channels */

void Adc1Init( )
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	startupAdc1 = true;
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <Adc1Init+0x18>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, adc1Values, NUM_ADC1_CHANNELS);
 8001066:	2207      	movs	r2, #7
 8001068:	4903      	ldr	r1, [pc, #12]	; (8001078 <Adc1Init+0x1c>)
 800106a:	4804      	ldr	r0, [pc, #16]	; (800107c <Adc1Init+0x20>)
 800106c:	f008 f84c 	bl	8009108 <HAL_ADC_Start_DMA>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000008 	.word	0x20000008
 8001078:	2000058c 	.word	0x2000058c
 800107c:	20004a04 	.word	0x20004a04

08001080 <SetAdc1CompleteFlag>:
	SetAdc1CompleteFlag( false );
	HAL_ADC_Start_DMA(&hadc1, adc1Values, NUM_ADC1_CHANNELS);
}

void SetAdc1CompleteFlag( bool complete )
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
	adc1DmaComplete = complete;
 800108a:	4a04      	ldr	r2, [pc, #16]	; (800109c <SetAdc1CompleteFlag+0x1c>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	7013      	strb	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	20000588 	.word	0x20000588

080010a0 <GetPressureSensor3Value>:


/* ADC1 Channels Values*/

float GetPressureSensor3Value()
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
	return adc1Values[ADC1_CHANNEL_PressureSensor3] * Adc3_3VIndexToMiliVolts;
 80010a4:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <GetPressureSensor3Value+0x24>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80010c8 <GetPressureSensor3Value+0x28>
 80010b4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80010b8:	eeb0 0a67 	vmov.f32	s0, s15
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	2000058c 	.word	0x2000058c
 80010c8:	3f4e4000 	.word	0x3f4e4000

080010cc <GetPressureSensor1Value>:

float GetPressureSensor1Value()
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
	return adc1Values[ADC1_CHANNEL_PressureSensor1] * Adc3_3VIndexToMiliVolts;
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <GetPressureSensor1Value+0x24>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	ee07 3a90 	vmov	s15, r3
 80010d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010dc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80010f4 <GetPressureSensor1Value+0x28>
 80010e0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80010e4:	eeb0 0a67 	vmov.f32	s0, s15
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	2000058c 	.word	0x2000058c
 80010f4:	3f4e4000 	.word	0x3f4e4000

080010f8 <GetPressureSensor2Value>:

float GetPressureSensor2Value()
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
	return adc1Values[ADC1_CHANNEL_PressureSensor2] * Adc3_3VIndexToMiliVolts;
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <GetPressureSensor2Value+0x24>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	ee07 3a90 	vmov	s15, r3
 8001104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001108:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001120 <GetPressureSensor2Value+0x28>
 800110c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001110:	eeb0 0a67 	vmov.f32	s0, s15
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	2000058c 	.word	0x2000058c
 8001120:	3f4e4000 	.word	0x3f4e4000

08001124 <GetPressureSensor4Value>:

float GetPressureSensor4Value()
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
	return adc1Values[ADC1_CHANNEL_PressureSensor4] * Adc3_3VIndexToMiliVolts;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <GetPressureSensor4Value+0x24>)
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	ee07 3a90 	vmov	s15, r3
 8001130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001134:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800114c <GetPressureSensor4Value+0x28>
 8001138:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800113c:	eeb0 0a67 	vmov.f32	s0, s15
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	2000058c 	.word	0x2000058c
 800114c:	3f4e4000 	.word	0x3f4e4000

08001150 <GetCalcMmhgSensorPressure2>:
 * Pressure(psi) = (Vout – 0.5) /0.8;
 * Pressure(mmHg) = (Vout - 0.5) /0.8 * 51.7149
 */

float GetCalcMmhgSensorPressure2( )
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
    return 	((GetPressureSensor2Value() / 1000.0) - 0.5) / 0.8 * 51.7149;
 8001154:	f7ff ffd0 	bl	80010f8 <GetPressureSensor2Value>
 8001158:	ee10 3a10 	vmov	r3, s0
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fa2b 	bl	80005b8 <__aeabi_f2d>
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <GetCalcMmhgSensorPressure2+0x80>)
 8001168:	f7ff fba8 	bl	80008bc <__aeabi_ddiv>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <GetCalcMmhgSensorPressure2+0x84>)
 800117a:	f7ff f8bd 	bl	80002f8 <__aeabi_dsub>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	a30e      	add	r3, pc, #56	; (adr r3, 80011c0 <GetCalcMmhgSensorPressure2+0x70>)
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	f7ff fb96 	bl	80008bc <__aeabi_ddiv>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	a30b      	add	r3, pc, #44	; (adr r3, 80011c8 <GetCalcMmhgSensorPressure2+0x78>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff fa63 	bl	8000668 <__aeabi_dmul>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f7ff fd55 	bl	8000c58 <__aeabi_d2f>
 80011ae:	4603      	mov	r3, r0
 80011b0:	ee07 3a90 	vmov	s15, r3
}
 80011b4:	eeb0 0a67 	vmov.f32	s0, s15
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	f3af 8000 	nop.w
 80011c0:	9999999a 	.word	0x9999999a
 80011c4:	3fe99999 	.word	0x3fe99999
 80011c8:	d7dbf488 	.word	0xd7dbf488
 80011cc:	4049db81 	.word	0x4049db81
 80011d0:	408f4000 	.word	0x408f4000
 80011d4:	3fe00000 	.word	0x3fe00000

080011d8 <GetCalcMmhgSensorPressure3>:

float GetCalcMmhgSensorPressure3( )
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
    return 	((GetPressureSensor3Value() / 1000.0) - 0.5) / 0.8 * 51.7149;
 80011dc:	f7ff ff60 	bl	80010a0 <GetPressureSensor3Value>
 80011e0:	ee10 3a10 	vmov	r3, s0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f9e7 	bl	80005b8 <__aeabi_f2d>
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <GetCalcMmhgSensorPressure3+0x80>)
 80011f0:	f7ff fb64 	bl	80008bc <__aeabi_ddiv>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <GetCalcMmhgSensorPressure3+0x84>)
 8001202:	f7ff f879 	bl	80002f8 <__aeabi_dsub>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	a30e      	add	r3, pc, #56	; (adr r3, 8001248 <GetCalcMmhgSensorPressure3+0x70>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f7ff fb52 	bl	80008bc <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	a30b      	add	r3, pc, #44	; (adr r3, 8001250 <GetCalcMmhgSensorPressure3+0x78>)
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	f7ff fa1f 	bl	8000668 <__aeabi_dmul>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fd11 	bl	8000c58 <__aeabi_d2f>
 8001236:	4603      	mov	r3, r0
 8001238:	ee07 3a90 	vmov	s15, r3
}
 800123c:	eeb0 0a67 	vmov.f32	s0, s15
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	f3af 8000 	nop.w
 8001248:	9999999a 	.word	0x9999999a
 800124c:	3fe99999 	.word	0x3fe99999
 8001250:	d7dbf488 	.word	0xd7dbf488
 8001254:	4049db81 	.word	0x4049db81
 8001258:	408f4000 	.word	0x408f4000
 800125c:	3fe00000 	.word	0x3fe00000

08001260 <GetCalcMmhgSensorPressure4>:

float GetCalcMmhgSensorPressure4( )
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
    return 	((GetPressureSensor4Value() / 1000.0) - 0.5) / 0.8 * 51.7149;
 8001264:	f7ff ff5e 	bl	8001124 <GetPressureSensor4Value>
 8001268:	ee10 3a10 	vmov	r3, s0
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f9a3 	bl	80005b8 <__aeabi_f2d>
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <GetCalcMmhgSensorPressure4+0x80>)
 8001278:	f7ff fb20 	bl	80008bc <__aeabi_ddiv>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <GetCalcMmhgSensorPressure4+0x84>)
 800128a:	f7ff f835 	bl	80002f8 <__aeabi_dsub>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	a30e      	add	r3, pc, #56	; (adr r3, 80012d0 <GetCalcMmhgSensorPressure4+0x70>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff fb0e 	bl	80008bc <__aeabi_ddiv>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	a30b      	add	r3, pc, #44	; (adr r3, 80012d8 <GetCalcMmhgSensorPressure4+0x78>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	f7ff f9db 	bl	8000668 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	f7ff fccd 	bl	8000c58 <__aeabi_d2f>
 80012be:	4603      	mov	r3, r0
 80012c0:	ee07 3a90 	vmov	s15, r3
}
 80012c4:	eeb0 0a67 	vmov.f32	s0, s15
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	f3af 8000 	nop.w
 80012d0:	9999999a 	.word	0x9999999a
 80012d4:	3fe99999 	.word	0x3fe99999
 80012d8:	d7dbf488 	.word	0xd7dbf488
 80012dc:	4049db81 	.word	0x4049db81
 80012e0:	408f4000 	.word	0x408f4000
 80012e4:	3fe00000 	.word	0x3fe00000

080012e8 <GetCalcMmhgSensorPressure1>:

float GetCalcMmhgSensorPressure1( )
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
	uint16_t pAdcRaw = adc1Values[ADC1_CHANNEL_PressureSensor1];
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <GetCalcMmhgSensorPressure1+0x68>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	80fb      	strh	r3, [r7, #6]

	return ((pAdcRaw - pAdcZero) * pConversionFactor) * 1.0197162f * CMH2O_TO_MMHG;
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	4a17      	ldr	r2, [pc, #92]	; (8001354 <GetCalcMmhgSensorPressure1+0x6c>)
 80012f8:	8812      	ldrh	r2, [r2, #0]
 80012fa:	1a9b      	subs	r3, r3, r2
 80012fc:	ee07 3a90 	vmov	s15, r3
 8001300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <GetCalcMmhgSensorPressure1+0x70>)
 8001306:	edd3 7a00 	vldr	s15, [r3]
 800130a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800130e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800135c <GetCalcMmhgSensorPressure1+0x74>
 8001312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001316:	ee17 0a90 	vmov	r0, s15
 800131a:	f7ff f94d 	bl	80005b8 <__aeabi_f2d>
 800131e:	a30a      	add	r3, pc, #40	; (adr r3, 8001348 <GetCalcMmhgSensorPressure1+0x60>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7ff f9a0 	bl	8000668 <__aeabi_dmul>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f7ff fc92 	bl	8000c58 <__aeabi_d2f>
 8001334:	4603      	mov	r3, r0
 8001336:	ee07 3a90 	vmov	s15, r3
}
 800133a:	eeb0 0a67 	vmov.f32	s0, s15
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	f3af 8000 	nop.w
 8001348:	0728e92d 	.word	0x0728e92d
 800134c:	3fe789b3 	.word	0x3fe789b3
 8001350:	2000058c 	.word	0x2000058c
 8001354:	20000000 	.word	0x20000000
 8001358:	20000004 	.word	0x20000004
 800135c:	3f82860f 	.word	0x3f82860f

08001360 <Get12vValue>:


float Get12vValue()
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
	return adc1Values[ADC1_CHANNEL_12V] * Adc3_3VIndexToMiliVolts;
 8001364:	4b07      	ldr	r3, [pc, #28]	; (8001384 <Get12vValue+0x24>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	ee07 3a90 	vmov	s15, r3
 800136c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001370:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001388 <Get12vValue+0x28>
 8001374:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	2000058c 	.word	0x2000058c
 8001388:	3f4e4000 	.word	0x3f4e4000

0800138c <Get5VRefValue>:

float Get5VRefValue()
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
	return adc1Values[ADC1_CHANNEL_5VREF] * Adc3_3VIndexToMiliVolts;
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <Get5VRefValue+0x24>)
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	ee07 3a90 	vmov	s15, r3
 8001398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800139c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80013b4 <Get5VRefValue+0x28>
 80013a0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80013a4:	eeb0 0a67 	vmov.f32	s0, s15
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	2000058c 	.word	0x2000058c
 80013b4:	3f4e4000 	.word	0x3f4e4000

080013b8 <GetCabTempValue>:

float GetCabTempValue()
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
	return adc1Values[ADC1_CHANNEL_CabTemp] * Adc3_3VIndexToMiliVolts;
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <GetCabTempValue+0x24>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	ee07 3a90 	vmov	s15, r3
 80013c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013c8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80013e0 <GetCabTempValue+0x28>
 80013cc:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80013d0:	eeb0 0a67 	vmov.f32	s0, s15
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	2000058c 	.word	0x2000058c
 80013e0:	3f4e4000 	.word	0x3f4e4000

080013e4 <SetAdc3CompleteFlag>:
	SetAdc3CompleteFlag( false );
	HAL_ADC_Start_DMA(&hadc3, adc3Values, NUM_ADC3_CHANNELS);
}

void SetAdc3CompleteFlag( bool complete )
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
	adc3DmaComplete = complete;
 80013ee:	4a04      	ldr	r2, [pc, #16]	; (8001400 <SetAdc3CompleteFlag+0x1c>)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	7013      	strb	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	20000589 	.word	0x20000589

08001404 <GetPfcCurrentMonRawAdc>:
{
	return adc3Values[ADC3_CHANNEL_ADC_5V];
}

uint32_t GetPfcCurrentMonRawAdc()
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
	return adc3Values[ADC3_CHANNEL_PFCCurrMon];
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <GetPfcCurrentMonRawAdc+0x14>)
 800140a:	691b      	ldr	r3, [r3, #16]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	200005a8 	.word	0x200005a8

0800141c <GetPfcVOutRawAdc>:
{
	return adc3Values[ADC3_CHANNEL_BUZ_ADC];
}

uint32_t GetPfcVOutRawAdc()
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
	return adc3Values[ADC3_CHANNEL_ADC_PFCVOMon];
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <GetPfcVOutRawAdc+0x14>)
 8001422:	699b      	ldr	r3, [r3, #24]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	200005a8 	.word	0x200005a8

08001434 <GetPfcTempMonRawAdc>:

uint32_t GetPfcTempMonRawAdc()
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
	return adc3Values[ADC3_CHANNEL_PFCTempMon];
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <GetPfcTempMonRawAdc+0x14>)
 800143a:	69db      	ldr	r3, [r3, #28]
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	200005a8 	.word	0x200005a8

0800144c <GetMainPcbaCurrentValue>:

/* ADC3 Channels Values*/

float GetMainPcbaCurrentValue()
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
	return adc3Values[ADC3_CHANNEL_MainPcba_Current] * Adc3_3VIndexToMiliVolts;
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <GetMainPcbaCurrentValue+0x24>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	ee07 3a90 	vmov	s15, r3
 8001458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800145c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001474 <GetMainPcbaCurrentValue+0x28>
 8001460:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001464:	eeb0 0a67 	vmov.f32	s0, s15
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	200005a8 	.word	0x200005a8
 8001474:	3f4e4000 	.word	0x3f4e4000

08001478 <GetPower24VoltageValue>:

float GetPower24VoltageValue()
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	return adc3Values[ADC3_CHANNEL_Power_Voltage] * Power24VIndexToVolts;
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <GetPower24VoltageValue+0x24>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001488:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014a0 <GetPower24VoltageValue+0x28>
 800148c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001490:	eeb0 0a67 	vmov.f32	s0, s15
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	200005a8 	.word	0x200005a8
 80014a0:	3bdded30 	.word	0x3bdded30

080014a4 <Get3V3Value>:

float Get3V3Value()
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
	return adc3Values[ADC3_CHANNEL_ADC_3V3] * Adc3V3IndexToVolts;
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <Get3V3Value+0x24>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	ee07 3a90 	vmov	s15, r3
 80014b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014b4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014cc <Get3V3Value+0x28>
 80014b8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80014bc:	eeb0 0a67 	vmov.f32	s0, s15
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	200005a8 	.word	0x200005a8
 80014cc:	3a68c6fe 	.word	0x3a68c6fe

080014d0 <Get5VoltValue>:

float Get5VoltValue()
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
	return adc3Values[ADC3_CHANNEL_ADC_5V] * Adc5VIndexToVolts;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <Get5VoltValue+0x24>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	ee07 3a90 	vmov	s15, r3
 80014dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014e0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014f8 <Get5VoltValue+0x28>
 80014e4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80014e8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	200005a8 	.word	0x200005a8
 80014f8:	3ab00afe 	.word	0x3ab00afe

080014fc <GetPfcCurrentMonValue>:

float GetPfcCurrentMonValue()
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
	return (adc3Values[ADC3_CHANNEL_PFCCurrMon] * PfcCurrMonIndexToAmps);
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <GetPfcCurrentMonValue+0x24>)
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	ee07 3a90 	vmov	s15, r3
 8001508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800150c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001524 <GetPfcCurrentMonValue+0x28>
 8001510:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001514:	eeb0 0a67 	vmov.f32	s0, s15
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	200005a8 	.word	0x200005a8
 8001524:	3ad3406a 	.word	0x3ad3406a

08001528 <GetBuzzerValue>:

float GetBuzzerValue()
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
	return adc3Values[ADC3_CHANNEL_BUZ_ADC] * Adc3_3VIndexToMiliVolts;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <GetBuzzerValue+0x24>)
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001538:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001550 <GetBuzzerValue+0x28>
 800153c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001540:	eeb0 0a67 	vmov.f32	s0, s15
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	200005a8 	.word	0x200005a8
 8001550:	3f4e4000 	.word	0x3f4e4000

08001554 <GetPfcVOutValue>:

float GetPfcVOutValue()
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
	return adc3Values[ADC3_CHANNEL_ADC_PFCVOMon] * PfcVOutIndexToVolts;
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <GetPfcVOutValue+0x24>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	ee07 3a90 	vmov	s15, r3
 8001560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001564:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800157c <GetPfcVOutValue+0x28>
 8001568:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800156c:	eeb0 0a67 	vmov.f32	s0, s15
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	200005a8 	.word	0x200005a8
 800157c:	3e18d06d 	.word	0x3e18d06d

08001580 <GetPfcTempMonValue>:

float GetPfcTempMonValue()
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
	return adc3Values[ADC3_CHANNEL_PFCTempMon] * PfcTempMonIndexToCentig;  //Modified GG 10/5/21
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <GetPfcTempMonValue+0x24>)
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	ee07 3a90 	vmov	s15, r3
 800158c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001590:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80015a8 <GetPfcTempMonValue+0x28>
 8001594:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001598:	eeb0 0a67 	vmov.f32	s0, s15
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	200005a8 	.word	0x200005a8
 80015a8:	3df78f7d 	.word	0x3df78f7d

080015ac <ReadAdc1Channels>:

void ReadAdc1Channels()
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
	// Get fresh ADC values for print out
	HAL_ADC_Stop_DMA(&hadc1);
 80015b2:	4812      	ldr	r0, [pc, #72]	; (80015fc <ReadAdc1Channels+0x50>)
 80015b4:	f007 fea2 	bl	80092fc <HAL_ADC_Stop_DMA>

	adc1DmaComplete = false;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <ReadAdc1Channels+0x54>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, adc1Values, NUM_ADC1_CHANNELS);
 80015be:	2207      	movs	r2, #7
 80015c0:	4910      	ldr	r1, [pc, #64]	; (8001604 <ReadAdc1Channels+0x58>)
 80015c2:	480e      	ldr	r0, [pc, #56]	; (80015fc <ReadAdc1Channels+0x50>)
 80015c4:	f007 fda0 	bl	8009108 <HAL_ADC_Start_DMA>

	// Ensure that DMA is complete before reading ADC 1 values
	uint32_t startWaitTime = HAL_GetTick();
 80015c8:	f007 fc5c 	bl	8008e84 <HAL_GetTick>
 80015cc:	6078      	str	r0, [r7, #4]

	while(adc1DmaComplete == false)
 80015ce:	e00a      	b.n	80015e6 <ReadAdc1Channels+0x3a>
	{
		if ( (HAL_GetTick() - startWaitTime) > 3 ) // 3 ms
 80015d0:	f007 fc58 	bl	8008e84 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d903      	bls.n	80015e6 <ReadAdc1Channels+0x3a>
		{
			UartPrintf("ADC1 DMA not complete for 3 ms\n");
 80015de:	480a      	ldr	r0, [pc, #40]	; (8001608 <ReadAdc1Channels+0x5c>)
 80015e0:	f004 fb7a 	bl	8005cd8 <UartPrintf>
			return; // Wait too long for ADC1 DMA to complete
 80015e4:	e006      	b.n	80015f4 <ReadAdc1Channels+0x48>
	while(adc1DmaComplete == false)
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <ReadAdc1Channels+0x54>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	f083 0301 	eor.w	r3, r3, #1
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ed      	bne.n	80015d0 <ReadAdc1Channels+0x24>
		}
	}
}
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20004a04 	.word	0x20004a04
 8001600:	20000588 	.word	0x20000588
 8001604:	2000058c 	.word	0x2000058c
 8001608:	080209c8 	.word	0x080209c8

0800160c <PrintAdc1Channels>:

void PrintAdc1Channels( )
{
 800160c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001610:	b09a      	sub	sp, #104	; 0x68
 8001612:	af0c      	add	r7, sp, #48	; 0x30
	// Get fresh ADC values for print out
	HAL_ADC_Stop_DMA(&hadc1);
 8001614:	4841      	ldr	r0, [pc, #260]	; (800171c <PrintAdc1Channels+0x110>)
 8001616:	f007 fe71 	bl	80092fc <HAL_ADC_Stop_DMA>

	adc1DmaComplete = false;
 800161a:	4b41      	ldr	r3, [pc, #260]	; (8001720 <PrintAdc1Channels+0x114>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, adc1Values, NUM_ADC1_CHANNELS);
 8001620:	2207      	movs	r2, #7
 8001622:	4940      	ldr	r1, [pc, #256]	; (8001724 <PrintAdc1Channels+0x118>)
 8001624:	483d      	ldr	r0, [pc, #244]	; (800171c <PrintAdc1Channels+0x110>)
 8001626:	f007 fd6f 	bl	8009108 <HAL_ADC_Start_DMA>

	// Ensure that DMA is complete before reading ADC 1 values
	uint32_t startWaitTime = HAL_GetTick();
 800162a:	f007 fc2b 	bl	8008e84 <HAL_GetTick>
 800162e:	6378      	str	r0, [r7, #52]	; 0x34

	while(adc1DmaComplete == false)
 8001630:	e00a      	b.n	8001648 <PrintAdc1Channels+0x3c>
	{
		if ( (HAL_GetTick() - startWaitTime) > 3 ) // 3 ms
 8001632:	f007 fc27 	bl	8008e84 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b03      	cmp	r3, #3
 800163e:	d903      	bls.n	8001648 <PrintAdc1Channels+0x3c>
		{
			UartPrintf("ADC1 DMA not complete for 3 ms\n");
 8001640:	4839      	ldr	r0, [pc, #228]	; (8001728 <PrintAdc1Channels+0x11c>)
 8001642:	f004 fb49 	bl	8005cd8 <UartPrintf>
			return; // Wait too long for ADC1 DMA to complete
 8001646:	e065      	b.n	8001714 <PrintAdc1Channels+0x108>
	while(adc1DmaComplete == false)
 8001648:	4b35      	ldr	r3, [pc, #212]	; (8001720 <PrintAdc1Channels+0x114>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	f083 0301 	eor.w	r3, r3, #1
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1ed      	bne.n	8001632 <PrintAdc1Channels+0x26>
		}
	}

	HAL_ADC_Stop_DMA(&hadc1);
 8001656:	4831      	ldr	r0, [pc, #196]	; (800171c <PrintAdc1Channels+0x110>)
 8001658:	f007 fe50 	bl	80092fc <HAL_ADC_Stop_DMA>
	//UartPrintf("%d  %d  %d  %d  %d  %d  %d\n",
	//			GetPressureSensor1RawAdc(), GetPressureSensor2RawAdc(), GetPressureSensor3RawAdc(), GetPressureSensor4RawAdc(),
	//		    Get12VRawAdc(), Get5VRefRawAdc(), GetCabTempRawAdc());

	// Read ADC1 values for pressure sensors
	float pressureSensor3Print = GetPressureSensor3Value();
 800165c:	f7ff fd20 	bl	80010a0 <GetPressureSensor3Value>
 8001660:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	float pressureSensor1Print = GetPressureSensor1Value();
 8001664:	f7ff fd32 	bl	80010cc <GetPressureSensor1Value>
 8001668:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float pressureSensor2Print = GetPressureSensor2Value();
 800166c:	f7ff fd44 	bl	80010f8 <GetPressureSensor2Value>
 8001670:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	float twelveVoltPrint      = Get12vValue();
 8001674:	f7ff fe74 	bl	8001360 <Get12vValue>
 8001678:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float fiveVoltRefPrint     = Get5VRefValue();
 800167c:	f7ff fe86 	bl	800138c <Get5VRefValue>
 8001680:	ed87 0a08 	vstr	s0, [r7, #32]
	float pressureSensor4Print = GetPressureSensor4Value();
 8001684:	f7ff fd4e 	bl	8001124 <GetPressureSensor4Value>
 8001688:	ed87 0a07 	vstr	s0, [r7, #28]
	float cabTempPrint         = GetCabTempValue();
 800168c:	f7ff fe94 	bl	80013b8 <GetCabTempValue>
 8001690:	ed87 0a06 	vstr	s0, [r7, #24]

	UartPrintf("\nPSensor1:  %4.3f mV\n"
 8001694:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001696:	f7fe ff8f 	bl	80005b8 <__aeabi_f2d>
 800169a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800169e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016a0:	f7fe ff8a 	bl	80005b8 <__aeabi_f2d>
 80016a4:	4680      	mov	r8, r0
 80016a6:	4689      	mov	r9, r1
 80016a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016aa:	f7fe ff85 	bl	80005b8 <__aeabi_f2d>
 80016ae:	4682      	mov	sl, r0
 80016b0:	468b      	mov	fp, r1
 80016b2:	69f8      	ldr	r0, [r7, #28]
 80016b4:	f7fe ff80 	bl	80005b8 <__aeabi_f2d>
 80016b8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80016bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016be:	f7fe ff7b 	bl	80005b8 <__aeabi_f2d>
 80016c2:	e9c7 0100 	strd	r0, r1, [r7]
 80016c6:	6a38      	ldr	r0, [r7, #32]
 80016c8:	f7fe ff76 	bl	80005b8 <__aeabi_f2d>
 80016cc:	4604      	mov	r4, r0
 80016ce:	460d      	mov	r5, r1
 80016d0:	69b8      	ldr	r0, [r7, #24]
 80016d2:	f7fe ff71 	bl	80005b8 <__aeabi_f2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80016de:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80016e2:	ed97 7b00 	vldr	d7, [r7]
 80016e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80016ea:	ed97 7b02 	vldr	d7, [r7, #8]
 80016ee:	ed8d 7b04 	vstr	d7, [sp, #16]
 80016f2:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80016f6:	e9cd 8900 	strd	r8, r9, [sp]
 80016fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016fe:	480b      	ldr	r0, [pc, #44]	; (800172c <PrintAdc1Channels+0x120>)
 8001700:	f004 faea 	bl	8005cd8 <UartPrintf>
			   "5V Ref:    %4.3f mV\n"
			   "CabTemp:   %4.3f mV\n",
			   pressureSensor1Print, pressureSensor2Print, pressureSensor3Print, pressureSensor4Print,
			   twelveVoltPrint, fiveVoltRefPrint, cabTempPrint);

	adc1DmaComplete = false;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <PrintAdc1Channels+0x114>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, adc1Values, NUM_ADC1_CHANNELS);
 800170a:	2207      	movs	r2, #7
 800170c:	4905      	ldr	r1, [pc, #20]	; (8001724 <PrintAdc1Channels+0x118>)
 800170e:	4803      	ldr	r0, [pc, #12]	; (800171c <PrintAdc1Channels+0x110>)
 8001710:	f007 fcfa 	bl	8009108 <HAL_ADC_Start_DMA>
}
 8001714:	3738      	adds	r7, #56	; 0x38
 8001716:	46bd      	mov	sp, r7
 8001718:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800171c:	20004a04 	.word	0x20004a04
 8001720:	20000588 	.word	0x20000588
 8001724:	2000058c 	.word	0x2000058c
 8001728:	080209c8 	.word	0x080209c8
 800172c:	080209e8 	.word	0x080209e8

08001730 <PrintAdc1ChannelsSpecifiedNumberOfTimes>:

void PrintAdc1ChannelsSpecifiedNumberOfTimes( uint16_t numReads )
{
 8001730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001734:	b09e      	sub	sp, #120	; 0x78
 8001736:	af0c      	add	r7, sp, #48	; 0x30
 8001738:	4603      	mov	r3, r0
 800173a:	83fb      	strh	r3, [r7, #30]
	// Get fresh ADC values for print out
	HAL_ADC_Stop_DMA(&hadc1);
 800173c:	484b      	ldr	r0, [pc, #300]	; (800186c <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x13c>)
 800173e:	f007 fddd 	bl	80092fc <HAL_ADC_Stop_DMA>

	adc1DmaComplete = false;
 8001742:	4b4b      	ldr	r3, [pc, #300]	; (8001870 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x140>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, adc1Values, NUM_ADC1_CHANNELS);
 8001748:	2207      	movs	r2, #7
 800174a:	494a      	ldr	r1, [pc, #296]	; (8001874 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x144>)
 800174c:	4847      	ldr	r0, [pc, #284]	; (800186c <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x13c>)
 800174e:	f007 fcdb 	bl	8009108 <HAL_ADC_Start_DMA>

	UartPrintfWithoutPrompt("  PSensor1  PSensor2  PSensor3  PSensor4  12Volts  5VoltsRef  CabTemp\n");
 8001752:	4849      	ldr	r0, [pc, #292]	; (8001878 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x148>)
 8001754:	f004 fb06 	bl	8005d64 <UartPrintfWithoutPrompt>

	for( int i = 0; i<numReads; i++ )
 8001758:	2300      	movs	r3, #0
 800175a:	647b      	str	r3, [r7, #68]	; 0x44
 800175c:	e07a      	b.n	8001854 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x124>
	{
		// Ensure that DMA is complete before reading ADC 1 values
		uint32_t startWaitTime = HAL_GetTick();
 800175e:	f007 fb91 	bl	8008e84 <HAL_GetTick>
 8001762:	6438      	str	r0, [r7, #64]	; 0x40

		while(adc1DmaComplete == false)
 8001764:	e00a      	b.n	800177c <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x4c>
		{
			if ( (HAL_GetTick() - startWaitTime) > 3 ) // 3 ms
 8001766:	f007 fb8d 	bl	8008e84 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b03      	cmp	r3, #3
 8001772:	d903      	bls.n	800177c <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x4c>
			{
				UartPrintf("ADC1 DMA not complete for 3 ms\n");
 8001774:	4841      	ldr	r0, [pc, #260]	; (800187c <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x14c>)
 8001776:	f004 faaf 	bl	8005cd8 <UartPrintf>
				return; // Wait too long for ADC1 DMA to complete
 800177a:	e072      	b.n	8001862 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x132>
		while(adc1DmaComplete == false)
 800177c:	4b3c      	ldr	r3, [pc, #240]	; (8001870 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x140>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	f083 0301 	eor.w	r3, r3, #1
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1ed      	bne.n	8001766 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x36>
			}
		}

		HAL_ADC_Stop_DMA(&hadc1);
 800178a:	4838      	ldr	r0, [pc, #224]	; (800186c <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x13c>)
 800178c:	f007 fdb6 	bl	80092fc <HAL_ADC_Stop_DMA>

		// Read ADC1 values for pressure sensors
		float pressureSensor3Print = GetPressureSensor3Value();
 8001790:	f7ff fc86 	bl	80010a0 <GetPressureSensor3Value>
 8001794:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		float pressureSensor1Print = GetPressureSensor1Value();
 8001798:	f7ff fc98 	bl	80010cc <GetPressureSensor1Value>
 800179c:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
		float pressureSensor2Print = GetPressureSensor2Value();
 80017a0:	f7ff fcaa 	bl	80010f8 <GetPressureSensor2Value>
 80017a4:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
		float twelveVoltPrint      = Get12vValue();
 80017a8:	f7ff fdda 	bl	8001360 <Get12vValue>
 80017ac:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
		float fiveVoltRefPrint     = Get5VRefValue();
 80017b0:	f7ff fdec 	bl	800138c <Get5VRefValue>
 80017b4:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
		float pressureSensor4Print = GetPressureSensor4Value();
 80017b8:	f7ff fcb4 	bl	8001124 <GetPressureSensor4Value>
 80017bc:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
		float cabTempPrint         = GetCabTempValue();
 80017c0:	f7ff fdfa 	bl	80013b8 <GetCabTempValue>
 80017c4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

		adc1DmaComplete = false;
 80017c8:	4b29      	ldr	r3, [pc, #164]	; (8001870 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x140>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]

		HAL_ADC_Start_DMA(&hadc1, adc1Values, NUM_ADC1_CHANNELS);
 80017ce:	2207      	movs	r2, #7
 80017d0:	4928      	ldr	r1, [pc, #160]	; (8001874 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x144>)
 80017d2:	4826      	ldr	r0, [pc, #152]	; (800186c <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x13c>)
 80017d4:	f007 fc98 	bl	8009108 <HAL_ADC_Start_DMA>

		UartPrintfWithoutPrompt("%4.3f   %4.3f   %4.3f   %4.3f   %4.3f   %4.3f   %4.3f\n",
 80017d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80017da:	f7fe feed 	bl	80005b8 <__aeabi_f2d>
 80017de:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80017e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017e4:	f7fe fee8 	bl	80005b8 <__aeabi_f2d>
 80017e8:	4680      	mov	r8, r0
 80017ea:	4689      	mov	r9, r1
 80017ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80017ee:	f7fe fee3 	bl	80005b8 <__aeabi_f2d>
 80017f2:	4682      	mov	sl, r0
 80017f4:	468b      	mov	fp, r1
 80017f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017f8:	f7fe fede 	bl	80005b8 <__aeabi_f2d>
 80017fc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001802:	f7fe fed9 	bl	80005b8 <__aeabi_f2d>
 8001806:	e9c7 0100 	strd	r0, r1, [r7]
 800180a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800180c:	f7fe fed4 	bl	80005b8 <__aeabi_f2d>
 8001810:	4604      	mov	r4, r0
 8001812:	460d      	mov	r5, r1
 8001814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001816:	f7fe fecf 	bl	80005b8 <__aeabi_f2d>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001822:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001826:	ed97 7b00 	vldr	d7, [r7]
 800182a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800182e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001832:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001836:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800183a:	e9cd 8900 	strd	r8, r9, [sp]
 800183e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001842:	480f      	ldr	r0, [pc, #60]	; (8001880 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x150>)
 8001844:	f004 fa8e 	bl	8005d64 <UartPrintfWithoutPrompt>
				               pressureSensor1Print, pressureSensor2Print, pressureSensor3Print, pressureSensor4Print,
							   twelveVoltPrint, fiveVoltRefPrint, cabTempPrint);

		HAL_Delay(5);
 8001848:	2005      	movs	r0, #5
 800184a:	f007 fb27 	bl	8008e9c <HAL_Delay>
	for( int i = 0; i<numReads; i++ )
 800184e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001850:	3301      	adds	r3, #1
 8001852:	647b      	str	r3, [r7, #68]	; 0x44
 8001854:	8bfb      	ldrh	r3, [r7, #30]
 8001856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001858:	429a      	cmp	r2, r3
 800185a:	db80      	blt.n	800175e <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x2e>
	}

	UartPrintf("");
 800185c:	4809      	ldr	r0, [pc, #36]	; (8001884 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x154>)
 800185e:	f004 fa3b 	bl	8005cd8 <UartPrintf>
}
 8001862:	3748      	adds	r7, #72	; 0x48
 8001864:	46bd      	mov	sp, r7
 8001866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800186a:	bf00      	nop
 800186c:	20004a04 	.word	0x20004a04
 8001870:	20000588 	.word	0x20000588
 8001874:	2000058c 	.word	0x2000058c
 8001878:	08020a78 	.word	0x08020a78
 800187c:	080209c8 	.word	0x080209c8
 8001880:	08020ac0 	.word	0x08020ac0
 8001884:	08020af8 	.word	0x08020af8

08001888 <ReadAdc3Channels>:

void ReadAdc3Channels()
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
	// Get fresh ADC values for print out
	HAL_ADC_Stop_DMA(&hadc3);
 800188e:	4812      	ldr	r0, [pc, #72]	; (80018d8 <ReadAdc3Channels+0x50>)
 8001890:	f007 fd34 	bl	80092fc <HAL_ADC_Stop_DMA>

	adc3DmaComplete = false;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <ReadAdc3Channels+0x54>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc3, adc3Values, NUM_ADC3_CHANNELS);
 800189a:	2208      	movs	r2, #8
 800189c:	4910      	ldr	r1, [pc, #64]	; (80018e0 <ReadAdc3Channels+0x58>)
 800189e:	480e      	ldr	r0, [pc, #56]	; (80018d8 <ReadAdc3Channels+0x50>)
 80018a0:	f007 fc32 	bl	8009108 <HAL_ADC_Start_DMA>

	// Ensure that DMA is complete before reading ADC 1 values
	uint32_t startWaitTime = HAL_GetTick();
 80018a4:	f007 faee 	bl	8008e84 <HAL_GetTick>
 80018a8:	6078      	str	r0, [r7, #4]

	while(adc3DmaComplete == false)
 80018aa:	e00a      	b.n	80018c2 <ReadAdc3Channels+0x3a>
	{
		if ( (HAL_GetTick() - startWaitTime) > 3 ) // 3 ms
 80018ac:	f007 faea 	bl	8008e84 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d903      	bls.n	80018c2 <ReadAdc3Channels+0x3a>
		{
			UartPrintf("ADC3 DMA not complete for 3 ms\n");
 80018ba:	480a      	ldr	r0, [pc, #40]	; (80018e4 <ReadAdc3Channels+0x5c>)
 80018bc:	f004 fa0c 	bl	8005cd8 <UartPrintf>
			return; // Wait too long for ADC1 DMA to complete
 80018c0:	e006      	b.n	80018d0 <ReadAdc3Channels+0x48>
	while(adc3DmaComplete == false)
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <ReadAdc3Channels+0x54>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	f083 0301 	eor.w	r3, r3, #1
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1ed      	bne.n	80018ac <ReadAdc3Channels+0x24>
		}
	}
}
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20004a4c 	.word	0x20004a4c
 80018dc:	20000589 	.word	0x20000589
 80018e0:	200005a8 	.word	0x200005a8
 80018e4:	08020afc 	.word	0x08020afc

080018e8 <PrintAdc3Channels>:

void PrintAdc3Channels( )
{
 80018e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018ec:	b0a0      	sub	sp, #128	; 0x80
 80018ee:	af0e      	add	r7, sp, #56	; 0x38
	// Get fresh ADC values for print out
	HAL_ADC_Stop_DMA(&hadc3);
 80018f0:	4848      	ldr	r0, [pc, #288]	; (8001a14 <PrintAdc3Channels+0x12c>)
 80018f2:	f007 fd03 	bl	80092fc <HAL_ADC_Stop_DMA>

	adc3DmaComplete = false;
 80018f6:	4b48      	ldr	r3, [pc, #288]	; (8001a18 <PrintAdc3Channels+0x130>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc3, adc3Values, NUM_ADC3_CHANNELS);
 80018fc:	2208      	movs	r2, #8
 80018fe:	4947      	ldr	r1, [pc, #284]	; (8001a1c <PrintAdc3Channels+0x134>)
 8001900:	4844      	ldr	r0, [pc, #272]	; (8001a14 <PrintAdc3Channels+0x12c>)
 8001902:	f007 fc01 	bl	8009108 <HAL_ADC_Start_DMA>

	// Ensure that DMA is complete before reading ADC 1 values
	uint32_t startWaitTime = HAL_GetTick();
 8001906:	f007 fabd 	bl	8008e84 <HAL_GetTick>
 800190a:	6478      	str	r0, [r7, #68]	; 0x44

	while(adc3DmaComplete == false)
 800190c:	e00a      	b.n	8001924 <PrintAdc3Channels+0x3c>
	{
		if ( (HAL_GetTick() - startWaitTime) > 3 ) // 3 ms
 800190e:	f007 fab9 	bl	8008e84 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b03      	cmp	r3, #3
 800191a:	d903      	bls.n	8001924 <PrintAdc3Channels+0x3c>
		{
			UartPrintf("ADC3 DMA not complete for 3 ms\n");
 800191c:	4840      	ldr	r0, [pc, #256]	; (8001a20 <PrintAdc3Channels+0x138>)
 800191e:	f004 f9db 	bl	8005cd8 <UartPrintf>
			return; // Wait too long for ADC3 DMA to complete
 8001922:	e072      	b.n	8001a0a <PrintAdc3Channels+0x122>
	while(adc3DmaComplete == false)
 8001924:	4b3c      	ldr	r3, [pc, #240]	; (8001a18 <PrintAdc3Channels+0x130>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	f083 0301 	eor.w	r3, r3, #1
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1ed      	bne.n	800190e <PrintAdc3Channels+0x26>
		}
	}

	HAL_ADC_Stop_DMA(&hadc3);
 8001932:	4838      	ldr	r0, [pc, #224]	; (8001a14 <PrintAdc3Channels+0x12c>)
 8001934:	f007 fce2 	bl	80092fc <HAL_ADC_Stop_DMA>

	// Read ADC3 values
	float mainPcbaCurrentPrint = GetMainPcbaCurrentValue();
 8001938:	f7ff fd88 	bl	800144c <GetMainPcbaCurrentValue>
 800193c:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
	float power24VPrint        = GetPower24VoltageValue();
 8001940:	f7ff fd9a 	bl	8001478 <GetPower24VoltageValue>
 8001944:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	float threethreeVoltsPrint = Get3V3Value();
 8001948:	f7ff fdac 	bl	80014a4 <Get3V3Value>
 800194c:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
	float fiveVoltsPrint       = Get5VoltValue();
 8001950:	f7ff fdbe 	bl	80014d0 <Get5VoltValue>
 8001954:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float pfcCurrentMonPrint   = GetPfcCurrentMonValue();
 8001958:	f7ff fdd0 	bl	80014fc <GetPfcCurrentMonValue>
 800195c:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	float buzzerPrint          = GetBuzzerValue();
 8001960:	f7ff fde2 	bl	8001528 <GetBuzzerValue>
 8001964:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float pfcVoutPrint         = GetPfcVOutValue();
 8001968:	f7ff fdf4 	bl	8001554 <GetPfcVOutValue>
 800196c:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    float pfcTempMonPrint      = GetPfcTempMonValue();
 8001970:	f7ff fe06 	bl	8001580 <GetPfcTempMonValue>
 8001974:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	UartPrintf("\nMain Current:  %4.3f mA\n"
 8001978:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800197a:	f7fe fe1d 	bl	80005b8 <__aeabi_f2d>
 800197e:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001982:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001984:	f7fe fe18 	bl	80005b8 <__aeabi_f2d>
 8001988:	4682      	mov	sl, r0
 800198a:	468b      	mov	fp, r1
 800198c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800198e:	f7fe fe13 	bl	80005b8 <__aeabi_f2d>
 8001992:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001996:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001998:	f7fe fe0e 	bl	80005b8 <__aeabi_f2d>
 800199c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80019a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019a2:	f7fe fe09 	bl	80005b8 <__aeabi_f2d>
 80019a6:	e9c7 0100 	strd	r0, r1, [r7]
 80019aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019ac:	f7fe fe04 	bl	80005b8 <__aeabi_f2d>
 80019b0:	4680      	mov	r8, r0
 80019b2:	4689      	mov	r9, r1
 80019b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019b6:	f7fe fdff 	bl	80005b8 <__aeabi_f2d>
 80019ba:	4604      	mov	r4, r0
 80019bc:	460d      	mov	r5, r1
 80019be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019c0:	f7fe fdfa 	bl	80005b8 <__aeabi_f2d>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80019cc:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80019d0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80019d4:	ed97 7b00 	vldr	d7, [r7]
 80019d8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80019dc:	ed97 7b02 	vldr	d7, [r7, #8]
 80019e0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80019e4:	ed97 7b04 	vldr	d7, [r7, #16]
 80019e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80019ec:	e9cd ab00 	strd	sl, fp, [sp]
 80019f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019f4:	480b      	ldr	r0, [pc, #44]	; (8001a24 <PrintAdc3Channels+0x13c>)
 80019f6:	f004 f96f 	bl	8005cd8 <UartPrintf>
			   "PFC Vout:     %4.3f V\n"
			   "PFC Temp:     %4.3f mV\n",
			   mainPcbaCurrentPrint, power24VPrint, threethreeVoltsPrint, fiveVoltsPrint,
			   pfcCurrentMonPrint, buzzerPrint, pfcVoutPrint, pfcTempMonPrint);

	adc3DmaComplete = false;
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <PrintAdc3Channels+0x130>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc3, adc3Values, NUM_ADC3_CHANNELS);
 8001a00:	2208      	movs	r2, #8
 8001a02:	4906      	ldr	r1, [pc, #24]	; (8001a1c <PrintAdc3Channels+0x134>)
 8001a04:	4803      	ldr	r0, [pc, #12]	; (8001a14 <PrintAdc3Channels+0x12c>)
 8001a06:	f007 fb7f 	bl	8009108 <HAL_ADC_Start_DMA>
}
 8001a0a:	3748      	adds	r7, #72	; 0x48
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a12:	bf00      	nop
 8001a14:	20004a4c 	.word	0x20004a4c
 8001a18:	20000589 	.word	0x20000589
 8001a1c:	200005a8 	.word	0x200005a8
 8001a20:	08020afc 	.word	0x08020afc
 8001a24:	08020b1c 	.word	0x08020b1c

08001a28 <PrintAdc3ChannelsSpecifiedNumberOfTimes>:

void PrintAdc3ChannelsSpecifiedNumberOfTimes( uint16_t numReads )
{
 8001a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a2c:	b0a2      	sub	sp, #136	; 0x88
 8001a2e:	af0e      	add	r7, sp, #56	; 0x38
 8001a30:	4603      	mov	r3, r0
 8001a32:	84fb      	strh	r3, [r7, #38]	; 0x26
	// Get fresh ADC values for print out
	HAL_ADC_Stop_DMA(&hadc3);
 8001a34:	4852      	ldr	r0, [pc, #328]	; (8001b80 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x158>)
 8001a36:	f007 fc61 	bl	80092fc <HAL_ADC_Stop_DMA>

	adc3DmaComplete = false;
 8001a3a:	4b52      	ldr	r3, [pc, #328]	; (8001b84 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x15c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc3, adc3Values, NUM_ADC3_CHANNELS);
 8001a40:	2208      	movs	r2, #8
 8001a42:	4951      	ldr	r1, [pc, #324]	; (8001b88 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x160>)
 8001a44:	484e      	ldr	r0, [pc, #312]	; (8001b80 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x158>)
 8001a46:	f007 fb5f 	bl	8009108 <HAL_ADC_Start_DMA>

	UartPrintfWithoutPrompt("  MainCurrent    Power24V    3.3V    5V    PFCCurrent    Buzzer    PFCVout    PFCTemp\n");
 8001a4a:	4850      	ldr	r0, [pc, #320]	; (8001b8c <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x164>)
 8001a4c:	f004 f98a 	bl	8005d64 <UartPrintfWithoutPrompt>

	for( int i = 0; i<numReads; i++ )
 8001a50:	2300      	movs	r3, #0
 8001a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a54:	e087      	b.n	8001b66 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x13e>
	{
		// Ensure that DMA is complete before reading ADC 1 values
		uint32_t startWaitTime = HAL_GetTick();
 8001a56:	f007 fa15 	bl	8008e84 <HAL_GetTick>
 8001a5a:	64b8      	str	r0, [r7, #72]	; 0x48

		while(adc3DmaComplete == false)
 8001a5c:	e00a      	b.n	8001a74 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x4c>
		{
			if ( (HAL_GetTick() - startWaitTime) > 3 ) // 3 ms
 8001a5e:	f007 fa11 	bl	8008e84 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d903      	bls.n	8001a74 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x4c>
			{
				UartPrintf("ADC3 DMA not complete for 3 ms\n");
 8001a6c:	4848      	ldr	r0, [pc, #288]	; (8001b90 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x168>)
 8001a6e:	f004 f933 	bl	8005cd8 <UartPrintf>
				return; // Wait too long for ADC1 DMA to complete
 8001a72:	e080      	b.n	8001b76 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x14e>
		while(adc3DmaComplete == false)
 8001a74:	4b43      	ldr	r3, [pc, #268]	; (8001b84 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x15c>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	f083 0301 	eor.w	r3, r3, #1
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1ed      	bne.n	8001a5e <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x36>
			}
		}

		HAL_ADC_Stop_DMA(&hadc3);
 8001a82:	483f      	ldr	r0, [pc, #252]	; (8001b80 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x158>)
 8001a84:	f007 fc3a 	bl	80092fc <HAL_ADC_Stop_DMA>

		// Read ADC3 values
		float mainPcbaCurrentPrint = GetMainPcbaCurrentValue();
 8001a88:	f7ff fce0 	bl	800144c <GetMainPcbaCurrentValue>
 8001a8c:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
		float power24VPrint        = GetPower24VoltageValue();
 8001a90:	f7ff fcf2 	bl	8001478 <GetPower24VoltageValue>
 8001a94:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
		float threethreeVoltsPrint = Get3V3Value();
 8001a98:	f7ff fd04 	bl	80014a4 <Get3V3Value>
 8001a9c:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		float fiveVoltsPrint       = Get5VoltValue();
 8001aa0:	f7ff fd16 	bl	80014d0 <Get5VoltValue>
 8001aa4:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
		float pfcCurrentMonPrint   = GetPfcCurrentMonValue();
 8001aa8:	f7ff fd28 	bl	80014fc <GetPfcCurrentMonValue>
 8001aac:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
		float buzzerPrint          = GetBuzzerValue();
 8001ab0:	f7ff fd3a 	bl	8001528 <GetBuzzerValue>
 8001ab4:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
		float pfcVoutPrint         = GetPfcVOutValue();
 8001ab8:	f7ff fd4c 	bl	8001554 <GetPfcVOutValue>
 8001abc:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	    float pfcTempMonPrint      = GetPfcTempMonValue();
 8001ac0:	f7ff fd5e 	bl	8001580 <GetPfcTempMonValue>
 8001ac4:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28


		adc3DmaComplete = false;
 8001ac8:	4b2e      	ldr	r3, [pc, #184]	; (8001b84 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x15c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]

		HAL_ADC_Start_DMA(&hadc3, adc3Values, NUM_ADC3_CHANNELS);
 8001ace:	2208      	movs	r2, #8
 8001ad0:	492d      	ldr	r1, [pc, #180]	; (8001b88 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x160>)
 8001ad2:	482b      	ldr	r0, [pc, #172]	; (8001b80 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x158>)
 8001ad4:	f007 fb18 	bl	8009108 <HAL_ADC_Start_DMA>

		UartPrintfWithoutPrompt("%4.3f    %4.3f    %4.3f    %4.3f    %4.3f    %4.3f   %4.3f    %4.3f\n",
 8001ad8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001ada:	f7fe fd6d 	bl	80005b8 <__aeabi_f2d>
 8001ade:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001ae2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001ae4:	f7fe fd68 	bl	80005b8 <__aeabi_f2d>
 8001ae8:	4682      	mov	sl, r0
 8001aea:	468b      	mov	fp, r1
 8001aec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001aee:	f7fe fd63 	bl	80005b8 <__aeabi_f2d>
 8001af2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001af6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001af8:	f7fe fd5e 	bl	80005b8 <__aeabi_f2d>
 8001afc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b02:	f7fe fd59 	bl	80005b8 <__aeabi_f2d>
 8001b06:	e9c7 0100 	strd	r0, r1, [r7]
 8001b0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b0c:	f7fe fd54 	bl	80005b8 <__aeabi_f2d>
 8001b10:	4680      	mov	r8, r0
 8001b12:	4689      	mov	r9, r1
 8001b14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b16:	f7fe fd4f 	bl	80005b8 <__aeabi_f2d>
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	460d      	mov	r5, r1
 8001b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b20:	f7fe fd4a 	bl	80005b8 <__aeabi_f2d>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001b2c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8001b30:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001b34:	ed97 7b00 	vldr	d7, [r7]
 8001b38:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001b3c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001b40:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001b44:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001b4c:	e9cd ab00 	strd	sl, fp, [sp]
 8001b50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b54:	480f      	ldr	r0, [pc, #60]	; (8001b94 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x16c>)
 8001b56:	f004 f905 	bl	8005d64 <UartPrintfWithoutPrompt>
				                mainPcbaCurrentPrint, power24VPrint, threethreeVoltsPrint, fiveVoltsPrint,
							    pfcCurrentMonPrint, buzzerPrint, pfcVoutPrint, pfcTempMonPrint);

		HAL_Delay(5);
 8001b5a:	2005      	movs	r0, #5
 8001b5c:	f007 f99e 	bl	8008e9c <HAL_Delay>
	for( int i = 0; i<numReads; i++ )
 8001b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b62:	3301      	adds	r3, #1
 8001b64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	f6ff af73 	blt.w	8001a56 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x2e>
	}

	UartPrintf("");
 8001b70:	4809      	ldr	r0, [pc, #36]	; (8001b98 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x170>)
 8001b72:	f004 f8b1 	bl	8005cd8 <UartPrintf>
}
 8001b76:	3750      	adds	r7, #80	; 0x50
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b7e:	bf00      	nop
 8001b80:	20004a4c 	.word	0x20004a4c
 8001b84:	20000589 	.word	0x20000589
 8001b88:	200005a8 	.word	0x200005a8
 8001b8c:	08020bd4 	.word	0x08020bd4
 8001b90:	08020afc 	.word	0x08020afc
 8001b94:	08020c2c 	.word	0x08020c2c
 8001b98:	08020af8 	.word	0x08020af8

08001b9c <BUZZER_Request>:
 * wWaitNextSequenceMs time wait for next sequence start
 */

void BUZZER_Request(BUZZER_TONE_TYPE eBuzzerType, uint16_t wOnTimeMs, uint16_t wOffTimeMs,
		            uint16_t wWaitBetweenBeepMs, uint16_t wWaitNextSequenceMs)
{
 8001b9c:	b490      	push	{r4, r7}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	4608      	mov	r0, r1
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4623      	mov	r3, r4
 8001bac:	71fb      	strb	r3, [r7, #7]
 8001bae:	4603      	mov	r3, r0
 8001bb0:	80bb      	strh	r3, [r7, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	807b      	strh	r3, [r7, #2]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	803b      	strh	r3, [r7, #0]
	gstBuzzer->wOnDuration5MsCounts               = (wOnTimeMs / BUZZER_RUN_TIMER_PERIOD_MS);
 8001bba:	4b33      	ldr	r3, [pc, #204]	; (8001c88 <BUZZER_Request+0xec>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	88ba      	ldrh	r2, [r7, #4]
 8001bc0:	4932      	ldr	r1, [pc, #200]	; (8001c8c <BUZZER_Request+0xf0>)
 8001bc2:	fba1 1202 	umull	r1, r2, r1, r2
 8001bc6:	0892      	lsrs	r2, r2, #2
 8001bc8:	b292      	uxth	r2, r2
 8001bca:	809a      	strh	r2, [r3, #4]
	gstBuzzer->wOffDuration5MsCounts              = (wOffTimeMs / BUZZER_RUN_TIMER_PERIOD_MS);
 8001bcc:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <BUZZER_Request+0xec>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	887a      	ldrh	r2, [r7, #2]
 8001bd2:	492e      	ldr	r1, [pc, #184]	; (8001c8c <BUZZER_Request+0xf0>)
 8001bd4:	fba1 1202 	umull	r1, r2, r1, r2
 8001bd8:	0892      	lsrs	r2, r2, #2
 8001bda:	b292      	uxth	r2, r2
 8001bdc:	80da      	strh	r2, [r3, #6]
	gstBuzzer->wWaitBetweenBeepDuration5MsCounts  = (wWaitBetweenBeepMs / BUZZER_RUN_TIMER_PERIOD_MS);
 8001bde:	4b2a      	ldr	r3, [pc, #168]	; (8001c88 <BUZZER_Request+0xec>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	883a      	ldrh	r2, [r7, #0]
 8001be4:	4929      	ldr	r1, [pc, #164]	; (8001c8c <BUZZER_Request+0xf0>)
 8001be6:	fba1 1202 	umull	r1, r2, r1, r2
 8001bea:	0892      	lsrs	r2, r2, #2
 8001bec:	b292      	uxth	r2, r2
 8001bee:	811a      	strh	r2, [r3, #8]
	gstBuzzer->wWaitNextSequenceDuration5MsCounts = (wWaitNextSequenceMs / BUZZER_RUN_TIMER_PERIOD_MS);
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <BUZZER_Request+0xec>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	8a3a      	ldrh	r2, [r7, #16]
 8001bf6:	4925      	ldr	r1, [pc, #148]	; (8001c8c <BUZZER_Request+0xf0>)
 8001bf8:	fba1 1202 	umull	r1, r2, r1, r2
 8001bfc:	0892      	lsrs	r2, r2, #2
 8001bfe:	b292      	uxth	r2, r2
 8001c00:	815a      	strh	r2, [r3, #10]
	gstBuzzer->eBuzzerType                        = eBuzzerType;
 8001c02:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <BUZZER_Request+0xec>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	79fa      	ldrb	r2, [r7, #7]
 8001c08:	705a      	strb	r2, [r3, #1]

	switch(eBuzzerType)
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d024      	beq.n	8001c5a <BUZZER_Request+0xbe>
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	dc2f      	bgt.n	8001c74 <BUZZER_Request+0xd8>
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <BUZZER_Request+0x82>
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d011      	beq.n	8001c40 <BUZZER_Request+0xa4>
 8001c1c:	e02a      	b.n	8001c74 <BUZZER_Request+0xd8>
	{
	    case BUZZER_TONE_OFF:
	    {
	    	gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <BUZZER_Request+0xec>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
	    	htim2.Instance->CCR4   = 0;
 8001c26:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <BUZZER_Request+0xf4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40
	    	gstBuzzer->wNumBeeps1   = 0;
 8001c2e:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <BUZZER_Request+0xec>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2200      	movs	r2, #0
 8001c34:	709a      	strb	r2, [r3, #2]
	    	gstBuzzer->wNumBeeps2   = 0;
 8001c36:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <BUZZER_Request+0xec>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	70da      	strb	r2, [r3, #3]
	    }
		break;
 8001c3e:	e01e      	b.n	8001c7e <BUZZER_Request+0xe2>

	    case BUZZER_TONE_MED:
	    {
	    	gstBuzzer->eBuzzerState = eBuzzerState_Initiate;
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <BUZZER_Request+0xec>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
	    	gstBuzzer->wNumBeeps1   = 3;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <BUZZER_Request+0xec>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	709a      	strb	r2, [r3, #2]
	    	gstBuzzer->wNumBeeps2   = 0;
 8001c50:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <BUZZER_Request+0xec>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2200      	movs	r2, #0
 8001c56:	70da      	strb	r2, [r3, #3]
	    }
		break;
 8001c58:	e011      	b.n	8001c7e <BUZZER_Request+0xe2>

	    case BUZZER_TONE_HIGH:
	    {
	    	gstBuzzer->eBuzzerState = eBuzzerState_Initiate;
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <BUZZER_Request+0xec>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	701a      	strb	r2, [r3, #0]
	    	gstBuzzer->wNumBeeps1   = 3;
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <BUZZER_Request+0xec>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2203      	movs	r2, #3
 8001c68:	709a      	strb	r2, [r3, #2]
	    	gstBuzzer->wNumBeeps2   = 2;
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <BUZZER_Request+0xec>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	70da      	strb	r2, [r3, #3]
	    }
	    break;
 8001c72:	e004      	b.n	8001c7e <BUZZER_Request+0xe2>

	    default:
	    	gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <BUZZER_Request+0xec>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
		break;
 8001c7c:	bf00      	nop
	}
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc90      	pop	{r4, r7}
 8001c86:	4770      	bx	lr
 8001c88:	200005d4 	.word	0x200005d4
 8001c8c:	cccccccd 	.word	0xcccccccd
 8001c90:	20006ed8 	.word	0x20006ed8

08001c94 <BUZZER_Run>:


void BUZZER_Run(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	static uint16_t wWaitCounts = 0;
	static uint8_t  wBeepCounts = 0;

	switch(gstBuzzer->eBuzzerState)
 8001c98:	4b9a      	ldr	r3, [pc, #616]	; (8001f04 <BUZZER_Run+0x270>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b07      	cmp	r3, #7
 8001ca0:	f200 811f 	bhi.w	8001ee2 <BUZZER_Run+0x24e>
 8001ca4:	a201      	add	r2, pc, #4	; (adr r2, 8001cac <BUZZER_Run+0x18>)
 8001ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001caa:	bf00      	nop
 8001cac:	08001eed 	.word	0x08001eed
 8001cb0:	08001ccd 	.word	0x08001ccd
 8001cb4:	08001d0f 	.word	0x08001d0f
 8001cb8:	08001d5f 	.word	0x08001d5f
 8001cbc:	08001dcf 	.word	0x08001dcf
 8001cc0:	08001e27 	.word	0x08001e27
 8001cc4:	08001e75 	.word	0x08001e75
 8001cc8:	08001ec5 	.word	0x08001ec5
		break;

		//Set up timer for buzzer on then go to next
		//state to wait for the on time expire
		case eBuzzerState_Initiate:
			if( gstBuzzer->wNumBeeps1 && gstBuzzer->wOnDuration5MsCounts )
 8001ccc:	4b8d      	ldr	r3, [pc, #564]	; (8001f04 <BUZZER_Run+0x270>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	789b      	ldrb	r3, [r3, #2]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d016      	beq.n	8001d04 <BUZZER_Run+0x70>
 8001cd6:	4b8b      	ldr	r3, [pc, #556]	; (8001f04 <BUZZER_Run+0x270>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	889b      	ldrh	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d011      	beq.n	8001d04 <BUZZER_Run+0x70>
			{
				//get the time Buzzer need to be ON
				wWaitCounts             = gstBuzzer->wOnDuration5MsCounts;
 8001ce0:	4b88      	ldr	r3, [pc, #544]	; (8001f04 <BUZZER_Run+0x270>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	889a      	ldrh	r2, [r3, #4]
 8001ce6:	4b88      	ldr	r3, [pc, #544]	; (8001f08 <BUZZER_Run+0x274>)
 8001ce8:	801a      	strh	r2, [r3, #0]
				wBeepCounts             = gstBuzzer->wNumBeeps1;
 8001cea:	4b86      	ldr	r3, [pc, #536]	; (8001f04 <BUZZER_Run+0x270>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	789a      	ldrb	r2, [r3, #2]
 8001cf0:	4b86      	ldr	r3, [pc, #536]	; (8001f0c <BUZZER_Run+0x278>)
 8001cf2:	701a      	strb	r2, [r3, #0]
				gstBuzzer->eBuzzerState = eBuzzerState_BeepOn;
 8001cf4:	4b83      	ldr	r3, [pc, #524]	; (8001f04 <BUZZER_Run+0x270>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	701a      	strb	r2, [r3, #0]
				BUZZER_EnableSound( true );
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f000 f91d 	bl	8001f3c <BUZZER_EnableSound>
			}
			else {
				gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
			}
		break;
 8001d02:	e106      	b.n	8001f12 <BUZZER_Run+0x27e>
				gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
 8001d04:	4b7f      	ldr	r3, [pc, #508]	; (8001f04 <BUZZER_Run+0x270>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
		break;
 8001d0c:	e101      	b.n	8001f12 <BUZZER_Run+0x27e>

		case eBuzzerState_BeepOn:
			if( --wWaitCounts == 0 )
 8001d0e:	4b7e      	ldr	r3, [pc, #504]	; (8001f08 <BUZZER_Run+0x274>)
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	4b7c      	ldr	r3, [pc, #496]	; (8001f08 <BUZZER_Run+0x274>)
 8001d18:	801a      	strh	r2, [r3, #0]
 8001d1a:	4b7b      	ldr	r3, [pc, #492]	; (8001f08 <BUZZER_Run+0x274>)
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f040 80e6 	bne.w	8001ef0 <BUZZER_Run+0x25c>
			{

				BUZZER_EnableSound( false );
 8001d24:	2000      	movs	r0, #0
 8001d26:	f000 f909 	bl	8001f3c <BUZZER_EnableSound>
				wBeepCounts--;
 8001d2a:	4b78      	ldr	r3, [pc, #480]	; (8001f0c <BUZZER_Run+0x278>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4b76      	ldr	r3, [pc, #472]	; (8001f0c <BUZZER_Run+0x278>)
 8001d34:	701a      	strb	r2, [r3, #0]

				if( gstBuzzer->wOffDuration5MsCounts ) {
 8001d36:	4b73      	ldr	r3, [pc, #460]	; (8001f04 <BUZZER_Run+0x270>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	88db      	ldrh	r3, [r3, #6]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d009      	beq.n	8001d54 <BUZZER_Run+0xc0>
					gstBuzzer->eBuzzerState = eBuzzerState_BeepOff;
 8001d40:	4b70      	ldr	r3, [pc, #448]	; (8001f04 <BUZZER_Run+0x270>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2203      	movs	r2, #3
 8001d46:	701a      	strb	r2, [r3, #0]
					wWaitCounts = gstBuzzer->wOffDuration5MsCounts;
 8001d48:	4b6e      	ldr	r3, [pc, #440]	; (8001f04 <BUZZER_Run+0x270>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	88da      	ldrh	r2, [r3, #6]
 8001d4e:	4b6e      	ldr	r3, [pc, #440]	; (8001f08 <BUZZER_Run+0x274>)
 8001d50:	801a      	strh	r2, [r3, #0]
				} else {
					gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
				}
			}
		break;
 8001d52:	e0cd      	b.n	8001ef0 <BUZZER_Run+0x25c>
					gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
 8001d54:	4b6b      	ldr	r3, [pc, #428]	; (8001f04 <BUZZER_Run+0x270>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
		break;
 8001d5c:	e0c8      	b.n	8001ef0 <BUZZER_Run+0x25c>

		case eBuzzerState_BeepOff:
			if( --wWaitCounts == 0 )
 8001d5e:	4b6a      	ldr	r3, [pc, #424]	; (8001f08 <BUZZER_Run+0x274>)
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	4b68      	ldr	r3, [pc, #416]	; (8001f08 <BUZZER_Run+0x274>)
 8001d68:	801a      	strh	r2, [r3, #0]
 8001d6a:	4b67      	ldr	r3, [pc, #412]	; (8001f08 <BUZZER_Run+0x274>)
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f040 80c0 	bne.w	8001ef4 <BUZZER_Run+0x260>
			{
				if( wBeepCounts == 0 )
 8001d74:	4b65      	ldr	r3, [pc, #404]	; (8001f0c <BUZZER_Run+0x278>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d11b      	bne.n	8001db4 <BUZZER_Run+0x120>
				{
					BUZZER_EnableSound( false );
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f000 f8dd 	bl	8001f3c <BUZZER_EnableSound>
					// No more beeps to do, from 1st sequence
					if(gstBuzzer->eBuzzerType == BUZZER_TONE_MED)
 8001d82:	4b60      	ldr	r3, [pc, #384]	; (8001f04 <BUZZER_Run+0x270>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	785b      	ldrb	r3, [r3, #1]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d109      	bne.n	8001da0 <BUZZER_Run+0x10c>
					{
						//If Med Prior only 3 bbb is needed, go to wait for next cycle
						gstBuzzer->eBuzzerState = eBuzzerState_PauseBetweenBuzzer;
 8001d8c:	4b5d      	ldr	r3, [pc, #372]	; (8001f04 <BUZZER_Run+0x270>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2207      	movs	r2, #7
 8001d92:	701a      	strb	r2, [r3, #0]
						wWaitCounts = gstBuzzer->wWaitNextSequenceDuration5MsCounts;
 8001d94:	4b5b      	ldr	r3, [pc, #364]	; (8001f04 <BUZZER_Run+0x270>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	895a      	ldrh	r2, [r3, #10]
 8001d9a:	4b5b      	ldr	r3, [pc, #364]	; (8001f08 <BUZZER_Run+0x274>)
 8001d9c:	801a      	strh	r2, [r3, #0]
					gstBuzzer->eBuzzerState = eBuzzerState_BeepOn;
					wWaitCounts = gstBuzzer->wOffDuration5MsCounts;
				    BUZZER_EnableSound( true );
				}
			}
		break;
 8001d9e:	e0a9      	b.n	8001ef4 <BUZZER_Run+0x260>
						gstBuzzer->eBuzzerState = eBuzzerState_BeepSpace;
 8001da0:	4b58      	ldr	r3, [pc, #352]	; (8001f04 <BUZZER_Run+0x270>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2204      	movs	r2, #4
 8001da6:	701a      	strb	r2, [r3, #0]
						wWaitCounts = gstBuzzer->wWaitBetweenBeepDuration5MsCounts;
 8001da8:	4b56      	ldr	r3, [pc, #344]	; (8001f04 <BUZZER_Run+0x270>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	891a      	ldrh	r2, [r3, #8]
 8001dae:	4b56      	ldr	r3, [pc, #344]	; (8001f08 <BUZZER_Run+0x274>)
 8001db0:	801a      	strh	r2, [r3, #0]
		break;
 8001db2:	e09f      	b.n	8001ef4 <BUZZER_Run+0x260>
					gstBuzzer->eBuzzerState = eBuzzerState_BeepOn;
 8001db4:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <BUZZER_Run+0x270>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2202      	movs	r2, #2
 8001dba:	701a      	strb	r2, [r3, #0]
					wWaitCounts = gstBuzzer->wOffDuration5MsCounts;
 8001dbc:	4b51      	ldr	r3, [pc, #324]	; (8001f04 <BUZZER_Run+0x270>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	88da      	ldrh	r2, [r3, #6]
 8001dc2:	4b51      	ldr	r3, [pc, #324]	; (8001f08 <BUZZER_Run+0x274>)
 8001dc4:	801a      	strh	r2, [r3, #0]
				    BUZZER_EnableSound( true );
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f000 f8b8 	bl	8001f3c <BUZZER_EnableSound>
		break;
 8001dcc:	e092      	b.n	8001ef4 <BUZZER_Run+0x260>

		case eBuzzerState_BeepSpace:
			if( --wWaitCounts == 0 )
 8001dce:	4b4e      	ldr	r3, [pc, #312]	; (8001f08 <BUZZER_Run+0x274>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	4b4c      	ldr	r3, [pc, #304]	; (8001f08 <BUZZER_Run+0x274>)
 8001dd8:	801a      	strh	r2, [r3, #0]
 8001dda:	4b4b      	ldr	r3, [pc, #300]	; (8001f08 <BUZZER_Run+0x274>)
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f040 808a 	bne.w	8001ef8 <BUZZER_Run+0x264>
			{
				if( gstBuzzer->wNumBeeps2 && gstBuzzer->wOnDuration5MsCounts )
 8001de4:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <BUZZER_Run+0x270>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	78db      	ldrb	r3, [r3, #3]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d016      	beq.n	8001e1c <BUZZER_Run+0x188>
 8001dee:	4b45      	ldr	r3, [pc, #276]	; (8001f04 <BUZZER_Run+0x270>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	889b      	ldrh	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d011      	beq.n	8001e1c <BUZZER_Run+0x188>
				{
					//get the time Buzzer need to be ON
					wWaitCounts             = gstBuzzer->wOnDuration5MsCounts;
 8001df8:	4b42      	ldr	r3, [pc, #264]	; (8001f04 <BUZZER_Run+0x270>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	889a      	ldrh	r2, [r3, #4]
 8001dfe:	4b42      	ldr	r3, [pc, #264]	; (8001f08 <BUZZER_Run+0x274>)
 8001e00:	801a      	strh	r2, [r3, #0]
					wBeepCounts             = gstBuzzer->wNumBeeps2;
 8001e02:	4b40      	ldr	r3, [pc, #256]	; (8001f04 <BUZZER_Run+0x270>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	78da      	ldrb	r2, [r3, #3]
 8001e08:	4b40      	ldr	r3, [pc, #256]	; (8001f0c <BUZZER_Run+0x278>)
 8001e0a:	701a      	strb	r2, [r3, #0]
					gstBuzzer->eBuzzerState = eBuzzerState_BeepOn2;
 8001e0c:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <BUZZER_Run+0x270>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2205      	movs	r2, #5
 8001e12:	701a      	strb	r2, [r3, #0]
					BUZZER_EnableSound( true );
 8001e14:	2001      	movs	r0, #1
 8001e16:	f000 f891 	bl	8001f3c <BUZZER_EnableSound>
				else
				{
					gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
				}
			}
		break;
 8001e1a:	e06d      	b.n	8001ef8 <BUZZER_Run+0x264>
					gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
 8001e1c:	4b39      	ldr	r3, [pc, #228]	; (8001f04 <BUZZER_Run+0x270>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
		break;
 8001e24:	e068      	b.n	8001ef8 <BUZZER_Run+0x264>

		case eBuzzerState_BeepOn2:
			if( --wWaitCounts == 0 )
 8001e26:	4b38      	ldr	r3, [pc, #224]	; (8001f08 <BUZZER_Run+0x274>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <BUZZER_Run+0x274>)
 8001e30:	801a      	strh	r2, [r3, #0]
 8001e32:	4b35      	ldr	r3, [pc, #212]	; (8001f08 <BUZZER_Run+0x274>)
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d160      	bne.n	8001efc <BUZZER_Run+0x268>
			{
				BUZZER_EnableSound( false );
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f000 f87e 	bl	8001f3c <BUZZER_EnableSound>
				wBeepCounts--;
 8001e40:	4b32      	ldr	r3, [pc, #200]	; (8001f0c <BUZZER_Run+0x278>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b30      	ldr	r3, [pc, #192]	; (8001f0c <BUZZER_Run+0x278>)
 8001e4a:	701a      	strb	r2, [r3, #0]

				if( gstBuzzer->wOffDuration5MsCounts ) {
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <BUZZER_Run+0x270>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	88db      	ldrh	r3, [r3, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d009      	beq.n	8001e6a <BUZZER_Run+0x1d6>
					gstBuzzer->eBuzzerState = eBuzzerState_BeepOff2;
 8001e56:	4b2b      	ldr	r3, [pc, #172]	; (8001f04 <BUZZER_Run+0x270>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2206      	movs	r2, #6
 8001e5c:	701a      	strb	r2, [r3, #0]
					wWaitCounts = gstBuzzer->wOffDuration5MsCounts;
 8001e5e:	4b29      	ldr	r3, [pc, #164]	; (8001f04 <BUZZER_Run+0x270>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	88da      	ldrh	r2, [r3, #6]
 8001e64:	4b28      	ldr	r3, [pc, #160]	; (8001f08 <BUZZER_Run+0x274>)
 8001e66:	801a      	strh	r2, [r3, #0]
				} else {
					gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
				}
			}
		break;
 8001e68:	e048      	b.n	8001efc <BUZZER_Run+0x268>
					gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
 8001e6a:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <BUZZER_Run+0x270>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
		break;
 8001e72:	e043      	b.n	8001efc <BUZZER_Run+0x268>

		case eBuzzerState_BeepOff2:
			if( --wWaitCounts == 0 )
 8001e74:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <BUZZER_Run+0x274>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <BUZZER_Run+0x274>)
 8001e7e:	801a      	strh	r2, [r3, #0]
 8001e80:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <BUZZER_Run+0x274>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d13b      	bne.n	8001f00 <BUZZER_Run+0x26c>
			{
				if( wBeepCounts == 0 )
 8001e88:	4b20      	ldr	r3, [pc, #128]	; (8001f0c <BUZZER_Run+0x278>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10c      	bne.n	8001eaa <BUZZER_Run+0x216>
				{
					BUZZER_EnableSound( false );
 8001e90:	2000      	movs	r0, #0
 8001e92:	f000 f853 	bl	8001f3c <BUZZER_EnableSound>
					// No more beeps to do, from 2 sequence.  Go to wait for next cycle
					gstBuzzer->eBuzzerState = eBuzzerState_PauseBetweenBuzzer;
 8001e96:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <BUZZER_Run+0x270>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2207      	movs	r2, #7
 8001e9c:	701a      	strb	r2, [r3, #0]
					wWaitCounts = gstBuzzer->wWaitNextSequenceDuration5MsCounts;
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <BUZZER_Run+0x270>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	895a      	ldrh	r2, [r3, #10]
 8001ea4:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <BUZZER_Run+0x274>)
 8001ea6:	801a      	strh	r2, [r3, #0]
					gstBuzzer->eBuzzerState = eBuzzerState_BeepOn2;
					wWaitCounts = gstBuzzer->wOffDuration5MsCounts;
					BUZZER_EnableSound( true );
				}
			}
		break;
 8001ea8:	e02a      	b.n	8001f00 <BUZZER_Run+0x26c>
					gstBuzzer->eBuzzerState = eBuzzerState_BeepOn2;
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <BUZZER_Run+0x270>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2205      	movs	r2, #5
 8001eb0:	701a      	strb	r2, [r3, #0]
					wWaitCounts = gstBuzzer->wOffDuration5MsCounts;
 8001eb2:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <BUZZER_Run+0x270>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	88da      	ldrh	r2, [r3, #6]
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <BUZZER_Run+0x274>)
 8001eba:	801a      	strh	r2, [r3, #0]
					BUZZER_EnableSound( true );
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f000 f83d 	bl	8001f3c <BUZZER_EnableSound>
		break;
 8001ec2:	e01d      	b.n	8001f00 <BUZZER_Run+0x26c>

		case eBuzzerState_PauseBetweenBuzzer:
			if( --wWaitCounts == 0 )
 8001ec4:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <BUZZER_Run+0x274>)
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <BUZZER_Run+0x274>)
 8001ece:	801a      	strh	r2, [r3, #0]
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <BUZZER_Run+0x274>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d11b      	bne.n	8001f10 <BUZZER_Run+0x27c>
			{
				//Wait for next cycle kick in
				gstBuzzer->eBuzzerState = eBuzzerState_Initiate;
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <BUZZER_Run+0x270>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2201      	movs	r2, #1
 8001ede:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001ee0:	e016      	b.n	8001f10 <BUZZER_Run+0x27c>

		default:
			gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <BUZZER_Run+0x270>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
		break;
 8001eea:	e012      	b.n	8001f12 <BUZZER_Run+0x27e>
		break;
 8001eec:	bf00      	nop
 8001eee:	e010      	b.n	8001f12 <BUZZER_Run+0x27e>
		break;
 8001ef0:	bf00      	nop
 8001ef2:	e00e      	b.n	8001f12 <BUZZER_Run+0x27e>
		break;
 8001ef4:	bf00      	nop
 8001ef6:	e00c      	b.n	8001f12 <BUZZER_Run+0x27e>
		break;
 8001ef8:	bf00      	nop
 8001efa:	e00a      	b.n	8001f12 <BUZZER_Run+0x27e>
		break;
 8001efc:	bf00      	nop
 8001efe:	e008      	b.n	8001f12 <BUZZER_Run+0x27e>
		break;
 8001f00:	bf00      	nop
 8001f02:	e006      	b.n	8001f12 <BUZZER_Run+0x27e>
 8001f04:	200005d4 	.word	0x200005d4
 8001f08:	200005d8 	.word	0x200005d8
 8001f0c:	200005da 	.word	0x200005da
		break;
 8001f10:	bf00      	nop
	}
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop

08001f18 <BUZZER_Init>:

void BUZZER_Init(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
	c.eBuzzerState = eBuzzerState_Inactive;
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <BUZZER_Init+0x1c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
	gstBuzzer = &c;
 8001f22:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <BUZZER_Init+0x20>)
 8001f24:	4a03      	ldr	r2, [pc, #12]	; (8001f34 <BUZZER_Init+0x1c>)
 8001f26:	601a      	str	r2, [r3, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	200005c8 	.word	0x200005c8
 8001f38:	200005d4 	.word	0x200005d4

08001f3c <BUZZER_EnableSound>:

void BUZZER_EnableSound(bool bOnOff)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
	if(bOnOff)
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d004      	beq.n	8001f56 <BUZZER_EnableSound+0x1a>
	{
		//255 = 100%, 0 = 0%, should not set to 100% since it is all high
		htim2.Instance->CCR4 = BUZZER_50_DUTY;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <BUZZER_EnableSound+0x30>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	227d      	movs	r2, #125	; 0x7d
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		//0 is buzzer off value
		htim2.Instance->CCR4 = 0;
	}
}
 8001f54:	e003      	b.n	8001f5e <BUZZER_EnableSound+0x22>
		htim2.Instance->CCR4 = 0;
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <BUZZER_EnableSound+0x30>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20006ed8 	.word	0x20006ed8

08001f70 <SetSystemState>:

static CONTEXT c;
static CONTEXT* gstDisplayManager;

void SetSystemState( SYSTEM_STATE state )
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
	systemState = state;
 8001f7a:	4a06      	ldr	r2, [pc, #24]	; (8001f94 <SetSystemState+0x24>)
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	7013      	strb	r3, [r2, #0]
	UartPrintf("System State: %d\n", state);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	4619      	mov	r1, r3
 8001f84:	4804      	ldr	r0, [pc, #16]	; (8001f98 <SetSystemState+0x28>)
 8001f86:	f003 fea7 	bl	8005cd8 <UartPrintf>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000009 	.word	0x20000009
 8001f98:	08020c74 	.word	0x08020c74

08001f9c <Display_Init>:

void Display_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	//Init switches
	Switches_Init();
 8001fa0:	f002 f996 	bl	80042d0 <Switches_Init>

    //Init LCD
	LCD_Init();
 8001fa4:	f001 fd60 	bl	8003a68 <LCD_Init>

	//Init buzzer
	BUZZER_Init();
 8001fa8:	f7ff ffb6 	bl	8001f18 <BUZZER_Init>

	c.bSettingMonitorDisplay = false;  //using for toggle Idle displays
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <Display_Init+0x40>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	711a      	strb	r2, [r3, #4]
    c.TimeLastSwitchPress    = 0;
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <Display_Init+0x40>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
    c.TimeLastPageToggle     = 0;
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <Display_Init+0x40>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
    c.eDisplayState          = DISPLAY_STATE_IDLE;
 8001fbe:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <Display_Init+0x40>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	731a      	strb	r2, [r3, #12]

    SetSystemState( SYSTEM_STATE_INITIALIZE ); //To allow ATtiny alarm check
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f7ff ffd3 	bl	8001f70 <SetSystemState>
    //standbyStartTimeMinute = GetMinuteCount();
    //previousMinuteCount = standbyStartTimeMinute;
    //previousMinuteCountSysTick = Get_SysTick();
    prevDisplayId = DISPLAY_ID_STANDBY;
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <Display_Init+0x44>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]

    gstDisplayManager = &c;
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <Display_Init+0x48>)
 8001fd2:	4a02      	ldr	r2, [pc, #8]	; (8001fdc <Display_Init+0x40>)
 8001fd4:	601a      	str	r2, [r3, #0]

}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200005e0 	.word	0x200005e0
 8001fe0:	200005db 	.word	0x200005db
 8001fe4:	200005f0 	.word	0x200005f0

08001fe8 <Display_Manager>:
{
    return systemState;
}

void Display_Manager(void)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
	if( Switches_Scan() == true)
 8001fee:	f002 f9a5 	bl	800433c <Switches_Scan>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d050      	beq.n	800209a <Display_Manager+0xb2>
	{
		// Switch Press
		gstDisplayManager->TimeLastSwitchPress = Get_SysTick();
 8001ff8:	4b3f      	ldr	r3, [pc, #252]	; (80020f8 <Display_Manager+0x110>)
 8001ffa:	681c      	ldr	r4, [r3, #0]
 8001ffc:	f003 ffa2 	bl	8005f44 <Get_SysTick>
 8002000:	4603      	mov	r3, r0
 8002002:	6023      	str	r3, [r4, #0]

		SWITCH_ID eSwitchId;
		KEY_STATUS eKeyStatus;
		DISPLAY_ID displayId;

		Switches_Get_Status(&eSwitchId, &eKeyStatus);
 8002004:	1d7a      	adds	r2, r7, #5
 8002006:	1dbb      	adds	r3, r7, #6
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f002 fa5c 	bl	80044c8 <Switches_Get_Status>

		switch(eSwitchId)
 8002010:	79bb      	ldrb	r3, [r7, #6]
 8002012:	3b01      	subs	r3, #1
 8002014:	2b08      	cmp	r3, #8
 8002016:	d838      	bhi.n	800208a <Display_Manager+0xa2>
 8002018:	a201      	add	r2, pc, #4	; (adr r2, 8002020 <Display_Manager+0x38>)
 800201a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201e:	bf00      	nop
 8002020:	08002045 	.word	0x08002045
 8002024:	0800204b 	.word	0x0800204b
 8002028:	08002055 	.word	0x08002055
 800202c:	0800205b 	.word	0x0800205b
 8002030:	08002065 	.word	0x08002065
 8002034:	0800206b 	.word	0x0800206b
 8002038:	08002071 	.word	0x08002071
 800203c:	08002077 	.word	0x08002077
 8002040:	08002085 	.word	0x08002085
		{
		    case SWITCH_ID_MUTE:
		    	displayId = DISPLAY_ID_MUTE;
 8002044:	2302      	movs	r3, #2
 8002046:	71fb      	strb	r3, [r7, #7]
			break;
 8002048:	e020      	b.n	800208c <Display_Manager+0xa4>

			case SWITCH_ID_START:
			{
				displayId = DISPLAY_ID_START;
 800204a:	2303      	movs	r3, #3
 800204c:	71fb      	strb	r3, [r7, #7]
				LED_Start_On();
 800204e:	f002 fa6f 	bl	8004530 <LED_Start_On>
			}
			break;
 8002052:	e01b      	b.n	800208c <Display_Manager+0xa4>

			case SWITCH_ID_MENU:
				displayId = DISPLAY_ID_MENU;
 8002054:	2304      	movs	r3, #4
 8002056:	71fb      	strb	r3, [r7, #7]
			break;
 8002058:	e018      	b.n	800208c <Display_Manager+0xa4>

			case SWITCH_ID_PAUSE:
			{
				displayId = DISPLAY_ID_PAUSE;
 800205a:	2305      	movs	r3, #5
 800205c:	71fb      	strb	r3, [r7, #7]
				LED_Pause_On();
 800205e:	f002 fa9b 	bl	8004598 <LED_Pause_On>
			}
			break;
 8002062:	e013      	b.n	800208c <Display_Manager+0xa4>

			case SWITCH_ID_LEFT:
				displayId = DISPLAY_ID_LEFT;
 8002064:	2306      	movs	r3, #6
 8002066:	71fb      	strb	r3, [r7, #7]
			break;
 8002068:	e010      	b.n	800208c <Display_Manager+0xa4>

			case SWITCH_ID_UP:
				displayId = DISPLAY_ID_UP;
 800206a:	2307      	movs	r3, #7
 800206c:	71fb      	strb	r3, [r7, #7]
			break;
 800206e:	e00d      	b.n	800208c <Display_Manager+0xa4>

			case SWITCH_ID_DOWN:
				displayId = DISPLAY_ID_DOWN;
 8002070:	2308      	movs	r3, #8
 8002072:	71fb      	strb	r3, [r7, #7]
			break;
 8002074:	e00a      	b.n	800208c <Display_Manager+0xa4>

			case SWITCH_ID_SEL:
			{
				displayId = DISPLAY_ID_SEL;
 8002076:	2309      	movs	r3, #9
 8002078:	71fb      	strb	r3, [r7, #7]
				LED_Pause_Off();
 800207a:	f002 faa7 	bl	80045cc <LED_Pause_Off>
				LED_Start_Off();
 800207e:	f002 fa71 	bl	8004564 <LED_Start_Off>
			}
			break;
 8002082:	e003      	b.n	800208c <Display_Manager+0xa4>

			case SWITCH_ID_RIGHT:
				displayId = DISPLAY_ID_RIGHT;
 8002084:	230a      	movs	r3, #10
 8002086:	71fb      	strb	r3, [r7, #7]
			break;
 8002088:	e000      	b.n	800208c <Display_Manager+0xa4>

			case SWITCH_ID_NONE:
			case SWITCH_ID_COUNT:
			default:
				break;
 800208a:	bf00      	nop
		}

		Display_Page(displayId);
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	4618      	mov	r0, r3
 8002090:	f000 f964 	bl	800235c <Display_Page>
		prevDisplayId = displayId;
 8002094:	4a19      	ldr	r2, [pc, #100]	; (80020fc <Display_Manager+0x114>)
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	7013      	strb	r3, [r2, #0]
	}


	// If screen timeout occurred, go to display idle state
	if( gstDisplayManager->TimeLastSwitchPress &&
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <Display_Manager+0x110>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d014      	beq.n	80020ce <Display_Manager+0xe6>
		((Get_SysTick() - gstDisplayManager->TimeLastSwitchPress) >= screenUpdateWaitTimeSeconds) )
 80020a4:	f003 ff4e 	bl	8005f44 <Get_SysTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <Display_Manager+0x110>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	1ad2      	subs	r2, r2, r3
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <Display_Manager+0x118>)
 80020b4:	681b      	ldr	r3, [r3, #0]
	if( gstDisplayManager->TimeLastSwitchPress &&
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d309      	bcc.n	80020ce <Display_Manager+0xe6>
	{
		gstDisplayManager->TimeLastSwitchPress = 0;
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <Display_Manager+0x110>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
		Display_Page(DISPLAY_ID_STANDBY);
 80020c2:	2001      	movs	r0, #1
 80020c4:	f000 f94a 	bl	800235c <Display_Page>
		prevDisplayId = DISPLAY_ID_STANDBY;
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <Display_Manager+0x114>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
	}

    //Running LED
    LED_Run();
 80020ce:	f001 fe63 	bl	8003d98 <LED_Run>

    //Running Buzzer
    BUZZER_Run();
 80020d2:	f7ff fddf 	bl	8001c94 <BUZZER_Run>

    //Refresh Display after LCD toggle
    if(bRequestDisplayRefresh == true)
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <Display_Manager+0x11c>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d007      	beq.n	80020ee <Display_Manager+0x106>
    {
    	bRequestDisplayRefresh = false;
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <Display_Manager+0x11c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
    	Display_Page( prevDisplayId );
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <Display_Manager+0x114>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 f937 	bl	800235c <Display_Page>
    }

}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd90      	pop	{r4, r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200005f0 	.word	0x200005f0
 80020fc:	200005db 	.word	0x200005db
 8002100:	2000000c 	.word	0x2000000c
 8002104:	200005dc 	.word	0x200005dc

08002108 <Display_Standby_Page>:

static void Display_Standby_Page(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08c      	sub	sp, #48	; 0x30
 800210c:	af02      	add	r7, sp, #8
	char msg[32];
	int len;

	// Line 1
	LCD_Write(true,   LCD_LINE_1, 0, "   CPRT IDLE PAGE   ", 20);
 800210e:	2314      	movs	r3, #20
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	4b18      	ldr	r3, [pc, #96]	; (8002174 <Display_Standby_Page+0x6c>)
 8002114:	2200      	movs	r2, #0
 8002116:	2100      	movs	r1, #0
 8002118:	2001      	movs	r0, #1
 800211a:	f001 fc83 	bl	8003a24 <LCD_Write>

	// Line 2
	len = snprintf(msg, sizeof(msg), "  SW REV: %s", GetSwVersionString( CURRENT_SW_VERSION_ID));
 800211e:	200b      	movs	r0, #11
 8002120:	f005 fd04 	bl	8007b2c <GetSwVersionString>
 8002124:	4603      	mov	r3, r0
 8002126:	1d38      	adds	r0, r7, #4
 8002128:	4a13      	ldr	r2, [pc, #76]	; (8002178 <Display_Standby_Page+0x70>)
 800212a:	2120      	movs	r1, #32
 800212c:	f01a fe5e 	bl	801cdec <sniprintf>
 8002130:	6278      	str	r0, [r7, #36]	; 0x24
	LCD_Write(false, LCD_LINE_2, 0, msg, len );
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	b2db      	uxtb	r3, r3
 8002136:	1d3a      	adds	r2, r7, #4
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	4613      	mov	r3, r2
 800213c:	2200      	movs	r2, #0
 800213e:	2101      	movs	r1, #1
 8002140:	2000      	movs	r0, #0
 8002142:	f001 fc6f 	bl	8003a24 <LCD_Write>

	len = snprintf(msg, sizeof(msg), "%s %s", gstModel.adate,  gstModel.atime);
 8002146:	1d38      	adds	r0, r7, #4
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <Display_Standby_Page+0x74>)
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <Display_Standby_Page+0x78>)
 800214e:	4a0d      	ldr	r2, [pc, #52]	; (8002184 <Display_Standby_Page+0x7c>)
 8002150:	2120      	movs	r1, #32
 8002152:	f01a fe4b 	bl	801cdec <sniprintf>
 8002156:	6278      	str	r0, [r7, #36]	; 0x24

	// Line 4 Display Date and Time from RTC
	LCD_Write(false, LCD_LINE_4, 0, msg, len );
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	b2db      	uxtb	r3, r3
 800215c:	1d3a      	adds	r2, r7, #4
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	4613      	mov	r3, r2
 8002162:	2200      	movs	r2, #0
 8002164:	2103      	movs	r1, #3
 8002166:	2000      	movs	r0, #0
 8002168:	f001 fc5c 	bl	8003a24 <LCD_Write>

}
 800216c:	bf00      	nop
 800216e:	3728      	adds	r7, #40	; 0x28
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	08020c88 	.word	0x08020c88
 8002178:	08020ca0 	.word	0x08020ca0
 800217c:	20001d4b 	.word	0x20001d4b
 8002180:	20001d55 	.word	0x20001d55
 8002184:	08020cb0 	.word	0x08020cb0

08002188 <Display_Mute_Page>:

static void Display_Mute_Page(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af02      	add	r7, sp, #8
	// Line 1
	LCD_Write(true,   LCD_LINE_1, 0, "     BUTTON ACTIVE  ", 20);
 800218e:	2314      	movs	r3, #20
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <Display_Mute_Page+0x2c>)
 8002194:	2200      	movs	r2, #0
 8002196:	2100      	movs	r1, #0
 8002198:	2001      	movs	r0, #1
 800219a:	f001 fc43 	bl	8003a24 <LCD_Write>

	// Line 2
	LCD_Write(false, LCD_LINE_2, 0,  "BUTTON MUTE PRESSED ", 20);
 800219e:	2314      	movs	r3, #20
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <Display_Mute_Page+0x30>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	2101      	movs	r1, #1
 80021a8:	2000      	movs	r0, #0
 80021aa:	f001 fc3b 	bl	8003a24 <LCD_Write>
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	08020cb8 	.word	0x08020cb8
 80021b8:	08020cd0 	.word	0x08020cd0

080021bc <Display_Start_Page>:

static void Display_Start_Page(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af02      	add	r7, sp, #8
	// Line 1
	LCD_Write(true,   LCD_LINE_1, 0, "     BUTTON ACTIVE  ", 20);
 80021c2:	2314      	movs	r3, #20
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <Display_Start_Page+0x2c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	2100      	movs	r1, #0
 80021cc:	2001      	movs	r0, #1
 80021ce:	f001 fc29 	bl	8003a24 <LCD_Write>

	// Line 2
	LCD_Write(false, LCD_LINE_2, 0,  "BUTTON START PRESSED", 20);
 80021d2:	2314      	movs	r3, #20
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <Display_Start_Page+0x30>)
 80021d8:	2200      	movs	r2, #0
 80021da:	2101      	movs	r1, #1
 80021dc:	2000      	movs	r0, #0
 80021de:	f001 fc21 	bl	8003a24 <LCD_Write>
}
 80021e2:	bf00      	nop
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	08020cb8 	.word	0x08020cb8
 80021ec:	08020ce8 	.word	0x08020ce8

080021f0 <Display_Menu_Page>:

static void Display_Menu_Page(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af02      	add	r7, sp, #8
	// Line 1
	LCD_Write(true,   LCD_LINE_1, 0, "     BUTTON ACTIVE  ", 20);
 80021f6:	2314      	movs	r3, #20
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <Display_Menu_Page+0x2c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	2100      	movs	r1, #0
 8002200:	2001      	movs	r0, #1
 8002202:	f001 fc0f 	bl	8003a24 <LCD_Write>

	// Line 2
	LCD_Write(false, LCD_LINE_2, 0,  "BUTTON MENU PRESSED ", 20);
 8002206:	2314      	movs	r3, #20
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	4b05      	ldr	r3, [pc, #20]	; (8002220 <Display_Menu_Page+0x30>)
 800220c:	2200      	movs	r2, #0
 800220e:	2101      	movs	r1, #1
 8002210:	2000      	movs	r0, #0
 8002212:	f001 fc07 	bl	8003a24 <LCD_Write>
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	08020cb8 	.word	0x08020cb8
 8002220:	08020d00 	.word	0x08020d00

08002224 <Display_Pause_Page>:

static void Display_Pause_Page(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af02      	add	r7, sp, #8
	// Line 1
	LCD_Write(true,   LCD_LINE_1, 0, "     BUTTON ACTIVE  ", 20);
 800222a:	2314      	movs	r3, #20
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	4b08      	ldr	r3, [pc, #32]	; (8002250 <Display_Pause_Page+0x2c>)
 8002230:	2200      	movs	r2, #0
 8002232:	2100      	movs	r1, #0
 8002234:	2001      	movs	r0, #1
 8002236:	f001 fbf5 	bl	8003a24 <LCD_Write>

	// Line 2
	LCD_Write(false, LCD_LINE_2, 0,  "BUTTON PAUSE PRESSED", 20);
 800223a:	2314      	movs	r3, #20
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <Display_Pause_Page+0x30>)
 8002240:	2200      	movs	r2, #0
 8002242:	2101      	movs	r1, #1
 8002244:	2000      	movs	r0, #0
 8002246:	f001 fbed 	bl	8003a24 <LCD_Write>
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	08020cb8 	.word	0x08020cb8
 8002254:	08020d18 	.word	0x08020d18

08002258 <Display_Left_Page>:

static void Display_Left_Page(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af02      	add	r7, sp, #8
	// Line 1
	LCD_Write(true,   LCD_LINE_1, 0, "     BUTTON ACTIVE  ", 20);
 800225e:	2314      	movs	r3, #20
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	4b08      	ldr	r3, [pc, #32]	; (8002284 <Display_Left_Page+0x2c>)
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	2001      	movs	r0, #1
 800226a:	f001 fbdb 	bl	8003a24 <LCD_Write>

	// Line 2
	LCD_Write(false, LCD_LINE_2, 0,  "BUTTON LEFT PRESSED ", 20);
 800226e:	2314      	movs	r3, #20
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <Display_Left_Page+0x30>)
 8002274:	2200      	movs	r2, #0
 8002276:	2101      	movs	r1, #1
 8002278:	2000      	movs	r0, #0
 800227a:	f001 fbd3 	bl	8003a24 <LCD_Write>
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	08020cb8 	.word	0x08020cb8
 8002288:	08020d30 	.word	0x08020d30

0800228c <Display_Up_Page>:

static void Display_Up_Page(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af02      	add	r7, sp, #8
	// Line 1
	LCD_Write(true,   LCD_LINE_1, 0, "     BUTTON ACTIVE  ", 20);
 8002292:	2314      	movs	r3, #20
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <Display_Up_Page+0x2c>)
 8002298:	2200      	movs	r2, #0
 800229a:	2100      	movs	r1, #0
 800229c:	2001      	movs	r0, #1
 800229e:	f001 fbc1 	bl	8003a24 <LCD_Write>

	// Line 2
	LCD_Write(false, LCD_LINE_2, 0,  "  BUTTON UP PRESSED ", 20);
 80022a2:	2314      	movs	r3, #20
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <Display_Up_Page+0x30>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	2101      	movs	r1, #1
 80022ac:	2000      	movs	r0, #0
 80022ae:	f001 fbb9 	bl	8003a24 <LCD_Write>
}
 80022b2:	bf00      	nop
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	08020cb8 	.word	0x08020cb8
 80022bc:	08020d48 	.word	0x08020d48

080022c0 <Display_Down_Page>:

static void Display_Down_Page(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af02      	add	r7, sp, #8
	// Line 1
	LCD_Write(true,   LCD_LINE_1, 0, "     BUTTON ACTIVE  ", 20);
 80022c6:	2314      	movs	r3, #20
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <Display_Down_Page+0x2c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	2100      	movs	r1, #0
 80022d0:	2001      	movs	r0, #1
 80022d2:	f001 fba7 	bl	8003a24 <LCD_Write>

	// Line 2
	LCD_Write(false, LCD_LINE_2, 0,  "BUTTON DOWN PRESSED ", 20);
 80022d6:	2314      	movs	r3, #20
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <Display_Down_Page+0x30>)
 80022dc:	2200      	movs	r2, #0
 80022de:	2101      	movs	r1, #1
 80022e0:	2000      	movs	r0, #0
 80022e2:	f001 fb9f 	bl	8003a24 <LCD_Write>
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	08020cb8 	.word	0x08020cb8
 80022f0:	08020d60 	.word	0x08020d60

080022f4 <Display_Sel_Page>:

static void Display_Sel_Page(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af02      	add	r7, sp, #8
	// Line 1
	LCD_Write(true,   LCD_LINE_1, 0, "     BUTTON ACTIVE  ", 20);
 80022fa:	2314      	movs	r3, #20
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <Display_Sel_Page+0x2c>)
 8002300:	2200      	movs	r2, #0
 8002302:	2100      	movs	r1, #0
 8002304:	2001      	movs	r0, #1
 8002306:	f001 fb8d 	bl	8003a24 <LCD_Write>

	// Line 2
	LCD_Write(false, LCD_LINE_2, 0,  "BUTTON SEL PRESSED  ", 20);
 800230a:	2314      	movs	r3, #20
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <Display_Sel_Page+0x30>)
 8002310:	2200      	movs	r2, #0
 8002312:	2101      	movs	r1, #1
 8002314:	2000      	movs	r0, #0
 8002316:	f001 fb85 	bl	8003a24 <LCD_Write>
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	08020cb8 	.word	0x08020cb8
 8002324:	08020d78 	.word	0x08020d78

08002328 <Display_Right_Page>:

static void Display_Right_Page(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af02      	add	r7, sp, #8
	// Line 1
	LCD_Write(true,   LCD_LINE_1, 0, "     BUTTON ACTIVE  ", 20);
 800232e:	2314      	movs	r3, #20
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	4b08      	ldr	r3, [pc, #32]	; (8002354 <Display_Right_Page+0x2c>)
 8002334:	2200      	movs	r2, #0
 8002336:	2100      	movs	r1, #0
 8002338:	2001      	movs	r0, #1
 800233a:	f001 fb73 	bl	8003a24 <LCD_Write>

	// Line 2
	LCD_Write(false, LCD_LINE_2, 0,  "BUTTON RIGHT PRESSED", 20);
 800233e:	2314      	movs	r3, #20
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <Display_Right_Page+0x30>)
 8002344:	2200      	movs	r2, #0
 8002346:	2101      	movs	r1, #1
 8002348:	2000      	movs	r0, #0
 800234a:	f001 fb6b 	bl	8003a24 <LCD_Write>
}
 800234e:	bf00      	nop
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	08020cb8 	.word	0x08020cb8
 8002358:	08020d90 	.word	0x08020d90

0800235c <Display_Page>:
		Display_Right_Page,

};

static void Display_Page(DISPLAY_ID eId)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
	if ( (eId > DISPLAY_ID_NONE) && (eId < DISPLAY_ID_COUNT) )
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d007      	beq.n	800237c <Display_Page+0x20>
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	2b0a      	cmp	r3, #10
 8002370:	d804      	bhi.n	800237c <Display_Page+0x20>
	{
		dispF[eId]();
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	4a03      	ldr	r2, [pc, #12]	; (8002384 <Display_Page+0x28>)
 8002376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237a:	4798      	blx	r3
	}
}
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000010 	.word	0x20000010

08002388 <Display_Request_Refresh>:
{
	gstDisplayManager->TimeLastSwitchPress = Get_SysTick();
}

void Display_Request_Refresh()
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
    //delayWd100ms( 1 );
	bRequestDisplayRefresh = true;
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <Display_Request_Refresh+0x14>)
 800238e:	2201      	movs	r2, #1
 8002390:	701a      	strb	r2, [r3, #0]
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	200005dc 	.word	0x200005dc

080023a0 <GetEepromWriteWait>:
{
	displayEepromTest = enable;
}

bool GetEepromWriteWait( )
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
	return eepromWriteWait;
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <GetEepromWriteWait+0x14>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000ab4 	.word	0x20000ab4

080023b8 <SetEepromWriteWait>:

void SetEepromWriteWait( bool eepromWriteWaitFlag )
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
	eepromWriteWait = eepromWriteWaitFlag;
 80023c2:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <SetEepromWriteWait+0x1c>)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	7013      	strb	r3, [r2, #0]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	20000ab4 	.word	0x20000ab4

080023d8 <ReadEeprom>:
 *             numBytesToRead - number of bytes to read from EEPROM
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void ReadEeprom( uint16_t dataAddress, uint8_t * readData, int16_t numBytesToRead )
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af02      	add	r7, sp, #8
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	80fb      	strh	r3, [r7, #6]
 80023e4:	4613      	mov	r3, r2
 80023e6:	80bb      	strh	r3, [r7, #4]
	if( HAL_I2C_Mem_Read_IT( &hi2c3, EEPROM_DEVICE_ADDRESS, dataAddress, I2C_MEMADD_SIZE_16BIT, readData, numBytesToRead )
 80023e8:	88bb      	ldrh	r3, [r7, #4]
 80023ea:	88fa      	ldrh	r2, [r7, #6]
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2302      	movs	r3, #2
 80023f4:	21a0      	movs	r1, #160	; 0xa0
 80023f6:	4806      	ldr	r0, [pc, #24]	; (8002410 <ReadEeprom+0x38>)
 80023f8:	f008 fe2a 	bl	800b050 <HAL_I2C_Mem_Read_IT>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <ReadEeprom+0x30>
			!= HAL_OK)
	{
		UartPrintf("I2C3 EEPROM read failed.\n");
 8002402:	4804      	ldr	r0, [pc, #16]	; (8002414 <ReadEeprom+0x3c>)
 8002404:	f003 fc68 	bl	8005cd8 <UartPrintf>
	}
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20004270 	.word	0x20004270
 8002414:	08020da8 	.word	0x08020da8

08002418 <GetLogWritePointerFromEeprom>:

//
// Read once at initialization
//
void GetLogWritePointerFromEeprom( )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
	getLogWritePtr = true;
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <GetLogWritePointerFromEeprom+0x18>)
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]

	ReadEeprom( LOG_WRITE_POINTER_ADDRESS, (uint8_t *)&eepromLogWritePtr, 2 );
 8002422:	2202      	movs	r2, #2
 8002424:	4903      	ldr	r1, [pc, #12]	; (8002434 <GetLogWritePointerFromEeprom+0x1c>)
 8002426:	207e      	movs	r0, #126	; 0x7e
 8002428:	f7ff ffd6 	bl	80023d8 <ReadEeprom>
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000aae 	.word	0x20000aae
 8002434:	20000894 	.word	0x20000894

08002438 <GetMinuteCounterFromEeprom>:

void GetMinuteCounterFromEeprom( )
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
	getMinuteCounter = true;
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <GetMinuteCounterFromEeprom+0x18>)
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]

	ReadEeprom( MINUTE_CNTR_ADDRESS, (uint8_t *)&minuteCounter, 4 );
 8002442:	2204      	movs	r2, #4
 8002444:	4903      	ldr	r1, [pc, #12]	; (8002454 <GetMinuteCounterFromEeprom+0x1c>)
 8002446:	207a      	movs	r0, #122	; 0x7a
 8002448:	f7ff ffc6 	bl	80023d8 <ReadEeprom>
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000aaf 	.word	0x20000aaf
 8002454:	2000089c 	.word	0x2000089c

08002458 <GetEventCounterFromEeprom>:

void GetEventCounterFromEeprom( )
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	getEventCounter = true;
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <GetEventCounterFromEeprom+0x18>)
 800245e:	2201      	movs	r2, #1
 8002460:	701a      	strb	r2, [r3, #0]

	ReadEeprom( EVENT_CNTR_ADDRESS, (uint8_t *)&eventCounter, 2 );
 8002462:	2202      	movs	r2, #2
 8002464:	4903      	ldr	r1, [pc, #12]	; (8002474 <GetEventCounterFromEeprom+0x1c>)
 8002466:	2075      	movs	r0, #117	; 0x75
 8002468:	f7ff ffb6 	bl	80023d8 <ReadEeprom>
}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000ab0 	.word	0x20000ab0
 8002474:	200008a8 	.word	0x200008a8

08002478 <InitEepromTxQueue>:
 * Parameters:  None
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void InitEepromTxQueue()
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
	eepromTxQueueReadIndex = 0;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <InitEepromTxQueue+0x20>)
 800247e:	2200      	movs	r2, #0
 8002480:	801a      	strh	r2, [r3, #0]
	eepromTxQueueWriteIndex = 0;
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <InitEepromTxQueue+0x24>)
 8002484:	2200      	movs	r2, #0
 8002486:	801a      	strh	r2, [r3, #0]

	GetLogWritePointerFromEeprom( );
 8002488:	f7ff ffc6 	bl	8002418 <GetLogWritePointerFromEeprom>

	UartPrintf("Size of logInfo: %d\n", LOG_EVENT_SIZE);
 800248c:	2110      	movs	r1, #16
 800248e:	4804      	ldr	r0, [pc, #16]	; (80024a0 <InitEepromTxQueue+0x28>)
 8002490:	f003 fc22 	bl	8005cd8 <UartPrintf>
}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20000888 	.word	0x20000888
 800249c:	2000088a 	.word	0x2000088a
 80024a0:	08020e0c 	.word	0x08020e0c

080024a4 <IsTxEepromQueueEmpty>:
 * Parameters:  None
 *
 * Returns:     true if empty, false if not empty
 *---------------------------------------------------------------------------*/
bool IsTxEepromQueueEmpty( )
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
	int16_t queueIndexDiff = eepromTxQueueWriteIndex - eepromTxQueueReadIndex;
 80024aa:	4b14      	ldr	r3, [pc, #80]	; (80024fc <IsTxEepromQueueEmpty+0x58>)
 80024ac:	881a      	ldrh	r2, [r3, #0]
 80024ae:	4b14      	ldr	r3, [pc, #80]	; (8002500 <IsTxEepromQueueEmpty+0x5c>)
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	80fb      	strh	r3, [r7, #6]
	curTxEepromQueueDepth = queueIndexDiff;
 80024b8:	88fa      	ldrh	r2, [r7, #6]
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <IsTxEepromQueueEmpty+0x60>)
 80024bc:	801a      	strh	r2, [r3, #0]

	if( queueIndexDiff == 0 )
 80024be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <IsTxEepromQueueEmpty+0x26>
	{
		// Tx EEPROM queue is empty
		return true;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e011      	b.n	80024ee <IsTxEepromQueueEmpty+0x4a>
	}

	if( queueIndexDiff < 0 )
 80024ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	da03      	bge.n	80024da <IsTxEepromQueueEmpty+0x36>
	{
		queueIndexDiff += EEPROM_TX_QUEUE_SIZE;
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	3320      	adds	r3, #32
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	80fb      	strh	r3, [r7, #6]
	}

	// Keep track of maximum Tx EEPROM queue depth
	if( queueIndexDiff > maxTxEepromQueueDepth )
 80024da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024de:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <IsTxEepromQueueEmpty+0x64>)
 80024e0:	8812      	ldrh	r2, [r2, #0]
 80024e2:	4293      	cmp	r3, r2
 80024e4:	dd02      	ble.n	80024ec <IsTxEepromQueueEmpty+0x48>
	{
		maxTxEepromQueueDepth = queueIndexDiff;
 80024e6:	88fa      	ldrh	r2, [r7, #6]
 80024e8:	4b07      	ldr	r3, [pc, #28]	; (8002508 <IsTxEepromQueueEmpty+0x64>)
 80024ea:	801a      	strh	r2, [r3, #0]
	}

	// Tx EEPROM queue is not empty
	return false;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	2000088a 	.word	0x2000088a
 8002500:	20000888 	.word	0x20000888
 8002504:	20000892 	.word	0x20000892
 8002508:	20000890 	.word	0x20000890

0800250c <IsTxEepromQueueFull>:
 * Parameters:  None
 *
 * Returns:     true if full, false if not full
 *---------------------------------------------------------------------------*/
bool IsTxEepromQueueFull( )
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
	int16_t queueIndexDiff = eepromTxQueueWriteIndex - eepromTxQueueReadIndex;
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <IsTxEepromQueueFull+0x40>)
 8002514:	881a      	ldrh	r2, [r3, #0]
 8002516:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <IsTxEepromQueueFull+0x44>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	b29b      	uxth	r3, r3
 800251e:	80fb      	strh	r3, [r7, #6]

	if( queueIndexDiff < 0 )
 8002520:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002524:	2b00      	cmp	r3, #0
 8002526:	da03      	bge.n	8002530 <IsTxEepromQueueFull+0x24>
    {
		queueIndexDiff += EEPROM_TX_QUEUE_SIZE;
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	3320      	adds	r3, #32
 800252c:	b29b      	uxth	r3, r3
 800252e:	80fb      	strh	r3, [r7, #6]
	}

	if( queueIndexDiff == (EEPROM_TX_QUEUE_SIZE - 1) )
 8002530:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002534:	2b1f      	cmp	r3, #31
 8002536:	d101      	bne.n	800253c <IsTxEepromQueueFull+0x30>
	{
		// Tx EEPROM queue is full
		return true;
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <IsTxEepromQueueFull+0x32>
	}

	// Tx EEPROM queue is not full
	return false;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	2000088a 	.word	0x2000088a
 8002550:	20000888 	.word	0x20000888

08002554 <WriteEeprom>:
 *             numBytesToWrite - number of bytes to write to EEPROM
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
uint8_t WriteEeprom( uint16_t dataAddress, uint8_t * writeData, uint16_t numBytesToWrite )
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af02      	add	r7, sp, #8
 800255a:	4603      	mov	r3, r0
 800255c:	6039      	str	r1, [r7, #0]
 800255e:	80fb      	strh	r3, [r7, #6]
 8002560:	4613      	mov	r3, r2
 8002562:	80bb      	strh	r3, [r7, #4]
	uint16_t numBytesRemaining = numBytesToWrite;
 8002564:	88bb      	ldrh	r3, [r7, #4]
 8002566:	82fb      	strh	r3, [r7, #22]
	uint16_t numBytesWritten = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	82bb      	strh	r3, [r7, #20]

	uint8_t pageStartAddress = dataAddress % EEPROM_PAGE_SIZE;
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002574:	74bb      	strb	r3, [r7, #18]
	uint8_t numBytesToEndOfPage = EEPROM_PAGE_SIZE - pageStartAddress;
 8002576:	7cbb      	ldrb	r3, [r7, #18]
 8002578:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800257c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8002580:	3380      	adds	r3, #128	; 0x80
 8002582:	74fb      	strb	r3, [r7, #19]

	while( numBytesRemaining > 0 )
 8002584:	e06b      	b.n	800265e <WriteEeprom+0x10a>
	{
		// Wait for I2C3 to be ready
		uint32_t startWaitTime = GetTimeMs();
 8002586:	f003 fc9f 	bl	8005ec8 <GetTimeMs>
 800258a:	60f8      	str	r0, [r7, #12]

		while( eepromWriteWait != false )
 800258c:	e00a      	b.n	80025a4 <WriteEeprom+0x50>
		{
			// Wait until EEPROM write wait time has elapsed before writing EEPROM
			// UartPrintf("I2C EEPROM wait time has not elasped\n");
			if ( DiffTimeFromStartTimeMs(startWaitTime) > 10 ) // 10 ms
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f003 fcac 	bl	8005eec <DiffTimeFromStartTimeMs>
 8002594:	4603      	mov	r3, r0
 8002596:	2b0a      	cmp	r3, #10
 8002598:	d904      	bls.n	80025a4 <WriteEeprom+0x50>
			{
				UartPrintf("I2C3 EEPROM transfer not complete for 10 ms\n");
 800259a:	4835      	ldr	r0, [pc, #212]	; (8002670 <WriteEeprom+0x11c>)
 800259c:	f003 fb9c 	bl	8005cd8 <UartPrintf>
				return 1; // Wait too long for I2C3 EEPROM transfer to complete
 80025a0:	2301      	movs	r3, #1
 80025a2:	e060      	b.n	8002666 <WriteEeprom+0x112>
		while( eepromWriteWait != false )
 80025a4:	4b33      	ldr	r3, [pc, #204]	; (8002674 <WriteEeprom+0x120>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f0      	bne.n	800258e <WriteEeprom+0x3a>
			}
		}

		while (HAL_I2C_GetState(&hi2c3) != HAL_I2C_STATE_READY)
 80025ac:	e00a      	b.n	80025c4 <WriteEeprom+0x70>
		{
			if ( DiffTimeFromStartTimeMs(startWaitTime) > 3 ) // 3 ms
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f003 fc9c 	bl	8005eec <DiffTimeFromStartTimeMs>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d904      	bls.n	80025c4 <WriteEeprom+0x70>
			{
				UartPrintf("I2C3 EEPROM transfer not complete for 3 ms\n");
 80025ba:	482f      	ldr	r0, [pc, #188]	; (8002678 <WriteEeprom+0x124>)
 80025bc:	f003 fb8c 	bl	8005cd8 <UartPrintf>
				return 1; // Wait too long for I2C3 EEPROM transfer to complete
 80025c0:	2301      	movs	r3, #1
 80025c2:	e050      	b.n	8002666 <WriteEeprom+0x112>
		while (HAL_I2C_GetState(&hi2c3) != HAL_I2C_STATE_READY)
 80025c4:	482d      	ldr	r0, [pc, #180]	; (800267c <WriteEeprom+0x128>)
 80025c6:	f008 fe33 	bl	800b230 <HAL_I2C_GetState>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d1ee      	bne.n	80025ae <WriteEeprom+0x5a>
			}
		}

		if( numBytesRemaining <= numBytesToEndOfPage )
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	8afa      	ldrh	r2, [r7, #22]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d81d      	bhi.n	8002616 <WriteEeprom+0xc2>
		{
			// All remaining bytes will fit in page
			eepromWriteWait = true;
 80025da:	4b26      	ldr	r3, [pc, #152]	; (8002674 <WriteEeprom+0x120>)
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
			if( HAL_I2C_Mem_Write_IT( &hi2c3, EEPROM_DEVICE_ADDRESS, dataAddress + numBytesWritten, I2C_MEMADD_SIZE_16BIT,
 80025e0:	88fa      	ldrh	r2, [r7, #6]
 80025e2:	8abb      	ldrh	r3, [r7, #20]
 80025e4:	4413      	add	r3, r2
 80025e6:	b299      	uxth	r1, r3
 80025e8:	8abb      	ldrh	r3, [r7, #20]
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	4413      	add	r3, r2
 80025ee:	8afa      	ldrh	r2, [r7, #22]
 80025f0:	9201      	str	r2, [sp, #4]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	2302      	movs	r3, #2
 80025f6:	460a      	mov	r2, r1
 80025f8:	21a0      	movs	r1, #160	; 0xa0
 80025fa:	4820      	ldr	r0, [pc, #128]	; (800267c <WriteEeprom+0x128>)
 80025fc:	f008 fc94 	bl	800af28 <HAL_I2C_Mem_Write_IT>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <WriteEeprom+0xbc>
					&writeData[numBytesWritten], numBytesRemaining ) != HAL_OK )
			{
				UartPrintf("I2C3 EEPROM write to signal page failed.\n");
 8002606:	481e      	ldr	r0, [pc, #120]	; (8002680 <WriteEeprom+0x12c>)
 8002608:	f003 fb66 	bl	8005cd8 <UartPrintf>
				return 1;
 800260c:	2301      	movs	r3, #1
 800260e:	e02a      	b.n	8002666 <WriteEeprom+0x112>
			}
			numBytesWritten = numBytesRemaining;
 8002610:	8afb      	ldrh	r3, [r7, #22]
 8002612:	82bb      	strh	r3, [r7, #20]
 8002614:	e01d      	b.n	8002652 <WriteEeprom+0xfe>
		}
		else // Number of bytes to write requires multiple pages
		{
			eepromWriteWait = true;
 8002616:	4b17      	ldr	r3, [pc, #92]	; (8002674 <WriteEeprom+0x120>)
 8002618:	2201      	movs	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
			if( HAL_I2C_Mem_Write_IT( &hi2c3, EEPROM_DEVICE_ADDRESS, dataAddress + numBytesWritten,
 800261c:	88fa      	ldrh	r2, [r7, #6]
 800261e:	8abb      	ldrh	r3, [r7, #20]
 8002620:	4413      	add	r3, r2
 8002622:	b299      	uxth	r1, r3
 8002624:	8abb      	ldrh	r3, [r7, #20]
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	4413      	add	r3, r2
 800262a:	7cfa      	ldrb	r2, [r7, #19]
 800262c:	b292      	uxth	r2, r2
 800262e:	9201      	str	r2, [sp, #4]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2302      	movs	r3, #2
 8002634:	460a      	mov	r2, r1
 8002636:	21a0      	movs	r1, #160	; 0xa0
 8002638:	4810      	ldr	r0, [pc, #64]	; (800267c <WriteEeprom+0x128>)
 800263a:	f008 fc75 	bl	800af28 <HAL_I2C_Mem_Write_IT>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <WriteEeprom+0xfa>
					I2C_MEMADD_SIZE_16BIT, &writeData[numBytesWritten], numBytesToEndOfPage ) != HAL_OK )
			{
				UartPrintf("I2C3 EEPROM write to multiple pages failed.\n");
 8002644:	480f      	ldr	r0, [pc, #60]	; (8002684 <WriteEeprom+0x130>)
 8002646:	f003 fb47 	bl	8005cd8 <UartPrintf>
				return 1;
 800264a:	2301      	movs	r3, #1
 800264c:	e00b      	b.n	8002666 <WriteEeprom+0x112>
			}
			numBytesWritten = numBytesToEndOfPage;
 800264e:	7cfb      	ldrb	r3, [r7, #19]
 8002650:	82bb      	strh	r3, [r7, #20]
		}

		// Update number of bytes remaining to be written to EEPROM
		numBytesRemaining -= numBytesWritten;
 8002652:	8afa      	ldrh	r2, [r7, #22]
 8002654:	8abb      	ldrh	r3, [r7, #20]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	82fb      	strh	r3, [r7, #22]

		// After write to initial page, subsequent writes start at the beginning of the next page
		// and the full page is available
		numBytesToEndOfPage = EEPROM_PAGE_SIZE;
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	74fb      	strb	r3, [r7, #19]
	while( numBytesRemaining > 0 )
 800265e:	8afb      	ldrh	r3, [r7, #22]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d190      	bne.n	8002586 <WriteEeprom+0x32>
	}

	return 0;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	08020e24 	.word	0x08020e24
 8002674:	20000ab4 	.word	0x20000ab4
 8002678:	08020dc4 	.word	0x08020dc4
 800267c:	20004270 	.word	0x20004270
 8002680:	08020e54 	.word	0x08020e54
 8002684:	08020e80 	.word	0x08020e80

08002688 <WriteTxEepromQueue>:
 * Parameters:  buffer - pointer to data to be written to Tx UART queue
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
int WriteTxEepromQueue(uint16_t address, uint8_t * writeData, uint8_t numBytes )
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	6039      	str	r1, [r7, #0]
 8002692:	80fb      	strh	r3, [r7, #6]
 8002694:	4613      	mov	r3, r2
 8002696:	717b      	strb	r3, [r7, #5]
	uint32_t startWaitTime = GetTimeMs();
 8002698:	f003 fc16 	bl	8005ec8 <GetTimeMs>
 800269c:	6138      	str	r0, [r7, #16]

	while( IsTxEepromQueueFull() != false )
 800269e:	e014      	b.n	80026ca <WriteTxEepromQueue+0x42>
	{
		// Wait for Tx EEPROM queue not to be full
		uint32_t waitTime = DiffTimeFromStartTimeMs(startWaitTime);
 80026a0:	6938      	ldr	r0, [r7, #16]
 80026a2:	f003 fc23 	bl	8005eec <DiffTimeFromStartTimeMs>
 80026a6:	60f8      	str	r0, [r7, #12]
		if ( waitTime > 10 ) // 10 ms
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b0a      	cmp	r3, #10
 80026ac:	d905      	bls.n	80026ba <WriteTxEepromQueue+0x32>
		{
			UartPrintf("\r\nI2C IT EEPROM queue full for 10 ms\r\n");
 80026ae:	4830      	ldr	r0, [pc, #192]	; (8002770 <WriteTxEepromQueue+0xe8>)
 80026b0:	f003 fb12 	bl	8005cd8 <UartPrintf>
			return -1; // Wait too long for Tx EEPEROM queue not to be full
 80026b4:	f04f 33ff 	mov.w	r3, #4294967295
 80026b8:	e055      	b.n	8002766 <WriteTxEepromQueue+0xde>
		}

		// Keep track of max wait time for Tx UART Queue not to be full
		if( waitTime > maxEepromTxQueueWaitTimeMs )
 80026ba:	4b2e      	ldr	r3, [pc, #184]	; (8002774 <WriteTxEepromQueue+0xec>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d902      	bls.n	80026ca <WriteTxEepromQueue+0x42>
		{
			maxEepromTxQueueWaitTimeMs = waitTime;
 80026c4:	4a2b      	ldr	r2, [pc, #172]	; (8002774 <WriteTxEepromQueue+0xec>)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6013      	str	r3, [r2, #0]
	while( IsTxEepromQueueFull() != false )
 80026ca:	f7ff ff1f 	bl	800250c <IsTxEepromQueueFull>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1e5      	bne.n	80026a0 <WriteTxEepromQueue+0x18>
		}
	}

	// Write info to Tx EEPROM queue
	eepromTxQueue[eepromTxQueueWriteIndex].address = address;
 80026d4:	4b28      	ldr	r3, [pc, #160]	; (8002778 <WriteTxEepromQueue+0xf0>)
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	4619      	mov	r1, r3
 80026da:	4a28      	ldr	r2, [pc, #160]	; (800277c <WriteTxEepromQueue+0xf4>)
 80026dc:	460b      	mov	r3, r1
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	88fa      	ldrh	r2, [r7, #6]
 80026e8:	801a      	strh	r2, [r3, #0]
	eepromTxQueue[eepromTxQueueWriteIndex].numBytes = numBytes;
 80026ea:	4b23      	ldr	r3, [pc, #140]	; (8002778 <WriteTxEepromQueue+0xf0>)
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	4619      	mov	r1, r3
 80026f0:	4a22      	ldr	r2, [pc, #136]	; (800277c <WriteTxEepromQueue+0xf4>)
 80026f2:	460b      	mov	r3, r1
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	3302      	adds	r3, #2
 80026fe:	797a      	ldrb	r2, [r7, #5]
 8002700:	701a      	strb	r2, [r3, #0]
	for( int i=0; i<numBytes; i++ )
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	e014      	b.n	8002732 <WriteTxEepromQueue+0xaa>
	{
		eepromTxQueue[eepromTxQueueWriteIndex].data[i] = *writeData++;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	603a      	str	r2, [r7, #0]
 800270e:	4a1a      	ldr	r2, [pc, #104]	; (8002778 <WriteTxEepromQueue+0xf0>)
 8002710:	8812      	ldrh	r2, [r2, #0]
 8002712:	4611      	mov	r1, r2
 8002714:	7818      	ldrb	r0, [r3, #0]
 8002716:	4a19      	ldr	r2, [pc, #100]	; (800277c <WriteTxEepromQueue+0xf4>)
 8002718:	460b      	mov	r3, r1
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	441a      	add	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	4413      	add	r3, r2
 8002726:	3303      	adds	r3, #3
 8002728:	4602      	mov	r2, r0
 800272a:	701a      	strb	r2, [r3, #0]
	for( int i=0; i<numBytes; i++ )
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	3301      	adds	r3, #1
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	797b      	ldrb	r3, [r7, #5]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	429a      	cmp	r2, r3
 8002738:	dbe6      	blt.n	8002708 <WriteTxEepromQueue+0x80>
	}

	// Increment EEPROM Tx queue write index
	eepromTxQueueWriteIndex++;
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <WriteTxEepromQueue+0xf0>)
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	3301      	adds	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <WriteTxEepromQueue+0xf0>)
 8002744:	801a      	strh	r2, [r3, #0]
	if( eepromTxQueueWriteIndex >= EEPROM_TX_QUEUE_SIZE )
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <WriteTxEepromQueue+0xf0>)
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	2b1f      	cmp	r3, #31
 800274c:	d902      	bls.n	8002754 <WriteTxEepromQueue+0xcc>
	{
		// Write index was at maximum, set to 0
		eepromTxQueueWriteIndex =  0;
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <WriteTxEepromQueue+0xf0>)
 8002750:	2200      	movs	r2, #0
 8002752:	801a      	strh	r2, [r3, #0]
	}

	// If I2C3 is ready, read data from TX EEPROM queue and write to EEPROM,
	// else return and HAL_I2C_MemTxCpltCallback will call ReadTxEepromQueueAndWriteEeprom
	// after current I2C3 transmission is complete
	if(HAL_I2C_GetState(&hi2c3) == HAL_I2C_STATE_READY)
 8002754:	480a      	ldr	r0, [pc, #40]	; (8002780 <WriteTxEepromQueue+0xf8>)
 8002756:	f008 fd6b 	bl	800b230 <HAL_I2C_GetState>
 800275a:	4603      	mov	r3, r0
 800275c:	2b20      	cmp	r3, #32
 800275e:	d101      	bne.n	8002764 <WriteTxEepromQueue+0xdc>
	{
		ReadTxEepromQueueAndWriteEeprom();
 8002760:	f000 f810 	bl	8002784 <ReadTxEepromQueueAndWriteEeprom>
	}

	return 0;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	08020eb0 	.word	0x08020eb0
 8002774:	2000088c 	.word	0x2000088c
 8002778:	2000088a 	.word	0x2000088a
 800277c:	20000608 	.word	0x20000608
 8002780:	20004270 	.word	0x20004270

08002784 <ReadTxEepromQueueAndWriteEeprom>:
 * Parameters:  None
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void ReadTxEepromQueueAndWriteEeprom()
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
	if( IsTxEepromQueueEmpty() != false )
 800278a:	f7ff fe8b 	bl	80024a4 <IsTxEepromQueueEmpty>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d140      	bne.n	8002816 <ReadTxEepromQueueAndWriteEeprom+0x92>
		// Tx Eeprom queue is empty, nothing to read and transmit
		// UartPrintf("I2C EEPROM Tx queue is empty\n");
		return;
	}

	if( eepromWriteWait != false )
 8002794:	4b23      	ldr	r3, [pc, #140]	; (8002824 <ReadTxEepromQueueAndWriteEeprom+0xa0>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d13e      	bne.n	800281a <ReadTxEepromQueueAndWriteEeprom+0x96>
		// UartPrintf("I2C EEPROM wait time has not elasped\n");
		return;
	}

	// Read data from Tx EEPROM queue
    uint16_t dataAddress = eepromTxQueue[eepromTxQueueReadIndex].address;
 800279c:	4b22      	ldr	r3, [pc, #136]	; (8002828 <ReadTxEepromQueueAndWriteEeprom+0xa4>)
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	4619      	mov	r1, r3
 80027a2:	4a22      	ldr	r2, [pc, #136]	; (800282c <ReadTxEepromQueueAndWriteEeprom+0xa8>)
 80027a4:	460b      	mov	r3, r1
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	80fb      	strh	r3, [r7, #6]
    uint8_t numBytesToWrite = eepromTxQueue[eepromTxQueueReadIndex].numBytes;
 80027b2:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <ReadTxEepromQueueAndWriteEeprom+0xa4>)
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	4619      	mov	r1, r3
 80027b8:	4a1c      	ldr	r2, [pc, #112]	; (800282c <ReadTxEepromQueueAndWriteEeprom+0xa8>)
 80027ba:	460b      	mov	r3, r1
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	3302      	adds	r3, #2
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	717b      	strb	r3, [r7, #5]
    uint8_t * writeData = &(eepromTxQueue[eepromTxQueueReadIndex].data[0]);
 80027ca:	4b17      	ldr	r3, [pc, #92]	; (8002828 <ReadTxEepromQueueAndWriteEeprom+0xa4>)
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4a14      	ldr	r2, [pc, #80]	; (800282c <ReadTxEepromQueueAndWriteEeprom+0xa8>)
 80027da:	4413      	add	r3, r2
 80027dc:	3303      	adds	r3, #3
 80027de:	603b      	str	r3, [r7, #0]

	// Increment Tx EEPROM queue read index
	eepromTxQueueReadIndex++;
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <ReadTxEepromQueueAndWriteEeprom+0xa4>)
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	3301      	adds	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <ReadTxEepromQueueAndWriteEeprom+0xa4>)
 80027ea:	801a      	strh	r2, [r3, #0]
	if( eepromTxQueueReadIndex >= EEPROM_TX_QUEUE_SIZE )
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <ReadTxEepromQueueAndWriteEeprom+0xa4>)
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	2b1f      	cmp	r3, #31
 80027f2:	d902      	bls.n	80027fa <ReadTxEepromQueueAndWriteEeprom+0x76>
	{
		// Read index was at maximum, set to 0
		eepromTxQueueReadIndex =  0;
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <ReadTxEepromQueueAndWriteEeprom+0xa4>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	801a      	strh	r2, [r3, #0]
	}

	// Write data to EEPROM
	if( WriteEeprom( dataAddress, writeData, numBytesToWrite ) != 0 )
 80027fa:	797b      	ldrb	r3, [r7, #5]
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	6839      	ldr	r1, [r7, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fea6 	bl	8002554 <WriteEeprom>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d006      	beq.n	800281c <ReadTxEepromQueueAndWriteEeprom+0x98>
	{
		UartPrintf("I2C IT Transmit ERROR in ReadTxEepromQueueAndTransmit\n");
 800280e:	4808      	ldr	r0, [pc, #32]	; (8002830 <ReadTxEepromQueueAndWriteEeprom+0xac>)
 8002810:	f003 fa62 	bl	8005cd8 <UartPrintf>
 8002814:	e002      	b.n	800281c <ReadTxEepromQueueAndWriteEeprom+0x98>
		return;
 8002816:	bf00      	nop
 8002818:	e000      	b.n	800281c <ReadTxEepromQueueAndWriteEeprom+0x98>
		return;
 800281a:	bf00      	nop
	}
}
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000ab4 	.word	0x20000ab4
 8002828:	20000888 	.word	0x20000888
 800282c:	20000608 	.word	0x20000608
 8002830:	08020ed8 	.word	0x08020ed8

08002834 <StoreLogWritePointerInEeprom>:
{
	WriteTxEepromQueue(PEXP_GAIN_ADRS, (uint8_t *)&pExpGain, 4 );
}

void StoreLogWritePointerInEeprom( uint16_t logWritePointer )
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	80fb      	strh	r3, [r7, #6]
	WriteTxEepromQueue(LOG_WRITE_POINTER_ADDRESS, (uint8_t *)&logWritePointer, 2 );
 800283e:	1dbb      	adds	r3, r7, #6
 8002840:	2202      	movs	r2, #2
 8002842:	4619      	mov	r1, r3
 8002844:	207e      	movs	r0, #126	; 0x7e
 8002846:	f7ff ff1f 	bl	8002688 <WriteTxEepromQueue>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <StoreMinuteCntrInEeprom>:

void StoreMinuteCntrInEeprom( uint32_t minuteCount )
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
	WriteTxEepromQueue( MINUTE_CNTR_ADDRESS, (uint8_t *)&minuteCount, 4 );
 800285a:	1d3b      	adds	r3, r7, #4
 800285c:	2204      	movs	r2, #4
 800285e:	4619      	mov	r1, r3
 8002860:	207a      	movs	r0, #122	; 0x7a
 8002862:	f7ff ff11 	bl	8002688 <WriteTxEepromQueue>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <StoreEventCntrInEeprom>:

void StoreEventCntrInEeprom( uint16_t eventCount )
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	4603      	mov	r3, r0
 8002876:	80fb      	strh	r3, [r7, #6]
	WriteTxEepromQueue( EVENT_CNTR_ADDRESS, (uint8_t *)&eventCount, 2 );
 8002878:	1dbb      	adds	r3, r7, #6
 800287a:	2202      	movs	r2, #2
 800287c:	4619      	mov	r1, r3
 800287e:	2075      	movs	r0, #117	; 0x75
 8002880:	f7ff ff02 	bl	8002688 <WriteTxEepromQueue>
}
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <StoreMfgDateInEeprom>:
{
	WriteTxEepromQueue(HUMAN_USE_WORD_ADRS, (uint8_t *)&humanUseWord, 4 );
}

void StoreMfgDateInEeprom( char * mfgDate )
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	WriteTxEepromQueue(MFG_DATE_ADRS, (uint8_t *)mfgDate, 16 );
 8002894:	2210      	movs	r2, #16
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	2014      	movs	r0, #20
 800289a:	f7ff fef5 	bl	8002688 <WriteTxEepromQueue>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <StoreSerialNumberInEeprom>:

void StoreSerialNumberInEeprom( uint32_t serialNum )
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
	WriteTxEepromQueue(SERIAL_NUMBER_ADRS, (uint8_t *)&serialNum, 4 );
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	2204      	movs	r2, #4
 80028b2:	4619      	mov	r1, r3
 80028b4:	2024      	movs	r0, #36	; 0x24
 80028b6:	f7ff fee7 	bl	8002688 <WriteTxEepromQueue>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <SetEventCount>:

void SetEventCount( uint16_t eventCount )
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	80fb      	strh	r3, [r7, #6]
	eventCounter = eventCount;
 80028ce:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <SetEventCount+0x1c>)
 80028d0:	88fb      	ldrh	r3, [r7, #6]
 80028d2:	8013      	strh	r3, [r2, #0]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	200008a8 	.word	0x200008a8

080028e4 <InitializeLog>:

//
// Set at manufacturing time
//
void InitializeLog( )
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
	// Set EEPROM log write pointer to log start address
	eepromLogWritePtr = LOG_START_ADDR;
 80028ea:	4b13      	ldr	r3, [pc, #76]	; (8002938 <InitializeLog+0x54>)
 80028ec:	2280      	movs	r2, #128	; 0x80
 80028ee:	801a      	strh	r2, [r3, #0]
	StoreLogWritePointerInEeprom( eepromLogWritePtr );
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <InitializeLog+0x54>)
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff9d 	bl	8002834 <StoreLogWritePointerInEeprom>

	// Set minute counter to 0
	uint32_t minuteCounter = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
	SetMinuteCount( minuteCounter );
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f005 f904 	bl	8007b0c <SetMinuteCount>
	StoreMinuteCntrInEeprom( minuteCounter );
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ffa4 	bl	8002852 <StoreMinuteCntrInEeprom>

	// Set event counter to 0
	uint16_t eventCount = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	807b      	strh	r3, [r7, #2]
	SetEventCount( eventCount );
 800290e:	887b      	ldrh	r3, [r7, #2]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ffd7 	bl	80028c4 <SetEventCount>
	StoreEventCntrInEeprom( eventCount );
 8002916:	887b      	ldrh	r3, [r7, #2]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ffa8 	bl	800286e <StoreEventCntrInEeprom>

	// Clear log wrapped flag
	logWrappedFlag = 0;
 800291e:	4b07      	ldr	r3, [pc, #28]	; (800293c <InitializeLog+0x58>)
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
	WriteTxEepromQueue( LOG_WRAPPED_FLAG_ADDRESS, &logWrappedFlag, 1);
 8002924:	2201      	movs	r2, #1
 8002926:	4905      	ldr	r1, [pc, #20]	; (800293c <InitializeLog+0x58>)
 8002928:	2079      	movs	r0, #121	; 0x79
 800292a:	f7ff fead 	bl	8002688 <WriteTxEepromQueue>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000894 	.word	0x20000894
 800293c:	200008aa 	.word	0x200008aa

08002940 <GetMfgDateFromEeprom>:

	ReadEeprom( PINSP_OFFSET_ADRS, (uint8_t *)&calibrationConstants, sizeof(calConstants) );
}

void GetMfgDateFromEeprom( )
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
	getMfgDate = true;
 8002944:	4b04      	ldr	r3, [pc, #16]	; (8002958 <GetMfgDateFromEeprom+0x18>)
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]

	ReadEeprom( MFG_DATE_ADRS, (uint8_t *)&manufactureDate, 16 );
 800294a:	2210      	movs	r2, #16
 800294c:	4903      	ldr	r1, [pc, #12]	; (800295c <GetMfgDateFromEeprom+0x1c>)
 800294e:	2014      	movs	r0, #20
 8002950:	f7ff fd42 	bl	80023d8 <ReadEeprom>
}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000abe 	.word	0x20000abe
 800295c:	2000003c 	.word	0x2000003c

08002960 <GetSerialNumberFromEeprom>:

void GetSerialNumberFromEeprom( )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
	getSerialNumber = true;
 8002964:	4b04      	ldr	r3, [pc, #16]	; (8002978 <GetSerialNumberFromEeprom+0x18>)
 8002966:	2201      	movs	r2, #1
 8002968:	701a      	strb	r2, [r3, #0]

	ReadEeprom( SERIAL_NUMBER_ADRS, (uint8_t *)&serialNumber, 4 );
 800296a:	2204      	movs	r2, #4
 800296c:	4903      	ldr	r1, [pc, #12]	; (800297c <GetSerialNumberFromEeprom+0x1c>)
 800296e:	2024      	movs	r0, #36	; 0x24
 8002970:	f7ff fd32 	bl	80023d8 <ReadEeprom>
}
 8002974:	bf00      	nop
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000abf 	.word	0x20000abf
 800297c:	20000604 	.word	0x20000604

08002980 <crc32c>:

/* CRC-32C (iSCSI) polynomial in reversed bit order. */
#define POLY 0x82f63b78

uint32_t crc32c( uint32_t crc, uint8_t * buf, size_t len )
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
    crc = ~crc;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	43db      	mvns	r3, r3
 8002990:	60fb      	str	r3, [r7, #12]

    while (len--)
 8002992:	e01d      	b.n	80029d0 <crc32c+0x50>
    {
        crc ^= *buf++;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	60ba      	str	r2, [r7, #8]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4053      	eors	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]

        for( int i=0; i<8; i++ )
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	e00f      	b.n	80029ca <crc32c+0x4a>
        {
        	crc = crc & 1 ? (crc >> 1) ^ POLY : crc >> 1;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d004      	beq.n	80029be <crc32c+0x3e>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	085a      	lsrs	r2, r3, #1
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <crc32c+0x6c>)
 80029ba:	4053      	eors	r3, r2
 80029bc:	e001      	b.n	80029c2 <crc32c+0x42>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	085b      	lsrs	r3, r3, #1
 80029c2:	60fb      	str	r3, [r7, #12]
        for( int i=0; i<8; i++ )
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	3301      	adds	r3, #1
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b07      	cmp	r3, #7
 80029ce:	ddec      	ble.n	80029aa <crc32c+0x2a>
    while (len--)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	1e5a      	subs	r2, r3, #1
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1dc      	bne.n	8002994 <crc32c+0x14>
        }
    }

    return ~crc;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	43db      	mvns	r3, r3
}
 80029de:	4618      	mov	r0, r3
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	82f63b78 	.word	0x82f63b78

080029f0 <CalcCalConstantsCrc>:

uint32_t CalcCalConstantsCrc( )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
	calcCalConstCrc = crc32c( 0, (uint8_t *)&calibrationConstants, sizeof(calConstants) - 4 );
 80029f4:	220c      	movs	r2, #12
 80029f6:	4905      	ldr	r1, [pc, #20]	; (8002a0c <CalcCalConstantsCrc+0x1c>)
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7ff ffc1 	bl	8002980 <crc32c>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4a03      	ldr	r2, [pc, #12]	; (8002a10 <CalcCalConstantsCrc+0x20>)
 8002a02:	6013      	str	r3, [r2, #0]
	return calcCalConstCrc;
 8002a04:	4b02      	ldr	r3, [pc, #8]	; (8002a10 <CalcCalConstantsCrc+0x20>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	200005f4 	.word	0x200005f4
 8002a10:	20000898 	.word	0x20000898

08002a14 <ReadFromUpperPartOfEeprom>:
	StoreProgramCrcInEeprom( programCrc );
#endif
}

void ReadFromUpperPartOfEeprom( )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
	uint16_t bytesToEndOfLog = LOG_MAX_ADDR - logReadPointer;
 8002a1a:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <ReadFromUpperPartOfEeprom+0x70>)
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	80fb      	strh	r3, [r7, #6]

	numLogBytesToRead = (bytesToEndOfLog > MAX_NUM_LOG_BYTES_PER_READ) ? MAX_NUM_LOG_BYTES_PER_READ : bytesToEndOfLog;
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a28:	bf28      	it	cs
 8002a2a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <ReadFromUpperPartOfEeprom+0x74>)
 8002a32:	801a      	strh	r2, [r3, #0]

	if( numLogBytesToRead == 0 )
 8002a34:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <ReadFromUpperPartOfEeprom+0x74>)
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d103      	bne.n	8002a44 <ReadFromUpperPartOfEeprom+0x30>
	{
		UartPrintf("Number of bytes to read from upper part of log is 0\n");
 8002a3c:	4813      	ldr	r0, [pc, #76]	; (8002a8c <ReadFromUpperPartOfEeprom+0x78>)
 8002a3e:	f003 f94b 	bl	8005cd8 <UartPrintf>
		return;
 8002a42:	e01c      	b.n	8002a7e <ReadFromUpperPartOfEeprom+0x6a>
	}

	ReadEeprom( logReadPointer, logData, numLogBytesToRead );
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <ReadFromUpperPartOfEeprom+0x70>)
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	4a0f      	ldr	r2, [pc, #60]	; (8002a88 <ReadFromUpperPartOfEeprom+0x74>)
 8002a4a:	8812      	ldrh	r2, [r2, #0]
 8002a4c:	b212      	sxth	r2, r2
 8002a4e:	4910      	ldr	r1, [pc, #64]	; (8002a90 <ReadFromUpperPartOfEeprom+0x7c>)
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fcc1 	bl	80023d8 <ReadEeprom>

	uint32_t logReadPtr = logReadPointer + numLogBytesToRead;
 8002a56:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <ReadFromUpperPartOfEeprom+0x70>)
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <ReadFromUpperPartOfEeprom+0x74>)
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	4413      	add	r3, r2
 8002a62:	603b      	str	r3, [r7, #0]

	if( logReadPtr >= LOG_MAX_ADDR )
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d903      	bls.n	8002a76 <ReadFromUpperPartOfEeprom+0x62>
	{
		logReadPointer = LOG_START_ADDR;
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <ReadFromUpperPartOfEeprom+0x70>)
 8002a70:	2280      	movs	r2, #128	; 0x80
 8002a72:	801a      	strh	r2, [r3, #0]
 8002a74:	e003      	b.n	8002a7e <ReadFromUpperPartOfEeprom+0x6a>
	}
	else
	{
		logReadPointer = logReadPtr;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	4b02      	ldr	r3, [pc, #8]	; (8002a84 <ReadFromUpperPartOfEeprom+0x70>)
 8002a7c:	801a      	strh	r2, [r3, #0]
	}
}
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20000aac 	.word	0x20000aac
 8002a88:	2000004e 	.word	0x2000004e
 8002a8c:	08020f54 	.word	0x08020f54
 8002a90:	200008ac 	.word	0x200008ac

08002a94 <ReadFromLowerPartOfEeprom>:

void ReadFromLowerPartOfEeprom( )
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
	uint16_t bytesToWritePointer = eepromLogWritePtr - logReadPointer;
 8002a9a:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <ReadFromLowerPartOfEeprom+0x78>)
 8002a9c:	881a      	ldrh	r2, [r3, #0]
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <ReadFromLowerPartOfEeprom+0x7c>)
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	80fb      	strh	r3, [r7, #6]

	numLogBytesToRead = (bytesToWritePointer > MAX_NUM_LOG_BYTES_PER_READ) ? MAX_NUM_LOG_BYTES_PER_READ : bytesToWritePointer;
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aac:	bf28      	it	cs
 8002aae:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <ReadFromLowerPartOfEeprom+0x80>)
 8002ab6:	801a      	strh	r2, [r3, #0]

	if( numLogBytesToRead == 0 )
 8002ab8:	4b16      	ldr	r3, [pc, #88]	; (8002b14 <ReadFromLowerPartOfEeprom+0x80>)
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d103      	bne.n	8002ac8 <ReadFromLowerPartOfEeprom+0x34>
	{
		UartPrintf("Number of bytes to read from lower part of log is 0\n");
 8002ac0:	4815      	ldr	r0, [pc, #84]	; (8002b18 <ReadFromLowerPartOfEeprom+0x84>)
 8002ac2:	f003 f909 	bl	8005cd8 <UartPrintf>
		return;
 8002ac6:	e01d      	b.n	8002b04 <ReadFromLowerPartOfEeprom+0x70>
	}

	ReadEeprom( logReadPointer, logData, numLogBytesToRead );
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <ReadFromLowerPartOfEeprom+0x7c>)
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	4a11      	ldr	r2, [pc, #68]	; (8002b14 <ReadFromLowerPartOfEeprom+0x80>)
 8002ace:	8812      	ldrh	r2, [r2, #0]
 8002ad0:	b212      	sxth	r2, r2
 8002ad2:	4912      	ldr	r1, [pc, #72]	; (8002b1c <ReadFromLowerPartOfEeprom+0x88>)
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fc7f 	bl	80023d8 <ReadEeprom>

	uint32_t logReadPtr = logReadPointer + numLogBytesToRead;
 8002ada:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <ReadFromLowerPartOfEeprom+0x7c>)
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <ReadFromLowerPartOfEeprom+0x80>)
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	603b      	str	r3, [r7, #0]

	if( logReadPtr >= eepromLogWritePtr )
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <ReadFromLowerPartOfEeprom+0x78>)
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d303      	bcc.n	8002afc <ReadFromLowerPartOfEeprom+0x68>
	{
		logReadComplete = true;
 8002af4:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <ReadFromLowerPartOfEeprom+0x8c>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	e003      	b.n	8002b04 <ReadFromLowerPartOfEeprom+0x70>
	}
	else
	{
		logReadPointer = logReadPtr;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <ReadFromLowerPartOfEeprom+0x7c>)
 8002b02:	801a      	strh	r2, [r3, #0]
	}
}
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000894 	.word	0x20000894
 8002b10:	20000aac 	.word	0x20000aac
 8002b14:	2000004e 	.word	0x2000004e
 8002b18:	08020f8c 	.word	0x08020f8c
 8002b1c:	200008ac 	.word	0x200008ac
 8002b20:	20000abd 	.word	0x20000abd

08002b24 <ProcessEepromReadComplete>:

    UartPrintf("");
}

void ProcessEepromReadComplete( )
{
 8002b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b28:	b086      	sub	sp, #24
 8002b2a:	af06      	add	r7, sp, #24
	if( testRead != false )
 8002b2c:	4b87      	ldr	r3, [pc, #540]	; (8002d4c <ProcessEepromReadComplete+0x228>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d006      	beq.n	8002b42 <ProcessEepromReadComplete+0x1e>
	{
		testRead = false;
 8002b34:	4b85      	ldr	r3, [pc, #532]	; (8002d4c <ProcessEepromReadComplete+0x228>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]

		displayEepromTest = true;
 8002b3a:	4b85      	ldr	r3, [pc, #532]	; (8002d50 <ProcessEepromReadComplete+0x22c>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]

	    return;
 8002b40:	e100      	b.n	8002d44 <ProcessEepromReadComplete+0x220>
	}

	if( getLogWritePtr != false )
 8002b42:	4b84      	ldr	r3, [pc, #528]	; (8002d54 <ProcessEepromReadComplete+0x230>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <ProcessEepromReadComplete+0x3a>
	{
		getLogWritePtr = false;
 8002b4a:	4b82      	ldr	r3, [pc, #520]	; (8002d54 <ProcessEepromReadComplete+0x230>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]

		UartPrintf("Log Write Ptr: 0x%04x\n", eepromLogWritePtr);
 8002b50:	4b81      	ldr	r3, [pc, #516]	; (8002d58 <ProcessEepromReadComplete+0x234>)
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	4619      	mov	r1, r3
 8002b56:	4881      	ldr	r0, [pc, #516]	; (8002d5c <ProcessEepromReadComplete+0x238>)
 8002b58:	f003 f8be 	bl	8005cd8 <UartPrintf>

		return;
 8002b5c:	e0f2      	b.n	8002d44 <ProcessEepromReadComplete+0x220>
	}

	if( getMinuteCounter != false )
 8002b5e:	4b80      	ldr	r3, [pc, #512]	; (8002d60 <ProcessEepromReadComplete+0x23c>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00e      	beq.n	8002b84 <ProcessEepromReadComplete+0x60>
	{
		getMinuteCounter = false;
 8002b66:	4b7e      	ldr	r3, [pc, #504]	; (8002d60 <ProcessEepromReadComplete+0x23c>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]

		SetMinuteCount( minuteCounter );
 8002b6c:	4b7d      	ldr	r3, [pc, #500]	; (8002d64 <ProcessEepromReadComplete+0x240>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f004 ffcb 	bl	8007b0c <SetMinuteCount>

		UartPrintf("Minute Counter: 0x%04x\n", minuteCounter);
 8002b76:	4b7b      	ldr	r3, [pc, #492]	; (8002d64 <ProcessEepromReadComplete+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	487a      	ldr	r0, [pc, #488]	; (8002d68 <ProcessEepromReadComplete+0x244>)
 8002b7e:	f003 f8ab 	bl	8005cd8 <UartPrintf>

		return;
 8002b82:	e0df      	b.n	8002d44 <ProcessEepromReadComplete+0x220>
	}

	if( getEventCounter != false )
 8002b84:	4b79      	ldr	r3, [pc, #484]	; (8002d6c <ProcessEepromReadComplete+0x248>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00e      	beq.n	8002baa <ProcessEepromReadComplete+0x86>
	{
		getEventCounter = false;
 8002b8c:	4b77      	ldr	r3, [pc, #476]	; (8002d6c <ProcessEepromReadComplete+0x248>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]

		SetEventCount( eventCounter );
 8002b92:	4b77      	ldr	r3, [pc, #476]	; (8002d70 <ProcessEepromReadComplete+0x24c>)
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fe94 	bl	80028c4 <SetEventCount>

		UartPrintf("Event Counter: %4u\n", eventCounter);
 8002b9c:	4b74      	ldr	r3, [pc, #464]	; (8002d70 <ProcessEepromReadComplete+0x24c>)
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4874      	ldr	r0, [pc, #464]	; (8002d74 <ProcessEepromReadComplete+0x250>)
 8002ba4:	f003 f898 	bl	8005cd8 <UartPrintf>

		return;
 8002ba8:	e0cc      	b.n	8002d44 <ProcessEepromReadComplete+0x220>
	}

	if( getNivWord != false )
 8002baa:	4b73      	ldr	r3, [pc, #460]	; (8002d78 <ProcessEepromReadComplete+0x254>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d009      	beq.n	8002bc6 <ProcessEepromReadComplete+0xa2>
	{
		getNivWord = false;
 8002bb2:	4b71      	ldr	r3, [pc, #452]	; (8002d78 <ProcessEepromReadComplete+0x254>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]

		UartPrintf("Niv Word: 0x%08x\n", nivWordValue);
 8002bb8:	4b70      	ldr	r3, [pc, #448]	; (8002d7c <ProcessEepromReadComplete+0x258>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4870      	ldr	r0, [pc, #448]	; (8002d80 <ProcessEepromReadComplete+0x25c>)
 8002bc0:	f003 f88a 	bl	8005cd8 <UartPrintf>

		return;
 8002bc4:	e0be      	b.n	8002d44 <ProcessEepromReadComplete+0x220>
	}

	if( getHumanUseWord != false )
 8002bc6:	4b6f      	ldr	r3, [pc, #444]	; (8002d84 <ProcessEepromReadComplete+0x260>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <ProcessEepromReadComplete+0xbe>
	{
		getHumanUseWord = false;
 8002bce:	4b6d      	ldr	r3, [pc, #436]	; (8002d84 <ProcessEepromReadComplete+0x260>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]

		UartPrintf("Human Use Word: 0x%08x\n", humanUseWordValue);
 8002bd4:	4b6c      	ldr	r3, [pc, #432]	; (8002d88 <ProcessEepromReadComplete+0x264>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	486c      	ldr	r0, [pc, #432]	; (8002d8c <ProcessEepromReadComplete+0x268>)
 8002bdc:	f003 f87c 	bl	8005cd8 <UartPrintf>

		return;
 8002be0:	e0b0      	b.n	8002d44 <ProcessEepromReadComplete+0x220>
	}

	if( getProgramCrc != false )
 8002be2:	4b6b      	ldr	r3, [pc, #428]	; (8002d90 <ProcessEepromReadComplete+0x26c>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <ProcessEepromReadComplete+0xce>
	{
		getProgramCrc = false;
 8002bea:	4b69      	ldr	r3, [pc, #420]	; (8002d90 <ProcessEepromReadComplete+0x26c>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]

		return;
 8002bf0:	e0a8      	b.n	8002d44 <ProcessEepromReadComplete+0x220>
	}

	if( getCalConstants != false )
 8002bf2:	4b68      	ldr	r3, [pc, #416]	; (8002d94 <ProcessEepromReadComplete+0x270>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d03a      	beq.n	8002c70 <ProcessEepromReadComplete+0x14c>
	{
		getCalConstants = false;
 8002bfa:	4b66      	ldr	r3, [pc, #408]	; (8002d94 <ProcessEepromReadComplete+0x270>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]

		CalcCalConstantsCrc();
 8002c00:	f7ff fef6 	bl	80029f0 <CalcCalConstantsCrc>

		if( calcCalConstCrc != calibrationConstants.crc32 )
 8002c04:	4b64      	ldr	r3, [pc, #400]	; (8002d98 <ProcessEepromReadComplete+0x274>)
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	4b64      	ldr	r3, [pc, #400]	; (8002d9c <ProcessEepromReadComplete+0x278>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d006      	beq.n	8002c1e <ProcessEepromReadComplete+0xfa>
		{
			UartPrintf("Calibration Constants Bad CRC\n");
 8002c10:	4863      	ldr	r0, [pc, #396]	; (8002da0 <ProcessEepromReadComplete+0x27c>)
 8002c12:	f003 f861 	bl	8005cd8 <UartPrintf>
			calConstantsCrcGood = 1;
 8002c16:	4b63      	ldr	r3, [pc, #396]	; (8002da4 <ProcessEepromReadComplete+0x280>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
 8002c1c:	e005      	b.n	8002c2a <ProcessEepromReadComplete+0x106>
		}
		else
		{
			UartPrintf("Calibration Constants Good CRC\n");
 8002c1e:	4862      	ldr	r0, [pc, #392]	; (8002da8 <ProcessEepromReadComplete+0x284>)
 8002c20:	f003 f85a 	bl	8005cd8 <UartPrintf>
			calConstantsCrcGood = 0;
 8002c24:	4b5f      	ldr	r3, [pc, #380]	; (8002da4 <ProcessEepromReadComplete+0x280>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	701a      	strb	r2, [r3, #0]
		}

		UartPrintf("PinspOffset: %d  PexpOffset: %d   PinspGain: %f  PexpGain: %f  CRC: 0x%08x\n", calibrationConstants.pInspOffset, calibrationConstants.pExpOffset,
 8002c2a:	4b5b      	ldr	r3, [pc, #364]	; (8002d98 <ProcessEepromReadComplete+0x274>)
 8002c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c30:	461e      	mov	r6, r3
 8002c32:	4b59      	ldr	r3, [pc, #356]	; (8002d98 <ProcessEepromReadComplete+0x274>)
 8002c34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c38:	4698      	mov	r8, r3
				calibrationConstants.pInspGain.floatValue, calibrationConstants.pExpGain.floatValue, calibrationConstants.crc32);
 8002c3a:	4b57      	ldr	r3, [pc, #348]	; (8002d98 <ProcessEepromReadComplete+0x274>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
		UartPrintf("PinspOffset: %d  PexpOffset: %d   PinspGain: %f  PexpGain: %f  CRC: 0x%08x\n", calibrationConstants.pInspOffset, calibrationConstants.pExpOffset,
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd fcba 	bl	80005b8 <__aeabi_f2d>
 8002c44:	4604      	mov	r4, r0
 8002c46:	460d      	mov	r5, r1
				calibrationConstants.pInspGain.floatValue, calibrationConstants.pExpGain.floatValue, calibrationConstants.crc32);
 8002c48:	4b53      	ldr	r3, [pc, #332]	; (8002d98 <ProcessEepromReadComplete+0x274>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
		UartPrintf("PinspOffset: %d  PexpOffset: %d   PinspGain: %f  PexpGain: %f  CRC: 0x%08x\n", calibrationConstants.pInspOffset, calibrationConstants.pExpOffset,
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd fcb3 	bl	80005b8 <__aeabi_f2d>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4950      	ldr	r1, [pc, #320]	; (8002d98 <ProcessEepromReadComplete+0x274>)
 8002c58:	68c9      	ldr	r1, [r1, #12]
 8002c5a:	9104      	str	r1, [sp, #16]
 8002c5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c60:	e9cd 4500 	strd	r4, r5, [sp]
 8002c64:	4642      	mov	r2, r8
 8002c66:	4631      	mov	r1, r6
 8002c68:	4850      	ldr	r0, [pc, #320]	; (8002dac <ProcessEepromReadComplete+0x288>)
 8002c6a:	f003 f835 	bl	8005cd8 <UartPrintf>
		return;
 8002c6e:	e069      	b.n	8002d44 <ProcessEepromReadComplete+0x220>
	}

	if( getMfgDate != false )
 8002c70:	4b4f      	ldr	r3, [pc, #316]	; (8002db0 <ProcessEepromReadComplete+0x28c>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d007      	beq.n	8002c88 <ProcessEepromReadComplete+0x164>
	{
		getMfgDate = false;
 8002c78:	4b4d      	ldr	r3, [pc, #308]	; (8002db0 <ProcessEepromReadComplete+0x28c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]

		UartPrintf("Manufacture Date: %s\n", manufactureDate);
 8002c7e:	494d      	ldr	r1, [pc, #308]	; (8002db4 <ProcessEepromReadComplete+0x290>)
 8002c80:	484d      	ldr	r0, [pc, #308]	; (8002db8 <ProcessEepromReadComplete+0x294>)
 8002c82:	f003 f829 	bl	8005cd8 <UartPrintf>

		return;
 8002c86:	e05d      	b.n	8002d44 <ProcessEepromReadComplete+0x220>
	}

	if( getSerialNumber != false )
 8002c88:	4b4c      	ldr	r3, [pc, #304]	; (8002dbc <ProcessEepromReadComplete+0x298>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d009      	beq.n	8002ca4 <ProcessEepromReadComplete+0x180>
	{
		getSerialNumber = false;
 8002c90:	4b4a      	ldr	r3, [pc, #296]	; (8002dbc <ProcessEepromReadComplete+0x298>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]

		UartPrintf("Serial Number: %u\n", serialNumber);
 8002c96:	4b4a      	ldr	r3, [pc, #296]	; (8002dc0 <ProcessEepromReadComplete+0x29c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4849      	ldr	r0, [pc, #292]	; (8002dc4 <ProcessEepromReadComplete+0x2a0>)
 8002c9e:	f003 f81b 	bl	8005cd8 <UartPrintf>

		return;
 8002ca2:	e04f      	b.n	8002d44 <ProcessEepromReadComplete+0x220>
	}

	if( getWatchdogByte != false )
 8002ca4:	4b48      	ldr	r3, [pc, #288]	; (8002dc8 <ProcessEepromReadComplete+0x2a4>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <ProcessEepromReadComplete+0x190>
	{
		getWatchdogByte = false;
 8002cac:	4b46      	ldr	r3, [pc, #280]	; (8002dc8 <ProcessEepromReadComplete+0x2a4>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]

		return;
 8002cb2:	e047      	b.n	8002d44 <ProcessEepromReadComplete+0x220>
	}

	if( getSupercapByte != false )
 8002cb4:	4b45      	ldr	r3, [pc, #276]	; (8002dcc <ProcessEepromReadComplete+0x2a8>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <ProcessEepromReadComplete+0x1a0>
	{
		getSupercapByte = false;
 8002cbc:	4b43      	ldr	r3, [pc, #268]	; (8002dcc <ProcessEepromReadComplete+0x2a8>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]

		return;
 8002cc2:	e03f      	b.n	8002d44 <ProcessEepromReadComplete+0x220>
	}

	if( dumpEepromFlag != false )
 8002cc4:	4b42      	ldr	r3, [pc, #264]	; (8002dd0 <ProcessEepromReadComplete+0x2ac>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d03b      	beq.n	8002d44 <ProcessEepromReadComplete+0x220>
	{
		if( logReadComplete != false )
 8002ccc:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <ProcessEepromReadComplete+0x2b0>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d006      	beq.n	8002ce2 <ProcessEepromReadComplete+0x1be>
		{
			// Log read is complete
			// Set flag to display final portion of log that has been read
			dumpEepromFlag = false;
 8002cd4:	4b3e      	ldr	r3, [pc, #248]	; (8002dd0 <ProcessEepromReadComplete+0x2ac>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
			displayLogData = true;
 8002cda:	4b3f      	ldr	r3, [pc, #252]	; (8002dd8 <ProcessEepromReadComplete+0x2b4>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
 8002ce0:	e030      	b.n	8002d44 <ProcessEepromReadComplete+0x220>
		}
		else if( initiateLogRead != false )
 8002ce2:	4b3e      	ldr	r3, [pc, #248]	; (8002ddc <ProcessEepromReadComplete+0x2b8>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d029      	beq.n	8002d3e <ProcessEepromReadComplete+0x21a>
		{
			initiateLogRead = false;
 8002cea:	4b3c      	ldr	r3, [pc, #240]	; (8002ddc <ProcessEepromReadComplete+0x2b8>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]

			// Read first portion of log
			if(( logWrappedFlag == 0 ) && ( eepromLogWritePtr == LOG_START_ADDR ))
 8002cf0:	4b3b      	ldr	r3, [pc, #236]	; (8002de0 <ProcessEepromReadComplete+0x2bc>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10d      	bne.n	8002d14 <ProcessEepromReadComplete+0x1f0>
 8002cf8:	4b17      	ldr	r3, [pc, #92]	; (8002d58 <ProcessEepromReadComplete+0x234>)
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	2b80      	cmp	r3, #128	; 0x80
 8002cfe:	d109      	bne.n	8002d14 <ProcessEepromReadComplete+0x1f0>
			{
				dumpEepromFlag = false;
 8002d00:	4b33      	ldr	r3, [pc, #204]	; (8002dd0 <ProcessEepromReadComplete+0x2ac>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
				displayLogData = false;
 8002d06:	4b34      	ldr	r3, [pc, #208]	; (8002dd8 <ProcessEepromReadComplete+0x2b4>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
				UartPrintf("Log is empty.\n");
 8002d0c:	4835      	ldr	r0, [pc, #212]	; (8002de4 <ProcessEepromReadComplete+0x2c0>)
 8002d0e:	f002 ffe3 	bl	8005cd8 <UartPrintf>
 8002d12:	e017      	b.n	8002d44 <ProcessEepromReadComplete+0x220>
			}
			else if(( logWrappedFlag == 1 ) && ( eepromLogWritePtr != LOG_START_ADDR ))
 8002d14:	4b32      	ldr	r3, [pc, #200]	; (8002de0 <ProcessEepromReadComplete+0x2bc>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d10a      	bne.n	8002d32 <ProcessEepromReadComplete+0x20e>
 8002d1c:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <ProcessEepromReadComplete+0x234>)
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	2b80      	cmp	r3, #128	; 0x80
 8002d22:	d006      	beq.n	8002d32 <ProcessEepromReadComplete+0x20e>
			{
				// Log wrapped flag is set, dump from log write pointer to end of log, and then from log start to log write pointer - 1
				logReadPointer = eepromLogWritePtr;
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <ProcessEepromReadComplete+0x234>)
 8002d26:	881a      	ldrh	r2, [r3, #0]
 8002d28:	4b2f      	ldr	r3, [pc, #188]	; (8002de8 <ProcessEepromReadComplete+0x2c4>)
 8002d2a:	801a      	strh	r2, [r3, #0]
				ReadFromUpperPartOfEeprom();
 8002d2c:	f7ff fe72 	bl	8002a14 <ReadFromUpperPartOfEeprom>
 8002d30:	e008      	b.n	8002d44 <ProcessEepromReadComplete+0x220>
			}
			else
			{
				// Log wrapped flag is not set, dump from log start to log write pointer - 1
				logReadPointer = LOG_START_ADDR;
 8002d32:	4b2d      	ldr	r3, [pc, #180]	; (8002de8 <ProcessEepromReadComplete+0x2c4>)
 8002d34:	2280      	movs	r2, #128	; 0x80
 8002d36:	801a      	strh	r2, [r3, #0]
				ReadFromLowerPartOfEeprom();
 8002d38:	f7ff feac 	bl	8002a94 <ReadFromLowerPartOfEeprom>
 8002d3c:	e002      	b.n	8002d44 <ProcessEepromReadComplete+0x220>
			}
		}
		else
		{
			// Set flag to display portion of log that has been read
			displayLogData = true;
 8002d3e:	4b26      	ldr	r3, [pc, #152]	; (8002dd8 <ProcessEepromReadComplete+0x2b4>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002d44:	46bd      	mov	sp, r7
 8002d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000ab9 	.word	0x20000ab9
 8002d50:	20000ab6 	.word	0x20000ab6
 8002d54:	20000aae 	.word	0x20000aae
 8002d58:	20000894 	.word	0x20000894
 8002d5c:	08020ff4 	.word	0x08020ff4
 8002d60:	20000aaf 	.word	0x20000aaf
 8002d64:	2000089c 	.word	0x2000089c
 8002d68:	0802100c 	.word	0x0802100c
 8002d6c:	20000ab0 	.word	0x20000ab0
 8002d70:	200008a8 	.word	0x200008a8
 8002d74:	08021024 	.word	0x08021024
 8002d78:	20000ab1 	.word	0x20000ab1
 8002d7c:	200008a0 	.word	0x200008a0
 8002d80:	08021038 	.word	0x08021038
 8002d84:	20000ab2 	.word	0x20000ab2
 8002d88:	200008a4 	.word	0x200008a4
 8002d8c:	0802104c 	.word	0x0802104c
 8002d90:	20000ab3 	.word	0x20000ab3
 8002d94:	20000aba 	.word	0x20000aba
 8002d98:	200005f4 	.word	0x200005f4
 8002d9c:	20000898 	.word	0x20000898
 8002da0:	08021064 	.word	0x08021064
 8002da4:	2000004c 	.word	0x2000004c
 8002da8:	08021084 	.word	0x08021084
 8002dac:	080210a4 	.word	0x080210a4
 8002db0:	20000abe 	.word	0x20000abe
 8002db4:	2000003c 	.word	0x2000003c
 8002db8:	080210f0 	.word	0x080210f0
 8002dbc:	20000abf 	.word	0x20000abf
 8002dc0:	20000604 	.word	0x20000604
 8002dc4:	08021108 	.word	0x08021108
 8002dc8:	20000ab7 	.word	0x20000ab7
 8002dcc:	20000ab8 	.word	0x20000ab8
 8002dd0:	20000abb 	.word	0x20000abb
 8002dd4:	20000abd 	.word	0x20000abd
 8002dd8:	20000ab5 	.word	0x20000ab5
 8002ddc:	20000abc 	.word	0x20000abc
 8002de0:	200008aa 	.word	0x200008aa
 8002de4:	0802111c 	.word	0x0802111c
 8002de8:	20000aac 	.word	0x20000aac

08002dec <SynchOut>:
uint32_t g_currentDACVal = 0;

/*                                                                          _____
SynchOut();		Generates a single pulse 100mS duration  High-Low-High ____|     |____  */
void SynchOut(bool status)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, SYNC_OUT_Pin, status);
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dfe:	4803      	ldr	r0, [pc, #12]	; (8002e0c <SynchOut+0x20>)
 8002e00:	f007 fde2 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 8002e04:	bf00      	nop
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40020400 	.word	0x40020400

08002e10 <valve_control>:
  * @brief VALVE Control Functions
  * @param None
  * @retval None
  */
void valve_control(uint8_t valvename, bool status)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	460a      	mov	r2, r1
 8002e1a:	71fb      	strb	r3, [r7, #7]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	71bb      	strb	r3, [r7, #6]
	switch(valvename){
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	2b07      	cmp	r3, #7
 8002e26:	d84c      	bhi.n	8002ec2 <valve_control+0xb2>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <valve_control+0x20>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e51 	.word	0x08002e51
 8002e34:	08002e5f 	.word	0x08002e5f
 8002e38:	08002e6d 	.word	0x08002e6d
 8002e3c:	08002e7b 	.word	0x08002e7b
 8002e40:	08002e89 	.word	0x08002e89
 8002e44:	08002e97 	.word	0x08002e97
 8002e48:	08002ea5 	.word	0x08002ea5
 8002e4c:	08002eb3 	.word	0x08002eb3
		case 1 :
			HAL_GPIO_WritePin(GPIOG, VALVE_1A_CTRL_Pin, status);
 8002e50:	79bb      	ldrb	r3, [r7, #6]
 8002e52:	461a      	mov	r2, r3
 8002e54:	2101      	movs	r1, #1
 8002e56:	481d      	ldr	r0, [pc, #116]	; (8002ecc <valve_control+0xbc>)
 8002e58:	f007 fdb6 	bl	800a9c8 <HAL_GPIO_WritePin>
			break;
 8002e5c:	e031      	b.n	8002ec2 <valve_control+0xb2>
		case 2:
			HAL_GPIO_WritePin(GPIOG, VALVE_1B_CTRL_Pin, status);
 8002e5e:	79bb      	ldrb	r3, [r7, #6]
 8002e60:	461a      	mov	r2, r3
 8002e62:	2102      	movs	r1, #2
 8002e64:	4819      	ldr	r0, [pc, #100]	; (8002ecc <valve_control+0xbc>)
 8002e66:	f007 fdaf 	bl	800a9c8 <HAL_GPIO_WritePin>
			break;
 8002e6a:	e02a      	b.n	8002ec2 <valve_control+0xb2>
		case 3:
			HAL_GPIO_WritePin(GPIOG, VALVE_2A_CTRL_Pin, status);
 8002e6c:	79bb      	ldrb	r3, [r7, #6]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	2104      	movs	r1, #4
 8002e72:	4816      	ldr	r0, [pc, #88]	; (8002ecc <valve_control+0xbc>)
 8002e74:	f007 fda8 	bl	800a9c8 <HAL_GPIO_WritePin>
			break;
 8002e78:	e023      	b.n	8002ec2 <valve_control+0xb2>
		case 4:
			HAL_GPIO_WritePin(GPIOG, VALVE_2B_CTRL_Pin, status);
 8002e7a:	79bb      	ldrb	r3, [r7, #6]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	2108      	movs	r1, #8
 8002e80:	4812      	ldr	r0, [pc, #72]	; (8002ecc <valve_control+0xbc>)
 8002e82:	f007 fda1 	bl	800a9c8 <HAL_GPIO_WritePin>
			break;
 8002e86:	e01c      	b.n	8002ec2 <valve_control+0xb2>
		case 5:
			HAL_GPIO_WritePin(GPIOG, VALVE_3A_CTRL_Pin, status);
 8002e88:	79bb      	ldrb	r3, [r7, #6]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2120      	movs	r1, #32
 8002e8e:	480f      	ldr	r0, [pc, #60]	; (8002ecc <valve_control+0xbc>)
 8002e90:	f007 fd9a 	bl	800a9c8 <HAL_GPIO_WritePin>
			break;
 8002e94:	e015      	b.n	8002ec2 <valve_control+0xb2>
		case 6:
			HAL_GPIO_WritePin(GPIOG, VALVE_3B_CTRL_Pin, status);
 8002e96:	79bb      	ldrb	r3, [r7, #6]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	2140      	movs	r1, #64	; 0x40
 8002e9c:	480b      	ldr	r0, [pc, #44]	; (8002ecc <valve_control+0xbc>)
 8002e9e:	f007 fd93 	bl	800a9c8 <HAL_GPIO_WritePin>
			break;
 8002ea2:	e00e      	b.n	8002ec2 <valve_control+0xb2>
		case 7:
			HAL_GPIO_WritePin(GPIOG, VALVE_4A_CTRL_Pin, status);
 8002ea4:	79bb      	ldrb	r3, [r7, #6]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	2180      	movs	r1, #128	; 0x80
 8002eaa:	4808      	ldr	r0, [pc, #32]	; (8002ecc <valve_control+0xbc>)
 8002eac:	f007 fd8c 	bl	800a9c8 <HAL_GPIO_WritePin>
			break;
 8002eb0:	e007      	b.n	8002ec2 <valve_control+0xb2>
		case 8:
			HAL_GPIO_WritePin(GPIOG, VALVE_4B_CTRL_Pin, status);
 8002eb2:	79bb      	ldrb	r3, [r7, #6]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eba:	4804      	ldr	r0, [pc, #16]	; (8002ecc <valve_control+0xbc>)
 8002ebc:	f007 fd84 	bl	800a9c8 <HAL_GPIO_WritePin>
			break;
 8002ec0:	bf00      	nop
	}
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40021800 	.word	0x40021800

08002ed0 <Valve_1A_On>:

void Valve_1A_On()
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_1A_CTRL_Pin, GPIO_PIN_SET);
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <Valve_1A_On+0x14>)
 8002eda:	f007 fd75 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40021800 	.word	0x40021800

08002ee8 <Valve_1A_Off>:

void Valve_1A_Off()
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_1A_CTRL_Pin, GPIO_PIN_RESET);
 8002eec:	2200      	movs	r2, #0
 8002eee:	2101      	movs	r1, #1
 8002ef0:	4802      	ldr	r0, [pc, #8]	; (8002efc <Valve_1A_Off+0x14>)
 8002ef2:	f007 fd69 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40021800 	.word	0x40021800

08002f00 <Valve_1B_On>:

void Valve_1B_On()
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_1B_CTRL_Pin, GPIO_PIN_SET);
 8002f04:	2201      	movs	r2, #1
 8002f06:	2102      	movs	r1, #2
 8002f08:	4802      	ldr	r0, [pc, #8]	; (8002f14 <Valve_1B_On+0x14>)
 8002f0a:	f007 fd5d 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40021800 	.word	0x40021800

08002f18 <Valve_1B_Off>:

void Valve_1B_Off()
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_1B_CTRL_Pin, GPIO_PIN_RESET);
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2102      	movs	r1, #2
 8002f20:	4802      	ldr	r0, [pc, #8]	; (8002f2c <Valve_1B_Off+0x14>)
 8002f22:	f007 fd51 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40021800 	.word	0x40021800

08002f30 <Valve_2A_On>:

void Valve_2A_On()
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_2A_CTRL_Pin, GPIO_PIN_SET);
 8002f34:	2201      	movs	r2, #1
 8002f36:	2104      	movs	r1, #4
 8002f38:	4802      	ldr	r0, [pc, #8]	; (8002f44 <Valve_2A_On+0x14>)
 8002f3a:	f007 fd45 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40021800 	.word	0x40021800

08002f48 <Valve_2A_Off>:

void Valve_2A_Off()
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_2A_CTRL_Pin, GPIO_PIN_RESET);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2104      	movs	r1, #4
 8002f50:	4802      	ldr	r0, [pc, #8]	; (8002f5c <Valve_2A_Off+0x14>)
 8002f52:	f007 fd39 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40021800 	.word	0x40021800

08002f60 <Valve_2B_On>:

void Valve_2B_On()
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_2B_CTRL_Pin, GPIO_PIN_SET);
 8002f64:	2201      	movs	r2, #1
 8002f66:	2108      	movs	r1, #8
 8002f68:	4802      	ldr	r0, [pc, #8]	; (8002f74 <Valve_2B_On+0x14>)
 8002f6a:	f007 fd2d 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40021800 	.word	0x40021800

08002f78 <Valve_2B_Off>:

void Valve_2B_Off()
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_2B_CTRL_Pin, GPIO_PIN_RESET);
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2108      	movs	r1, #8
 8002f80:	4802      	ldr	r0, [pc, #8]	; (8002f8c <Valve_2B_Off+0x14>)
 8002f82:	f007 fd21 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40021800 	.word	0x40021800

08002f90 <Valve_3A_On>:

void Valve_3A_On()
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_3A_CTRL_Pin, GPIO_PIN_SET);
 8002f94:	2201      	movs	r2, #1
 8002f96:	2120      	movs	r1, #32
 8002f98:	4802      	ldr	r0, [pc, #8]	; (8002fa4 <Valve_3A_On+0x14>)
 8002f9a:	f007 fd15 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40021800 	.word	0x40021800

08002fa8 <Valve_3A_Off>:

void Valve_3A_Off()
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_3A_CTRL_Pin, GPIO_PIN_RESET);
 8002fac:	2200      	movs	r2, #0
 8002fae:	2120      	movs	r1, #32
 8002fb0:	4802      	ldr	r0, [pc, #8]	; (8002fbc <Valve_3A_Off+0x14>)
 8002fb2:	f007 fd09 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40021800 	.word	0x40021800

08002fc0 <Valve_3B_On>:

void Valve_3B_On()
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_3B_CTRL_Pin, GPIO_PIN_SET);
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	2140      	movs	r1, #64	; 0x40
 8002fc8:	4802      	ldr	r0, [pc, #8]	; (8002fd4 <Valve_3B_On+0x14>)
 8002fca:	f007 fcfd 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40021800 	.word	0x40021800

08002fd8 <Valve_3B_Off>:

void Valve_3B_Off()
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_3B_CTRL_Pin, GPIO_PIN_RESET);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2140      	movs	r1, #64	; 0x40
 8002fe0:	4802      	ldr	r0, [pc, #8]	; (8002fec <Valve_3B_Off+0x14>)
 8002fe2:	f007 fcf1 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40021800 	.word	0x40021800

08002ff0 <Valve_4A_On>:

void Valve_4A_On()
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_4A_CTRL_Pin, GPIO_PIN_SET);
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	2180      	movs	r1, #128	; 0x80
 8002ff8:	4802      	ldr	r0, [pc, #8]	; (8003004 <Valve_4A_On+0x14>)
 8002ffa:	f007 fce5 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40021800 	.word	0x40021800

08003008 <Valve_4A_Off>:

void Valve_4A_Off()
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_4A_CTRL_Pin, GPIO_PIN_RESET);
 800300c:	2200      	movs	r2, #0
 800300e:	2180      	movs	r1, #128	; 0x80
 8003010:	4802      	ldr	r0, [pc, #8]	; (800301c <Valve_4A_Off+0x14>)
 8003012:	f007 fcd9 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40021800 	.word	0x40021800

08003020 <batleds_control>:

// Battery LED Control
// Syntaxis example:  batled(LedBat25, on/off)

void batleds_control(uint8_t batled, bool status)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	460a      	mov	r2, r1
 800302a:	71fb      	strb	r3, [r7, #7]
 800302c:	4613      	mov	r3, r2
 800302e:	71bb      	strb	r3, [r7, #6]
	switch(batled){
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	3b01      	subs	r3, #1
 8003034:	2b03      	cmp	r3, #3
 8003036:	d82b      	bhi.n	8003090 <batleds_control+0x70>
 8003038:	a201      	add	r2, pc, #4	; (adr r2, 8003040 <batleds_control+0x20>)
 800303a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303e:	bf00      	nop
 8003040:	08003051 	.word	0x08003051
 8003044:	08003061 	.word	0x08003061
 8003048:	08003071 	.word	0x08003071
 800304c:	08003081 	.word	0x08003081
	case 1 :
			HAL_GPIO_WritePin(GPIOD, LED_BAT25_Pin, status);
 8003050:	79bb      	ldrb	r3, [r7, #6]
 8003052:	461a      	mov	r2, r3
 8003054:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003058:	480f      	ldr	r0, [pc, #60]	; (8003098 <batleds_control+0x78>)
 800305a:	f007 fcb5 	bl	800a9c8 <HAL_GPIO_WritePin>
			break;
 800305e:	e017      	b.n	8003090 <batleds_control+0x70>
	case 2:
			HAL_GPIO_WritePin(GPIOD, LED_BAT50_Pin, status);
 8003060:	79bb      	ldrb	r3, [r7, #6]
 8003062:	461a      	mov	r2, r3
 8003064:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003068:	480b      	ldr	r0, [pc, #44]	; (8003098 <batleds_control+0x78>)
 800306a:	f007 fcad 	bl	800a9c8 <HAL_GPIO_WritePin>
			break;
 800306e:	e00f      	b.n	8003090 <batleds_control+0x70>
	case 3:
			HAL_GPIO_WritePin(GPIOD, LED_BAT75_Pin, status);
 8003070:	79bb      	ldrb	r3, [r7, #6]
 8003072:	461a      	mov	r2, r3
 8003074:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003078:	4807      	ldr	r0, [pc, #28]	; (8003098 <batleds_control+0x78>)
 800307a:	f007 fca5 	bl	800a9c8 <HAL_GPIO_WritePin>
			break;
 800307e:	e007      	b.n	8003090 <batleds_control+0x70>
	case 4:
			HAL_GPIO_WritePin(GPIOD, LED_BAT100_Pin, status);
 8003080:	79bb      	ldrb	r3, [r7, #6]
 8003082:	461a      	mov	r2, r3
 8003084:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003088:	4803      	ldr	r0, [pc, #12]	; (8003098 <batleds_control+0x78>)
 800308a:	f007 fc9d 	bl	800a9c8 <HAL_GPIO_WritePin>
			break;
 800308e:	bf00      	nop

	}

}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40020c00 	.word	0x40020c00

0800309c <alarmleds_control>:

// Alarm LED Control
// Syntaxis example:  alarmled yellow on/off
void alarmleds_control(uint8_t alarmled, bool status)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	460a      	mov	r2, r1
 80030a6:	71fb      	strb	r3, [r7, #7]
 80030a8:	4613      	mov	r3, r2
 80030aa:	71bb      	strb	r3, [r7, #6]
	switch(alarmled)
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d016      	beq.n	80030e0 <alarmleds_control+0x44>
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	dc1c      	bgt.n	80030f0 <alarmleds_control+0x54>
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d002      	beq.n	80030c0 <alarmleds_control+0x24>
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d008      	beq.n	80030d0 <alarmleds_control+0x34>

	    case 3:
		HAL_GPIO_WritePin(GPIOD, LED_R_Pin, status);
		break;
	}
}
 80030be:	e017      	b.n	80030f0 <alarmleds_control+0x54>
		HAL_GPIO_WritePin(GPIOD, LED_Y_Pin, status);
 80030c0:	79bb      	ldrb	r3, [r7, #6]
 80030c2:	461a      	mov	r2, r3
 80030c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030c8:	480b      	ldr	r0, [pc, #44]	; (80030f8 <alarmleds_control+0x5c>)
 80030ca:	f007 fc7d 	bl	800a9c8 <HAL_GPIO_WritePin>
		break;
 80030ce:	e00f      	b.n	80030f0 <alarmleds_control+0x54>
		HAL_GPIO_WritePin(GPIOD, LED_G_Pin, status);
 80030d0:	79bb      	ldrb	r3, [r7, #6]
 80030d2:	461a      	mov	r2, r3
 80030d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030d8:	4807      	ldr	r0, [pc, #28]	; (80030f8 <alarmleds_control+0x5c>)
 80030da:	f007 fc75 	bl	800a9c8 <HAL_GPIO_WritePin>
		break;
 80030de:	e007      	b.n	80030f0 <alarmleds_control+0x54>
		HAL_GPIO_WritePin(GPIOD, LED_R_Pin, status);
 80030e0:	79bb      	ldrb	r3, [r7, #6]
 80030e2:	461a      	mov	r2, r3
 80030e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030e8:	4803      	ldr	r0, [pc, #12]	; (80030f8 <alarmleds_control+0x5c>)
 80030ea:	f007 fc6d 	bl	800a9c8 <HAL_GPIO_WritePin>
		break;
 80030ee:	bf00      	nop
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40020c00 	.word	0x40020c00

080030fc <compressor_control>:

void compressor_control(bool status)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, COMPRESSOR_CTRL_Pin, status);
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	461a      	mov	r2, r3
 800310a:	2120      	movs	r1, #32
 800310c:	4803      	ldr	r0, [pc, #12]	; (800311c <compressor_control+0x20>)
 800310e:	f007 fc5b 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000

08003120 <Compressor_Control_On>:

void Compressor_Control_On()
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, COMPRESSOR_CTRL_Pin, GPIO_PIN_SET);
 8003124:	2201      	movs	r2, #1
 8003126:	2120      	movs	r1, #32
 8003128:	4802      	ldr	r0, [pc, #8]	; (8003134 <Compressor_Control_On+0x14>)
 800312a:	f007 fc4d 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000

08003138 <Compressor_Control_Off>:

void Compressor_Control_Off()
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, COMPRESSOR_CTRL_Pin, GPIO_PIN_RESET);
 800313c:	2200      	movs	r2, #0
 800313e:	2120      	movs	r1, #32
 8003140:	4802      	ldr	r0, [pc, #8]	; (800314c <Compressor_Control_Off+0x14>)
 8003142:	f007 fc41 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 8003146:	bf00      	nop
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000

08003150 <MembranePS_control>:

void MembranePS_control(bool status)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOG, MEMB_POWER_EN_Pin, status);
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	461a      	mov	r2, r3
 800315e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003162:	4803      	ldr	r0, [pc, #12]	; (8003170 <MembranePS_control+0x20>)
 8003164:	f007 fc30 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021800 	.word	0x40021800

08003174 <displayPS_control>:

// Tested OK 092121 GG
void displayPS_control(bool status)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, DISP_POWER_EN_Pin, status);
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	461a      	mov	r2, r3
 8003182:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003186:	4803      	ldr	r0, [pc, #12]	; (8003194 <displayPS_control+0x20>)
 8003188:	f007 fc1e 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40020000 	.word	0x40020000

08003198 <powerpcb_control>:

// Tested OK 090721 GG
void powerpcb_control(bool status)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, PWRRELAY_CTRL_Pin, status);  //PE6
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	461a      	mov	r2, r3
 80031a6:	2140      	movs	r1, #64	; 0x40
 80031a8:	4803      	ldr	r0, [pc, #12]	; (80031b8 <powerpcb_control+0x20>)
 80031aa:	f007 fc0d 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000

080031bc <PF_control>:

// Tested OK 090721 GG
void PF_control(bool status)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, PF_EN_Pin, status);  //PE11
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	461a      	mov	r2, r3
 80031ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031ce:	4803      	ldr	r0, [pc, #12]	; (80031dc <PF_control+0x20>)
 80031d0:	f007 fbfa 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000

080031e0 <PFC_RLY_control>:
	HAL_GPIO_WritePin(GPIOE, PF_EN_Pin, status);  //PE11
}*/

// Tested OK 090721 GG
void PFC_RLY_control(bool status)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PFC_RLY_EN_GPIO_Port, PFC_RLY_EN_Pin, status);  //PE7
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	461a      	mov	r2, r3
 80031ee:	2180      	movs	r1, #128	; 0x80
 80031f0:	4803      	ldr	r0, [pc, #12]	; (8003200 <PFC_RLY_control+0x20>)
 80031f2:	f007 fbe9 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000

08003204 <BlowerDAC>:
//BlowerDAC(n); 		n is a floating point value 0-100%
//For 12-bit DAC = 2^12 = 4096
//Vout = (Vref x D) / 2^N = (3.3 x 1000)/4096 = 0.806V */

void BlowerDAC(uint32_t speed)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	2100      	movs	r1, #0
 8003212:	4803      	ldr	r0, [pc, #12]	; (8003220 <BlowerDAC+0x1c>)
 8003214:	f006 fd8b 	bl	8009d2e <HAL_DAC_SetValue>
}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	20004cf4 	.word	0x20004cf4
 8003224:	00000000 	.word	0x00000000

08003228 <BlowerControl>:

void BlowerControl(uint16_t dacval)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	80fb      	strh	r3, [r7, #6]
	uint32_t var =0;
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
	float value = 0.0;
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	60bb      	str	r3, [r7, #8]
	g_currentDACVal = dacval;
 800323c:	88fb      	ldrh	r3, [r7, #6]
 800323e:	4a22      	ldr	r2, [pc, #136]	; (80032c8 <BlowerControl+0xa0>)
 8003240:	6013      	str	r3, [r2, #0]

	//Warning
	//These while loops with delays inside are mean! they halt all program
	//execution, use ONLY for hardware debugging and fix for firmware production

	while(var < dacval )   //(value < dacval )
 8003242:	e02f      	b.n	80032a4 <BlowerControl+0x7c>
	{
		var = value*(0xFFF + 1)/3.3;
 8003244:	edd7 7a02 	vldr	s15, [r7, #8]
 8003248:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80032cc <BlowerControl+0xa4>
 800324c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003250:	ee17 0a90 	vmov	r0, s15
 8003254:	f7fd f9b0 	bl	80005b8 <__aeabi_f2d>
 8003258:	a317      	add	r3, pc, #92	; (adr r3, 80032b8 <BlowerControl+0x90>)
 800325a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325e:	f7fd fb2d 	bl	80008bc <__aeabi_ddiv>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4610      	mov	r0, r2
 8003268:	4619      	mov	r1, r3
 800326a:	f7fd fcd5 	bl	8000c18 <__aeabi_d2uiz>
 800326e:	4603      	mov	r3, r0
 8003270:	60fb      	str	r3, [r7, #12]
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, var);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	2100      	movs	r1, #0
 8003278:	4815      	ldr	r0, [pc, #84]	; (80032d0 <BlowerControl+0xa8>)
 800327a:	f006 fd58 	bl	8009d2e <HAL_DAC_SetValue>
		value += 0.05;
 800327e:	68b8      	ldr	r0, [r7, #8]
 8003280:	f7fd f99a 	bl	80005b8 <__aeabi_f2d>
 8003284:	a30e      	add	r3, pc, #56	; (adr r3, 80032c0 <BlowerControl+0x98>)
 8003286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328a:	f7fd f837 	bl	80002fc <__adddf3>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4610      	mov	r0, r2
 8003294:	4619      	mov	r1, r3
 8003296:	f7fd fcdf 	bl	8000c58 <__aeabi_d2f>
 800329a:	4603      	mov	r3, r0
 800329c:	60bb      	str	r3, [r7, #8]
		HAL_Delay(40); //this controls the speed of ramping up
 800329e:	2028      	movs	r0, #40	; 0x28
 80032a0:	f005 fdfc 	bl	8008e9c <HAL_Delay>
	while(var < dacval )   //(value < dacval )
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d3cb      	bcc.n	8003244 <BlowerControl+0x1c>
	}
}
 80032ac:	bf00      	nop
 80032ae:	bf00      	nop
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	66666666 	.word	0x66666666
 80032bc:	400a6666 	.word	0x400a6666
 80032c0:	9999999a 	.word	0x9999999a
 80032c4:	3fa99999 	.word	0x3fa99999
 80032c8:	20000ac0 	.word	0x20000ac0
 80032cc:	45800000 	.word	0x45800000
 80032d0:	20004cf4 	.word	0x20004cf4

080032d4 <BlowerOff>:

void BlowerOff()
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
	//uint32_t var;
	uint32_t value = g_currentDACVal;
 80032da:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <BlowerOff+0x3c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	607b      	str	r3, [r7, #4]

    //Warning
	//These while loops with delays inside are mean! they halt all program
	//execution, use ONLY for hardware debugging and fix for firmware production

	while(value  > 50  )
 80032e0:	e00e      	b.n	8003300 <BlowerOff+0x2c>
	{
		value = value - 50;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3b32      	subs	r3, #50	; 0x32
 80032e6:	607b      	str	r3, [r7, #4]
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	2100      	movs	r1, #0
 80032ee:	4809      	ldr	r0, [pc, #36]	; (8003314 <BlowerOff+0x40>)
 80032f0:	f006 fd1d 	bl	8009d2e <HAL_DAC_SetValue>
		g_currentDACVal = value;
 80032f4:	4a06      	ldr	r2, [pc, #24]	; (8003310 <BlowerOff+0x3c>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6013      	str	r3, [r2, #0]
		HAL_Delay(40); //this controls the speed of ramping up
 80032fa:	2028      	movs	r0, #40	; 0x28
 80032fc:	f005 fdce 	bl	8008e9c <HAL_Delay>
	while(value  > 50  )
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b32      	cmp	r3, #50	; 0x32
 8003304:	d8ed      	bhi.n	80032e2 <BlowerOff+0xe>
	}
}
 8003306:	bf00      	nop
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20000ac0 	.word	0x20000ac0
 8003314:	20004cf4 	.word	0x20004cf4

08003318 <Set_Fan_ONOFF>:


void Set_Fan_ONOFF(bool OnOff)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	71fb      	strb	r3, [r7, #7]
	if(OnOff)
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d005      	beq.n	8003334 <Set_Fan_ONOFF+0x1c>
	{
		//UartPrintf("Fan On\n");
		htim14.Instance->CCR1 = 2500; //64% duty cycle
 8003328:	4b07      	ldr	r3, [pc, #28]	; (8003348 <Set_Fan_ONOFF+0x30>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003330:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		//UartPrintf("Fan Off\n");
		htim14.Instance->CCR1 = 0;
	}
}
 8003332:	e003      	b.n	800333c <Set_Fan_ONOFF+0x24>
		htim14.Instance->CCR1 = 0;
 8003334:	4b04      	ldr	r3, [pc, #16]	; (8003348 <Set_Fan_ONOFF+0x30>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2200      	movs	r2, #0
 800333a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	20007124 	.word	0x20007124

0800334c <FanOnOff>:

void FanOnOff( uint8_t OnOff )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	71fb      	strb	r3, [r7, #7]
    if(OnOff)
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <FanOnOff+0x18>
    {
        Set_Fan_ONOFF( true );
 800335c:	2001      	movs	r0, #1
 800335e:	f7ff ffdb 	bl	8003318 <Set_Fan_ONOFF>
 8003362:	e002      	b.n	800336a <FanOnOff+0x1e>
    }
    else
    {
    	Set_Fan_ONOFF( false );
 8003364:	2000      	movs	r0, #0
 8003366:	f7ff ffd7 	bl	8003318 <Set_Fan_ONOFF>
    }
	UartPrintf("Fan %s\n", (OnOff == 1) ? "ON" : "OFF");
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <FanOnOff+0x28>
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <FanOnOff+0x3c>)
 8003372:	e000      	b.n	8003376 <FanOnOff+0x2a>
 8003374:	4b05      	ldr	r3, [pc, #20]	; (800338c <FanOnOff+0x40>)
 8003376:	4619      	mov	r1, r3
 8003378:	4805      	ldr	r0, [pc, #20]	; (8003390 <FanOnOff+0x44>)
 800337a:	f002 fcad 	bl	8005cd8 <UartPrintf>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	08021180 	.word	0x08021180
 800338c:	08021184 	.word	0x08021184
 8003390:	08021188 	.word	0x08021188

08003394 <cprtsystem_init>:

void cprtsystem_init()
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
	//Power board is OFF
	powerpcb_control(false);
 8003398:	2000      	movs	r0, #0
 800339a:	f7ff fefd 	bl	8003198 <powerpcb_control>

	//Blower Relay is disable
	PFC_RLY_control(false);
 800339e:	2000      	movs	r0, #0
 80033a0:	f7ff ff1e 	bl	80031e0 <PFC_RLY_control>

	//DAC is set to zero
	BlowerDAC(0);
 80033a4:	2000      	movs	r0, #0
 80033a6:	f7ff ff2d 	bl	8003204 <BlowerDAC>

	//PFC_Module is disable
	PF_control(false);
 80033aa:	2000      	movs	r0, #0
 80033ac:	f7ff ff06 	bl	80031bc <PF_control>

	//Set chassis fan off
	//HAL_GPIO_WritePin(GPIOF, FAN_CTRL_PWM_TIM14_Pin, GPIO_PIN_RESET);
	//Please use the API to control the GPIO
	Set_Fan_ONOFF(false);
 80033b0:	2000      	movs	r0, #0
 80033b2:	f7ff ffb1 	bl	8003318 <Set_Fan_ONOFF>
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <cprtPowerOnSequence>:


void cprtPowerOnSequence()
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	; 0x28
 80033c0:	af02      	add	r7, sp, #8
	char msg[20];
	int len = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61bb      	str	r3, [r7, #24]
	uint32_t i = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]

	//1. Apply Power (24V) to Power PCBA (/PWR_Ctrl signal is active, low)
	powerpcb_control(true);
 80033ca:	2001      	movs	r0, #1
 80033cc:	f7ff fee4 	bl	8003198 <powerpcb_control>

	sprintf(msg, "Powerpcb=ON");
 80033d0:	1d3b      	adds	r3, r7, #4
 80033d2:	4951      	ldr	r1, [pc, #324]	; (8003518 <cprtPowerOnSequence+0x15c>)
 80033d4:	4618      	mov	r0, r3
 80033d6:	f019 fd3d 	bl	801ce54 <siprintf>
	len =  strlen(msg);
 80033da:	1d3b      	adds	r3, r7, #4
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fc ff29 	bl	8000234 <strlen>
 80033e2:	4603      	mov	r3, r0
 80033e4:	61bb      	str	r3, [r7, #24]
	LCD_Write(true, LCD_LINE_1, 0, msg, len);
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	1d3a      	adds	r2, r7, #4
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	4613      	mov	r3, r2
 80033f0:	2200      	movs	r2, #0
 80033f2:	2100      	movs	r1, #0
 80033f4:	2001      	movs	r0, #1
 80033f6:	f000 fb15 	bl	8003a24 <LCD_Write>
	//HAL_Delay(3000);
	for (i=0; i<10000000; i++) { }  //stupid delay to avoid using HAL_delay GG 10/05/21
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	e002      	b.n	8003406 <cprtPowerOnSequence+0x4a>
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	3301      	adds	r3, #1
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	4a44      	ldr	r2, [pc, #272]	; (800351c <cprtPowerOnSequence+0x160>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d3f8      	bcc.n	8003400 <cprtPowerOnSequence+0x44>

	//2. Enable PFC Module with /PF_Enable signal
	PF_control(true);
 800340e:	2001      	movs	r0, #1
 8003410:	f7ff fed4 	bl	80031bc <PF_control>

	sprintf(msg, "PFCctrl=ON");
 8003414:	1d3b      	adds	r3, r7, #4
 8003416:	4942      	ldr	r1, [pc, #264]	; (8003520 <cprtPowerOnSequence+0x164>)
 8003418:	4618      	mov	r0, r3
 800341a:	f019 fd1b 	bl	801ce54 <siprintf>
	len =  strlen(msg);
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	4618      	mov	r0, r3
 8003422:	f7fc ff07 	bl	8000234 <strlen>
 8003426:	4603      	mov	r3, r0
 8003428:	61bb      	str	r3, [r7, #24]
	LCD_Write(true, LCD_LINE_2, 0, msg, len);
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	1d3a      	adds	r2, r7, #4
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	4613      	mov	r3, r2
 8003434:	2200      	movs	r2, #0
 8003436:	2101      	movs	r1, #1
 8003438:	2001      	movs	r0, #1
 800343a:	f000 faf3 	bl	8003a24 <LCD_Write>

	//3. Wait until /LD_EN signal is active (low)
	//HAL_Delay(3000);  // As per PFC module specs Ton can be 2.5 Sec - 4 Sec

	for (i=0; i<30000000; i++) { }  //stupid delay to avoid using HAL_delay GG 10/05/21
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	e002      	b.n	800344a <cprtPowerOnSequence+0x8e>
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	3301      	adds	r3, #1
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4a35      	ldr	r2, [pc, #212]	; (8003524 <cprtPowerOnSequence+0x168>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d9f8      	bls.n	8003444 <cprtPowerOnSequence+0x88>

	//Evaluate if LD-ENABLE pin from PFC is active

	if (GetPfcLoadEnable())
 8003452:	f000 f8e3 	bl	800361c <GetPfcLoadEnable>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d040      	beq.n	80034de <cprtPowerOnSequence+0x122>
	{
		ClearPfcLoadEnable();
 800345c:	f000 f8d2 	bl	8003604 <ClearPfcLoadEnable>
		HAL_GPIO_WritePin(GPIOD, LED_Y_Pin, false);  //added for troubleshoot purposes GG 100521
 8003460:	2200      	movs	r2, #0
 8003462:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003466:	4830      	ldr	r0, [pc, #192]	; (8003528 <cprtPowerOnSequence+0x16c>)
 8003468:	f007 faae 	bl	800a9c8 <HAL_GPIO_WritePin>

		sprintf(msg, "/LDEnab detected!");
 800346c:	1d3b      	adds	r3, r7, #4
 800346e:	492f      	ldr	r1, [pc, #188]	; (800352c <cprtPowerOnSequence+0x170>)
 8003470:	4618      	mov	r0, r3
 8003472:	f019 fcef 	bl	801ce54 <siprintf>
		len = snprintf(msg, sizeof(msg), "%s", msg);
 8003476:	1d3b      	adds	r3, r7, #4
 8003478:	1d38      	adds	r0, r7, #4
 800347a:	4a2d      	ldr	r2, [pc, #180]	; (8003530 <cprtPowerOnSequence+0x174>)
 800347c:	2114      	movs	r1, #20
 800347e:	f019 fcb5 	bl	801cdec <sniprintf>
 8003482:	61b8      	str	r0, [r7, #24]
		LCD_Write(true, LCD_LINE_3, 0, msg, len-1);
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b2db      	uxtb	r3, r3
 800348c:	1d3a      	adds	r2, r7, #4
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	2200      	movs	r2, #0
 8003494:	2102      	movs	r1, #2
 8003496:	2001      	movs	r0, #1
 8003498:	f000 fac4 	bl	8003a24 <LCD_Write>

		HAL_Delay(1000); //small additional delay
 800349c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034a0:	f005 fcfc 	bl	8008e9c <HAL_Delay>
		//4. Close K2 relay to power Blower on
		PFC_RLY_control(true);
 80034a4:	2001      	movs	r0, #1
 80034a6:	f7ff fe9b 	bl	80031e0 <PFC_RLY_control>

		sprintf(msg, "PFC_rly=closed");
 80034aa:	1d3b      	adds	r3, r7, #4
 80034ac:	4921      	ldr	r1, [pc, #132]	; (8003534 <cprtPowerOnSequence+0x178>)
 80034ae:	4618      	mov	r0, r3
 80034b0:	f019 fcd0 	bl	801ce54 <siprintf>
		len =  strlen(msg);
 80034b4:	1d3b      	adds	r3, r7, #4
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fc febc 	bl	8000234 <strlen>
 80034bc:	4603      	mov	r3, r0
 80034be:	61bb      	str	r3, [r7, #24]
		LCD_Write(true, LCD_LINE_4, 0, msg, len);
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	1d3a      	adds	r2, r7, #4
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	2200      	movs	r2, #0
 80034cc:	2103      	movs	r1, #3
 80034ce:	2001      	movs	r0, #1
 80034d0:	f000 faa8 	bl	8003a24 <LCD_Write>
		HAL_Delay(1000); //small additional delay
 80034d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034d8:	f005 fce0 	bl	8008e9c <HAL_Delay>
		sprintf(msg, "PFCLdEN not detected");
		len =  strlen(msg);
		LCD_Write(true, LCD_LINE_3, 0, msg, len);
		HAL_Delay(2000); //small additional delay
	}
}
 80034dc:	e018      	b.n	8003510 <cprtPowerOnSequence+0x154>
		sprintf(msg, "PFCLdEN not detected");
 80034de:	1d3b      	adds	r3, r7, #4
 80034e0:	4915      	ldr	r1, [pc, #84]	; (8003538 <cprtPowerOnSequence+0x17c>)
 80034e2:	4618      	mov	r0, r3
 80034e4:	f019 fcb6 	bl	801ce54 <siprintf>
		len =  strlen(msg);
 80034e8:	1d3b      	adds	r3, r7, #4
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fc fea2 	bl	8000234 <strlen>
 80034f0:	4603      	mov	r3, r0
 80034f2:	61bb      	str	r3, [r7, #24]
		LCD_Write(true, LCD_LINE_3, 0, msg, len);
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	1d3a      	adds	r2, r7, #4
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	4613      	mov	r3, r2
 80034fe:	2200      	movs	r2, #0
 8003500:	2102      	movs	r1, #2
 8003502:	2001      	movs	r0, #1
 8003504:	f000 fa8e 	bl	8003a24 <LCD_Write>
		HAL_Delay(2000); //small additional delay
 8003508:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800350c:	f005 fcc6 	bl	8008e9c <HAL_Delay>
}
 8003510:	bf00      	nop
 8003512:	3720      	adds	r7, #32
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	08021190 	.word	0x08021190
 800351c:	00989680 	.word	0x00989680
 8003520:	0802119c 	.word	0x0802119c
 8003524:	01c9c37f 	.word	0x01c9c37f
 8003528:	40020c00 	.word	0x40020c00
 800352c:	080211a8 	.word	0x080211a8
 8003530:	080211bc 	.word	0x080211bc
 8003534:	080211c0 	.word	0x080211c0
 8003538:	080211d0 	.word	0x080211d0

0800353c <cprtPowerOffSequence>:


void cprtPowerOffSequence()
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af02      	add	r7, sp, #8
	char msg[20];
	int len = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]

	//1. Open K2 relay to power Blower off
	PFC_RLY_control(false);
 8003546:	2000      	movs	r0, #0
 8003548:	f7ff fe4a 	bl	80031e0 <PFC_RLY_control>

	sprintf(msg, "PFC_rly=open");
 800354c:	463b      	mov	r3, r7
 800354e:	492a      	ldr	r1, [pc, #168]	; (80035f8 <cprtPowerOffSequence+0xbc>)
 8003550:	4618      	mov	r0, r3
 8003552:	f019 fc7f 	bl	801ce54 <siprintf>
	len =  strlen(msg);
 8003556:	463b      	mov	r3, r7
 8003558:	4618      	mov	r0, r3
 800355a:	f7fc fe6b 	bl	8000234 <strlen>
 800355e:	4603      	mov	r3, r0
 8003560:	617b      	str	r3, [r7, #20]
	LCD_Write(true, LCD_LINE_1, 0, msg, len);
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	463a      	mov	r2, r7
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	2200      	movs	r2, #0
 800356e:	2100      	movs	r1, #0
 8003570:	2001      	movs	r0, #1
 8003572:	f000 fa57 	bl	8003a24 <LCD_Write>
	HAL_Delay(2000);
 8003576:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800357a:	f005 fc8f 	bl	8008e9c <HAL_Delay>

	//2. Disable PFC Module with /PF_Enable signal
	PF_control(false);
 800357e:	2000      	movs	r0, #0
 8003580:	f7ff fe1c 	bl	80031bc <PF_control>

	sprintf(msg, "PFCctrl=OFF");
 8003584:	463b      	mov	r3, r7
 8003586:	491d      	ldr	r1, [pc, #116]	; (80035fc <cprtPowerOffSequence+0xc0>)
 8003588:	4618      	mov	r0, r3
 800358a:	f019 fc63 	bl	801ce54 <siprintf>
	len =  strlen(msg);
 800358e:	463b      	mov	r3, r7
 8003590:	4618      	mov	r0, r3
 8003592:	f7fc fe4f 	bl	8000234 <strlen>
 8003596:	4603      	mov	r3, r0
 8003598:	617b      	str	r3, [r7, #20]
	LCD_Write(true, LCD_LINE_2, 0, msg, len);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	463a      	mov	r2, r7
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	4613      	mov	r3, r2
 80035a4:	2200      	movs	r2, #0
 80035a6:	2101      	movs	r1, #1
 80035a8:	2001      	movs	r0, #1
 80035aa:	f000 fa3b 	bl	8003a24 <LCD_Write>
	HAL_Delay(2000);
 80035ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80035b2:	f005 fc73 	bl	8008e9c <HAL_Delay>

	//3. Cut Power (24V) to Power PCBA (/PWR_Ctrl signal is inactive, high)
	powerpcb_control(false);
 80035b6:	2000      	movs	r0, #0
 80035b8:	f7ff fdee 	bl	8003198 <powerpcb_control>

	sprintf(msg, "Powerpcb=OFF");
 80035bc:	463b      	mov	r3, r7
 80035be:	4910      	ldr	r1, [pc, #64]	; (8003600 <cprtPowerOffSequence+0xc4>)
 80035c0:	4618      	mov	r0, r3
 80035c2:	f019 fc47 	bl	801ce54 <siprintf>
	len =  strlen(msg);
 80035c6:	463b      	mov	r3, r7
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fc fe33 	bl	8000234 <strlen>
 80035ce:	4603      	mov	r3, r0
 80035d0:	617b      	str	r3, [r7, #20]
	LCD_Write(true, LCD_LINE_3, 0, msg, len);
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	463a      	mov	r2, r7
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	4613      	mov	r3, r2
 80035dc:	2200      	movs	r2, #0
 80035de:	2102      	movs	r1, #2
 80035e0:	2001      	movs	r0, #1
 80035e2:	f000 fa1f 	bl	8003a24 <LCD_Write>
	HAL_Delay(2000);
 80035e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80035ea:	f005 fc57 	bl	8008e9c <HAL_Delay>
}
 80035ee:	bf00      	nop
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	080211e8 	.word	0x080211e8
 80035fc:	080211f8 	.word	0x080211f8
 8003600:	08021204 	.word	0x08021204

08003604 <ClearPfcLoadEnable>:
{
	gstModel.bPfcPowerWarnFail = false;
}

void ClearPfcLoadEnable()
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
	gstModel.bPfcLoadEnable = false;
 8003608:	4b03      	ldr	r3, [pc, #12]	; (8003618 <ClearPfcLoadEnable+0x14>)
 800360a:	2200      	movs	r2, #0
 800360c:	71da      	strb	r2, [r3, #7]
}
 800360e:	bf00      	nop
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	20001d40 	.word	0x20001d40

0800361c <GetPfcLoadEnable>:
{
	return gstModel.bPfcPowerWarnFail;
}

bool GetPfcLoadEnable()
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
	return gstModel.bPfcLoadEnable;
 8003620:	4b03      	ldr	r3, [pc, #12]	; (8003630 <GetPfcLoadEnable+0x14>)
 8003622:	79db      	ldrb	r3, [r3, #7]
}
 8003624:	4618      	mov	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20001d40 	.word	0x20001d40

08003634 <SetPfcPowerFailWarn>:

void SetPfcPowerFailWarn(bool flag)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	71fb      	strb	r3, [r7, #7]
	gstModel.bPfcPowerWarnFail = flag;
 800363e:	4a04      	ldr	r2, [pc, #16]	; (8003650 <SetPfcPowerFailWarn+0x1c>)
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	7193      	strb	r3, [r2, #6]
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	20001d40 	.word	0x20001d40

08003654 <SetPfcLoadEnable>:

void SetPfcLoadEnable(bool flag)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	71fb      	strb	r3, [r7, #7]
	gstModel.bPfcLoadEnable = flag;
 800365e:	4a04      	ldr	r2, [pc, #16]	; (8003670 <SetPfcLoadEnable+0x1c>)
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	71d3      	strb	r3, [r2, #7]
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	20001d40 	.word	0x20001d40

08003674 <GetClearScreenWait>:
static void LCD_ClearScreen(void);
static void LCD_BlinkCursorOnOff(bool flag);


bool GetClearScreenWait( )
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
	return clearScreenWait;
 8003678:	4b03      	ldr	r3, [pc, #12]	; (8003688 <GetClearScreenWait+0x14>)
 800367a:	781b      	ldrb	r3, [r3, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	20000ad8 	.word	0x20000ad8

0800368c <SetClearScreenWait>:

void SetClearScreenWait( bool clearScreenWaitFlag )
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	71fb      	strb	r3, [r7, #7]
	clearScreenWait = clearScreenWaitFlag;
 8003696:	4a04      	ldr	r2, [pc, #16]	; (80036a8 <SetClearScreenWait+0x1c>)
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	7013      	strb	r3, [r2, #0]
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	20000ad8 	.word	0x20000ad8

080036ac <IsTxLcdQueueEmpty>:
 * Parameters:  None
 *
 * Returns:     true if empty, false if not empty
 *---------------------------------------------------------------------------*/
bool IsTxLcdQueueEmpty( )
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
	int16_t queueIndexDiff = lcdTxQueueWriteIndex - lcdTxQueueReadIndex;
 80036b2:	4b14      	ldr	r3, [pc, #80]	; (8003704 <IsTxLcdQueueEmpty+0x58>)
 80036b4:	881a      	ldrh	r2, [r3, #0]
 80036b6:	4b14      	ldr	r3, [pc, #80]	; (8003708 <IsTxLcdQueueEmpty+0x5c>)
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	b29b      	uxth	r3, r3
 80036be:	80fb      	strh	r3, [r7, #6]
	curTxLcdQueueDepth = queueIndexDiff;
 80036c0:	88fa      	ldrh	r2, [r7, #6]
 80036c2:	4b12      	ldr	r3, [pc, #72]	; (800370c <IsTxLcdQueueEmpty+0x60>)
 80036c4:	801a      	strh	r2, [r3, #0]

	if( queueIndexDiff == 0 )
 80036c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <IsTxLcdQueueEmpty+0x26>
	{
		// Tx LCD queue is empty
		return true;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e011      	b.n	80036f6 <IsTxLcdQueueEmpty+0x4a>
	}

	if( queueIndexDiff < 0 )
 80036d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	da03      	bge.n	80036e2 <IsTxLcdQueueEmpty+0x36>
	{
		queueIndexDiff += LCD_TX_QUEUE_SIZE;
 80036da:	88fb      	ldrh	r3, [r7, #6]
 80036dc:	3310      	adds	r3, #16
 80036de:	b29b      	uxth	r3, r3
 80036e0:	80fb      	strh	r3, [r7, #6]
	}

	// Keep track of maximum Tx LCD queue depth
	if( queueIndexDiff > maxTxLcdQueueDepth )
 80036e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036e6:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <IsTxLcdQueueEmpty+0x64>)
 80036e8:	8812      	ldrh	r2, [r2, #0]
 80036ea:	4293      	cmp	r3, r2
 80036ec:	dd02      	ble.n	80036f4 <IsTxLcdQueueEmpty+0x48>
	{
		maxTxLcdQueueDepth = queueIndexDiff;
 80036ee:	88fa      	ldrh	r2, [r7, #6]
 80036f0:	4b07      	ldr	r3, [pc, #28]	; (8003710 <IsTxLcdQueueEmpty+0x64>)
 80036f2:	801a      	strh	r2, [r3, #0]
	}

	// Tx LCD queue is not empty
	return false;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	20000ace 	.word	0x20000ace
 8003708:	20000acc 	.word	0x20000acc
 800370c:	20000ad6 	.word	0x20000ad6
 8003710:	20000ad4 	.word	0x20000ad4

08003714 <IsTxLcdQueueFull>:
 * Parameters:  None
 *
 * Returns:     true if full, false if not full
 *---------------------------------------------------------------------------*/
bool IsTxLcdQueueFull( )
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
	int16_t queueIndexDiff = lcdTxQueueWriteIndex - lcdTxQueueReadIndex;
 800371a:	4b0e      	ldr	r3, [pc, #56]	; (8003754 <IsTxLcdQueueFull+0x40>)
 800371c:	881a      	ldrh	r2, [r3, #0]
 800371e:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <IsTxLcdQueueFull+0x44>)
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	b29b      	uxth	r3, r3
 8003726:	80fb      	strh	r3, [r7, #6]

	if( queueIndexDiff < 0 )
 8003728:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800372c:	2b00      	cmp	r3, #0
 800372e:	da03      	bge.n	8003738 <IsTxLcdQueueFull+0x24>
    {
		queueIndexDiff += LCD_TX_QUEUE_SIZE;
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	3310      	adds	r3, #16
 8003734:	b29b      	uxth	r3, r3
 8003736:	80fb      	strh	r3, [r7, #6]
	}

	if( queueIndexDiff == (LCD_TX_QUEUE_SIZE - 1) )
 8003738:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800373c:	2b0f      	cmp	r3, #15
 800373e:	d101      	bne.n	8003744 <IsTxLcdQueueFull+0x30>
	{
		// Tx LCD queue is full
		return true;
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <IsTxLcdQueueFull+0x32>
	}

	// Tx LCD queue is not full
	return false;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	20000ace 	.word	0x20000ace
 8003758:	20000acc 	.word	0x20000acc

0800375c <ReadTxLcdQueueAndTransmit>:
 * Parameters:  None
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void ReadTxLcdQueueAndTransmit()
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
	static bool suppresLcdTransmitError = false;

	if( IsTxLcdQueueEmpty() != false )
 8003762:	f7ff ffa3 	bl	80036ac <IsTxLcdQueueEmpty>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d16a      	bne.n	8003842 <ReadTxLcdQueueAndTransmit+0xe6>
	{
		// Tx LCD queue is empty, nothing to read and transmit
		return;
	}

	if( clearScreenWait != false )
 800376c:	4b38      	ldr	r3, [pc, #224]	; (8003850 <ReadTxLcdQueueAndTransmit+0xf4>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d168      	bne.n	8003846 <ReadTxLcdQueueAndTransmit+0xea>
	{
		// Wait until clear screen wait time has elapsed before writing LCD line
		return;
	}

	if(HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY)
 8003774:	4837      	ldr	r0, [pc, #220]	; (8003854 <ReadTxLcdQueueAndTransmit+0xf8>)
 8003776:	f007 fd5b 	bl	800b230 <HAL_I2C_GetState>
 800377a:	4603      	mov	r3, r0
 800377c:	2b20      	cmp	r3, #32
 800377e:	d003      	beq.n	8003788 <ReadTxLcdQueueAndTransmit+0x2c>
	{
		// LCD I2C bus is not ready yet
		UartPrintf("LCD I2C bus is NOT READY\n");
 8003780:	4835      	ldr	r0, [pc, #212]	; (8003858 <ReadTxLcdQueueAndTransmit+0xfc>)
 8003782:	f002 faa9 	bl	8005cd8 <UartPrintf>
		return;
 8003786:	e05f      	b.n	8003848 <ReadTxLcdQueueAndTransmit+0xec>
	}

	memset( lcdTxBuf, ' ', MAX_NUM_CHARS_PER_LCD_LINE+1 );
 8003788:	2215      	movs	r2, #21
 800378a:	2120      	movs	r1, #32
 800378c:	4833      	ldr	r0, [pc, #204]	; (800385c <ReadTxLcdQueueAndTransmit+0x100>)
 800378e:	f018 fe01 	bl	801c394 <memset>

	// Read number of characters to write from LCD queue to LCD I2C
	uint8_t numChars = lcdNumCharsTxQueue[lcdTxQueueReadIndex];
 8003792:	4b33      	ldr	r3, [pc, #204]	; (8003860 <ReadTxLcdQueueAndTransmit+0x104>)
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	4b32      	ldr	r3, [pc, #200]	; (8003864 <ReadTxLcdQueueAndTransmit+0x108>)
 800379a:	5c9b      	ldrb	r3, [r3, r2]
 800379c:	71fb      	strb	r3, [r7, #7]
	memcpy( lcdTxBuf, lcdTxQueue[lcdTxQueueReadIndex], numChars );
 800379e:	4b30      	ldr	r3, [pc, #192]	; (8003860 <ReadTxLcdQueueAndTransmit+0x104>)
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	4613      	mov	r3, r2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4413      	add	r3, r2
 80037aa:	00da      	lsls	r2, r3, #3
 80037ac:	1ad2      	subs	r2, r2, r3
 80037ae:	4b2e      	ldr	r3, [pc, #184]	; (8003868 <ReadTxLcdQueueAndTransmit+0x10c>)
 80037b0:	4413      	add	r3, r2
 80037b2:	79fa      	ldrb	r2, [r7, #7]
 80037b4:	4619      	mov	r1, r3
 80037b6:	4829      	ldr	r0, [pc, #164]	; (800385c <ReadTxLcdQueueAndTransmit+0x100>)
 80037b8:	f018 fdde 	bl	801c378 <memcpy>

	memset(lcdTxQueue[lcdTxQueueReadIndex], ' ', MAX_NUM_CHARS_PER_LCD_LINE+1);
 80037bc:	4b28      	ldr	r3, [pc, #160]	; (8003860 <ReadTxLcdQueueAndTransmit+0x104>)
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	4613      	mov	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4413      	add	r3, r2
 80037c8:	00da      	lsls	r2, r3, #3
 80037ca:	1ad2      	subs	r2, r2, r3
 80037cc:	4b26      	ldr	r3, [pc, #152]	; (8003868 <ReadTxLcdQueueAndTransmit+0x10c>)
 80037ce:	4413      	add	r3, r2
 80037d0:	2215      	movs	r2, #21
 80037d2:	2120      	movs	r1, #32
 80037d4:	4618      	mov	r0, r3
 80037d6:	f018 fddd 	bl	801c394 <memset>

	if( lcdTxBuf[1] == 0x51 ) // Clear screen command, start wait to allow clear screen to finish before next write to LCD
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <ReadTxLcdQueueAndTransmit+0x100>)
 80037dc:	785b      	ldrb	r3, [r3, #1]
 80037de:	2b51      	cmp	r3, #81	; 0x51
 80037e0:	d102      	bne.n	80037e8 <ReadTxLcdQueueAndTransmit+0x8c>
	{
		clearScreenWait = true;
 80037e2:	4b1b      	ldr	r3, [pc, #108]	; (8003850 <ReadTxLcdQueueAndTransmit+0xf4>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	701a      	strb	r2, [r3, #0]
	}

	// Increment Tx LCD queue read index
	lcdTxQueueReadIndex++;
 80037e8:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <ReadTxLcdQueueAndTransmit+0x104>)
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	3301      	adds	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <ReadTxLcdQueueAndTransmit+0x104>)
 80037f2:	801a      	strh	r2, [r3, #0]
	if( lcdTxQueueReadIndex >= LCD_TX_QUEUE_SIZE )
 80037f4:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <ReadTxLcdQueueAndTransmit+0x104>)
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	2b0f      	cmp	r3, #15
 80037fa:	d902      	bls.n	8003802 <ReadTxLcdQueueAndTransmit+0xa6>
	{
		// Read index was at maximum, set to 0
		lcdTxQueueReadIndex =  0;
 80037fc:	4b18      	ldr	r3, [pc, #96]	; (8003860 <ReadTxLcdQueueAndTransmit+0x104>)
 80037fe:	2200      	movs	r2, #0
 8003800:	801a      	strh	r2, [r3, #0]
	}

    // UartPrintf("LCD Write %2d chars: %s\n", numChars, lcdTxBuf);
	// Transmit data from Tx LCD queue to I2C via IT
    HAL_StatusTypeDef err = HAL_I2C_Master_Transmit_IT(&hi2c2, LCD_ADD, lcdTxBuf, numChars );
 8003802:	79fb      	ldrb	r3, [r7, #7]
 8003804:	b29b      	uxth	r3, r3
 8003806:	4a15      	ldr	r2, [pc, #84]	; (800385c <ReadTxLcdQueueAndTransmit+0x100>)
 8003808:	2150      	movs	r1, #80	; 0x50
 800380a:	4812      	ldr	r0, [pc, #72]	; (8003854 <ReadTxLcdQueueAndTransmit+0xf8>)
 800380c:	f007 faac 	bl	800ad68 <HAL_I2C_Master_Transmit_IT>
 8003810:	4603      	mov	r3, r0
 8003812:	71bb      	strb	r3, [r7, #6]
	if( err != HAL_OK )
 8003814:	79bb      	ldrb	r3, [r7, #6]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00f      	beq.n	800383a <ReadTxLcdQueueAndTransmit+0xde>
	{
		if( suppresLcdTransmitError == false )
 800381a:	4b14      	ldr	r3, [pc, #80]	; (800386c <ReadTxLcdQueueAndTransmit+0x110>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	f083 0301 	eor.w	r3, r3, #1
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00f      	beq.n	8003848 <ReadTxLcdQueueAndTransmit+0xec>
		{
			UartPrintf("LCD I2C IT Transmit ERROR in ReadTxLcdQueueAndTransmit %x\n", err);
 8003828:	79bb      	ldrb	r3, [r7, #6]
 800382a:	4619      	mov	r1, r3
 800382c:	4810      	ldr	r0, [pc, #64]	; (8003870 <ReadTxLcdQueueAndTransmit+0x114>)
 800382e:	f002 fa53 	bl	8005cd8 <UartPrintf>
			suppresLcdTransmitError = true;
 8003832:	4b0e      	ldr	r3, [pc, #56]	; (800386c <ReadTxLcdQueueAndTransmit+0x110>)
 8003834:	2201      	movs	r2, #1
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	e006      	b.n	8003848 <ReadTxLcdQueueAndTransmit+0xec>
		}
	}
	else
	{
		suppresLcdTransmitError = false;
 800383a:	4b0c      	ldr	r3, [pc, #48]	; (800386c <ReadTxLcdQueueAndTransmit+0x110>)
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
 8003840:	e002      	b.n	8003848 <ReadTxLcdQueueAndTransmit+0xec>
		return;
 8003842:	bf00      	nop
 8003844:	e000      	b.n	8003848 <ReadTxLcdQueueAndTransmit+0xec>
		return;
 8003846:	bf00      	nop
	}
}
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000ad8 	.word	0x20000ad8
 8003854:	200043a0 	.word	0x200043a0
 8003858:	08021214 	.word	0x08021214
 800385c:	20001bc8 	.word	0x20001bc8
 8003860:	20000acc 	.word	0x20000acc
 8003864:	20001be0 	.word	0x20001be0
 8003868:	20001bf0 	.word	0x20001bf0
 800386c:	20000ad9 	.word	0x20000ad9
 8003870:	08021230 	.word	0x08021230

08003874 <WriteTxLcdQueue>:
 * Parameters:  buffer - pointer to data to be written to Tx LCD queue
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void WriteTxLcdQueue(uint8_t * buffer, uint8_t numChars )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	70fb      	strb	r3, [r7, #3]
	uint32_t startWaitTime = GetTimeMs();
 8003880:	f002 fb22 	bl	8005ec8 <GetTimeMs>
 8003884:	60f8      	str	r0, [r7, #12]

	while( IsTxLcdQueueFull() != false )
 8003886:	e00e      	b.n	80038a6 <WriteTxLcdQueue+0x32>
	{
		// Wait for Tx LCD queue not to be full
		uint32_t waitTime = DiffTimeFromStartTimeMs(startWaitTime);
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f002 fb2f 	bl	8005eec <DiffTimeFromStartTimeMs>
 800388e:	60b8      	str	r0, [r7, #8]
		if ( waitTime > 10 ) // 10 ms
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b0a      	cmp	r3, #10
 8003894:	d842      	bhi.n	800391c <WriteTxLcdQueue+0xa8>
			//UartPrintf("LCD I2C IT Tx queue full for 10 ms\n");
			return; // Wait too long for Tx I2C LCD queue not to be full
		}

		// Keep track of max wait time for Tx LCD Queue not to be full
		if( waitTime > maxLcdTxQueueWaitTimeMs )
 8003896:	4b24      	ldr	r3, [pc, #144]	; (8003928 <WriteTxLcdQueue+0xb4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	429a      	cmp	r2, r3
 800389e:	d902      	bls.n	80038a6 <WriteTxLcdQueue+0x32>
		{
			maxLcdTxQueueWaitTimeMs = waitTime;
 80038a0:	4a21      	ldr	r2, [pc, #132]	; (8003928 <WriteTxLcdQueue+0xb4>)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	6013      	str	r3, [r2, #0]
	while( IsTxLcdQueueFull() != false )
 80038a6:	f7ff ff35 	bl	8003714 <IsTxLcdQueueFull>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1eb      	bne.n	8003888 <WriteTxLcdQueue+0x14>
		}
	}

	if( numChars > MAX_NUM_CHARS_PER_LCD_LINE )
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	2b14      	cmp	r3, #20
 80038b4:	d907      	bls.n	80038c6 <WriteTxLcdQueue+0x52>
	{
		 UartPrintf("Number of LCD Line chars to write is %d. Truncating to %d  chars\n", numChars, MAX_NUM_CHARS_PER_LCD_LINE);
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	2214      	movs	r2, #20
 80038ba:	4619      	mov	r1, r3
 80038bc:	481b      	ldr	r0, [pc, #108]	; (800392c <WriteTxLcdQueue+0xb8>)
 80038be:	f002 fa0b 	bl	8005cd8 <UartPrintf>
		numChars = MAX_NUM_CHARS_PER_LCD_LINE;
 80038c2:	2314      	movs	r3, #20
 80038c4:	70fb      	strb	r3, [r7, #3]
	}

	// Write buffer data to Tx LCD queue
	memcpy((char *)&lcdTxQueue[lcdTxQueueWriteIndex], (char *)buffer, numChars);
 80038c6:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <WriteTxLcdQueue+0xbc>)
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	4613      	mov	r3, r2
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	4413      	add	r3, r2
 80038d2:	00da      	lsls	r2, r3, #3
 80038d4:	1ad2      	subs	r2, r2, r3
 80038d6:	4b17      	ldr	r3, [pc, #92]	; (8003934 <WriteTxLcdQueue+0xc0>)
 80038d8:	4413      	add	r3, r2
 80038da:	78fa      	ldrb	r2, [r7, #3]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4618      	mov	r0, r3
 80038e0:	f018 fd4a 	bl	801c378 <memcpy>
	lcdNumCharsTxQueue[lcdTxQueueWriteIndex] = numChars;
 80038e4:	4b12      	ldr	r3, [pc, #72]	; (8003930 <WriteTxLcdQueue+0xbc>)
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	4619      	mov	r1, r3
 80038ea:	4a13      	ldr	r2, [pc, #76]	; (8003938 <WriteTxLcdQueue+0xc4>)
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	5453      	strb	r3, [r2, r1]

	// Increment LCD Tx queue write index
	lcdTxQueueWriteIndex++;
 80038f0:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <WriteTxLcdQueue+0xbc>)
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	3301      	adds	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	4b0d      	ldr	r3, [pc, #52]	; (8003930 <WriteTxLcdQueue+0xbc>)
 80038fa:	801a      	strh	r2, [r3, #0]
	if( lcdTxQueueWriteIndex >= LCD_TX_QUEUE_SIZE )
 80038fc:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <WriteTxLcdQueue+0xbc>)
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	2b0f      	cmp	r3, #15
 8003902:	d902      	bls.n	800390a <WriteTxLcdQueue+0x96>
	{
		// Write index was at maximum, set to 0
		lcdTxQueueWriteIndex =  0;
 8003904:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <WriteTxLcdQueue+0xbc>)
 8003906:	2200      	movs	r2, #0
 8003908:	801a      	strh	r2, [r3, #0]
	}

	// If I2C2 is ready, read data from TX LCD queue and write to LCD,
	// else return and HAL_I2C_MemTxCpltCallback will call ReadTxLcdQueueAndTransmit
	// after current I2C2 transmission is complete
	if( HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY )
 800390a:	480c      	ldr	r0, [pc, #48]	; (800393c <WriteTxLcdQueue+0xc8>)
 800390c:	f007 fc90 	bl	800b230 <HAL_I2C_GetState>
 8003910:	4603      	mov	r3, r0
 8003912:	2b20      	cmp	r3, #32
 8003914:	d104      	bne.n	8003920 <WriteTxLcdQueue+0xac>
	{
		ReadTxLcdQueueAndTransmit();
 8003916:	f7ff ff21 	bl	800375c <ReadTxLcdQueueAndTransmit>
	}

	return;
 800391a:	e001      	b.n	8003920 <WriteTxLcdQueue+0xac>
			return; // Wait too long for Tx I2C LCD queue not to be full
 800391c:	bf00      	nop
 800391e:	e000      	b.n	8003922 <WriteTxLcdQueue+0xae>
	return;
 8003920:	bf00      	nop
}
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20000ad0 	.word	0x20000ad0
 800392c:	0802126c 	.word	0x0802126c
 8003930:	20000ace 	.word	0x20000ace
 8003934:	20001bf0 	.word	0x20001bf0
 8003938:	20001be0 	.word	0x20001be0
 800393c:	200043a0 	.word	0x200043a0

08003940 <LCD_ClearScreen>:


static void LCD_ClearScreen(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
	uint8_t clear_screen[2] = {0xFE, 0x51};
 8003946:	f245 13fe 	movw	r3, #20990	; 0x51fe
 800394a:	80bb      	strh	r3, [r7, #4]
	WriteTxLcdQueue( clear_screen, 2 );
 800394c:	1d3b      	adds	r3, r7, #4
 800394e:	2102      	movs	r1, #2
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff ff8f 	bl	8003874 <WriteTxLcdQueue>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <LCD_BlinkCursorOnOff>:

static void LCD_BlinkCursorOnOff(bool flag)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	4603      	mov	r3, r0
 8003966:	71fb      	strb	r3, [r7, #7]
	uint8_t blink_cursor[2] = {0xFE, 0x00};
 8003968:	23fe      	movs	r3, #254	; 0xfe
 800396a:	81bb      	strh	r3, [r7, #12]
	blink_cursor[1] = (flag) ? 0x4B : 0x4C;
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <LCD_BlinkCursorOnOff+0x18>
 8003972:	234b      	movs	r3, #75	; 0x4b
 8003974:	e000      	b.n	8003978 <LCD_BlinkCursorOnOff+0x1a>
 8003976:	234c      	movs	r3, #76	; 0x4c
 8003978:	737b      	strb	r3, [r7, #13]
	WriteTxLcdQueue( blink_cursor, 2 );
 800397a:	f107 030c 	add.w	r3, r7, #12
 800397e:	2102      	movs	r1, #2
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff ff77 	bl	8003874 <WriteTxLcdQueue>
}
 8003986:	bf00      	nop
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <LCD_MoveCursor>:

void LCD_MoveCursor(LCD_LINE LineNum, uint8_t Position)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	460a      	mov	r2, r1
 800399a:	71fb      	strb	r3, [r7, #7]
 800399c:	4613      	mov	r3, r2
 800399e:	71bb      	strb	r3, [r7, #6]
    uint8_t set_cursor[3] = {0xFE, 0x45, 0x00};
 80039a0:	4a14      	ldr	r2, [pc, #80]	; (80039f4 <LCD_MoveCursor+0x64>)
 80039a2:	f107 030c 	add.w	r3, r7, #12
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	4611      	mov	r1, r2
 80039aa:	8019      	strh	r1, [r3, #0]
 80039ac:	3302      	adds	r3, #2
 80039ae:	0c12      	lsrs	r2, r2, #16
 80039b0:	701a      	strb	r2, [r3, #0]
    //Line 2 0x40 0x53
    //Line 3 0x14 0x27
    //Line 4 0x54 0x67
	//Position 0x00 to 0x13
	
	set_cursor[2] = (LineNum == LCD_LINE_4) ? 0x54 :
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d00b      	beq.n	80039d0 <LCD_MoveCursor+0x40>
 80039b8:	79fb      	ldrb	r3, [r7, #7]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d006      	beq.n	80039cc <LCD_MoveCursor+0x3c>
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <LCD_MoveCursor+0x38>
 80039c4:	2340      	movs	r3, #64	; 0x40
 80039c6:	e004      	b.n	80039d2 <LCD_MoveCursor+0x42>
 80039c8:	2300      	movs	r3, #0
 80039ca:	e002      	b.n	80039d2 <LCD_MoveCursor+0x42>
 80039cc:	2314      	movs	r3, #20
 80039ce:	e000      	b.n	80039d2 <LCD_MoveCursor+0x42>
 80039d0:	2354      	movs	r3, #84	; 0x54
 80039d2:	73bb      	strb	r3, [r7, #14]
	                (LineNum == LCD_LINE_3) ? 0x14 :
	                (LineNum == LCD_LINE_2) ? 0x40 : 0x00;
	set_cursor[2] += Position;
 80039d4:	7bba      	ldrb	r2, [r7, #14]
 80039d6:	79bb      	ldrb	r3, [r7, #6]
 80039d8:	4413      	add	r3, r2
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	73bb      	strb	r3, [r7, #14]
	WriteTxLcdQueue( set_cursor, 3 );
 80039de:	f107 030c 	add.w	r3, r7, #12
 80039e2:	2103      	movs	r1, #3
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff ff45 	bl	8003874 <WriteTxLcdQueue>
}
 80039ea:	bf00      	nop
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	080212b0 	.word	0x080212b0

080039f8 <LCD_SetBacklight>:

static void LCD_SetBacklight( )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
	uint8_t set_backlight[3] = {0xFE, 0x53, 0x08};
 80039fe:	4a08      	ldr	r2, [pc, #32]	; (8003a20 <LCD_SetBacklight+0x28>)
 8003a00:	1d3b      	adds	r3, r7, #4
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	4611      	mov	r1, r2
 8003a06:	8019      	strh	r1, [r3, #0]
 8003a08:	3302      	adds	r3, #2
 8003a0a:	0c12      	lsrs	r2, r2, #16
 8003a0c:	701a      	strb	r2, [r3, #0]
	WriteTxLcdQueue( set_backlight, 3 );
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	2103      	movs	r1, #3
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff ff2e 	bl	8003874 <WriteTxLcdQueue>
}
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	080212b4 	.word	0x080212b4

08003a24 <LCD_Write>:

uint8_t LCD_Write(bool bFresh, LCD_LINE Line, uint8_t Position, char *msg, uint8_t NumChar)
{	
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	71fb      	strb	r3, [r7, #7]
 8003a30:	460b      	mov	r3, r1
 8003a32:	71bb      	strb	r3, [r7, #6]
 8003a34:	4613      	mov	r3, r2
 8003a36:	717b      	strb	r3, [r7, #5]
	uint8_t ret = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	73fb      	strb	r3, [r7, #15]
	
	if(bFresh)
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <LCD_Write+0x22>
	{
	   LCD_ClearScreen();
 8003a42:	f7ff ff7d 	bl	8003940 <LCD_ClearScreen>
	}
	
	LCD_MoveCursor(Line, Position);
 8003a46:	797a      	ldrb	r2, [r7, #5]
 8003a48:	79bb      	ldrb	r3, [r7, #6]
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff ff9f 	bl	8003990 <LCD_MoveCursor>
	WriteTxLcdQueue( (uint8_t *)msg, NumChar );
 8003a52:	7e3b      	ldrb	r3, [r7, #24]
 8003a54:	4619      	mov	r1, r3
 8003a56:	6838      	ldr	r0, [r7, #0]
 8003a58:	f7ff ff0c 	bl	8003874 <WriteTxLcdQueue>

	return ret;
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <LCD_Init>:

LCD* LCD_Init(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08c      	sub	sp, #48	; 0x30
 8003a6c:	af02      	add	r7, sp, #8
	char msg[32];
	int len;


	lcdTxQueueReadIndex = 0;
 8003a6e:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <LCD_Init+0x5c>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	801a      	strh	r2, [r3, #0]
	lcdTxQueueWriteIndex = 0;
 8003a74:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <LCD_Init+0x60>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	801a      	strh	r2, [r3, #0]

	UartPrintf("Init LCD\n");
 8003a7a:	4814      	ldr	r0, [pc, #80]	; (8003acc <LCD_Init+0x64>)
 8003a7c:	f002 f92c 	bl	8005cd8 <UartPrintf>

	HAL_Delay(10);
 8003a80:	200a      	movs	r0, #10
 8003a82:	f005 fa0b 	bl	8008e9c <HAL_Delay>
	LCD_SetBacklight( );
 8003a86:	f7ff ffb7 	bl	80039f8 <LCD_SetBacklight>

	len = snprintf(msg, sizeof(msg), "CPRT %s", GetSwVersionString( CURRENT_SW_VERSION_ID ));
 8003a8a:	200b      	movs	r0, #11
 8003a8c:	f004 f84e 	bl	8007b2c <GetSwVersionString>
 8003a90:	4603      	mov	r3, r0
 8003a92:	1d38      	adds	r0, r7, #4
 8003a94:	4a0e      	ldr	r2, [pc, #56]	; (8003ad0 <LCD_Init+0x68>)
 8003a96:	2120      	movs	r1, #32
 8003a98:	f019 f9a8 	bl	801cdec <sniprintf>
 8003a9c:	6278      	str	r0, [r7, #36]	; 0x24
	LCD_Write(true, LCD_LINE_1, 0, msg, len );
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	1d3a      	adds	r2, r7, #4
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2100      	movs	r1, #0
 8003aac:	2001      	movs	r0, #1
 8003aae:	f7ff ffb9 	bl	8003a24 <LCD_Write>

	LCD_BlinkCursorOnOff(false);
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	f7ff ff53 	bl	800395e <LCD_BlinkCursorOnOff>

    return (LCD *)&c;
 8003ab8:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <LCD_Init+0x6c>)
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3728      	adds	r7, #40	; 0x28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000acc 	.word	0x20000acc
 8003ac8:	20000ace 	.word	0x20000ace
 8003acc:	080212b8 	.word	0x080212b8
 8003ad0:	080212c4 	.word	0x080212c4
 8003ad4:	20000ac4 	.word	0x20000ac4

08003ad8 <LCD_Power_Onoff>:

void LCD_Power_Onoff(bool bOnOff)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	71fb      	strb	r3, [r7, #7]
	if(bOnOff == true)
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d006      	beq.n	8003af6 <LCD_Power_Onoff+0x1e>
	{
		HAL_GPIO_WritePin(DISP_POWER_EN_GPIO_Port, DISP_POWER_EN_Pin, GPIO_PIN_SET);
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003aee:	4807      	ldr	r0, [pc, #28]	; (8003b0c <LCD_Power_Onoff+0x34>)
 8003af0:	f006 ff6a 	bl	800a9c8 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(DISP_POWER_EN_GPIO_Port, DISP_POWER_EN_Pin, GPIO_PIN_RESET);
	}
}
 8003af4:	e005      	b.n	8003b02 <LCD_Power_Onoff+0x2a>
		HAL_GPIO_WritePin(DISP_POWER_EN_GPIO_Port, DISP_POWER_EN_Pin, GPIO_PIN_RESET);
 8003af6:	2200      	movs	r2, #0
 8003af8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003afc:	4803      	ldr	r0, [pc, #12]	; (8003b0c <LCD_Power_Onoff+0x34>)
 8003afe:	f006 ff63 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40020000 	.word	0x40020000

08003b10 <LED_Set>:
    [LED_MAX_START  ] = { LED_MAX_START  , false, false,  false,   0,          0,         0,        0,     BLINK_STATUS_OFF     ,                     NULL,                0 , (FpLedOn)LED_Start_On, (FpLedOff)LED_Start_Off   },
    [LED_MAX_PAUSE  ] = { LED_MAX_PAUSE  , false, false,  false,   0,          0,         0,        0,     BLINK_STATUS_OFF     ,                     NULL,                0 , (FpLedOn)LED_Pause_On, (FpLedOff)LED_Pause_Off   },
};

void LED_Set(LED_ID eLedID, LED_SET eLedSet, uint16_t wtOnInMs, uint16_t wtOffInMs)
{
 8003b10:	b590      	push	{r4, r7, lr}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4604      	mov	r4, r0
 8003b18:	4608      	mov	r0, r1
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4623      	mov	r3, r4
 8003b20:	71fb      	strb	r3, [r7, #7]
 8003b22:	4603      	mov	r3, r0
 8003b24:	71bb      	strb	r3, [r7, #6]
 8003b26:	460b      	mov	r3, r1
 8003b28:	80bb      	strh	r3, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	807b      	strh	r3, [r7, #2]
	if( eLedID == LED_COUNT )
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	2b0a      	cmp	r3, #10
 8003b32:	f040 809b 	bne.w	8003c6c <LED_Set+0x15c>
	{
		int  index;

		for(index = 0; index < ARRAY_LEN(astLedSet); index++)
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	e092      	b.n	8003c62 <LED_Set+0x152>
		{
			switch(eLedSet)
 8003b3c:	79bb      	ldrb	r3, [r7, #6]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d031      	beq.n	8003ba6 <LED_Set+0x96>
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	f300 8087 	bgt.w	8003c56 <LED_Set+0x146>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <LED_Set+0x42>
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d015      	beq.n	8003b7c <LED_Set+0x6c>
					}
				}
				break;

				default:
				break;
 8003b50:	e081      	b.n	8003c56 <LED_Set+0x146>
					astLedSet[index].bOff   = true;
 8003b52:	4990      	ldr	r1, [pc, #576]	; (8003d94 <LED_Set+0x284>)
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4613      	mov	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	3302      	adds	r3, #2
 8003b62:	2201      	movs	r2, #1
 8003b64:	701a      	strb	r2, [r3, #0]
					astLedSet[index].bBlink = false;
 8003b66:	498b      	ldr	r1, [pc, #556]	; (8003d94 <LED_Set+0x284>)
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	3303      	adds	r3, #3
 8003b76:	2200      	movs	r2, #0
 8003b78:	701a      	strb	r2, [r3, #0]
				break;
 8003b7a:	e06f      	b.n	8003c5c <LED_Set+0x14c>
					astLedSet[index].bOn = true;
 8003b7c:	4985      	ldr	r1, [pc, #532]	; (8003d94 <LED_Set+0x284>)
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4613      	mov	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4413      	add	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	701a      	strb	r2, [r3, #0]
					astLedSet[index].bBlink = false;
 8003b90:	4980      	ldr	r1, [pc, #512]	; (8003d94 <LED_Set+0x284>)
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4613      	mov	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	3303      	adds	r3, #3
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]
				break;
 8003ba4:	e05a      	b.n	8003c5c <LED_Set+0x14c>
					if((astLedSet[index].eBlinkStatus != BLINK_STATUS_DISABLE) &&
 8003ba6:	497b      	ldr	r1, [pc, #492]	; (8003d94 <LED_Set+0x284>)
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4613      	mov	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	3310      	adds	r3, #16
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d04e      	beq.n	8003c5a <LED_Set+0x14a>
					   (astLedSet[index].bBlink == false))
 8003bbc:	4975      	ldr	r1, [pc, #468]	; (8003d94 <LED_Set+0x284>)
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	3303      	adds	r3, #3
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	f083 0301 	eor.w	r3, r3, #1
 8003bd2:	b2db      	uxtb	r3, r3
					if((astLedSet[index].eBlinkStatus != BLINK_STATUS_DISABLE) &&
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d040      	beq.n	8003c5a <LED_Set+0x14a>
						astLedSet[index].bBlink       = true;
 8003bd8:	496e      	ldr	r1, [pc, #440]	; (8003d94 <LED_Set+0x284>)
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	3303      	adds	r3, #3
 8003be8:	2201      	movs	r2, #1
 8003bea:	701a      	strb	r2, [r3, #0]
						astLedSet[index].wtimeOn      = wtOnInMs;
 8003bec:	4969      	ldr	r1, [pc, #420]	; (8003d94 <LED_Set+0x284>)
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	330c      	adds	r3, #12
 8003bfc:	88ba      	ldrh	r2, [r7, #4]
 8003bfe:	801a      	strh	r2, [r3, #0]
						astLedSet[index].wtimeOff     = wtOffInMs;
 8003c00:	4964      	ldr	r1, [pc, #400]	; (8003d94 <LED_Set+0x284>)
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4613      	mov	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	4413      	add	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	330e      	adds	r3, #14
 8003c10:	887a      	ldrh	r2, [r7, #2]
 8003c12:	801a      	strh	r2, [r3, #0]
						astLedSet[index].wLastTimeOn  = Get_SysTick();
 8003c14:	f002 f996 	bl	8005f44 <Get_SysTick>
 8003c18:	4601      	mov	r1, r0
 8003c1a:	485e      	ldr	r0, [pc, #376]	; (8003d94 <LED_Set+0x284>)
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	4413      	add	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4403      	add	r3, r0
 8003c28:	3304      	adds	r3, #4
 8003c2a:	6019      	str	r1, [r3, #0]
						astLedSet[index].wLastTimeOff = 0;
 8003c2c:	4959      	ldr	r1, [pc, #356]	; (8003d94 <LED_Set+0x284>)
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4613      	mov	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	3308      	adds	r3, #8
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]
						astLedSet[index].eBlinkStatus = BLINK_STATUS_ON;
 8003c40:	4954      	ldr	r1, [pc, #336]	; (8003d94 <LED_Set+0x284>)
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4613      	mov	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	3310      	adds	r3, #16
 8003c50:	2201      	movs	r2, #1
 8003c52:	701a      	strb	r2, [r3, #0]
				break;
 8003c54:	e001      	b.n	8003c5a <LED_Set+0x14a>
				break;
 8003c56:	bf00      	nop
 8003c58:	e000      	b.n	8003c5c <LED_Set+0x14c>
				break;
 8003c5a:	bf00      	nop
		for(index = 0; index < ARRAY_LEN(astLedSet); index++)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2b09      	cmp	r3, #9
 8003c66:	f67f af69 	bls.w	8003b3c <LED_Set+0x2c>

			default:
			break;
		}
	}
}
 8003c6a:	e08f      	b.n	8003d8c <LED_Set+0x27c>
		switch(eLedSet)
 8003c6c:	79bb      	ldrb	r3, [r7, #6]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d031      	beq.n	8003cd6 <LED_Set+0x1c6>
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	f300 8087 	bgt.w	8003d86 <LED_Set+0x276>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <LED_Set+0x172>
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d015      	beq.n	8003cac <LED_Set+0x19c>
			break;
 8003c80:	e081      	b.n	8003d86 <LED_Set+0x276>
				astLedSet[eLedID].bOff   = true;
 8003c82:	79fa      	ldrb	r2, [r7, #7]
 8003c84:	4943      	ldr	r1, [pc, #268]	; (8003d94 <LED_Set+0x284>)
 8003c86:	4613      	mov	r3, r2
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	440b      	add	r3, r1
 8003c90:	3302      	adds	r3, #2
 8003c92:	2201      	movs	r2, #1
 8003c94:	701a      	strb	r2, [r3, #0]
				astLedSet[eLedID].bBlink = false;
 8003c96:	79fa      	ldrb	r2, [r7, #7]
 8003c98:	493e      	ldr	r1, [pc, #248]	; (8003d94 <LED_Set+0x284>)
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	3303      	adds	r3, #3
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	701a      	strb	r2, [r3, #0]
			break;
 8003caa:	e06f      	b.n	8003d8c <LED_Set+0x27c>
				astLedSet[eLedID].bOn = true;
 8003cac:	79fa      	ldrb	r2, [r7, #7]
 8003cae:	4939      	ldr	r1, [pc, #228]	; (8003d94 <LED_Set+0x284>)
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	3301      	adds	r3, #1
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	701a      	strb	r2, [r3, #0]
				astLedSet[eLedID].bBlink = false;
 8003cc0:	79fa      	ldrb	r2, [r7, #7]
 8003cc2:	4934      	ldr	r1, [pc, #208]	; (8003d94 <LED_Set+0x284>)
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	3303      	adds	r3, #3
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	701a      	strb	r2, [r3, #0]
			break;
 8003cd4:	e05a      	b.n	8003d8c <LED_Set+0x27c>
				if((astLedSet[eLedID].eBlinkStatus != BLINK_STATUS_DISABLE) &&
 8003cd6:	79fa      	ldrb	r2, [r7, #7]
 8003cd8:	492e      	ldr	r1, [pc, #184]	; (8003d94 <LED_Set+0x284>)
 8003cda:	4613      	mov	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	3310      	adds	r3, #16
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d04e      	beq.n	8003d8a <LED_Set+0x27a>
				   (astLedSet[eLedID].bBlink == false))
 8003cec:	79fa      	ldrb	r2, [r7, #7]
 8003cee:	4929      	ldr	r1, [pc, #164]	; (8003d94 <LED_Set+0x284>)
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	3303      	adds	r3, #3
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	f083 0301 	eor.w	r3, r3, #1
 8003d02:	b2db      	uxtb	r3, r3
				if((astLedSet[eLedID].eBlinkStatus != BLINK_STATUS_DISABLE) &&
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d040      	beq.n	8003d8a <LED_Set+0x27a>
					astLedSet[eLedID].bBlink       = true;
 8003d08:	79fa      	ldrb	r2, [r7, #7]
 8003d0a:	4922      	ldr	r1, [pc, #136]	; (8003d94 <LED_Set+0x284>)
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	3303      	adds	r3, #3
 8003d18:	2201      	movs	r2, #1
 8003d1a:	701a      	strb	r2, [r3, #0]
					astLedSet[eLedID].wtimeOn      = wtOnInMs;
 8003d1c:	79fa      	ldrb	r2, [r7, #7]
 8003d1e:	491d      	ldr	r1, [pc, #116]	; (8003d94 <LED_Set+0x284>)
 8003d20:	4613      	mov	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	330c      	adds	r3, #12
 8003d2c:	88ba      	ldrh	r2, [r7, #4]
 8003d2e:	801a      	strh	r2, [r3, #0]
					astLedSet[eLedID].wtimeOff     = wtOffInMs;
 8003d30:	79fa      	ldrb	r2, [r7, #7]
 8003d32:	4918      	ldr	r1, [pc, #96]	; (8003d94 <LED_Set+0x284>)
 8003d34:	4613      	mov	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	4413      	add	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	330e      	adds	r3, #14
 8003d40:	887a      	ldrh	r2, [r7, #2]
 8003d42:	801a      	strh	r2, [r3, #0]
					astLedSet[eLedID].wLastTimeOn  = Get_SysTick();
 8003d44:	79fc      	ldrb	r4, [r7, #7]
 8003d46:	f002 f8fd 	bl	8005f44 <Get_SysTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	4911      	ldr	r1, [pc, #68]	; (8003d94 <LED_Set+0x284>)
 8003d4e:	4623      	mov	r3, r4
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	4423      	add	r3, r4
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	3304      	adds	r3, #4
 8003d5a:	601a      	str	r2, [r3, #0]
					astLedSet[eLedID].wLastTimeOff = 0;
 8003d5c:	79fa      	ldrb	r2, [r7, #7]
 8003d5e:	490d      	ldr	r1, [pc, #52]	; (8003d94 <LED_Set+0x284>)
 8003d60:	4613      	mov	r3, r2
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
					astLedSet[eLedID].eBlinkStatus = BLINK_STATUS_ON;
 8003d70:	79fa      	ldrb	r2, [r7, #7]
 8003d72:	4908      	ldr	r1, [pc, #32]	; (8003d94 <LED_Set+0x284>)
 8003d74:	4613      	mov	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	3310      	adds	r3, #16
 8003d80:	2201      	movs	r2, #1
 8003d82:	701a      	strb	r2, [r3, #0]
			break;
 8003d84:	e001      	b.n	8003d8a <LED_Set+0x27a>
			break;
 8003d86:	bf00      	nop
 8003d88:	e000      	b.n	8003d8c <LED_Set+0x27c>
			break;
 8003d8a:	bf00      	nop
}
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd90      	pop	{r4, r7, pc}
 8003d94:	20000050 	.word	0x20000050

08003d98 <LED_Run>:

void LED_Run(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
	int  index;

	//OFF Handle the on LED, one at the time
	for(index = 0; index < ARRAY_LEN(astLedSet); index++)
 8003d9e:	2300      	movs	r3, #0
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	e04e      	b.n	8003e42 <LED_Run+0xaa>
	{
		if(astLedSet[index].bOff == true)
 8003da4:	499b      	ldr	r1, [pc, #620]	; (8004014 <LED_Run+0x27c>)
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	3302      	adds	r3, #2
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d040      	beq.n	8003e3c <LED_Run+0xa4>
		{
			astLedSet[index].bOff = false;
 8003dba:	4996      	ldr	r1, [pc, #600]	; (8004014 <LED_Run+0x27c>)
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	3302      	adds	r3, #2
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]

			if( astLedSet[index].ptrPort != NULL )
 8003dce:	4991      	ldr	r1, [pc, #580]	; (8004014 <LED_Run+0x27c>)
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	3314      	adds	r3, #20
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d016      	beq.n	8003e12 <LED_Run+0x7a>
		    {
				//If the LEDs controlling from STM32 toggle the GPIO
                HAL_GPIO_WritePin(astLedSet[index].ptrPort, astLedSet[index].pin, GPIO_PIN_RESET);
 8003de4:	498b      	ldr	r1, [pc, #556]	; (8004014 <LED_Run+0x27c>)
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	3314      	adds	r3, #20
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	4987      	ldr	r1, [pc, #540]	; (8004014 <LED_Run+0x27c>)
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	3318      	adds	r3, #24
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	f006 fddc 	bl	800a9c8 <HAL_GPIO_WritePin>
 8003e10:	e014      	b.n	8003e3c <LED_Run+0xa4>
			}
			else if( astLedSet[index].pFunctionLedOff != NULL )
 8003e12:	4980      	ldr	r1, [pc, #512]	; (8004014 <LED_Run+0x27c>)
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	3320      	adds	r3, #32
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d009      	beq.n	8003e3c <LED_Run+0xa4>
			{
				//Otherwise call the call back function
				astLedSet[index].pFunctionLedOff();
 8003e28:	497a      	ldr	r1, [pc, #488]	; (8004014 <LED_Run+0x27c>)
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	3320      	adds	r3, #32
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4798      	blx	r3
	for(index = 0; index < ARRAY_LEN(astLedSet); index++)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	607b      	str	r3, [r7, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b09      	cmp	r3, #9
 8003e46:	d9ad      	bls.n	8003da4 <LED_Run+0xc>
			}
		}
	}

	//ON Handle the on LED, one at the time
	for(index = 0; index < ARRAY_LEN(astLedSet); index++)
 8003e48:	2300      	movs	r3, #0
 8003e4a:	607b      	str	r3, [r7, #4]
 8003e4c:	e04e      	b.n	8003eec <LED_Run+0x154>
	{
		if(astLedSet[index].bOn == true)
 8003e4e:	4971      	ldr	r1, [pc, #452]	; (8004014 <LED_Run+0x27c>)
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d040      	beq.n	8003ee6 <LED_Run+0x14e>
		{
            astLedSet[index].bOn = false;
 8003e64:	496b      	ldr	r1, [pc, #428]	; (8004014 <LED_Run+0x27c>)
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	3301      	adds	r3, #1
 8003e74:	2200      	movs	r2, #0
 8003e76:	701a      	strb	r2, [r3, #0]

			if( astLedSet[index].ptrPort != NULL )
 8003e78:	4966      	ldr	r1, [pc, #408]	; (8004014 <LED_Run+0x27c>)
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	3314      	adds	r3, #20
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d016      	beq.n	8003ebc <LED_Run+0x124>
		    {
				//If the LEDs controlling from STM32 toggle the GPIO
                HAL_GPIO_WritePin(astLedSet[index].ptrPort, astLedSet[index].pin, GPIO_PIN_SET);
 8003e8e:	4961      	ldr	r1, [pc, #388]	; (8004014 <LED_Run+0x27c>)
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	3314      	adds	r3, #20
 8003e9e:	6818      	ldr	r0, [r3, #0]
 8003ea0:	495c      	ldr	r1, [pc, #368]	; (8004014 <LED_Run+0x27c>)
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	3318      	adds	r3, #24
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	f006 fd87 	bl	800a9c8 <HAL_GPIO_WritePin>
 8003eba:	e014      	b.n	8003ee6 <LED_Run+0x14e>
			}
			else if( astLedSet[index].pFunctionLedOff != NULL )
 8003ebc:	4955      	ldr	r1, [pc, #340]	; (8004014 <LED_Run+0x27c>)
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	3320      	adds	r3, #32
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d009      	beq.n	8003ee6 <LED_Run+0x14e>
			{
				//Otherwise call the call back function
				astLedSet[index].pFunctionLedOn();
 8003ed2:	4950      	ldr	r1, [pc, #320]	; (8004014 <LED_Run+0x27c>)
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	331c      	adds	r3, #28
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4798      	blx	r3
	for(index = 0; index < ARRAY_LEN(astLedSet); index++)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	607b      	str	r3, [r7, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b09      	cmp	r3, #9
 8003ef0:	d9ad      	bls.n	8003e4e <LED_Run+0xb6>
			}
		}
	}

	//BLINK Handle the blink LED for all the LEDs that have this feature available
	for(index = 0; index < ARRAY_LEN(astLedSet); index++)
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	607b      	str	r3, [r7, #4]
 8003ef6:	e0fd      	b.n	80040f4 <LED_Run+0x35c>
	{
		if((astLedSet[index].eBlinkStatus != BLINK_STATUS_DISABLE) &&
 8003ef8:	4946      	ldr	r1, [pc, #280]	; (8004014 <LED_Run+0x27c>)
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	3310      	adds	r3, #16
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 80ea 	beq.w	80040e4 <LED_Run+0x34c>
		   (astLedSet[index].bBlink == true))
 8003f10:	4940      	ldr	r1, [pc, #256]	; (8004014 <LED_Run+0x27c>)
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	3303      	adds	r3, #3
 8003f20:	781b      	ldrb	r3, [r3, #0]
		if((astLedSet[index].eBlinkStatus != BLINK_STATUS_DISABLE) &&
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 80de 	beq.w	80040e4 <LED_Run+0x34c>
		{
			switch(astLedSet[index].eBlinkStatus)
 8003f28:	493a      	ldr	r1, [pc, #232]	; (8004014 <LED_Run+0x27c>)
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	3310      	adds	r3, #16
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d002      	beq.n	8003f44 <LED_Run+0x1ac>
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d06a      	beq.n	8004018 <LED_Run+0x280>
					}
				}
				break;

				default:
				break;
 8003f42:	e0d4      	b.n	80040ee <LED_Run+0x356>
					if( (Get_SysTick() - astLedSet[index].wLastTimeOn) >= astLedSet[index].wtimeOn)
 8003f44:	f001 fffe 	bl	8005f44 <Get_SysTick>
 8003f48:	4601      	mov	r1, r0
 8003f4a:	4832      	ldr	r0, [pc, #200]	; (8004014 <LED_Run+0x27c>)
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4403      	add	r3, r0
 8003f58:	3304      	adds	r3, #4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	1ac9      	subs	r1, r1, r3
 8003f5e:	482d      	ldr	r0, [pc, #180]	; (8004014 <LED_Run+0x27c>)
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4403      	add	r3, r0
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	4299      	cmp	r1, r3
 8003f72:	f0c0 80b9 	bcc.w	80040e8 <LED_Run+0x350>
						astLedSet[index].wLastTimeOff = Get_SysTick(); //save the start of off time
 8003f76:	f001 ffe5 	bl	8005f44 <Get_SysTick>
 8003f7a:	4601      	mov	r1, r0
 8003f7c:	4825      	ldr	r0, [pc, #148]	; (8004014 <LED_Run+0x27c>)
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4403      	add	r3, r0
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	6019      	str	r1, [r3, #0]
						astLedSet[index].eBlinkStatus = BLINK_STATUS_OFF;
 8003f8e:	4921      	ldr	r1, [pc, #132]	; (8004014 <LED_Run+0x27c>)
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	4413      	add	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	3310      	adds	r3, #16
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	701a      	strb	r2, [r3, #0]
						if( astLedSet[index].ptrPort != NULL )
 8003fa2:	491c      	ldr	r1, [pc, #112]	; (8004014 <LED_Run+0x27c>)
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	3314      	adds	r3, #20
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d016      	beq.n	8003fe6 <LED_Run+0x24e>
			                HAL_GPIO_WritePin(astLedSet[index].ptrPort, astLedSet[index].pin, GPIO_PIN_RESET);
 8003fb8:	4916      	ldr	r1, [pc, #88]	; (8004014 <LED_Run+0x27c>)
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	3314      	adds	r3, #20
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	4912      	ldr	r1, [pc, #72]	; (8004014 <LED_Run+0x27c>)
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	3318      	adds	r3, #24
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	4619      	mov	r1, r3
 8003fe0:	f006 fcf2 	bl	800a9c8 <HAL_GPIO_WritePin>
				break;
 8003fe4:	e080      	b.n	80040e8 <LED_Run+0x350>
						else if( astLedSet[index].pFunctionLedOff != NULL )
 8003fe6:	490b      	ldr	r1, [pc, #44]	; (8004014 <LED_Run+0x27c>)
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	3320      	adds	r3, #32
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d075      	beq.n	80040e8 <LED_Run+0x350>
							astLedSet[index].pFunctionLedOff();
 8003ffc:	4905      	ldr	r1, [pc, #20]	; (8004014 <LED_Run+0x27c>)
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	3320      	adds	r3, #32
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4798      	blx	r3
				break;
 8004010:	e06a      	b.n	80040e8 <LED_Run+0x350>
 8004012:	bf00      	nop
 8004014:	20000050 	.word	0x20000050
					if( (Get_SysTick() - astLedSet[index].wLastTimeOff) >= astLedSet[index].wtimeOff)
 8004018:	f001 ff94 	bl	8005f44 <Get_SysTick>
 800401c:	4601      	mov	r1, r0
 800401e:	483a      	ldr	r0, [pc, #232]	; (8004108 <LED_Run+0x370>)
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	4613      	mov	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4403      	add	r3, r0
 800402c:	3308      	adds	r3, #8
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	1ac9      	subs	r1, r1, r3
 8004032:	4835      	ldr	r0, [pc, #212]	; (8004108 <LED_Run+0x370>)
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4403      	add	r3, r0
 8004040:	330e      	adds	r3, #14
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	4299      	cmp	r1, r3
 8004046:	d351      	bcc.n	80040ec <LED_Run+0x354>
						astLedSet[index].wLastTimeOn  = Get_SysTick(); //save the start of On time
 8004048:	f001 ff7c 	bl	8005f44 <Get_SysTick>
 800404c:	4601      	mov	r1, r0
 800404e:	482e      	ldr	r0, [pc, #184]	; (8004108 <LED_Run+0x370>)
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4403      	add	r3, r0
 800405c:	3304      	adds	r3, #4
 800405e:	6019      	str	r1, [r3, #0]
						astLedSet[index].eBlinkStatus = BLINK_STATUS_ON;
 8004060:	4929      	ldr	r1, [pc, #164]	; (8004108 <LED_Run+0x370>)
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	4613      	mov	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4413      	add	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	3310      	adds	r3, #16
 8004070:	2201      	movs	r2, #1
 8004072:	701a      	strb	r2, [r3, #0]
						if( astLedSet[index].ptrPort != NULL )
 8004074:	4924      	ldr	r1, [pc, #144]	; (8004108 <LED_Run+0x370>)
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	3314      	adds	r3, #20
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d016      	beq.n	80040b8 <LED_Run+0x320>
			                HAL_GPIO_WritePin(astLedSet[index].ptrPort, astLedSet[index].pin, GPIO_PIN_SET);
 800408a:	491f      	ldr	r1, [pc, #124]	; (8004108 <LED_Run+0x370>)
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	3314      	adds	r3, #20
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	491a      	ldr	r1, [pc, #104]	; (8004108 <LED_Run+0x370>)
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	3318      	adds	r3, #24
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	2201      	movs	r2, #1
 80040b0:	4619      	mov	r1, r3
 80040b2:	f006 fc89 	bl	800a9c8 <HAL_GPIO_WritePin>
				break;
 80040b6:	e019      	b.n	80040ec <LED_Run+0x354>
						else if( astLedSet[index].pFunctionLedOff != NULL )
 80040b8:	4913      	ldr	r1, [pc, #76]	; (8004108 <LED_Run+0x370>)
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	4613      	mov	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	3320      	adds	r3, #32
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00e      	beq.n	80040ec <LED_Run+0x354>
							astLedSet[index].pFunctionLedOn();
 80040ce:	490e      	ldr	r1, [pc, #56]	; (8004108 <LED_Run+0x370>)
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	4613      	mov	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	331c      	adds	r3, #28
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4798      	blx	r3
				break;
 80040e2:	e003      	b.n	80040ec <LED_Run+0x354>
			}
		}
 80040e4:	bf00      	nop
 80040e6:	e002      	b.n	80040ee <LED_Run+0x356>
				break;
 80040e8:	bf00      	nop
 80040ea:	e000      	b.n	80040ee <LED_Run+0x356>
				break;
 80040ec:	bf00      	nop
	for(index = 0; index < ARRAY_LEN(astLedSet); index++)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3301      	adds	r3, #1
 80040f2:	607b      	str	r3, [r7, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b09      	cmp	r3, #9
 80040f8:	f67f aefe 	bls.w	8003ef8 <LED_Run+0x160>
	}

}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20000050 	.word	0x20000050

0800410c <Model_Init>:

//Main model collection of all global parameters
MODEL gstModel;

void Model_Init(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
    gstModel.bKeyCodeReady     = false;
 8004110:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <Model_Init+0x3c>)
 8004112:	2200      	movs	r2, #0
 8004114:	711a      	strb	r2, [r3, #4]
    gstModel.bLCDResetRequest  = false;
 8004116:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <Model_Init+0x3c>)
 8004118:	2200      	movs	r2, #0
 800411a:	709a      	strb	r2, [r3, #2]
    gstModel.dac_value         = 2048; //1.5V
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <Model_Init+0x3c>)
 800411e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004122:	841a      	strh	r2, [r3, #32]
    gstModel.bDisplayTime      = false;
 8004124:	4b08      	ldr	r3, [pc, #32]	; (8004148 <Model_Init+0x3c>)
 8004126:	2200      	movs	r2, #0
 8004128:	715a      	strb	r2, [r3, #5]
    gstModel.bPfcLoadEnable    = false;
 800412a:	4b07      	ldr	r3, [pc, #28]	; (8004148 <Model_Init+0x3c>)
 800412c:	2200      	movs	r2, #0
 800412e:	71da      	strb	r2, [r3, #7]
    gstModel.bPfcPowerWarnFail = false;
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <Model_Init+0x3c>)
 8004132:	2200      	movs	r2, #0
 8004134:	719a      	strb	r2, [r3, #6]
    gstModel.bMembranePress    = false;
 8004136:	4b04      	ldr	r3, [pc, #16]	; (8004148 <Model_Init+0x3c>)
 8004138:	2200      	movs	r2, #0
 800413a:	721a      	strb	r2, [r3, #8]
}
 800413c:	bf00      	nop
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20001d40 	.word	0x20001d40

0800414c <MAX7370_write>:
static void MAX7370_read();

//=============================Switches Membrane=========================================================

static void MAX7370_write(uint8_t *pData, uint16_t Size)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af02      	add	r7, sp, #8
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	807b      	strh	r3, [r7, #2]
	 HAL_StatusTypeDef ret;

	 ret = HAL_I2C_Master_Transmit(&hi2c2, MAX7370_ADR, pData, Size, HAL_MAX_DELAY);
 8004158:	887b      	ldrh	r3, [r7, #2]
 800415a:	f04f 32ff 	mov.w	r2, #4294967295
 800415e:	9200      	str	r2, [sp, #0]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	2170      	movs	r1, #112	; 0x70
 8004164:	4808      	ldr	r0, [pc, #32]	; (8004188 <MAX7370_write+0x3c>)
 8004166:	f006 fd0b 	bl	800ab80 <HAL_I2C_Master_Transmit>
 800416a:	4603      	mov	r3, r0
 800416c:	73fb      	strb	r3, [r7, #15]

	 if(ret != HAL_OK)
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d004      	beq.n	800417e <MAX7370_write+0x32>
	 {
		 UartPrintf("MAX7370 Setup write err %x\n", ret);
 8004174:	7bfb      	ldrb	r3, [r7, #15]
 8004176:	4619      	mov	r1, r3
 8004178:	4804      	ldr	r0, [pc, #16]	; (800418c <MAX7370_write+0x40>)
 800417a:	f001 fdad 	bl	8005cd8 <UartPrintf>
	 }
}
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	200043a0 	.word	0x200043a0
 800418c:	080212cc 	.word	0x080212cc

08004190 <isMembraneIntStillLow>:

static bool isMembraneIntStillLow()
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
	bool bStatus;
	bStatus = HAL_GPIO_ReadPin(N_MEMBRANE_INT_GPIO_Port, N_MEMBRANE_INT_Pin) ? false : true;
 8004196:	2104      	movs	r1, #4
 8004198:	4806      	ldr	r0, [pc, #24]	; (80041b4 <isMembraneIntStillLow+0x24>)
 800419a:	f006 fbfd 	bl	800a998 <HAL_GPIO_ReadPin>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bf0c      	ite	eq
 80041a4:	2301      	moveq	r3, #1
 80041a6:	2300      	movne	r3, #0
 80041a8:	71fb      	strb	r3, [r7, #7]
	return bStatus;
 80041aa:	79fb      	ldrb	r3, [r7, #7]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40021000 	.word	0x40021000

080041b8 <MAX7370_read>:

static void MAX7370_read(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af02      	add	r7, sp, #8
	  HAL_StatusTypeDef ret;

	  uint8_t cmd = KEY_FIFO_REG;
 80041be:	2300      	movs	r3, #0
 80041c0:	71bb      	strb	r3, [r7, #6]

      ret = HAL_I2C_Master_Transmit(&hi2c2, MAX7370_ADR, &cmd, 1, HAL_MAX_DELAY);
 80041c2:	1dba      	adds	r2, r7, #6
 80041c4:	f04f 33ff 	mov.w	r3, #4294967295
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	2301      	movs	r3, #1
 80041cc:	2170      	movs	r1, #112	; 0x70
 80041ce:	4811      	ldr	r0, [pc, #68]	; (8004214 <MAX7370_read+0x5c>)
 80041d0:	f006 fcd6 	bl	800ab80 <HAL_I2C_Master_Transmit>
 80041d4:	4603      	mov	r3, r0
 80041d6:	71fb      	strb	r3, [r7, #7]

	  if(ret == HAL_OK)
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d110      	bne.n	8004200 <MAX7370_read+0x48>
	  {
		 ret = HAL_I2C_Master_Receive_IT(&hi2c2, MAX7370_ADR, &gstModel.gKeyCode, 1);
 80041de:	2301      	movs	r3, #1
 80041e0:	4a0d      	ldr	r2, [pc, #52]	; (8004218 <MAX7370_read+0x60>)
 80041e2:	2170      	movs	r1, #112	; 0x70
 80041e4:	480b      	ldr	r0, [pc, #44]	; (8004214 <MAX7370_read+0x5c>)
 80041e6:	f006 fe2f 	bl	800ae48 <HAL_I2C_Master_Receive_IT>
 80041ea:	4603      	mov	r3, r0
 80041ec:	71fb      	strb	r3, [r7, #7]

		 if(ret != HAL_OK)
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <MAX7370_read+0x52>
		 {
			 UartPrintf("MAX7370 RCIT Read err %x\n", ret);
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	4619      	mov	r1, r3
 80041f8:	4808      	ldr	r0, [pc, #32]	; (800421c <MAX7370_read+0x64>)
 80041fa:	f001 fd6d 	bl	8005cd8 <UartPrintf>
	  }
	  else
	  {
		  UartPrintf("MAX7370 TX Read err  %x\n", ret);
	  }
}
 80041fe:	e004      	b.n	800420a <MAX7370_read+0x52>
		  UartPrintf("MAX7370 TX Read err  %x\n", ret);
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	4619      	mov	r1, r3
 8004204:	4806      	ldr	r0, [pc, #24]	; (8004220 <MAX7370_read+0x68>)
 8004206:	f001 fd67 	bl	8005cd8 <UartPrintf>
}
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	200043a0 	.word	0x200043a0
 8004218:	20001d4a 	.word	0x20001d4a
 800421c:	080212e8 	.word	0x080212e8
 8004220:	08021304 	.word	0x08021304

08004224 <MAX7370_init>:

static void MAX7370_init()
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
	uint8_t data[2];

	data[0] = GLOBAL_CFG_REG;
 800422a:	2340      	movs	r3, #64	; 0x40
 800422c:	713b      	strb	r3, [r7, #4]
    data[1] = 0x10;                  // Normal Op: GPIO,PWM,CCS
 800422e:	2310      	movs	r3, #16
 8004230:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 8004232:	1d3b      	adds	r3, r7, #4
 8004234:	2102      	movs	r1, #2
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff ff88 	bl	800414c <MAX7370_write>

    data[0] = CFG_REG;
 800423c:	2301      	movs	r3, #1
 800423e:	713b      	strb	r3, [r7, #4]
    data[1] = 0x89;                  // Key-switch operation mode, key-release en, timout disable
 8004240:	2389      	movs	r3, #137	; 0x89
 8004242:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 8004244:	1d3b      	adds	r3, r7, #4
 8004246:	2102      	movs	r1, #2
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff ff7f 	bl	800414c <MAX7370_write>

	data[0] = KEY_REPEAT_REG;
 800424e:	2305      	movs	r3, #5
 8004250:	713b      	strb	r3, [r7, #4]
	data[1] = 0xFF;                  // Key-switch auto-repeat enable Autorepeat frequency is 32 debounce cycles, Autorepeat delay is 128 debounce cycles
 8004252:	23ff      	movs	r3, #255	; 0xff
 8004254:	717b      	strb	r3, [r7, #5]
	MAX7370_write((uint8_t *)&data, 2);
 8004256:	1d3b      	adds	r3, r7, #4
 8004258:	2102      	movs	r1, #2
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff ff76 	bl	800414c <MAX7370_write>

    data[0] = KEY_SWITCH_SIZE_REG;
 8004260:	2330      	movs	r3, #48	; 0x30
 8004262:	713b      	strb	r3, [r7, #4]
    data[1] = 0x33;                  // Keypad size: ROW 2:0, COL 2:0
 8004264:	2333      	movs	r3, #51	; 0x33
 8004266:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 8004268:	1d3b      	adds	r3, r7, #4
 800426a:	2102      	movs	r1, #2
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff ff6d 	bl	800414c <MAX7370_write>
    //COL7:4 default as OP, COL3:0 default as PP

    //.......ROW/COL Direction for Keypad Operation
    //ROW7:0 default all Inputs

    data[0] = COL70_DIR_REG;
 8004272:	2335      	movs	r3, #53	; 0x35
 8004274:	713b      	strb	r3, [r7, #4]
    data[1] = 0x30;                       // COL5:4 = out; COL3:0 = in; 0=in; 1=out; default=0x00
 8004276:	2330      	movs	r3, #48	; 0x30
 8004278:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 800427a:	1d3b      	adds	r3, r7, #4
 800427c:	2102      	movs	r1, #2
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff ff64 	bl	800414c <MAX7370_write>

    //............ Col 7:4 Constant Current Setting
    data[0] = COL70_CC_SETTING_REG;
 8004284:	2343      	movs	r3, #67	; 0x43
 8004286:	713b      	strb	r3, [r7, #4]
    data[1] = 0xC1;                       // COL 7:4 0xC0=20mA; 0xC1=10mA
 8004288:	23c1      	movs	r3, #193	; 0xc1
 800428a:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 800428c:	1d3b      	adds	r3, r7, #4
 800428e:	2102      	movs	r1, #2
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff ff5b 	bl	800414c <MAX7370_write>

    //Key-switches and Interrupt set up
    data[0] = DEBOUNCE_KEY_REG;
 8004296:	2302      	movs	r3, #2
 8004298:	713b      	strb	r3, [r7, #4]
    data[1] = 0x0A;           // 20ms press debounce time
 800429a:	230a      	movs	r3, #10
 800429c:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 800429e:	1d3b      	adds	r3, r7, #4
 80042a0:	2102      	movs	r1, #2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff ff52 	bl	800414c <MAX7370_write>

    data[0] = INTERRUPT_KS_REG;
 80042a8:	2303      	movs	r3, #3
 80042aa:	713b      	strb	r3, [r7, #4]
    data[1] = 0x01;           // /INT assert every debounce cycle
 80042ac:	2301      	movs	r3, #1
 80042ae:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 80042b0:	1d3b      	adds	r3, r7, #4
 80042b2:	2102      	movs	r1, #2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff ff49 	bl	800414c <MAX7370_write>

    MAX7370_write((uint8_t *)&send_data, 2);//off all
 80042ba:	2102      	movs	r1, #2
 80042bc:	4803      	ldr	r0, [pc, #12]	; (80042cc <MAX7370_init+0xa8>)
 80042be:	f7ff ff45 	bl	800414c <MAX7370_write>
}
 80042c2:	bf00      	nop
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	200001c4 	.word	0x200001c4

080042d0 <Switches_Init>:


SWITCH* Switches_Init(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
	UartPrintf("Init MAX7370\n");
 80042d4:	4805      	ldr	r0, [pc, #20]	; (80042ec <Switches_Init+0x1c>)
 80042d6:	f001 fcff 	bl	8005cd8 <UartPrintf>

	MAX7370_init();
 80042da:	f7ff ffa3 	bl	8004224 <MAX7370_init>

	gstSwitch = &c;
 80042de:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <Switches_Init+0x20>)
 80042e0:	4a04      	ldr	r2, [pc, #16]	; (80042f4 <Switches_Init+0x24>)
 80042e2:	601a      	str	r2, [r3, #0]

	return (SWITCH*) &c;
 80042e4:	4b03      	ldr	r3, [pc, #12]	; (80042f4 <Switches_Init+0x24>)
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	08021320 	.word	0x08021320
 80042f0:	20000ae8 	.word	0x20000ae8
 80042f4:	20000adc 	.word	0x20000adc

080042f8 <KeyCodeTranslation>:

SWITCH_ID KeyCodeTranslation(uint8_t KeyCode)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4603      	mov	r3, r0
 8004300:	71fb      	strb	r3, [r7, #7]
	int i;

	for(i = 1; i < ARRAY_LEN(astKeyTranslate); i++)
 8004302:	2301      	movs	r3, #1
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	e00c      	b.n	8004322 <KeyCodeTranslation+0x2a>
	{
		if(KeyCode == astKeyTranslate[i].uKeyCode)
 8004308:	4a0b      	ldr	r2, [pc, #44]	; (8004338 <KeyCodeTranslation+0x40>)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4413      	add	r3, r2
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	79fa      	ldrb	r2, [r7, #7]
 8004312:	429a      	cmp	r2, r3
 8004314:	d102      	bne.n	800431c <KeyCodeTranslation+0x24>
		{
			return i;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	e006      	b.n	800432a <KeyCodeTranslation+0x32>
	for(i = 1; i < ARRAY_LEN(astKeyTranslate); i++)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	3301      	adds	r3, #1
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b09      	cmp	r3, #9
 8004326:	d9ef      	bls.n	8004308 <KeyCodeTranslation+0x10>
		}
	}

    return SWITCH_ID_NONE;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	200001b8 	.word	0x200001b8

0800433c <Switches_Scan>:

bool Switches_Scan(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
	bool bSwitchPress = false;
 8004342:	2300      	movs	r3, #0
 8004344:	73fb      	strb	r3, [r7, #15]

	if( keyboardFail != false )
 8004346:	4b5a      	ldr	r3, [pc, #360]	; (80044b0 <Switches_Scan+0x174>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <Switches_Scan+0x16>
	{
		return bSwitchPress;
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	e0aa      	b.n	80044a8 <Switches_Scan+0x16c>
	}

	KEY_ACTIVE *pstKeyActive = &(gstSwitch->stKeyActive);
 8004352:	4b58      	ldr	r3, [pc, #352]	; (80044b4 <Switches_Scan+0x178>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60bb      	str	r3, [r7, #8]

	//Serve the interrupt;
	if(gstModel.bMembranePress == true)
 8004358:	4b57      	ldr	r3, [pc, #348]	; (80044b8 <Switches_Scan+0x17c>)
 800435a:	7a1b      	ldrb	r3, [r3, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d009      	beq.n	8004374 <Switches_Scan+0x38>
	{
		gstModel.bMembranePress = false;
 8004360:	4b55      	ldr	r3, [pc, #340]	; (80044b8 <Switches_Scan+0x17c>)
 8004362:	2200      	movs	r2, #0
 8004364:	721a      	strb	r2, [r3, #8]
		MAX7370_read();
 8004366:	f7ff ff27 	bl	80041b8 <MAX7370_read>
		wMAX7370LastRead = GetTimeMs();
 800436a:	f001 fdad 	bl	8005ec8 <GetTimeMs>
 800436e:	4603      	mov	r3, r0
 8004370:	4a52      	ldr	r2, [pc, #328]	; (80044bc <Switches_Scan+0x180>)
 8004372:	6013      	str	r3, [r2, #0]
	}

	//Serve the KeyCode read back
	if(gstModel.bKeyCodeReady == true)
 8004374:	4b50      	ldr	r3, [pc, #320]	; (80044b8 <Switches_Scan+0x17c>)
 8004376:	791b      	ldrb	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8084 	beq.w	8004486 <Switches_Scan+0x14a>
	{
		gstModel.bKeyCodeReady = false;
 800437e:	4b4e      	ldr	r3, [pc, #312]	; (80044b8 <Switches_Scan+0x17c>)
 8004380:	2200      	movs	r2, #0
 8004382:	711a      	strb	r2, [r3, #4]

		//Check to see if key interrupt from press or release action
		if( (gstModel.gKeyCode & KEY_RELEASE) != KEY_RELEASE)
 8004384:	4b4c      	ldr	r3, [pc, #304]	; (80044b8 <Switches_Scan+0x17c>)
 8004386:	7a9b      	ldrb	r3, [r3, #10]
 8004388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438c:	2b00      	cmp	r3, #0
 800438e:	d134      	bne.n	80043fa <Switches_Scan+0xbe>
		{
			//Key press
			pstKeyActive->uKeyCode        = KEY_NOW; //save keycode
 8004390:	4b49      	ldr	r3, [pc, #292]	; (80044b8 <Switches_Scan+0x17c>)
 8004392:	7a9b      	ldrb	r3, [r3, #10]
 8004394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004398:	b2da      	uxtb	r2, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	709a      	strb	r2, [r3, #2]

			//detection of the key stuck for more than 20 seconds
			if(KEY_REPEAT_LAST_DATA ==  pstKeyActive->uKeyCode)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	789b      	ldrb	r3, [r3, #2]
 80043a2:	2b3e      	cmp	r3, #62	; 0x3e
 80043a4:	d120      	bne.n	80043e8 <Switches_Scan+0xac>
			{
				if(pstKeyActive->uFirstRepeatTime == 0)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d105      	bne.n	80043ba <Switches_Scan+0x7e>
				{
				    pstKeyActive->uFirstRepeatTime = Get_SysTick(); //time stamp of the first repeat no data event
 80043ae:	f001 fdc9 	bl	8005f44 <Get_SysTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	609a      	str	r2, [r3, #8]
 80043b8:	e065      	b.n	8004486 <Switches_Scan+0x14a>
				}
				else
				{
					if( (Get_SysTick() - pstKeyActive->uFirstRepeatTime) >= KEY_HOLD_20_SEC)
 80043ba:	f001 fdc3 	bl	8005f44 <Get_SysTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d95b      	bls.n	8004486 <Switches_Scan+0x14a>
					{
						//KEY_FAIL
						pstKeyActive->uFirstRepeatTime = 0;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2200      	movs	r2, #0
 80043d2:	609a      	str	r2, [r3, #8]
						pstKeyActive->eKeyStatus = KEY_FAIL;
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2203      	movs	r2, #3
 80043d8:	701a      	strb	r2, [r3, #0]
						keyboardFail = true;
 80043da:	4b35      	ldr	r3, [pc, #212]	; (80044b0 <Switches_Scan+0x174>)
 80043dc:	2201      	movs	r2, #1
 80043de:	701a      	strb	r2, [r3, #0]
						UartPrintf("Switch held too Long, Disable Switch Scan\n");
 80043e0:	4837      	ldr	r0, [pc, #220]	; (80044c0 <Switches_Scan+0x184>)
 80043e2:	f001 fc79 	bl	8005cd8 <UartPrintf>
 80043e6:	e04e      	b.n	8004486 <Switches_Scan+0x14a>
					}
				}
			}
			else
			{
				pstKeyActive->uLastActiveTime  = Get_SysTick(); //store the key press
 80043e8:	f001 fdac 	bl	8005f44 <Get_SysTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	605a      	str	r2, [r3, #4]
				pstKeyActive->uFirstRepeatTime = 0;
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2200      	movs	r2, #0
 80043f6:	609a      	str	r2, [r3, #8]
 80043f8:	e045      	b.n	8004486 <Switches_Scan+0x14a>
			}
		}
		else
		{
			//Key release, only validate Keycode with previously press
			uint8_t uKeyCodeNow = KEY_NOW;
 80043fa:	4b2f      	ldr	r3, [pc, #188]	; (80044b8 <Switches_Scan+0x17c>)
 80043fc:	7a9b      	ldrb	r3, [r3, #10]
 80043fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004402:	71fb      	strb	r3, [r7, #7]

			if(pstKeyActive->uLastActiveTime && (uKeyCodeNow == pstKeyActive->uKeyCode))
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d03c      	beq.n	8004486 <Switches_Scan+0x14a>
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	789b      	ldrb	r3, [r3, #2]
 8004410:	79fa      	ldrb	r2, [r7, #7]
 8004412:	429a      	cmp	r2, r3
 8004414:	d137      	bne.n	8004486 <Switches_Scan+0x14a>
			{
				if( (Get_SysTick() - pstKeyActive->uLastActiveTime) >= KEY_HOLD_4_SEC)
 8004416:	f001 fd95 	bl	8005f44 <Get_SysTick>
 800441a:	4602      	mov	r2, r0
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004426:	d303      	bcc.n	8004430 <Switches_Scan+0xf4>
				{
					//KEY_HOLD_4_SEC
					pstKeyActive->eKeyStatus = KEY_HOLD_4_S;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2201      	movs	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	e00f      	b.n	8004450 <Switches_Scan+0x114>
				}
				else if( (Get_SysTick() - pstKeyActive->uLastActiveTime) >= KEY_HOLD_2_SEC)
 8004430:	f001 fd88 	bl	8005f44 <Get_SysTick>
 8004434:	4602      	mov	r2, r0
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004440:	d303      	bcc.n	800444a <Switches_Scan+0x10e>
				{
					//KEY_HOLD_2_SEC
					pstKeyActive->eKeyStatus = KEY_HOLD_2_S;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2202      	movs	r2, #2
 8004446:	701a      	strb	r2, [r3, #0]
 8004448:	e002      	b.n	8004450 <Switches_Scan+0x114>
				}
				else
				{
					pstKeyActive->eKeyStatus = KEY_PRESS;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2200      	movs	r2, #0
 800444e:	701a      	strb	r2, [r3, #0]
				}

				pstKeyActive->eKeyID = KeyCodeTranslation(pstKeyActive->uKeyCode); //translation from KeyCode to enum ID
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	789b      	ldrb	r3, [r3, #2]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff ff4f 	bl	80042f8 <KeyCodeTranslation>
 800445a:	4603      	mov	r3, r0
 800445c:	461a      	mov	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	705a      	strb	r2, [r3, #1]
				pstKeyActive->uLastActiveTime = 0; //clean up temp holder
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2200      	movs	r2, #0
 8004466:	605a      	str	r2, [r3, #4]
				if( keyboardFail  == false )
 8004468:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <Switches_Scan+0x174>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	f083 0301 	eor.w	r3, r3, #1
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <Switches_Scan+0x14a>
				{
					bSwitchPress = true;
 8004476:	2301      	movs	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
					UartPrintf("Key Active: %d\n", pstKeyActive->eKeyID);
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	785b      	ldrb	r3, [r3, #1]
 800447e:	4619      	mov	r1, r3
 8004480:	4810      	ldr	r0, [pc, #64]	; (80044c4 <Switches_Scan+0x188>)
 8004482:	f001 fc29 	bl	8005cd8 <UartPrintf>
		}
	}

	//Fail safe check to see the interrupt line still low, do another read
	//to make sure the fifo is clear
	if(isMembraneIntStillLow() == true)
 8004486:	f7ff fe83 	bl	8004190 <isMembraneIntStillLow>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <Switches_Scan+0x16a>
	{
		if((GetTimeMs() - wMAX7370LastRead) >= MAX_TIME_INT_SIGNAL_LOW_MS)
 8004490:	f001 fd1a 	bl	8005ec8 <GetTimeMs>
 8004494:	4602      	mov	r2, r0
 8004496:	4b09      	ldr	r3, [pc, #36]	; (80044bc <Switches_Scan+0x180>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80044a0:	d301      	bcc.n	80044a6 <Switches_Scan+0x16a>
		{
		    MAX7370_read();
 80044a2:	f7ff fe89 	bl	80041b8 <MAX7370_read>
		}
	}

	return bSwitchPress;
 80044a6:	7bfb      	ldrb	r3, [r7, #15]

}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20000aec 	.word	0x20000aec
 80044b4:	20000ae8 	.word	0x20000ae8
 80044b8:	20001d40 	.word	0x20001d40
 80044bc:	20001d64 	.word	0x20001d64
 80044c0:	08021330 	.word	0x08021330
 80044c4:	0802135c 	.word	0x0802135c

080044c8 <Switches_Get_Status>:

void Switches_Get_Status( SWITCH_ID * eSwitchId, KEY_STATUS * eKeyStatus )
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
	KEY_ACTIVE *pstKeyActive 	= &(gstSwitch->stKeyActive);
 80044d2:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <Switches_Get_Status+0x2c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]
	*eSwitchId        			= pstKeyActive->eKeyID;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	785a      	ldrb	r2, [r3, #1]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	701a      	strb	r2, [r3, #0]
	*eKeyStatus 				= pstKeyActive->eKeyStatus;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	781a      	ldrb	r2, [r3, #0]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	701a      	strb	r2, [r3, #0]
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	20000ae8 	.word	0x20000ae8

080044f8 <Switches_Power_Onoff>:


void Switches_Power_Onoff(bool bOnOff)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	71fb      	strb	r3, [r7, #7]
	if(bOnOff == true)
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d006      	beq.n	8004516 <Switches_Power_Onoff+0x1e>
	{
		HAL_GPIO_WritePin(MEMB_POWER_EN_GPIO_Port, MEMB_POWER_EN_Pin, GPIO_PIN_SET);
 8004508:	2201      	movs	r2, #1
 800450a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800450e:	4807      	ldr	r0, [pc, #28]	; (800452c <Switches_Power_Onoff+0x34>)
 8004510:	f006 fa5a 	bl	800a9c8 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(MEMB_POWER_EN_GPIO_Port, MEMB_POWER_EN_Pin, GPIO_PIN_RESET);
	}
}
 8004514:	e005      	b.n	8004522 <Switches_Power_Onoff+0x2a>
		HAL_GPIO_WritePin(MEMB_POWER_EN_GPIO_Port, MEMB_POWER_EN_Pin, GPIO_PIN_RESET);
 8004516:	2200      	movs	r2, #0
 8004518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800451c:	4803      	ldr	r0, [pc, #12]	; (800452c <Switches_Power_Onoff+0x34>)
 800451e:	f006 fa53 	bl	800a9c8 <HAL_GPIO_WritePin>
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40021800 	.word	0x40021800

08004530 <LED_Start_On>:

void LED_Start_On()
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
	uint8_t data[2];
    data[0] = DEBOUNCED_VAL_COL70_REG;
 8004536:	233b      	movs	r3, #59	; 0x3b
 8004538:	713b      	strb	r3, [r7, #4]
    led_start_pause &= ~(1<<4); //COL4 = 0
 800453a:	4b09      	ldr	r3, [pc, #36]	; (8004560 <LED_Start_On+0x30>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	f023 0310 	bic.w	r3, r3, #16
 8004542:	b2da      	uxtb	r2, r3
 8004544:	4b06      	ldr	r3, [pc, #24]	; (8004560 <LED_Start_On+0x30>)
 8004546:	701a      	strb	r2, [r3, #0]
    data[1] = led_start_pause;
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <LED_Start_On+0x30>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 800454e:	1d3b      	adds	r3, r7, #4
 8004550:	2102      	movs	r1, #2
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff fdfa 	bl	800414c <MAX7370_write>
}
 8004558:	bf00      	nop
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	200001c6 	.word	0x200001c6

08004564 <LED_Start_Off>:

void LED_Start_Off()
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
	uint8_t data[2];
    data[0] = DEBOUNCED_VAL_COL70_REG;
 800456a:	233b      	movs	r3, #59	; 0x3b
 800456c:	713b      	strb	r3, [r7, #4]
    led_start_pause |= (1<<4); //COL4 = 1
 800456e:	4b09      	ldr	r3, [pc, #36]	; (8004594 <LED_Start_Off+0x30>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	f043 0310 	orr.w	r3, r3, #16
 8004576:	b2da      	uxtb	r2, r3
 8004578:	4b06      	ldr	r3, [pc, #24]	; (8004594 <LED_Start_Off+0x30>)
 800457a:	701a      	strb	r2, [r3, #0]
    data[1] = led_start_pause;
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <LED_Start_Off+0x30>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 8004582:	1d3b      	adds	r3, r7, #4
 8004584:	2102      	movs	r1, #2
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fde0 	bl	800414c <MAX7370_write>
}
 800458c:	bf00      	nop
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	200001c6 	.word	0x200001c6

08004598 <LED_Pause_On>:

void LED_Pause_On()
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
	uint8_t data[2];
    data[0] = DEBOUNCED_VAL_COL70_REG;
 800459e:	233b      	movs	r3, #59	; 0x3b
 80045a0:	713b      	strb	r3, [r7, #4]
    led_start_pause &= ~(1<<5); //COL4 = 0
 80045a2:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <LED_Pause_On+0x30>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	f023 0320 	bic.w	r3, r3, #32
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <LED_Pause_On+0x30>)
 80045ae:	701a      	strb	r2, [r3, #0]
    data[1] = led_start_pause;
 80045b0:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <LED_Pause_On+0x30>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 80045b6:	1d3b      	adds	r3, r7, #4
 80045b8:	2102      	movs	r1, #2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff fdc6 	bl	800414c <MAX7370_write>
}
 80045c0:	bf00      	nop
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	200001c6 	.word	0x200001c6

080045cc <LED_Pause_Off>:

void LED_Pause_Off()
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
	uint8_t data[2];
    data[0] = DEBOUNCED_VAL_COL70_REG;
 80045d2:	233b      	movs	r3, #59	; 0x3b
 80045d4:	713b      	strb	r3, [r7, #4]
    led_start_pause |= (1<<5); //COL4 = 1
 80045d6:	4b09      	ldr	r3, [pc, #36]	; (80045fc <LED_Pause_Off+0x30>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	f043 0320 	orr.w	r3, r3, #32
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	4b06      	ldr	r3, [pc, #24]	; (80045fc <LED_Pause_Off+0x30>)
 80045e2:	701a      	strb	r2, [r3, #0]
    data[1] = led_start_pause;
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <LED_Pause_Off+0x30>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 80045ea:	1d3b      	adds	r3, r7, #4
 80045ec:	2102      	movs	r1, #2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff fdac 	bl	800414c <MAX7370_write>
}
 80045f4:	bf00      	nop
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	200001c6 	.word	0x200001c6

08004600 <IsAlpha>:
 * Parameters:  c - Char to be checked.
 *
 * Returns:     -1 if alphanumeric, 0 otherwise.
 *---------------------------------------------------------------------------*/
int IsAlpha(char c)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	71fb      	strb	r3, [r7, #7]
    if (((c >= '0') && (c <= '9')) ||
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	2b2f      	cmp	r3, #47	; 0x2f
 800460e:	d902      	bls.n	8004616 <IsAlpha+0x16>
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	2b39      	cmp	r3, #57	; 0x39
 8004614:	d90b      	bls.n	800462e <IsAlpha+0x2e>
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	2b40      	cmp	r3, #64	; 0x40
 800461a:	d902      	bls.n	8004622 <IsAlpha+0x22>
        ((c >= 'A') && (c <= 'Z')) ||
 800461c:	79fb      	ldrb	r3, [r7, #7]
 800461e:	2b5a      	cmp	r3, #90	; 0x5a
 8004620:	d905      	bls.n	800462e <IsAlpha+0x2e>
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	2b60      	cmp	r3, #96	; 0x60
 8004626:	d905      	bls.n	8004634 <IsAlpha+0x34>
        ((c >= 'a') && (c <= 'z')))
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	2b7a      	cmp	r3, #122	; 0x7a
 800462c:	d802      	bhi.n	8004634 <IsAlpha+0x34>
    {
        return -1;
 800462e:	f04f 33ff 	mov.w	r3, #4294967295
 8004632:	e000      	b.n	8004636 <IsAlpha+0x36>
    }
    else
    {
        return 0;
 8004634:	2300      	movs	r3, #0
    }
}
 8004636:	4618      	mov	r0, r3
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
	...

08004644 <InterpLookup>:
 * Returns:     If the command name is recognized, a pointer to an associated
 *              command table entry. If the command name is not recognized,
 *              a NULL pointer is returned.
 *--------------------------------------------------------------------------*/
static CmdTableEntry* InterpLookup(char* cmdName)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
    uint16_t i;
    CmdTableEntry* pCmdTableEntry = 0;
 800464c:	2300      	movs	r3, #0
 800464e:	60bb      	str	r3, [r7, #8]

    // Check if command name exists.
    if (cmdName == (char*)0)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <InterpLookup+0x16>
        return NULL;
 8004656:	2300      	movs	r3, #0
 8004658:	e023      	b.n	80046a2 <InterpLookup+0x5e>

    // Look in command table for a matching command name.
    for ( i=0; i <= currentNumberOfCommands; i++ )
 800465a:	2300      	movs	r3, #0
 800465c:	81fb      	strh	r3, [r7, #14]
 800465e:	e01a      	b.n	8004696 <InterpLookup+0x52>
    {
        if ( !strcmp(CommandTable[i].name, cmdName) )
 8004660:	89fa      	ldrh	r2, [r7, #14]
 8004662:	4613      	mov	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	1a9b      	subs	r3, r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4a10      	ldr	r2, [pc, #64]	; (80046ac <InterpLookup+0x68>)
 800466c:	4413      	add	r3, r2
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4618      	mov	r0, r3
 8004672:	f7fb fdd5 	bl	8000220 <strcmp>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d109      	bne.n	8004690 <InterpLookup+0x4c>
        {
            pCmdTableEntry = &CommandTable[i];
 800467c:	89fa      	ldrh	r2, [r7, #14]
 800467e:	4613      	mov	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4a09      	ldr	r2, [pc, #36]	; (80046ac <InterpLookup+0x68>)
 8004688:	4413      	add	r3, r2
 800468a:	60bb      	str	r3, [r7, #8]
            return pCmdTableEntry;
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	e008      	b.n	80046a2 <InterpLookup+0x5e>
    for ( i=0; i <= currentNumberOfCommands; i++ )
 8004690:	89fb      	ldrh	r3, [r7, #14]
 8004692:	3301      	adds	r3, #1
 8004694:	81fb      	strh	r3, [r7, #14]
 8004696:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <InterpLookup+0x6c>)
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	89fa      	ldrh	r2, [r7, #14]
 800469c:	429a      	cmp	r2, r3
 800469e:	d9df      	bls.n	8004660 <InterpLookup+0x1c>
        }
    }

    return NULL;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20000af0 	.word	0x20000af0
 80046b0:	200018f0 	.word	0x200018f0

080046b4 <InterpValidateCmd>:
 *                            the current command.
 *
 * Returns:     An interpreter error code.
 *--------------------------------------------------------------------------*/
static INTERP InterpValidateCmd(char** argv, int argc, CmdTableEntry** ppCmdTabEnt )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
    CmdTableEntry*  pCmdTableEntry = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
    CmdTableEntry** UserPPcmdTabEnt = ppCmdTabEnt;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	613b      	str	r3, [r7, #16]

    *UserPPcmdTabEnt = 0;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]

    /* Check if command name exists. */
    if ( argv[0] == NULL )
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <InterpValidateCmd+0x26>
        return INTERP_ARG_CMD_NOT_VALID;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e01c      	b.n	8004714 <InterpValidateCmd+0x60>

    /* Find the command object associated with the command. */
    pCmdTableEntry = InterpLookup( argv[0] );
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff ffb0 	bl	8004644 <InterpLookup>
 80046e4:	6178      	str	r0, [r7, #20]
    if ( pCmdTableEntry == NULL )
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <InterpValidateCmd+0x3c>
        return INTERP_ARG_CMD_NOT_VALID;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e011      	b.n	8004714 <InterpValidateCmd+0x60>

    // Validate the command arguments.
    if ( argc < pCmdTableEntry->minArgs )
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	da01      	bge.n	80046fe <InterpValidateCmd+0x4a>
        return INTERP_ARG_UNDER_MIN;
 80046fa:	2304      	movs	r3, #4
 80046fc:	e00a      	b.n	8004714 <InterpValidateCmd+0x60>
    else if ( argc > pCmdTableEntry->maxArgs )
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	429a      	cmp	r2, r3
 8004706:	dd01      	ble.n	800470c <InterpValidateCmd+0x58>
        return INTERP_ARG_OVER_MAX;
 8004708:	2305      	movs	r3, #5
 800470a:	e003      	b.n	8004714 <InterpValidateCmd+0x60>
    else
    {
        *ppCmdTabEnt = pCmdTableEntry;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	601a      	str	r2, [r3, #0]
        return INTERP_SUCCESS;
 8004712:	2300      	movs	r3, #0
    }

    return INTERP_ARG_CMD_NOT_VALID;
}
 8004714:	4618      	mov	r0, r3
 8004716:	3718      	adds	r7, #24
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <InterpExecute>:
 * Parameters:  None.
 *
 * Returns:     An interpreter error code.
 *--------------------------------------------------------------------------*/
static INTERP InterpExecute(int argc, char** argv)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
    CmdTableEntry*       pCmdTabEnt1   = NULL;
 8004726:	2300      	movs	r3, #0
 8004728:	60bb      	str	r3, [r7, #8]
    INTERP               interpRes     = INTERP_BAD_ARGC;
 800472a:	2302      	movs	r3, #2
 800472c:	73fb      	strb	r3, [r7, #15]

    /* Check arguments and lookup command procedure. */
    if (argc > 0)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	dd39      	ble.n	80047a8 <InterpExecute+0x8c>
    {
        /* Check command for validity. */
        if ( (interpRes = InterpValidateCmd(argv, argc, &pCmdTabEnt1)) == INTERP_SUCCESS )
 8004734:	f107 0308 	add.w	r3, r7, #8
 8004738:	461a      	mov	r2, r3
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	6838      	ldr	r0, [r7, #0]
 800473e:	f7ff ffb9 	bl	80046b4 <InterpValidateCmd>
 8004742:	4603      	mov	r3, r0
 8004744:	73fb      	strb	r3, [r7, #15]
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d110      	bne.n	800476e <InterpExecute+0x52>
        {
            // Execute the command.
            if ( pCmdTabEnt1->cmdFn(argc, argv) )
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	6839      	ldr	r1, [r7, #0]
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	4798      	blx	r3
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d026      	beq.n	80047aa <InterpExecute+0x8e>
            {
            	UartPrintf("Error Executing Command: %s\r\n", argv[0]);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4619      	mov	r1, r3
 8004762:	4814      	ldr	r0, [pc, #80]	; (80047b4 <InterpExecute+0x98>)
 8004764:	f001 fab8 	bl	8005cd8 <UartPrintf>
                interpRes = INTERP_CMD_FAIL;
 8004768:	2306      	movs	r3, #6
 800476a:	73fb      	strb	r3, [r7, #15]
 800476c:	e01d      	b.n	80047aa <InterpExecute+0x8e>
            }
        }
        else
        {
            switch ( interpRes )
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	2b05      	cmp	r3, #5
 8004772:	d011      	beq.n	8004798 <InterpExecute+0x7c>
 8004774:	2b05      	cmp	r3, #5
 8004776:	dc13      	bgt.n	80047a0 <InterpExecute+0x84>
 8004778:	2b03      	cmp	r3, #3
 800477a:	d002      	beq.n	8004782 <InterpExecute+0x66>
 800477c:	2b04      	cmp	r3, #4
 800477e:	d007      	beq.n	8004790 <InterpExecute+0x74>
 8004780:	e00e      	b.n	80047a0 <InterpExecute+0x84>
            {
                case INTERP_ARG_CMD_NOT_VALID:
                	UartPrintf("Command: %s -- not Valid \r\n", argv[0]);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4619      	mov	r1, r3
 8004788:	480b      	ldr	r0, [pc, #44]	; (80047b8 <InterpExecute+0x9c>)
 800478a:	f001 faa5 	bl	8005cd8 <UartPrintf>
                    break;
 800478e:	e00c      	b.n	80047aa <InterpExecute+0x8e>

                case INTERP_ARG_UNDER_MIN:
                	UartPrintf("Too few command arguments\r\n");
 8004790:	480a      	ldr	r0, [pc, #40]	; (80047bc <InterpExecute+0xa0>)
 8004792:	f001 faa1 	bl	8005cd8 <UartPrintf>
                    break;
 8004796:	e008      	b.n	80047aa <InterpExecute+0x8e>

                case INTERP_ARG_OVER_MAX:
                	UartPrintf("Too many command arguments\r\n");
 8004798:	4809      	ldr	r0, [pc, #36]	; (80047c0 <InterpExecute+0xa4>)
 800479a:	f001 fa9d 	bl	8005cd8 <UartPrintf>
                    break;
 800479e:	e004      	b.n	80047aa <InterpExecute+0x8e>

                default:
                	UartPrintf("Unknown command failure\r\n");
 80047a0:	4808      	ldr	r0, [pc, #32]	; (80047c4 <InterpExecute+0xa8>)
 80047a2:	f001 fa99 	bl	8005cd8 <UartPrintf>
                	break;
 80047a6:	e000      	b.n	80047aa <InterpExecute+0x8e>
            }
        }
 80047a8:	bf00      	nop
    }

    return interpRes;
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	0802136c 	.word	0x0802136c
 80047b8:	0802138c 	.word	0x0802138c
 80047bc:	080213a8 	.word	0x080213a8
 80047c0:	080213c4 	.word	0x080213c4
 80047c4:	080213e4 	.word	0x080213e4

080047c8 <InterpRun>:
 * Parameters:  cmdStr - A pointer to a command string containing an ASCII command.
 *
 * Returns:     0 if command executed successfully, 1 otherwise.
 *----------------------------------------------------------------------------*/
INTERP InterpRun(const char* cmdStr)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
    unsigned int    i   = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60fb      	str	r3, [r7, #12]
    const char*     ptr = cmdStr;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	60bb      	str	r3, [r7, #8]

    /* Create command tokens. */
    scriptArgc = 0;
 80047d8:	4b50      	ldr	r3, [pc, #320]	; (800491c <InterpRun+0x154>)
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]

    while (*ptr != 0)
 80047de:	e08c      	b.n	80048fa <InterpRun+0x132>
    {
        /* Argument is a string. */
        if (*ptr == '"')
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b22      	cmp	r3, #34	; 0x22
 80047e6:	d115      	bne.n	8004814 <InterpRun+0x4c>
        {
            ptr++;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	3301      	adds	r3, #1
 80047ec:	60bb      	str	r3, [r7, #8]
            while (*ptr != '"')
 80047ee:	e00d      	b.n	800480c <InterpRun+0x44>
            {
                scriptArgv[scriptArgc][i++] = *ptr++;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	60ba      	str	r2, [r7, #8]
 80047f6:	4a49      	ldr	r2, [pc, #292]	; (800491c <InterpRun+0x154>)
 80047f8:	6812      	ldr	r2, [r2, #0]
 80047fa:	4949      	ldr	r1, [pc, #292]	; (8004920 <InterpRun+0x158>)
 80047fc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	1c50      	adds	r0, r2, #1
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	440a      	add	r2, r1
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	7013      	strb	r3, [r2, #0]
            while (*ptr != '"')
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b22      	cmp	r3, #34	; 0x22
 8004812:	d1ed      	bne.n	80047f0 <InterpRun+0x28>
            }
        }

        /* Add character to argument. */
        if (IsAlpha(*ptr))
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff fef1 	bl	8004600 <IsAlpha>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00c      	beq.n	800483e <InterpRun+0x76>
        {
            scriptArgv[scriptArgc][i++] = *ptr;
 8004824:	4b3d      	ldr	r3, [pc, #244]	; (800491c <InterpRun+0x154>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a3d      	ldr	r2, [pc, #244]	; (8004920 <InterpRun+0x158>)
 800482a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1c59      	adds	r1, r3, #1
 8004832:	60f9      	str	r1, [r7, #12]
 8004834:	4413      	add	r3, r2
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	7812      	ldrb	r2, [r2, #0]
 800483a:	701a      	strb	r2, [r3, #0]
 800483c:	e043      	b.n	80048c6 <InterpRun+0xfe>
        }
        else if ((*ptr == '.') ||
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	2b2e      	cmp	r3, #46	; 0x2e
 8004844:	d01f      	beq.n	8004886 <InterpRun+0xbe>
                 (*ptr == '_') ||
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	781b      	ldrb	r3, [r3, #0]
        else if ((*ptr == '.') ||
 800484a:	2b5f      	cmp	r3, #95	; 0x5f
 800484c:	d01b      	beq.n	8004886 <InterpRun+0xbe>
                 (*ptr == '-') ||
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	781b      	ldrb	r3, [r3, #0]
                 (*ptr == '_') ||
 8004852:	2b2d      	cmp	r3, #45	; 0x2d
 8004854:	d017      	beq.n	8004886 <InterpRun+0xbe>
                 (*ptr == '/') ||
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	781b      	ldrb	r3, [r3, #0]
                 (*ptr == '-') ||
 800485a:	2b2f      	cmp	r3, #47	; 0x2f
 800485c:	d013      	beq.n	8004886 <InterpRun+0xbe>
                 (*ptr == '+') ||
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	781b      	ldrb	r3, [r3, #0]
                 (*ptr == '/') ||
 8004862:	2b2b      	cmp	r3, #43	; 0x2b
 8004864:	d00f      	beq.n	8004886 <InterpRun+0xbe>
                 (*ptr == '=') ||
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	781b      	ldrb	r3, [r3, #0]
                 (*ptr == '+') ||
 800486a:	2b3d      	cmp	r3, #61	; 0x3d
 800486c:	d00b      	beq.n	8004886 <InterpRun+0xbe>
                 (*ptr == '>') ||
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	781b      	ldrb	r3, [r3, #0]
                 (*ptr == '=') ||
 8004872:	2b3e      	cmp	r3, #62	; 0x3e
 8004874:	d007      	beq.n	8004886 <InterpRun+0xbe>
                 (*ptr == ':') ||
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	781b      	ldrb	r3, [r3, #0]
                 (*ptr == '>') ||
 800487a:	2b3a      	cmp	r3, #58	; 0x3a
 800487c:	d003      	beq.n	8004886 <InterpRun+0xbe>
                 (*ptr == '?'))
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	781b      	ldrb	r3, [r3, #0]
                 (*ptr == ':') ||
 8004882:	2b3f      	cmp	r3, #63	; 0x3f
 8004884:	d10c      	bne.n	80048a0 <InterpRun+0xd8>
        {
            scriptArgv[scriptArgc][i++] = *ptr;
 8004886:	4b25      	ldr	r3, [pc, #148]	; (800491c <InterpRun+0x154>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a25      	ldr	r2, [pc, #148]	; (8004920 <InterpRun+0x158>)
 800488c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	1c59      	adds	r1, r3, #1
 8004894:	60f9      	str	r1, [r7, #12]
 8004896:	4413      	add	r3, r2
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	7812      	ldrb	r2, [r2, #0]
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	e012      	b.n	80048c6 <InterpRun+0xfe>
        }
        /* Terminate argument. */
        else if ( i > 0 )
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00f      	beq.n	80048c6 <InterpRun+0xfe>
        {
            scriptArgv[scriptArgc][i] = '\0';
 80048a6:	4b1d      	ldr	r3, [pc, #116]	; (800491c <InterpRun+0x154>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1d      	ldr	r2, [pc, #116]	; (8004920 <InterpRun+0x158>)
 80048ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	2200      	movs	r2, #0
 80048b6:	701a      	strb	r2, [r3, #0]
            i = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]
            scriptArgc++;
 80048bc:	4b17      	ldr	r3, [pc, #92]	; (800491c <InterpRun+0x154>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3301      	adds	r3, #1
 80048c2:	4a16      	ldr	r2, [pc, #88]	; (800491c <InterpRun+0x154>)
 80048c4:	6013      	str	r3, [r2, #0]
        }

        /* If at end of cmd str and there were cmd chars for the prev argv, */
        /* terminate the argument. */
        ptr++;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	3301      	adds	r3, #1
 80048ca:	60bb      	str	r3, [r7, #8]
        if ( (*ptr == 0) && (i > 0) )
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d112      	bne.n	80048fa <InterpRun+0x132>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00f      	beq.n	80048fa <InterpRun+0x132>
        {
            scriptArgv[scriptArgc][i] = '\0';
 80048da:	4b10      	ldr	r3, [pc, #64]	; (800491c <InterpRun+0x154>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a10      	ldr	r2, [pc, #64]	; (8004920 <InterpRun+0x158>)
 80048e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	2200      	movs	r2, #0
 80048ea:	701a      	strb	r2, [r3, #0]
            i = 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	60fb      	str	r3, [r7, #12]
            scriptArgc++;
 80048f0:	4b0a      	ldr	r3, [pc, #40]	; (800491c <InterpRun+0x154>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3301      	adds	r3, #1
 80048f6:	4a09      	ldr	r2, [pc, #36]	; (800491c <InterpRun+0x154>)
 80048f8:	6013      	str	r3, [r2, #0]
    while (*ptr != 0)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f47f af6e 	bne.w	80047e0 <InterpRun+0x18>
        }
    }

    /* Execute the parsed ASCII command. */
    return InterpExecute( scriptArgc, scriptArgv );
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <InterpRun+0x154>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4905      	ldr	r1, [pc, #20]	; (8004920 <InterpRun+0x158>)
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff ff06 	bl	800471c <InterpExecute>
 8004910:	4603      	mov	r3, r0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20001b34 	.word	0x20001b34
 8004920:	20001af4 	.word	0x20001af4

08004924 <InterpRegister>:
 *              maxArgs - The maximum # of args the handler accepts.
 *
 * Returns:     A interpreter error code.
 *--------------------------------------------------------------------------*/
INTERP InterpRegister( char* cmdName, int (*proc)(), int minArgs, int maxArgs )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	603b      	str	r3, [r7, #0]
    if ( currentNumberOfCommands < MAX_NUM_OF_COMMANDS )
 8004932:	4b21      	ldr	r3, [pc, #132]	; (80049b8 <InterpRegister+0x94>)
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	2b7f      	cmp	r3, #127	; 0x7f
 8004938:	d838      	bhi.n	80049ac <InterpRegister+0x88>
    {
        strcpy( CommandTable[currentNumberOfCommands].name, cmdName );
 800493a:	4b1f      	ldr	r3, [pc, #124]	; (80049b8 <InterpRegister+0x94>)
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	461a      	mov	r2, r3
 8004940:	4613      	mov	r3, r2
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	1a9b      	subs	r3, r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4a1c      	ldr	r2, [pc, #112]	; (80049bc <InterpRegister+0x98>)
 800494a:	4413      	add	r3, r2
 800494c:	68f9      	ldr	r1, [r7, #12]
 800494e:	4618      	mov	r0, r3
 8004950:	f018 faad 	bl	801ceae <strcpy>
        CommandTable[currentNumberOfCommands].cmdFn   = proc;
 8004954:	4b18      	ldr	r3, [pc, #96]	; (80049b8 <InterpRegister+0x94>)
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	4619      	mov	r1, r3
 800495a:	4a18      	ldr	r2, [pc, #96]	; (80049bc <InterpRegister+0x98>)
 800495c:	460b      	mov	r3, r1
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	1a5b      	subs	r3, r3, r1
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	3310      	adds	r3, #16
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	601a      	str	r2, [r3, #0]
        CommandTable[currentNumberOfCommands].minArgs = minArgs;
 800496c:	4b12      	ldr	r3, [pc, #72]	; (80049b8 <InterpRegister+0x94>)
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	4619      	mov	r1, r3
 8004972:	4a12      	ldr	r2, [pc, #72]	; (80049bc <InterpRegister+0x98>)
 8004974:	460b      	mov	r3, r1
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	1a5b      	subs	r3, r3, r1
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	3314      	adds	r3, #20
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	601a      	str	r2, [r3, #0]
        CommandTable[currentNumberOfCommands].maxArgs = maxArgs;
 8004984:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <InterpRegister+0x94>)
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	4619      	mov	r1, r3
 800498a:	4a0c      	ldr	r2, [pc, #48]	; (80049bc <InterpRegister+0x98>)
 800498c:	460b      	mov	r3, r1
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	1a5b      	subs	r3, r3, r1
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	3318      	adds	r3, #24
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	601a      	str	r2, [r3, #0]
        currentNumberOfCommands++;
 800499c:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <InterpRegister+0x94>)
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	3301      	adds	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <InterpRegister+0x94>)
 80049a6:	801a      	strh	r2, [r3, #0]
        return ( INTERP_SUCCESS );
 80049a8:	2300      	movs	r3, #0
 80049aa:	e000      	b.n	80049ae <InterpRegister+0x8a>
    }

    return( INTERP_CMD_REGISTER_FAIL );
 80049ac:	2301      	movs	r3, #1
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	200018f0 	.word	0x200018f0
 80049bc:	20000af0 	.word	0x20000af0

080049c0 <InterpInit>:
 * Parameters:  None.
 *
 * Returns:     None.
 *--------------------------------------------------------------------------*/
void InterpInit()
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
    uint16_t i;

    // Initialize the command argument array.
    for ( i = 0; i < MAX_NUM_OF_ARGS; i++ )
 80049c6:	2300      	movs	r3, #0
 80049c8:	80fb      	strh	r3, [r7, #6]
 80049ca:	e00a      	b.n	80049e2 <InterpInit+0x22>
        scriptArgv[i] = &(cmdArgs[i][0]);
 80049cc:	88fa      	ldrh	r2, [r7, #6]
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	0152      	lsls	r2, r2, #5
 80049d2:	4909      	ldr	r1, [pc, #36]	; (80049f8 <InterpInit+0x38>)
 80049d4:	440a      	add	r2, r1
 80049d6:	4909      	ldr	r1, [pc, #36]	; (80049fc <InterpInit+0x3c>)
 80049d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for ( i = 0; i < MAX_NUM_OF_ARGS; i++ )
 80049dc:	88fb      	ldrh	r3, [r7, #6]
 80049de:	3301      	adds	r3, #1
 80049e0:	80fb      	strh	r3, [r7, #6]
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	2b0f      	cmp	r3, #15
 80049e6:	d9f1      	bls.n	80049cc <InterpInit+0xc>

    UartPrintf("Interpreter Initialized\r\n");
 80049e8:	4805      	ldr	r0, [pc, #20]	; (8004a00 <InterpInit+0x40>)
 80049ea:	f001 f975 	bl	8005cd8 <UartPrintf>
}
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	200018f4 	.word	0x200018f4
 80049fc:	20001af4 	.word	0x20001af4
 8004a00:	08021400 	.word	0x08021400

08004a04 <GetNoAsyncPrintsFlag>:
static uint8_t headerPrinted = 0;
bool noAsyncPrints           = false;
bool bStopDebugPrint         = false;

bool GetNoAsyncPrintsFlag( )
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
	return noAsyncPrints;
 8004a08:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <GetNoAsyncPrintsFlag+0x14>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	20001b39 	.word	0x20001b39

08004a1c <IsStopDebugPring>:

bool IsStopDebugPring()
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
	return bStopDebugPrint;
 8004a20:	4b03      	ldr	r3, [pc, #12]	; (8004a30 <IsStopDebugPring+0x14>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	20001b3a 	.word	0x20001b3a

08004a34 <PrintManagerInit>:

PrintEnables printEnables;
uint16_t PrintTimes[PRINT_GROUPS];

void PrintManagerInit()
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
	printEnables.PrintEnableWord = 0;
 8004a38:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <PrintManagerInit+0x1c>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
	PrintTimes[PRINT_PRESS]      = 200;
 8004a3e:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <PrintManagerInit+0x20>)
 8004a40:	22c8      	movs	r2, #200	; 0xc8
 8004a42:	801a      	strh	r2, [r3, #0]

	return;
 8004a44:	bf00      	nop
}
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20001d68 	.word	0x20001d68
 8004a54:	20001d6c 	.word	0x20001d6c

08004a58 <PrintManager>:

int PrintManager()
{
 8004a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a5c:	b086      	sub	sp, #24
 8004a5e:	af06      	add	r7, sp, #24
	static unsigned int pmCount = 0;

	if ( printEnables.PrintEnableWord )
 8004a60:	4b41      	ldr	r3, [pc, #260]	; (8004b68 <PrintManager+0x110>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d075      	beq.n	8004b54 <PrintManager+0xfc>
	{
		//check if there is any request to print Item for example this is the request to show
		//the pressure sensor

		if (  printEnables.bits.printPress  )
 8004a68:	4b3f      	ldr	r3, [pc, #252]	; (8004b68 <PrintManager+0x110>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d044      	beq.n	8004b00 <PrintManager+0xa8>
		{
			if ( !(pmCount % PrintTimes[PRINT_PRESS]) )
 8004a76:	4b3d      	ldr	r3, [pc, #244]	; (8004b6c <PrintManager+0x114>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a3d      	ldr	r2, [pc, #244]	; (8004b70 <PrintManager+0x118>)
 8004a7c:	8812      	ldrh	r2, [r2, #0]
 8004a7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a82:	fb02 f201 	mul.w	r2, r2, r1
 8004a86:	1a9b      	subs	r3, r3, r2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d163      	bne.n	8004b54 <PrintManager+0xfc>
			{
				if ( !headerPrinted )
 8004a8c:	4b39      	ldr	r3, [pc, #228]	; (8004b74 <PrintManager+0x11c>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d105      	bne.n	8004aa0 <PrintManager+0x48>
				{
					PmUartPrintfWithoutPrompt("PSen1 mmHg       PSen2   mmHg     PSen3   mmHg    PSen4  mmHg\n");
 8004a94:	4838      	ldr	r0, [pc, #224]	; (8004b78 <PrintManager+0x120>)
 8004a96:	f001 f9e5 	bl	8005e64 <PmUartPrintfWithoutPrompt>
					headerPrinted = 1;
 8004a9a:	4b36      	ldr	r3, [pc, #216]	; (8004b74 <PrintManager+0x11c>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	701a      	strb	r2, [r3, #0]
				//UartPrintfWithoutPrompt("%4.3f     %4.3f     %4.3f     %4.3f\n",
				//		                   GetPressureSensor1Value(), GetPressureSensor2Value(),
				//						   GetPressureSensor3Value(), GetPressureSensor4Value() );

				UartPrintfWithoutPrompt("%9.4f        %9.4f        %9.4f        %9.4f\n",
						               GetCalcMmhgSensorPressure1( ), GetCalcMmhgSensorPressure2( ),
 8004aa0:	f7fc fc22 	bl	80012e8 <GetCalcMmhgSensorPressure1>
 8004aa4:	ee10 3a10 	vmov	r3, s0
				UartPrintfWithoutPrompt("%9.4f        %9.4f        %9.4f        %9.4f\n",
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fb fd85 	bl	80005b8 <__aeabi_f2d>
 8004aae:	4682      	mov	sl, r0
 8004ab0:	468b      	mov	fp, r1
						               GetCalcMmhgSensorPressure1( ), GetCalcMmhgSensorPressure2( ),
 8004ab2:	f7fc fb4d 	bl	8001150 <GetCalcMmhgSensorPressure2>
 8004ab6:	ee10 3a10 	vmov	r3, s0
				UartPrintfWithoutPrompt("%9.4f        %9.4f        %9.4f        %9.4f\n",
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fb fd7c 	bl	80005b8 <__aeabi_f2d>
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	460d      	mov	r5, r1
						               GetCalcMmhgSensorPressure3( ), GetCalcMmhgSensorPressure4( ) );
 8004ac4:	f7fc fb88 	bl	80011d8 <GetCalcMmhgSensorPressure3>
 8004ac8:	ee10 3a10 	vmov	r3, s0
				UartPrintfWithoutPrompt("%9.4f        %9.4f        %9.4f        %9.4f\n",
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fb fd73 	bl	80005b8 <__aeabi_f2d>
 8004ad2:	4680      	mov	r8, r0
 8004ad4:	4689      	mov	r9, r1
						               GetCalcMmhgSensorPressure3( ), GetCalcMmhgSensorPressure4( ) );
 8004ad6:	f7fc fbc3 	bl	8001260 <GetCalcMmhgSensorPressure4>
 8004ada:	ee10 3a10 	vmov	r3, s0
				UartPrintfWithoutPrompt("%9.4f        %9.4f        %9.4f        %9.4f\n",
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fb fd6a 	bl	80005b8 <__aeabi_f2d>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004aec:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004af0:	e9cd 4500 	strd	r4, r5, [sp]
 8004af4:	4652      	mov	r2, sl
 8004af6:	465b      	mov	r3, fp
 8004af8:	4820      	ldr	r0, [pc, #128]	; (8004b7c <PrintManager+0x124>)
 8004afa:	f001 f933 	bl	8005d64 <UartPrintfWithoutPrompt>
 8004afe:	e029      	b.n	8004b54 <PrintManager+0xfc>
			}
		}
		else if (  printEnables.bits.printPfc  )
 8004b00:	4b19      	ldr	r3, [pc, #100]	; (8004b68 <PrintManager+0x110>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d022      	beq.n	8004b54 <PrintManager+0xfc>
		{
			if ( !(pmCount % PrintTimes[PRINT_PFC]) )
 8004b0e:	4b17      	ldr	r3, [pc, #92]	; (8004b6c <PrintManager+0x114>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a17      	ldr	r2, [pc, #92]	; (8004b70 <PrintManager+0x118>)
 8004b14:	8852      	ldrh	r2, [r2, #2]
 8004b16:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b1a:	fb02 f201 	mul.w	r2, r2, r1
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d117      	bne.n	8004b54 <PrintManager+0xfc>
			{
				if ( !headerPrinted )
 8004b24:	4b13      	ldr	r3, [pc, #76]	; (8004b74 <PrintManager+0x11c>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d105      	bne.n	8004b38 <PrintManager+0xe0>
				{
					PmUartPrintfWithoutPrompt("PfcCurrentRawAdc      PfcVoutRawAdc     PfcTempMonRawAdc\n");
 8004b2c:	4814      	ldr	r0, [pc, #80]	; (8004b80 <PrintManager+0x128>)
 8004b2e:	f001 f999 	bl	8005e64 <PmUartPrintfWithoutPrompt>
					headerPrinted = 1;
 8004b32:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <PrintManager+0x11c>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	701a      	strb	r2, [r3, #0]
				}

				PmUartPrintfWithoutPrompt("%d       %d       %d\n", GetPfcCurrentMonRawAdc(), GetPfcVOutRawAdc(), GetPfcTempMonRawAdc() );
 8004b38:	f7fc fc64 	bl	8001404 <GetPfcCurrentMonRawAdc>
 8004b3c:	4604      	mov	r4, r0
 8004b3e:	f7fc fc6d 	bl	800141c <GetPfcVOutRawAdc>
 8004b42:	4605      	mov	r5, r0
 8004b44:	f7fc fc76 	bl	8001434 <GetPfcTempMonRawAdc>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	462a      	mov	r2, r5
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	480d      	ldr	r0, [pc, #52]	; (8004b84 <PrintManager+0x12c>)
 8004b50:	f001 f988 	bl	8005e64 <PmUartPrintfWithoutPrompt>
			}
		}

	}

	pmCount++;
 8004b54:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <PrintManager+0x114>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	4a04      	ldr	r2, [pc, #16]	; (8004b6c <PrintManager+0x114>)
 8004b5c:	6013      	str	r3, [r2, #0]

	return 0;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b68:	20001d68 	.word	0x20001d68
 8004b6c:	20001b3c 	.word	0x20001b3c
 8004b70:	20001d6c 	.word	0x20001d6c
 8004b74:	20001b38 	.word	0x20001b38
 8004b78:	0802141c 	.word	0x0802141c
 8004b7c:	0802145c 	.word	0x0802145c
 8004b80:	0802148c 	.word	0x0802148c
 8004b84:	080214c8 	.word	0x080214c8

08004b88 <SetPrintTimePeriods>:

void SetPrintTimePeriods( PRINT_CODE pc, uint16_t tp )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	460a      	mov	r2, r1
 8004b92:	71fb      	strb	r3, [r7, #7]
 8004b94:	4613      	mov	r3, r2
 8004b96:	80bb      	strh	r3, [r7, #4]
	noAsyncPrints = false;
 8004b98:	4b24      	ldr	r3, [pc, #144]	; (8004c2c <SetPrintTimePeriods+0xa4>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	701a      	strb	r2, [r3, #0]

	if ( pc >= PRINT_GROUPS )
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d903      	bls.n	8004bac <SetPrintTimePeriods+0x24>
	{
		UartPrintf( "Illegal Print Group for Setting Time Period \n");
 8004ba4:	4822      	ldr	r0, [pc, #136]	; (8004c30 <SetPrintTimePeriods+0xa8>)
 8004ba6:	f001 f897 	bl	8005cd8 <UartPrintf>
		return;
 8004baa:	e03b      	b.n	8004c24 <SetPrintTimePeriods+0x9c>
	}

	if ( tp == 0 )
 8004bac:	88bb      	ldrh	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d119      	bne.n	8004be6 <SetPrintTimePeriods+0x5e>
	{
		headerPrinted = 0;
 8004bb2:	4b20      	ldr	r3, [pc, #128]	; (8004c34 <SetPrintTimePeriods+0xac>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	701a      	strb	r2, [r3, #0]

		switch ( pc )
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <SetPrintTimePeriods+0x3c>
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d006      	beq.n	8004bd0 <SetPrintTimePeriods+0x48>
 8004bc2:	e00b      	b.n	8004bdc <SetPrintTimePeriods+0x54>
		{
			case PRINT_PRESS:
			    printEnables.bits.printPress = 0;
 8004bc4:	4a1c      	ldr	r2, [pc, #112]	; (8004c38 <SetPrintTimePeriods+0xb0>)
 8004bc6:	7813      	ldrb	r3, [r2, #0]
 8004bc8:	f36f 0300 	bfc	r3, #0, #1
 8004bcc:	7013      	strb	r3, [r2, #0]
			break;
 8004bce:	e009      	b.n	8004be4 <SetPrintTimePeriods+0x5c>

			case PRINT_PFC:
			    printEnables.bits.printPfc = 0;
 8004bd0:	4a19      	ldr	r2, [pc, #100]	; (8004c38 <SetPrintTimePeriods+0xb0>)
 8004bd2:	7813      	ldrb	r3, [r2, #0]
 8004bd4:	f36f 0341 	bfc	r3, #1, #1
 8004bd8:	7013      	strb	r3, [r2, #0]
			break;
 8004bda:	e003      	b.n	8004be4 <SetPrintTimePeriods+0x5c>

			default:
			printEnables.PrintEnableWord = 0;
 8004bdc:	4b16      	ldr	r3, [pc, #88]	; (8004c38 <SetPrintTimePeriods+0xb0>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
			break;
 8004be2:	bf00      	nop
		}

		return;
 8004be4:	e01e      	b.n	8004c24 <SetPrintTimePeriods+0x9c>
	}

    if ( tp >= MIN_PRINT_PERIOD_MS )
 8004be6:	88bb      	ldrh	r3, [r7, #4]
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d910      	bls.n	8004c0e <SetPrintTimePeriods+0x86>
	{
		PrintTimes[pc] = tp / 5;  // Print Times in 5ms ticks
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	88ba      	ldrh	r2, [r7, #4]
 8004bf0:	4912      	ldr	r1, [pc, #72]	; (8004c3c <SetPrintTimePeriods+0xb4>)
 8004bf2:	fba1 1202 	umull	r1, r2, r1, r2
 8004bf6:	0892      	lsrs	r2, r2, #2
 8004bf8:	b291      	uxth	r1, r2
 8004bfa:	4a11      	ldr	r2, [pc, #68]	; (8004c40 <SetPrintTimePeriods+0xb8>)
 8004bfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if( tp < 20 )
 8004c00:	88bb      	ldrh	r3, [r7, #4]
 8004c02:	2b13      	cmp	r3, #19
 8004c04:	d80d      	bhi.n	8004c22 <SetPrintTimePeriods+0x9a>
		{
			noAsyncPrints = true;
 8004c06:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <SetPrintTimePeriods+0xa4>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	701a      	strb	r2, [r3, #0]
		printEnables.PrintEnableWord = 0;
		UartPrintfWithoutPrompt( "Print Period is too short \n");
		UartPrintf( "Print time must be 0 (turn print group off) or >= %d \n", MIN_PRINT_PERIOD_MS );
	}

	return;
 8004c0c:	e009      	b.n	8004c22 <SetPrintTimePeriods+0x9a>
		printEnables.PrintEnableWord = 0;
 8004c0e:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <SetPrintTimePeriods+0xb0>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
		UartPrintfWithoutPrompt( "Print Period is too short \n");
 8004c14:	480b      	ldr	r0, [pc, #44]	; (8004c44 <SetPrintTimePeriods+0xbc>)
 8004c16:	f001 f8a5 	bl	8005d64 <UartPrintfWithoutPrompt>
		UartPrintf( "Print time must be 0 (turn print group off) or >= %d \n", MIN_PRINT_PERIOD_MS );
 8004c1a:	2105      	movs	r1, #5
 8004c1c:	480a      	ldr	r0, [pc, #40]	; (8004c48 <SetPrintTimePeriods+0xc0>)
 8004c1e:	f001 f85b 	bl	8005cd8 <UartPrintf>
	return;
 8004c22:	bf00      	nop
}
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20001b39 	.word	0x20001b39
 8004c30:	080214e0 	.word	0x080214e0
 8004c34:	20001b38 	.word	0x20001b38
 8004c38:	20001d68 	.word	0x20001d68
 8004c3c:	cccccccd 	.word	0xcccccccd
 8004c40:	20001d6c 	.word	0x20001d6c
 8004c44:	08021510 	.word	0x08021510
 8004c48:	0802152c 	.word	0x0802152c

08004c4c <SetPMprints>:


int SetPMprints( int argc, char** argv )
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
	PRINT_CODE printCode;

    if ( !strcmp(argv[1], "press") )
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4922      	ldr	r1, [pc, #136]	; (8004ce8 <SetPMprints+0x9c>)
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fb fade 	bl	8000220 <strcmp>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d107      	bne.n	8004c7a <SetPMprints+0x2e>
	{
		printCode = PRINT_PRESS;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	73fb      	strb	r3, [r7, #15]
		printEnables.bits.printPress = 1;
 8004c6e:	4a1f      	ldr	r2, [pc, #124]	; (8004cec <SetPMprints+0xa0>)
 8004c70:	7813      	ldrb	r3, [r2, #0]
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	7013      	strb	r3, [r2, #0]
 8004c78:	e017      	b.n	8004caa <SetPMprints+0x5e>
	}
	else if( !strcmp(argv[1], "pfc") )
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	491b      	ldr	r1, [pc, #108]	; (8004cf0 <SetPMprints+0xa4>)
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fb facc 	bl	8000220 <strcmp>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d107      	bne.n	8004c9e <SetPMprints+0x52>
	{
		printCode = PRINT_PFC;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	73fb      	strb	r3, [r7, #15]
		printEnables.bits.printPfc = 1;
 8004c92:	4a16      	ldr	r2, [pc, #88]	; (8004cec <SetPMprints+0xa0>)
 8004c94:	7813      	ldrb	r3, [r2, #0]
 8004c96:	f043 0302 	orr.w	r3, r3, #2
 8004c9a:	7013      	strb	r3, [r2, #0]
 8004c9c:	e005      	b.n	8004caa <SetPMprints+0x5e>
	}
	else
	{
		UartPrintf( "Illegal Print Code Used \n" );
 8004c9e:	4815      	ldr	r0, [pc, #84]	; (8004cf4 <SetPMprints+0xa8>)
 8004ca0:	f001 f81a 	bl	8005cd8 <UartPrintf>
		return -1;
 8004ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca8:	e01a      	b.n	8004ce0 <SetPMprints+0x94>
	}

	if ( argc > 2 )
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	dd0e      	ble.n	8004cce <SetPMprints+0x82>
	{
		uint16_t printTimePeriodMs;
		printTimePeriodMs = atoi( (const char*)argv[2] );
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	3308      	adds	r3, #8
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f017 fb20 	bl	801c2fc <atoi>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	81bb      	strh	r3, [r7, #12]
		SetPrintTimePeriods( printCode, printTimePeriodMs );
 8004cc0:	89ba      	ldrh	r2, [r7, #12]
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff ff5e 	bl	8004b88 <SetPrintTimePeriods>
 8004ccc:	e007      	b.n	8004cde <SetPMprints+0x92>
	}
	else
	{
		UartPrintfWithoutPrompt( "No Print Period specified -- defaulting to 1 second\n");
 8004cce:	480a      	ldr	r0, [pc, #40]	; (8004cf8 <SetPMprints+0xac>)
 8004cd0:	f001 f848 	bl	8005d64 <UartPrintfWithoutPrompt>
		SetPrintTimePeriods( printCode, 200 );
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	21c8      	movs	r1, #200	; 0xc8
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff ff55 	bl	8004b88 <SetPrintTimePeriods>
	}

	return 0;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	08021564 	.word	0x08021564
 8004cec:	20001d68 	.word	0x20001d68
 8004cf0:	0802156c 	.word	0x0802156c
 8004cf4:	08021570 	.word	0x08021570
 8004cf8:	0802158c 	.word	0x0802158c

08004cfc <SetAllLedBlink>:

int SetAllLedBlink( int argc, char** argv )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
	UartPrintf("Received Blink all LEDs Command, TimeOn TimeOff should be multiple of 5ms\n");
 8004d06:	4807      	ldr	r0, [pc, #28]	; (8004d24 <SetAllLedBlink+0x28>)
 8004d08:	f000 ffe6 	bl	8005cd8 <UartPrintf>
	LED_Set( LED_COUNT, LED_SET_BLINK, 50, 50);
 8004d0c:	2332      	movs	r3, #50	; 0x32
 8004d0e:	2232      	movs	r2, #50	; 0x32
 8004d10:	2102      	movs	r1, #2
 8004d12:	200a      	movs	r0, #10
 8004d14:	f7fe fefc 	bl	8003b10 <LED_Set>
	return 0;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	080215c4 	.word	0x080215c4

08004d28 <SetAllLedOn>:

int SetAllLedOn( int argc, char** argv )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
	UartPrintf("Received Turn all LEDs On Command\n");
 8004d32:	4807      	ldr	r0, [pc, #28]	; (8004d50 <SetAllLedOn+0x28>)
 8004d34:	f000 ffd0 	bl	8005cd8 <UartPrintf>
	LED_Set( LED_COUNT, LED_SET_ON, 0, 0);
 8004d38:	2300      	movs	r3, #0
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	200a      	movs	r0, #10
 8004d40:	f7fe fee6 	bl	8003b10 <LED_Set>
	return 0;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	08021610 	.word	0x08021610

08004d54 <SetAllLedOff>:

int SetAllLedOff( int argc, char** argv )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
	UartPrintf("Received Turn all LEDs Off Command\n");
 8004d5e:	4807      	ldr	r0, [pc, #28]	; (8004d7c <SetAllLedOff+0x28>)
 8004d60:	f000 ffba 	bl	8005cd8 <UartPrintf>
	LED_Set( LED_COUNT, LED_SET_OFF, 0, 0);
 8004d64:	2300      	movs	r3, #0
 8004d66:	2200      	movs	r2, #0
 8004d68:	2100      	movs	r1, #0
 8004d6a:	200a      	movs	r0, #10
 8004d6c:	f7fe fed0 	bl	8003b10 <LED_Set>
	return 0;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	08021634 	.word	0x08021634

08004d80 <InitLog>:

int InitLog( int argc, char** argv )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
	InitializeLog( );
 8004d8a:	f7fd fdab 	bl	80028e4 <InitializeLog>

	UartPrintf("");
 8004d8e:	4804      	ldr	r0, [pc, #16]	; (8004da0 <InitLog+0x20>)
 8004d90:	f000 ffa2 	bl	8005cd8 <UartPrintf>

    return 0;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	08021658 	.word	0x08021658

08004da4 <GetMfgDate>:

int GetMfgDate( int argc, char** argv )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
	GetMfgDateFromEeprom( );
 8004dae:	f7fd fdc7 	bl	8002940 <GetMfgDateFromEeprom>

	return 0;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <SetMfgDate>:

int SetMfgDate( int argc, char** argv )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
	if( sizeof(argv[1]) <= 16 )
	{
		StoreMfgDateInEeprom( argv[1] );
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fd fd5d 	bl	800288c <StoreMfgDateInEeprom>
	else
	{
		UartPrintf("Mfg Date: %s is too long\n", argv[1]);
	}

	UartPrintf("Set Mfg Date:%s\n", argv[1]);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4804      	ldr	r0, [pc, #16]	; (8004dec <SetMfgDate+0x30>)
 8004ddc:	f000 ff7c 	bl	8005cd8 <UartPrintf>

	return 0;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	0802165c 	.word	0x0802165c

08004df0 <GetSerialNum>:

int GetSerialNum( int argc, char** argv )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
	GetSerialNumberFromEeprom( );
 8004dfa:	f7fd fdb1 	bl	8002960 <GetSerialNumberFromEeprom>

	return 0;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <SetSerialNum>:

int SetSerialNum( int argc, char** argv )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
	uint32_t serialNum = strtol(argv[1], NULL, 10);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	3304      	adds	r3, #4
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	220a      	movs	r2, #10
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f018 ff7b 	bl	801dd18 <strtol>
 8004e22:	4603      	mov	r3, r0
 8004e24:	60fb      	str	r3, [r7, #12]

	StoreSerialNumberInEeprom( serialNum );
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f7fd fd3d 	bl	80028a6 <StoreSerialNumberInEeprom>

	UartPrintf("");
 8004e2c:	4803      	ldr	r0, [pc, #12]	; (8004e3c <SetSerialNum+0x34>)
 8004e2e:	f000 ff53 	bl	8005cd8 <UartPrintf>

	return 0;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	08021658 	.word	0x08021658

08004e40 <SetMediumAlarm>:

int SetMediumAlarm( int argc, char** argv )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
	UartPrintf("Med Alarm On\n");
 8004e4a:	4809      	ldr	r0, [pc, #36]	; (8004e70 <SetMediumAlarm+0x30>)
 8004e4c:	f000 ff44 	bl	8005cd8 <UartPrintf>
	BUZZER_Request( BUZZER_TONE_MED, 300, 300, 0, 10000 );
 8004e50:	f242 7310 	movw	r3, #10000	; 0x2710
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	2300      	movs	r3, #0
 8004e58:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e5c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004e60:	2001      	movs	r0, #1
 8004e62:	f7fc fe9b 	bl	8001b9c <BUZZER_Request>
	return 0;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	08021670 	.word	0x08021670

08004e74 <SetHightAlarm>:

int SetHightAlarm( int argc, char** argv )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
	UartPrintf("High Alarm On\n");
 8004e7e:	4809      	ldr	r0, [pc, #36]	; (8004ea4 <SetHightAlarm+0x30>)
 8004e80:	f000 ff2a 	bl	8005cd8 <UartPrintf>
	BUZZER_Request( BUZZER_TONE_HIGH, 250, 250, 300, 5000 );
 8004e84:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004e8e:	22fa      	movs	r2, #250	; 0xfa
 8004e90:	21fa      	movs	r1, #250	; 0xfa
 8004e92:	2002      	movs	r0, #2
 8004e94:	f7fc fe82 	bl	8001b9c <BUZZER_Request>
	return 0;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	08021680 	.word	0x08021680

08004ea8 <SetAlarmOff>:

int SetAlarmOff( int argc, char** argv )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
	UartPrintf("Alarm Off\n");
 8004eb2:	4808      	ldr	r0, [pc, #32]	; (8004ed4 <SetAlarmOff+0x2c>)
 8004eb4:	f000 ff10 	bl	8005cd8 <UartPrintf>
	BUZZER_Request( BUZZER_TONE_OFF, 0, 0, 0, 0 );
 8004eb8:	2300      	movs	r3, #0
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	f7fc fe6a 	bl	8001b9c <BUZZER_Request>
	return 0;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	08021690 	.word	0x08021690

08004ed8 <SetDacOutput>:

int SetDacOutput( int argc, char** argv )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]

	float fV = strtof(argv[1], NULL);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2100      	movs	r1, #0
 8004eea:	4618      	mov	r0, r3
 8004eec:	f018 fe36 	bl	801db5c <strtof>
 8004ef0:	ed87 0a03 	vstr	s0, [r7, #12]

	if(fV < 0.0 || fV > 3.3)
 8004ef4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ef8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f00:	d40a      	bmi.n	8004f18 <SetDacOutput+0x40>
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f7fb fb58 	bl	80005b8 <__aeabi_f2d>
 8004f08:	a311      	add	r3, pc, #68	; (adr r3, 8004f50 <SetDacOutput+0x78>)
 8004f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0e:	f7fb fe3b 	bl	8000b88 <__aeabi_dcmpgt>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <SetDacOutput+0x48>
	{
		UartPrintfWithoutPrompt("Bad DAC value: range allows from 0.0 to 3.3\n");
 8004f18:	480b      	ldr	r0, [pc, #44]	; (8004f48 <SetDacOutput+0x70>)
 8004f1a:	f000 ff23 	bl	8005d64 <UartPrintfWithoutPrompt>
 8004f1e:	e00b      	b.n	8004f38 <SetDacOutput+0x60>
	}
	else
	{
	   UartPrintfWithoutPrompt("Set DAC value to %4.2f Volt\n", fV);
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f7fb fb49 	bl	80005b8 <__aeabi_f2d>
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4808      	ldr	r0, [pc, #32]	; (8004f4c <SetDacOutput+0x74>)
 8004f2c:	f000 ff1a 	bl	8005d64 <UartPrintfWithoutPrompt>
	   Set_DAC_Voltage(fV);
 8004f30:	ed97 0a03 	vldr	s0, [r7, #12]
 8004f34:	f001 f9f0 	bl	8006318 <Set_DAC_Voltage>
	}
	return 0;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	f3af 8000 	nop.w
 8004f48:	0802169c 	.word	0x0802169c
 8004f4c:	080216cc 	.word	0x080216cc
 8004f50:	66666666 	.word	0x66666666
 8004f54:	400a6666 	.word	0x400a6666

08004f58 <GetDacOutput>:

int GetDacOutput( int argc, char** argv )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
	UartPrintfWithoutPrompt("What is DAC setting?\n");
 8004f62:	4805      	ldr	r0, [pc, #20]	; (8004f78 <GetDacOutput+0x20>)
 8004f64:	f000 fefe 	bl	8005d64 <UartPrintfWithoutPrompt>
	Get_DAC_Voltage();
 8004f68:	f001 fa2a 	bl	80063c0 <Get_DAC_Voltage>
	return 0;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	080216ec 	.word	0x080216ec

08004f7c <SetRTCTime>:

int SetRTCTime( int argc, char** argv )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
	uint8_t hr  = (uint8_t)strtol(argv[1], NULL, 10);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	220a      	movs	r2, #10
 8004f8e:	2100      	movs	r1, #0
 8004f90:	4618      	mov	r0, r3
 8004f92:	f018 fec1 	bl	801dd18 <strtol>
 8004f96:	4603      	mov	r3, r0
 8004f98:	73fb      	strb	r3, [r7, #15]
	uint8_t min = (uint8_t)strtol(argv[2], NULL, 10);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	3308      	adds	r3, #8
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	220a      	movs	r2, #10
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f018 feb7 	bl	801dd18 <strtol>
 8004faa:	4603      	mov	r3, r0
 8004fac:	73bb      	strb	r3, [r7, #14]
	uint8_t sec = (uint8_t)strtol(argv[3], NULL, 10);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	330c      	adds	r3, #12
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	220a      	movs	r2, #10
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f018 fead 	bl	801dd18 <strtol>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	737b      	strb	r3, [r7, #13]
	Set_Time( hr, min, sec);
 8004fc2:	7b7a      	ldrb	r2, [r7, #13]
 8004fc4:	7bb9      	ldrb	r1, [r7, #14]
 8004fc6:	7bfb      	ldrb	r3, [r7, #15]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f001 fa21 	bl	8006410 <Set_Time>
	return 0;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <SetRTCDate>:

int SetRTCDate( int argc, char** argv )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
	uint8_t day   = (uint8_t)strtol(argv[1], NULL, 10);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	220a      	movs	r2, #10
 8004fea:	2100      	movs	r1, #0
 8004fec:	4618      	mov	r0, r3
 8004fee:	f018 fe93 	bl	801dd18 <strtol>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	73fb      	strb	r3, [r7, #15]
	uint8_t month = (uint8_t)strtol(argv[2], NULL, 10);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	3308      	adds	r3, #8
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	220a      	movs	r2, #10
 8004ffe:	2100      	movs	r1, #0
 8005000:	4618      	mov	r0, r3
 8005002:	f018 fe89 	bl	801dd18 <strtol>
 8005006:	4603      	mov	r3, r0
 8005008:	73bb      	strb	r3, [r7, #14]
	uint8_t date  = (uint8_t)strtol(argv[3], NULL, 10);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	330c      	adds	r3, #12
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	220a      	movs	r2, #10
 8005012:	2100      	movs	r1, #0
 8005014:	4618      	mov	r0, r3
 8005016:	f018 fe7f 	bl	801dd18 <strtol>
 800501a:	4603      	mov	r3, r0
 800501c:	737b      	strb	r3, [r7, #13]
	uint8_t year  = (uint8_t)strtol(argv[4], NULL, 10);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	3310      	adds	r3, #16
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	220a      	movs	r2, #10
 8005026:	2100      	movs	r1, #0
 8005028:	4618      	mov	r0, r3
 800502a:	f018 fe75 	bl	801dd18 <strtol>
 800502e:	4603      	mov	r3, r0
 8005030:	733b      	strb	r3, [r7, #12]
	Set_Date( day, month, date, year);
 8005032:	7b3b      	ldrb	r3, [r7, #12]
 8005034:	7b7a      	ldrb	r2, [r7, #13]
 8005036:	7bb9      	ldrb	r1, [r7, #14]
 8005038:	7bf8      	ldrb	r0, [r7, #15]
 800503a:	f001 fa15 	bl	8006468 <Set_Date>
	return 0;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <DisplayTime>:

int DisplayTime( int argc, char** argv )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
	uint8_t onoff   = (uint8_t)strtol(argv[1], NULL, 10);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	3304      	adds	r3, #4
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	220a      	movs	r2, #10
 800505a:	2100      	movs	r1, #0
 800505c:	4618      	mov	r0, r3
 800505e:	f018 fe5b 	bl	801dd18 <strtol>
 8005062:	4603      	mov	r3, r0
 8005064:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <DisplayTime+0x2c>
	{
		gstModel.bDisplayTime = true;
 800506c:	4b05      	ldr	r3, [pc, #20]	; (8005084 <DisplayTime+0x3c>)
 800506e:	2201      	movs	r2, #1
 8005070:	715a      	strb	r2, [r3, #5]
 8005072:	e002      	b.n	800507a <DisplayTime+0x32>
	}
	else
	{
		gstModel.bDisplayTime = false;
 8005074:	4b03      	ldr	r3, [pc, #12]	; (8005084 <DisplayTime+0x3c>)
 8005076:	2200      	movs	r2, #0
 8005078:	715a      	strb	r2, [r3, #5]
	}
	return 0;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	20001d40 	.word	0x20001d40

08005088 <GetAdc1Values>:

int GetAdc1Values( int argc, char** argv )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
	uint16_t numReads = (uint16_t)strtol(argv[1], NULL, 10);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	3304      	adds	r3, #4
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	220a      	movs	r2, #10
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f018 fe3b 	bl	801dd18 <strtol>
 80050a2:	4603      	mov	r3, r0
 80050a4:	81fb      	strh	r3, [r7, #14]

	if ( numReads > 50000 )
 80050a6:	89fb      	ldrh	r3, [r7, #14]
 80050a8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d905      	bls.n	80050bc <GetAdc1Values+0x34>
	{
		UartPrintf( "Print Count Limit of 50000 \r\n" );
 80050b0:	4807      	ldr	r0, [pc, #28]	; (80050d0 <GetAdc1Values+0x48>)
 80050b2:	f000 fe11 	bl	8005cd8 <UartPrintf>
		return -1;
 80050b6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ba:	e004      	b.n	80050c6 <GetAdc1Values+0x3e>
	}

	PrintAdc1ChannelsSpecifiedNumberOfTimes( numReads );
 80050bc:	89fb      	ldrh	r3, [r7, #14]
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fc fb36 	bl	8001730 <PrintAdc1ChannelsSpecifiedNumberOfTimes>

    return 0;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	08021704 	.word	0x08021704

080050d4 <GetAdc3Values>:

int GetAdc3Values( int argc, char** argv )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
	uint16_t numReads = (uint16_t)strtol(argv[1], NULL, 10);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	3304      	adds	r3, #4
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	220a      	movs	r2, #10
 80050e6:	2100      	movs	r1, #0
 80050e8:	4618      	mov	r0, r3
 80050ea:	f018 fe15 	bl	801dd18 <strtol>
 80050ee:	4603      	mov	r3, r0
 80050f0:	81fb      	strh	r3, [r7, #14]

	if ( numReads > 50000 )
 80050f2:	89fb      	ldrh	r3, [r7, #14]
 80050f4:	f24c 3250 	movw	r2, #50000	; 0xc350
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d905      	bls.n	8005108 <GetAdc3Values+0x34>
	{
		UartPrintf( "Print Count Limit of 50000 \r\n" );
 80050fc:	4807      	ldr	r0, [pc, #28]	; (800511c <GetAdc3Values+0x48>)
 80050fe:	f000 fdeb 	bl	8005cd8 <UartPrintf>
		return -1;
 8005102:	f04f 33ff 	mov.w	r3, #4294967295
 8005106:	e004      	b.n	8005112 <GetAdc3Values+0x3e>
	}

	PrintAdc3ChannelsSpecifiedNumberOfTimes( numReads );
 8005108:	89fb      	ldrh	r3, [r7, #14]
 800510a:	4618      	mov	r0, r3
 800510c:	f7fc fc8c 	bl	8001a28 <PrintAdc3ChannelsSpecifiedNumberOfTimes>

    return 0;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	08021704 	.word	0x08021704

08005120 <GetAdc1OneTime>:

int GetAdc1OneTime( int argc, char** argv )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
	PrintAdc1Channels( );
 800512a:	f7fc fa6f 	bl	800160c <PrintAdc1Channels>

    return 0;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <GetAdc3OneTime>:

int GetAdc3OneTime( int argc, char** argv )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
	PrintAdc3Channels( );
 8005142:	f7fc fbd1 	bl	80018e8 <PrintAdc3Channels>

    return 0;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <ValveControl>:

int ValveControl( int argc, char** argv )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
	uint8_t valvenumber;
	bool status;

	if ( !strcmp(argv[2], "1") )
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	3308      	adds	r3, #8
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4923      	ldr	r1, [pc, #140]	; (80051f0 <ValveControl+0xa0>)
 8005162:	4618      	mov	r0, r3
 8005164:	f7fb f85c 	bl	8000220 <strcmp>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <ValveControl+0x22>
	{
		status = true;
 800516e:	2301      	movs	r3, #1
 8005170:	73fb      	strb	r3, [r7, #15]
	}

	if ( !strcmp(argv[2], "0") )
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	3308      	adds	r3, #8
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	491e      	ldr	r1, [pc, #120]	; (80051f4 <ValveControl+0xa4>)
 800517a:	4618      	mov	r0, r3
 800517c:	f7fb f850 	bl	8000220 <strcmp>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <ValveControl+0x3a>
	{
		status = false;
 8005186:	2300      	movs	r3, #0
 8005188:	73fb      	strb	r3, [r7, #15]
	}

	valvenumber = atoi( (const char*)argv[1] );
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	3304      	adds	r3, #4
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4618      	mov	r0, r3
 8005192:	f017 f8b3 	bl	801c2fc <atoi>
 8005196:	4603      	mov	r3, r0
 8005198:	73bb      	strb	r3, [r7, #14]

	int istatus = atoi( (const char*)argv[2] );
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	3308      	adds	r3, #8
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f017 f8ab 	bl	801c2fc <atoi>
 80051a6:	60b8      	str	r0, [r7, #8]

	if ( valvenumber > 8 )
 80051a8:	7bbb      	ldrb	r3, [r7, #14]
 80051aa:	2b08      	cmp	r3, #8
 80051ac:	d905      	bls.n	80051ba <ValveControl+0x6a>
	{
		UartPrintf( "Valve Number must be < 8\n" );
 80051ae:	4812      	ldr	r0, [pc, #72]	; (80051f8 <ValveControl+0xa8>)
 80051b0:	f000 fd92 	bl	8005cd8 <UartPrintf>
		return -1;
 80051b4:	f04f 33ff 	mov.w	r3, #4294967295
 80051b8:	e015      	b.n	80051e6 <ValveControl+0x96>
	}

	if ( istatus > 1 )
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	dd05      	ble.n	80051cc <ValveControl+0x7c>
	{
		UartPrintf( "Valve Enable Param must be 1 to enable or 0 to disable \n" );
 80051c0:	480e      	ldr	r0, [pc, #56]	; (80051fc <ValveControl+0xac>)
 80051c2:	f000 fd89 	bl	8005cd8 <UartPrintf>
		return -1;
 80051c6:	f04f 33ff 	mov.w	r3, #4294967295
 80051ca:	e00c      	b.n	80051e6 <ValveControl+0x96>
	}

	valve_control(valvenumber, status);
 80051cc:	7bfa      	ldrb	r2, [r7, #15]
 80051ce:	7bbb      	ldrb	r3, [r7, #14]
 80051d0:	4611      	mov	r1, r2
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fd fe1c 	bl	8002e10 <valve_control>
	UartPrintf("Valve %d Control Status %d\n", valvenumber, status);
 80051d8:	7bbb      	ldrb	r3, [r7, #14]
 80051da:	7bfa      	ldrb	r2, [r7, #15]
 80051dc:	4619      	mov	r1, r3
 80051de:	4808      	ldr	r0, [pc, #32]	; (8005200 <ValveControl+0xb0>)
 80051e0:	f000 fd7a 	bl	8005cd8 <UartPrintf>
	return 0;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	08021724 	.word	0x08021724
 80051f4:	08021728 	.word	0x08021728
 80051f8:	0802172c 	.word	0x0802172c
 80051fc:	08021748 	.word	0x08021748
 8005200:	08021784 	.word	0x08021784

08005204 <SetFanOnOff>:

int SetFanOnOff( int argc, char** argv )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
	uint8_t onoff = (uint16_t)strtol(argv[1], NULL, 10);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	3304      	adds	r3, #4
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	220a      	movs	r2, #10
 8005216:	2100      	movs	r1, #0
 8005218:	4618      	mov	r0, r3
 800521a:	f018 fd7d 	bl	801dd18 <strtol>
 800521e:	4603      	mov	r3, r0
 8005220:	73fb      	strb	r3, [r7, #15]

	FanOnOff( onoff );
 8005222:	7bfb      	ldrb	r3, [r7, #15]
 8005224:	4618      	mov	r0, r3
 8005226:	f7fe f891 	bl	800334c <FanOnOff>

	return 0;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <StopDebugPrinting>:

int StopDebugPrinting( int argc, char** argv )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
	uint8_t onoff = (uint16_t)strtol(argv[1], NULL, 10);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	3304      	adds	r3, #4
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	220a      	movs	r2, #10
 8005246:	2100      	movs	r1, #0
 8005248:	4618      	mov	r0, r3
 800524a:	f018 fd65 	bl	801dd18 <strtol>
 800524e:	4603      	mov	r3, r0
 8005250:	73fb      	strb	r3, [r7, #15]

	bStopDebugPrint = onoff;
 8005252:	7bfb      	ldrb	r3, [r7, #15]
 8005254:	2b00      	cmp	r3, #0
 8005256:	bf14      	ite	ne
 8005258:	2301      	movne	r3, #1
 800525a:	2300      	moveq	r3, #0
 800525c:	b2da      	uxtb	r2, r3
 800525e:	4b03      	ldr	r3, [pc, #12]	; (800526c <StopDebugPrinting+0x38>)
 8005260:	701a      	strb	r2, [r3, #0]

	return 0;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	20001b3a 	.word	0x20001b3a

08005270 <BatLedControl>:

int BatLedControl( int argc, char** argv )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
	uint8_t ledbat;
	bool status;

	if ( !strcmp(argv[2], "1") )
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	3308      	adds	r3, #8
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	491e      	ldr	r1, [pc, #120]	; (80052fc <BatLedControl+0x8c>)
 8005282:	4618      	mov	r0, r3
 8005284:	f7fa ffcc 	bl	8000220 <strcmp>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <BatLedControl+0x22>
	{
		status = true;
 800528e:	2301      	movs	r3, #1
 8005290:	73fb      	strb	r3, [r7, #15]
	}
	if ( !strcmp(argv[2], "0") )
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	3308      	adds	r3, #8
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4919      	ldr	r1, [pc, #100]	; (8005300 <BatLedControl+0x90>)
 800529a:	4618      	mov	r0, r3
 800529c:	f7fa ffc0 	bl	8000220 <strcmp>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <BatLedControl+0x3a>
	{
		status = false;
 80052a6:	2300      	movs	r3, #0
 80052a8:	73fb      	strb	r3, [r7, #15]
	}

	ledbat = atoi( (const char*)argv[1] );
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	3304      	adds	r3, #4
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f017 f823 	bl	801c2fc <atoi>
 80052b6:	4603      	mov	r3, r0
 80052b8:	73bb      	strb	r3, [r7, #14]

	int istatus = atoi( (const char*)argv[2] );
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	3308      	adds	r3, #8
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f017 f81b 	bl	801c2fc <atoi>
 80052c6:	60b8      	str	r0, [r7, #8]

	if ( istatus > 1 )
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	dd05      	ble.n	80052da <BatLedControl+0x6a>
	{
		UartPrintf( "Battery LED Enable Param must be 1 to turn on or 0 to turn off \n" );
 80052ce:	480d      	ldr	r0, [pc, #52]	; (8005304 <BatLedControl+0x94>)
 80052d0:	f000 fd02 	bl	8005cd8 <UartPrintf>
		return -1;
 80052d4:	f04f 33ff 	mov.w	r3, #4294967295
 80052d8:	e00c      	b.n	80052f4 <BatLedControl+0x84>
	}

	batleds_control(ledbat, status);
 80052da:	7bfa      	ldrb	r2, [r7, #15]
 80052dc:	7bbb      	ldrb	r3, [r7, #14]
 80052de:	4611      	mov	r1, r2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fd fe9d 	bl	8003020 <batleds_control>

	UartPrintf("Led Battery %d Control Status %d\n", ledbat, status);
 80052e6:	7bbb      	ldrb	r3, [r7, #14]
 80052e8:	7bfa      	ldrb	r2, [r7, #15]
 80052ea:	4619      	mov	r1, r3
 80052ec:	4806      	ldr	r0, [pc, #24]	; (8005308 <BatLedControl+0x98>)
 80052ee:	f000 fcf3 	bl	8005cd8 <UartPrintf>
	return 0;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	08021724 	.word	0x08021724
 8005300:	08021728 	.word	0x08021728
 8005304:	080217a0 	.word	0x080217a0
 8005308:	080217e4 	.word	0x080217e4

0800530c <LedAlarmControl>:


int LedAlarmControl ( int argc, char** argv )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
	uint8_t alarmled;
	bool status;

	if ( !strcmp(argv[2], "1") )
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	3308      	adds	r3, #8
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	491e      	ldr	r1, [pc, #120]	; (8005398 <LedAlarmControl+0x8c>)
 800531e:	4618      	mov	r0, r3
 8005320:	f7fa ff7e 	bl	8000220 <strcmp>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <LedAlarmControl+0x22>
	{
		status = true;
 800532a:	2301      	movs	r3, #1
 800532c:	73fb      	strb	r3, [r7, #15]
	}
	if ( !strcmp(argv[2], "0") )
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	3308      	adds	r3, #8
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4919      	ldr	r1, [pc, #100]	; (800539c <LedAlarmControl+0x90>)
 8005336:	4618      	mov	r0, r3
 8005338:	f7fa ff72 	bl	8000220 <strcmp>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <LedAlarmControl+0x3a>
	{
		status = false;
 8005342:	2300      	movs	r3, #0
 8005344:	73fb      	strb	r3, [r7, #15]
	}

	alarmled = atoi( (const char*)argv[1] );
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	3304      	adds	r3, #4
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f016 ffd5 	bl	801c2fc <atoi>
 8005352:	4603      	mov	r3, r0
 8005354:	73bb      	strb	r3, [r7, #14]

	int istatus = atoi( (const char*)argv[2] );
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	3308      	adds	r3, #8
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4618      	mov	r0, r3
 800535e:	f016 ffcd 	bl	801c2fc <atoi>
 8005362:	60b8      	str	r0, [r7, #8]

	if ( istatus > 1 )
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2b01      	cmp	r3, #1
 8005368:	dd05      	ble.n	8005376 <LedAlarmControl+0x6a>
	{
		UartPrintf( "Alarm LED Enable Param must be 1 to turn on or 0 to turn off \n" );
 800536a:	480d      	ldr	r0, [pc, #52]	; (80053a0 <LedAlarmControl+0x94>)
 800536c:	f000 fcb4 	bl	8005cd8 <UartPrintf>
		return -1;
 8005370:	f04f 33ff 	mov.w	r3, #4294967295
 8005374:	e00c      	b.n	8005390 <LedAlarmControl+0x84>
	}

	alarmleds_control(alarmled, status);
 8005376:	7bfa      	ldrb	r2, [r7, #15]
 8005378:	7bbb      	ldrb	r3, [r7, #14]
 800537a:	4611      	mov	r1, r2
 800537c:	4618      	mov	r0, r3
 800537e:	f7fd fe8d 	bl	800309c <alarmleds_control>

	UartPrintf("Alarm Led %d Control Status %d\n", alarmled, status);
 8005382:	7bbb      	ldrb	r3, [r7, #14]
 8005384:	7bfa      	ldrb	r2, [r7, #15]
 8005386:	4619      	mov	r1, r3
 8005388:	4806      	ldr	r0, [pc, #24]	; (80053a4 <LedAlarmControl+0x98>)
 800538a:	f000 fca5 	bl	8005cd8 <UartPrintf>
	return 0;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	08021724 	.word	0x08021724
 800539c:	08021728 	.word	0x08021728
 80053a0:	08021808 	.word	0x08021808
 80053a4:	08021848 	.word	0x08021848

080053a8 <CompressorControl>:


int CompressorControl( int argc, char** argv )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
	uint8_t compressorEn;

	compressorEn = atoi( (const char*)argv[1] );
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	3304      	adds	r3, #4
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f016 ff9f 	bl	801c2fc <atoi>
 80053be:	4603      	mov	r3, r0
 80053c0:	73fb      	strb	r3, [r7, #15]
	if ( compressorEn > 1 )
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d905      	bls.n	80053d4 <CompressorControl+0x2c>
	{
		UartPrintf( "Compressor Enable Param must be 1 to enable or 0 to disable \n" );
 80053c8:	480c      	ldr	r0, [pc, #48]	; (80053fc <CompressorControl+0x54>)
 80053ca:	f000 fc85 	bl	8005cd8 <UartPrintf>
		return -1;
 80053ce:	f04f 33ff 	mov.w	r3, #4294967295
 80053d2:	e00e      	b.n	80053f2 <CompressorControl+0x4a>
	}
	compressor_control(compressorEn);
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bf14      	ite	ne
 80053da:	2301      	movne	r3, #1
 80053dc:	2300      	moveq	r3, #0
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fd fe8b 	bl	80030fc <compressor_control>
	UartPrintf( "Compressor Power set to %d\n", compressorEn );
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	4619      	mov	r1, r3
 80053ea:	4805      	ldr	r0, [pc, #20]	; (8005400 <CompressorControl+0x58>)
 80053ec:	f000 fc74 	bl	8005cd8 <UartPrintf>
	return 0;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	08021868 	.word	0x08021868
 8005400:	080218a8 	.word	0x080218a8

08005404 <MembranePSControl>:

int MembranePSControl( int argc, char** argv )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
	uint8_t membranepsEn;

	membranepsEn = atoi( (const char*)argv[1] );
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	3304      	adds	r3, #4
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f016 ff71 	bl	801c2fc <atoi>
 800541a:	4603      	mov	r3, r0
 800541c:	73fb      	strb	r3, [r7, #15]
	if ( membranepsEn > 1 )
 800541e:	7bfb      	ldrb	r3, [r7, #15]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d905      	bls.n	8005430 <MembranePSControl+0x2c>
	{
		UartPrintf( "Membrane PS Enable Param must be 1 to enable or 0 to disable \n" );
 8005424:	480c      	ldr	r0, [pc, #48]	; (8005458 <MembranePSControl+0x54>)
 8005426:	f000 fc57 	bl	8005cd8 <UartPrintf>
		return -1;
 800542a:	f04f 33ff 	mov.w	r3, #4294967295
 800542e:	e00e      	b.n	800544e <MembranePSControl+0x4a>
	}

	MembranePS_control(membranepsEn);
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	2b00      	cmp	r3, #0
 8005434:	bf14      	ite	ne
 8005436:	2301      	movne	r3, #1
 8005438:	2300      	moveq	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	4618      	mov	r0, r3
 800543e:	f7fd fe87 	bl	8003150 <MembranePS_control>
	UartPrintf( "Membrane Power Supply set to %d\n", membranepsEn );
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	4619      	mov	r1, r3
 8005446:	4805      	ldr	r0, [pc, #20]	; (800545c <MembranePSControl+0x58>)
 8005448:	f000 fc46 	bl	8005cd8 <UartPrintf>
	return 0;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	080218c4 	.word	0x080218c4
 800545c:	08021904 	.word	0x08021904

08005460 <DisplayPSControl>:

int DisplayPSControl( int argc, char** argv )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
	uint8_t displaypsEn;

	displaypsEn = atoi( (const char*)argv[1] );
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	3304      	adds	r3, #4
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4618      	mov	r0, r3
 8005472:	f016 ff43 	bl	801c2fc <atoi>
 8005476:	4603      	mov	r3, r0
 8005478:	73fb      	strb	r3, [r7, #15]
	if ( displaypsEn > 1 )
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d905      	bls.n	800548c <DisplayPSControl+0x2c>
	{
		UartPrintf( "Display Power Control Param must be 1 to enable or 0 to disable \n" );
 8005480:	480c      	ldr	r0, [pc, #48]	; (80054b4 <DisplayPSControl+0x54>)
 8005482:	f000 fc29 	bl	8005cd8 <UartPrintf>
		return -1;
 8005486:	f04f 33ff 	mov.w	r3, #4294967295
 800548a:	e00e      	b.n	80054aa <DisplayPSControl+0x4a>
	}

	displayPS_control(displaypsEn);
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	2b00      	cmp	r3, #0
 8005490:	bf14      	ite	ne
 8005492:	2301      	movne	r3, #1
 8005494:	2300      	moveq	r3, #0
 8005496:	b2db      	uxtb	r3, r3
 8005498:	4618      	mov	r0, r3
 800549a:	f7fd fe6b 	bl	8003174 <displayPS_control>
	UartPrintf( "Display Power Control set to %d\n", displaypsEn );
 800549e:	7bfb      	ldrb	r3, [r7, #15]
 80054a0:	4619      	mov	r1, r3
 80054a2:	4805      	ldr	r0, [pc, #20]	; (80054b8 <DisplayPSControl+0x58>)
 80054a4:	f000 fc18 	bl	8005cd8 <UartPrintf>
	return 0;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	08021928 	.word	0x08021928
 80054b8:	0802196c 	.word	0x0802196c

080054bc <SyncOutControl>:


int SyncOutControl ( int argc, char** argv )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
	uint8_t syncOutEn;

		syncOutEn = atoi( (const char*)argv[1] );
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	3304      	adds	r3, #4
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f016 ff15 	bl	801c2fc <atoi>
 80054d2:	4603      	mov	r3, r0
 80054d4:	73fb      	strb	r3, [r7, #15]
		if ( syncOutEn > 1 )
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d905      	bls.n	80054e8 <SyncOutControl+0x2c>
		{
			UartPrintf( "Synch Output Enable Param must be 1 to enable or 0 to disable \n" );
 80054dc:	480c      	ldr	r0, [pc, #48]	; (8005510 <SyncOutControl+0x54>)
 80054de:	f000 fbfb 	bl	8005cd8 <UartPrintf>
			return -1;
 80054e2:	f04f 33ff 	mov.w	r3, #4294967295
 80054e6:	e00e      	b.n	8005506 <SyncOutControl+0x4a>
		}

		SynchOut(syncOutEn);
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	bf14      	ite	ne
 80054ee:	2301      	movne	r3, #1
 80054f0:	2300      	moveq	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fd fc79 	bl	8002dec <SynchOut>
		UartPrintf("Sync Output Control Status %d\n", syncOutEn);
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	4619      	mov	r1, r3
 80054fe:	4805      	ldr	r0, [pc, #20]	; (8005514 <SyncOutControl+0x58>)
 8005500:	f000 fbea 	bl	8005cd8 <UartPrintf>
		return 0;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	08021990 	.word	0x08021990
 8005514:	080219d0 	.word	0x080219d0

08005518 <pcbpowerrelayControl>:

int pcbpowerrelayControl( int argc, char** argv )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
	uint8_t powerpcbEn;

	powerpcbEn = atoi( (const char*)argv[1] );
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	3304      	adds	r3, #4
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4618      	mov	r0, r3
 800552a:	f016 fee7 	bl	801c2fc <atoi>
 800552e:	4603      	mov	r3, r0
 8005530:	73fb      	strb	r3, [r7, #15]
	if ( powerpcbEn > 1 )
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d905      	bls.n	8005544 <pcbpowerrelayControl+0x2c>
	{
		UartPrintf( "Power PCB Relay Enable Param must be 1 to enable or 0 to disable \n" );
 8005538:	480c      	ldr	r0, [pc, #48]	; (800556c <pcbpowerrelayControl+0x54>)
 800553a:	f000 fbcd 	bl	8005cd8 <UartPrintf>
		return -1;
 800553e:	f04f 33ff 	mov.w	r3, #4294967295
 8005542:	e00e      	b.n	8005562 <pcbpowerrelayControl+0x4a>
	}

	powerpcb_control(powerpcbEn);
 8005544:	7bfb      	ldrb	r3, [r7, #15]
 8005546:	2b00      	cmp	r3, #0
 8005548:	bf14      	ite	ne
 800554a:	2301      	movne	r3, #1
 800554c:	2300      	moveq	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	4618      	mov	r0, r3
 8005552:	f7fd fe21 	bl	8003198 <powerpcb_control>
	UartPrintf("Power PCB Relay Control Status %d\n", powerpcbEn);
 8005556:	7bfb      	ldrb	r3, [r7, #15]
 8005558:	4619      	mov	r1, r3
 800555a:	4805      	ldr	r0, [pc, #20]	; (8005570 <pcbpowerrelayControl+0x58>)
 800555c:	f000 fbbc 	bl	8005cd8 <UartPrintf>
	return 0;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	080219f0 	.word	0x080219f0
 8005570:	08021a34 	.word	0x08021a34

08005574 <pfControl>:
	return 0;
}


int pfControl( int argc, char** argv )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
	uint8_t pfEn;

	pfEn = atoi( (const char*)argv[1] );
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	3304      	adds	r3, #4
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4618      	mov	r0, r3
 8005586:	f016 feb9 	bl	801c2fc <atoi>
 800558a:	4603      	mov	r3, r0
 800558c:	73fb      	strb	r3, [r7, #15]
	if ( pfEn> 1 )
 800558e:	7bfb      	ldrb	r3, [r7, #15]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d905      	bls.n	80055a0 <pfControl+0x2c>
	{
		UartPrintf( "Power Factor Module Enable Param must be 1 to enable or 0 to disable \n" );
 8005594:	480c      	ldr	r0, [pc, #48]	; (80055c8 <pfControl+0x54>)
 8005596:	f000 fb9f 	bl	8005cd8 <UartPrintf>
		return -1;
 800559a:	f04f 33ff 	mov.w	r3, #4294967295
 800559e:	e00e      	b.n	80055be <pfControl+0x4a>
	}

	PF_control(pfEn);
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	bf14      	ite	ne
 80055a6:	2301      	movne	r3, #1
 80055a8:	2300      	moveq	r3, #0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7fd fe05 	bl	80031bc <PF_control>
	UartPrintf("Power Factor Module Enable Status is %d\n", pfEn);
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	4619      	mov	r1, r3
 80055b6:	4805      	ldr	r0, [pc, #20]	; (80055cc <pfControl+0x58>)
 80055b8:	f000 fb8e 	bl	8005cd8 <UartPrintf>
	return 0;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	08021ab8 	.word	0x08021ab8
 80055cc:	08021b00 	.word	0x08021b00

080055d0 <wdiControl>:


int wdiControl( int argc, char** argv )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
	uint8_t status;

	status = atoi( (const char*)argv[1] );
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	3304      	adds	r3, #4
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f016 fe8b 	bl	801c2fc <atoi>
 80055e6:	4603      	mov	r3, r0
 80055e8:	73fb      	strb	r3, [r7, #15]
	if ( status > 1 )
 80055ea:	7bfb      	ldrb	r3, [r7, #15]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d905      	bls.n	80055fc <wdiControl+0x2c>
	{
		UartPrintf( "Watchdog Timer Input Param must be 1 to enable or 0 to disable \n" );
 80055f0:	480b      	ldr	r0, [pc, #44]	; (8005620 <wdiControl+0x50>)
 80055f2:	f000 fb71 	bl	8005cd8 <UartPrintf>
		return -1;
 80055f6:	f04f 33ff 	mov.w	r3, #4294967295
 80055fa:	e00d      	b.n	8005618 <wdiControl+0x48>
	}

	wdi_flag = status;
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	bf14      	ite	ne
 8005602:	2301      	movne	r3, #1
 8005604:	2300      	moveq	r3, #0
 8005606:	b2da      	uxtb	r2, r3
 8005608:	4b06      	ldr	r3, [pc, #24]	; (8005624 <wdiControl+0x54>)
 800560a:	701a      	strb	r2, [r3, #0]
	UartPrintf("Watchdog Timer Input set to %d\n", status);
 800560c:	7bfb      	ldrb	r3, [r7, #15]
 800560e:	4619      	mov	r1, r3
 8005610:	4805      	ldr	r0, [pc, #20]	; (8005628 <wdiControl+0x58>)
 8005612:	f000 fb61 	bl	8005cd8 <UartPrintf>
	return 0;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	08021b2c 	.word	0x08021b2c
 8005624:	20001b4e 	.word	0x20001b4e
 8005628:	08021b70 	.word	0x08021b70

0800562c <pfcRlyControl>:

int pfcRlyControl( int argc, char** argv )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
	uint8_t pfcRlyEn;

	pfcRlyEn = atoi( (const char*)argv[1] );
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	3304      	adds	r3, #4
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	f016 fe5d 	bl	801c2fc <atoi>
 8005642:	4603      	mov	r3, r0
 8005644:	73fb      	strb	r3, [r7, #15]
	if ( pfcRlyEn > 1 )
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d905      	bls.n	8005658 <pfcRlyControl+0x2c>
	{
		UartPrintf( "Power Factor Relay Enable Param must be 1 to enable or 0 to disable \n" );
 800564c:	480c      	ldr	r0, [pc, #48]	; (8005680 <pfcRlyControl+0x54>)
 800564e:	f000 fb43 	bl	8005cd8 <UartPrintf>
		return -1;
 8005652:	f04f 33ff 	mov.w	r3, #4294967295
 8005656:	e00e      	b.n	8005676 <pfcRlyControl+0x4a>
	}

	PFC_RLY_control(pfcRlyEn);
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	2b00      	cmp	r3, #0
 800565c:	bf14      	ite	ne
 800565e:	2301      	movne	r3, #1
 8005660:	2300      	moveq	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	4618      	mov	r0, r3
 8005666:	f7fd fdbb 	bl	80031e0 <PFC_RLY_control>
	UartPrintf("Power Factor Relay Enable Status is %d\n", pfcRlyEn);
 800566a:	7bfb      	ldrb	r3, [r7, #15]
 800566c:	4619      	mov	r1, r3
 800566e:	4805      	ldr	r0, [pc, #20]	; (8005684 <pfcRlyControl+0x58>)
 8005670:	f000 fb32 	bl	8005cd8 <UartPrintf>
	return 0;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	08021b90 	.word	0x08021b90
 8005684:	08021bd8 	.word	0x08021bd8

08005688 <BlowerSpeedCtrl>:


int BlowerSpeedCtrl ( int argc, char** argv )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
	uint16_t speed;

	speed = atoi( argv[1] );   //speed = atoi( (const char*)argv[1] );
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	3304      	adds	r3, #4
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f016 fe2f 	bl	801c2fc <atoi>
 800569e:	4603      	mov	r3, r0
 80056a0:	81fb      	strh	r3, [r7, #14]
	if ( speed > 4095 )
 80056a2:	89fb      	ldrh	r3, [r7, #14]
 80056a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a8:	d305      	bcc.n	80056b6 <BlowerSpeedCtrl+0x2e>
	{
		UartPrintf( "Blower max speed Param must be less than 4096\n" );
 80056aa:	480a      	ldr	r0, [pc, #40]	; (80056d4 <BlowerSpeedCtrl+0x4c>)
 80056ac:	f000 fb14 	bl	8005cd8 <UartPrintf>
		return -1;
 80056b0:	f04f 33ff 	mov.w	r3, #4294967295
 80056b4:	e009      	b.n	80056ca <BlowerSpeedCtrl+0x42>
	}
	UartPrintf("Blower Speed Control will be set to  %u\n", speed);
 80056b6:	89fb      	ldrh	r3, [r7, #14]
 80056b8:	4619      	mov	r1, r3
 80056ba:	4807      	ldr	r0, [pc, #28]	; (80056d8 <BlowerSpeedCtrl+0x50>)
 80056bc:	f000 fb0c 	bl	8005cd8 <UartPrintf>
	BlowerDAC(speed);
 80056c0:	89fb      	ldrh	r3, [r7, #14]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fd fd9e 	bl	8003204 <BlowerDAC>

	return 0;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	08021c00 	.word	0x08021c00
 80056d8:	08021c30 	.word	0x08021c30

080056dc <BlowerCtrl>:

int BlowerCtrl ( int argc, char** argv )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
	uint16_t dacval;

	dacval = atoi( (const char*)argv[1] );
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	3304      	adds	r3, #4
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f016 fe05 	bl	801c2fc <atoi>
 80056f2:	4603      	mov	r3, r0
 80056f4:	81fb      	strh	r3, [r7, #14]
	if ( dacval > 4095 )
 80056f6:	89fb      	ldrh	r3, [r7, #14]
 80056f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056fc:	d305      	bcc.n	800570a <BlowerCtrl+0x2e>
	{
		UartPrintf( "Blower DAC Value must be 0 to 4095\n" );
 80056fe:	480a      	ldr	r0, [pc, #40]	; (8005728 <BlowerCtrl+0x4c>)
 8005700:	f000 faea 	bl	8005cd8 <UartPrintf>
		return -1;
 8005704:	f04f 33ff 	mov.w	r3, #4294967295
 8005708:	e009      	b.n	800571e <BlowerCtrl+0x42>
	}

	BlowerControl(dacval);
 800570a:	89fb      	ldrh	r3, [r7, #14]
 800570c:	4618      	mov	r0, r3
 800570e:	f7fd fd8b 	bl	8003228 <BlowerControl>
	UartPrintf("Blower Control Status set to %d\n", dacval);
 8005712:	89fb      	ldrh	r3, [r7, #14]
 8005714:	4619      	mov	r1, r3
 8005716:	4805      	ldr	r0, [pc, #20]	; (800572c <BlowerCtrl+0x50>)
 8005718:	f000 fade 	bl	8005cd8 <UartPrintf>
	return 0;
 800571c:	2300      	movs	r3, #0

}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	08021c5c 	.word	0x08021c5c
 800572c:	08021c80 	.word	0x08021c80

08005730 <Bloweroff>:

int Bloweroff ( int argc, char** argv )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
	BlowerOff();
 800573a:	f7fd fdcb 	bl	80032d4 <BlowerOff>
	return 0;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <CprtseqON>:

int CprtseqON ( int argc, char** argv )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
	cprtPowerOnSequence();
 8005752:	f7fd fe33 	bl	80033bc <cprtPowerOnSequence>
	return 0;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <CprtseqOFF>:

int CprtseqOFF ( int argc, char** argv )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
	cprtPowerOffSequence();
 800576a:	f7fd fee7 	bl	800353c <cprtPowerOffSequence>
	return 0;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <RegisterAllCommands>:


void RegisterAllCommands()
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
    InterpRegister( "initlog",         InitLog,            1, 1 );
 800577c:	2301      	movs	r3, #1
 800577e:	2201      	movs	r2, #1
 8005780:	4976      	ldr	r1, [pc, #472]	; (800595c <RegisterAllCommands+0x1e4>)
 8005782:	4877      	ldr	r0, [pc, #476]	; (8005960 <RegisterAllCommands+0x1e8>)
 8005784:	f7ff f8ce 	bl	8004924 <InterpRegister>
    InterpRegister( "setmfgdate",      SetMfgDate,         2, 2 );
 8005788:	2302      	movs	r3, #2
 800578a:	2202      	movs	r2, #2
 800578c:	4975      	ldr	r1, [pc, #468]	; (8005964 <RegisterAllCommands+0x1ec>)
 800578e:	4876      	ldr	r0, [pc, #472]	; (8005968 <RegisterAllCommands+0x1f0>)
 8005790:	f7ff f8c8 	bl	8004924 <InterpRegister>
    InterpRegister( "getmfgdate",      GetMfgDate,         1, 1 );
 8005794:	2301      	movs	r3, #1
 8005796:	2201      	movs	r2, #1
 8005798:	4974      	ldr	r1, [pc, #464]	; (800596c <RegisterAllCommands+0x1f4>)
 800579a:	4875      	ldr	r0, [pc, #468]	; (8005970 <RegisterAllCommands+0x1f8>)
 800579c:	f7ff f8c2 	bl	8004924 <InterpRegister>
    InterpRegister( "setserialnum",    SetSerialNum,       2, 2 );
 80057a0:	2302      	movs	r3, #2
 80057a2:	2202      	movs	r2, #2
 80057a4:	4973      	ldr	r1, [pc, #460]	; (8005974 <RegisterAllCommands+0x1fc>)
 80057a6:	4874      	ldr	r0, [pc, #464]	; (8005978 <RegisterAllCommands+0x200>)
 80057a8:	f7ff f8bc 	bl	8004924 <InterpRegister>
    InterpRegister( "getserialnum",    GetSerialNum,       1, 1 );
 80057ac:	2301      	movs	r3, #1
 80057ae:	2201      	movs	r2, #1
 80057b0:	4972      	ldr	r1, [pc, #456]	; (800597c <RegisterAllCommands+0x204>)
 80057b2:	4873      	ldr	r0, [pc, #460]	; (8005980 <RegisterAllCommands+0x208>)
 80057b4:	f7ff f8b6 	bl	8004924 <InterpRegister>
    InterpRegister( "ledallblk",       SetAllLedBlink,     1, 1 );
 80057b8:	2301      	movs	r3, #1
 80057ba:	2201      	movs	r2, #1
 80057bc:	4971      	ldr	r1, [pc, #452]	; (8005984 <RegisterAllCommands+0x20c>)
 80057be:	4872      	ldr	r0, [pc, #456]	; (8005988 <RegisterAllCommands+0x210>)
 80057c0:	f7ff f8b0 	bl	8004924 <InterpRegister>
    InterpRegister( "ledallon",        SetAllLedOn,        1, 1 );
 80057c4:	2301      	movs	r3, #1
 80057c6:	2201      	movs	r2, #1
 80057c8:	4970      	ldr	r1, [pc, #448]	; (800598c <RegisterAllCommands+0x214>)
 80057ca:	4871      	ldr	r0, [pc, #452]	; (8005990 <RegisterAllCommands+0x218>)
 80057cc:	f7ff f8aa 	bl	8004924 <InterpRegister>
    InterpRegister( "ledalloff",       SetAllLedOff,       1, 1 );
 80057d0:	2301      	movs	r3, #1
 80057d2:	2201      	movs	r2, #1
 80057d4:	496f      	ldr	r1, [pc, #444]	; (8005994 <RegisterAllCommands+0x21c>)
 80057d6:	4870      	ldr	r0, [pc, #448]	; (8005998 <RegisterAllCommands+0x220>)
 80057d8:	f7ff f8a4 	bl	8004924 <InterpRegister>

    InterpRegister( "alarmmed",        SetMediumAlarm,     1, 1 );
 80057dc:	2301      	movs	r3, #1
 80057de:	2201      	movs	r2, #1
 80057e0:	496e      	ldr	r1, [pc, #440]	; (800599c <RegisterAllCommands+0x224>)
 80057e2:	486f      	ldr	r0, [pc, #444]	; (80059a0 <RegisterAllCommands+0x228>)
 80057e4:	f7ff f89e 	bl	8004924 <InterpRegister>
    InterpRegister( "alarmhigh",       SetHightAlarm,      1, 1 );
 80057e8:	2301      	movs	r3, #1
 80057ea:	2201      	movs	r2, #1
 80057ec:	496d      	ldr	r1, [pc, #436]	; (80059a4 <RegisterAllCommands+0x22c>)
 80057ee:	486e      	ldr	r0, [pc, #440]	; (80059a8 <RegisterAllCommands+0x230>)
 80057f0:	f7ff f898 	bl	8004924 <InterpRegister>
    InterpRegister( "alarmoff",        SetAlarmOff,        1, 1 );
 80057f4:	2301      	movs	r3, #1
 80057f6:	2201      	movs	r2, #1
 80057f8:	496c      	ldr	r1, [pc, #432]	; (80059ac <RegisterAllCommands+0x234>)
 80057fa:	486d      	ldr	r0, [pc, #436]	; (80059b0 <RegisterAllCommands+0x238>)
 80057fc:	f7ff f892 	bl	8004924 <InterpRegister>

    InterpRegister( "setdac",         SetDacOutput,        2, 2 );
 8005800:	2302      	movs	r3, #2
 8005802:	2202      	movs	r2, #2
 8005804:	496b      	ldr	r1, [pc, #428]	; (80059b4 <RegisterAllCommands+0x23c>)
 8005806:	486c      	ldr	r0, [pc, #432]	; (80059b8 <RegisterAllCommands+0x240>)
 8005808:	f7ff f88c 	bl	8004924 <InterpRegister>
    InterpRegister( "getdac",         GetDacOutput,        1, 1 );
 800580c:	2301      	movs	r3, #1
 800580e:	2201      	movs	r2, #1
 8005810:	496a      	ldr	r1, [pc, #424]	; (80059bc <RegisterAllCommands+0x244>)
 8005812:	486b      	ldr	r0, [pc, #428]	; (80059c0 <RegisterAllCommands+0x248>)
 8005814:	f7ff f886 	bl	8004924 <InterpRegister>

    InterpRegister( "settime",         SetRTCTime,          4, 4 );
 8005818:	2304      	movs	r3, #4
 800581a:	2204      	movs	r2, #4
 800581c:	4969      	ldr	r1, [pc, #420]	; (80059c4 <RegisterAllCommands+0x24c>)
 800581e:	486a      	ldr	r0, [pc, #424]	; (80059c8 <RegisterAllCommands+0x250>)
 8005820:	f7ff f880 	bl	8004924 <InterpRegister>
    InterpRegister( "setdate",         SetRTCDate,          5, 5 );
 8005824:	2305      	movs	r3, #5
 8005826:	2205      	movs	r2, #5
 8005828:	4968      	ldr	r1, [pc, #416]	; (80059cc <RegisterAllCommands+0x254>)
 800582a:	4869      	ldr	r0, [pc, #420]	; (80059d0 <RegisterAllCommands+0x258>)
 800582c:	f7ff f87a 	bl	8004924 <InterpRegister>

    InterpRegister( "disptime",        DisplayTime,         2, 2 );
 8005830:	2302      	movs	r3, #2
 8005832:	2202      	movs	r2, #2
 8005834:	4967      	ldr	r1, [pc, #412]	; (80059d4 <RegisterAllCommands+0x25c>)
 8005836:	4868      	ldr	r0, [pc, #416]	; (80059d8 <RegisterAllCommands+0x260>)
 8005838:	f7ff f874 	bl	8004924 <InterpRegister>
    InterpRegister( "getadc1",         GetAdc1Values,       2, 2 );
 800583c:	2302      	movs	r3, #2
 800583e:	2202      	movs	r2, #2
 8005840:	4966      	ldr	r1, [pc, #408]	; (80059dc <RegisterAllCommands+0x264>)
 8005842:	4867      	ldr	r0, [pc, #412]	; (80059e0 <RegisterAllCommands+0x268>)
 8005844:	f7ff f86e 	bl	8004924 <InterpRegister>
    InterpRegister( "getadc3",         GetAdc3Values,       2, 2 );
 8005848:	2302      	movs	r3, #2
 800584a:	2202      	movs	r2, #2
 800584c:	4965      	ldr	r1, [pc, #404]	; (80059e4 <RegisterAllCommands+0x26c>)
 800584e:	4866      	ldr	r0, [pc, #408]	; (80059e8 <RegisterAllCommands+0x270>)
 8005850:	f7ff f868 	bl	8004924 <InterpRegister>
    InterpRegister( "adc1",            GetAdc1OneTime,      1, 1 );
 8005854:	2301      	movs	r3, #1
 8005856:	2201      	movs	r2, #1
 8005858:	4964      	ldr	r1, [pc, #400]	; (80059ec <RegisterAllCommands+0x274>)
 800585a:	4865      	ldr	r0, [pc, #404]	; (80059f0 <RegisterAllCommands+0x278>)
 800585c:	f7ff f862 	bl	8004924 <InterpRegister>
    InterpRegister( "adc3",            GetAdc3OneTime,      1, 1 );
 8005860:	2301      	movs	r3, #1
 8005862:	2201      	movs	r2, #1
 8005864:	4963      	ldr	r1, [pc, #396]	; (80059f4 <RegisterAllCommands+0x27c>)
 8005866:	4864      	ldr	r0, [pc, #400]	; (80059f8 <RegisterAllCommands+0x280>)
 8005868:	f7ff f85c 	bl	8004924 <InterpRegister>
    InterpRegister( "setfan",         SetFanOnOff,          2, 2 );
 800586c:	2302      	movs	r3, #2
 800586e:	2202      	movs	r2, #2
 8005870:	4962      	ldr	r1, [pc, #392]	; (80059fc <RegisterAllCommands+0x284>)
 8005872:	4863      	ldr	r0, [pc, #396]	; (8005a00 <RegisterAllCommands+0x288>)
 8005874:	f7ff f856 	bl	8004924 <InterpRegister>
    InterpRegister( "setprt",  	  	  SetPMprints,          2, 3 );
 8005878:	2303      	movs	r3, #3
 800587a:	2202      	movs	r2, #2
 800587c:	4961      	ldr	r1, [pc, #388]	; (8005a04 <RegisterAllCommands+0x28c>)
 800587e:	4862      	ldr	r0, [pc, #392]	; (8005a08 <RegisterAllCommands+0x290>)
 8005880:	f7ff f850 	bl	8004924 <InterpRegister>

    //commands from Cprtfunctions code
    InterpRegister( "valvectrl",      ValveControl,           3, 3 );
 8005884:	2303      	movs	r3, #3
 8005886:	2203      	movs	r2, #3
 8005888:	4960      	ldr	r1, [pc, #384]	; (8005a0c <RegisterAllCommands+0x294>)
 800588a:	4861      	ldr	r0, [pc, #388]	; (8005a10 <RegisterAllCommands+0x298>)
 800588c:	f7ff f84a 	bl	8004924 <InterpRegister>
	InterpRegister( "ledbatctrl",     BatLedControl,          3, 3 );
 8005890:	2303      	movs	r3, #3
 8005892:	2203      	movs	r2, #3
 8005894:	495f      	ldr	r1, [pc, #380]	; (8005a14 <RegisterAllCommands+0x29c>)
 8005896:	4860      	ldr	r0, [pc, #384]	; (8005a18 <RegisterAllCommands+0x2a0>)
 8005898:	f7ff f844 	bl	8004924 <InterpRegister>
	InterpRegister( "ledalarmctrl",   LedAlarmControl,        3, 3 );
 800589c:	2303      	movs	r3, #3
 800589e:	2203      	movs	r2, #3
 80058a0:	495e      	ldr	r1, [pc, #376]	; (8005a1c <RegisterAllCommands+0x2a4>)
 80058a2:	485f      	ldr	r0, [pc, #380]	; (8005a20 <RegisterAllCommands+0x2a8>)
 80058a4:	f7ff f83e 	bl	8004924 <InterpRegister>
	InterpRegister( "compressorctrl", CompressorControl,      2, 2 );
 80058a8:	2302      	movs	r3, #2
 80058aa:	2202      	movs	r2, #2
 80058ac:	495d      	ldr	r1, [pc, #372]	; (8005a24 <RegisterAllCommands+0x2ac>)
 80058ae:	485e      	ldr	r0, [pc, #376]	; (8005a28 <RegisterAllCommands+0x2b0>)
 80058b0:	f7ff f838 	bl	8004924 <InterpRegister>
	InterpRegister( "membranepsctrl", MembranePSControl,      2, 2 );
 80058b4:	2302      	movs	r3, #2
 80058b6:	2202      	movs	r2, #2
 80058b8:	495c      	ldr	r1, [pc, #368]	; (8005a2c <RegisterAllCommands+0x2b4>)
 80058ba:	485d      	ldr	r0, [pc, #372]	; (8005a30 <RegisterAllCommands+0x2b8>)
 80058bc:	f7ff f832 	bl	8004924 <InterpRegister>
	InterpRegister( "displaypsctrl",  DisplayPSControl,       2, 2 );
 80058c0:	2302      	movs	r3, #2
 80058c2:	2202      	movs	r2, #2
 80058c4:	495b      	ldr	r1, [pc, #364]	; (8005a34 <RegisterAllCommands+0x2bc>)
 80058c6:	485c      	ldr	r0, [pc, #368]	; (8005a38 <RegisterAllCommands+0x2c0>)
 80058c8:	f7ff f82c 	bl	8004924 <InterpRegister>
	InterpRegister( "syncoutctrl",    SyncOutControl,         2, 2 );
 80058cc:	2302      	movs	r3, #2
 80058ce:	2202      	movs	r2, #2
 80058d0:	495a      	ldr	r1, [pc, #360]	; (8005a3c <RegisterAllCommands+0x2c4>)
 80058d2:	485b      	ldr	r0, [pc, #364]	; (8005a40 <RegisterAllCommands+0x2c8>)
 80058d4:	f7ff f826 	bl	8004924 <InterpRegister>
	InterpRegister( "powerpcbctrl",   pcbpowerrelayControl,   2, 2 );
 80058d8:	2302      	movs	r3, #2
 80058da:	2202      	movs	r2, #2
 80058dc:	4959      	ldr	r1, [pc, #356]	; (8005a44 <RegisterAllCommands+0x2cc>)
 80058de:	485a      	ldr	r0, [pc, #360]	; (8005a48 <RegisterAllCommands+0x2d0>)
 80058e0:	f7ff f820 	bl	8004924 <InterpRegister>
	InterpRegister( "pfctrl",   	  pfControl,              2, 2 );
 80058e4:	2302      	movs	r3, #2
 80058e6:	2202      	movs	r2, #2
 80058e8:	4958      	ldr	r1, [pc, #352]	; (8005a4c <RegisterAllCommands+0x2d4>)
 80058ea:	4859      	ldr	r0, [pc, #356]	; (8005a50 <RegisterAllCommands+0x2d8>)
 80058ec:	f7ff f81a 	bl	8004924 <InterpRegister>
	InterpRegister( "wdictrl",   	  wdiControl,             2, 2 );
 80058f0:	2302      	movs	r3, #2
 80058f2:	2202      	movs	r2, #2
 80058f4:	4957      	ldr	r1, [pc, #348]	; (8005a54 <RegisterAllCommands+0x2dc>)
 80058f6:	4858      	ldr	r0, [pc, #352]	; (8005a58 <RegisterAllCommands+0x2e0>)
 80058f8:	f7ff f814 	bl	8004924 <InterpRegister>
	InterpRegister( "pfcrlyctrl",  	  pfcRlyControl,          2, 2 );
 80058fc:	2302      	movs	r3, #2
 80058fe:	2202      	movs	r2, #2
 8005900:	4956      	ldr	r1, [pc, #344]	; (8005a5c <RegisterAllCommands+0x2e4>)
 8005902:	4857      	ldr	r0, [pc, #348]	; (8005a60 <RegisterAllCommands+0x2e8>)
 8005904:	f7ff f80e 	bl	8004924 <InterpRegister>
	InterpRegister( "blowerspeed",    BlowerSpeedCtrl,        2, 2 );
 8005908:	2302      	movs	r3, #2
 800590a:	2202      	movs	r2, #2
 800590c:	4955      	ldr	r1, [pc, #340]	; (8005a64 <RegisterAllCommands+0x2ec>)
 800590e:	4856      	ldr	r0, [pc, #344]	; (8005a68 <RegisterAllCommands+0x2f0>)
 8005910:	f7ff f808 	bl	8004924 <InterpRegister>
	InterpRegister( "blowerctrl",     BlowerCtrl,             2, 2 );
 8005914:	2302      	movs	r3, #2
 8005916:	2202      	movs	r2, #2
 8005918:	4954      	ldr	r1, [pc, #336]	; (8005a6c <RegisterAllCommands+0x2f4>)
 800591a:	4855      	ldr	r0, [pc, #340]	; (8005a70 <RegisterAllCommands+0x2f8>)
 800591c:	f7ff f802 	bl	8004924 <InterpRegister>
	InterpRegister( "bloweroff",      Bloweroff,              1, 1 );
 8005920:	2301      	movs	r3, #1
 8005922:	2201      	movs	r2, #1
 8005924:	4953      	ldr	r1, [pc, #332]	; (8005a74 <RegisterAllCommands+0x2fc>)
 8005926:	4854      	ldr	r0, [pc, #336]	; (8005a78 <RegisterAllCommands+0x300>)
 8005928:	f7fe fffc 	bl	8004924 <InterpRegister>
	InterpRegister( "cprtseqon", 	  CprtseqON,			  1, 1 );
 800592c:	2301      	movs	r3, #1
 800592e:	2201      	movs	r2, #1
 8005930:	4952      	ldr	r1, [pc, #328]	; (8005a7c <RegisterAllCommands+0x304>)
 8005932:	4853      	ldr	r0, [pc, #332]	; (8005a80 <RegisterAllCommands+0x308>)
 8005934:	f7fe fff6 	bl	8004924 <InterpRegister>
	InterpRegister( "cprtseqoff", 	  CprtseqOFF,			  1, 1 );
 8005938:	2301      	movs	r3, #1
 800593a:	2201      	movs	r2, #1
 800593c:	4951      	ldr	r1, [pc, #324]	; (8005a84 <RegisterAllCommands+0x30c>)
 800593e:	4852      	ldr	r0, [pc, #328]	; (8005a88 <RegisterAllCommands+0x310>)
 8005940:	f7fe fff0 	bl	8004924 <InterpRegister>
	InterpRegister( "stopdbgprt",     StopDebugPrinting,      2, 2 );
 8005944:	2302      	movs	r3, #2
 8005946:	2202      	movs	r2, #2
 8005948:	4950      	ldr	r1, [pc, #320]	; (8005a8c <RegisterAllCommands+0x314>)
 800594a:	4851      	ldr	r0, [pc, #324]	; (8005a90 <RegisterAllCommands+0x318>)
 800594c:	f7fe ffea 	bl	8004924 <InterpRegister>

    UartPrintf("All Interpreter Commands Registered\n");
 8005950:	4850      	ldr	r0, [pc, #320]	; (8005a94 <RegisterAllCommands+0x31c>)
 8005952:	f000 f9c1 	bl	8005cd8 <UartPrintf>
}
 8005956:	bf00      	nop
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	08004d81 	.word	0x08004d81
 8005960:	08021ca4 	.word	0x08021ca4
 8005964:	08004dbd 	.word	0x08004dbd
 8005968:	08021cac 	.word	0x08021cac
 800596c:	08004da5 	.word	0x08004da5
 8005970:	08021cb8 	.word	0x08021cb8
 8005974:	08004e09 	.word	0x08004e09
 8005978:	08021cc4 	.word	0x08021cc4
 800597c:	08004df1 	.word	0x08004df1
 8005980:	08021cd4 	.word	0x08021cd4
 8005984:	08004cfd 	.word	0x08004cfd
 8005988:	08021ce4 	.word	0x08021ce4
 800598c:	08004d29 	.word	0x08004d29
 8005990:	08021cf0 	.word	0x08021cf0
 8005994:	08004d55 	.word	0x08004d55
 8005998:	08021cfc 	.word	0x08021cfc
 800599c:	08004e41 	.word	0x08004e41
 80059a0:	08021d08 	.word	0x08021d08
 80059a4:	08004e75 	.word	0x08004e75
 80059a8:	08021d14 	.word	0x08021d14
 80059ac:	08004ea9 	.word	0x08004ea9
 80059b0:	08021d20 	.word	0x08021d20
 80059b4:	08004ed9 	.word	0x08004ed9
 80059b8:	08021d2c 	.word	0x08021d2c
 80059bc:	08004f59 	.word	0x08004f59
 80059c0:	08021d34 	.word	0x08021d34
 80059c4:	08004f7d 	.word	0x08004f7d
 80059c8:	08021d3c 	.word	0x08021d3c
 80059cc:	08004fd9 	.word	0x08004fd9
 80059d0:	08021d44 	.word	0x08021d44
 80059d4:	08005049 	.word	0x08005049
 80059d8:	08021d4c 	.word	0x08021d4c
 80059dc:	08005089 	.word	0x08005089
 80059e0:	08021d58 	.word	0x08021d58
 80059e4:	080050d5 	.word	0x080050d5
 80059e8:	08021d60 	.word	0x08021d60
 80059ec:	08005121 	.word	0x08005121
 80059f0:	08021d68 	.word	0x08021d68
 80059f4:	08005139 	.word	0x08005139
 80059f8:	08021d70 	.word	0x08021d70
 80059fc:	08005205 	.word	0x08005205
 8005a00:	08021d78 	.word	0x08021d78
 8005a04:	08004c4d 	.word	0x08004c4d
 8005a08:	08021d80 	.word	0x08021d80
 8005a0c:	08005151 	.word	0x08005151
 8005a10:	08021d88 	.word	0x08021d88
 8005a14:	08005271 	.word	0x08005271
 8005a18:	08021d94 	.word	0x08021d94
 8005a1c:	0800530d 	.word	0x0800530d
 8005a20:	08021da0 	.word	0x08021da0
 8005a24:	080053a9 	.word	0x080053a9
 8005a28:	08021db0 	.word	0x08021db0
 8005a2c:	08005405 	.word	0x08005405
 8005a30:	08021dc0 	.word	0x08021dc0
 8005a34:	08005461 	.word	0x08005461
 8005a38:	08021dd0 	.word	0x08021dd0
 8005a3c:	080054bd 	.word	0x080054bd
 8005a40:	08021de0 	.word	0x08021de0
 8005a44:	08005519 	.word	0x08005519
 8005a48:	08021dec 	.word	0x08021dec
 8005a4c:	08005575 	.word	0x08005575
 8005a50:	08021dfc 	.word	0x08021dfc
 8005a54:	080055d1 	.word	0x080055d1
 8005a58:	08021e04 	.word	0x08021e04
 8005a5c:	0800562d 	.word	0x0800562d
 8005a60:	08021e0c 	.word	0x08021e0c
 8005a64:	08005689 	.word	0x08005689
 8005a68:	08021e18 	.word	0x08021e18
 8005a6c:	080056dd 	.word	0x080056dd
 8005a70:	08021e24 	.word	0x08021e24
 8005a74:	08005731 	.word	0x08005731
 8005a78:	08021e30 	.word	0x08021e30
 8005a7c:	08005749 	.word	0x08005749
 8005a80:	08021e3c 	.word	0x08021e3c
 8005a84:	08005761 	.word	0x08005761
 8005a88:	08021e48 	.word	0x08021e48
 8005a8c:	08005235 	.word	0x08005235
 8005a90:	08021e54 	.word	0x08021e54
 8005a94:	08021e60 	.word	0x08021e60

08005a98 <InitUartTxQueue>:
 * Parameters:  None
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void InitUartTxQueue()
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
	uartTxQueueReadIndex = 0;
 8005a9c:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <InitUartTxQueue+0x20>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	801a      	strh	r2, [r3, #0]
	uartTxQueueWriteIndex = 0;
 8005aa2:	4b06      	ldr	r3, [pc, #24]	; (8005abc <InitUartTxQueue+0x24>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	801a      	strh	r2, [r3, #0]
	memset(&uartTxQueue[0], 0, UART_TX_QUEUE_SIZE * UART_TX_QUEUE_MAX_MSG_SIZE);
 8005aa8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005aac:	2100      	movs	r1, #0
 8005aae:	4804      	ldr	r0, [pc, #16]	; (8005ac0 <InitUartTxQueue+0x28>)
 8005ab0:	f016 fc70 	bl	801c394 <memset>
}
 8005ab4:	bf00      	nop
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	20001b40 	.word	0x20001b40
 8005abc:	20001b42 	.word	0x20001b42
 8005ac0:	20001f70 	.word	0x20001f70

08005ac4 <IsTxUartQueueEmpty>:
 * Parameters:  None
 *
 * Returns:     true if empty, false if not empty
 *---------------------------------------------------------------------------*/
bool IsTxUartQueueEmpty( )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
	int16_t queueIndexDiff = uartTxQueueWriteIndex - uartTxQueueReadIndex;
 8005aca:	4b14      	ldr	r3, [pc, #80]	; (8005b1c <IsTxUartQueueEmpty+0x58>)
 8005acc:	881a      	ldrh	r2, [r3, #0]
 8005ace:	4b14      	ldr	r3, [pc, #80]	; (8005b20 <IsTxUartQueueEmpty+0x5c>)
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	80fb      	strh	r3, [r7, #6]
	curTxUartQueueDepth = queueIndexDiff;
 8005ad8:	88fa      	ldrh	r2, [r7, #6]
 8005ada:	4b12      	ldr	r3, [pc, #72]	; (8005b24 <IsTxUartQueueEmpty+0x60>)
 8005adc:	801a      	strh	r2, [r3, #0]

	if( queueIndexDiff == 0 )
 8005ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <IsTxUartQueueEmpty+0x26>
	{
		// Tx UART queue is empty
		return true;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e011      	b.n	8005b0e <IsTxUartQueueEmpty+0x4a>
	}

	if( queueIndexDiff < 0 )
 8005aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	da03      	bge.n	8005afa <IsTxUartQueueEmpty+0x36>
	{
		queueIndexDiff += UART_TX_QUEUE_SIZE;
 8005af2:	88fb      	ldrh	r3, [r7, #6]
 8005af4:	3320      	adds	r3, #32
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	80fb      	strh	r3, [r7, #6]
	}

	// Keep track of maximum Tx UART queue depth
	if( queueIndexDiff > maxTxUartQueueDepth )
 8005afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005afe:	4a0a      	ldr	r2, [pc, #40]	; (8005b28 <IsTxUartQueueEmpty+0x64>)
 8005b00:	8812      	ldrh	r2, [r2, #0]
 8005b02:	4293      	cmp	r3, r2
 8005b04:	dd02      	ble.n	8005b0c <IsTxUartQueueEmpty+0x48>
	{
		maxTxUartQueueDepth = queueIndexDiff;
 8005b06:	88fa      	ldrh	r2, [r7, #6]
 8005b08:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <IsTxUartQueueEmpty+0x64>)
 8005b0a:	801a      	strh	r2, [r3, #0]
	}

	// Tx UART queue is not empty
	return false;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	20001b42 	.word	0x20001b42
 8005b20:	20001b40 	.word	0x20001b40
 8005b24:	20001b4a 	.word	0x20001b4a
 8005b28:	20001b48 	.word	0x20001b48

08005b2c <IsTxUartQueueFull>:
 * Parameters:  None
 *
 * Returns:     true if full, false if not full
 *---------------------------------------------------------------------------*/
bool IsTxUartQueueFull( )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
	int16_t queueIndexDiff = uartTxQueueWriteIndex - uartTxQueueReadIndex;
 8005b32:	4b0e      	ldr	r3, [pc, #56]	; (8005b6c <IsTxUartQueueFull+0x40>)
 8005b34:	881a      	ldrh	r2, [r3, #0]
 8005b36:	4b0e      	ldr	r3, [pc, #56]	; (8005b70 <IsTxUartQueueFull+0x44>)
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	80fb      	strh	r3, [r7, #6]

	if( queueIndexDiff < 0 )
 8005b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	da03      	bge.n	8005b50 <IsTxUartQueueFull+0x24>
    {
		queueIndexDiff += UART_TX_QUEUE_SIZE;
 8005b48:	88fb      	ldrh	r3, [r7, #6]
 8005b4a:	3320      	adds	r3, #32
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	80fb      	strh	r3, [r7, #6]
	}

	if( queueIndexDiff == (UART_TX_QUEUE_SIZE - 1) )
 8005b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b54:	2b1f      	cmp	r3, #31
 8005b56:	d101      	bne.n	8005b5c <IsTxUartQueueFull+0x30>
	{
		// Tx UART queue is full
		return true;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e000      	b.n	8005b5e <IsTxUartQueueFull+0x32>
	}

	// Tx UART queue is not full
	return false;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	20001b42 	.word	0x20001b42
 8005b70:	20001b40 	.word	0x20001b40

08005b74 <ReadTxUartQueueAndTransmit>:
 * Parameters:  None
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void ReadTxUartQueueAndTransmit()
{
 8005b74:	b598      	push	{r3, r4, r7, lr}
 8005b76:	af00      	add	r7, sp, #0
	if( IsTxUartQueueEmpty() != false )
 8005b78:	f7ff ffa4 	bl	8005ac4 <IsTxUartQueueEmpty>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d145      	bne.n	8005c0e <ReadTxUartQueueAndTransmit+0x9a>
		// Tx UART queue is empty, nothing to read and transmit
		return;
	}

	// Read data from Tx UART queue into buffer
	sprintf((char*)txUartBuf, (char *)&uartTxQueue[uartTxQueueReadIndex]);
 8005b82:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <ReadTxUartQueueAndTransmit+0xa0>)
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	4a23      	ldr	r2, [pc, #140]	; (8005c18 <ReadTxUartQueueAndTransmit+0xa4>)
 8005b8a:	4413      	add	r3, r2
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4823      	ldr	r0, [pc, #140]	; (8005c1c <ReadTxUartQueueAndTransmit+0xa8>)
 8005b90:	f017 f960 	bl	801ce54 <siprintf>

	// Transmit buffer data from Tx UART queue to UART via IT
	if( HAL_UART_Transmit_IT(&debugUart, txUartBuf, strlen((char *)txUartBuf) ) != HAL_OK )
 8005b94:	4821      	ldr	r0, [pc, #132]	; (8005c1c <ReadTxUartQueueAndTransmit+0xa8>)
 8005b96:	f7fa fb4d 	bl	8000234 <strlen>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	491e      	ldr	r1, [pc, #120]	; (8005c1c <ReadTxUartQueueAndTransmit+0xa8>)
 8005ba2:	481f      	ldr	r0, [pc, #124]	; (8005c20 <ReadTxUartQueueAndTransmit+0xac>)
 8005ba4:	f00c fba0 	bl	80122e8 <HAL_UART_Transmit_IT>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00e      	beq.n	8005bcc <ReadTxUartQueueAndTransmit+0x58>
	{
		sprintf((char*)txUartBuf, "UART Transmit ERROR in ReadTxUartQueueAndTransmit\n");
 8005bae:	491d      	ldr	r1, [pc, #116]	; (8005c24 <ReadTxUartQueueAndTransmit+0xb0>)
 8005bb0:	481a      	ldr	r0, [pc, #104]	; (8005c1c <ReadTxUartQueueAndTransmit+0xa8>)
 8005bb2:	f017 f94f 	bl	801ce54 <siprintf>
		HAL_UART_Transmit(&debugUart, txUartBuf, strlen((char*)txUartBuf), 0x200);
 8005bb6:	4819      	ldr	r0, [pc, #100]	; (8005c1c <ReadTxUartQueueAndTransmit+0xa8>)
 8005bb8:	f7fa fb3c 	bl	8000234 <strlen>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bc4:	4915      	ldr	r1, [pc, #84]	; (8005c1c <ReadTxUartQueueAndTransmit+0xa8>)
 8005bc6:	4816      	ldr	r0, [pc, #88]	; (8005c20 <ReadTxUartQueueAndTransmit+0xac>)
 8005bc8:	f00c fafa 	bl	80121c0 <HAL_UART_Transmit>
	}

	// Clear read queue location
	memset(&uartTxQueue[uartTxQueueReadIndex], 0, strlen((char *)&uartTxQueue[uartTxQueueReadIndex]));
 8005bcc:	4b11      	ldr	r3, [pc, #68]	; (8005c14 <ReadTxUartQueueAndTransmit+0xa0>)
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	021b      	lsls	r3, r3, #8
 8005bd2:	4a11      	ldr	r2, [pc, #68]	; (8005c18 <ReadTxUartQueueAndTransmit+0xa4>)
 8005bd4:	189c      	adds	r4, r3, r2
 8005bd6:	4b0f      	ldr	r3, [pc, #60]	; (8005c14 <ReadTxUartQueueAndTransmit+0xa0>)
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	021b      	lsls	r3, r3, #8
 8005bdc:	4a0e      	ldr	r2, [pc, #56]	; (8005c18 <ReadTxUartQueueAndTransmit+0xa4>)
 8005bde:	4413      	add	r3, r2
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fa fb27 	bl	8000234 <strlen>
 8005be6:	4603      	mov	r3, r0
 8005be8:	461a      	mov	r2, r3
 8005bea:	2100      	movs	r1, #0
 8005bec:	4620      	mov	r0, r4
 8005bee:	f016 fbd1 	bl	801c394 <memset>

	// Increment Tx UART queue read index
	uartTxQueueReadIndex++;
 8005bf2:	4b08      	ldr	r3, [pc, #32]	; (8005c14 <ReadTxUartQueueAndTransmit+0xa0>)
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <ReadTxUartQueueAndTransmit+0xa0>)
 8005bfc:	801a      	strh	r2, [r3, #0]
	if( uartTxQueueReadIndex >= UART_TX_QUEUE_SIZE )
 8005bfe:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <ReadTxUartQueueAndTransmit+0xa0>)
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	2b1f      	cmp	r3, #31
 8005c04:	d904      	bls.n	8005c10 <ReadTxUartQueueAndTransmit+0x9c>
	{
		// Read index was at maximum, set to 0
		uartTxQueueReadIndex =  0;
 8005c06:	4b03      	ldr	r3, [pc, #12]	; (8005c14 <ReadTxUartQueueAndTransmit+0xa0>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	801a      	strh	r2, [r3, #0]
 8005c0c:	e000      	b.n	8005c10 <ReadTxUartQueueAndTransmit+0x9c>
		return;
 8005c0e:	bf00      	nop
	}
}
 8005c10:	bd98      	pop	{r3, r4, r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20001b40 	.word	0x20001b40
 8005c18:	20001f70 	.word	0x20001f70
 8005c1c:	20001d70 	.word	0x20001d70
 8005c20:	20004980 	.word	0x20004980
 8005c24:	08021e88 	.word	0x08021e88

08005c28 <WriteTxUartQueue>:
 * Parameters:  buffer - pointer to data to be written to Tx UART queue
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void WriteTxUartQueue(uint8_t * buffer )
{
 8005c28:	b590      	push	{r4, r7, lr}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
	uint32_t startWaitTimeMs = GetTimeMs();
 8005c30:	f000 f94a 	bl	8005ec8 <GetTimeMs>
 8005c34:	60f8      	str	r0, [r7, #12]

	while( IsTxUartQueueFull() != false )
 8005c36:	e01e      	b.n	8005c76 <WriteTxUartQueue+0x4e>
	{
		// Wait for Tx UART queue not to be full
		uint32_t waitTimeMs = DiffTimeFromStartTimeMs( startWaitTimeMs );
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f957 	bl	8005eec <DiffTimeFromStartTimeMs>
 8005c3e:	60b8      	str	r0, [r7, #8]
		if ( waitTimeMs > 20 ) // 20 ms
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b14      	cmp	r3, #20
 8005c44:	d90f      	bls.n	8005c66 <WriteTxUartQueue+0x3e>
		{
			sprintf((char*)txUartErrorBuf, "UART Tx queue full for 20 ms\r\n");
 8005c46:	491e      	ldr	r1, [pc, #120]	; (8005cc0 <WriteTxUartQueue+0x98>)
 8005c48:	481e      	ldr	r0, [pc, #120]	; (8005cc4 <WriteTxUartQueue+0x9c>)
 8005c4a:	f017 f903 	bl	801ce54 <siprintf>
			HAL_UART_Transmit(&debugUart, txUartErrorBuf, strlen((char*)txUartErrorBuf), 0x200);
 8005c4e:	481d      	ldr	r0, [pc, #116]	; (8005cc4 <WriteTxUartQueue+0x9c>)
 8005c50:	f7fa faf0 	bl	8000234 <strlen>
 8005c54:	4603      	mov	r3, r0
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c5c:	4919      	ldr	r1, [pc, #100]	; (8005cc4 <WriteTxUartQueue+0x9c>)
 8005c5e:	481a      	ldr	r0, [pc, #104]	; (8005cc8 <WriteTxUartQueue+0xa0>)
 8005c60:	f00c faae 	bl	80121c0 <HAL_UART_Transmit>
			return; // Wait too long for Tx UART queue not to be full
 8005c64:	e028      	b.n	8005cb8 <WriteTxUartQueue+0x90>
		}

		// Keep track of max wait time for Tx UART Queue not to be full
		if( waitTimeMs > maxUartTxQueueWaitTimeMs )
 8005c66:	4b19      	ldr	r3, [pc, #100]	; (8005ccc <WriteTxUartQueue+0xa4>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d902      	bls.n	8005c76 <WriteTxUartQueue+0x4e>
		{
			maxUartTxQueueWaitTimeMs = waitTimeMs;
 8005c70:	4a16      	ldr	r2, [pc, #88]	; (8005ccc <WriteTxUartQueue+0xa4>)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	6013      	str	r3, [r2, #0]
	while( IsTxUartQueueFull() != false )
 8005c76:	f7ff ff59 	bl	8005b2c <IsTxUartQueueFull>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1db      	bne.n	8005c38 <WriteTxUartQueue+0x10>
		}
	}

	// Write buffer data to Tx UART queue
	strncpy((char *)&uartTxQueue[uartTxQueueWriteIndex], (char *)buffer, strlen((char *)buffer));
 8005c80:	4b13      	ldr	r3, [pc, #76]	; (8005cd0 <WriteTxUartQueue+0xa8>)
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	021b      	lsls	r3, r3, #8
 8005c86:	4a13      	ldr	r2, [pc, #76]	; (8005cd4 <WriteTxUartQueue+0xac>)
 8005c88:	189c      	adds	r4, r3, r2
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fa fad2 	bl	8000234 <strlen>
 8005c90:	4603      	mov	r3, r0
 8005c92:	461a      	mov	r2, r3
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	4620      	mov	r0, r4
 8005c98:	f017 f924 	bl	801cee4 <strncpy>

	// Increment UART Tx queue write index
	uartTxQueueWriteIndex++;
 8005c9c:	4b0c      	ldr	r3, [pc, #48]	; (8005cd0 <WriteTxUartQueue+0xa8>)
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	4b0a      	ldr	r3, [pc, #40]	; (8005cd0 <WriteTxUartQueue+0xa8>)
 8005ca6:	801a      	strh	r2, [r3, #0]
	if( uartTxQueueWriteIndex >= UART_TX_QUEUE_SIZE )
 8005ca8:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <WriteTxUartQueue+0xa8>)
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	2b1f      	cmp	r3, #31
 8005cae:	d902      	bls.n	8005cb6 <WriteTxUartQueue+0x8e>
	{
		// Write index was at maximum, set to 0
		uartTxQueueWriteIndex =  0;
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <WriteTxUartQueue+0xa8>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	801a      	strh	r2, [r3, #0]
	}

	return;
 8005cb6:	bf00      	nop
}
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd90      	pop	{r4, r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	08021ebc 	.word	0x08021ebc
 8005cc4:	20001e70 	.word	0x20001e70
 8005cc8:	20004980 	.word	0x20004980
 8005ccc:	20001b44 	.word	0x20001b44
 8005cd0:	20001b42 	.word	0x20001b42
 8005cd4:	20001f70 	.word	0x20001f70

08005cd8 <UartPrintf>:
 * Parameters:  format - string that contains text to be printed
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void UartPrintf(const char * format, ... )
{
 8005cd8:	b40f      	push	{r0, r1, r2, r3}
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b082      	sub	sp, #8
 8005cde:	af00      	add	r7, sp, #0
	if( (GetNoAsyncPrintsFlag( ) != false) || (IsStopDebugPring() == true) )
 8005ce0:	f7fe fe90 	bl	8004a04 <GetNoAsyncPrintsFlag>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d12c      	bne.n	8005d44 <UartPrintf+0x6c>
 8005cea:	f7fe fe97 	bl	8004a1c <IsStopDebugPring>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d127      	bne.n	8005d44 <UartPrintf+0x6c>

	va_list ap;
	int n;

	// Put print string in buffer
	va_start(ap, format);
 8005cf4:	f107 0314 	add.w	r3, r7, #20
 8005cf8:	603b      	str	r3, [r7, #0]
	// Max number of bytes is UART_TX_QUEUE_MAX_MSG_SIZE-2 to allow for append of "$ " prompt
	n = vsnprintf ((char*)printBuf, UART_TX_QUEUE_MAX_MSG_SIZE - 2, format, ap);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	21fe      	movs	r1, #254	; 0xfe
 8005d00:	4815      	ldr	r0, [pc, #84]	; (8005d58 <UartPrintf+0x80>)
 8005d02:	f018 f83f 	bl	801dd84 <vsniprintf>
 8005d06:	6078      	str	r0, [r7, #4]
	va_end(ap);

	// Append command prompt to print string
	strcat((char *)printBuf,"$ ");
 8005d08:	4813      	ldr	r0, [pc, #76]	; (8005d58 <UartPrintf+0x80>)
 8005d0a:	f7fa fa93 	bl	8000234 <strlen>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	461a      	mov	r2, r3
 8005d12:	4b11      	ldr	r3, [pc, #68]	; (8005d58 <UartPrintf+0x80>)
 8005d14:	4413      	add	r3, r2
 8005d16:	4a11      	ldr	r2, [pc, #68]	; (8005d5c <UartPrintf+0x84>)
 8005d18:	8811      	ldrh	r1, [r2, #0]
 8005d1a:	7892      	ldrb	r2, [r2, #2]
 8005d1c:	8019      	strh	r1, [r3, #0]
 8005d1e:	709a      	strb	r2, [r3, #2]

	if ( n == -1 )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d26:	d103      	bne.n	8005d30 <UartPrintf+0x58>
	{
		printBuf[UART_TX_QUEUE_MAX_MSG_SIZE-1] = '\0';
 8005d28:	4b0b      	ldr	r3, [pc, #44]	; (8005d58 <UartPrintf+0x80>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
	}

	// Write buffer to Tx UART queue
	WriteTxUartQueue( printBuf );
 8005d30:	4809      	ldr	r0, [pc, #36]	; (8005d58 <UartPrintf+0x80>)
 8005d32:	f7ff ff79 	bl	8005c28 <WriteTxUartQueue>

	// If UART is ready, read data from TX UART queue and transmit to UART,
	// else return and HAL_UART_TxCpltCallback will call ReadTxUArtQueue
	// after current UART transmission is complete
	if(debugUart.gState == HAL_UART_STATE_READY)
 8005d36:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <UartPrintf+0x88>)
 8005d38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d3a:	2b20      	cmp	r3, #32
 8005d3c:	d104      	bne.n	8005d48 <UartPrintf+0x70>
	{
		ReadTxUartQueueAndTransmit();
 8005d3e:	f7ff ff19 	bl	8005b74 <ReadTxUartQueueAndTransmit>
	}

	return;
 8005d42:	e001      	b.n	8005d48 <UartPrintf+0x70>
		return;
 8005d44:	bf00      	nop
 8005d46:	e000      	b.n	8005d4a <UartPrintf+0x72>
	return;
 8005d48:	bf00      	nop
}
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d52:	b004      	add	sp, #16
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	20003f70 	.word	0x20003f70
 8005d5c:	08021edc 	.word	0x08021edc
 8005d60:	20004980 	.word	0x20004980

08005d64 <UartPrintfWithoutPrompt>:
 * Parameters:  format - string that contains text to be printed
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void UartPrintfWithoutPrompt(const char * format, ... )
{
 8005d64:	b40f      	push	{r0, r1, r2, r3}
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b082      	sub	sp, #8
 8005d6a:	af00      	add	r7, sp, #0
	if( GetNoAsyncPrintsFlag( ) != false )
 8005d6c:	f7fe fe4a 	bl	8004a04 <GetNoAsyncPrintsFlag>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d11f      	bne.n	8005db6 <UartPrintfWithoutPrompt+0x52>

	va_list ap;
	int n;

	// Put print string in buffer
	va_start(ap, format);
 8005d76:	f107 0314 	add.w	r3, r7, #20
 8005d7a:	603b      	str	r3, [r7, #0]
	n = vsnprintf ((char*)printBuf, UART_TX_QUEUE_MAX_MSG_SIZE, format, ap);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d84:	4811      	ldr	r0, [pc, #68]	; (8005dcc <UartPrintfWithoutPrompt+0x68>)
 8005d86:	f017 fffd 	bl	801dd84 <vsniprintf>
 8005d8a:	6078      	str	r0, [r7, #4]
	va_end(ap);

	// If string is empty, nothing to print so return
	if( n == 0 )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d013      	beq.n	8005dba <UartPrintfWithoutPrompt+0x56>
	{
		return;
	}

	if ( n == -1 )
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d98:	d103      	bne.n	8005da2 <UartPrintfWithoutPrompt+0x3e>
	{
		printBuf[UART_TX_QUEUE_MAX_MSG_SIZE-1] = '\0';
 8005d9a:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <UartPrintfWithoutPrompt+0x68>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
	}

	// Write buffer to Tx UART queue
	WriteTxUartQueue( printBuf );
 8005da2:	480a      	ldr	r0, [pc, #40]	; (8005dcc <UartPrintfWithoutPrompt+0x68>)
 8005da4:	f7ff ff40 	bl	8005c28 <WriteTxUartQueue>

	// If UART is ready, read data from TX UART queue and transmit to UART,
	// else return and HAL_UART_TxCpltCallback will call ReadTxUArtQueue
	// after current UART transmission is complete
	if(debugUart.gState == HAL_UART_STATE_READY)
 8005da8:	4b09      	ldr	r3, [pc, #36]	; (8005dd0 <UartPrintfWithoutPrompt+0x6c>)
 8005daa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d106      	bne.n	8005dbe <UartPrintfWithoutPrompt+0x5a>
	{
		ReadTxUartQueueAndTransmit();
 8005db0:	f7ff fee0 	bl	8005b74 <ReadTxUartQueueAndTransmit>
	}

	return;
 8005db4:	e003      	b.n	8005dbe <UartPrintfWithoutPrompt+0x5a>
		return;
 8005db6:	bf00      	nop
 8005db8:	e002      	b.n	8005dc0 <UartPrintfWithoutPrompt+0x5c>
		return;
 8005dba:	bf00      	nop
 8005dbc:	e000      	b.n	8005dc0 <UartPrintfWithoutPrompt+0x5c>
	return;
 8005dbe:	bf00      	nop
}
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dc8:	b004      	add	sp, #16
 8005dca:	4770      	bx	lr
 8005dcc:	20003f70 	.word	0x20003f70
 8005dd0:	20004980 	.word	0x20004980

08005dd4 <GuiUartPrintf>:

void GuiUartPrintf(const char * format, ... )
{
 8005dd4:	b40f      	push	{r0, r1, r2, r3}
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b082      	sub	sp, #8
 8005dda:	af00      	add	r7, sp, #0
	va_list ap;
	int n;

	// Put print string in buffer
	va_start(ap, format);
 8005ddc:	f107 0314 	add.w	r3, r7, #20
 8005de0:	603b      	str	r3, [r7, #0]
	n = vsnprintf ((char*)guiPrintBuf, UART_TX_QUEUE_MAX_MSG_SIZE, format, ap);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dea:	481b      	ldr	r0, [pc, #108]	; (8005e58 <GuiUartPrintf+0x84>)
 8005dec:	f017 ffca 	bl	801dd84 <vsniprintf>
 8005df0:	6078      	str	r0, [r7, #4]
	va_end(ap);

	// If string is empty, nothing to print so return
	if( n == 0 )
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d025      	beq.n	8005e44 <GuiUartPrintf+0x70>
	{
		return;
	}

	if ( n == -1 )
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfe:	d103      	bne.n	8005e08 <GuiUartPrintf+0x34>
	{
		guiPrintBuf[UART_TX_QUEUE_MAX_MSG_SIZE-1] = '\0';
 8005e00:	4b15      	ldr	r3, [pc, #84]	; (8005e58 <GuiUartPrintf+0x84>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
	}

	// If UART is ready transmit to UART,

	if(guiUart.gState == HAL_UART_STATE_READY)
 8005e08:	4b14      	ldr	r3, [pc, #80]	; (8005e5c <GuiUartPrintf+0x88>)
 8005e0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e0c:	2b20      	cmp	r3, #32
 8005e0e:	d11b      	bne.n	8005e48 <GuiUartPrintf+0x74>
	{
		// Transmit buffer data from Tx UART queue to UART via IT
		if( HAL_UART_Transmit_IT(&guiUart, guiPrintBuf, n ) != HAL_OK )
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	461a      	mov	r2, r3
 8005e16:	4910      	ldr	r1, [pc, #64]	; (8005e58 <GuiUartPrintf+0x84>)
 8005e18:	4810      	ldr	r0, [pc, #64]	; (8005e5c <GuiUartPrintf+0x88>)
 8005e1a:	f00c fa65 	bl	80122e8 <HAL_UART_Transmit_IT>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d011      	beq.n	8005e48 <GuiUartPrintf+0x74>
		{
			sprintf((char*)guiPrintBuf, "UART Transmit ERROR in ReadTxUartQueueAndTransmit\n");
 8005e24:	490e      	ldr	r1, [pc, #56]	; (8005e60 <GuiUartPrintf+0x8c>)
 8005e26:	480c      	ldr	r0, [pc, #48]	; (8005e58 <GuiUartPrintf+0x84>)
 8005e28:	f017 f814 	bl	801ce54 <siprintf>
			HAL_UART_Transmit(&guiUart, guiPrintBuf, strlen((char*)guiPrintBuf), 0x200);
 8005e2c:	480a      	ldr	r0, [pc, #40]	; (8005e58 <GuiUartPrintf+0x84>)
 8005e2e:	f7fa fa01 	bl	8000234 <strlen>
 8005e32:	4603      	mov	r3, r0
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e3a:	4907      	ldr	r1, [pc, #28]	; (8005e58 <GuiUartPrintf+0x84>)
 8005e3c:	4807      	ldr	r0, [pc, #28]	; (8005e5c <GuiUartPrintf+0x88>)
 8005e3e:	f00c f9bf 	bl	80121c0 <HAL_UART_Transmit>
		}
	}

	return;
 8005e42:	e001      	b.n	8005e48 <GuiUartPrintf+0x74>
		return;
 8005e44:	bf00      	nop
 8005e46:	e000      	b.n	8005e4a <GuiUartPrintf+0x76>
	return;
 8005e48:	bf00      	nop
}
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e52:	b004      	add	sp, #16
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	20004170 	.word	0x20004170
 8005e5c:	20006df0 	.word	0x20006df0
 8005e60:	08021e88 	.word	0x08021e88

08005e64 <PmUartPrintfWithoutPrompt>:
 * Parameters:  format - string that contains text to be printed
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void PmUartPrintfWithoutPrompt(const char * format, ... )
{
 8005e64:	b40f      	push	{r0, r1, r2, r3}
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b082      	sub	sp, #8
 8005e6a:	af00      	add	r7, sp, #0
	va_list ap;
	int n;

	// Put print string in buffer
	va_start(ap, format);
 8005e6c:	f107 0314 	add.w	r3, r7, #20
 8005e70:	603b      	str	r3, [r7, #0]
	n = vsnprintf ((char*)printBuf, UART_TX_QUEUE_MAX_MSG_SIZE, format, ap);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e7a:	4811      	ldr	r0, [pc, #68]	; (8005ec0 <PmUartPrintfWithoutPrompt+0x5c>)
 8005e7c:	f017 ff82 	bl	801dd84 <vsniprintf>
 8005e80:	6078      	str	r0, [r7, #4]
	va_end(ap);

	// If string is empty, nothing to print so return
	if( n == 0 )
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d011      	beq.n	8005eac <PmUartPrintfWithoutPrompt+0x48>
	{
		return;
	}

	if ( n == -1 )
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8e:	d103      	bne.n	8005e98 <PmUartPrintfWithoutPrompt+0x34>
	{
		printBuf[UART_TX_QUEUE_MAX_MSG_SIZE-1] = '\0';
 8005e90:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <PmUartPrintfWithoutPrompt+0x5c>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
	}

	// Write buffer to Tx UART queue
	WriteTxUartQueue( printBuf );
 8005e98:	4809      	ldr	r0, [pc, #36]	; (8005ec0 <PmUartPrintfWithoutPrompt+0x5c>)
 8005e9a:	f7ff fec5 	bl	8005c28 <WriteTxUartQueue>

	// If UART is ready, read data from TX UART queue and transmit to UART,
	// else return and HAL_UART_TxCpltCallback will call ReadTxUArtQueue
	// after current UART transmission is complete
	if(debugUart.gState == HAL_UART_STATE_READY)
 8005e9e:	4b09      	ldr	r3, [pc, #36]	; (8005ec4 <PmUartPrintfWithoutPrompt+0x60>)
 8005ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	d104      	bne.n	8005eb0 <PmUartPrintfWithoutPrompt+0x4c>
	{
		ReadTxUartQueueAndTransmit();
 8005ea6:	f7ff fe65 	bl	8005b74 <ReadTxUartQueueAndTransmit>
	}

	return;
 8005eaa:	e001      	b.n	8005eb0 <PmUartPrintfWithoutPrompt+0x4c>
		return;
 8005eac:	bf00      	nop
 8005eae:	e000      	b.n	8005eb2 <PmUartPrintfWithoutPrompt+0x4e>
	return;
 8005eb0:	bf00      	nop
}
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005eba:	b004      	add	sp, #16
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	20003f70 	.word	0x20003f70
 8005ec4:	20004980 	.word	0x20004980

08005ec8 <GetTimeMs>:

// Returns a millisecond count based on the microsecond timer
// For use in callbacks where HAL_GetTick() might not increment due to interrupt priority
// e.g. where UartPrintf is called in a callback
uint32_t GetTimeMs(void)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	af00      	add	r7, sp, #0
	return __HAL_TIM_GetCounter(&htim5)/1000;
 8005ecc:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <GetTimeMs+0x1c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	4a05      	ldr	r2, [pc, #20]	; (8005ee8 <GetTimeMs+0x20>)
 8005ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed8:	099b      	lsrs	r3, r3, #6
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	2000484c 	.word	0x2000484c
 8005ee8:	10624dd3 	.word	0x10624dd3

08005eec <DiffTimeFromStartTimeMs>:

// Calculate current difference in time in ms from startTimeMs
uint32_t DiffTimeFromStartTimeMs( uint32_t startTimeMs )
{
 8005eec:	b4b0      	push	{r4, r5, r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
	int64_t diffTimeMs = (__HAL_TIM_GetCounter(&htim5)/1000) - startTimeMs;
 8005ef4:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <DiffTimeFromStartTimeMs+0x50>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	4a11      	ldr	r2, [pc, #68]	; (8005f40 <DiffTimeFromStartTimeMs+0x54>)
 8005efc:	fba2 2303 	umull	r2, r3, r2, r3
 8005f00:	099a      	lsrs	r2, r3, #6
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	461a      	mov	r2, r3
 8005f08:	f04f 0300 	mov.w	r3, #0
 8005f0c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if( diffTimeMs < 0 )
 8005f10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f14:	2a00      	cmp	r2, #0
 8005f16:	f173 0300 	sbcs.w	r3, r3, #0
 8005f1a:	da07      	bge.n	8005f2c <DiffTimeFromStartTimeMs+0x40>
	{
		diffTimeMs += 0xFFFFFFFF;
 8005f1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f20:	f112 34ff 	adds.w	r4, r2, #4294967295
 8005f24:	f143 0500 	adc.w	r5, r3, #0
 8005f28:	e9c7 4504 	strd	r4, r5, [r7, #16]
	}

	uint32_t diffTimeMsUint32 = diffTimeMs;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	60fb      	str	r3, [r7, #12]

	return diffTimeMsUint32;
 8005f30:	68fb      	ldr	r3, [r7, #12]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bcb0      	pop	{r4, r5, r7}
 8005f3a:	4770      	bx	lr
 8005f3c:	2000484c 	.word	0x2000484c
 8005f40:	10624dd3 	.word	0x10624dd3

08005f44 <Get_SysTick>:

//Provides a tick value in millisecond.
uint32_t Get_SysTick(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8005f48:	f002 ff9c 	bl	8008e84 <HAL_GetTick>
 8005f4c:	4603      	mov	r3, r0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <IsPfcLoadEnLow>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool IsPfcLoadEnLow()
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
	//PfcLoadEnanable signal low return TRUE else return FALSE
	return ( HAL_GPIO_ReadPin(PFC_LoadEN_N_GPIO_Port, PFC_LoadEN_N_Pin) == GPIO_PIN_RESET) ? true : false;
 8005f58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005f5c:	4805      	ldr	r0, [pc, #20]	; (8005f74 <IsPfcLoadEnLow+0x20>)
 8005f5e:	f004 fd1b 	bl	800a998 <HAL_GPIO_ReadPin>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	bf0c      	ite	eq
 8005f68:	2301      	moveq	r3, #1
 8005f6a:	2300      	movne	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	40021400 	.word	0x40021400

08005f78 <IsPfcPowerFailWarnLow>:

bool IsPfcPowerFailWarnLow()
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	af00      	add	r7, sp, #0
	//PFC_POWERFAILWARNNING_N signal low return TRUE else return FALSE
	return ( HAL_GPIO_ReadPin(PFC_POWERFAILWARNNING_N_GPIO_Port, PFC_POWERFAILWARNNING_N_Pin) == GPIO_PIN_RESET) ? true : false;
 8005f7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f80:	4805      	ldr	r0, [pc, #20]	; (8005f98 <IsPfcPowerFailWarnLow+0x20>)
 8005f82:	f004 fd09 	bl	800a998 <HAL_GPIO_ReadPin>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	bf0c      	ite	eq
 8005f8c:	2301      	moveq	r3, #1
 8005f8e:	2300      	movne	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	40021000 	.word	0x40021000

08005f9c <Refresh_Hardware_WDT>:

void Refresh_Hardware_WDT()
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(WDI_GPIO_Port, WDI_Pin);
 8005fa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fa4:	4802      	ldr	r0, [pc, #8]	; (8005fb0 <Refresh_Hardware_WDT+0x14>)
 8005fa6:	f004 fd28 	bl	800a9fa <HAL_GPIO_TogglePin>
}
 8005faa:	bf00      	nop
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	40021400 	.word	0x40021400

08005fb4 <delayWd100ms>:

void delayWd100ms( uint8_t numOf100msTics )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	// Allow a maximum delay of 2 sec.
	if ( numOf100msTics > 20 )
 8005fbe:	79fb      	ldrb	r3, [r7, #7]
 8005fc0:	2b14      	cmp	r3, #20
 8005fc2:	d904      	bls.n	8005fce <delayWd100ms+0x1a>
	{
		numOf100msTics = 20;
 8005fc4:	2314      	movs	r3, #20
 8005fc6:	71fb      	strb	r3, [r7, #7]
		UartPrintf( "ERROR - Requesting illegal WD delay over 2 sec \n" );
 8005fc8:	480a      	ldr	r0, [pc, #40]	; (8005ff4 <delayWd100ms+0x40>)
 8005fca:	f7ff fe85 	bl	8005cd8 <UartPrintf>
	}

	for ( i = 0; i < numOf100msTics; i++ )
 8005fce:	2300      	movs	r3, #0
 8005fd0:	73fb      	strb	r3, [r7, #15]
 8005fd2:	e007      	b.n	8005fe4 <delayWd100ms+0x30>
	{
		HAL_Delay( 100 );
 8005fd4:	2064      	movs	r0, #100	; 0x64
 8005fd6:	f002 ff61 	bl	8008e9c <HAL_Delay>
	    //HAL_IWDG_Refresh( &hiwdg );  // Feed the Internal dog.
	    Refresh_Hardware_WDT();		 // Feed the External dog.
 8005fda:	f7ff ffdf 	bl	8005f9c <Refresh_Hardware_WDT>
	for ( i = 0; i < numOf100msTics; i++ )
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	73fb      	strb	r3, [r7, #15]
 8005fe4:	7bfa      	ldrb	r2, [r7, #15]
 8005fe6:	79fb      	ldrb	r3, [r7, #7]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d3f3      	bcc.n	8005fd4 <delayWd100ms+0x20>
	}

	return;
 8005fec:	bf00      	nop
}
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	08021f40 	.word	0x08021f40

08005ff8 <CommandProcessing>:

void CommandProcessing( )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
    // Check if command from UART1 is ready to process
	if( commandReady != false )
 8005ffc:	4b11      	ldr	r3, [pc, #68]	; (8006044 <CommandProcessing+0x4c>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d01c      	beq.n	800603e <CommandProcessing+0x46>
	{
		// Process command
		if( strlen(commandBuf) > 0 )
 8006004:	4b10      	ldr	r3, [pc, #64]	; (8006048 <CommandProcessing+0x50>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d009      	beq.n	8006020 <CommandProcessing+0x28>
		{

			if( InterpRun( commandBuf ) != INTERP_SUCCESS )
 800600c:	480e      	ldr	r0, [pc, #56]	; (8006048 <CommandProcessing+0x50>)
 800600e:	f7fe fbdb 	bl	80047c8 <InterpRun>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d006      	beq.n	8006026 <CommandProcessing+0x2e>
			{
			    UartPrintf("Error Executing Received Command\r\n");
 8006018:	480c      	ldr	r0, [pc, #48]	; (800604c <CommandProcessing+0x54>)
 800601a:	f7ff fe5d 	bl	8005cd8 <UartPrintf>
 800601e:	e002      	b.n	8006026 <CommandProcessing+0x2e>
			}
		}
		else // Empty command received, do not attempt to process
		{
		    UartPrintf("");
 8006020:	480b      	ldr	r0, [pc, #44]	; (8006050 <CommandProcessing+0x58>)
 8006022:	f7ff fe59 	bl	8005cd8 <UartPrintf>
		}

		// Command processed, clear command buffer and command ready flag
		memset(commandBuf, 0, strlen(commandBuf));
 8006026:	4808      	ldr	r0, [pc, #32]	; (8006048 <CommandProcessing+0x50>)
 8006028:	f7fa f904 	bl	8000234 <strlen>
 800602c:	4603      	mov	r3, r0
 800602e:	461a      	mov	r2, r3
 8006030:	2100      	movs	r1, #0
 8006032:	4805      	ldr	r0, [pc, #20]	; (8006048 <CommandProcessing+0x50>)
 8006034:	f016 f9ae 	bl	801c394 <memset>
		commandReady = false;
 8006038:	4b02      	ldr	r3, [pc, #8]	; (8006044 <CommandProcessing+0x4c>)
 800603a:	2200      	movs	r2, #0
 800603c:	701a      	strb	r2, [r3, #0]
	}
}
 800603e:	bf00      	nop
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	20001b4c 	.word	0x20001b4c
 8006048:	200045ec 	.word	0x200045ec
 800604c:	08021f74 	.word	0x08021f74
 8006050:	08021f98 	.word	0x08021f98

08006054 <GuiCommandProcessing>:

void GuiCommandProcessing( )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
    // Check if command from UART1 is ready to process
	if( guiCommandReady != false )
 800605a:	4b96      	ldr	r3, [pc, #600]	; (80062b4 <GuiCommandProcessing+0x260>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 8124 	beq.w	80062ac <GuiCommandProcessing+0x258>
	{
		// Process command
		if( strlen(guiCommandBuf) > 0 )
 8006064:	4b94      	ldr	r3, [pc, #592]	; (80062b8 <GuiCommandProcessing+0x264>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 8113 	beq.w	8006294 <GuiCommandProcessing+0x240>
		{
			uint32_t length = strlen(guiCommandBuf);
 800606e:	4892      	ldr	r0, [pc, #584]	; (80062b8 <GuiCommandProcessing+0x264>)
 8006070:	f7fa f8e0 	bl	8000234 <strlen>
 8006074:	6178      	str	r0, [r7, #20]

			UartPrintf("Received:%d bytes %s\n", length, guiCommandBuf);
 8006076:	4a90      	ldr	r2, [pc, #576]	; (80062b8 <GuiCommandProcessing+0x264>)
 8006078:	6979      	ldr	r1, [r7, #20]
 800607a:	4890      	ldr	r0, [pc, #576]	; (80062bc <GuiCommandProcessing+0x268>)
 800607c:	f7ff fe2c 	bl	8005cd8 <UartPrintf>

			uint32_t index = 0;
 8006080:	2300      	movs	r3, #0
 8006082:	613b      	str	r3, [r7, #16]

            while(length != 0)
 8006084:	e102      	b.n	800628c <GuiCommandProcessing+0x238>
            {
            	char inchar = guiCommandBuf[index];
 8006086:	4a8c      	ldr	r2, [pc, #560]	; (80062b8 <GuiCommandProcessing+0x264>)
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	4413      	add	r3, r2
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	737b      	strb	r3, [r7, #13]

				switch(inchar)
 8006090:	7b7b      	ldrb	r3, [r7, #13]
 8006092:	3b41      	subs	r3, #65	; 0x41
 8006094:	2b19      	cmp	r3, #25
 8006096:	f200 80f0 	bhi.w	800627a <GuiCommandProcessing+0x226>
 800609a:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <GuiCommandProcessing+0x4c>)
 800609c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a0:	08006109 	.word	0x08006109
 80060a4:	08006115 	.word	0x08006115
 80060a8:	08006121 	.word	0x08006121
 80060ac:	0800612d 	.word	0x0800612d
 80060b0:	08006139 	.word	0x08006139
 80060b4:	08006145 	.word	0x08006145
 80060b8:	08006169 	.word	0x08006169
 80060bc:	08006175 	.word	0x08006175
 80060c0:	08006181 	.word	0x08006181
 80060c4:	0800618d 	.word	0x0800618d
 80060c8:	08006199 	.word	0x08006199
 80060cc:	080061a5 	.word	0x080061a5
 80060d0:	08006151 	.word	0x08006151
 80060d4:	0800615d 	.word	0x0800615d
 80060d8:	0800627b 	.word	0x0800627b
 80060dc:	08006247 	.word	0x08006247
 80060e0:	08006253 	.word	0x08006253
 80060e4:	0800627b 	.word	0x0800627b
 80060e8:	080061b1 	.word	0x080061b1
 80060ec:	0800627b 	.word	0x0800627b
 80060f0:	0800627b 	.word	0x0800627b
 80060f4:	0800627b 	.word	0x0800627b
 80060f8:	0800625f 	.word	0x0800625f
 80060fc:	0800627b 	.word	0x0800627b
 8006100:	0800627b 	.word	0x0800627b
 8006104:	0800626d 	.word	0x0800626d
				{
					case 'A':
						UartPrintf("Thoracic Vest 1 On\n");
 8006108:	486d      	ldr	r0, [pc, #436]	; (80062c0 <GuiCommandProcessing+0x26c>)
 800610a:	f7ff fde5 	bl	8005cd8 <UartPrintf>
						Valve_1A_On();
 800610e:	f7fc fedf 	bl	8002ed0 <Valve_1A_On>
					break;
 8006112:	e0b5      	b.n	8006280 <GuiCommandProcessing+0x22c>

					case 'B':
						UartPrintf("Thoracic Vest 1 Off\n");
 8006114:	486b      	ldr	r0, [pc, #428]	; (80062c4 <GuiCommandProcessing+0x270>)
 8006116:	f7ff fddf 	bl	8005cd8 <UartPrintf>
						Valve_1A_Off();
 800611a:	f7fc fee5 	bl	8002ee8 <Valve_1A_Off>
					break;
 800611e:	e0af      	b.n	8006280 <GuiCommandProcessing+0x22c>

					case 'C':
						UartPrintf("Thoracic Vest 2 On\n");
 8006120:	4869      	ldr	r0, [pc, #420]	; (80062c8 <GuiCommandProcessing+0x274>)
 8006122:	f7ff fdd9 	bl	8005cd8 <UartPrintf>
						Valve_1B_On();
 8006126:	f7fc feeb 	bl	8002f00 <Valve_1B_On>
					break;
 800612a:	e0a9      	b.n	8006280 <GuiCommandProcessing+0x22c>

					case 'D':
						UartPrintf("Thoracic Vest 2 Off\n");
 800612c:	4867      	ldr	r0, [pc, #412]	; (80062cc <GuiCommandProcessing+0x278>)
 800612e:	f7ff fdd3 	bl	8005cd8 <UartPrintf>
						Valve_1B_Off();
 8006132:	f7fc fef1 	bl	8002f18 <Valve_1B_Off>
					break;
 8006136:	e0a3      	b.n	8006280 <GuiCommandProcessing+0x22c>

					case 'E':
						UartPrintf("Abd Vest 1 On\n");
 8006138:	4865      	ldr	r0, [pc, #404]	; (80062d0 <GuiCommandProcessing+0x27c>)
 800613a:	f7ff fdcd 	bl	8005cd8 <UartPrintf>
						Valve_2A_On();
 800613e:	f7fc fef7 	bl	8002f30 <Valve_2A_On>
					break;
 8006142:	e09d      	b.n	8006280 <GuiCommandProcessing+0x22c>

					case 'F':
						UartPrintf("Abd Vest 1 Off\n");
 8006144:	4863      	ldr	r0, [pc, #396]	; (80062d4 <GuiCommandProcessing+0x280>)
 8006146:	f7ff fdc7 	bl	8005cd8 <UartPrintf>
						Valve_2A_Off();
 800614a:	f7fc fefd 	bl	8002f48 <Valve_2A_Off>
					break;
 800614e:	e097      	b.n	8006280 <GuiCommandProcessing+0x22c>

					case 'M':
						UartPrintf("Abd Vest 2 On\n");
 8006150:	4861      	ldr	r0, [pc, #388]	; (80062d8 <GuiCommandProcessing+0x284>)
 8006152:	f7ff fdc1 	bl	8005cd8 <UartPrintf>
						Valve_2B_On();
 8006156:	f7fc ff03 	bl	8002f60 <Valve_2B_On>
					break;
 800615a:	e091      	b.n	8006280 <GuiCommandProcessing+0x22c>

					case 'N':
						UartPrintf("Abd Vest 2 Off\n");
 800615c:	485f      	ldr	r0, [pc, #380]	; (80062dc <GuiCommandProcessing+0x288>)
 800615e:	f7ff fdbb 	bl	8005cd8 <UartPrintf>
						Valve_2B_Off();
 8006162:	f7fc ff09 	bl	8002f78 <Valve_2B_Off>
					break;
 8006166:	e08b      	b.n	8006280 <GuiCommandProcessing+0x22c>

					case 'G':
						UartPrintf("Vac Div 1 On\n");
 8006168:	485d      	ldr	r0, [pc, #372]	; (80062e0 <GuiCommandProcessing+0x28c>)
 800616a:	f7ff fdb5 	bl	8005cd8 <UartPrintf>
						Valve_3A_On();
 800616e:	f7fc ff0f 	bl	8002f90 <Valve_3A_On>
					break;
 8006172:	e085      	b.n	8006280 <GuiCommandProcessing+0x22c>

					case 'H':
						UartPrintf("Vac Div 1 Off\n");
 8006174:	485b      	ldr	r0, [pc, #364]	; (80062e4 <GuiCommandProcessing+0x290>)
 8006176:	f7ff fdaf 	bl	8005cd8 <UartPrintf>
						Valve_3A_Off();
 800617a:	f7fc ff15 	bl	8002fa8 <Valve_3A_Off>
					break;
 800617e:	e07f      	b.n	8006280 <GuiCommandProcessing+0x22c>

					case 'I':
						UartPrintf("Vac Div 2 On\n");
 8006180:	4859      	ldr	r0, [pc, #356]	; (80062e8 <GuiCommandProcessing+0x294>)
 8006182:	f7ff fda9 	bl	8005cd8 <UartPrintf>
						Valve_3B_On();
 8006186:	f7fc ff1b 	bl	8002fc0 <Valve_3B_On>
					break;
 800618a:	e079      	b.n	8006280 <GuiCommandProcessing+0x22c>

					case 'J':
						UartPrintf("Vac Div 2 Off\n");
 800618c:	4857      	ldr	r0, [pc, #348]	; (80062ec <GuiCommandProcessing+0x298>)
 800618e:	f7ff fda3 	bl	8005cd8 <UartPrintf>
						Valve_3B_Off();
 8006192:	f7fc ff21 	bl	8002fd8 <Valve_3B_Off>
					break;
 8006196:	e073      	b.n	8006280 <GuiCommandProcessing+0x22c>

					case 'K':
						UartPrintf("Vent 1 On\n");
 8006198:	4855      	ldr	r0, [pc, #340]	; (80062f0 <GuiCommandProcessing+0x29c>)
 800619a:	f7ff fd9d 	bl	8005cd8 <UartPrintf>
						Valve_4A_On();
 800619e:	f7fc ff27 	bl	8002ff0 <Valve_4A_On>
					break;
 80061a2:	e06d      	b.n	8006280 <GuiCommandProcessing+0x22c>

					case 'L':
						UartPrintf("Vent 1 Off\n");
 80061a4:	4853      	ldr	r0, [pc, #332]	; (80062f4 <GuiCommandProcessing+0x2a0>)
 80061a6:	f7ff fd97 	bl	8005cd8 <UartPrintf>
						Valve_4A_Off();
 80061aa:	f7fc ff2d 	bl	8003008 <Valve_4A_Off>
					break;
 80061ae:	e067      	b.n	8006280 <GuiCommandProcessing+0x22c>
						//process speed setting S+speed+T
						//parse for number
                        char msg[8];

                        //advance index
                        uint8_t duty_cycle_index = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	73fb      	strb	r3, [r7, #15]

                        index++; //SxT where x = 0 to 10
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	3301      	adds	r3, #1
 80061b8:	613b      	str	r3, [r7, #16]
                        char nextchar = guiCommandBuf[index];
 80061ba:	4a3f      	ldr	r2, [pc, #252]	; (80062b8 <GuiCommandProcessing+0x264>)
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	4413      	add	r3, r2
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	73bb      	strb	r3, [r7, #14]

                        while (nextchar != 'T' && nextchar != '\0')
 80061c4:	e011      	b.n	80061ea <GuiCommandProcessing+0x196>
                        {
                        	msg[duty_cycle_index] = nextchar;
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	f107 0218 	add.w	r2, r7, #24
 80061cc:	4413      	add	r3, r2
 80061ce:	7bba      	ldrb	r2, [r7, #14]
 80061d0:	f803 2c18 	strb.w	r2, [r3, #-24]
                        	duty_cycle_index++;
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	3301      	adds	r3, #1
 80061d8:	73fb      	strb	r3, [r7, #15]
                        	index++;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	3301      	adds	r3, #1
 80061de:	613b      	str	r3, [r7, #16]
                        	nextchar = guiCommandBuf[index];
 80061e0:	4a35      	ldr	r2, [pc, #212]	; (80062b8 <GuiCommandProcessing+0x264>)
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	4413      	add	r3, r2
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	73bb      	strb	r3, [r7, #14]
                        while (nextchar != 'T' && nextchar != '\0')
 80061ea:	7bbb      	ldrb	r3, [r7, #14]
 80061ec:	2b54      	cmp	r3, #84	; 0x54
 80061ee:	d002      	beq.n	80061f6 <GuiCommandProcessing+0x1a2>
 80061f0:	7bbb      	ldrb	r3, [r7, #14]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1e7      	bne.n	80061c6 <GuiCommandProcessing+0x172>
                        }

                        msg[duty_cycle_index] = '\0'; //complete string
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	f107 0218 	add.w	r2, r7, #24
 80061fc:	4413      	add	r3, r2
 80061fe:	2200      	movs	r2, #0
 8006200:	f803 2c18 	strb.w	r2, [r3, #-24]

                        uint8_t dc_index = atoi( msg );
 8006204:	463b      	mov	r3, r7
 8006206:	4618      	mov	r0, r3
 8006208:	f016 f878 	bl	801c2fc <atoi>
 800620c:	4603      	mov	r3, r0
 800620e:	733b      	strb	r3, [r7, #12]

						if(dc_index >= 0 && dc_index <= 10)
 8006210:	7b3b      	ldrb	r3, [r7, #12]
 8006212:	2b0a      	cmp	r3, #10
 8006214:	d833      	bhi.n	800627e <GuiCommandProcessing+0x22a>
						{
							uint32_t duty_cycle = blower_duty_cycle[dc_index];
 8006216:	7b3b      	ldrb	r3, [r7, #12]
 8006218:	4a37      	ldr	r2, [pc, #220]	; (80062f8 <GuiCommandProcessing+0x2a4>)
 800621a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800621e:	60bb      	str	r3, [r7, #8]

							UartPrintf("Speed:%d DAC:%d\r\n", dc_index, duty_cycle);
 8006220:	7b3b      	ldrb	r3, [r7, #12]
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	4619      	mov	r1, r3
 8006226:	4835      	ldr	r0, [pc, #212]	; (80062fc <GuiCommandProcessing+0x2a8>)
 8006228:	f7ff fd56 	bl	8005cd8 <UartPrintf>

							BlowerDAC( duty_cycle );
 800622c:	68b8      	ldr	r0, [r7, #8]
 800622e:	f7fc ffe9 	bl	8003204 <BlowerDAC>

							powerpcb_control(1);
 8006232:	2001      	movs	r0, #1
 8006234:	f7fc ffb0 	bl	8003198 <powerpcb_control>

							PF_control(1);
 8006238:	2001      	movs	r0, #1
 800623a:	f7fc ffbf 	bl	80031bc <PF_control>

							PFC_RLY_control(1);
 800623e:	2001      	movs	r0, #1
 8006240:	f7fc ffce 	bl	80031e0 <PFC_RLY_control>
						}

					}
					break;
 8006244:	e01b      	b.n	800627e <GuiCommandProcessing+0x22a>

					case 'P':
						//turn on pilot compressor P2
						UartPrintf("Compressor Contro1 On\n");
 8006246:	482e      	ldr	r0, [pc, #184]	; (8006300 <GuiCommandProcessing+0x2ac>)
 8006248:	f7ff fd46 	bl	8005cd8 <UartPrintf>
						Compressor_Control_On();
 800624c:	f7fc ff68 	bl	8003120 <Compressor_Control_On>
					break;
 8006250:	e016      	b.n	8006280 <GuiCommandProcessing+0x22c>

					case 'Q':
						//turn off pilot compressor P2
						UartPrintf("Compressor Contro1 Off\n");
 8006252:	482c      	ldr	r0, [pc, #176]	; (8006304 <GuiCommandProcessing+0x2b0>)
 8006254:	f7ff fd40 	bl	8005cd8 <UartPrintf>
						Compressor_Control_Off();
 8006258:	f7fc ff6e 	bl	8003138 <Compressor_Control_Off>
					break;
 800625c:	e010      	b.n	8006280 <GuiCommandProcessing+0x22c>

					case 'W':
						//subscribe for 4-pressure sensors
						UartPrintf("Subscribe for Pressure Statuses\n");
 800625e:	482a      	ldr	r0, [pc, #168]	; (8006308 <GuiCommandProcessing+0x2b4>)
 8006260:	f7ff fd3a 	bl	8005cd8 <UartPrintf>
						gstModel.bPressureData = true;
 8006264:	4b29      	ldr	r3, [pc, #164]	; (800630c <GuiCommandProcessing+0x2b8>)
 8006266:	2201      	movs	r2, #1
 8006268:	725a      	strb	r2, [r3, #9]
					break;
 800626a:	e009      	b.n	8006280 <GuiCommandProcessing+0x22c>

					case 'Z':
						//unsubscribe for 4-pressure sensors
						UartPrintf("Un-Subscribe for Pressure Statuses\n");
 800626c:	4828      	ldr	r0, [pc, #160]	; (8006310 <GuiCommandProcessing+0x2bc>)
 800626e:	f7ff fd33 	bl	8005cd8 <UartPrintf>
						gstModel.bPressureData = false;
 8006272:	4b26      	ldr	r3, [pc, #152]	; (800630c <GuiCommandProcessing+0x2b8>)
 8006274:	2200      	movs	r2, #0
 8006276:	725a      	strb	r2, [r3, #9]
					break;
 8006278:	e002      	b.n	8006280 <GuiCommandProcessing+0x22c>

					default:
					break;
 800627a:	bf00      	nop
 800627c:	e000      	b.n	8006280 <GuiCommandProcessing+0x22c>
					break;
 800627e:	bf00      	nop
				}

				length--;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	3b01      	subs	r3, #1
 8006284:	617b      	str	r3, [r7, #20]
				index++;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	3301      	adds	r3, #1
 800628a:	613b      	str	r3, [r7, #16]
            while(length != 0)
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2b00      	cmp	r3, #0
 8006290:	f47f aef9 	bne.w	8006086 <GuiCommandProcessing+0x32>
            }
		}

		// Command processed, clear command buffer and command ready flag
		memset(guiCommandBuf, 0, strlen(guiCommandBuf));
 8006294:	4808      	ldr	r0, [pc, #32]	; (80062b8 <GuiCommandProcessing+0x264>)
 8006296:	f7f9 ffcd 	bl	8000234 <strlen>
 800629a:	4603      	mov	r3, r0
 800629c:	461a      	mov	r2, r3
 800629e:	2100      	movs	r1, #0
 80062a0:	4805      	ldr	r0, [pc, #20]	; (80062b8 <GuiCommandProcessing+0x264>)
 80062a2:	f016 f877 	bl	801c394 <memset>
		guiCommandReady = false;
 80062a6:	4b03      	ldr	r3, [pc, #12]	; (80062b4 <GuiCommandProcessing+0x260>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	701a      	strb	r2, [r3, #0]
	}
}
 80062ac:	bf00      	nop
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	20001b4d 	.word	0x20001b4d
 80062b8:	20004a94 	.word	0x20004a94
 80062bc:	08021f9c 	.word	0x08021f9c
 80062c0:	08021fb4 	.word	0x08021fb4
 80062c4:	08021fc8 	.word	0x08021fc8
 80062c8:	08021fe0 	.word	0x08021fe0
 80062cc:	08021ff4 	.word	0x08021ff4
 80062d0:	0802200c 	.word	0x0802200c
 80062d4:	0802201c 	.word	0x0802201c
 80062d8:	0802202c 	.word	0x0802202c
 80062dc:	0802203c 	.word	0x0802203c
 80062e0:	0802204c 	.word	0x0802204c
 80062e4:	0802205c 	.word	0x0802205c
 80062e8:	0802206c 	.word	0x0802206c
 80062ec:	0802207c 	.word	0x0802207c
 80062f0:	0802208c 	.word	0x0802208c
 80062f4:	08022098 	.word	0x08022098
 80062f8:	200001c8 	.word	0x200001c8
 80062fc:	080220a4 	.word	0x080220a4
 8006300:	080220b8 	.word	0x080220b8
 8006304:	080220d0 	.word	0x080220d0
 8006308:	080220e8 	.word	0x080220e8
 800630c:	20001d40 	.word	0x20001d40
 8006310:	0802210c 	.word	0x0802210c
 8006314:	00000000 	.word	0x00000000

08006318 <Set_DAC_Voltage>:

void Set_DAC_Voltage(float fV)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	ed87 0a01 	vstr	s0, [r7, #4]
	//only allow from 0.0 to 3.3V
	if( (fV >= 0.0) && (fV <= 3.3) )
 8006322:	edd7 7a01 	vldr	s15, [r7, #4]
 8006326:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800632a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800632e:	da00      	bge.n	8006332 <Set_DAC_Voltage+0x1a>

		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R,  gstModel.dac_value);

		HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
	}
}
 8006330:	e033      	b.n	800639a <Set_DAC_Voltage+0x82>
	if( (fV >= 0.0) && (fV <= 3.3) )
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7fa f940 	bl	80005b8 <__aeabi_f2d>
 8006338:	a31b      	add	r3, pc, #108	; (adr r3, 80063a8 <Set_DAC_Voltage+0x90>)
 800633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633e:	f7fa fc0f 	bl	8000b60 <__aeabi_dcmple>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d100      	bne.n	800634a <Set_DAC_Voltage+0x32>
}
 8006348:	e027      	b.n	800639a <Set_DAC_Voltage+0x82>
		gstModel.dac_value = (uint16_t)(fV * 4095 / 3.3);
 800634a:	edd7 7a01 	vldr	s15, [r7, #4]
 800634e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80063b0 <Set_DAC_Voltage+0x98>
 8006352:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006356:	ee17 0a90 	vmov	r0, s15
 800635a:	f7fa f92d 	bl	80005b8 <__aeabi_f2d>
 800635e:	a312      	add	r3, pc, #72	; (adr r3, 80063a8 <Set_DAC_Voltage+0x90>)
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	f7fa faaa 	bl	80008bc <__aeabi_ddiv>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	4610      	mov	r0, r2
 800636e:	4619      	mov	r1, r3
 8006370:	f7fa fc52 	bl	8000c18 <__aeabi_d2uiz>
 8006374:	4603      	mov	r3, r0
 8006376:	b29a      	uxth	r2, r3
 8006378:	4b0e      	ldr	r3, [pc, #56]	; (80063b4 <Set_DAC_Voltage+0x9c>)
 800637a:	841a      	strh	r2, [r3, #32]
		HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800637c:	2100      	movs	r1, #0
 800637e:	480e      	ldr	r0, [pc, #56]	; (80063b8 <Set_DAC_Voltage+0xa0>)
 8006380:	f003 fc83 	bl	8009c8a <HAL_DAC_Start>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R,  gstModel.dac_value);
 8006384:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <Set_DAC_Voltage+0x9c>)
 8006386:	8c1b      	ldrh	r3, [r3, #32]
 8006388:	2200      	movs	r2, #0
 800638a:	2100      	movs	r1, #0
 800638c:	480a      	ldr	r0, [pc, #40]	; (80063b8 <Set_DAC_Voltage+0xa0>)
 800638e:	f003 fcce 	bl	8009d2e <HAL_DAC_SetValue>
		HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8006392:	2100      	movs	r1, #0
 8006394:	4808      	ldr	r0, [pc, #32]	; (80063b8 <Set_DAC_Voltage+0xa0>)
 8006396:	f003 fc78 	bl	8009c8a <HAL_DAC_Start>
}
 800639a:	bf00      	nop
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	f3af 8000 	nop.w
 80063a8:	66666666 	.word	0x66666666
 80063ac:	400a6666 	.word	0x400a6666
 80063b0:	457ff000 	.word	0x457ff000
 80063b4:	20001d40 	.word	0x20001d40
 80063b8:	20004cf4 	.word	0x20004cf4
 80063bc:	00000000 	.word	0x00000000

080063c0 <Get_DAC_Voltage>:

void  Get_DAC_Voltage()
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
	UartPrintfWithoutPrompt("DAC is set at: %2.1f\n", (gstModel.dac_value * 3.3)/4095.0);
 80063c4:	4b10      	ldr	r3, [pc, #64]	; (8006408 <Get_DAC_Voltage+0x48>)
 80063c6:	8c1b      	ldrh	r3, [r3, #32]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fa f8e3 	bl	8000594 <__aeabi_i2d>
 80063ce:	a30a      	add	r3, pc, #40	; (adr r3, 80063f8 <Get_DAC_Voltage+0x38>)
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	f7fa f948 	bl	8000668 <__aeabi_dmul>
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	4610      	mov	r0, r2
 80063de:	4619      	mov	r1, r3
 80063e0:	a307      	add	r3, pc, #28	; (adr r3, 8006400 <Get_DAC_Voltage+0x40>)
 80063e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e6:	f7fa fa69 	bl	80008bc <__aeabi_ddiv>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	4807      	ldr	r0, [pc, #28]	; (800640c <Get_DAC_Voltage+0x4c>)
 80063f0:	f7ff fcb8 	bl	8005d64 <UartPrintfWithoutPrompt>
}
 80063f4:	bf00      	nop
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	66666666 	.word	0x66666666
 80063fc:	400a6666 	.word	0x400a6666
 8006400:	00000000 	.word	0x00000000
 8006404:	40affe00 	.word	0x40affe00
 8006408:	20001d40 	.word	0x20001d40
 800640c:	08022130 	.word	0x08022130

08006410 <Set_Time>:

void Set_Time(uint8_t hr, uint8_t min, uint8_t sec)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b088      	sub	sp, #32
 8006414:	af00      	add	r7, sp, #0
 8006416:	4603      	mov	r3, r0
 8006418:	71fb      	strb	r3, [r7, #7]
 800641a:	460b      	mov	r3, r1
 800641c:	71bb      	strb	r3, [r7, #6]
 800641e:	4613      	mov	r3, r2
 8006420:	717b      	strb	r3, [r7, #5]
  RTC_TimeTypeDef sTime;

  /** Initialize RTC and set the Time and Date  */
  sTime.Hours   = hr;
 8006422:	79fb      	ldrb	r3, [r7, #7]
 8006424:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = min;
 8006426:	79bb      	ldrb	r3, [r7, #6]
 8006428:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = sec;
 800642a:	797b      	ldrb	r3, [r7, #5]
 800642c:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800642e:	2300      	movs	r3, #0
 8006430:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006432:	2300      	movs	r3, #0
 8006434:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8006436:	f107 0308 	add.w	r3, r7, #8
 800643a:	2200      	movs	r2, #0
 800643c:	4619      	mov	r1, r3
 800643e:	4808      	ldr	r0, [pc, #32]	; (8006460 <Set_Time+0x50>)
 8006440:	f008 fda4 	bl	800ef8c <HAL_RTC_SetTime>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <Set_Time+0x3e>
  {
    Error_Handler();
 800644a:	f001 fb7f 	bl	8007b4c <Error_Handler>
  }

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xDEADBEEF); // backup register
 800644e:	4a05      	ldr	r2, [pc, #20]	; (8006464 <Set_Time+0x54>)
 8006450:	2100      	movs	r1, #0
 8006452:	4803      	ldr	r0, [pc, #12]	; (8006460 <Set_Time+0x50>)
 8006454:	f009 f83e 	bl	800f4d4 <HAL_RTCEx_BKUPWrite>
}
 8006458:	bf00      	nop
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20004d68 	.word	0x20004d68
 8006464:	deadbeef 	.word	0xdeadbeef

08006468 <Set_Date>:

void Set_Date(uint8_t day, uint8_t month, uint8_t date, uint8_t year)
{
 8006468:	b590      	push	{r4, r7, lr}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	4604      	mov	r4, r0
 8006470:	4608      	mov	r0, r1
 8006472:	4611      	mov	r1, r2
 8006474:	461a      	mov	r2, r3
 8006476:	4623      	mov	r3, r4
 8006478:	71fb      	strb	r3, [r7, #7]
 800647a:	4603      	mov	r3, r0
 800647c:	71bb      	strb	r3, [r7, #6]
 800647e:	460b      	mov	r3, r1
 8006480:	717b      	strb	r3, [r7, #5]
 8006482:	4613      	mov	r3, r2
 8006484:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef sDate;

  sDate.WeekDay = day; //RTC_WEEKDAY_TUESDAY;
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	733b      	strb	r3, [r7, #12]
  sDate.Month   = month; //RTC_MONTH_SEPTEMBER;
 800648a:	79bb      	ldrb	r3, [r7, #6]
 800648c:	737b      	strb	r3, [r7, #13]
  sDate.Date    = date;   //28;
 800648e:	797b      	ldrb	r3, [r7, #5]
 8006490:	73bb      	strb	r3, [r7, #14]
  sDate.Year    = year;   //21;
 8006492:	793b      	ldrb	r3, [r7, #4]
 8006494:	73fb      	strb	r3, [r7, #15]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8006496:	f107 030c 	add.w	r3, r7, #12
 800649a:	2200      	movs	r2, #0
 800649c:	4619      	mov	r1, r3
 800649e:	4808      	ldr	r0, [pc, #32]	; (80064c0 <Set_Date+0x58>)
 80064a0:	f008 fe90 	bl	800f1c4 <HAL_RTC_SetDate>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <Set_Date+0x46>
  {
    Error_Handler();
 80064aa:	f001 fb4f 	bl	8007b4c <Error_Handler>
  }

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xDEADBEEF); // backup register
 80064ae:	4a05      	ldr	r2, [pc, #20]	; (80064c4 <Set_Date+0x5c>)
 80064b0:	2100      	movs	r1, #0
 80064b2:	4803      	ldr	r0, [pc, #12]	; (80064c0 <Set_Date+0x58>)
 80064b4:	f009 f80e 	bl	800f4d4 <HAL_RTCEx_BKUPWrite>
}
 80064b8:	bf00      	nop
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd90      	pop	{r4, r7, pc}
 80064c0:	20004d68 	.word	0x20004d68
 80064c4:	deadbeef 	.word	0xdeadbeef

080064c8 <Get_Time>:

void Get_Time()
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	; 0x28
 80064cc:	af02      	add	r7, sp, #8
	 RTC_DateTypeDef gDate;
	 RTC_TimeTypeDef gTime;

	 /* Get the RTC current Time */
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80064ce:	1d3b      	adds	r3, r7, #4
 80064d0:	2200      	movs	r2, #0
 80064d2:	4619      	mov	r1, r3
 80064d4:	4812      	ldr	r0, [pc, #72]	; (8006520 <Get_Time+0x58>)
 80064d6:	f008 fe17 	bl	800f108 <HAL_RTC_GetTime>

	 /* Get the RTC current Date */
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80064da:	f107 031c 	add.w	r3, r7, #28
 80064de:	2200      	movs	r2, #0
 80064e0:	4619      	mov	r1, r3
 80064e2:	480f      	ldr	r0, [pc, #60]	; (8006520 <Get_Time+0x58>)
 80064e4:	f008 ff16 	bl	800f314 <HAL_RTC_GetDate>

	 /* Display time Format: hh:mm:ss */
	 sprintf((char *)&gstModel.atime,"%02d:%02d:%02d", gTime.Hours, gTime.Minutes, gTime.Seconds);
 80064e8:	793b      	ldrb	r3, [r7, #4]
 80064ea:	461a      	mov	r2, r3
 80064ec:	797b      	ldrb	r3, [r7, #5]
 80064ee:	4619      	mov	r1, r3
 80064f0:	79bb      	ldrb	r3, [r7, #6]
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	460b      	mov	r3, r1
 80064f6:	490b      	ldr	r1, [pc, #44]	; (8006524 <Get_Time+0x5c>)
 80064f8:	480b      	ldr	r0, [pc, #44]	; (8006528 <Get_Time+0x60>)
 80064fa:	f016 fcab 	bl	801ce54 <siprintf>

	 /* Display date Format: mm-dd-yy */
	 sprintf((char *)&gstModel.adate,"%02d-%02d-%2d", gDate.Month, gDate.Date, 2000 + gDate.Year);
 80064fe:	7f7b      	ldrb	r3, [r7, #29]
 8006500:	461a      	mov	r2, r3
 8006502:	7fbb      	ldrb	r3, [r7, #30]
 8006504:	4619      	mov	r1, r3
 8006506:	7ffb      	ldrb	r3, [r7, #31]
 8006508:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	460b      	mov	r3, r1
 8006510:	4906      	ldr	r1, [pc, #24]	; (800652c <Get_Time+0x64>)
 8006512:	4807      	ldr	r0, [pc, #28]	; (8006530 <Get_Time+0x68>)
 8006514:	f016 fc9e 	bl	801ce54 <siprintf>
}
 8006518:	bf00      	nop
 800651a:	3720      	adds	r7, #32
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20004d68 	.word	0x20004d68
 8006524:	08022148 	.word	0x08022148
 8006528:	20001d4b 	.word	0x20001d4b
 800652c:	08022158 	.word	0x08022158
 8006530:	20001d55 	.word	0x20001d55

08006534 <Monitor>:

int Monitor()
{
 8006534:	b580      	push	{r7, lr}
 8006536:	af00      	add	r7, sp, #0
	ReadAdc1Channels();
 8006538:	f7fb f838 	bl	80015ac <ReadAdc1Channels>
	ReadAdc3Channels();
 800653c:	f7fb f9a4 	bl	8001888 <ReadAdc3Channels>
	return 0;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800654c:	b092      	sub	sp, #72	; 0x48
 800654e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006550:	f002 fc47 	bl	8008de2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006554:	f000 fa18 	bl	8006988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006558:	f000 ffca 	bl	80074f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800655c:	f000 ff92 	bl	8007484 <MX_DMA_Init>
  MX_DAC_Init();
 8006560:	f000 fc44 	bl	8006dec <MX_DAC_Init>
  MX_I2C2_Init();
 8006564:	f000 fc6c 	bl	8006e40 <MX_I2C2_Init>
  MX_I2C3_Init();
 8006568:	f000 fcb0 	bl	8006ecc <MX_I2C3_Init>
  MX_SDMMC2_SD_Init();
 800656c:	f000 fd14 	bl	8006f98 <MX_SDMMC2_SD_Init>
  MX_SPI1_Init();
 8006570:	f000 fd34 	bl	8006fdc <MX_SPI1_Init>
  MX_SPI3_Init();
 8006574:	f000 fd70 	bl	8007058 <MX_SPI3_Init>
  MX_TIM14_Init();
 8006578:	f000 fea6 	bl	80072c8 <MX_TIM14_Init>
  MX_UART5_Init();
 800657c:	f000 fef2 	bl	8007364 <MX_UART5_Init>
  MX_UART7_Init();
 8006580:	f000 ff20 	bl	80073c4 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8006584:	f015 f92c 	bl	801b7e0 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8006588:	f000 fda4 	bl	80070d4 <MX_TIM2_Init>
  MX_TIM5_Init();
 800658c:	f000 fe18 	bl	80071c0 <MX_TIM5_Init>
  MX_TIM7_Init();
 8006590:	f000 fe64 	bl	800725c <MX_TIM7_Init>
  MX_FATFS_Init();
 8006594:	f00f f894 	bl	80156c0 <MX_FATFS_Init>
  MX_RTC_Init();
 8006598:	f000 fcd8 	bl	8006f4c <MX_RTC_Init>
  MX_ADC1_Init();
 800659c:	f000 faaa 	bl	8006af4 <MX_ADC1_Init>
  MX_ADC3_Init();
 80065a0:	f000 fb4e 	bl	8006c40 <MX_ADC3_Init>
  MX_UART8_Init();
 80065a4:	f000 ff3e 	bl	8007424 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */

  wdi_flag = true;  //Enables feeding EWDT
 80065a8:	4b6a      	ldr	r3, [pc, #424]	; (8006754 <main+0x20c>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	701a      	strb	r2, [r3, #0]

  Adc1Init();
 80065ae:	f7fa fd55 	bl	800105c <Adc1Init>
  //  Adc3Init();
  HAL_ADC_Start(&hadc1);
 80065b2:	4869      	ldr	r0, [pc, #420]	; (8006758 <main+0x210>)
 80065b4:	f002 fcda 	bl	8008f6c <HAL_ADC_Start>

  // Starts the DAC
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);   //Added by Gio  10/6/21
 80065b8:	2100      	movs	r1, #0
 80065ba:	4868      	ldr	r0, [pc, #416]	; (800675c <main+0x214>)
 80065bc:	f003 fb65 	bl	8009c8a <HAL_DAC_Start>

  //Added by Gio 10/5/21
  cprtsystem_init();
 80065c0:	f7fc fee8 	bl	8003394 <cprtsystem_init>
  UartPrintf("CPRT System Initialization Started\n");
 80065c4:	4866      	ldr	r0, [pc, #408]	; (8006760 <main+0x218>)
 80065c6:	f7ff fb87 	bl	8005cd8 <UartPrintf>

  //UartPrintf("Initialization Started\n");
  GetMinuteCounterFromEeprom( );
 80065ca:	f7fb ff35 	bl	8002438 <GetMinuteCounterFromEeprom>
  delayWd100ms( 1 );
 80065ce:	2001      	movs	r0, #1
 80065d0:	f7ff fcf0 	bl	8005fb4 <delayWd100ms>
  GetEventCounterFromEeprom( );
 80065d4:	f7fb ff40 	bl	8002458 <GetEventCounterFromEeprom>
  delayWd100ms( 1 );
 80065d8:	2001      	movs	r0, #1
 80065da:	f7ff fceb 	bl	8005fb4 <delayWd100ms>
  GetMfgDateFromEeprom( );
 80065de:	f7fc f9af 	bl	8002940 <GetMfgDateFromEeprom>
  delayWd100ms( 1 );
 80065e2:	2001      	movs	r0, #1
 80065e4:	f7ff fce6 	bl	8005fb4 <delayWd100ms>
  GetSerialNumberFromEeprom( );
 80065e8:	f7fc f9ba 	bl	8002960 <GetSerialNumberFromEeprom>
  delayWd100ms( 1 );
 80065ec:	2001      	movs	r0, #1
 80065ee:	f7ff fce1 	bl	8005fb4 <delayWd100ms>

  //Added the checking to do the initlog
  uint32_t minuteCount = GetMinuteCount();
 80065f2:	f001 fa7f 	bl	8007af4 <GetMinuteCount>
 80065f6:	62f8      	str	r0, [r7, #44]	; 0x2c

  if(minuteCount >= 0x025DFBE0) // TODO: value check coming from data showed 27579 x 1440, need to confirm this value
 80065f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fa:	4a5a      	ldr	r2, [pc, #360]	; (8006764 <main+0x21c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d901      	bls.n	8006604 <main+0xbc>
  {
      InitializeLog( );
 8006600:	f7fc f970 	bl	80028e4 <InitializeLog>
  }

  delayWd100ms( 5 );
 8006604:	2005      	movs	r0, #5
 8006606:	f7ff fcd5 	bl	8005fb4 <delayWd100ms>

  /*Debug Uart using UART5*/
  memset(commandBuf, 0, MAX_COMMAND_LENGTH);
 800660a:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 800660e:	2100      	movs	r1, #0
 8006610:	4855      	ldr	r0, [pc, #340]	; (8006768 <main+0x220>)
 8006612:	f015 febf 	bl	801c394 <memset>
  __HAL_UART_ENABLE_IT(&debugUart, UART_IT_IDLE);  // Enable UART idle interrupt
 8006616:	4b55      	ldr	r3, [pc, #340]	; (800676c <main+0x224>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	4b53      	ldr	r3, [pc, #332]	; (800676c <main+0x224>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f042 0210 	orr.w	r2, r2, #16
 8006624:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&debugUart, UART_IT_TC);    // Enable UART Tx Complete interrupt
 8006626:	4b51      	ldr	r3, [pc, #324]	; (800676c <main+0x224>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	4b4f      	ldr	r3, [pc, #316]	; (800676c <main+0x224>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006634:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&debugUart, uartReceiveBuff, UART_RX_DMA_BUFFER_SIZE ); // Set up the IT UART transmission to move the received
 8006636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800663a:	494d      	ldr	r1, [pc, #308]	; (8006770 <main+0x228>)
 800663c:	484b      	ldr	r0, [pc, #300]	; (800676c <main+0x224>)
 800663e:	f00b feaf 	bl	80123a0 <HAL_UART_Receive_IT>
                                                                                // data of serial port to uartReceiveBuff,
                                                                                // UART_RX_DMA_BUFFER_SIZE bytes at a time

  /*GUI Uart suing UART8 */
  memset(guiCommandBuf, 0, MAX_COMMAND_LENGTH);
 8006642:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8006646:	2100      	movs	r1, #0
 8006648:	484a      	ldr	r0, [pc, #296]	; (8006774 <main+0x22c>)
 800664a:	f015 fea3 	bl	801c394 <memset>
  __HAL_UART_ENABLE_IT(&guiUart, UART_IT_IDLE);  // Enable UART idle interrupt
 800664e:	4b4a      	ldr	r3, [pc, #296]	; (8006778 <main+0x230>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	4b48      	ldr	r3, [pc, #288]	; (8006778 <main+0x230>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f042 0210 	orr.w	r2, r2, #16
 800665c:	601a      	str	r2, [r3, #0]
  //__HAL_UART_ENABLE_IT(&guiUart, UART_IT_TC);    // Enable UART Tx Complete interrupt
  HAL_UART_Receive_IT(&guiUart, guiUartReceiveBuff, UART_RX_DMA_BUFFER_SIZE ); // Set up the IT UART transmission to move the received
 800665e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006662:	4946      	ldr	r1, [pc, #280]	; (800677c <main+0x234>)
 8006664:	4844      	ldr	r0, [pc, #272]	; (8006778 <main+0x230>)
 8006666:	f00b fe9b 	bl	80123a0 <HAL_UART_Receive_IT>
   * TIM7:  generate 0.5ms to use for 5ms main loop
   * TIM14: generate 255Hz pwm for Fan
   */

  //Start internal 1us timer
  HAL_TIM_Base_Start(&htim5);                // Start timer TIM5 for 1us timer
 800666a:	4845      	ldr	r0, [pc, #276]	; (8006780 <main+0x238>)
 800666c:	f00a fb8e 	bl	8010d8c <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start_IT(&htim7);             // Start timer TIM7 for half millisecond timer
 8006670:	4844      	ldr	r0, [pc, #272]	; (8006784 <main+0x23c>)
 8006672:	f00a fbfb 	bl	8010e6c <HAL_TIM_Base_Start_IT>
                                             // TIM7 is driven by APB1 clock of 108 MHz reload is set Prescale = 108, ARR= 499+1
                                             // for a 0.5 ms period (1/(10^6/500) * 10^3 = 0.5)

  //Start pwm for buzzer
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8006676:	210c      	movs	r1, #12
 8006678:	4843      	ldr	r0, [pc, #268]	; (8006788 <main+0x240>)
 800667a:	f00a fcd1 	bl	8011020 <HAL_TIM_PWM_Start>

  //Start pwm for fan-ctrl
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800667e:	2100      	movs	r1, #0
 8006680:	4842      	ldr	r0, [pc, #264]	; (800678c <main+0x244>)
 8006682:	f00a fccd 	bl	8011020 <HAL_TIM_PWM_Start>

  InitEepromTxQueue();
 8006686:	f7fb fef7 	bl	8002478 <InitEepromTxQueue>

  InitUartTxQueue();     // Initialize queue for transmitting data to UART
 800668a:	f7ff fa05 	bl	8005a98 <InitUartTxQueue>

  UartPrintf("");
 800668e:	4840      	ldr	r0, [pc, #256]	; (8006790 <main+0x248>)
 8006690:	f7ff fb22 	bl	8005cd8 <UartPrintf>

  InterpInit();          // Initialize command interpreter
 8006694:	f7fe f994 	bl	80049c0 <InterpInit>

  RegisterAllCommands(); // Register commands with interpreter
 8006698:	f7ff f86e 	bl	8005778 <RegisterAllCommands>

  PrintManagerInit();
 800669c:	f7fe f9ca 	bl	8004a34 <PrintManagerInit>

  if( HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) !=  0xDEADBEEF )
 80066a0:	2100      	movs	r1, #0
 80066a2:	483c      	ldr	r0, [pc, #240]	; (8006794 <main+0x24c>)
 80066a4:	f008 ff30 	bl	800f508 <HAL_RTCEx_BKUPRead>
 80066a8:	4603      	mov	r3, r0
 80066aa:	4a3b      	ldr	r2, [pc, #236]	; (8006798 <main+0x250>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d00a      	beq.n	80066c6 <main+0x17e>
  {
	  Set_Time( 23, 15, 0 );
 80066b0:	2200      	movs	r2, #0
 80066b2:	210f      	movs	r1, #15
 80066b4:	2017      	movs	r0, #23
 80066b6:	f7ff feab 	bl	8006410 <Set_Time>
	  Set_Date( RTC_WEEKDAY_TUESDAY, RTC_MONTH_SEPTEMBER, 28, 21 );
 80066ba:	2315      	movs	r3, #21
 80066bc:	221c      	movs	r2, #28
 80066be:	2109      	movs	r1, #9
 80066c0:	2002      	movs	r0, #2
 80066c2:	f7ff fed1 	bl	8006468 <Set_Date>
  }

  HAL_Delay(500);
 80066c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80066ca:	f002 fbe7 	bl	8008e9c <HAL_Delay>

  FRESULT res;                                          /* FatFs function common result code */
  uint32_t byteswritten;                                /* File write/read counts */
  uint8_t wtext[] = "Text line added at power up.\n";     /* File write buffer */
 80066ce:	4b33      	ldr	r3, [pc, #204]	; (800679c <main+0x254>)
 80066d0:	1d3c      	adds	r4, r7, #4
 80066d2:	461d      	mov	r5, r3
 80066d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80066dc:	c407      	stmia	r4!, {r0, r1, r2}
 80066de:	8023      	strh	r3, [r4, #0]

  /*##-2- Register the file system object to the FatFs module ##############*/
  if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 80066e0:	2200      	movs	r2, #0
 80066e2:	492f      	ldr	r1, [pc, #188]	; (80067a0 <main+0x258>)
 80066e4:	482f      	ldr	r0, [pc, #188]	; (80067a4 <main+0x25c>)
 80066e6:	f014 fa7b 	bl	801abe0 <f_mount>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <main+0x1ae>
  {
      /* FatFs Initialization Error */
	  Error_Handler();
 80066f0:	f001 fa2c 	bl	8007b4c <Error_Handler>
 80066f4:	e06a      	b.n	80067cc <main+0x284>
  }
  else
  {
	  UartPrintf("File system Mounted Success!!!\r\n");
 80066f6:	482c      	ldr	r0, [pc, #176]	; (80067a8 <main+0x260>)
 80066f8:	f7ff faee 	bl	8005cd8 <UartPrintf>
	  UartPrintf("Create, Open and Write text line to the file!!!\r\n");
 80066fc:	482b      	ldr	r0, [pc, #172]	; (80067ac <main+0x264>)
 80066fe:	f7ff faeb 	bl	8005cd8 <UartPrintf>

	  /*##-4- Create and Open a new text file object with write access #####*/
	  res = f_open(&MyFile, "STM32.TXT", FA_OPEN_APPEND | FA_WRITE);
 8006702:	2232      	movs	r2, #50	; 0x32
 8006704:	492a      	ldr	r1, [pc, #168]	; (80067b0 <main+0x268>)
 8006706:	482b      	ldr	r0, [pc, #172]	; (80067b4 <main+0x26c>)
 8006708:	f014 fab0 	bl	801ac6c <f_open>
 800670c:	4603      	mov	r3, r0
 800670e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	  if( res != FR_OK)
 8006712:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006716:	2b00      	cmp	r3, #0
 8006718:	d005      	beq.n	8006726 <main+0x1de>
	  {
	      /* 'STM32.TXT' file Open for write Error */
		  UartPrintf("File created error!!!\r\n");
 800671a:	4827      	ldr	r0, [pc, #156]	; (80067b8 <main+0x270>)
 800671c:	f7ff fadc 	bl	8005cd8 <UartPrintf>
		  Error_Handler();
 8006720:	f001 fa14 	bl	8007b4c <Error_Handler>
 8006724:	e052      	b.n	80067cc <main+0x284>
	  }
	  else
	  {
		  /*##-5- Write data to the text file ################################*/
		  res = f_write(&MyFile, wtext, sizeof(wtext), (void *)&byteswritten);
 8006726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800672a:	1d39      	adds	r1, r7, #4
 800672c:	221e      	movs	r2, #30
 800672e:	4821      	ldr	r0, [pc, #132]	; (80067b4 <main+0x26c>)
 8006730:	f014 fcf7 	bl	801b122 <f_write>
 8006734:	4603      	mov	r3, r0
 8006736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		  if((byteswritten == 0) || (res != FR_OK))
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	2b00      	cmp	r3, #0
 800673e:	d003      	beq.n	8006748 <main+0x200>
 8006740:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006744:	2b00      	cmp	r3, #0
 8006746:	d03b      	beq.n	80067c0 <main+0x278>
	      {
			  /* 'STM32.TXT' file Write or EOF Error */
			  UartPrintf("Card Write Error!!!\r\n");
 8006748:	481c      	ldr	r0, [pc, #112]	; (80067bc <main+0x274>)
 800674a:	f7ff fac5 	bl	8005cd8 <UartPrintf>
			  Error_Handler();
 800674e:	f001 f9fd 	bl	8007b4c <Error_Handler>
 8006752:	e03b      	b.n	80067cc <main+0x284>
 8006754:	20001b4e 	.word	0x20001b4e
 8006758:	20004a04 	.word	0x20004a04
 800675c:	20004cf4 	.word	0x20004cf4
 8006760:	08022168 	.word	0x08022168
 8006764:	025dfbdf 	.word	0x025dfbdf
 8006768:	200045ec 	.word	0x200045ec
 800676c:	20004980 	.word	0x20004980
 8006770:	200043ec 	.word	0x200043ec
 8006774:	20004a94 	.word	0x20004a94
 8006778:	20006df0 	.word	0x20006df0
 800677c:	20006f24 	.word	0x20006f24
 8006780:	2000484c 	.word	0x2000484c
 8006784:	20007170 	.word	0x20007170
 8006788:	20006ed8 	.word	0x20006ed8
 800678c:	20007124 	.word	0x20007124
 8006790:	08021f98 	.word	0x08021f98
 8006794:	20004d68 	.word	0x20004d68
 8006798:	deadbeef 	.word	0xdeadbeef
 800679c:	080222e8 	.word	0x080222e8
 80067a0:	200075c8 	.word	0x200075c8
 80067a4:	20004d88 	.word	0x20004d88
 80067a8:	0802218c 	.word	0x0802218c
 80067ac:	080221b0 	.word	0x080221b0
 80067b0:	080221e4 	.word	0x080221e4
 80067b4:	20005dc0 	.word	0x20005dc0
 80067b8:	080221f0 	.word	0x080221f0
 80067bc:	08022208 	.word	0x08022208
		  }
		  else
		  {
			  /*##-6- Close the open text file #################################*/
			  UartPrintf("Card Write Success and Close The File!!!\r\n");
 80067c0:	485f      	ldr	r0, [pc, #380]	; (8006940 <main+0x3f8>)
 80067c2:	f7ff fa89 	bl	8005cd8 <UartPrintf>
			  f_close(&MyFile);
 80067c6:	485f      	ldr	r0, [pc, #380]	; (8006944 <main+0x3fc>)
 80067c8:	f014 febd 	bl	801b546 <f_close>
		  }
	   }
  }

  Model_Init();
 80067cc:	f7fd fc9e 	bl	800410c <Model_Init>

  Get_Time(); //get time from RTC to update the Model time and date
 80067d0:	f7ff fe7a 	bl	80064c8 <Get_Time>

  Display_Init();
 80067d4:	f7fb fbe2 	bl	8001f9c <Display_Init>

  Set_Fan_ONOFF( true );
 80067d8:	2001      	movs	r0, #1
 80067da:	f7fc fd9d 	bl	8003318 <Set_Fan_ONOFF>
  
  //Set_DAC_Voltage(1.8);  //GG 10/05/21 No need to Initialized DAC here

  UartPrintf("Initialization Complete -- Version: %s %s\n", swVersionStrings[CURRENT_SW_VERSION_ID], VERSION_DETAILS);
 80067de:	4b5a      	ldr	r3, [pc, #360]	; (8006948 <main+0x400>)
 80067e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e2:	4a5a      	ldr	r2, [pc, #360]	; (800694c <main+0x404>)
 80067e4:	4619      	mov	r1, r3
 80067e6:	485a      	ldr	r0, [pc, #360]	; (8006950 <main+0x408>)
 80067e8:	f7ff fa76 	bl	8005cd8 <UartPrintf>
  UartPrintf("Minutes of In Services: %d\n", minuteCount);
 80067ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067ee:	4859      	ldr	r0, [pc, #356]	; (8006954 <main+0x40c>)
 80067f0:	f7ff fa72 	bl	8005cd8 <UartPrintf>
  
  fiveMsTick    = false; // Clear 5 ms tick right before entering while loop to ensure a full 5 ms between the first two
 80067f4:	4b58      	ldr	r3, [pc, #352]	; (8006958 <main+0x410>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	701a      	strb	r2, [r3, #0]
  oneSecondTick = false;
 80067fa:	4b58      	ldr	r3, [pc, #352]	; (800695c <main+0x414>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if( fiveMsTick == true ) // 5 ms processing
 8006800:	4b55      	ldr	r3, [pc, #340]	; (8006958 <main+0x410>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d008      	beq.n	800681a <main+0x2d2>
	  {
	      fiveMsTick = false;
 8006808:	4b53      	ldr	r3, [pc, #332]	; (8006958 <main+0x410>)
 800680a:	2200      	movs	r2, #0
 800680c:	701a      	strb	r2, [r3, #0]

	      Monitor();
 800680e:	f7ff fe91 	bl	8006534 <Monitor>

	      Display_Manager();
 8006812:	f7fb fbe9 	bl	8001fe8 <Display_Manager>

	      PrintManager();
 8006816:	f7fe f91f 	bl	8004a58 <PrintManager>
	  }

	  if( oneSecondTick == true)
 800681a:	4b50      	ldr	r3, [pc, #320]	; (800695c <main+0x414>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d045      	beq.n	80068ae <main+0x366>
	  {
		  oneSecondTick = false;
 8006822:	4b4e      	ldr	r3, [pc, #312]	; (800695c <main+0x414>)
 8006824:	2200      	movs	r2, #0
 8006826:	701a      	strb	r2, [r3, #0]
		  Get_Time();
 8006828:	f7ff fe4e 	bl	80064c8 <Get_Time>
		  Display_Request_Refresh();
 800682c:	f7fb fdac 	bl	8002388 <Display_Request_Refresh>

		  if(gstModel.bDisplayTime == true)
 8006830:	4b4b      	ldr	r3, [pc, #300]	; (8006960 <main+0x418>)
 8006832:	795b      	ldrb	r3, [r3, #5]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d007      	beq.n	8006848 <main+0x300>
		  {
			  UartPrintf("%s\n", gstModel.atime);
 8006838:	494a      	ldr	r1, [pc, #296]	; (8006964 <main+0x41c>)
 800683a:	484b      	ldr	r0, [pc, #300]	; (8006968 <main+0x420>)
 800683c:	f7ff fa4c 	bl	8005cd8 <UartPrintf>
			  UartPrintf("%s\n", gstModel.adate);
 8006840:	494a      	ldr	r1, [pc, #296]	; (800696c <main+0x424>)
 8006842:	4849      	ldr	r0, [pc, #292]	; (8006968 <main+0x420>)
 8006844:	f7ff fa48 	bl	8005cd8 <UartPrintf>
		  }

		  if(gstModel.bPressureData == true)
 8006848:	4b45      	ldr	r3, [pc, #276]	; (8006960 <main+0x418>)
 800684a:	7a5b      	ldrb	r3, [r3, #9]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d02e      	beq.n	80068ae <main+0x366>
		  {
			  //send back Pressure data from 4 sensors
			  GuiUartPrintf("%9.4f,%9.4f,%9.4f, %9.4f\n",
						     GetCalcMmhgSensorPressure1( ), GetCalcMmhgSensorPressure2( ),
 8006850:	f7fa fd4a 	bl	80012e8 <GetCalcMmhgSensorPressure1>
 8006854:	ee10 3a10 	vmov	r3, s0
			  GuiUartPrintf("%9.4f,%9.4f,%9.4f, %9.4f\n",
 8006858:	4618      	mov	r0, r3
 800685a:	f7f9 fead 	bl	80005b8 <__aeabi_f2d>
 800685e:	4682      	mov	sl, r0
 8006860:	468b      	mov	fp, r1
						     GetCalcMmhgSensorPressure1( ), GetCalcMmhgSensorPressure2( ),
 8006862:	f7fa fc75 	bl	8001150 <GetCalcMmhgSensorPressure2>
 8006866:	ee10 3a10 	vmov	r3, s0
			  GuiUartPrintf("%9.4f,%9.4f,%9.4f, %9.4f\n",
 800686a:	4618      	mov	r0, r3
 800686c:	f7f9 fea4 	bl	80005b8 <__aeabi_f2d>
 8006870:	4604      	mov	r4, r0
 8006872:	460d      	mov	r5, r1
						     GetCalcMmhgSensorPressure3( ), GetCalcMmhgSensorPressure4( ) );
 8006874:	f7fa fcb0 	bl	80011d8 <GetCalcMmhgSensorPressure3>
 8006878:	ee10 3a10 	vmov	r3, s0
			  GuiUartPrintf("%9.4f,%9.4f,%9.4f, %9.4f\n",
 800687c:	4618      	mov	r0, r3
 800687e:	f7f9 fe9b 	bl	80005b8 <__aeabi_f2d>
 8006882:	4680      	mov	r8, r0
 8006884:	4689      	mov	r9, r1
						     GetCalcMmhgSensorPressure3( ), GetCalcMmhgSensorPressure4( ) );
 8006886:	f7fa fceb 	bl	8001260 <GetCalcMmhgSensorPressure4>
 800688a:	ee10 3a10 	vmov	r3, s0
			  GuiUartPrintf("%9.4f,%9.4f,%9.4f, %9.4f\n",
 800688e:	4618      	mov	r0, r3
 8006890:	f7f9 fe92 	bl	80005b8 <__aeabi_f2d>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800689c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80068a0:	e9cd 4500 	strd	r4, r5, [sp]
 80068a4:	4652      	mov	r2, sl
 80068a6:	465b      	mov	r3, fp
 80068a8:	4831      	ldr	r0, [pc, #196]	; (8006970 <main+0x428>)
 80068aa:	f7ff fa93 	bl	8005dd4 <GuiUartPrintf>
		  }
	  }


	  if(bPfcLoadEnable == true)
 80068ae:	4b31      	ldr	r3, [pc, #196]	; (8006974 <main+0x42c>)
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d01f      	beq.n	80068f6 <main+0x3ae>
	  {
		  //Debounce PFC Load Enable signal for 30ms
		  if( uPfcLoadEnTimeDB && (Get_SysTick() - uPfcLoadEnTimeDB >= SIGNAL_DEBOUNCE_30MS))
 80068b6:	4b30      	ldr	r3, [pc, #192]	; (8006978 <main+0x430>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d01b      	beq.n	80068f6 <main+0x3ae>
 80068be:	f7ff fb41 	bl	8005f44 <Get_SysTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	4b2c      	ldr	r3, [pc, #176]	; (8006978 <main+0x430>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b1d      	cmp	r3, #29
 80068cc:	d913      	bls.n	80068f6 <main+0x3ae>
		  {
			  if(IsPfcLoadEnLow() == true)
 80068ce:	f7ff fb41 	bl	8005f54 <IsPfcLoadEnLow>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d008      	beq.n	80068ea <main+0x3a2>
			  {
				  SetPfcLoadEnable( true );
 80068d8:	2001      	movs	r0, #1
 80068da:	f7fc febb 	bl	8003654 <SetPfcLoadEnable>
				  HAL_GPIO_WritePin(GPIOD, LED_Y_Pin, true);  //added for troubleshoot purposes GG 100521
 80068de:	2201      	movs	r2, #1
 80068e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80068e4:	4825      	ldr	r0, [pc, #148]	; (800697c <main+0x434>)
 80068e6:	f004 f86f 	bl	800a9c8 <HAL_GPIO_WritePin>
			  }

			  uPfcLoadEnTimeDB = 0;
 80068ea:	4b23      	ldr	r3, [pc, #140]	; (8006978 <main+0x430>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	601a      	str	r2, [r3, #0]
			  bPfcLoadEnable   = false;
 80068f0:	4b20      	ldr	r3, [pc, #128]	; (8006974 <main+0x42c>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(bPowerFailWarn == true)
 80068f6:	4b22      	ldr	r3, [pc, #136]	; (8006980 <main+0x438>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d019      	beq.n	8006932 <main+0x3ea>
	  {
		  //Debounce Power Failure Warning signal for 30ms
		  if( uPowerFailWarnTimeDB && (Get_SysTick() - uPowerFailWarnTimeDB >= SIGNAL_DEBOUNCE_30MS))
 80068fe:	4b21      	ldr	r3, [pc, #132]	; (8006984 <main+0x43c>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d015      	beq.n	8006932 <main+0x3ea>
 8006906:	f7ff fb1d 	bl	8005f44 <Get_SysTick>
 800690a:	4602      	mov	r2, r0
 800690c:	4b1d      	ldr	r3, [pc, #116]	; (8006984 <main+0x43c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	2b1d      	cmp	r3, #29
 8006914:	d90d      	bls.n	8006932 <main+0x3ea>
		  {
			  if(IsPfcPowerFailWarnLow() == true)
 8006916:	f7ff fb2f 	bl	8005f78 <IsPfcPowerFailWarnLow>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <main+0x3de>
			  {
				  SetPfcPowerFailWarn( true );
 8006920:	2001      	movs	r0, #1
 8006922:	f7fc fe87 	bl	8003634 <SetPfcPowerFailWarn>
			  }

			  uPowerFailWarnTimeDB = 0;
 8006926:	4b17      	ldr	r3, [pc, #92]	; (8006984 <main+0x43c>)
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]
			  bPowerFailWarn   = false;
 800692c:	4b14      	ldr	r3, [pc, #80]	; (8006980 <main+0x438>)
 800692e:	2200      	movs	r2, #0
 8006930:	701a      	strb	r2, [r3, #0]
	  }

	  // Feed the dog.
	  //HAL_IWDG_Refresh( &hiwdg );
	  
	  Refresh_Hardware_WDT();
 8006932:	f7ff fb33 	bl	8005f9c <Refresh_Hardware_WDT>

	  //Debug command process
  	  CommandProcessing();
 8006936:	f7ff fb5f 	bl	8005ff8 <CommandProcessing>

  	  //Gui Command process
  	  GuiCommandProcessing();
 800693a:	f7ff fb8b 	bl	8006054 <GuiCommandProcessing>
	  if( fiveMsTick == true ) // 5 ms processing
 800693e:	e75f      	b.n	8006800 <main+0x2b8>
 8006940:	08022220 	.word	0x08022220
 8006944:	20005dc0 	.word	0x20005dc0
 8006948:	200001f4 	.word	0x200001f4
 800694c:	0802224c 	.word	0x0802224c
 8006950:	08022280 	.word	0x08022280
 8006954:	080222ac 	.word	0x080222ac
 8006958:	20001b54 	.word	0x20001b54
 800695c:	20001b58 	.word	0x20001b58
 8006960:	20001d40 	.word	0x20001d40
 8006964:	20001d4b 	.word	0x20001d4b
 8006968:	080222c8 	.word	0x080222c8
 800696c:	20001d55 	.word	0x20001d55
 8006970:	080222cc 	.word	0x080222cc
 8006974:	20001b66 	.word	0x20001b66
 8006978:	20001b68 	.word	0x20001b68
 800697c:	40020c00 	.word	0x40020c00
 8006980:	20001b6c 	.word	0x20001b6c
 8006984:	20001b70 	.word	0x20001b70

08006988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b0b4      	sub	sp, #208	; 0xd0
 800698c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800698e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006992:	2230      	movs	r2, #48	; 0x30
 8006994:	2100      	movs	r1, #0
 8006996:	4618      	mov	r0, r3
 8006998:	f015 fcfc 	bl	801c394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800699c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	605a      	str	r2, [r3, #4]
 80069a6:	609a      	str	r2, [r3, #8]
 80069a8:	60da      	str	r2, [r3, #12]
 80069aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80069ac:	f107 030c 	add.w	r3, r7, #12
 80069b0:	2280      	movs	r2, #128	; 0x80
 80069b2:	2100      	movs	r1, #0
 80069b4:	4618      	mov	r0, r3
 80069b6:	f015 fced 	bl	801c394 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80069ba:	f007 fa05 	bl	800ddc8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80069be:	4b4a      	ldr	r3, [pc, #296]	; (8006ae8 <SystemClock_Config+0x160>)
 80069c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c2:	4a49      	ldr	r2, [pc, #292]	; (8006ae8 <SystemClock_Config+0x160>)
 80069c4:	f023 0318 	bic.w	r3, r3, #24
 80069c8:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80069ca:	4b47      	ldr	r3, [pc, #284]	; (8006ae8 <SystemClock_Config+0x160>)
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	4a46      	ldr	r2, [pc, #280]	; (8006ae8 <SystemClock_Config+0x160>)
 80069d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069d4:	6413      	str	r3, [r2, #64]	; 0x40
 80069d6:	4b44      	ldr	r3, [pc, #272]	; (8006ae8 <SystemClock_Config+0x160>)
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069de:	60bb      	str	r3, [r7, #8]
 80069e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80069e2:	4b42      	ldr	r3, [pc, #264]	; (8006aec <SystemClock_Config+0x164>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80069ea:	4a40      	ldr	r2, [pc, #256]	; (8006aec <SystemClock_Config+0x164>)
 80069ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069f0:	6013      	str	r3, [r2, #0]
 80069f2:	4b3e      	ldr	r3, [pc, #248]	; (8006aec <SystemClock_Config+0x164>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80069fa:	607b      	str	r3, [r7, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80069fe:	2305      	movs	r3, #5
 8006a00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006a04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006a12:	2302      	movs	r3, #2
 8006a14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006a18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006a1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006a20:	2304      	movs	r3, #4
 8006a22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 108;
 8006a26:	236c      	movs	r3, #108	; 0x6c
 8006a28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006a32:	2302      	movs	r3, #2
 8006a34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a38:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f007 fa23 	bl	800de88 <HAL_RCC_OscConfig>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8006a48:	f001 f880 	bl	8007b4c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006a4c:	f007 f9cc 	bl	800dde8 <HAL_PWREx_EnableOverDrive>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8006a56:	f001 f879 	bl	8007b4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006a5a:	230f      	movs	r3, #15
 8006a5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006a60:	2302      	movs	r3, #2
 8006a62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006a66:	2300      	movs	r3, #0
 8006a68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006a74:	2300      	movs	r3, #0
 8006a76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006a7a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006a7e:	2103      	movs	r1, #3
 8006a80:	4618      	mov	r0, r3
 8006a82:	f007 fca5 	bl	800e3d0 <HAL_RCC_ClockConfig>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8006a8c:	f001 f85e 	bl	8007b4c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART5
 8006a90:	4b17      	ldr	r3, [pc, #92]	; (8006af0 <SystemClock_Config+0x168>)
 8006a92:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8006a94:	23c0      	movs	r3, #192	; 0xc0
 8006a96:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8006a98:	2302      	movs	r3, #2
 8006a9a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006aa8:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8006aba:	2300      	movs	r3, #0
 8006abc:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8006abe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ac2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006acc:	f107 030c 	add.w	r3, r7, #12
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f007 fe7f 	bl	800e7d4 <HAL_RCCEx_PeriphCLKConfig>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8006adc:	f001 f836 	bl	8007b4c <Error_Handler>
  }
}
 8006ae0:	bf00      	nop
 8006ae2:	37d0      	adds	r7, #208	; 0xd0
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	40023800 	.word	0x40023800
 8006aec:	40007000 	.word	0x40007000
 8006af0:	0421b420 	.word	0x0421b420

08006af4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006afa:	463b      	mov	r3, r7
 8006afc:	2200      	movs	r2, #0
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	605a      	str	r2, [r3, #4]
 8006b02:	609a      	str	r2, [r3, #8]
 8006b04:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8006b06:	4b4b      	ldr	r3, [pc, #300]	; (8006c34 <MX_ADC1_Init+0x140>)
 8006b08:	4a4b      	ldr	r2, [pc, #300]	; (8006c38 <MX_ADC1_Init+0x144>)
 8006b0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006b0c:	4b49      	ldr	r3, [pc, #292]	; (8006c34 <MX_ADC1_Init+0x140>)
 8006b0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006b12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006b14:	4b47      	ldr	r3, [pc, #284]	; (8006c34 <MX_ADC1_Init+0x140>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8006b1a:	4b46      	ldr	r3, [pc, #280]	; (8006c34 <MX_ADC1_Init+0x140>)
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006b20:	4b44      	ldr	r3, [pc, #272]	; (8006c34 <MX_ADC1_Init+0x140>)
 8006b22:	2201      	movs	r2, #1
 8006b24:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006b26:	4b43      	ldr	r3, [pc, #268]	; (8006c34 <MX_ADC1_Init+0x140>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006b2e:	4b41      	ldr	r3, [pc, #260]	; (8006c34 <MX_ADC1_Init+0x140>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006b34:	4b3f      	ldr	r3, [pc, #252]	; (8006c34 <MX_ADC1_Init+0x140>)
 8006b36:	4a41      	ldr	r2, [pc, #260]	; (8006c3c <MX_ADC1_Init+0x148>)
 8006b38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006b3a:	4b3e      	ldr	r3, [pc, #248]	; (8006c34 <MX_ADC1_Init+0x140>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8006b40:	4b3c      	ldr	r3, [pc, #240]	; (8006c34 <MX_ADC1_Init+0x140>)
 8006b42:	2207      	movs	r2, #7
 8006b44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006b46:	4b3b      	ldr	r3, [pc, #236]	; (8006c34 <MX_ADC1_Init+0x140>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006b4e:	4b39      	ldr	r3, [pc, #228]	; (8006c34 <MX_ADC1_Init+0x140>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006b54:	4837      	ldr	r0, [pc, #220]	; (8006c34 <MX_ADC1_Init+0x140>)
 8006b56:	f002 f9c5 	bl	8008ee4 <HAL_ADC_Init>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8006b60:	f000 fff4 	bl	8007b4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006b64:	2305      	movs	r3, #5
 8006b66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006b70:	463b      	mov	r3, r7
 8006b72:	4619      	mov	r1, r3
 8006b74:	482f      	ldr	r0, [pc, #188]	; (8006c34 <MX_ADC1_Init+0x140>)
 8006b76:	f002 fc2f 	bl	80093d8 <HAL_ADC_ConfigChannel>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8006b80:	f000 ffe4 	bl	8007b4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006b84:	2306      	movs	r3, #6
 8006b86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8006b88:	2302      	movs	r3, #2
 8006b8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006b8c:	463b      	mov	r3, r7
 8006b8e:	4619      	mov	r1, r3
 8006b90:	4828      	ldr	r0, [pc, #160]	; (8006c34 <MX_ADC1_Init+0x140>)
 8006b92:	f002 fc21 	bl	80093d8 <HAL_ADC_ConfigChannel>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8006b9c:	f000 ffd6 	bl	8007b4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8006ba0:	2307      	movs	r3, #7
 8006ba2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006ba8:	463b      	mov	r3, r7
 8006baa:	4619      	mov	r1, r3
 8006bac:	4821      	ldr	r0, [pc, #132]	; (8006c34 <MX_ADC1_Init+0x140>)
 8006bae:	f002 fc13 	bl	80093d8 <HAL_ADC_ConfigChannel>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8006bb8:	f000 ffc8 	bl	8007b4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006bbc:	2308      	movs	r3, #8
 8006bbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8006bc0:	2304      	movs	r3, #4
 8006bc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006bc4:	463b      	mov	r3, r7
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	481a      	ldr	r0, [pc, #104]	; (8006c34 <MX_ADC1_Init+0x140>)
 8006bca:	f002 fc05 	bl	80093d8 <HAL_ADC_ConfigChannel>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d001      	beq.n	8006bd8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8006bd4:	f000 ffba 	bl	8007b4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8006bd8:	2309      	movs	r3, #9
 8006bda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8006bdc:	2305      	movs	r3, #5
 8006bde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006be0:	463b      	mov	r3, r7
 8006be2:	4619      	mov	r1, r3
 8006be4:	4813      	ldr	r0, [pc, #76]	; (8006c34 <MX_ADC1_Init+0x140>)
 8006be6:	f002 fbf7 	bl	80093d8 <HAL_ADC_ConfigChannel>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8006bf0:	f000 ffac 	bl	8007b4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006bf4:	230e      	movs	r3, #14
 8006bf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8006bf8:	2306      	movs	r3, #6
 8006bfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006bfc:	463b      	mov	r3, r7
 8006bfe:	4619      	mov	r1, r3
 8006c00:	480c      	ldr	r0, [pc, #48]	; (8006c34 <MX_ADC1_Init+0x140>)
 8006c02:	f002 fbe9 	bl	80093d8 <HAL_ADC_ConfigChannel>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8006c0c:	f000 ff9e 	bl	8007b4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006c10:	230f      	movs	r3, #15
 8006c12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8006c14:	2307      	movs	r3, #7
 8006c16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006c18:	463b      	mov	r3, r7
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4805      	ldr	r0, [pc, #20]	; (8006c34 <MX_ADC1_Init+0x140>)
 8006c1e:	f002 fbdb 	bl	80093d8 <HAL_ADC_ConfigChannel>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d001      	beq.n	8006c2c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8006c28:	f000 ff90 	bl	8007b4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006c2c:	bf00      	nop
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	20004a04 	.word	0x20004a04
 8006c38:	40012000 	.word	0x40012000
 8006c3c:	0f000001 	.word	0x0f000001

08006c40 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08a      	sub	sp, #40	; 0x28
 8006c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8006c46:	f107 0310 	add.w	r3, r7, #16
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	605a      	str	r2, [r3, #4]
 8006c50:	609a      	str	r2, [r3, #8]
 8006c52:	60da      	str	r2, [r3, #12]
 8006c54:	611a      	str	r2, [r3, #16]
 8006c56:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006c58:	463b      	mov	r3, r7
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	605a      	str	r2, [r3, #4]
 8006c60:	609a      	str	r2, [r3, #8]
 8006c62:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8006c64:	4b5d      	ldr	r3, [pc, #372]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006c66:	4a5e      	ldr	r2, [pc, #376]	; (8006de0 <MX_ADC3_Init+0x1a0>)
 8006c68:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006c6a:	4b5c      	ldr	r3, [pc, #368]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006c6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006c70:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8006c72:	4b5a      	ldr	r3, [pc, #360]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8006c78:	4b58      	ldr	r3, [pc, #352]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8006c7e:	4b57      	ldr	r3, [pc, #348]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006c80:	2201      	movs	r2, #1
 8006c82:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8006c84:	4b55      	ldr	r3, [pc, #340]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006c8c:	4b53      	ldr	r3, [pc, #332]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006c92:	4b52      	ldr	r3, [pc, #328]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006c94:	4a53      	ldr	r2, [pc, #332]	; (8006de4 <MX_ADC3_Init+0x1a4>)
 8006c96:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006c98:	4b50      	ldr	r3, [pc, #320]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 8;
 8006c9e:	4b4f      	ldr	r3, [pc, #316]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006ca0:	2208      	movs	r2, #8
 8006ca2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8006ca4:	4b4d      	ldr	r3, [pc, #308]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006cac:	4b4b      	ldr	r3, [pc, #300]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8006cb2:	484a      	ldr	r0, [pc, #296]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006cb4:	f002 f916 	bl	8008ee4 <HAL_ADC_Init>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 8006cbe:	f000 ff45 	bl	8007b4c <Error_Handler>
  }
  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8006cc2:	4b49      	ldr	r3, [pc, #292]	; (8006de8 <MX_ADC3_Init+0x1a8>)
 8006cc4:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.ITMode = DISABLE;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc3, &AnalogWDGConfig) != HAL_OK)
 8006cd8:	f107 0310 	add.w	r3, r7, #16
 8006cdc:	4619      	mov	r1, r3
 8006cde:	483f      	ldr	r0, [pc, #252]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006ce0:	f002 fcc4 	bl	800966c <HAL_ADC_AnalogWDGConfig>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8006cea:	f000 ff2f 	bl	8007b4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006cfa:	463b      	mov	r3, r7
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	4837      	ldr	r0, [pc, #220]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006d00:	f002 fb6a 	bl	80093d8 <HAL_ADC_ConfigChannel>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8006d0a:	f000 ff1f 	bl	8007b4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8006d12:	2302      	movs	r3, #2
 8006d14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006d16:	463b      	mov	r3, r7
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4830      	ldr	r0, [pc, #192]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006d1c:	f002 fb5c 	bl	80093d8 <HAL_ADC_ConfigChannel>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8006d26:	f000 ff11 	bl	8007b4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006d32:	463b      	mov	r3, r7
 8006d34:	4619      	mov	r1, r3
 8006d36:	4829      	ldr	r0, [pc, #164]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006d38:	f002 fb4e 	bl	80093d8 <HAL_ADC_ConfigChannel>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8006d42:	f000 ff03 	bl	8007b4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006d46:	2303      	movs	r3, #3
 8006d48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8006d4a:	2304      	movs	r3, #4
 8006d4c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006d4e:	463b      	mov	r3, r7
 8006d50:	4619      	mov	r1, r3
 8006d52:	4822      	ldr	r0, [pc, #136]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006d54:	f002 fb40 	bl	80093d8 <HAL_ADC_ConfigChannel>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <MX_ADC3_Init+0x122>
  {
    Error_Handler();
 8006d5e:	f000 fef5 	bl	8007b4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8006d62:	2309      	movs	r3, #9
 8006d64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8006d66:	2305      	movs	r3, #5
 8006d68:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006d6a:	463b      	mov	r3, r7
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	481b      	ldr	r0, [pc, #108]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006d70:	f002 fb32 	bl	80093d8 <HAL_ADC_ConfigChannel>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <MX_ADC3_Init+0x13e>
  {
    Error_Handler();
 8006d7a:	f000 fee7 	bl	8007b4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006d7e:	230a      	movs	r3, #10
 8006d80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8006d82:	2306      	movs	r3, #6
 8006d84:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006d86:	463b      	mov	r3, r7
 8006d88:	4619      	mov	r1, r3
 8006d8a:	4814      	ldr	r0, [pc, #80]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006d8c:	f002 fb24 	bl	80093d8 <HAL_ADC_ConfigChannel>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <MX_ADC3_Init+0x15a>
  {
    Error_Handler();
 8006d96:	f000 fed9 	bl	8007b4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8006d9a:	230b      	movs	r3, #11
 8006d9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8006d9e:	2307      	movs	r3, #7
 8006da0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006da2:	463b      	mov	r3, r7
 8006da4:	4619      	mov	r1, r3
 8006da6:	480d      	ldr	r0, [pc, #52]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006da8:	f002 fb16 	bl	80093d8 <HAL_ADC_ConfigChannel>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <MX_ADC3_Init+0x176>
  {
    Error_Handler();
 8006db2:	f000 fecb 	bl	8007b4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006db6:	230e      	movs	r3, #14
 8006db8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8006dba:	2308      	movs	r3, #8
 8006dbc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006dbe:	463b      	mov	r3, r7
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	4806      	ldr	r0, [pc, #24]	; (8006ddc <MX_ADC3_Init+0x19c>)
 8006dc4:	f002 fb08 	bl	80093d8 <HAL_ADC_ConfigChannel>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <MX_ADC3_Init+0x192>
  {
    Error_Handler();
 8006dce:	f000 febd 	bl	8007b4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8006dd2:	bf00      	nop
 8006dd4:	3728      	adds	r7, #40	; 0x28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20004a4c 	.word	0x20004a4c
 8006de0:	40012200 	.word	0x40012200
 8006de4:	0f000001 	.word	0x0f000001
 8006de8:	00800200 	.word	0x00800200

08006dec <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8006df2:	463b      	mov	r3, r7
 8006df4:	2200      	movs	r2, #0
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8006dfa:	4b0f      	ldr	r3, [pc, #60]	; (8006e38 <MX_DAC_Init+0x4c>)
 8006dfc:	4a0f      	ldr	r2, [pc, #60]	; (8006e3c <MX_DAC_Init+0x50>)
 8006dfe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8006e00:	480d      	ldr	r0, [pc, #52]	; (8006e38 <MX_DAC_Init+0x4c>)
 8006e02:	f002 ff20 	bl	8009c46 <HAL_DAC_Init>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8006e0c:	f000 fe9e 	bl	8007b4c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006e10:	2300      	movs	r3, #0
 8006e12:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006e14:	2300      	movs	r3, #0
 8006e16:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006e18:	463b      	mov	r3, r7
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4806      	ldr	r0, [pc, #24]	; (8006e38 <MX_DAC_Init+0x4c>)
 8006e20:	f002 ffaa 	bl	8009d78 <HAL_DAC_ConfigChannel>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8006e2a:	f000 fe8f 	bl	8007b4c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8006e2e:	bf00      	nop
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20004cf4 	.word	0x20004cf4
 8006e3c:	40007400 	.word	0x40007400

08006e40 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */
  Switches_Power_Onoff(true);
 8006e44:	2001      	movs	r0, #1
 8006e46:	f7fd fb57 	bl	80044f8 <Switches_Power_Onoff>
  LCD_Power_Onoff(true);
 8006e4a:	2001      	movs	r0, #1
 8006e4c:	f7fc fe44 	bl	8003ad8 <LCD_Power_Onoff>
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006e50:	4b1b      	ldr	r3, [pc, #108]	; (8006ec0 <MX_I2C2_Init+0x80>)
 8006e52:	4a1c      	ldr	r2, [pc, #112]	; (8006ec4 <MX_I2C2_Init+0x84>)
 8006e54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x306034D1;
 8006e56:	4b1a      	ldr	r3, [pc, #104]	; (8006ec0 <MX_I2C2_Init+0x80>)
 8006e58:	4a1b      	ldr	r2, [pc, #108]	; (8006ec8 <MX_I2C2_Init+0x88>)
 8006e5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006e5c:	4b18      	ldr	r3, [pc, #96]	; (8006ec0 <MX_I2C2_Init+0x80>)
 8006e5e:	2200      	movs	r2, #0
 8006e60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e62:	4b17      	ldr	r3, [pc, #92]	; (8006ec0 <MX_I2C2_Init+0x80>)
 8006e64:	2201      	movs	r2, #1
 8006e66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006e68:	4b15      	ldr	r3, [pc, #84]	; (8006ec0 <MX_I2C2_Init+0x80>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006e6e:	4b14      	ldr	r3, [pc, #80]	; (8006ec0 <MX_I2C2_Init+0x80>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006e74:	4b12      	ldr	r3, [pc, #72]	; (8006ec0 <MX_I2C2_Init+0x80>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006e7a:	4b11      	ldr	r3, [pc, #68]	; (8006ec0 <MX_I2C2_Init+0x80>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006e80:	4b0f      	ldr	r3, [pc, #60]	; (8006ec0 <MX_I2C2_Init+0x80>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006e86:	480e      	ldr	r0, [pc, #56]	; (8006ec0 <MX_I2C2_Init+0x80>)
 8006e88:	f003 fdea 	bl	800aa60 <HAL_I2C_Init>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <MX_I2C2_Init+0x56>
  {
    Error_Handler();
 8006e92:	f000 fe5b 	bl	8007b4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006e96:	2100      	movs	r1, #0
 8006e98:	4809      	ldr	r0, [pc, #36]	; (8006ec0 <MX_I2C2_Init+0x80>)
 8006e9a:	f005 fd13 	bl	800c8c4 <HAL_I2CEx_ConfigAnalogFilter>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <MX_I2C2_Init+0x68>
  {
    Error_Handler();
 8006ea4:	f000 fe52 	bl	8007b4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	4805      	ldr	r0, [pc, #20]	; (8006ec0 <MX_I2C2_Init+0x80>)
 8006eac:	f005 fd55 	bl	800c95a <HAL_I2CEx_ConfigDigitalFilter>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <MX_I2C2_Init+0x7a>
  {
    Error_Handler();
 8006eb6:	f000 fe49 	bl	8007b4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006eba:	bf00      	nop
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	200043a0 	.word	0x200043a0
 8006ec4:	40005800 	.word	0x40005800
 8006ec8:	306034d1 	.word	0x306034d1

08006ecc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8006ed0:	4b1b      	ldr	r3, [pc, #108]	; (8006f40 <MX_I2C3_Init+0x74>)
 8006ed2:	4a1c      	ldr	r2, [pc, #112]	; (8006f44 <MX_I2C3_Init+0x78>)
 8006ed4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 8006ed6:	4b1a      	ldr	r3, [pc, #104]	; (8006f40 <MX_I2C3_Init+0x74>)
 8006ed8:	4a1b      	ldr	r2, [pc, #108]	; (8006f48 <MX_I2C3_Init+0x7c>)
 8006eda:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8006edc:	4b18      	ldr	r3, [pc, #96]	; (8006f40 <MX_I2C3_Init+0x74>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006ee2:	4b17      	ldr	r3, [pc, #92]	; (8006f40 <MX_I2C3_Init+0x74>)
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006ee8:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <MX_I2C3_Init+0x74>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8006eee:	4b14      	ldr	r3, [pc, #80]	; (8006f40 <MX_I2C3_Init+0x74>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006ef4:	4b12      	ldr	r3, [pc, #72]	; (8006f40 <MX_I2C3_Init+0x74>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006efa:	4b11      	ldr	r3, [pc, #68]	; (8006f40 <MX_I2C3_Init+0x74>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006f00:	4b0f      	ldr	r3, [pc, #60]	; (8006f40 <MX_I2C3_Init+0x74>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8006f06:	480e      	ldr	r0, [pc, #56]	; (8006f40 <MX_I2C3_Init+0x74>)
 8006f08:	f003 fdaa 	bl	800aa60 <HAL_I2C_Init>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8006f12:	f000 fe1b 	bl	8007b4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006f16:	2100      	movs	r1, #0
 8006f18:	4809      	ldr	r0, [pc, #36]	; (8006f40 <MX_I2C3_Init+0x74>)
 8006f1a:	f005 fcd3 	bl	800c8c4 <HAL_I2CEx_ConfigAnalogFilter>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8006f24:	f000 fe12 	bl	8007b4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8006f28:	2100      	movs	r1, #0
 8006f2a:	4805      	ldr	r0, [pc, #20]	; (8006f40 <MX_I2C3_Init+0x74>)
 8006f2c:	f005 fd15 	bl	800c95a <HAL_I2CEx_ConfigDigitalFilter>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8006f36:	f000 fe09 	bl	8007b4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8006f3a:	bf00      	nop
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20004270 	.word	0x20004270
 8006f44:	40005c00 	.word	0x40005c00
 8006f48:	20404768 	.word	0x20404768

08006f4c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */
#endif
  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006f50:	4b0f      	ldr	r3, [pc, #60]	; (8006f90 <MX_RTC_Init+0x44>)
 8006f52:	4a10      	ldr	r2, [pc, #64]	; (8006f94 <MX_RTC_Init+0x48>)
 8006f54:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006f56:	4b0e      	ldr	r3, [pc, #56]	; (8006f90 <MX_RTC_Init+0x44>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8006f5c:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <MX_RTC_Init+0x44>)
 8006f5e:	227f      	movs	r2, #127	; 0x7f
 8006f60:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8006f62:	4b0b      	ldr	r3, [pc, #44]	; (8006f90 <MX_RTC_Init+0x44>)
 8006f64:	22ff      	movs	r2, #255	; 0xff
 8006f66:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006f68:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <MX_RTC_Init+0x44>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006f6e:	4b08      	ldr	r3, [pc, #32]	; (8006f90 <MX_RTC_Init+0x44>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006f74:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <MX_RTC_Init+0x44>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006f7a:	4805      	ldr	r0, [pc, #20]	; (8006f90 <MX_RTC_Init+0x44>)
 8006f7c:	f007 ff74 	bl	800ee68 <HAL_RTC_Init>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8006f86:	f000 fde1 	bl	8007b4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
#endif
  /* USER CODE END RTC_Init 2 */

}
 8006f8a:	bf00      	nop
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	20004d68 	.word	0x20004d68
 8006f94:	40002800 	.word	0x40002800

08006f98 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8006f9c:	4b0d      	ldr	r3, [pc, #52]	; (8006fd4 <MX_SDMMC2_SD_Init+0x3c>)
 8006f9e:	4a0e      	ldr	r2, [pc, #56]	; (8006fd8 <MX_SDMMC2_SD_Init+0x40>)
 8006fa0:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8006fa2:	4b0c      	ldr	r3, [pc, #48]	; (8006fd4 <MX_SDMMC2_SD_Init+0x3c>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8006fa8:	4b0a      	ldr	r3, [pc, #40]	; (8006fd4 <MX_SDMMC2_SD_Init+0x3c>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006fae:	4b09      	ldr	r3, [pc, #36]	; (8006fd4 <MX_SDMMC2_SD_Init+0x3c>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8006fb4:	4b07      	ldr	r3, [pc, #28]	; (8006fd4 <MX_SDMMC2_SD_Init+0x3c>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8006fba:	4b06      	ldr	r3, [pc, #24]	; (8006fd4 <MX_SDMMC2_SD_Init+0x3c>)
 8006fbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006fc0:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 2;
 8006fc2:	4b04      	ldr	r3, [pc, #16]	; (8006fd4 <MX_SDMMC2_SD_Init+0x3c>)
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8006fc8:	bf00      	nop
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	200048fc 	.word	0x200048fc
 8006fd8:	40011c00 	.word	0x40011c00

08006fdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006fe0:	4b1b      	ldr	r3, [pc, #108]	; (8007050 <MX_SPI1_Init+0x74>)
 8006fe2:	4a1c      	ldr	r2, [pc, #112]	; (8007054 <MX_SPI1_Init+0x78>)
 8006fe4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006fe6:	4b1a      	ldr	r3, [pc, #104]	; (8007050 <MX_SPI1_Init+0x74>)
 8006fe8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006fec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006fee:	4b18      	ldr	r3, [pc, #96]	; (8007050 <MX_SPI1_Init+0x74>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8006ff4:	4b16      	ldr	r3, [pc, #88]	; (8007050 <MX_SPI1_Init+0x74>)
 8006ff6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006ffa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ffc:	4b14      	ldr	r3, [pc, #80]	; (8007050 <MX_SPI1_Init+0x74>)
 8006ffe:	2200      	movs	r2, #0
 8007000:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007002:	4b13      	ldr	r3, [pc, #76]	; (8007050 <MX_SPI1_Init+0x74>)
 8007004:	2200      	movs	r2, #0
 8007006:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007008:	4b11      	ldr	r3, [pc, #68]	; (8007050 <MX_SPI1_Init+0x74>)
 800700a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800700e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007010:	4b0f      	ldr	r3, [pc, #60]	; (8007050 <MX_SPI1_Init+0x74>)
 8007012:	2200      	movs	r2, #0
 8007014:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007016:	4b0e      	ldr	r3, [pc, #56]	; (8007050 <MX_SPI1_Init+0x74>)
 8007018:	2200      	movs	r2, #0
 800701a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800701c:	4b0c      	ldr	r3, [pc, #48]	; (8007050 <MX_SPI1_Init+0x74>)
 800701e:	2200      	movs	r2, #0
 8007020:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007022:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <MX_SPI1_Init+0x74>)
 8007024:	2200      	movs	r2, #0
 8007026:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8007028:	4b09      	ldr	r3, [pc, #36]	; (8007050 <MX_SPI1_Init+0x74>)
 800702a:	2207      	movs	r2, #7
 800702c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800702e:	4b08      	ldr	r3, [pc, #32]	; (8007050 <MX_SPI1_Init+0x74>)
 8007030:	2200      	movs	r2, #0
 8007032:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007034:	4b06      	ldr	r3, [pc, #24]	; (8007050 <MX_SPI1_Init+0x74>)
 8007036:	2208      	movs	r2, #8
 8007038:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800703a:	4805      	ldr	r0, [pc, #20]	; (8007050 <MX_SPI1_Init+0x74>)
 800703c:	f009 fda3 	bl	8010b86 <HAL_SPI_Init>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8007046:	f000 fd81 	bl	8007b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800704a:	bf00      	nop
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	20006e74 	.word	0x20006e74
 8007054:	40013000 	.word	0x40013000

08007058 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800705c:	4b1b      	ldr	r3, [pc, #108]	; (80070cc <MX_SPI3_Init+0x74>)
 800705e:	4a1c      	ldr	r2, [pc, #112]	; (80070d0 <MX_SPI3_Init+0x78>)
 8007060:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007062:	4b1a      	ldr	r3, [pc, #104]	; (80070cc <MX_SPI3_Init+0x74>)
 8007064:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007068:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800706a:	4b18      	ldr	r3, [pc, #96]	; (80070cc <MX_SPI3_Init+0x74>)
 800706c:	2200      	movs	r2, #0
 800706e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8007070:	4b16      	ldr	r3, [pc, #88]	; (80070cc <MX_SPI3_Init+0x74>)
 8007072:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007076:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007078:	4b14      	ldr	r3, [pc, #80]	; (80070cc <MX_SPI3_Init+0x74>)
 800707a:	2200      	movs	r2, #0
 800707c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800707e:	4b13      	ldr	r3, [pc, #76]	; (80070cc <MX_SPI3_Init+0x74>)
 8007080:	2200      	movs	r2, #0
 8007082:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007084:	4b11      	ldr	r3, [pc, #68]	; (80070cc <MX_SPI3_Init+0x74>)
 8007086:	f44f 7200 	mov.w	r2, #512	; 0x200
 800708a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800708c:	4b0f      	ldr	r3, [pc, #60]	; (80070cc <MX_SPI3_Init+0x74>)
 800708e:	2200      	movs	r2, #0
 8007090:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007092:	4b0e      	ldr	r3, [pc, #56]	; (80070cc <MX_SPI3_Init+0x74>)
 8007094:	2200      	movs	r2, #0
 8007096:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007098:	4b0c      	ldr	r3, [pc, #48]	; (80070cc <MX_SPI3_Init+0x74>)
 800709a:	2200      	movs	r2, #0
 800709c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800709e:	4b0b      	ldr	r3, [pc, #44]	; (80070cc <MX_SPI3_Init+0x74>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80070a4:	4b09      	ldr	r3, [pc, #36]	; (80070cc <MX_SPI3_Init+0x74>)
 80070a6:	2207      	movs	r2, #7
 80070a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80070aa:	4b08      	ldr	r3, [pc, #32]	; (80070cc <MX_SPI3_Init+0x74>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80070b0:	4b06      	ldr	r3, [pc, #24]	; (80070cc <MX_SPI3_Init+0x74>)
 80070b2:	2208      	movs	r2, #8
 80070b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80070b6:	4805      	ldr	r0, [pc, #20]	; (80070cc <MX_SPI3_Init+0x74>)
 80070b8:	f009 fd65 	bl	8010b86 <HAL_SPI_Init>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80070c2:	f000 fd43 	bl	8007b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80070c6:	bf00      	nop
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	20004898 	.word	0x20004898
 80070d0:	40003c00 	.word	0x40003c00

080070d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b08e      	sub	sp, #56	; 0x38
 80070d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80070da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	605a      	str	r2, [r3, #4]
 80070e4:	609a      	str	r2, [r3, #8]
 80070e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80070e8:	f107 031c 	add.w	r3, r7, #28
 80070ec:	2200      	movs	r2, #0
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	605a      	str	r2, [r3, #4]
 80070f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80070f4:	463b      	mov	r3, r7
 80070f6:	2200      	movs	r2, #0
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	605a      	str	r2, [r3, #4]
 80070fc:	609a      	str	r2, [r3, #8]
 80070fe:	60da      	str	r2, [r3, #12]
 8007100:	611a      	str	r2, [r3, #16]
 8007102:	615a      	str	r2, [r3, #20]
 8007104:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007106:	4b2d      	ldr	r3, [pc, #180]	; (80071bc <MX_TIM2_Init+0xe8>)
 8007108:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800710c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108;
 800710e:	4b2b      	ldr	r3, [pc, #172]	; (80071bc <MX_TIM2_Init+0xe8>)
 8007110:	226c      	movs	r2, #108	; 0x6c
 8007112:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007114:	4b29      	ldr	r3, [pc, #164]	; (80071bc <MX_TIM2_Init+0xe8>)
 8007116:	2200      	movs	r2, #0
 8007118:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 800711a:	4b28      	ldr	r3, [pc, #160]	; (80071bc <MX_TIM2_Init+0xe8>)
 800711c:	22f9      	movs	r2, #249	; 0xf9
 800711e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007120:	4b26      	ldr	r3, [pc, #152]	; (80071bc <MX_TIM2_Init+0xe8>)
 8007122:	2200      	movs	r2, #0
 8007124:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007126:	4b25      	ldr	r3, [pc, #148]	; (80071bc <MX_TIM2_Init+0xe8>)
 8007128:	2200      	movs	r2, #0
 800712a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800712c:	4823      	ldr	r0, [pc, #140]	; (80071bc <MX_TIM2_Init+0xe8>)
 800712e:	f009 fdd5 	bl	8010cdc <HAL_TIM_Base_Init>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8007138:	f000 fd08 	bl	8007b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800713c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007140:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007146:	4619      	mov	r1, r3
 8007148:	481c      	ldr	r0, [pc, #112]	; (80071bc <MX_TIM2_Init+0xe8>)
 800714a:	f00a fa93 	bl	8011674 <HAL_TIM_ConfigClockSource>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8007154:	f000 fcfa 	bl	8007b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007158:	4818      	ldr	r0, [pc, #96]	; (80071bc <MX_TIM2_Init+0xe8>)
 800715a:	f009 feff 	bl	8010f5c <HAL_TIM_PWM_Init>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8007164:	f000 fcf2 	bl	8007b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007168:	2300      	movs	r3, #0
 800716a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800716c:	2300      	movs	r3, #0
 800716e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007170:	f107 031c 	add.w	r3, r7, #28
 8007174:	4619      	mov	r1, r3
 8007176:	4811      	ldr	r0, [pc, #68]	; (80071bc <MX_TIM2_Init+0xe8>)
 8007178:	f00a ff28 	bl	8011fcc <HAL_TIMEx_MasterConfigSynchronization>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8007182:	f000 fce3 	bl	8007b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007186:	2360      	movs	r3, #96	; 0x60
 8007188:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800718a:	2300      	movs	r3, #0
 800718c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800718e:	2300      	movs	r3, #0
 8007190:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007192:	2300      	movs	r3, #0
 8007194:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007196:	463b      	mov	r3, r7
 8007198:	220c      	movs	r2, #12
 800719a:	4619      	mov	r1, r3
 800719c:	4807      	ldr	r0, [pc, #28]	; (80071bc <MX_TIM2_Init+0xe8>)
 800719e:	f00a f959 	bl	8011454 <HAL_TIM_PWM_ConfigChannel>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80071a8:	f000 fcd0 	bl	8007b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80071ac:	4803      	ldr	r0, [pc, #12]	; (80071bc <MX_TIM2_Init+0xe8>)
 80071ae:	f001 f93b 	bl	8008428 <HAL_TIM_MspPostInit>

}
 80071b2:	bf00      	nop
 80071b4:	3738      	adds	r7, #56	; 0x38
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20006ed8 	.word	0x20006ed8

080071c0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80071c6:	f107 0310 	add.w	r3, r7, #16
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	605a      	str	r2, [r3, #4]
 80071d0:	609a      	str	r2, [r3, #8]
 80071d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80071d4:	1d3b      	adds	r3, r7, #4
 80071d6:	2200      	movs	r2, #0
 80071d8:	601a      	str	r2, [r3, #0]
 80071da:	605a      	str	r2, [r3, #4]
 80071dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80071de:	4b1d      	ldr	r3, [pc, #116]	; (8007254 <MX_TIM5_Init+0x94>)
 80071e0:	4a1d      	ldr	r2, [pc, #116]	; (8007258 <MX_TIM5_Init+0x98>)
 80071e2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108;
 80071e4:	4b1b      	ldr	r3, [pc, #108]	; (8007254 <MX_TIM5_Init+0x94>)
 80071e6:	226c      	movs	r2, #108	; 0x6c
 80071e8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071ea:	4b1a      	ldr	r3, [pc, #104]	; (8007254 <MX_TIM5_Init+0x94>)
 80071ec:	2200      	movs	r2, #0
 80071ee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 80071f0:	4b18      	ldr	r3, [pc, #96]	; (8007254 <MX_TIM5_Init+0x94>)
 80071f2:	f04f 32ff 	mov.w	r2, #4294967295
 80071f6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80071f8:	4b16      	ldr	r3, [pc, #88]	; (8007254 <MX_TIM5_Init+0x94>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80071fe:	4b15      	ldr	r3, [pc, #84]	; (8007254 <MX_TIM5_Init+0x94>)
 8007200:	2200      	movs	r2, #0
 8007202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007204:	4813      	ldr	r0, [pc, #76]	; (8007254 <MX_TIM5_Init+0x94>)
 8007206:	f009 fd69 	bl	8010cdc <HAL_TIM_Base_Init>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8007210:	f000 fc9c 	bl	8007b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007218:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800721a:	f107 0310 	add.w	r3, r7, #16
 800721e:	4619      	mov	r1, r3
 8007220:	480c      	ldr	r0, [pc, #48]	; (8007254 <MX_TIM5_Init+0x94>)
 8007222:	f00a fa27 	bl	8011674 <HAL_TIM_ConfigClockSource>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800722c:	f000 fc8e 	bl	8007b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007230:	2300      	movs	r3, #0
 8007232:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007234:	2300      	movs	r3, #0
 8007236:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007238:	1d3b      	adds	r3, r7, #4
 800723a:	4619      	mov	r1, r3
 800723c:	4805      	ldr	r0, [pc, #20]	; (8007254 <MX_TIM5_Init+0x94>)
 800723e:	f00a fec5 	bl	8011fcc <HAL_TIMEx_MasterConfigSynchronization>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8007248:	f000 fc80 	bl	8007b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800724c:	bf00      	nop
 800724e:	3720      	adds	r7, #32
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	2000484c 	.word	0x2000484c
 8007258:	40000c00 	.word	0x40000c00

0800725c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007262:	1d3b      	adds	r3, r7, #4
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	605a      	str	r2, [r3, #4]
 800726a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800726c:	4b14      	ldr	r3, [pc, #80]	; (80072c0 <MX_TIM7_Init+0x64>)
 800726e:	4a15      	ldr	r2, [pc, #84]	; (80072c4 <MX_TIM7_Init+0x68>)
 8007270:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 108;
 8007272:	4b13      	ldr	r3, [pc, #76]	; (80072c0 <MX_TIM7_Init+0x64>)
 8007274:	226c      	movs	r2, #108	; 0x6c
 8007276:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007278:	4b11      	ldr	r3, [pc, #68]	; (80072c0 <MX_TIM7_Init+0x64>)
 800727a:	2200      	movs	r2, #0
 800727c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 499;
 800727e:	4b10      	ldr	r3, [pc, #64]	; (80072c0 <MX_TIM7_Init+0x64>)
 8007280:	f240 12f3 	movw	r2, #499	; 0x1f3
 8007284:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007286:	4b0e      	ldr	r3, [pc, #56]	; (80072c0 <MX_TIM7_Init+0x64>)
 8007288:	2200      	movs	r2, #0
 800728a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800728c:	480c      	ldr	r0, [pc, #48]	; (80072c0 <MX_TIM7_Init+0x64>)
 800728e:	f009 fd25 	bl	8010cdc <HAL_TIM_Base_Init>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8007298:	f000 fc58 	bl	8007b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800729c:	2300      	movs	r3, #0
 800729e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80072a0:	2300      	movs	r3, #0
 80072a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80072a4:	1d3b      	adds	r3, r7, #4
 80072a6:	4619      	mov	r1, r3
 80072a8:	4805      	ldr	r0, [pc, #20]	; (80072c0 <MX_TIM7_Init+0x64>)
 80072aa:	f00a fe8f 	bl	8011fcc <HAL_TIMEx_MasterConfigSynchronization>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80072b4:	f000 fc4a 	bl	8007b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80072b8:	bf00      	nop
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	20007170 	.word	0x20007170
 80072c4:	40001400 	.word	0x40001400

080072c8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b088      	sub	sp, #32
 80072cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80072ce:	1d3b      	adds	r3, r7, #4
 80072d0:	2200      	movs	r2, #0
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	605a      	str	r2, [r3, #4]
 80072d6:	609a      	str	r2, [r3, #8]
 80072d8:	60da      	str	r2, [r3, #12]
 80072da:	611a      	str	r2, [r3, #16]
 80072dc:	615a      	str	r2, [r3, #20]
 80072de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80072e0:	4b1e      	ldr	r3, [pc, #120]	; (800735c <MX_TIM14_Init+0x94>)
 80072e2:	4a1f      	ldr	r2, [pc, #124]	; (8007360 <MX_TIM14_Init+0x98>)
 80072e4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 108;
 80072e6:	4b1d      	ldr	r3, [pc, #116]	; (800735c <MX_TIM14_Init+0x94>)
 80072e8:	226c      	movs	r2, #108	; 0x6c
 80072ea:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80072ec:	4b1b      	ldr	r3, [pc, #108]	; (800735c <MX_TIM14_Init+0x94>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 3920;
 80072f2:	4b1a      	ldr	r3, [pc, #104]	; (800735c <MX_TIM14_Init+0x94>)
 80072f4:	f44f 6275 	mov.w	r2, #3920	; 0xf50
 80072f8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80072fa:	4b18      	ldr	r3, [pc, #96]	; (800735c <MX_TIM14_Init+0x94>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007300:	4b16      	ldr	r3, [pc, #88]	; (800735c <MX_TIM14_Init+0x94>)
 8007302:	2200      	movs	r2, #0
 8007304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8007306:	4815      	ldr	r0, [pc, #84]	; (800735c <MX_TIM14_Init+0x94>)
 8007308:	f009 fce8 	bl	8010cdc <HAL_TIM_Base_Init>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8007312:	f000 fc1b 	bl	8007b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8007316:	4811      	ldr	r0, [pc, #68]	; (800735c <MX_TIM14_Init+0x94>)
 8007318:	f009 fe20 	bl	8010f5c <HAL_TIM_PWM_Init>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8007322:	f000 fc13 	bl	8007b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007326:	2360      	movs	r3, #96	; 0x60
 8007328:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800732a:	2300      	movs	r3, #0
 800732c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800732e:	2300      	movs	r3, #0
 8007330:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007332:	2300      	movs	r3, #0
 8007334:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007336:	1d3b      	adds	r3, r7, #4
 8007338:	2200      	movs	r2, #0
 800733a:	4619      	mov	r1, r3
 800733c:	4807      	ldr	r0, [pc, #28]	; (800735c <MX_TIM14_Init+0x94>)
 800733e:	f00a f889 	bl	8011454 <HAL_TIM_PWM_ConfigChannel>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8007348:	f000 fc00 	bl	8007b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800734c:	4803      	ldr	r0, [pc, #12]	; (800735c <MX_TIM14_Init+0x94>)
 800734e:	f001 f86b 	bl	8008428 <HAL_TIM_MspPostInit>

}
 8007352:	bf00      	nop
 8007354:	3720      	adds	r7, #32
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	20007124 	.word	0x20007124
 8007360:	40002000 	.word	0x40002000

08007364 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8007368:	4b14      	ldr	r3, [pc, #80]	; (80073bc <MX_UART5_Init+0x58>)
 800736a:	4a15      	ldr	r2, [pc, #84]	; (80073c0 <MX_UART5_Init+0x5c>)
 800736c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800736e:	4b13      	ldr	r3, [pc, #76]	; (80073bc <MX_UART5_Init+0x58>)
 8007370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007374:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8007376:	4b11      	ldr	r3, [pc, #68]	; (80073bc <MX_UART5_Init+0x58>)
 8007378:	2200      	movs	r2, #0
 800737a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800737c:	4b0f      	ldr	r3, [pc, #60]	; (80073bc <MX_UART5_Init+0x58>)
 800737e:	2200      	movs	r2, #0
 8007380:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8007382:	4b0e      	ldr	r3, [pc, #56]	; (80073bc <MX_UART5_Init+0x58>)
 8007384:	2200      	movs	r2, #0
 8007386:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8007388:	4b0c      	ldr	r3, [pc, #48]	; (80073bc <MX_UART5_Init+0x58>)
 800738a:	220c      	movs	r2, #12
 800738c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800738e:	4b0b      	ldr	r3, [pc, #44]	; (80073bc <MX_UART5_Init+0x58>)
 8007390:	2200      	movs	r2, #0
 8007392:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8007394:	4b09      	ldr	r3, [pc, #36]	; (80073bc <MX_UART5_Init+0x58>)
 8007396:	2200      	movs	r2, #0
 8007398:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800739a:	4b08      	ldr	r3, [pc, #32]	; (80073bc <MX_UART5_Init+0x58>)
 800739c:	2200      	movs	r2, #0
 800739e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80073a0:	4b06      	ldr	r3, [pc, #24]	; (80073bc <MX_UART5_Init+0x58>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80073a6:	4805      	ldr	r0, [pc, #20]	; (80073bc <MX_UART5_Init+0x58>)
 80073a8:	f00a febc 	bl	8012124 <HAL_UART_Init>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80073b2:	f000 fbcb 	bl	8007b4c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80073b6:	bf00      	nop
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20004980 	.word	0x20004980
 80073c0:	40005000 	.word	0x40005000

080073c4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80073c8:	4b14      	ldr	r3, [pc, #80]	; (800741c <MX_UART7_Init+0x58>)
 80073ca:	4a15      	ldr	r2, [pc, #84]	; (8007420 <MX_UART7_Init+0x5c>)
 80073cc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80073ce:	4b13      	ldr	r3, [pc, #76]	; (800741c <MX_UART7_Init+0x58>)
 80073d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80073d4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80073d6:	4b11      	ldr	r3, [pc, #68]	; (800741c <MX_UART7_Init+0x58>)
 80073d8:	2200      	movs	r2, #0
 80073da:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80073dc:	4b0f      	ldr	r3, [pc, #60]	; (800741c <MX_UART7_Init+0x58>)
 80073de:	2200      	movs	r2, #0
 80073e0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80073e2:	4b0e      	ldr	r3, [pc, #56]	; (800741c <MX_UART7_Init+0x58>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80073e8:	4b0c      	ldr	r3, [pc, #48]	; (800741c <MX_UART7_Init+0x58>)
 80073ea:	220c      	movs	r2, #12
 80073ec:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80073ee:	4b0b      	ldr	r3, [pc, #44]	; (800741c <MX_UART7_Init+0x58>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80073f4:	4b09      	ldr	r3, [pc, #36]	; (800741c <MX_UART7_Init+0x58>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80073fa:	4b08      	ldr	r3, [pc, #32]	; (800741c <MX_UART7_Init+0x58>)
 80073fc:	2200      	movs	r2, #0
 80073fe:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007400:	4b06      	ldr	r3, [pc, #24]	; (800741c <MX_UART7_Init+0x58>)
 8007402:	2200      	movs	r2, #0
 8007404:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8007406:	4805      	ldr	r0, [pc, #20]	; (800741c <MX_UART7_Init+0x58>)
 8007408:	f00a fe8c 	bl	8012124 <HAL_UART_Init>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8007412:	f000 fb9b 	bl	8007b4c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8007416:	bf00      	nop
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	200042bc 	.word	0x200042bc
 8007420:	40007800 	.word	0x40007800

08007424 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8007428:	4b14      	ldr	r3, [pc, #80]	; (800747c <MX_UART8_Init+0x58>)
 800742a:	4a15      	ldr	r2, [pc, #84]	; (8007480 <MX_UART8_Init+0x5c>)
 800742c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800742e:	4b13      	ldr	r3, [pc, #76]	; (800747c <MX_UART8_Init+0x58>)
 8007430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007434:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8007436:	4b11      	ldr	r3, [pc, #68]	; (800747c <MX_UART8_Init+0x58>)
 8007438:	2200      	movs	r2, #0
 800743a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800743c:	4b0f      	ldr	r3, [pc, #60]	; (800747c <MX_UART8_Init+0x58>)
 800743e:	2200      	movs	r2, #0
 8007440:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8007442:	4b0e      	ldr	r3, [pc, #56]	; (800747c <MX_UART8_Init+0x58>)
 8007444:	2200      	movs	r2, #0
 8007446:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8007448:	4b0c      	ldr	r3, [pc, #48]	; (800747c <MX_UART8_Init+0x58>)
 800744a:	220c      	movs	r2, #12
 800744c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800744e:	4b0b      	ldr	r3, [pc, #44]	; (800747c <MX_UART8_Init+0x58>)
 8007450:	2200      	movs	r2, #0
 8007452:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8007454:	4b09      	ldr	r3, [pc, #36]	; (800747c <MX_UART8_Init+0x58>)
 8007456:	2200      	movs	r2, #0
 8007458:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800745a:	4b08      	ldr	r3, [pc, #32]	; (800747c <MX_UART8_Init+0x58>)
 800745c:	2200      	movs	r2, #0
 800745e:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007460:	4b06      	ldr	r3, [pc, #24]	; (800747c <MX_UART8_Init+0x58>)
 8007462:	2200      	movs	r2, #0
 8007464:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8007466:	4805      	ldr	r0, [pc, #20]	; (800747c <MX_UART8_Init+0x58>)
 8007468:	f00a fe5c 	bl	8012124 <HAL_UART_Init>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8007472:	f000 fb6b 	bl	8007b4c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8007476:	bf00      	nop
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	20006df0 	.word	0x20006df0
 8007480:	40007c00 	.word	0x40007c00

08007484 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800748a:	4b18      	ldr	r3, [pc, #96]	; (80074ec <MX_DMA_Init+0x68>)
 800748c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748e:	4a17      	ldr	r2, [pc, #92]	; (80074ec <MX_DMA_Init+0x68>)
 8007490:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007494:	6313      	str	r3, [r2, #48]	; 0x30
 8007496:	4b15      	ldr	r3, [pc, #84]	; (80074ec <MX_DMA_Init+0x68>)
 8007498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800749e:	607b      	str	r3, [r7, #4]
 80074a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 80074a2:	2200      	movs	r2, #0
 80074a4:	2102      	movs	r1, #2
 80074a6:	2038      	movs	r0, #56	; 0x38
 80074a8:	f002 fb97 	bl	8009bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80074ac:	2038      	movs	r0, #56	; 0x38
 80074ae:	f002 fbb0 	bl	8009c12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80074b2:	2200      	movs	r2, #0
 80074b4:	2100      	movs	r1, #0
 80074b6:	2039      	movs	r0, #57	; 0x39
 80074b8:	f002 fb8f 	bl	8009bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80074bc:	2039      	movs	r0, #57	; 0x39
 80074be:	f002 fba8 	bl	8009c12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80074c2:	2200      	movs	r2, #0
 80074c4:	2100      	movs	r1, #0
 80074c6:	203c      	movs	r0, #60	; 0x3c
 80074c8:	f002 fb87 	bl	8009bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80074cc:	203c      	movs	r0, #60	; 0x3c
 80074ce:	f002 fba0 	bl	8009c12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 2, 0);
 80074d2:	2200      	movs	r2, #0
 80074d4:	2102      	movs	r1, #2
 80074d6:	2044      	movs	r0, #68	; 0x44
 80074d8:	f002 fb7f 	bl	8009bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80074dc:	2044      	movs	r0, #68	; 0x44
 80074de:	f002 fb98 	bl	8009c12 <HAL_NVIC_EnableIRQ>

}
 80074e2:	bf00      	nop
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	40023800 	.word	0x40023800

080074f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08e      	sub	sp, #56	; 0x38
 80074f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	605a      	str	r2, [r3, #4]
 8007500:	609a      	str	r2, [r3, #8]
 8007502:	60da      	str	r2, [r3, #12]
 8007504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007506:	4bb0      	ldr	r3, [pc, #704]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	4aaf      	ldr	r2, [pc, #700]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 800750c:	f043 0310 	orr.w	r3, r3, #16
 8007510:	6313      	str	r3, [r2, #48]	; 0x30
 8007512:	4bad      	ldr	r3, [pc, #692]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	f003 0310 	and.w	r3, r3, #16
 800751a:	623b      	str	r3, [r7, #32]
 800751c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800751e:	4baa      	ldr	r3, [pc, #680]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 8007520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007522:	4aa9      	ldr	r2, [pc, #676]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 8007524:	f043 0304 	orr.w	r3, r3, #4
 8007528:	6313      	str	r3, [r2, #48]	; 0x30
 800752a:	4ba7      	ldr	r3, [pc, #668]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 800752c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752e:	f003 0304 	and.w	r3, r3, #4
 8007532:	61fb      	str	r3, [r7, #28]
 8007534:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007536:	4ba4      	ldr	r3, [pc, #656]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 8007538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753a:	4aa3      	ldr	r2, [pc, #652]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 800753c:	f043 0320 	orr.w	r3, r3, #32
 8007540:	6313      	str	r3, [r2, #48]	; 0x30
 8007542:	4ba1      	ldr	r3, [pc, #644]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 8007544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007546:	f003 0320 	and.w	r3, r3, #32
 800754a:	61bb      	str	r3, [r7, #24]
 800754c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800754e:	4b9e      	ldr	r3, [pc, #632]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 8007550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007552:	4a9d      	ldr	r2, [pc, #628]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 8007554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007558:	6313      	str	r3, [r2, #48]	; 0x30
 800755a:	4b9b      	ldr	r3, [pc, #620]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 800755c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007562:	617b      	str	r3, [r7, #20]
 8007564:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007566:	4b98      	ldr	r3, [pc, #608]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 8007568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756a:	4a97      	ldr	r2, [pc, #604]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 800756c:	f043 0301 	orr.w	r3, r3, #1
 8007570:	6313      	str	r3, [r2, #48]	; 0x30
 8007572:	4b95      	ldr	r3, [pc, #596]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	613b      	str	r3, [r7, #16]
 800757c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800757e:	4b92      	ldr	r3, [pc, #584]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 8007580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007582:	4a91      	ldr	r2, [pc, #580]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 8007584:	f043 0302 	orr.w	r3, r3, #2
 8007588:	6313      	str	r3, [r2, #48]	; 0x30
 800758a:	4b8f      	ldr	r3, [pc, #572]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 800758c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758e:	f003 0302 	and.w	r3, r3, #2
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007596:	4b8c      	ldr	r3, [pc, #560]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 8007598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759a:	4a8b      	ldr	r2, [pc, #556]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 800759c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075a0:	6313      	str	r3, [r2, #48]	; 0x30
 80075a2:	4b89      	ldr	r3, [pc, #548]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 80075a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075aa:	60bb      	str	r3, [r7, #8]
 80075ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80075ae:	4b86      	ldr	r3, [pc, #536]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 80075b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b2:	4a85      	ldr	r2, [pc, #532]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 80075b4:	f043 0308 	orr.w	r3, r3, #8
 80075b8:	6313      	str	r3, [r2, #48]	; 0x30
 80075ba:	4b83      	ldr	r3, [pc, #524]	; (80077c8 <MX_GPIO_Init+0x2d8>)
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	f003 0308 	and.w	r3, r3, #8
 80075c2:	607b      	str	r3, [r7, #4]
 80075c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, COMPRESSOR_CTRL_Pin|PWRRELAY_CTRL_Pin|PFC_RLY_EN_Pin|PF_EN_Pin, GPIO_PIN_RESET);
 80075c6:	2200      	movs	r2, #0
 80075c8:	f44f 610e 	mov.w	r1, #2272	; 0x8e0
 80075cc:	487f      	ldr	r0, [pc, #508]	; (80077cc <MX_GPIO_Init+0x2dc>)
 80075ce:	f003 f9fb 	bl	800a9c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ModBUS_Dir_Pin|WDI_Pin|TP34_Pin, GPIO_PIN_RESET);
 80075d2:	2200      	movs	r2, #0
 80075d4:	f246 0120 	movw	r1, #24608	; 0x6020
 80075d8:	487d      	ldr	r0, [pc, #500]	; (80077d0 <MX_GPIO_Init+0x2e0>)
 80075da:	f003 f9f5 	bl	800a9c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_N_GPIO_Port, WIFI_RST_N_Pin, GPIO_PIN_RESET);
 80075de:	2200      	movs	r2, #0
 80075e0:	2104      	movs	r1, #4
 80075e2:	487c      	ldr	r0, [pc, #496]	; (80077d4 <MX_GPIO_Init+0x2e4>)
 80075e4:	f003 f9f0 	bl	800a9c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, VALVE_1A_CTRL_Pin|VALVE_1B_CTRL_Pin|VALVE_2A_CTRL_Pin|VALVE_2B_CTRL_Pin
 80075e8:	2200      	movs	r2, #0
 80075ea:	f244 11ff 	movw	r1, #16895	; 0x41ff
 80075ee:	487a      	ldr	r0, [pc, #488]	; (80077d8 <MX_GPIO_Init+0x2e8>)
 80075f0:	f003 f9ea 	bl	800a9c8 <HAL_GPIO_WritePin>
                          |ONBOARD_LED_Pin|VALVE_3A_CTRL_Pin|VALVE_3B_CTRL_Pin|VALVE_4A_CTRL_Pin
                          |VALVE_4B_CTRL_Pin|MEMB_POWER_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SYNC_OUT_Pin|TP32_Pin|TP33_Pin|TP36_Pin
 80075f4:	2200      	movs	r2, #0
 80075f6:	f24d 51c0 	movw	r1, #54720	; 0xd5c0
 80075fa:	4878      	ldr	r0, [pc, #480]	; (80077dc <MX_GPIO_Init+0x2ec>)
 80075fc:	f003 f9e4 	bl	800a9c8 <HAL_GPIO_WritePin>
                          |TP29_Pin|TP30_Pin|TP31_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_BAT100_Pin|LED_BAT75_Pin|LED_Y_Pin|LED_G_Pin
 8007600:	2200      	movs	r2, #0
 8007602:	f64f 6130 	movw	r1, #65072	; 0xfe30
 8007606:	4876      	ldr	r0, [pc, #472]	; (80077e0 <MX_GPIO_Init+0x2f0>)
 8007608:	f003 f9de 	bl	800a9c8 <HAL_GPIO_WritePin>
                          |LED_R_Pin|LED_BAT50_Pin|LED_BAT25_Pin|TP26_Pin
                          |TP28_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_POWER_EN_Pin|WIFI_SPI3_EN_Pin, GPIO_PIN_RESET);
 800760c:	2200      	movs	r2, #0
 800760e:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8007612:	4874      	ldr	r0, [pc, #464]	; (80077e4 <MX_GPIO_Init+0x2f4>)
 8007614:	f003 f9d8 	bl	800a9c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : N_MEMBRANE_INT_Pin MEMBRANESW_IN_Pin */
  GPIO_InitStruct.Pin = N_MEMBRANE_INT_Pin|MEMBRANESW_IN_Pin;
 8007618:	2314      	movs	r3, #20
 800761a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800761c:	4b72      	ldr	r3, [pc, #456]	; (80077e8 <MX_GPIO_Init+0x2f8>)
 800761e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007620:	2301      	movs	r3, #1
 8007622:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007628:	4619      	mov	r1, r3
 800762a:	4868      	ldr	r0, [pc, #416]	; (80077cc <MX_GPIO_Init+0x2dc>)
 800762c:	f003 f818 	bl	800a660 <HAL_GPIO_Init>

  /*Configure GPIO pins : COMPRESSOR_CTRL_Pin PWRRELAY_CTRL_Pin PFC_RLY_EN_Pin PF_EN_Pin */
  GPIO_InitStruct.Pin = COMPRESSOR_CTRL_Pin|PWRRELAY_CTRL_Pin|PFC_RLY_EN_Pin|PF_EN_Pin;
 8007630:	f44f 630e 	mov.w	r3, #2272	; 0x8e0
 8007634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007636:	2301      	movs	r3, #1
 8007638:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800763a:	2300      	movs	r3, #0
 800763c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800763e:	2300      	movs	r3, #0
 8007640:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007646:	4619      	mov	r1, r3
 8007648:	4860      	ldr	r0, [pc, #384]	; (80077cc <MX_GPIO_Init+0x2dc>)
 800764a:	f003 f809 	bl	800a660 <HAL_GPIO_Init>

  /*Configure GPIO pins : ModBUS_Dir_Pin WDI_Pin TP34_Pin */
  GPIO_InitStruct.Pin = ModBUS_Dir_Pin|WDI_Pin|TP34_Pin;
 800764e:	f246 0320 	movw	r3, #24608	; 0x6020
 8007652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007654:	2301      	movs	r3, #1
 8007656:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007658:	2300      	movs	r3, #0
 800765a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800765c:	2300      	movs	r3, #0
 800765e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007664:	4619      	mov	r1, r3
 8007666:	485a      	ldr	r0, [pc, #360]	; (80077d0 <MX_GPIO_Init+0x2e0>)
 8007668:	f002 fffa 	bl	800a660 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_N_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_N_Pin;
 800766c:	2304      	movs	r3, #4
 800766e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007670:	2301      	movs	r3, #1
 8007672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007674:	2301      	movs	r3, #1
 8007676:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007678:	2302      	movs	r3, #2
 800767a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WIFI_RST_N_GPIO_Port, &GPIO_InitStruct);
 800767c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007680:	4619      	mov	r1, r3
 8007682:	4854      	ldr	r0, [pc, #336]	; (80077d4 <MX_GPIO_Init+0x2e4>)
 8007684:	f002 ffec 	bl	800a660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PFC_LoadEN_N_Pin */
  GPIO_InitStruct.Pin = PFC_LoadEN_N_Pin;
 8007688:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800768e:	4b56      	ldr	r3, [pc, #344]	; (80077e8 <MX_GPIO_Init+0x2f8>)
 8007690:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007692:	2300      	movs	r3, #0
 8007694:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PFC_LoadEN_N_GPIO_Port, &GPIO_InitStruct);
 8007696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800769a:	4619      	mov	r1, r3
 800769c:	484c      	ldr	r0, [pc, #304]	; (80077d0 <MX_GPIO_Init+0x2e0>)
 800769e:	f002 ffdf 	bl	800a660 <HAL_GPIO_Init>

  /*Configure GPIO pins : VALVE_1A_CTRL_Pin VALVE_1B_CTRL_Pin VALVE_2A_CTRL_Pin VALVE_2B_CTRL_Pin
                           ONBOARD_LED_Pin VALVE_3A_CTRL_Pin VALVE_3B_CTRL_Pin VALVE_4A_CTRL_Pin
                           VALVE_4B_CTRL_Pin */
  GPIO_InitStruct.Pin = VALVE_1A_CTRL_Pin|VALVE_1B_CTRL_Pin|VALVE_2A_CTRL_Pin|VALVE_2B_CTRL_Pin
 80076a2:	f240 13ff 	movw	r3, #511	; 0x1ff
 80076a6:	627b      	str	r3, [r7, #36]	; 0x24
                          |ONBOARD_LED_Pin|VALVE_3A_CTRL_Pin|VALVE_3B_CTRL_Pin|VALVE_4A_CTRL_Pin
                          |VALVE_4B_CTRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80076a8:	2301      	movs	r3, #1
 80076aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80076ac:	2302      	movs	r3, #2
 80076ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076b0:	2300      	movs	r3, #0
 80076b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80076b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076b8:	4619      	mov	r1, r3
 80076ba:	4847      	ldr	r0, [pc, #284]	; (80077d8 <MX_GPIO_Init+0x2e8>)
 80076bc:	f002 ffd0 	bl	800a660 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESTOP_ACTIVE_Pin */
  GPIO_InitStruct.Pin = ESTOP_ACTIVE_Pin;
 80076c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80076c6:	4b49      	ldr	r3, [pc, #292]	; (80077ec <MX_GPIO_Init+0x2fc>)
 80076c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESTOP_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80076ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076d2:	4619      	mov	r1, r3
 80076d4:	483d      	ldr	r0, [pc, #244]	; (80077cc <MX_GPIO_Init+0x2dc>)
 80076d6:	f002 ffc3 	bl	800a660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PFC_POWERFAILWARNNING_N_Pin */
  GPIO_InitStruct.Pin = PFC_POWERFAILWARNNING_N_Pin;
 80076da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80076de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80076e0:	4b41      	ldr	r3, [pc, #260]	; (80077e8 <MX_GPIO_Init+0x2f8>)
 80076e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076e4:	2300      	movs	r3, #0
 80076e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PFC_POWERFAILWARNNING_N_GPIO_Port, &GPIO_InitStruct);
 80076e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ec:	4619      	mov	r1, r3
 80076ee:	4837      	ldr	r0, [pc, #220]	; (80077cc <MX_GPIO_Init+0x2dc>)
 80076f0:	f002 ffb6 	bl	800a660 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYNC_OUT_Pin TP32_Pin TP33_Pin TP36_Pin
                           TP29_Pin TP30_Pin TP31_Pin */
  GPIO_InitStruct.Pin = SYNC_OUT_Pin|TP32_Pin|TP33_Pin|TP36_Pin
 80076f4:	f24d 53c0 	movw	r3, #54720	; 0xd5c0
 80076f8:	627b      	str	r3, [r7, #36]	; 0x24
                          |TP29_Pin|TP30_Pin|TP31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80076fa:	2301      	movs	r3, #1
 80076fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076fe:	2300      	movs	r3, #0
 8007700:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007702:	2300      	movs	r3, #0
 8007704:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800770a:	4619      	mov	r1, r3
 800770c:	4833      	ldr	r0, [pc, #204]	; (80077dc <MX_GPIO_Init+0x2ec>)
 800770e:	f002 ffa7 	bl	800a660 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BAT100_Pin LED_BAT75_Pin LED_Y_Pin LED_G_Pin
                           LED_R_Pin LED_BAT50_Pin LED_BAT25_Pin TP26_Pin
                           TP28_Pin */
  GPIO_InitStruct.Pin = LED_BAT100_Pin|LED_BAT75_Pin|LED_Y_Pin|LED_G_Pin
 8007712:	f64f 6330 	movw	r3, #65072	; 0xfe30
 8007716:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED_R_Pin|LED_BAT50_Pin|LED_BAT25_Pin|TP26_Pin
                          |TP28_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007718:	2301      	movs	r3, #1
 800771a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800771c:	2300      	movs	r3, #0
 800771e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007720:	2300      	movs	r3, #0
 8007722:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007728:	4619      	mov	r1, r3
 800772a:	482d      	ldr	r0, [pc, #180]	; (80077e0 <MX_GPIO_Init+0x2f0>)
 800772c:	f002 ff98 	bl	800a660 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_POWER_EN_Pin WIFI_SPI3_EN_Pin */
  GPIO_InitStruct.Pin = DISP_POWER_EN_Pin|WIFI_SPI3_EN_Pin;
 8007730:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8007734:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007736:	2301      	movs	r3, #1
 8007738:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800773a:	2300      	movs	r3, #0
 800773c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800773e:	2300      	movs	r3, #0
 8007740:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007746:	4619      	mov	r1, r3
 8007748:	4826      	ldr	r0, [pc, #152]	; (80077e4 <MX_GPIO_Init+0x2f4>)
 800774a:	f002 ff89 	bl	800a660 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_N_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_N_Pin;
 800774e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007752:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007754:	2300      	movs	r3, #0
 8007756:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007758:	2300      	movs	r3, #0
 800775a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECT_N_GPIO_Port, &GPIO_InitStruct);
 800775c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007760:	4619      	mov	r1, r3
 8007762:	481d      	ldr	r0, [pc, #116]	; (80077d8 <MX_GPIO_Init+0x2e8>)
 8007764:	f002 ff7c 	bl	800a660 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMB_POWER_EN_Pin */
  GPIO_InitStruct.Pin = MEMB_POWER_EN_Pin;
 8007768:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800776c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800776e:	2301      	movs	r3, #1
 8007770:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007772:	2300      	movs	r3, #0
 8007774:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007776:	2300      	movs	r3, #0
 8007778:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MEMB_POWER_EN_GPIO_Port, &GPIO_InitStruct);
 800777a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800777e:	4619      	mov	r1, r3
 8007780:	4815      	ldr	r0, [pc, #84]	; (80077d8 <MX_GPIO_Init+0x2e8>)
 8007782:	f002 ff6d 	bl	800a660 <HAL_GPIO_Init>

  /*Configure GPIO pin : SYNC_IN_N_Pin */
  GPIO_InitStruct.Pin = SYNC_IN_N_Pin;
 8007786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800778a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800778c:	4b17      	ldr	r3, [pc, #92]	; (80077ec <MX_GPIO_Init+0x2fc>)
 800778e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007790:	2300      	movs	r3, #0
 8007792:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SYNC_IN_N_GPIO_Port, &GPIO_InitStruct);
 8007794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007798:	4619      	mov	r1, r3
 800779a:	4810      	ldr	r0, [pc, #64]	; (80077dc <MX_GPIO_Init+0x2ec>)
 800779c:	f002 ff60 	bl	800a660 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80077a0:	2200      	movs	r2, #0
 80077a2:	2100      	movs	r1, #0
 80077a4:	2008      	movs	r0, #8
 80077a6:	f002 fa18 	bl	8009bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80077aa:	2008      	movs	r0, #8
 80077ac:	f002 fa31 	bl	8009c12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80077b0:	2200      	movs	r2, #0
 80077b2:	2100      	movs	r1, #0
 80077b4:	2028      	movs	r0, #40	; 0x28
 80077b6:	f002 fa10 	bl	8009bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80077ba:	2028      	movs	r0, #40	; 0x28
 80077bc:	f002 fa29 	bl	8009c12 <HAL_NVIC_EnableIRQ>

}
 80077c0:	bf00      	nop
 80077c2:	3738      	adds	r7, #56	; 0x38
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	40023800 	.word	0x40023800
 80077cc:	40021000 	.word	0x40021000
 80077d0:	40021400 	.word	0x40021400
 80077d4:	40020800 	.word	0x40020800
 80077d8:	40021800 	.word	0x40021800
 80077dc:	40020400 	.word	0x40020400
 80077e0:	40020c00 	.word	0x40020c00
 80077e4:	40020000 	.word	0x40020000
 80077e8:	10210000 	.word	0x10210000
 80077ec:	10110000 	.word	0x10110000

080077f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
	// Counter reached end of period
	if (TIM7 == htim->Instance ) // Determine whether counter was TIM7 half millisecond counter
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a40      	ldr	r2, [pc, #256]	; (8007900 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d179      	bne.n	80078f6 <HAL_TIM_PeriodElapsedCallback+0x106>
	{
		//Here is a frequency of 500uS
		if (wdi_flag)
 8007802:	4b40      	ldr	r3, [pc, #256]	; (8007904 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	d004      	beq.n	8007816 <HAL_TIM_PeriodElapsedCallback+0x26>
		{
		   //Feeding the external watchdog timer here
			HAL_GPIO_TogglePin(GPIOF, WDI_Pin);  //This is PF13 on STM32 MCU
 800780c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007810:	483d      	ldr	r0, [pc, #244]	; (8007908 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8007812:	f003 f8f2 	bl	800a9fa <HAL_GPIO_TogglePin>
		}

		if(++fiveMsHalfMillisecondCnt >= 10)
 8007816:	4b3d      	ldr	r3, [pc, #244]	; (800790c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	3301      	adds	r3, #1
 800781c:	b29a      	uxth	r2, r3
 800781e:	4b3b      	ldr	r3, [pc, #236]	; (800790c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8007820:	801a      	strh	r2, [r3, #0]
 8007822:	4b3a      	ldr	r3, [pc, #232]	; (800790c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	2b09      	cmp	r3, #9
 8007828:	d905      	bls.n	8007836 <HAL_TIM_PeriodElapsedCallback+0x46>
		{
			fiveMsHalfMillisecondCnt = 0;
 800782a:	4b38      	ldr	r3, [pc, #224]	; (800790c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800782c:	2200      	movs	r2, #0
 800782e:	801a      	strh	r2, [r3, #0]
			fiveMsTick = true;
 8007830:	4b37      	ldr	r3, [pc, #220]	; (8007910 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8007832:	2201      	movs	r2, #1
 8007834:	701a      	strb	r2, [r3, #0]
		}

		if(++oneSecondHalfMillisecondCnt >= 2000)
 8007836:	4b37      	ldr	r3, [pc, #220]	; (8007914 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8007838:	881b      	ldrh	r3, [r3, #0]
 800783a:	3301      	adds	r3, #1
 800783c:	b29a      	uxth	r2, r3
 800783e:	4b35      	ldr	r3, [pc, #212]	; (8007914 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8007840:	801a      	strh	r2, [r3, #0]
 8007842:	4b34      	ldr	r3, [pc, #208]	; (8007914 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800784a:	d305      	bcc.n	8007858 <HAL_TIM_PeriodElapsedCallback+0x68>
		{
			oneSecondHalfMillisecondCnt = 0;
 800784c:	4b31      	ldr	r3, [pc, #196]	; (8007914 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800784e:	2200      	movs	r2, #0
 8007850:	801a      	strh	r2, [r3, #0]
			oneSecondTick = true;
 8007852:	4b31      	ldr	r3, [pc, #196]	; (8007918 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8007854:	2201      	movs	r2, #1
 8007856:	701a      	strb	r2, [r3, #0]

		}
		
		if(++oneMinuteHalfMillisecondCnt >= 120000)
 8007858:	4b30      	ldr	r3, [pc, #192]	; (800791c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3301      	adds	r3, #1
 800785e:	4a2f      	ldr	r2, [pc, #188]	; (800791c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8007860:	6013      	str	r3, [r2, #0]
 8007862:	4b2e      	ldr	r3, [pc, #184]	; (800791c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a2e      	ldr	r2, [pc, #184]	; (8007920 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d90f      	bls.n	800788c <HAL_TIM_PeriodElapsedCallback+0x9c>
		{
			oneMinuteHalfMillisecondCnt = 0;
 800786c:	4b2b      	ldr	r3, [pc, #172]	; (800791c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800786e:	2200      	movs	r2, #0
 8007870:	601a      	str	r2, [r3, #0]
			oneMinuteTick = true;
 8007872:	4b2c      	ldr	r3, [pc, #176]	; (8007924 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8007874:	2201      	movs	r2, #1
 8007876:	701a      	strb	r2, [r3, #0]
			minuteCntr++;
 8007878:	4b2b      	ldr	r3, [pc, #172]	; (8007928 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3301      	adds	r3, #1
 800787e:	4a2a      	ldr	r2, [pc, #168]	; (8007928 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8007880:	6013      	str	r3, [r2, #0]

			StoreMinuteCntrInEeprom( minuteCntr );
 8007882:	4b29      	ldr	r3, [pc, #164]	; (8007928 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4618      	mov	r0, r3
 8007888:	f7fa ffe3 	bl	8002852 <StoreMinuteCntrInEeprom>
		}
		
		if( GetEepromWriteWait() != false )
 800788c:	f7fa fd88 	bl	80023a0 <GetEepromWriteWait>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d011      	beq.n	80078ba <HAL_TIM_PeriodElapsedCallback+0xca>
		{
			eepromWaitHalfMillisecondCnt++;
 8007896:	4b25      	ldr	r3, [pc, #148]	; (800792c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	3301      	adds	r3, #1
 800789c:	b29a      	uxth	r2, r3
 800789e:	4b23      	ldr	r3, [pc, #140]	; (800792c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80078a0:	801a      	strh	r2, [r3, #0]
			if(eepromWaitHalfMillisecondCnt >= 28)
 80078a2:	4b22      	ldr	r3, [pc, #136]	; (800792c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80078a4:	881b      	ldrh	r3, [r3, #0]
 80078a6:	2b1b      	cmp	r3, #27
 80078a8:	d907      	bls.n	80078ba <HAL_TIM_PeriodElapsedCallback+0xca>
			{
				SetEepromWriteWait( false );
 80078aa:	2000      	movs	r0, #0
 80078ac:	f7fa fd84 	bl	80023b8 <SetEepromWriteWait>
				eepromWaitHalfMillisecondCnt = 0;
 80078b0:	4b1e      	ldr	r3, [pc, #120]	; (800792c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	801a      	strh	r2, [r3, #0]
				ReadTxEepromQueueAndWriteEeprom();
 80078b6:	f7fa ff65 	bl	8002784 <ReadTxEepromQueueAndWriteEeprom>
			}
		}

		if( GetClearScreenWait() != false )
 80078ba:	f7fb fedb 	bl	8003674 <GetClearScreenWait>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d018      	beq.n	80078f6 <HAL_TIM_PeriodElapsedCallback+0x106>
		{
			clearScreenHalfMillisecondCnt++;
 80078c4:	4b1a      	ldr	r3, [pc, #104]	; (8007930 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	3301      	adds	r3, #1
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	4b18      	ldr	r3, [pc, #96]	; (8007930 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80078ce:	801a      	strh	r2, [r3, #0]
			if(clearScreenHalfMillisecondCnt >= 6)
 80078d0:	4b17      	ldr	r3, [pc, #92]	; (8007930 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80078d2:	881b      	ldrh	r3, [r3, #0]
 80078d4:	2b05      	cmp	r3, #5
 80078d6:	d90e      	bls.n	80078f6 <HAL_TIM_PeriodElapsedCallback+0x106>
			{
				SetClearScreenWait( false );
 80078d8:	2000      	movs	r0, #0
 80078da:	f7fb fed7 	bl	800368c <SetClearScreenWait>
				clearScreenHalfMillisecondCnt = 0;
 80078de:	4b14      	ldr	r3, [pc, #80]	; (8007930 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	801a      	strh	r2, [r3, #0]
				if(gstModel.bLCDResetRequest == false)
 80078e4:	4b13      	ldr	r3, [pc, #76]	; (8007934 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80078e6:	789b      	ldrb	r3, [r3, #2]
 80078e8:	f083 0301 	eor.w	r3, r3, #1
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <HAL_TIM_PeriodElapsedCallback+0x106>
				{
				    ReadTxLcdQueueAndTransmit();
 80078f2:	f7fb ff33 	bl	800375c <ReadTxLcdQueueAndTransmit>
				}
			}
		}
	}
}
 80078f6:	bf00      	nop
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	40001400 	.word	0x40001400
 8007904:	20001b4e 	.word	0x20001b4e
 8007908:	40021400 	.word	0x40021400
 800790c:	20001b56 	.word	0x20001b56
 8007910:	20001b54 	.word	0x20001b54
 8007914:	20001b60 	.word	0x20001b60
 8007918:	20001b58 	.word	0x20001b58
 800791c:	20001b5c 	.word	0x20001b5c
 8007920:	0001d4bf 	.word	0x0001d4bf
 8007924:	20001b55 	.word	0x20001b55
 8007928:	20001b50 	.word	0x20001b50
 800792c:	20001b64 	.word	0x20001b64
 8007930:	20001b62 	.word	0x20001b62
 8007934:	20001d40 	.word	0x20001d40

08007938 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	4603      	mov	r3, r0
 8007940:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == N_MEMBRANE_INT_Pin)
 8007942:	88fb      	ldrh	r3, [r7, #6]
 8007944:	2b04      	cmp	r3, #4
 8007946:	d106      	bne.n	8007956 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		UartPrintf("Membrane Pressed trigger\n");
 8007948:	481c      	ldr	r0, [pc, #112]	; (80079bc <HAL_GPIO_EXTI_Callback+0x84>)
 800794a:	f7fe f9c5 	bl	8005cd8 <UartPrintf>
		gstModel.bMembranePress = true;
 800794e:	4b1c      	ldr	r3, [pc, #112]	; (80079c0 <HAL_GPIO_EXTI_Callback+0x88>)
 8007950:	2201      	movs	r2, #1
 8007952:	721a      	strb	r2, [r3, #8]
	}
	else
	{
		__NOP();
	}
}
 8007954:	e02e      	b.n	80079b4 <HAL_GPIO_EXTI_Callback+0x7c>
	else if(GPIO_Pin == PFC_LoadEN_N_Pin)
 8007956:	88fb      	ldrh	r3, [r7, #6]
 8007958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800795c:	d112      	bne.n	8007984 <HAL_GPIO_EXTI_Callback+0x4c>
		if(bPfcLoadEnable == false)
 800795e:	4b19      	ldr	r3, [pc, #100]	; (80079c4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	f083 0301 	eor.w	r3, r3, #1
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b00      	cmp	r3, #0
 800796a:	d023      	beq.n	80079b4 <HAL_GPIO_EXTI_Callback+0x7c>
		    UartPrintf("Load Enable trigger\n");
 800796c:	4816      	ldr	r0, [pc, #88]	; (80079c8 <HAL_GPIO_EXTI_Callback+0x90>)
 800796e:	f7fe f9b3 	bl	8005cd8 <UartPrintf>
		    bPfcLoadEnable = true;
 8007972:	4b14      	ldr	r3, [pc, #80]	; (80079c4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8007974:	2201      	movs	r2, #1
 8007976:	701a      	strb	r2, [r3, #0]
		    uPfcLoadEnTimeDB = Get_SysTick();
 8007978:	f7fe fae4 	bl	8005f44 <Get_SysTick>
 800797c:	4603      	mov	r3, r0
 800797e:	4a13      	ldr	r2, [pc, #76]	; (80079cc <HAL_GPIO_EXTI_Callback+0x94>)
 8007980:	6013      	str	r3, [r2, #0]
}
 8007982:	e017      	b.n	80079b4 <HAL_GPIO_EXTI_Callback+0x7c>
	else if(GPIO_Pin == PFC_POWERFAILWARNNING_N_Pin)
 8007984:	88fb      	ldrh	r3, [r7, #6]
 8007986:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800798a:	d112      	bne.n	80079b2 <HAL_GPIO_EXTI_Callback+0x7a>
		if(bPowerFailWarn == false)
 800798c:	4b10      	ldr	r3, [pc, #64]	; (80079d0 <HAL_GPIO_EXTI_Callback+0x98>)
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	f083 0301 	eor.w	r3, r3, #1
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00c      	beq.n	80079b4 <HAL_GPIO_EXTI_Callback+0x7c>
		    UartPrintf("Power Fail Warn trigger\n");
 800799a:	480e      	ldr	r0, [pc, #56]	; (80079d4 <HAL_GPIO_EXTI_Callback+0x9c>)
 800799c:	f7fe f99c 	bl	8005cd8 <UartPrintf>
		    bPowerFailWarn = true;
 80079a0:	4b0b      	ldr	r3, [pc, #44]	; (80079d0 <HAL_GPIO_EXTI_Callback+0x98>)
 80079a2:	2201      	movs	r2, #1
 80079a4:	701a      	strb	r2, [r3, #0]
		    uPowerFailWarnTimeDB = Get_SysTick();
 80079a6:	f7fe facd 	bl	8005f44 <Get_SysTick>
 80079aa:	4603      	mov	r3, r0
 80079ac:	4a0a      	ldr	r2, [pc, #40]	; (80079d8 <HAL_GPIO_EXTI_Callback+0xa0>)
 80079ae:	6013      	str	r3, [r2, #0]
}
 80079b0:	e000      	b.n	80079b4 <HAL_GPIO_EXTI_Callback+0x7c>
		__NOP();
 80079b2:	bf00      	nop
}
 80079b4:	bf00      	nop
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	08022308 	.word	0x08022308
 80079c0:	20001d40 	.word	0x20001d40
 80079c4:	20001b66 	.word	0x20001b66
 80079c8:	08022324 	.word	0x08022324
 80079cc:	20001b68 	.word	0x20001b68
 80079d0:	20001b6c 	.word	0x20001b6c
 80079d4:	0802233c 	.word	0x0802233c
 80079d8:	20001b70 	.word	0x20001b70

080079dc <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef* hi2c)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
	// Reception of I2C data is complete
	if(I2C3 == hi2c->Instance)    // Determine whether complete is from I2C 3 EEPROM
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a04      	ldr	r2, [pc, #16]	; (80079fc <HAL_I2C_MemRxCpltCallback+0x20>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d101      	bne.n	80079f2 <HAL_I2C_MemRxCpltCallback+0x16>
	{
        // Check for EEPROM log read processing
		ProcessEepromReadComplete();
 80079ee:	f7fb f899 	bl	8002b24 <ProcessEepromReadComplete>
	}
}
 80079f2:	bf00      	nop
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	40005c00 	.word	0x40005c00

08007a00 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef* hi2c)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
	// Transmit of I2C data is complete
	if(I2C3 == hi2c->Instance)    // Determine whether complete is from I2C 3 EEPROM
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a04      	ldr	r2, [pc, #16]	; (8007a20 <HAL_I2C_MemTxCpltCallback+0x20>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d101      	bne.n	8007a16 <HAL_I2C_MemTxCpltCallback+0x16>
	{
		// Read next entry in Tx EEPROM queue, if any, and write EEPROM
		ReadTxEepromQueueAndWriteEeprom();
 8007a12:	f7fa feb7 	bl	8002784 <ReadTxEepromQueueAndWriteEeprom>
	}
}
 8007a16:	bf00      	nop
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	40005c00 	.word	0x40005c00

08007a24 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef* hi2c)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
	// Receive of I2C data is complete
	if(I2C2 == hi2c->Instance)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a09      	ldr	r2, [pc, #36]	; (8007a58 <HAL_I2C_MasterRxCpltCallback+0x34>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d10b      	bne.n	8007a4e <HAL_I2C_MasterRxCpltCallback+0x2a>
		//STMF7xx has no Device Address in the i2c instance
		//so we can't check for device address here
		//however, we are lucky that this bus only has LCD and keypad which is
		//the only one device on the bus we can read back the status
		//hence the RxCplt callback assume is from keypad read back
	    gstModel.bKeyCodeReady = true;
 8007a36:	4b09      	ldr	r3, [pc, #36]	; (8007a5c <HAL_I2C_MasterRxCpltCallback+0x38>)
 8007a38:	2201      	movs	r2, #1
 8007a3a:	711a      	strb	r2, [r3, #4]

	    if(gstModel.bLCDResetRequest == false)
 8007a3c:	4b07      	ldr	r3, [pc, #28]	; (8007a5c <HAL_I2C_MasterRxCpltCallback+0x38>)
 8007a3e:	789b      	ldrb	r3, [r3, #2]
 8007a40:	f083 0301 	eor.w	r3, r3, #1
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <HAL_I2C_MasterRxCpltCallback+0x2a>
	    {
	       ReadTxLcdQueueAndTransmit();
 8007a4a:	f7fb fe87 	bl	800375c <ReadTxLcdQueueAndTransmit>
	    }
	}
}
 8007a4e:	bf00      	nop
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	40005800 	.word	0x40005800
 8007a5c:	20001d40 	.word	0x20001d40

08007a60 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef* hi2c)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
	// Transmit of I2C data is complete

	if(I2C2 == hi2c->Instance)    // Determine whether complete is from I2C 2 LCD
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a07      	ldr	r2, [pc, #28]	; (8007a8c <HAL_I2C_MasterTxCpltCallback+0x2c>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d108      	bne.n	8007a84 <HAL_I2C_MasterTxCpltCallback+0x24>
	{
		if(gstModel.bLCDResetRequest == false)
 8007a72:	4b07      	ldr	r3, [pc, #28]	; (8007a90 <HAL_I2C_MasterTxCpltCallback+0x30>)
 8007a74:	789b      	ldrb	r3, [r3, #2]
 8007a76:	f083 0301 	eor.w	r3, r3, #1
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <HAL_I2C_MasterTxCpltCallback+0x24>
		{
			ReadTxLcdQueueAndTransmit();
 8007a80:	f7fb fe6c 	bl	800375c <ReadTxLcdQueueAndTransmit>
		}
	}
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	40005800 	.word	0x40005800
 8007a90:	20001d40 	.word	0x20001d40

08007a94 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
	if(UART5 == huart->Instance)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a04      	ldr	r2, [pc, #16]	; (8007ab4 <HAL_UART_TxCpltCallback+0x20>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d101      	bne.n	8007aaa <HAL_UART_TxCpltCallback+0x16>
	{
		// Transmit of Debug UART data is complete
		// Read next entry in print Tx UART queue, if any, and transmit out Debug UART
		ReadTxUartQueueAndTransmit();
 8007aa6:	f7fe f865 	bl	8005b74 <ReadTxUartQueueAndTransmit>
	}
}
 8007aaa:	bf00      	nop
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	40005000 	.word	0x40005000

08007ab8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
	if(ADC1 == hadc->Instance)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a09      	ldr	r2, [pc, #36]	; (8007aec <HAL_ADC_ConvCpltCallback+0x34>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d103      	bne.n	8007ad2 <HAL_ADC_ConvCpltCallback+0x1a>
	{
		SetAdc1CompleteFlag( true );
 8007aca:	2001      	movs	r0, #1
 8007acc:	f7f9 fad8 	bl	8001080 <SetAdc1CompleteFlag>
	}
	else if(ADC3 == hadc->Instance)
	{
		SetAdc3CompleteFlag( true );
	}
}
 8007ad0:	e007      	b.n	8007ae2 <HAL_ADC_ConvCpltCallback+0x2a>
	else if(ADC3 == hadc->Instance)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a06      	ldr	r2, [pc, #24]	; (8007af0 <HAL_ADC_ConvCpltCallback+0x38>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d102      	bne.n	8007ae2 <HAL_ADC_ConvCpltCallback+0x2a>
		SetAdc3CompleteFlag( true );
 8007adc:	2001      	movs	r0, #1
 8007ade:	f7f9 fc81 	bl	80013e4 <SetAdc3CompleteFlag>
}
 8007ae2:	bf00      	nop
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	40012000 	.word	0x40012000
 8007af0:	40012200 	.word	0x40012200

08007af4 <GetMinuteCount>:

uint32_t GetMinuteCount( )
{
 8007af4:	b480      	push	{r7}
 8007af6:	af00      	add	r7, sp, #0
	return minuteCntr;
 8007af8:	4b03      	ldr	r3, [pc, #12]	; (8007b08 <GetMinuteCount+0x14>)
 8007afa:	681b      	ldr	r3, [r3, #0]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	20001b50 	.word	0x20001b50

08007b0c <SetMinuteCount>:
void SetMinuteCount( uint32_t minuteCount )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
	minuteCntr = minuteCount;
 8007b14:	4a04      	ldr	r2, [pc, #16]	; (8007b28 <SetMinuteCount+0x1c>)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6013      	str	r3, [r2, #0]
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	20001b50 	.word	0x20001b50

08007b2c <GetSwVersionString>:

const char * GetSwVersionString( uint32_t swVersionNumId )
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
	return swVersionStrings[swVersionNumId];
 8007b34:	4a04      	ldr	r2, [pc, #16]	; (8007b48 <GetSwVersionString+0x1c>)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	200001f4 	.word	0x200001f4

08007b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b0a0      	sub	sp, #128	; 0x80
 8007b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	uint8_t buf[128];
	sprintf((char*)buf, "Error_Handler called\r\n");
 8007b52:	463b      	mov	r3, r7
 8007b54:	4909      	ldr	r1, [pc, #36]	; (8007b7c <Error_Handler+0x30>)
 8007b56:	4618      	mov	r0, r3
 8007b58:	f015 f97c 	bl	801ce54 <siprintf>
	HAL_UART_Transmit(&debugUart, buf, strlen((char*)buf), 0x200);
 8007b5c:	463b      	mov	r3, r7
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7f8 fb68 	bl	8000234 <strlen>
 8007b64:	4603      	mov	r3, r0
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	4639      	mov	r1, r7
 8007b6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b6e:	4804      	ldr	r0, [pc, #16]	; (8007b80 <Error_Handler+0x34>)
 8007b70:	f00a fb26 	bl	80121c0 <HAL_UART_Transmit>

  /* USER CODE END Error_Handler_Debug */
}
 8007b74:	bf00      	nop
 8007b76:	3780      	adds	r7, #128	; 0x80
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	08022358 	.word	0x08022358
 8007b80:	20004980 	.word	0x20004980

08007b84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007b8a:	4b0f      	ldr	r3, [pc, #60]	; (8007bc8 <HAL_MspInit+0x44>)
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8e:	4a0e      	ldr	r2, [pc, #56]	; (8007bc8 <HAL_MspInit+0x44>)
 8007b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b94:	6413      	str	r3, [r2, #64]	; 0x40
 8007b96:	4b0c      	ldr	r3, [pc, #48]	; (8007bc8 <HAL_MspInit+0x44>)
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b9e:	607b      	str	r3, [r7, #4]
 8007ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ba2:	4b09      	ldr	r3, [pc, #36]	; (8007bc8 <HAL_MspInit+0x44>)
 8007ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba6:	4a08      	ldr	r2, [pc, #32]	; (8007bc8 <HAL_MspInit+0x44>)
 8007ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bac:	6453      	str	r3, [r2, #68]	; 0x44
 8007bae:	4b06      	ldr	r3, [pc, #24]	; (8007bc8 <HAL_MspInit+0x44>)
 8007bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007bba:	bf00      	nop
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	40023800 	.word	0x40023800

08007bcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b090      	sub	sp, #64	; 0x40
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	605a      	str	r2, [r3, #4]
 8007bde:	609a      	str	r2, [r3, #8]
 8007be0:	60da      	str	r2, [r3, #12]
 8007be2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a8a      	ldr	r2, [pc, #552]	; (8007e14 <HAL_ADC_MspInit+0x248>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	f040 8084 	bne.w	8007cf8 <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007bf0:	4b89      	ldr	r3, [pc, #548]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf4:	4a88      	ldr	r2, [pc, #544]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bfa:	6453      	str	r3, [r2, #68]	; 0x44
 8007bfc:	4b86      	ldr	r3, [pc, #536]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c06:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c08:	4b83      	ldr	r3, [pc, #524]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0c:	4a82      	ldr	r2, [pc, #520]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007c0e:	f043 0301 	orr.w	r3, r3, #1
 8007c12:	6313      	str	r3, [r2, #48]	; 0x30
 8007c14:	4b80      	ldr	r3, [pc, #512]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c20:	4b7d      	ldr	r3, [pc, #500]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c24:	4a7c      	ldr	r2, [pc, #496]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007c26:	f043 0304 	orr.w	r3, r3, #4
 8007c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8007c2c:	4b7a      	ldr	r3, [pc, #488]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c30:	f003 0304 	and.w	r3, r3, #4
 8007c34:	623b      	str	r3, [r7, #32]
 8007c36:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c38:	4b77      	ldr	r3, [pc, #476]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3c:	4a76      	ldr	r2, [pc, #472]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007c3e:	f043 0302 	orr.w	r3, r3, #2
 8007c42:	6313      	str	r3, [r2, #48]	; 0x30
 8007c44:	4b74      	ldr	r3, [pc, #464]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c48:	f003 0302 	and.w	r3, r3, #2
 8007c4c:	61fb      	str	r3, [r7, #28]
 8007c4e:	69fb      	ldr	r3, [r7, #28]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = PressureSensor3_ADC1_IN5_Pin|PressureSensor1_ADC1_IN6_Pin|PressureSensor2_ADC1_IN7_Pin;
 8007c50:	23e0      	movs	r3, #224	; 0xe0
 8007c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c54:	2303      	movs	r3, #3
 8007c56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c60:	4619      	mov	r1, r3
 8007c62:	486e      	ldr	r0, [pc, #440]	; (8007e1c <HAL_ADC_MspInit+0x250>)
 8007c64:	f002 fcfc 	bl	800a660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PressureSensor4_ADC1_IN14_Pin|CABTEMP_ADC1_IN15_Pin;
 8007c68:	2330      	movs	r3, #48	; 0x30
 8007c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c70:	2300      	movs	r3, #0
 8007c72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4869      	ldr	r0, [pc, #420]	; (8007e20 <HAL_ADC_MspInit+0x254>)
 8007c7c:	f002 fcf0 	bl	800a660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_12V_ADC1_IN8_Pin|ADC_5VREF_ADC1_IN9_Pin;
 8007c80:	2303      	movs	r3, #3
 8007c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c84:	2303      	movs	r3, #3
 8007c86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c90:	4619      	mov	r1, r3
 8007c92:	4864      	ldr	r0, [pc, #400]	; (8007e24 <HAL_ADC_MspInit+0x258>)
 8007c94:	f002 fce4 	bl	800a660 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8007c98:	4b63      	ldr	r3, [pc, #396]	; (8007e28 <HAL_ADC_MspInit+0x25c>)
 8007c9a:	4a64      	ldr	r2, [pc, #400]	; (8007e2c <HAL_ADC_MspInit+0x260>)
 8007c9c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8007c9e:	4b62      	ldr	r3, [pc, #392]	; (8007e28 <HAL_ADC_MspInit+0x25c>)
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007ca4:	4b60      	ldr	r3, [pc, #384]	; (8007e28 <HAL_ADC_MspInit+0x25c>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007caa:	4b5f      	ldr	r3, [pc, #380]	; (8007e28 <HAL_ADC_MspInit+0x25c>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007cb0:	4b5d      	ldr	r3, [pc, #372]	; (8007e28 <HAL_ADC_MspInit+0x25c>)
 8007cb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007cb6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007cb8:	4b5b      	ldr	r3, [pc, #364]	; (8007e28 <HAL_ADC_MspInit+0x25c>)
 8007cba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007cbe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007cc0:	4b59      	ldr	r3, [pc, #356]	; (8007e28 <HAL_ADC_MspInit+0x25c>)
 8007cc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007cc6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8007cc8:	4b57      	ldr	r3, [pc, #348]	; (8007e28 <HAL_ADC_MspInit+0x25c>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007cce:	4b56      	ldr	r3, [pc, #344]	; (8007e28 <HAL_ADC_MspInit+0x25c>)
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007cd4:	4b54      	ldr	r3, [pc, #336]	; (8007e28 <HAL_ADC_MspInit+0x25c>)
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007cda:	4853      	ldr	r0, [pc, #332]	; (8007e28 <HAL_ADC_MspInit+0x25c>)
 8007cdc:	f002 f89c 	bl	8009e18 <HAL_DMA_Init>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 8007ce6:	f7ff ff31 	bl	8007b4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a4e      	ldr	r2, [pc, #312]	; (8007e28 <HAL_ADC_MspInit+0x25c>)
 8007cee:	639a      	str	r2, [r3, #56]	; 0x38
 8007cf0:	4a4d      	ldr	r2, [pc, #308]	; (8007e28 <HAL_ADC_MspInit+0x25c>)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8007cf6:	e089      	b.n	8007e0c <HAL_ADC_MspInit+0x240>
  else if(hadc->Instance==ADC3)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a4c      	ldr	r2, [pc, #304]	; (8007e30 <HAL_ADC_MspInit+0x264>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	f040 8084 	bne.w	8007e0c <HAL_ADC_MspInit+0x240>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8007d04:	4b44      	ldr	r3, [pc, #272]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d08:	4a43      	ldr	r2, [pc, #268]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d0e:	6453      	str	r3, [r2, #68]	; 0x44
 8007d10:	4b41      	ldr	r3, [pc, #260]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d18:	61bb      	str	r3, [r7, #24]
 8007d1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007d1c:	4b3e      	ldr	r3, [pc, #248]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d20:	4a3d      	ldr	r2, [pc, #244]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007d22:	f043 0320 	orr.w	r3, r3, #32
 8007d26:	6313      	str	r3, [r2, #48]	; 0x30
 8007d28:	4b3b      	ldr	r3, [pc, #236]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2c:	f003 0320 	and.w	r3, r3, #32
 8007d30:	617b      	str	r3, [r7, #20]
 8007d32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d34:	4b38      	ldr	r3, [pc, #224]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d38:	4a37      	ldr	r2, [pc, #220]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007d3a:	f043 0304 	orr.w	r3, r3, #4
 8007d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8007d40:	4b35      	ldr	r3, [pc, #212]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d44:	f003 0304 	and.w	r3, r3, #4
 8007d48:	613b      	str	r3, [r7, #16]
 8007d4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d4c:	4b32      	ldr	r3, [pc, #200]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d50:	4a31      	ldr	r2, [pc, #196]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007d52:	f043 0301 	orr.w	r3, r3, #1
 8007d56:	6313      	str	r3, [r2, #48]	; 0x30
 8007d58:	4b2f      	ldr	r3, [pc, #188]	; (8007e18 <HAL_ADC_MspInit+0x24c>)
 8007d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	60fb      	str	r3, [r7, #12]
 8007d62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FPCCurrMon_ADC3_IN9_Pin|FPCTempMon_ADC3_IN14_Pin;
 8007d64:	2318      	movs	r3, #24
 8007d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007d70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d74:	4619      	mov	r1, r3
 8007d76:	482f      	ldr	r0, [pc, #188]	; (8007e34 <HAL_ADC_MspInit+0x268>)
 8007d78:	f002 fc72 	bl	800a660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUZ_ADC3_IN10_Pin|ADC_PFCVOMon_ADC3_11_Pin;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d80:	2303      	movs	r3, #3
 8007d82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d84:	2300      	movs	r3, #0
 8007d86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4824      	ldr	r0, [pc, #144]	; (8007e20 <HAL_ADC_MspInit+0x254>)
 8007d90:	f002 fc66 	bl	800a660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MainPcba_Current_ADC3_IN0_Pin|Power_Voltage_ADC3_IN1_Pin|ADC_3V3_ADC3_IN2_Pin|ADC_5V_ADC3_IN3_Pin;
 8007d94:	230f      	movs	r3, #15
 8007d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007da4:	4619      	mov	r1, r3
 8007da6:	481d      	ldr	r0, [pc, #116]	; (8007e1c <HAL_ADC_MspInit+0x250>)
 8007da8:	f002 fc5a 	bl	800a660 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8007dac:	4b22      	ldr	r3, [pc, #136]	; (8007e38 <HAL_ADC_MspInit+0x26c>)
 8007dae:	4a23      	ldr	r2, [pc, #140]	; (8007e3c <HAL_ADC_MspInit+0x270>)
 8007db0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8007db2:	4b21      	ldr	r3, [pc, #132]	; (8007e38 <HAL_ADC_MspInit+0x26c>)
 8007db4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007db8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007dba:	4b1f      	ldr	r3, [pc, #124]	; (8007e38 <HAL_ADC_MspInit+0x26c>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8007dc0:	4b1d      	ldr	r3, [pc, #116]	; (8007e38 <HAL_ADC_MspInit+0x26c>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8007dc6:	4b1c      	ldr	r3, [pc, #112]	; (8007e38 <HAL_ADC_MspInit+0x26c>)
 8007dc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007dcc:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007dce:	4b1a      	ldr	r3, [pc, #104]	; (8007e38 <HAL_ADC_MspInit+0x26c>)
 8007dd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007dd4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007dd6:	4b18      	ldr	r3, [pc, #96]	; (8007e38 <HAL_ADC_MspInit+0x26c>)
 8007dd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007ddc:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8007dde:	4b16      	ldr	r3, [pc, #88]	; (8007e38 <HAL_ADC_MspInit+0x26c>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8007de4:	4b14      	ldr	r3, [pc, #80]	; (8007e38 <HAL_ADC_MspInit+0x26c>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007dea:	4b13      	ldr	r3, [pc, #76]	; (8007e38 <HAL_ADC_MspInit+0x26c>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8007df0:	4811      	ldr	r0, [pc, #68]	; (8007e38 <HAL_ADC_MspInit+0x26c>)
 8007df2:	f002 f811 	bl	8009e18 <HAL_DMA_Init>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <HAL_ADC_MspInit+0x234>
      Error_Handler();
 8007dfc:	f7ff fea6 	bl	8007b4c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a0d      	ldr	r2, [pc, #52]	; (8007e38 <HAL_ADC_MspInit+0x26c>)
 8007e04:	639a      	str	r2, [r3, #56]	; 0x38
 8007e06:	4a0c      	ldr	r2, [pc, #48]	; (8007e38 <HAL_ADC_MspInit+0x26c>)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8007e0c:	bf00      	nop
 8007e0e:	3740      	adds	r7, #64	; 0x40
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	40012000 	.word	0x40012000
 8007e18:	40023800 	.word	0x40023800
 8007e1c:	40020000 	.word	0x40020000
 8007e20:	40020800 	.word	0x40020800
 8007e24:	40020400 	.word	0x40020400
 8007e28:	20004d08 	.word	0x20004d08
 8007e2c:	40026470 	.word	0x40026470
 8007e30:	40012200 	.word	0x40012200
 8007e34:	40021400 	.word	0x40021400
 8007e38:	200047ec 	.word	0x200047ec
 8007e3c:	40026428 	.word	0x40026428

08007e40 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b08a      	sub	sp, #40	; 0x28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e48:	f107 0314 	add.w	r3, r7, #20
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	605a      	str	r2, [r3, #4]
 8007e52:	609a      	str	r2, [r3, #8]
 8007e54:	60da      	str	r2, [r3, #12]
 8007e56:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a15      	ldr	r2, [pc, #84]	; (8007eb4 <HAL_DAC_MspInit+0x74>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d123      	bne.n	8007eaa <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8007e62:	4b15      	ldr	r3, [pc, #84]	; (8007eb8 <HAL_DAC_MspInit+0x78>)
 8007e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e66:	4a14      	ldr	r2, [pc, #80]	; (8007eb8 <HAL_DAC_MspInit+0x78>)
 8007e68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8007e6e:	4b12      	ldr	r3, [pc, #72]	; (8007eb8 <HAL_DAC_MspInit+0x78>)
 8007e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e76:	613b      	str	r3, [r7, #16]
 8007e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e7a:	4b0f      	ldr	r3, [pc, #60]	; (8007eb8 <HAL_DAC_MspInit+0x78>)
 8007e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7e:	4a0e      	ldr	r2, [pc, #56]	; (8007eb8 <HAL_DAC_MspInit+0x78>)
 8007e80:	f043 0301 	orr.w	r3, r3, #1
 8007e84:	6313      	str	r3, [r2, #48]	; 0x30
 8007e86:	4b0c      	ldr	r3, [pc, #48]	; (8007eb8 <HAL_DAC_MspInit+0x78>)
 8007e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007e92:	2310      	movs	r3, #16
 8007e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007e96:	2303      	movs	r3, #3
 8007e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e9e:	f107 0314 	add.w	r3, r7, #20
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4805      	ldr	r0, [pc, #20]	; (8007ebc <HAL_DAC_MspInit+0x7c>)
 8007ea6:	f002 fbdb 	bl	800a660 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8007eaa:	bf00      	nop
 8007eac:	3728      	adds	r7, #40	; 0x28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	40007400 	.word	0x40007400
 8007eb8:	40023800 	.word	0x40023800
 8007ebc:	40020000 	.word	0x40020000

08007ec0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08c      	sub	sp, #48	; 0x30
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ec8:	f107 031c 	add.w	r3, r7, #28
 8007ecc:	2200      	movs	r2, #0
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	605a      	str	r2, [r3, #4]
 8007ed2:	609a      	str	r2, [r3, #8]
 8007ed4:	60da      	str	r2, [r3, #12]
 8007ed6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a45      	ldr	r2, [pc, #276]	; (8007ff4 <HAL_I2C_MspInit+0x134>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d130      	bne.n	8007f44 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007ee2:	4b45      	ldr	r3, [pc, #276]	; (8007ff8 <HAL_I2C_MspInit+0x138>)
 8007ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee6:	4a44      	ldr	r2, [pc, #272]	; (8007ff8 <HAL_I2C_MspInit+0x138>)
 8007ee8:	f043 0320 	orr.w	r3, r3, #32
 8007eec:	6313      	str	r3, [r2, #48]	; 0x30
 8007eee:	4b42      	ldr	r3, [pc, #264]	; (8007ff8 <HAL_I2C_MspInit+0x138>)
 8007ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef2:	f003 0320 	and.w	r3, r3, #32
 8007ef6:	61bb      	str	r3, [r7, #24]
 8007ef8:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = UI_I2C2_SDA_Pin|UI_I2C2_SCL_Pin;
 8007efa:	2303      	movs	r3, #3
 8007efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007efe:	2312      	movs	r3, #18
 8007f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007f02:	2301      	movs	r3, #1
 8007f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f06:	2303      	movs	r3, #3
 8007f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007f0a:	2304      	movs	r3, #4
 8007f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007f0e:	f107 031c 	add.w	r3, r7, #28
 8007f12:	4619      	mov	r1, r3
 8007f14:	4839      	ldr	r0, [pc, #228]	; (8007ffc <HAL_I2C_MspInit+0x13c>)
 8007f16:	f002 fba3 	bl	800a660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007f1a:	4b37      	ldr	r3, [pc, #220]	; (8007ff8 <HAL_I2C_MspInit+0x138>)
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	4a36      	ldr	r2, [pc, #216]	; (8007ff8 <HAL_I2C_MspInit+0x138>)
 8007f20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007f24:	6413      	str	r3, [r2, #64]	; 0x40
 8007f26:	4b34      	ldr	r3, [pc, #208]	; (8007ff8 <HAL_I2C_MspInit+0x138>)
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f2e:	617b      	str	r3, [r7, #20]
 8007f30:	697b      	ldr	r3, [r7, #20]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8007f32:	2200      	movs	r2, #0
 8007f34:	2100      	movs	r1, #0
 8007f36:	2021      	movs	r0, #33	; 0x21
 8007f38:	f001 fe4f 	bl	8009bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8007f3c:	2021      	movs	r0, #33	; 0x21
 8007f3e:	f001 fe68 	bl	8009c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8007f42:	e052      	b.n	8007fea <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C3)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a2d      	ldr	r2, [pc, #180]	; (8008000 <HAL_I2C_MspInit+0x140>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d14d      	bne.n	8007fea <HAL_I2C_MspInit+0x12a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f4e:	4b2a      	ldr	r3, [pc, #168]	; (8007ff8 <HAL_I2C_MspInit+0x138>)
 8007f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f52:	4a29      	ldr	r2, [pc, #164]	; (8007ff8 <HAL_I2C_MspInit+0x138>)
 8007f54:	f043 0304 	orr.w	r3, r3, #4
 8007f58:	6313      	str	r3, [r2, #48]	; 0x30
 8007f5a:	4b27      	ldr	r3, [pc, #156]	; (8007ff8 <HAL_I2C_MspInit+0x138>)
 8007f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5e:	f003 0304 	and.w	r3, r3, #4
 8007f62:	613b      	str	r3, [r7, #16]
 8007f64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f66:	4b24      	ldr	r3, [pc, #144]	; (8007ff8 <HAL_I2C_MspInit+0x138>)
 8007f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6a:	4a23      	ldr	r2, [pc, #140]	; (8007ff8 <HAL_I2C_MspInit+0x138>)
 8007f6c:	f043 0301 	orr.w	r3, r3, #1
 8007f70:	6313      	str	r3, [r2, #48]	; 0x30
 8007f72:	4b21      	ldr	r3, [pc, #132]	; (8007ff8 <HAL_I2C_MspInit+0x138>)
 8007f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SDA_EEPROM_Pin;
 8007f7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f84:	2312      	movs	r3, #18
 8007f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007f90:	2304      	movs	r3, #4
 8007f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8007f94:	f107 031c 	add.w	r3, r7, #28
 8007f98:	4619      	mov	r1, r3
 8007f9a:	481a      	ldr	r0, [pc, #104]	; (8008004 <HAL_I2C_MspInit+0x144>)
 8007f9c:	f002 fb60 	bl	800a660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_EEPROM_Pin;
 8007fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007fa6:	2312      	movs	r3, #18
 8007fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007faa:	2301      	movs	r3, #1
 8007fac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007fb2:	2304      	movs	r3, #4
 8007fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8007fb6:	f107 031c 	add.w	r3, r7, #28
 8007fba:	4619      	mov	r1, r3
 8007fbc:	4812      	ldr	r0, [pc, #72]	; (8008008 <HAL_I2C_MspInit+0x148>)
 8007fbe:	f002 fb4f 	bl	800a660 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007fc2:	4b0d      	ldr	r3, [pc, #52]	; (8007ff8 <HAL_I2C_MspInit+0x138>)
 8007fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc6:	4a0c      	ldr	r2, [pc, #48]	; (8007ff8 <HAL_I2C_MspInit+0x138>)
 8007fc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8007fce:	4b0a      	ldr	r3, [pc, #40]	; (8007ff8 <HAL_I2C_MspInit+0x138>)
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fd6:	60bb      	str	r3, [r7, #8]
 8007fd8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2100      	movs	r1, #0
 8007fde:	2048      	movs	r0, #72	; 0x48
 8007fe0:	f001 fdfb 	bl	8009bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8007fe4:	2048      	movs	r0, #72	; 0x48
 8007fe6:	f001 fe14 	bl	8009c12 <HAL_NVIC_EnableIRQ>
}
 8007fea:	bf00      	nop
 8007fec:	3730      	adds	r7, #48	; 0x30
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	40005800 	.word	0x40005800
 8007ff8:	40023800 	.word	0x40023800
 8007ffc:	40021400 	.word	0x40021400
 8008000:	40005c00 	.word	0x40005c00
 8008004:	40020800 	.word	0x40020800
 8008008:	40020000 	.word	0x40020000

0800800c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a07      	ldr	r2, [pc, #28]	; (8008038 <HAL_RTC_MspInit+0x2c>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d105      	bne.n	800802a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800801e:	4b07      	ldr	r3, [pc, #28]	; (800803c <HAL_RTC_MspInit+0x30>)
 8008020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008022:	4a06      	ldr	r2, [pc, #24]	; (800803c <HAL_RTC_MspInit+0x30>)
 8008024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008028:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800802a:	bf00      	nop
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	40002800 	.word	0x40002800
 800803c:	40023800 	.word	0x40023800

08008040 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b08a      	sub	sp, #40	; 0x28
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008048:	f107 0314 	add.w	r3, r7, #20
 800804c:	2200      	movs	r2, #0
 800804e:	601a      	str	r2, [r3, #0]
 8008050:	605a      	str	r2, [r3, #4]
 8008052:	609a      	str	r2, [r3, #8]
 8008054:	60da      	str	r2, [r3, #12]
 8008056:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a6d      	ldr	r2, [pc, #436]	; (8008214 <HAL_SD_MspInit+0x1d4>)
 800805e:	4293      	cmp	r3, r2
 8008060:	f040 80d4 	bne.w	800820c <HAL_SD_MspInit+0x1cc>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8008064:	4b6c      	ldr	r3, [pc, #432]	; (8008218 <HAL_SD_MspInit+0x1d8>)
 8008066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008068:	4a6b      	ldr	r2, [pc, #428]	; (8008218 <HAL_SD_MspInit+0x1d8>)
 800806a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800806e:	6453      	str	r3, [r2, #68]	; 0x44
 8008070:	4b69      	ldr	r3, [pc, #420]	; (8008218 <HAL_SD_MspInit+0x1d8>)
 8008072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008078:	613b      	str	r3, [r7, #16]
 800807a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800807c:	4b66      	ldr	r3, [pc, #408]	; (8008218 <HAL_SD_MspInit+0x1d8>)
 800807e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008080:	4a65      	ldr	r2, [pc, #404]	; (8008218 <HAL_SD_MspInit+0x1d8>)
 8008082:	f043 0308 	orr.w	r3, r3, #8
 8008086:	6313      	str	r3, [r2, #48]	; 0x30
 8008088:	4b63      	ldr	r3, [pc, #396]	; (8008218 <HAL_SD_MspInit+0x1d8>)
 800808a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800808c:	f003 0308 	and.w	r3, r3, #8
 8008090:	60fb      	str	r3, [r7, #12]
 8008092:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008094:	4b60      	ldr	r3, [pc, #384]	; (8008218 <HAL_SD_MspInit+0x1d8>)
 8008096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008098:	4a5f      	ldr	r2, [pc, #380]	; (8008218 <HAL_SD_MspInit+0x1d8>)
 800809a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800809e:	6313      	str	r3, [r2, #48]	; 0x30
 80080a0:	4b5d      	ldr	r3, [pc, #372]	; (8008218 <HAL_SD_MspInit+0x1d8>)
 80080a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a8:	60bb      	str	r3, [r7, #8]
 80080aa:	68bb      	ldr	r3, [r7, #8]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = SDIO_SCK_Pin|SDIO_CMD_Pin;
 80080ac:	23c0      	movs	r3, #192	; 0xc0
 80080ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080b0:	2302      	movs	r3, #2
 80080b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080b4:	2300      	movs	r3, #0
 80080b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080b8:	2303      	movs	r3, #3
 80080ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80080bc:	230b      	movs	r3, #11
 80080be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80080c0:	f107 0314 	add.w	r3, r7, #20
 80080c4:	4619      	mov	r1, r3
 80080c6:	4855      	ldr	r0, [pc, #340]	; (800821c <HAL_SD_MspInit+0x1dc>)
 80080c8:	f002 faca 	bl	800a660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO_D0_Pin|SDIO_D1_Pin|SDIO_D3_Pin;
 80080cc:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 80080d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080d2:	2302      	movs	r3, #2
 80080d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080d6:	2300      	movs	r3, #0
 80080d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080da:	2303      	movs	r3, #3
 80080dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80080de:	230b      	movs	r3, #11
 80080e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80080e2:	f107 0314 	add.w	r3, r7, #20
 80080e6:	4619      	mov	r1, r3
 80080e8:	484d      	ldr	r0, [pc, #308]	; (8008220 <HAL_SD_MspInit+0x1e0>)
 80080ea:	f002 fab9 	bl	800a660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO_D2_Pin;
 80080ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080f4:	2302      	movs	r3, #2
 80080f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080f8:	2300      	movs	r3, #0
 80080fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080fc:	2303      	movs	r3, #3
 80080fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8008100:	230a      	movs	r3, #10
 8008102:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDIO_D2_GPIO_Port, &GPIO_InitStruct);
 8008104:	f107 0314 	add.w	r3, r7, #20
 8008108:	4619      	mov	r1, r3
 800810a:	4845      	ldr	r0, [pc, #276]	; (8008220 <HAL_SD_MspInit+0x1e0>)
 800810c:	f002 faa8 	bl	800a660 <HAL_GPIO_Init>

    /* SDMMC2 DMA Init */
    /* SDMMC2_TX Init */
    hdma_sdmmc2_tx.Instance = DMA2_Stream0;
 8008110:	4b44      	ldr	r3, [pc, #272]	; (8008224 <HAL_SD_MspInit+0x1e4>)
 8008112:	4a45      	ldr	r2, [pc, #276]	; (8008228 <HAL_SD_MspInit+0x1e8>)
 8008114:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_tx.Init.Channel = DMA_CHANNEL_11;
 8008116:	4b43      	ldr	r3, [pc, #268]	; (8008224 <HAL_SD_MspInit+0x1e4>)
 8008118:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 800811c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800811e:	4b41      	ldr	r3, [pc, #260]	; (8008224 <HAL_SD_MspInit+0x1e4>)
 8008120:	2240      	movs	r2, #64	; 0x40
 8008122:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008124:	4b3f      	ldr	r3, [pc, #252]	; (8008224 <HAL_SD_MspInit+0x1e4>)
 8008126:	2200      	movs	r2, #0
 8008128:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800812a:	4b3e      	ldr	r3, [pc, #248]	; (8008224 <HAL_SD_MspInit+0x1e4>)
 800812c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008130:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008132:	4b3c      	ldr	r3, [pc, #240]	; (8008224 <HAL_SD_MspInit+0x1e4>)
 8008134:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008138:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800813a:	4b3a      	ldr	r3, [pc, #232]	; (8008224 <HAL_SD_MspInit+0x1e4>)
 800813c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008140:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 8008142:	4b38      	ldr	r3, [pc, #224]	; (8008224 <HAL_SD_MspInit+0x1e4>)
 8008144:	2220      	movs	r2, #32
 8008146:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008148:	4b36      	ldr	r3, [pc, #216]	; (8008224 <HAL_SD_MspInit+0x1e4>)
 800814a:	2200      	movs	r2, #0
 800814c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800814e:	4b35      	ldr	r3, [pc, #212]	; (8008224 <HAL_SD_MspInit+0x1e4>)
 8008150:	2204      	movs	r2, #4
 8008152:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8008154:	4b33      	ldr	r3, [pc, #204]	; (8008224 <HAL_SD_MspInit+0x1e4>)
 8008156:	2203      	movs	r2, #3
 8008158:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_tx.Init.MemBurst = DMA_MBURST_INC4;
 800815a:	4b32      	ldr	r3, [pc, #200]	; (8008224 <HAL_SD_MspInit+0x1e4>)
 800815c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008160:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8008162:	4b30      	ldr	r3, [pc, #192]	; (8008224 <HAL_SD_MspInit+0x1e4>)
 8008164:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008168:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_tx) != HAL_OK)
 800816a:	482e      	ldr	r0, [pc, #184]	; (8008224 <HAL_SD_MspInit+0x1e4>)
 800816c:	f001 fe54 	bl	8009e18 <HAL_DMA_Init>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 8008176:	f7ff fce9 	bl	8007b4c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc2_tx);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a29      	ldr	r2, [pc, #164]	; (8008224 <HAL_SD_MspInit+0x1e4>)
 800817e:	63da      	str	r2, [r3, #60]	; 0x3c
 8008180:	4a28      	ldr	r2, [pc, #160]	; (8008224 <HAL_SD_MspInit+0x1e4>)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2_RX Init */
    hdma_sdmmc2_rx.Instance = DMA2_Stream5;
 8008186:	4b29      	ldr	r3, [pc, #164]	; (800822c <HAL_SD_MspInit+0x1ec>)
 8008188:	4a29      	ldr	r2, [pc, #164]	; (8008230 <HAL_SD_MspInit+0x1f0>)
 800818a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
 800818c:	4b27      	ldr	r3, [pc, #156]	; (800822c <HAL_SD_MspInit+0x1ec>)
 800818e:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8008192:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008194:	4b25      	ldr	r3, [pc, #148]	; (800822c <HAL_SD_MspInit+0x1ec>)
 8008196:	2200      	movs	r2, #0
 8008198:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800819a:	4b24      	ldr	r3, [pc, #144]	; (800822c <HAL_SD_MspInit+0x1ec>)
 800819c:	2200      	movs	r2, #0
 800819e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80081a0:	4b22      	ldr	r3, [pc, #136]	; (800822c <HAL_SD_MspInit+0x1ec>)
 80081a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80081a6:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80081a8:	4b20      	ldr	r3, [pc, #128]	; (800822c <HAL_SD_MspInit+0x1ec>)
 80081aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80081ae:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80081b0:	4b1e      	ldr	r3, [pc, #120]	; (800822c <HAL_SD_MspInit+0x1ec>)
 80081b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80081b6:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_rx.Init.Mode = DMA_PFCTRL;
 80081b8:	4b1c      	ldr	r3, [pc, #112]	; (800822c <HAL_SD_MspInit+0x1ec>)
 80081ba:	2220      	movs	r2, #32
 80081bc:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80081be:	4b1b      	ldr	r3, [pc, #108]	; (800822c <HAL_SD_MspInit+0x1ec>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80081c4:	4b19      	ldr	r3, [pc, #100]	; (800822c <HAL_SD_MspInit+0x1ec>)
 80081c6:	2204      	movs	r2, #4
 80081c8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80081ca:	4b18      	ldr	r3, [pc, #96]	; (800822c <HAL_SD_MspInit+0x1ec>)
 80081cc:	2203      	movs	r2, #3
 80081ce:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_rx.Init.MemBurst = DMA_MBURST_INC4;
 80081d0:	4b16      	ldr	r3, [pc, #88]	; (800822c <HAL_SD_MspInit+0x1ec>)
 80081d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80081d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80081d8:	4b14      	ldr	r3, [pc, #80]	; (800822c <HAL_SD_MspInit+0x1ec>)
 80081da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80081de:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_rx) != HAL_OK)
 80081e0:	4812      	ldr	r0, [pc, #72]	; (800822c <HAL_SD_MspInit+0x1ec>)
 80081e2:	f001 fe19 	bl	8009e18 <HAL_DMA_Init>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 80081ec:	f7ff fcae 	bl	8007b4c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc2_rx);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a0e      	ldr	r2, [pc, #56]	; (800822c <HAL_SD_MspInit+0x1ec>)
 80081f4:	641a      	str	r2, [r3, #64]	; 0x40
 80081f6:	4a0d      	ldr	r2, [pc, #52]	; (800822c <HAL_SD_MspInit+0x1ec>)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 1, 0);
 80081fc:	2200      	movs	r2, #0
 80081fe:	2101      	movs	r1, #1
 8008200:	2067      	movs	r0, #103	; 0x67
 8008202:	f001 fcea 	bl	8009bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8008206:	2067      	movs	r0, #103	; 0x67
 8008208:	f001 fd03 	bl	8009c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 800820c:	bf00      	nop
 800820e:	3728      	adds	r7, #40	; 0x28
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	40011c00 	.word	0x40011c00
 8008218:	40023800 	.word	0x40023800
 800821c:	40020c00 	.word	0x40020c00
 8008220:	40021800 	.word	0x40021800
 8008224:	20004340 	.word	0x20004340
 8008228:	40026410 	.word	0x40026410
 800822c:	20004c94 	.word	0x20004c94
 8008230:	40026488 	.word	0x40026488

08008234 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b08c      	sub	sp, #48	; 0x30
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800823c:	f107 031c 	add.w	r3, r7, #28
 8008240:	2200      	movs	r2, #0
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	605a      	str	r2, [r3, #4]
 8008246:	609a      	str	r2, [r3, #8]
 8008248:	60da      	str	r2, [r3, #12]
 800824a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a3c      	ldr	r2, [pc, #240]	; (8008344 <HAL_SPI_MspInit+0x110>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d128      	bne.n	80082a8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008256:	4b3c      	ldr	r3, [pc, #240]	; (8008348 <HAL_SPI_MspInit+0x114>)
 8008258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800825a:	4a3b      	ldr	r2, [pc, #236]	; (8008348 <HAL_SPI_MspInit+0x114>)
 800825c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008260:	6453      	str	r3, [r2, #68]	; 0x44
 8008262:	4b39      	ldr	r3, [pc, #228]	; (8008348 <HAL_SPI_MspInit+0x114>)
 8008264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008266:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800826a:	61bb      	str	r3, [r7, #24]
 800826c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800826e:	4b36      	ldr	r3, [pc, #216]	; (8008348 <HAL_SPI_MspInit+0x114>)
 8008270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008272:	4a35      	ldr	r2, [pc, #212]	; (8008348 <HAL_SPI_MspInit+0x114>)
 8008274:	f043 0302 	orr.w	r3, r3, #2
 8008278:	6313      	str	r3, [r2, #48]	; 0x30
 800827a:	4b33      	ldr	r3, [pc, #204]	; (8008348 <HAL_SPI_MspInit+0x114>)
 800827c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827e:	f003 0302 	and.w	r3, r3, #2
 8008282:	617b      	str	r3, [r7, #20]
 8008284:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TP24_Pin|TP25_Pin|TP27_Pin;
 8008286:	2338      	movs	r3, #56	; 0x38
 8008288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800828a:	2302      	movs	r3, #2
 800828c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800828e:	2300      	movs	r3, #0
 8008290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008292:	2303      	movs	r3, #3
 8008294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008296:	2305      	movs	r3, #5
 8008298:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800829a:	f107 031c 	add.w	r3, r7, #28
 800829e:	4619      	mov	r1, r3
 80082a0:	482a      	ldr	r0, [pc, #168]	; (800834c <HAL_SPI_MspInit+0x118>)
 80082a2:	f002 f9dd 	bl	800a660 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80082a6:	e049      	b.n	800833c <HAL_SPI_MspInit+0x108>
  else if(hspi->Instance==SPI3)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a28      	ldr	r2, [pc, #160]	; (8008350 <HAL_SPI_MspInit+0x11c>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d144      	bne.n	800833c <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80082b2:	4b25      	ldr	r3, [pc, #148]	; (8008348 <HAL_SPI_MspInit+0x114>)
 80082b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b6:	4a24      	ldr	r2, [pc, #144]	; (8008348 <HAL_SPI_MspInit+0x114>)
 80082b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082bc:	6413      	str	r3, [r2, #64]	; 0x40
 80082be:	4b22      	ldr	r3, [pc, #136]	; (8008348 <HAL_SPI_MspInit+0x114>)
 80082c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082c6:	613b      	str	r3, [r7, #16]
 80082c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082ca:	4b1f      	ldr	r3, [pc, #124]	; (8008348 <HAL_SPI_MspInit+0x114>)
 80082cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ce:	4a1e      	ldr	r2, [pc, #120]	; (8008348 <HAL_SPI_MspInit+0x114>)
 80082d0:	f043 0302 	orr.w	r3, r3, #2
 80082d4:	6313      	str	r3, [r2, #48]	; 0x30
 80082d6:	4b1c      	ldr	r3, [pc, #112]	; (8008348 <HAL_SPI_MspInit+0x114>)
 80082d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082da:	f003 0302 	and.w	r3, r3, #2
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80082e2:	4b19      	ldr	r3, [pc, #100]	; (8008348 <HAL_SPI_MspInit+0x114>)
 80082e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e6:	4a18      	ldr	r2, [pc, #96]	; (8008348 <HAL_SPI_MspInit+0x114>)
 80082e8:	f043 0304 	orr.w	r3, r3, #4
 80082ec:	6313      	str	r3, [r2, #48]	; 0x30
 80082ee:	4b16      	ldr	r3, [pc, #88]	; (8008348 <HAL_SPI_MspInit+0x114>)
 80082f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f2:	f003 0304 	and.w	r3, r3, #4
 80082f6:	60bb      	str	r3, [r7, #8]
 80082f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = WIFI_SPI3_MOSI_Pin;
 80082fa:	2304      	movs	r3, #4
 80082fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082fe:	2302      	movs	r3, #2
 8008300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008302:	2300      	movs	r3, #0
 8008304:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008306:	2303      	movs	r3, #3
 8008308:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800830a:	2307      	movs	r3, #7
 800830c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(WIFI_SPI3_MOSI_GPIO_Port, &GPIO_InitStruct);
 800830e:	f107 031c 	add.w	r3, r7, #28
 8008312:	4619      	mov	r1, r3
 8008314:	480d      	ldr	r0, [pc, #52]	; (800834c <HAL_SPI_MspInit+0x118>)
 8008316:	f002 f9a3 	bl	800a660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = WIFI_SPI3_SCK_Pin|WIFI_SPI3_MISO_Pin;
 800831a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800831e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008320:	2302      	movs	r3, #2
 8008322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008324:	2300      	movs	r3, #0
 8008326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008328:	2303      	movs	r3, #3
 800832a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800832c:	2306      	movs	r3, #6
 800832e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008330:	f107 031c 	add.w	r3, r7, #28
 8008334:	4619      	mov	r1, r3
 8008336:	4807      	ldr	r0, [pc, #28]	; (8008354 <HAL_SPI_MspInit+0x120>)
 8008338:	f002 f992 	bl	800a660 <HAL_GPIO_Init>
}
 800833c:	bf00      	nop
 800833e:	3730      	adds	r7, #48	; 0x30
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	40013000 	.word	0x40013000
 8008348:	40023800 	.word	0x40023800
 800834c:	40020400 	.word	0x40020400
 8008350:	40003c00 	.word	0x40003c00
 8008354:	40020800 	.word	0x40020800

08008358 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008368:	d114      	bne.n	8008394 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800836a:	4b2b      	ldr	r3, [pc, #172]	; (8008418 <HAL_TIM_Base_MspInit+0xc0>)
 800836c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836e:	4a2a      	ldr	r2, [pc, #168]	; (8008418 <HAL_TIM_Base_MspInit+0xc0>)
 8008370:	f043 0301 	orr.w	r3, r3, #1
 8008374:	6413      	str	r3, [r2, #64]	; 0x40
 8008376:	4b28      	ldr	r3, [pc, #160]	; (8008418 <HAL_TIM_Base_MspInit+0xc0>)
 8008378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8008382:	2200      	movs	r2, #0
 8008384:	2100      	movs	r1, #0
 8008386:	201c      	movs	r0, #28
 8008388:	f001 fc27 	bl	8009bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800838c:	201c      	movs	r0, #28
 800838e:	f001 fc40 	bl	8009c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8008392:	e03c      	b.n	800840e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a20      	ldr	r2, [pc, #128]	; (800841c <HAL_TIM_Base_MspInit+0xc4>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d10c      	bne.n	80083b8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800839e:	4b1e      	ldr	r3, [pc, #120]	; (8008418 <HAL_TIM_Base_MspInit+0xc0>)
 80083a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a2:	4a1d      	ldr	r2, [pc, #116]	; (8008418 <HAL_TIM_Base_MspInit+0xc0>)
 80083a4:	f043 0308 	orr.w	r3, r3, #8
 80083a8:	6413      	str	r3, [r2, #64]	; 0x40
 80083aa:	4b1b      	ldr	r3, [pc, #108]	; (8008418 <HAL_TIM_Base_MspInit+0xc0>)
 80083ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ae:	f003 0308 	and.w	r3, r3, #8
 80083b2:	613b      	str	r3, [r7, #16]
 80083b4:	693b      	ldr	r3, [r7, #16]
}
 80083b6:	e02a      	b.n	800840e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a18      	ldr	r2, [pc, #96]	; (8008420 <HAL_TIM_Base_MspInit+0xc8>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d114      	bne.n	80083ec <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80083c2:	4b15      	ldr	r3, [pc, #84]	; (8008418 <HAL_TIM_Base_MspInit+0xc0>)
 80083c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c6:	4a14      	ldr	r2, [pc, #80]	; (8008418 <HAL_TIM_Base_MspInit+0xc0>)
 80083c8:	f043 0320 	orr.w	r3, r3, #32
 80083cc:	6413      	str	r3, [r2, #64]	; 0x40
 80083ce:	4b12      	ldr	r3, [pc, #72]	; (8008418 <HAL_TIM_Base_MspInit+0xc0>)
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	f003 0320 	and.w	r3, r3, #32
 80083d6:	60fb      	str	r3, [r7, #12]
 80083d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80083da:	2200      	movs	r2, #0
 80083dc:	2100      	movs	r1, #0
 80083de:	2037      	movs	r0, #55	; 0x37
 80083e0:	f001 fbfb 	bl	8009bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80083e4:	2037      	movs	r0, #55	; 0x37
 80083e6:	f001 fc14 	bl	8009c12 <HAL_NVIC_EnableIRQ>
}
 80083ea:	e010      	b.n	800840e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM14)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a0c      	ldr	r2, [pc, #48]	; (8008424 <HAL_TIM_Base_MspInit+0xcc>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d10b      	bne.n	800840e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80083f6:	4b08      	ldr	r3, [pc, #32]	; (8008418 <HAL_TIM_Base_MspInit+0xc0>)
 80083f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fa:	4a07      	ldr	r2, [pc, #28]	; (8008418 <HAL_TIM_Base_MspInit+0xc0>)
 80083fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008400:	6413      	str	r3, [r2, #64]	; 0x40
 8008402:	4b05      	ldr	r3, [pc, #20]	; (8008418 <HAL_TIM_Base_MspInit+0xc0>)
 8008404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800840a:	60bb      	str	r3, [r7, #8]
 800840c:	68bb      	ldr	r3, [r7, #8]
}
 800840e:	bf00      	nop
 8008410:	3718      	adds	r7, #24
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	40023800 	.word	0x40023800
 800841c:	40000c00 	.word	0x40000c00
 8008420:	40001400 	.word	0x40001400
 8008424:	40002000 	.word	0x40002000

08008428 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b08a      	sub	sp, #40	; 0x28
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008430:	f107 0314 	add.w	r3, r7, #20
 8008434:	2200      	movs	r2, #0
 8008436:	601a      	str	r2, [r3, #0]
 8008438:	605a      	str	r2, [r3, #4]
 800843a:	609a      	str	r2, [r3, #8]
 800843c:	60da      	str	r2, [r3, #12]
 800843e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008448:	d11d      	bne.n	8008486 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800844a:	4b22      	ldr	r3, [pc, #136]	; (80084d4 <HAL_TIM_MspPostInit+0xac>)
 800844c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844e:	4a21      	ldr	r2, [pc, #132]	; (80084d4 <HAL_TIM_MspPostInit+0xac>)
 8008450:	f043 0302 	orr.w	r3, r3, #2
 8008454:	6313      	str	r3, [r2, #48]	; 0x30
 8008456:	4b1f      	ldr	r3, [pc, #124]	; (80084d4 <HAL_TIM_MspPostInit+0xac>)
 8008458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845a:	f003 0302 	and.w	r3, r3, #2
 800845e:	613b      	str	r3, [r7, #16]
 8008460:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = BZR_PWM_Pin;
 8008462:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008468:	2302      	movs	r3, #2
 800846a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800846c:	2300      	movs	r3, #0
 800846e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008470:	2300      	movs	r3, #0
 8008472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008474:	2301      	movs	r3, #1
 8008476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BZR_PWM_GPIO_Port, &GPIO_InitStruct);
 8008478:	f107 0314 	add.w	r3, r7, #20
 800847c:	4619      	mov	r1, r3
 800847e:	4816      	ldr	r0, [pc, #88]	; (80084d8 <HAL_TIM_MspPostInit+0xb0>)
 8008480:	f002 f8ee 	bl	800a660 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8008484:	e021      	b.n	80084ca <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM14)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a14      	ldr	r2, [pc, #80]	; (80084dc <HAL_TIM_MspPostInit+0xb4>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d11c      	bne.n	80084ca <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008490:	4b10      	ldr	r3, [pc, #64]	; (80084d4 <HAL_TIM_MspPostInit+0xac>)
 8008492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008494:	4a0f      	ldr	r2, [pc, #60]	; (80084d4 <HAL_TIM_MspPostInit+0xac>)
 8008496:	f043 0320 	orr.w	r3, r3, #32
 800849a:	6313      	str	r3, [r2, #48]	; 0x30
 800849c:	4b0d      	ldr	r3, [pc, #52]	; (80084d4 <HAL_TIM_MspPostInit+0xac>)
 800849e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a0:	f003 0320 	and.w	r3, r3, #32
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_CTRL_PWM_TIM14_Pin;
 80084a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084ae:	2302      	movs	r3, #2
 80084b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084b2:	2300      	movs	r3, #0
 80084b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084b6:	2300      	movs	r3, #0
 80084b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80084ba:	2309      	movs	r3, #9
 80084bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_CTRL_PWM_TIM14_GPIO_Port, &GPIO_InitStruct);
 80084be:	f107 0314 	add.w	r3, r7, #20
 80084c2:	4619      	mov	r1, r3
 80084c4:	4806      	ldr	r0, [pc, #24]	; (80084e0 <HAL_TIM_MspPostInit+0xb8>)
 80084c6:	f002 f8cb 	bl	800a660 <HAL_GPIO_Init>
}
 80084ca:	bf00      	nop
 80084cc:	3728      	adds	r7, #40	; 0x28
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	40023800 	.word	0x40023800
 80084d8:	40020400 	.word	0x40020400
 80084dc:	40002000 	.word	0x40002000
 80084e0:	40021400 	.word	0x40021400

080084e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b08e      	sub	sp, #56	; 0x38
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084f0:	2200      	movs	r2, #0
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	605a      	str	r2, [r3, #4]
 80084f6:	609a      	str	r2, [r3, #8]
 80084f8:	60da      	str	r2, [r3, #12]
 80084fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a5b      	ldr	r2, [pc, #364]	; (8008670 <HAL_UART_MspInit+0x18c>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d14d      	bne.n	80085a2 <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8008506:	4b5b      	ldr	r3, [pc, #364]	; (8008674 <HAL_UART_MspInit+0x190>)
 8008508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850a:	4a5a      	ldr	r2, [pc, #360]	; (8008674 <HAL_UART_MspInit+0x190>)
 800850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008510:	6413      	str	r3, [r2, #64]	; 0x40
 8008512:	4b58      	ldr	r3, [pc, #352]	; (8008674 <HAL_UART_MspInit+0x190>)
 8008514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800851a:	623b      	str	r3, [r7, #32]
 800851c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800851e:	4b55      	ldr	r3, [pc, #340]	; (8008674 <HAL_UART_MspInit+0x190>)
 8008520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008522:	4a54      	ldr	r2, [pc, #336]	; (8008674 <HAL_UART_MspInit+0x190>)
 8008524:	f043 0304 	orr.w	r3, r3, #4
 8008528:	6313      	str	r3, [r2, #48]	; 0x30
 800852a:	4b52      	ldr	r3, [pc, #328]	; (8008674 <HAL_UART_MspInit+0x190>)
 800852c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852e:	f003 0304 	and.w	r3, r3, #4
 8008532:	61fb      	str	r3, [r7, #28]
 8008534:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008536:	4b4f      	ldr	r3, [pc, #316]	; (8008674 <HAL_UART_MspInit+0x190>)
 8008538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853a:	4a4e      	ldr	r2, [pc, #312]	; (8008674 <HAL_UART_MspInit+0x190>)
 800853c:	f043 0308 	orr.w	r3, r3, #8
 8008540:	6313      	str	r3, [r2, #48]	; 0x30
 8008542:	4b4c      	ldr	r3, [pc, #304]	; (8008674 <HAL_UART_MspInit+0x190>)
 8008544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008546:	f003 0308 	and.w	r3, r3, #8
 800854a:	61bb      	str	r3, [r7, #24]
 800854c:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART5_TX_Pin;
 800854e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008552:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008554:	2302      	movs	r3, #2
 8008556:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008558:	2300      	movs	r3, #0
 800855a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800855c:	2303      	movs	r3, #3
 800855e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8008560:	2308      	movs	r3, #8
 8008562:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8008564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008568:	4619      	mov	r1, r3
 800856a:	4843      	ldr	r0, [pc, #268]	; (8008678 <HAL_UART_MspInit+0x194>)
 800856c:	f002 f878 	bl	800a660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DEBUG_UART5_RX_Pin;
 8008570:	2304      	movs	r3, #4
 8008572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008574:	2302      	movs	r3, #2
 8008576:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008578:	2300      	movs	r3, #0
 800857a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800857c:	2303      	movs	r3, #3
 800857e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8008580:	2308      	movs	r3, #8
 8008582:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8008584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008588:	4619      	mov	r1, r3
 800858a:	483c      	ldr	r0, [pc, #240]	; (800867c <HAL_UART_MspInit+0x198>)
 800858c:	f002 f868 	bl	800a660 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8008590:	2200      	movs	r2, #0
 8008592:	2105      	movs	r1, #5
 8008594:	2035      	movs	r0, #53	; 0x35
 8008596:	f001 fb20 	bl	8009bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800859a:	2035      	movs	r0, #53	; 0x35
 800859c:	f001 fb39 	bl	8009c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 80085a0:	e062      	b.n	8008668 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==UART7)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a36      	ldr	r2, [pc, #216]	; (8008680 <HAL_UART_MspInit+0x19c>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d128      	bne.n	80085fe <HAL_UART_MspInit+0x11a>
    __HAL_RCC_UART7_CLK_ENABLE();
 80085ac:	4b31      	ldr	r3, [pc, #196]	; (8008674 <HAL_UART_MspInit+0x190>)
 80085ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b0:	4a30      	ldr	r2, [pc, #192]	; (8008674 <HAL_UART_MspInit+0x190>)
 80085b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085b6:	6413      	str	r3, [r2, #64]	; 0x40
 80085b8:	4b2e      	ldr	r3, [pc, #184]	; (8008674 <HAL_UART_MspInit+0x190>)
 80085ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085c0:	617b      	str	r3, [r7, #20]
 80085c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80085c4:	4b2b      	ldr	r3, [pc, #172]	; (8008674 <HAL_UART_MspInit+0x190>)
 80085c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c8:	4a2a      	ldr	r2, [pc, #168]	; (8008674 <HAL_UART_MspInit+0x190>)
 80085ca:	f043 0320 	orr.w	r3, r3, #32
 80085ce:	6313      	str	r3, [r2, #48]	; 0x30
 80085d0:	4b28      	ldr	r3, [pc, #160]	; (8008674 <HAL_UART_MspInit+0x190>)
 80085d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d4:	f003 0320 	and.w	r3, r3, #32
 80085d8:	613b      	str	r3, [r7, #16]
 80085da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART7_RX_Pin|UART7_TX_Pin;
 80085dc:	23c0      	movs	r3, #192	; 0xc0
 80085de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085e0:	2302      	movs	r3, #2
 80085e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085e4:	2300      	movs	r3, #0
 80085e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085e8:	2303      	movs	r3, #3
 80085ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80085ec:	2308      	movs	r3, #8
 80085ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80085f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085f4:	4619      	mov	r1, r3
 80085f6:	4823      	ldr	r0, [pc, #140]	; (8008684 <HAL_UART_MspInit+0x1a0>)
 80085f8:	f002 f832 	bl	800a660 <HAL_GPIO_Init>
}
 80085fc:	e034      	b.n	8008668 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==UART8)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a21      	ldr	r2, [pc, #132]	; (8008688 <HAL_UART_MspInit+0x1a4>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d12f      	bne.n	8008668 <HAL_UART_MspInit+0x184>
    __HAL_RCC_UART8_CLK_ENABLE();
 8008608:	4b1a      	ldr	r3, [pc, #104]	; (8008674 <HAL_UART_MspInit+0x190>)
 800860a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860c:	4a19      	ldr	r2, [pc, #100]	; (8008674 <HAL_UART_MspInit+0x190>)
 800860e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008612:	6413      	str	r3, [r2, #64]	; 0x40
 8008614:	4b17      	ldr	r3, [pc, #92]	; (8008674 <HAL_UART_MspInit+0x190>)
 8008616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800861c:	60fb      	str	r3, [r7, #12]
 800861e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008620:	4b14      	ldr	r3, [pc, #80]	; (8008674 <HAL_UART_MspInit+0x190>)
 8008622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008624:	4a13      	ldr	r2, [pc, #76]	; (8008674 <HAL_UART_MspInit+0x190>)
 8008626:	f043 0310 	orr.w	r3, r3, #16
 800862a:	6313      	str	r3, [r2, #48]	; 0x30
 800862c:	4b11      	ldr	r3, [pc, #68]	; (8008674 <HAL_UART_MspInit+0x190>)
 800862e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008630:	f003 0310 	and.w	r3, r3, #16
 8008634:	60bb      	str	r3, [r7, #8]
 8008636:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GUI_UART8_RX_Pin|GUI_UART8_TX_Pin;
 8008638:	2303      	movs	r3, #3
 800863a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800863c:	2302      	movs	r3, #2
 800863e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008640:	2300      	movs	r3, #0
 8008642:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008644:	2303      	movs	r3, #3
 8008646:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8008648:	2308      	movs	r3, #8
 800864a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800864c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008650:	4619      	mov	r1, r3
 8008652:	480e      	ldr	r0, [pc, #56]	; (800868c <HAL_UART_MspInit+0x1a8>)
 8008654:	f002 f804 	bl	800a660 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8008658:	2200      	movs	r2, #0
 800865a:	2100      	movs	r1, #0
 800865c:	2053      	movs	r0, #83	; 0x53
 800865e:	f001 fabc 	bl	8009bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8008662:	2053      	movs	r0, #83	; 0x53
 8008664:	f001 fad5 	bl	8009c12 <HAL_NVIC_EnableIRQ>
}
 8008668:	bf00      	nop
 800866a:	3738      	adds	r7, #56	; 0x38
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	40005000 	.word	0x40005000
 8008674:	40023800 	.word	0x40023800
 8008678:	40020800 	.word	0x40020800
 800867c:	40020c00 	.word	0x40020c00
 8008680:	40007800 	.word	0x40007800
 8008684:	40021400 	.word	0x40021400
 8008688:	40007c00 	.word	0x40007c00
 800868c:	40021000 	.word	0x40021000

08008690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008690:	b480      	push	{r7}
 8008692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008694:	e7fe      	b.n	8008694 <NMI_Handler+0x4>

08008696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008696:	b480      	push	{r7}
 8008698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800869a:	e7fe      	b.n	800869a <HardFault_Handler+0x4>

0800869c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800869c:	b480      	push	{r7}
 800869e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80086a0:	e7fe      	b.n	80086a0 <MemManage_Handler+0x4>

080086a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80086a2:	b480      	push	{r7}
 80086a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80086a6:	e7fe      	b.n	80086a6 <BusFault_Handler+0x4>

080086a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80086a8:	b480      	push	{r7}
 80086aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80086ac:	e7fe      	b.n	80086ac <UsageFault_Handler+0x4>

080086ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80086ae:	b480      	push	{r7}
 80086b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80086b2:	bf00      	nop
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80086bc:	b480      	push	{r7}
 80086be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80086c0:	bf00      	nop
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80086ca:	b480      	push	{r7}
 80086cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80086ce:	bf00      	nop
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80086dc:	f000 fbbe 	bl	8008e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80086e0:	bf00      	nop
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80086e8:	2004      	movs	r0, #4
 80086ea:	f002 f9a1 	bl	800aa30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80086ee:	bf00      	nop
 80086f0:	bd80      	pop	{r7, pc}
	...

080086f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80086f8:	4802      	ldr	r0, [pc, #8]	; (8008704 <TIM2_IRQHandler+0x10>)
 80086fa:	f008 fd8b 	bl	8011214 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80086fe:	bf00      	nop
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20006ed8 	.word	0x20006ed8

08008708 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800870c:	4802      	ldr	r0, [pc, #8]	; (8008718 <I2C2_EV_IRQHandler+0x10>)
 800870e:	f002 fd35 	bl	800b17c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8008712:	bf00      	nop
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	200043a0 	.word	0x200043a0

0800871c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	uint32_t i = 0;    //added by GG 10/06/21
 8008722:	2300      	movs	r3, #0
 8008724:	607b      	str	r3, [r7, #4]
	if(__HAL_GPIO_EXTI_GET_FLAG(PFC_POWERFAILWARNNING_N_Pin))
 8008726:	4b1f      	ldr	r3, [pc, #124]	; (80087a4 <EXTI15_10_IRQHandler+0x88>)
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d007      	beq.n	8008742 <EXTI15_10_IRQHandler+0x26>
	{
		bPowerFailWarn = true;
 8008732:	4b1d      	ldr	r3, [pc, #116]	; (80087a8 <EXTI15_10_IRQHandler+0x8c>)
 8008734:	2201      	movs	r2, #1
 8008736:	701a      	strb	r2, [r3, #0]
		uPowerFailWarnTimeDB = Get_SysTick();
 8008738:	f7fd fc04 	bl	8005f44 <Get_SysTick>
 800873c:	4603      	mov	r3, r0
 800873e:	4a1b      	ldr	r2, [pc, #108]	; (80087ac <EXTI15_10_IRQHandler+0x90>)
 8008740:	6013      	str	r3, [r2, #0]
	}
	if(__HAL_GPIO_EXTI_GET_FLAG(PFC_LoadEN_N_Pin))
 8008742:	4b18      	ldr	r3, [pc, #96]	; (80087a4 <EXTI15_10_IRQHandler+0x88>)
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800874a:	2b00      	cmp	r3, #0
 800874c:	d01a      	beq.n	8008784 <EXTI15_10_IRQHandler+0x68>
	{
		for (i=0; i<1000000; i++) { }  //stupid delay to avoid using HAL_delay inside interupt GG 10/05/21
 800874e:	2300      	movs	r3, #0
 8008750:	607b      	str	r3, [r7, #4]
 8008752:	e002      	b.n	800875a <EXTI15_10_IRQHandler+0x3e>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	3301      	adds	r3, #1
 8008758:	607b      	str	r3, [r7, #4]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a14      	ldr	r2, [pc, #80]	; (80087b0 <EXTI15_10_IRQHandler+0x94>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d9f8      	bls.n	8008754 <EXTI15_10_IRQHandler+0x38>
                                       //we must delay to de-bounce signal here, not in the main! GG
		if (! HAL_GPIO_ReadPin(GPIOF, PFC_LoadEN_N_Pin))  //if signal is still low then set flag
 8008762:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008766:	4813      	ldr	r0, [pc, #76]	; (80087b4 <EXTI15_10_IRQHandler+0x98>)
 8008768:	f002 f916 	bl	800a998 <HAL_GPIO_ReadPin>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d108      	bne.n	8008784 <EXTI15_10_IRQHandler+0x68>
		{
			SetPfcLoadEnable( true );
 8008772:	2001      	movs	r0, #1
 8008774:	f7fa ff6e 	bl	8003654 <SetPfcLoadEnable>
			HAL_GPIO_WritePin(GPIOD, LED_Y_Pin, true);  //added for troubleshoot purposes GG 100521
 8008778:	2201      	movs	r2, #1
 800877a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800877e:	480e      	ldr	r0, [pc, #56]	; (80087b8 <EXTI15_10_IRQHandler+0x9c>)
 8008780:	f002 f922 	bl	800a9c8 <HAL_GPIO_WritePin>
		//bPfcLoadEnable = true;
	    //uPfcLoadEnTimeDB = Get_SysTick();
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8008784:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008788:	f002 f952 	bl	800aa30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800878c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008790:	f002 f94e 	bl	800aa30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8008794:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008798:	f002 f94a 	bl	800aa30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800879c:	bf00      	nop
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	40013c00 	.word	0x40013c00
 80087a8:	20001b6c 	.word	0x20001b6c
 80087ac:	20001b70 	.word	0x20001b70
 80087b0:	000f423f 	.word	0x000f423f
 80087b4:	40021400 	.word	0x40021400
 80087b8:	40020c00 	.word	0x40020c00

080087bc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80087c0:	4803      	ldr	r0, [pc, #12]	; (80087d0 <UART5_IRQHandler+0x14>)
 80087c2:	f009 feab 	bl	801251c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  USER_UART_IRQHandler(&debugUart);
 80087c6:	4802      	ldr	r0, [pc, #8]	; (80087d0 <UART5_IRQHandler+0x14>)
 80087c8:	f000 f860 	bl	800888c <USER_UART_IRQHandler>
  /* USER CODE END UART5_IRQn 1 */
}
 80087cc:	bf00      	nop
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	20004980 	.word	0x20004980

080087d4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80087d8:	4802      	ldr	r0, [pc, #8]	; (80087e4 <TIM7_IRQHandler+0x10>)
 80087da:	f008 fd1b 	bl	8011214 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80087de:	bf00      	nop
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20007170 	.word	0x20007170

080087e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_tx);
 80087ec:	4802      	ldr	r0, [pc, #8]	; (80087f8 <DMA2_Stream0_IRQHandler+0x10>)
 80087ee:	f001 fcb3 	bl	800a158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80087f2:	bf00      	nop
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	20004340 	.word	0x20004340

080087fc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8008800:	4802      	ldr	r0, [pc, #8]	; (800880c <DMA2_Stream1_IRQHandler+0x10>)
 8008802:	f001 fca9 	bl	800a158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8008806:	bf00      	nop
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	200047ec 	.word	0x200047ec

08008810 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008814:	4802      	ldr	r0, [pc, #8]	; (8008820 <DMA2_Stream4_IRQHandler+0x10>)
 8008816:	f001 fc9f 	bl	800a158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800881a:	bf00      	nop
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20004d08 	.word	0x20004d08

08008824 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008828:	4802      	ldr	r0, [pc, #8]	; (8008834 <OTG_FS_IRQHandler+0x10>)
 800882a:	f004 fa28 	bl	800cc7e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800882e:	bf00      	nop
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	20009b04 	.word	0x20009b04

08008838 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_rx);
 800883c:	4802      	ldr	r0, [pc, #8]	; (8008848 <DMA2_Stream5_IRQHandler+0x10>)
 800883e:	f001 fc8b 	bl	800a158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8008842:	bf00      	nop
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	20004c94 	.word	0x20004c94

0800884c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8008850:	4802      	ldr	r0, [pc, #8]	; (800885c <I2C3_EV_IRQHandler+0x10>)
 8008852:	f002 fc93 	bl	800b17c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8008856:	bf00      	nop
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	20004270 	.word	0x20004270

08008860 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8008864:	4803      	ldr	r0, [pc, #12]	; (8008874 <UART8_IRQHandler+0x14>)
 8008866:	f009 fe59 	bl	801251c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */
  USER_UART_IRQHandler(&guiUart);
 800886a:	4802      	ldr	r0, [pc, #8]	; (8008874 <UART8_IRQHandler+0x14>)
 800886c:	f000 f80e 	bl	800888c <USER_UART_IRQHandler>
  /* USER CODE END UART8_IRQn 1 */
}
 8008870:	bf00      	nop
 8008872:	bd80      	pop	{r7, pc}
 8008874:	20006df0 	.word	0x20006df0

08008878 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 800887c:	4802      	ldr	r0, [pc, #8]	; (8008888 <SDMMC2_IRQHandler+0x10>)
 800887e:	f007 f8d9 	bl	800fa34 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8008882:	bf00      	nop
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	200048fc 	.word	0x200048fc

0800888c <USER_UART_IRQHandler>:

/* USER CODE BEGIN 1 */

void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
    if(UART5 == huart->Instance)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a13      	ldr	r2, [pc, #76]	; (80088e8 <USER_UART_IRQHandler+0x5c>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d10d      	bne.n	80088ba <USER_UART_IRQHandler+0x2e>
    {
        if(RESET != __HAL_UART_GET_FLAG(&debugUart, UART_FLAG_IDLE))   // Determine whether idle interrupt is set
 800889e:	4b13      	ldr	r3, [pc, #76]	; (80088ec <USER_UART_IRQHandler+0x60>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	69db      	ldr	r3, [r3, #28]
 80088a4:	f003 0310 	and.w	r3, r3, #16
 80088a8:	2b10      	cmp	r3, #16
 80088aa:	d106      	bne.n	80088ba <USER_UART_IRQHandler+0x2e>
        {
            __HAL_UART_CLEAR_IDLEFLAG(&debugUart);                     // Clear idle interrupt (otherwise it will continue to enter interrupt)
 80088ac:	4b0f      	ldr	r3, [pc, #60]	; (80088ec <USER_UART_IRQHandler+0x60>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2210      	movs	r2, #16
 80088b2:	621a      	str	r2, [r3, #32]
            USER_UART_IDLECallback(&debugUart);                             // Call UART idle interrupt handler
 80088b4:	480d      	ldr	r0, [pc, #52]	; (80088ec <USER_UART_IRQHandler+0x60>)
 80088b6:	f000 f81f 	bl	80088f8 <USER_UART_IDLECallback>
        }
    }

    if(UART8 == huart->Instance)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a0c      	ldr	r2, [pc, #48]	; (80088f0 <USER_UART_IRQHandler+0x64>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d10d      	bne.n	80088e0 <USER_UART_IRQHandler+0x54>
    {
        if(RESET != __HAL_UART_GET_FLAG(&guiUart, UART_FLAG_IDLE))   // Determine whether idle interrupt is set
 80088c4:	4b0b      	ldr	r3, [pc, #44]	; (80088f4 <USER_UART_IRQHandler+0x68>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	69db      	ldr	r3, [r3, #28]
 80088ca:	f003 0310 	and.w	r3, r3, #16
 80088ce:	2b10      	cmp	r3, #16
 80088d0:	d106      	bne.n	80088e0 <USER_UART_IRQHandler+0x54>
        {
            __HAL_UART_CLEAR_IDLEFLAG(&guiUart);                     // Clear idle interrupt (otherwise it will continue to enter interrupt)
 80088d2:	4b08      	ldr	r3, [pc, #32]	; (80088f4 <USER_UART_IRQHandler+0x68>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2210      	movs	r2, #16
 80088d8:	621a      	str	r2, [r3, #32]
            USER_UART8_IDLECallback(&guiUart);                             // Call UART idle interrupt handler
 80088da:	4806      	ldr	r0, [pc, #24]	; (80088f4 <USER_UART_IRQHandler+0x68>)
 80088dc:	f000 f8c6 	bl	8008a6c <USER_UART8_IDLECallback>
        }
    }
}
 80088e0:	bf00      	nop
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	40005000 	.word	0x40005000
 80088ec:	20004980 	.word	0x20004980
 80088f0:	40007c00 	.word	0x40007c00
 80088f4:	20006df0 	.word	0x20006df0

080088f8 <USER_UART_IDLECallback>:
const int8_t endOfCommandChar = '\r';
uint16_t unprocessedCommandInputLength = 0;
uint16_t uartRxXferCount;

void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
	if( commandReady != false )
 8008900:	4b53      	ldr	r3, [pc, #332]	; (8008a50 <USER_UART_IDLECallback+0x158>)
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	f040 809f 	bne.w	8008a48 <USER_UART_IDLECallback+0x150>
		// Do not start assembling next command until previous command has been processed
		return;
	}

	// Get number of bytes received
	uartRxXferCount = UART_RX_DMA_BUFFER_SIZE - huart->RxXferCount;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008910:	b29b      	uxth	r3, r3
 8008912:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008916:	b29a      	uxth	r2, r3
 8008918:	4b4e      	ldr	r3, [pc, #312]	; (8008a54 <USER_UART_IDLECallback+0x15c>)
 800891a:	801a      	strh	r2, [r3, #0]

	// Stop this UART reception
	HAL_UART_AbortReceive_IT(&debugUart);
 800891c:	484e      	ldr	r0, [pc, #312]	; (8008a58 <USER_UART_IDLECallback+0x160>)
 800891e:	f009 fd7d 	bl	801241c <HAL_UART_AbortReceive_IT>

    // Calculate the length of the received data
    char * endOfCommandPos = strchr((char *)uartReceiveBuff, endOfCommandChar);
 8008922:	230d      	movs	r3, #13
 8008924:	4619      	mov	r1, r3
 8008926:	484d      	ldr	r0, [pc, #308]	; (8008a5c <USER_UART_IDLECallback+0x164>)
 8008928:	f014 fab4 	bl	801ce94 <strchr>
 800892c:	60b8      	str	r0, [r7, #8]
    uint16_t rxMessageLength = uartRxXferCount;
 800892e:	4b49      	ldr	r3, [pc, #292]	; (8008a54 <USER_UART_IDLECallback+0x15c>)
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	81fb      	strh	r3, [r7, #14]
    if( endOfCommandPos != NULL )
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d005      	beq.n	8008946 <USER_UART_IDLECallback+0x4e>
    {
    	rxMessageLength = (uint8_t *)endOfCommandPos - uartReceiveBuff + 1;
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	4a47      	ldr	r2, [pc, #284]	; (8008a5c <USER_UART_IDLECallback+0x164>)
 800893e:	1a9b      	subs	r3, r3, r2
 8008940:	b29b      	uxth	r3, r3
 8008942:	3301      	adds	r3, #1
 8008944:	81fb      	strh	r3, [r7, #14]
    }

    // Check that total command is not too long
    if (MAX_COMMAND_LENGTH <  (unprocessedCommandInputLength + rxMessageLength) )
 8008946:	4b46      	ldr	r3, [pc, #280]	; (8008a60 <USER_UART_IDLECallback+0x168>)
 8008948:	881b      	ldrh	r3, [r3, #0]
 800894a:	461a      	mov	r2, r3
 800894c:	89fb      	ldrh	r3, [r7, #14]
 800894e:	4413      	add	r3, r2
 8008950:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8008954:	dd15      	ble.n	8008982 <USER_UART_IDLECallback+0x8a>
    {
    	// Command length exceeds maximum length -- discard current command and return
    	unprocessedCommandInputLength = 0;
 8008956:	4b42      	ldr	r3, [pc, #264]	; (8008a60 <USER_UART_IDLECallback+0x168>)
 8008958:	2200      	movs	r2, #0
 800895a:	801a      	strh	r2, [r3, #0]

    	// Clear Receive and temp command Buffers
    	memset(uartReceiveBuff, 0, MAX_COMMAND_LENGTH);
 800895c:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8008960:	2100      	movs	r1, #0
 8008962:	483e      	ldr	r0, [pc, #248]	; (8008a5c <USER_UART_IDLECallback+0x164>)
 8008964:	f013 fd16 	bl	801c394 <memset>
    	memset(commandBufTemp, '\0', MAX_COMMAND_LENGTH);
 8008968:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 800896c:	2100      	movs	r1, #0
 800896e:	483d      	ldr	r0, [pc, #244]	; (8008a64 <USER_UART_IDLECallback+0x16c>)
 8008970:	f013 fd10 	bl	801c394 <memset>

    	// Restart to start IT transmission of UART_RX_DMA_BUFFER_SIZE bytes of data at a time
    	HAL_UART_Receive_IT(&debugUart, (uint8_t*)uartReceiveBuff, UART_RX_DMA_BUFFER_SIZE);
 8008974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008978:	4938      	ldr	r1, [pc, #224]	; (8008a5c <USER_UART_IDLECallback+0x164>)
 800897a:	4837      	ldr	r0, [pc, #220]	; (8008a58 <USER_UART_IDLECallback+0x160>)
 800897c:	f009 fd10 	bl	80123a0 <HAL_UART_Receive_IT>
    	return;
 8008980:	e063      	b.n	8008a4a <USER_UART_IDLECallback+0x152>
    }

    // If end of command character is in rx buffer, command is complete and ready for processing
    if( endOfCommandPos != NULL )
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d045      	beq.n	8008a14 <USER_UART_IDLECallback+0x11c>
    {
    	// Command terminator found
    	// Copy rx buff to command buffer without end of command terminator
    	if( unprocessedCommandInputLength > 0 )
 8008988:	4b35      	ldr	r3, [pc, #212]	; (8008a60 <USER_UART_IDLECallback+0x168>)
 800898a:	881b      	ldrh	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d010      	beq.n	80089b2 <USER_UART_IDLECallback+0xba>
    	{
    		// Concatenate rx buffer with unprocessed command input
    		strncat( commandBufTemp, (char *)uartReceiveBuff, rxMessageLength );
 8008990:	89fb      	ldrh	r3, [r7, #14]
 8008992:	461a      	mov	r2, r3
 8008994:	4931      	ldr	r1, [pc, #196]	; (8008a5c <USER_UART_IDLECallback+0x164>)
 8008996:	4833      	ldr	r0, [pc, #204]	; (8008a64 <USER_UART_IDLECallback+0x16c>)
 8008998:	f014 fa91 	bl	801cebe <strncat>

    		// Copy completed message in temp command buffer to command buffer for processing in background
        	strncpy( commandBuf, commandBufTemp, strlen(commandBufTemp) - 1);
 800899c:	4831      	ldr	r0, [pc, #196]	; (8008a64 <USER_UART_IDLECallback+0x16c>)
 800899e:	f7f7 fc49 	bl	8000234 <strlen>
 80089a2:	4603      	mov	r3, r0
 80089a4:	3b01      	subs	r3, #1
 80089a6:	461a      	mov	r2, r3
 80089a8:	492e      	ldr	r1, [pc, #184]	; (8008a64 <USER_UART_IDLECallback+0x16c>)
 80089aa:	482f      	ldr	r0, [pc, #188]	; (8008a68 <USER_UART_IDLECallback+0x170>)
 80089ac:	f014 fa9a 	bl	801cee4 <strncpy>
 80089b0:	e006      	b.n	80089c0 <USER_UART_IDLECallback+0xc8>
    	}
    	else // No unprocessed command input, copy rx input directly to command buffer for processing in background
    	{
    		strncpy( commandBuf, (char *)uartReceiveBuff, rxMessageLength - 1);
 80089b2:	89fb      	ldrh	r3, [r7, #14]
 80089b4:	3b01      	subs	r3, #1
 80089b6:	461a      	mov	r2, r3
 80089b8:	4928      	ldr	r1, [pc, #160]	; (8008a5c <USER_UART_IDLECallback+0x164>)
 80089ba:	482b      	ldr	r0, [pc, #172]	; (8008a68 <USER_UART_IDLECallback+0x170>)
 80089bc:	f014 fa92 	bl	801cee4 <strncpy>
    	}

    	// Save any remaining rx input beyond the current command to temp buffer for processing when next rx input is received
    	if( rxMessageLength < uartRxXferCount )
 80089c0:	4b24      	ldr	r3, [pc, #144]	; (8008a54 <USER_UART_IDLECallback+0x15c>)
 80089c2:	881b      	ldrh	r3, [r3, #0]
 80089c4:	89fa      	ldrh	r2, [r7, #14]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d213      	bcs.n	80089f2 <USER_UART_IDLECallback+0xfa>
    	{
    		strncpy( commandBufTemp, (char *)(uartReceiveBuff + rxMessageLength), (uartRxXferCount - rxMessageLength) );
 80089ca:	89fb      	ldrh	r3, [r7, #14]
 80089cc:	4a23      	ldr	r2, [pc, #140]	; (8008a5c <USER_UART_IDLECallback+0x164>)
 80089ce:	1899      	adds	r1, r3, r2
 80089d0:	4b20      	ldr	r3, [pc, #128]	; (8008a54 <USER_UART_IDLECallback+0x15c>)
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	461a      	mov	r2, r3
 80089d6:	89fb      	ldrh	r3, [r7, #14]
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	461a      	mov	r2, r3
 80089dc:	4821      	ldr	r0, [pc, #132]	; (8008a64 <USER_UART_IDLECallback+0x16c>)
 80089de:	f014 fa81 	bl	801cee4 <strncpy>

    		// Keep track of received unprocessed command size
    		unprocessedCommandInputLength = uartRxXferCount - rxMessageLength;
 80089e2:	4b1c      	ldr	r3, [pc, #112]	; (8008a54 <USER_UART_IDLECallback+0x15c>)
 80089e4:	881a      	ldrh	r2, [r3, #0]
 80089e6:	89fb      	ldrh	r3, [r7, #14]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	4b1c      	ldr	r3, [pc, #112]	; (8008a60 <USER_UART_IDLECallback+0x168>)
 80089ee:	801a      	strh	r2, [r3, #0]
 80089f0:	e00c      	b.n	8008a0c <USER_UART_IDLECallback+0x114>
    	}
    	else // No remaining rx input, clear temp buffer
    	{
    		memset(commandBufTemp, '\0', (unprocessedCommandInputLength + rxMessageLength));
 80089f2:	4b1b      	ldr	r3, [pc, #108]	; (8008a60 <USER_UART_IDLECallback+0x168>)
 80089f4:	881b      	ldrh	r3, [r3, #0]
 80089f6:	461a      	mov	r2, r3
 80089f8:	89fb      	ldrh	r3, [r7, #14]
 80089fa:	4413      	add	r3, r2
 80089fc:	461a      	mov	r2, r3
 80089fe:	2100      	movs	r1, #0
 8008a00:	4818      	ldr	r0, [pc, #96]	; (8008a64 <USER_UART_IDLECallback+0x16c>)
 8008a02:	f013 fcc7 	bl	801c394 <memset>

    		// Set unprocessed command length to 0
    		unprocessedCommandInputLength = 0;
 8008a06:	4b16      	ldr	r3, [pc, #88]	; (8008a60 <USER_UART_IDLECallback+0x168>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	801a      	strh	r2, [r3, #0]
    	}

    	// Set flag for command processing by background task since full command has been received
    	commandReady = true;
 8008a0c:	4b10      	ldr	r3, [pc, #64]	; (8008a50 <USER_UART_IDLECallback+0x158>)
 8008a0e:	2201      	movs	r2, #1
 8008a10:	701a      	strb	r2, [r3, #0]
 8008a12:	e00c      	b.n	8008a2e <USER_UART_IDLECallback+0x136>
    }
    else
    {
    	// Command terminator not found
    	// Copy rx buff to temp command buffer for later processing since no terminator was found in rx buff
    	strncat( commandBufTemp, (char *)uartReceiveBuff, rxMessageLength);
 8008a14:	89fb      	ldrh	r3, [r7, #14]
 8008a16:	461a      	mov	r2, r3
 8008a18:	4910      	ldr	r1, [pc, #64]	; (8008a5c <USER_UART_IDLECallback+0x164>)
 8008a1a:	4812      	ldr	r0, [pc, #72]	; (8008a64 <USER_UART_IDLECallback+0x16c>)
 8008a1c:	f014 fa4f 	bl	801cebe <strncat>

    	// Keep track of received unprocessed command size
    	unprocessedCommandInputLength += rxMessageLength;
 8008a20:	4b0f      	ldr	r3, [pc, #60]	; (8008a60 <USER_UART_IDLECallback+0x168>)
 8008a22:	881a      	ldrh	r2, [r3, #0]
 8008a24:	89fb      	ldrh	r3, [r7, #14]
 8008a26:	4413      	add	r3, r2
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	4b0d      	ldr	r3, [pc, #52]	; (8008a60 <USER_UART_IDLECallback+0x168>)
 8008a2c:	801a      	strh	r2, [r3, #0]
    }

    // Zero UART Receive Buffer
    memset(uartReceiveBuff, 0, rxMessageLength);
 8008a2e:	89fb      	ldrh	r3, [r7, #14]
 8008a30:	461a      	mov	r2, r3
 8008a32:	2100      	movs	r1, #0
 8008a34:	4809      	ldr	r0, [pc, #36]	; (8008a5c <USER_UART_IDLECallback+0x164>)
 8008a36:	f013 fcad 	bl	801c394 <memset>

    // Restart IT reception of UART_RX_DMA_BUFFER_SIZE bytes of data at a time
    HAL_UART_Receive_IT(&debugUart, (uint8_t*)uartReceiveBuff, UART_RX_DMA_BUFFER_SIZE);
 8008a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a3e:	4907      	ldr	r1, [pc, #28]	; (8008a5c <USER_UART_IDLECallback+0x164>)
 8008a40:	4805      	ldr	r0, [pc, #20]	; (8008a58 <USER_UART_IDLECallback+0x160>)
 8008a42:	f009 fcad 	bl	80123a0 <HAL_UART_Receive_IT>
 8008a46:	e000      	b.n	8008a4a <USER_UART_IDLECallback+0x152>
		return;
 8008a48:	bf00      	nop
}
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	20001b4c 	.word	0x20001b4c
 8008a54:	200073ba 	.word	0x200073ba
 8008a58:	20004980 	.word	0x20004980
 8008a5c:	200043ec 	.word	0x200043ec
 8008a60:	20001b74 	.word	0x20001b74
 8008a64:	200071bc 	.word	0x200071bc
 8008a68:	200045ec 	.word	0x200045ec

08008a6c <USER_UART8_IDLECallback>:
char guiCommandBufTemp[MAX_COMMAND_LENGTH];
uint16_t guiUnprocessedCommandInputLength = 0;
uint16_t guiUartRxXferCount;

void USER_UART8_IDLECallback(UART_HandleTypeDef *huart)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
	if( guiCommandReady != false )
 8008a74:	4b53      	ldr	r3, [pc, #332]	; (8008bc4 <USER_UART8_IDLECallback+0x158>)
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f040 809f 	bne.w	8008bbc <USER_UART8_IDLECallback+0x150>
		// Do not start assembling next command until previous command has been processed
		return;
	}

	// Get number of bytes received
	guiUartRxXferCount = UART_RX_DMA_BUFFER_SIZE - huart->RxXferCount;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	4b4e      	ldr	r3, [pc, #312]	; (8008bc8 <USER_UART8_IDLECallback+0x15c>)
 8008a8e:	801a      	strh	r2, [r3, #0]

	// Stop this UART reception
	HAL_UART_AbortReceive_IT(&guiUart);
 8008a90:	484e      	ldr	r0, [pc, #312]	; (8008bcc <USER_UART8_IDLECallback+0x160>)
 8008a92:	f009 fcc3 	bl	801241c <HAL_UART_AbortReceive_IT>

    // Calculate the length of the received data
    char * endOfCommandPos = strchr((char *)guiUartReceiveBuff, endOfCommandChar);
 8008a96:	230d      	movs	r3, #13
 8008a98:	4619      	mov	r1, r3
 8008a9a:	484d      	ldr	r0, [pc, #308]	; (8008bd0 <USER_UART8_IDLECallback+0x164>)
 8008a9c:	f014 f9fa 	bl	801ce94 <strchr>
 8008aa0:	60b8      	str	r0, [r7, #8]
    uint16_t rxMessageLength = guiUartRxXferCount;
 8008aa2:	4b49      	ldr	r3, [pc, #292]	; (8008bc8 <USER_UART8_IDLECallback+0x15c>)
 8008aa4:	881b      	ldrh	r3, [r3, #0]
 8008aa6:	81fb      	strh	r3, [r7, #14]
    if( endOfCommandPos != NULL )
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d005      	beq.n	8008aba <USER_UART8_IDLECallback+0x4e>
    {
    	rxMessageLength = (uint8_t *)endOfCommandPos - guiUartReceiveBuff + 1;
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	4a47      	ldr	r2, [pc, #284]	; (8008bd0 <USER_UART8_IDLECallback+0x164>)
 8008ab2:	1a9b      	subs	r3, r3, r2
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	81fb      	strh	r3, [r7, #14]
    }

    // Check that total command is not too long
    if (MAX_COMMAND_LENGTH <  (guiUnprocessedCommandInputLength + rxMessageLength) )
 8008aba:	4b46      	ldr	r3, [pc, #280]	; (8008bd4 <USER_UART8_IDLECallback+0x168>)
 8008abc:	881b      	ldrh	r3, [r3, #0]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	89fb      	ldrh	r3, [r7, #14]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8008ac8:	dd15      	ble.n	8008af6 <USER_UART8_IDLECallback+0x8a>
    {
    	// Command length exceeds maximum length -- discard current command and return
    	guiUnprocessedCommandInputLength = 0;
 8008aca:	4b42      	ldr	r3, [pc, #264]	; (8008bd4 <USER_UART8_IDLECallback+0x168>)
 8008acc:	2200      	movs	r2, #0
 8008ace:	801a      	strh	r2, [r3, #0]

    	// Clear Receive and temp command Buffers
    	memset(guiUartReceiveBuff, 0, MAX_COMMAND_LENGTH);
 8008ad0:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	483e      	ldr	r0, [pc, #248]	; (8008bd0 <USER_UART8_IDLECallback+0x164>)
 8008ad8:	f013 fc5c 	bl	801c394 <memset>
    	memset(guiCommandBufTemp, '\0', MAX_COMMAND_LENGTH);
 8008adc:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	483d      	ldr	r0, [pc, #244]	; (8008bd8 <USER_UART8_IDLECallback+0x16c>)
 8008ae4:	f013 fc56 	bl	801c394 <memset>

    	// Restart to start IT transmission of UART_RX_DMA_BUFFER_SIZE bytes of data at a time
    	HAL_UART_Receive_IT(&guiUart, (uint8_t*)guiUartReceiveBuff, UART_RX_DMA_BUFFER_SIZE);
 8008ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008aec:	4938      	ldr	r1, [pc, #224]	; (8008bd0 <USER_UART8_IDLECallback+0x164>)
 8008aee:	4837      	ldr	r0, [pc, #220]	; (8008bcc <USER_UART8_IDLECallback+0x160>)
 8008af0:	f009 fc56 	bl	80123a0 <HAL_UART_Receive_IT>
    	return;
 8008af4:	e063      	b.n	8008bbe <USER_UART8_IDLECallback+0x152>
    }

    // If end of command character is in rx buffer, command is complete and ready for processing
    if( endOfCommandPos != NULL )
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d045      	beq.n	8008b88 <USER_UART8_IDLECallback+0x11c>
    {
    	// Command terminator found
    	// Copy rx buff to command buffer without end of command terminator
    	if( guiUnprocessedCommandInputLength > 0 )
 8008afc:	4b35      	ldr	r3, [pc, #212]	; (8008bd4 <USER_UART8_IDLECallback+0x168>)
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d010      	beq.n	8008b26 <USER_UART8_IDLECallback+0xba>
    	{
    		// Concatenate rx buffer with unprocessed command input
    		strncat( guiCommandBufTemp, (char *)guiUartReceiveBuff, rxMessageLength );
 8008b04:	89fb      	ldrh	r3, [r7, #14]
 8008b06:	461a      	mov	r2, r3
 8008b08:	4931      	ldr	r1, [pc, #196]	; (8008bd0 <USER_UART8_IDLECallback+0x164>)
 8008b0a:	4833      	ldr	r0, [pc, #204]	; (8008bd8 <USER_UART8_IDLECallback+0x16c>)
 8008b0c:	f014 f9d7 	bl	801cebe <strncat>

    		// Copy completed message in temp command buffer to command buffer for processing in background
        	strncpy( guiCommandBuf, guiCommandBufTemp, strlen(guiCommandBufTemp) - 1);
 8008b10:	4831      	ldr	r0, [pc, #196]	; (8008bd8 <USER_UART8_IDLECallback+0x16c>)
 8008b12:	f7f7 fb8f 	bl	8000234 <strlen>
 8008b16:	4603      	mov	r3, r0
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	492e      	ldr	r1, [pc, #184]	; (8008bd8 <USER_UART8_IDLECallback+0x16c>)
 8008b1e:	482f      	ldr	r0, [pc, #188]	; (8008bdc <USER_UART8_IDLECallback+0x170>)
 8008b20:	f014 f9e0 	bl	801cee4 <strncpy>
 8008b24:	e006      	b.n	8008b34 <USER_UART8_IDLECallback+0xc8>
    	}
    	else // No unprocessed command input, copy rx input directly to command buffer for processing in background
    	{
    		strncpy( guiCommandBuf, (char *)guiUartReceiveBuff, rxMessageLength - 1);
 8008b26:	89fb      	ldrh	r3, [r7, #14]
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	4928      	ldr	r1, [pc, #160]	; (8008bd0 <USER_UART8_IDLECallback+0x164>)
 8008b2e:	482b      	ldr	r0, [pc, #172]	; (8008bdc <USER_UART8_IDLECallback+0x170>)
 8008b30:	f014 f9d8 	bl	801cee4 <strncpy>
    	}

    	// Save any remaining rx input beyond the current command to temp buffer for processing when next rx input is received
    	if( rxMessageLength < guiUartRxXferCount )
 8008b34:	4b24      	ldr	r3, [pc, #144]	; (8008bc8 <USER_UART8_IDLECallback+0x15c>)
 8008b36:	881b      	ldrh	r3, [r3, #0]
 8008b38:	89fa      	ldrh	r2, [r7, #14]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d213      	bcs.n	8008b66 <USER_UART8_IDLECallback+0xfa>
    	{
    		strncpy( guiCommandBufTemp, (char *)(guiUartReceiveBuff + rxMessageLength), (guiUartRxXferCount - rxMessageLength) );
 8008b3e:	89fb      	ldrh	r3, [r7, #14]
 8008b40:	4a23      	ldr	r2, [pc, #140]	; (8008bd0 <USER_UART8_IDLECallback+0x164>)
 8008b42:	1899      	adds	r1, r3, r2
 8008b44:	4b20      	ldr	r3, [pc, #128]	; (8008bc8 <USER_UART8_IDLECallback+0x15c>)
 8008b46:	881b      	ldrh	r3, [r3, #0]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	89fb      	ldrh	r3, [r7, #14]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	461a      	mov	r2, r3
 8008b50:	4821      	ldr	r0, [pc, #132]	; (8008bd8 <USER_UART8_IDLECallback+0x16c>)
 8008b52:	f014 f9c7 	bl	801cee4 <strncpy>

    		// Keep track of received unprocessed command size
    		guiUnprocessedCommandInputLength = guiUartRxXferCount - rxMessageLength;
 8008b56:	4b1c      	ldr	r3, [pc, #112]	; (8008bc8 <USER_UART8_IDLECallback+0x15c>)
 8008b58:	881a      	ldrh	r2, [r3, #0]
 8008b5a:	89fb      	ldrh	r3, [r7, #14]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	4b1c      	ldr	r3, [pc, #112]	; (8008bd4 <USER_UART8_IDLECallback+0x168>)
 8008b62:	801a      	strh	r2, [r3, #0]
 8008b64:	e00c      	b.n	8008b80 <USER_UART8_IDLECallback+0x114>
    	}
    	else // No remaining rx input, clear temp buffer
    	{
    		memset(guiCommandBufTemp, '\0', (guiUnprocessedCommandInputLength + rxMessageLength));
 8008b66:	4b1b      	ldr	r3, [pc, #108]	; (8008bd4 <USER_UART8_IDLECallback+0x168>)
 8008b68:	881b      	ldrh	r3, [r3, #0]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	89fb      	ldrh	r3, [r7, #14]
 8008b6e:	4413      	add	r3, r2
 8008b70:	461a      	mov	r2, r3
 8008b72:	2100      	movs	r1, #0
 8008b74:	4818      	ldr	r0, [pc, #96]	; (8008bd8 <USER_UART8_IDLECallback+0x16c>)
 8008b76:	f013 fc0d 	bl	801c394 <memset>

    		// Set unprocessed command length to 0
    		guiUnprocessedCommandInputLength = 0;
 8008b7a:	4b16      	ldr	r3, [pc, #88]	; (8008bd4 <USER_UART8_IDLECallback+0x168>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	801a      	strh	r2, [r3, #0]
    	}

    	// Set flag for command processing by background task since full command has been received
    	guiCommandReady = true;
 8008b80:	4b10      	ldr	r3, [pc, #64]	; (8008bc4 <USER_UART8_IDLECallback+0x158>)
 8008b82:	2201      	movs	r2, #1
 8008b84:	701a      	strb	r2, [r3, #0]
 8008b86:	e00c      	b.n	8008ba2 <USER_UART8_IDLECallback+0x136>
    }
    else
    {
    	// Command terminator not found
    	// Copy rx buff to temp command buffer for later processing since no terminator was found in rx buff
    	strncat( guiCommandBufTemp, (char *)guiUartReceiveBuff, rxMessageLength);
 8008b88:	89fb      	ldrh	r3, [r7, #14]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	4910      	ldr	r1, [pc, #64]	; (8008bd0 <USER_UART8_IDLECallback+0x164>)
 8008b8e:	4812      	ldr	r0, [pc, #72]	; (8008bd8 <USER_UART8_IDLECallback+0x16c>)
 8008b90:	f014 f995 	bl	801cebe <strncat>

    	// Keep track of received unprocessed command size
    	guiUnprocessedCommandInputLength += rxMessageLength;
 8008b94:	4b0f      	ldr	r3, [pc, #60]	; (8008bd4 <USER_UART8_IDLECallback+0x168>)
 8008b96:	881a      	ldrh	r2, [r3, #0]
 8008b98:	89fb      	ldrh	r3, [r7, #14]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	4b0d      	ldr	r3, [pc, #52]	; (8008bd4 <USER_UART8_IDLECallback+0x168>)
 8008ba0:	801a      	strh	r2, [r3, #0]
    }

    // Zero UART Receive Buffer
    memset(guiUartReceiveBuff, 0, rxMessageLength);
 8008ba2:	89fb      	ldrh	r3, [r7, #14]
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	4809      	ldr	r0, [pc, #36]	; (8008bd0 <USER_UART8_IDLECallback+0x164>)
 8008baa:	f013 fbf3 	bl	801c394 <memset>

    // Restart IT reception of UART_RX_DMA_BUFFER_SIZE bytes of data at a time
    HAL_UART_Receive_IT(&guiUart, (uint8_t*)guiUartReceiveBuff, UART_RX_DMA_BUFFER_SIZE);
 8008bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bb2:	4907      	ldr	r1, [pc, #28]	; (8008bd0 <USER_UART8_IDLECallback+0x164>)
 8008bb4:	4805      	ldr	r0, [pc, #20]	; (8008bcc <USER_UART8_IDLECallback+0x160>)
 8008bb6:	f009 fbf3 	bl	80123a0 <HAL_UART_Receive_IT>
 8008bba:	e000      	b.n	8008bbe <USER_UART8_IDLECallback+0x152>
		return;
 8008bbc:	bf00      	nop
}
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	20001b4d 	.word	0x20001b4d
 8008bc8:	200073bc 	.word	0x200073bc
 8008bcc:	20006df0 	.word	0x20006df0
 8008bd0:	20006f24 	.word	0x20006f24
 8008bd4:	20001b76 	.word	0x20001b76
 8008bd8:	200073c0 	.word	0x200073c0
 8008bdc:	20004a94 	.word	0x20004a94

08008be0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008be0:	b480      	push	{r7}
 8008be2:	af00      	add	r7, sp, #0
	return 1;
 8008be4:	2301      	movs	r3, #1
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <_kill>:

int _kill(int pid, int sig)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008bfa:	f013 fb83 	bl	801c304 <__errno>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2216      	movs	r2, #22
 8008c02:	601a      	str	r2, [r3, #0]
	return -1;
 8008c04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <_exit>:

void _exit (int status)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008c18:	f04f 31ff 	mov.w	r1, #4294967295
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7ff ffe7 	bl	8008bf0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008c22:	e7fe      	b.n	8008c22 <_exit+0x12>

08008c24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b086      	sub	sp, #24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c30:	2300      	movs	r3, #0
 8008c32:	617b      	str	r3, [r7, #20]
 8008c34:	e00a      	b.n	8008c4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008c36:	f3af 8000 	nop.w
 8008c3a:	4601      	mov	r1, r0
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	1c5a      	adds	r2, r3, #1
 8008c40:	60ba      	str	r2, [r7, #8]
 8008c42:	b2ca      	uxtb	r2, r1
 8008c44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	617b      	str	r3, [r7, #20]
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	dbf0      	blt.n	8008c36 <_read+0x12>
	}

return len;
 8008c54:	687b      	ldr	r3, [r7, #4]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3718      	adds	r7, #24
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b086      	sub	sp, #24
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	60b9      	str	r1, [r7, #8]
 8008c68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	617b      	str	r3, [r7, #20]
 8008c6e:	e009      	b.n	8008c84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	1c5a      	adds	r2, r3, #1
 8008c74:	60ba      	str	r2, [r7, #8]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	3301      	adds	r3, #1
 8008c82:	617b      	str	r3, [r7, #20]
 8008c84:	697a      	ldr	r2, [r7, #20]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	dbf1      	blt.n	8008c70 <_write+0x12>
	}
	return len;
 8008c8c:	687b      	ldr	r3, [r7, #4]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3718      	adds	r7, #24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <_close>:

int _close(int file)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b083      	sub	sp, #12
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
	return -1;
 8008c9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b083      	sub	sp, #12
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008cbe:	605a      	str	r2, [r3, #4]
	return 0;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <_isatty>:

int _isatty(int file)
{
 8008cce:	b480      	push	{r7}
 8008cd0:	b083      	sub	sp, #12
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
	return 1;
 8008cd6:	2301      	movs	r3, #1
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
	return 0;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3714      	adds	r7, #20
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
	...

08008d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008d08:	4a14      	ldr	r2, [pc, #80]	; (8008d5c <_sbrk+0x5c>)
 8008d0a:	4b15      	ldr	r3, [pc, #84]	; (8008d60 <_sbrk+0x60>)
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008d14:	4b13      	ldr	r3, [pc, #76]	; (8008d64 <_sbrk+0x64>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d102      	bne.n	8008d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008d1c:	4b11      	ldr	r3, [pc, #68]	; (8008d64 <_sbrk+0x64>)
 8008d1e:	4a12      	ldr	r2, [pc, #72]	; (8008d68 <_sbrk+0x68>)
 8008d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008d22:	4b10      	ldr	r3, [pc, #64]	; (8008d64 <_sbrk+0x64>)
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4413      	add	r3, r2
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d207      	bcs.n	8008d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008d30:	f013 fae8 	bl	801c304 <__errno>
 8008d34:	4603      	mov	r3, r0
 8008d36:	220c      	movs	r2, #12
 8008d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d3e:	e009      	b.n	8008d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008d40:	4b08      	ldr	r3, [pc, #32]	; (8008d64 <_sbrk+0x64>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008d46:	4b07      	ldr	r3, [pc, #28]	; (8008d64 <_sbrk+0x64>)
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	4a05      	ldr	r2, [pc, #20]	; (8008d64 <_sbrk+0x64>)
 8008d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008d52:	68fb      	ldr	r3, [r7, #12]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3718      	adds	r7, #24
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	20040000 	.word	0x20040000
 8008d60:	00001000 	.word	0x00001000
 8008d64:	20001b78 	.word	0x20001b78
 8008d68:	20009f18 	.word	0x20009f18

08008d6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008d70:	4b06      	ldr	r3, [pc, #24]	; (8008d8c <SystemInit+0x20>)
 8008d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d76:	4a05      	ldr	r2, [pc, #20]	; (8008d8c <SystemInit+0x20>)
 8008d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008d80:	bf00      	nop
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	e000ed00 	.word	0xe000ed00

08008d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008dc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008d94:	480d      	ldr	r0, [pc, #52]	; (8008dcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008d96:	490e      	ldr	r1, [pc, #56]	; (8008dd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008d98:	4a0e      	ldr	r2, [pc, #56]	; (8008dd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008d9c:	e002      	b.n	8008da4 <LoopCopyDataInit>

08008d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008da2:	3304      	adds	r3, #4

08008da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008da8:	d3f9      	bcc.n	8008d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008daa:	4a0b      	ldr	r2, [pc, #44]	; (8008dd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008dac:	4c0b      	ldr	r4, [pc, #44]	; (8008ddc <LoopFillZerobss+0x26>)
  movs r3, #0
 8008dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008db0:	e001      	b.n	8008db6 <LoopFillZerobss>

08008db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008db4:	3204      	adds	r2, #4

08008db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008db8:	d3fb      	bcc.n	8008db2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008dba:	f7ff ffd7 	bl	8008d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008dbe:	f013 faa7 	bl	801c310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008dc2:	f7fd fbc1 	bl	8006548 <main>
  bx  lr    
 8008dc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008dc8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8008dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008dd0:	2000056c 	.word	0x2000056c
  ldr r2, =_sidata
 8008dd4:	08022d54 	.word	0x08022d54
  ldr r2, =_sbss
 8008dd8:	2000056c 	.word	0x2000056c
  ldr r4, =_ebss
 8008ddc:	20009f18 	.word	0x20009f18

08008de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008de0:	e7fe      	b.n	8008de0 <ADC_IRQHandler>

08008de2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008de6:	2003      	movs	r0, #3
 8008de8:	f000 feec 	bl	8009bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008dec:	2000      	movs	r0, #0
 8008dee:	f000 f805 	bl	8008dfc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8008df2:	f7fe fec7 	bl	8007b84 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008e04:	4b12      	ldr	r3, [pc, #72]	; (8008e50 <HAL_InitTick+0x54>)
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	4b12      	ldr	r3, [pc, #72]	; (8008e54 <HAL_InitTick+0x58>)
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 ff07 	bl	8009c2e <HAL_SYSTICK_Config>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e00e      	b.n	8008e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2b0f      	cmp	r3, #15
 8008e2e:	d80a      	bhi.n	8008e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008e30:	2200      	movs	r2, #0
 8008e32:	6879      	ldr	r1, [r7, #4]
 8008e34:	f04f 30ff 	mov.w	r0, #4294967295
 8008e38:	f000 fecf 	bl	8009bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008e3c:	4a06      	ldr	r2, [pc, #24]	; (8008e58 <HAL_InitTick+0x5c>)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	e000      	b.n	8008e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20000224 	.word	0x20000224
 8008e54:	2000022c 	.word	0x2000022c
 8008e58:	20000228 	.word	0x20000228

08008e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008e60:	4b06      	ldr	r3, [pc, #24]	; (8008e7c <HAL_IncTick+0x20>)
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	461a      	mov	r2, r3
 8008e66:	4b06      	ldr	r3, [pc, #24]	; (8008e80 <HAL_IncTick+0x24>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	4a04      	ldr	r2, [pc, #16]	; (8008e80 <HAL_IncTick+0x24>)
 8008e6e:	6013      	str	r3, [r2, #0]
}
 8008e70:	bf00      	nop
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	2000022c 	.word	0x2000022c
 8008e80:	200075c0 	.word	0x200075c0

08008e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e84:	b480      	push	{r7}
 8008e86:	af00      	add	r7, sp, #0
  return uwTick;
 8008e88:	4b03      	ldr	r3, [pc, #12]	; (8008e98 <HAL_GetTick+0x14>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	200075c0 	.word	0x200075c0

08008e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008ea4:	f7ff ffee 	bl	8008e84 <HAL_GetTick>
 8008ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb4:	d005      	beq.n	8008ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008eb6:	4b0a      	ldr	r3, [pc, #40]	; (8008ee0 <HAL_Delay+0x44>)
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008ec2:	bf00      	nop
 8008ec4:	f7ff ffde 	bl	8008e84 <HAL_GetTick>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d8f7      	bhi.n	8008ec4 <HAL_Delay+0x28>
  {
  }
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	2000022c 	.word	0x2000022c

08008ee4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e031      	b.n	8008f5e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d109      	bne.n	8008f16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7fe fe62 	bl	8007bcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1a:	f003 0310 	and.w	r3, r3, #16
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d116      	bne.n	8008f50 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f26:	4b10      	ldr	r3, [pc, #64]	; (8008f68 <HAL_ADC_Init+0x84>)
 8008f28:	4013      	ands	r3, r2
 8008f2a:	f043 0202 	orr.w	r2, r3, #2
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fbfa 	bl	800972c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f42:	f023 0303 	bic.w	r3, r3, #3
 8008f46:	f043 0201 	orr.w	r2, r3, #1
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	641a      	str	r2, [r3, #64]	; 0x40
 8008f4e:	e001      	b.n	8008f54 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	ffffeefd 	.word	0xffffeefd

08008f6c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8008f74:	2300      	movs	r3, #0
 8008f76:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d101      	bne.n	8008f86 <HAL_ADC_Start+0x1a>
 8008f82:	2302      	movs	r3, #2
 8008f84:	e0ad      	b.n	80090e2 <HAL_ADC_Start+0x176>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	f003 0301 	and.w	r3, r3, #1
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d018      	beq.n	8008fce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	689a      	ldr	r2, [r3, #8]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f042 0201 	orr.w	r2, r2, #1
 8008faa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8008fac:	4b50      	ldr	r3, [pc, #320]	; (80090f0 <HAL_ADC_Start+0x184>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a50      	ldr	r2, [pc, #320]	; (80090f4 <HAL_ADC_Start+0x188>)
 8008fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb6:	0c9a      	lsrs	r2, r3, #18
 8008fb8:	4613      	mov	r3, r2
 8008fba:	005b      	lsls	r3, r3, #1
 8008fbc:	4413      	add	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8008fc0:	e002      	b.n	8008fc8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1f9      	bne.n	8008fc2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f003 0301 	and.w	r3, r3, #1
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d175      	bne.n	80090c8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fe0:	4b45      	ldr	r3, [pc, #276]	; (80090f8 <HAL_ADC_Start+0x18c>)
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d007      	beq.n	800900a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009002:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800900e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009016:	d106      	bne.n	8009026 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800901c:	f023 0206 	bic.w	r2, r3, #6
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	645a      	str	r2, [r3, #68]	; 0x44
 8009024:	e002      	b.n	800902c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800903c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800903e:	4b2f      	ldr	r3, [pc, #188]	; (80090fc <HAL_ADC_Start+0x190>)
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f003 031f 	and.w	r3, r3, #31
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10f      	bne.n	800906a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d143      	bne.n	80090e0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689a      	ldr	r2, [r3, #8]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009066:	609a      	str	r2, [r3, #8]
 8009068:	e03a      	b.n	80090e0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a24      	ldr	r2, [pc, #144]	; (8009100 <HAL_ADC_Start+0x194>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d10e      	bne.n	8009092 <HAL_ADC_Start+0x126>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d107      	bne.n	8009092 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	689a      	ldr	r2, [r3, #8]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009090:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8009092:	4b1a      	ldr	r3, [pc, #104]	; (80090fc <HAL_ADC_Start+0x190>)
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f003 0310 	and.w	r3, r3, #16
 800909a:	2b00      	cmp	r3, #0
 800909c:	d120      	bne.n	80090e0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a18      	ldr	r2, [pc, #96]	; (8009104 <HAL_ADC_Start+0x198>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d11b      	bne.n	80090e0 <HAL_ADC_Start+0x174>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d114      	bne.n	80090e0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	689a      	ldr	r2, [r3, #8]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80090c4:	609a      	str	r2, [r3, #8]
 80090c6:	e00b      	b.n	80090e0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090cc:	f043 0210 	orr.w	r2, r3, #16
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d8:	f043 0201 	orr.w	r2, r3, #1
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	20000224 	.word	0x20000224
 80090f4:	431bde83 	.word	0x431bde83
 80090f8:	fffff8fe 	.word	0xfffff8fe
 80090fc:	40012300 	.word	0x40012300
 8009100:	40012000 	.word	0x40012000
 8009104:	40012200 	.word	0x40012200

08009108 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8009114:	2300      	movs	r3, #0
 8009116:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800911e:	2b01      	cmp	r3, #1
 8009120:	d101      	bne.n	8009126 <HAL_ADC_Start_DMA+0x1e>
 8009122:	2302      	movs	r3, #2
 8009124:	e0d4      	b.n	80092d0 <HAL_ADC_Start_DMA+0x1c8>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f003 0301 	and.w	r3, r3, #1
 8009138:	2b01      	cmp	r3, #1
 800913a:	d018      	beq.n	800916e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	689a      	ldr	r2, [r3, #8]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f042 0201 	orr.w	r2, r2, #1
 800914a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800914c:	4b62      	ldr	r3, [pc, #392]	; (80092d8 <HAL_ADC_Start_DMA+0x1d0>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a62      	ldr	r2, [pc, #392]	; (80092dc <HAL_ADC_Start_DMA+0x1d4>)
 8009152:	fba2 2303 	umull	r2, r3, r2, r3
 8009156:	0c9a      	lsrs	r2, r3, #18
 8009158:	4613      	mov	r3, r2
 800915a:	005b      	lsls	r3, r3, #1
 800915c:	4413      	add	r3, r2
 800915e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8009160:	e002      	b.n	8009168 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	3b01      	subs	r3, #1
 8009166:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1f9      	bne.n	8009162 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	2b01      	cmp	r3, #1
 800917a:	f040 809c 	bne.w	80092b6 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009182:	4b57      	ldr	r3, [pc, #348]	; (80092e0 <HAL_ADC_Start_DMA+0x1d8>)
 8009184:	4013      	ands	r3, r2
 8009186:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009198:	2b00      	cmp	r3, #0
 800919a:	d007      	beq.n	80091ac <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80091a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091b8:	d106      	bne.n	80091c8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091be:	f023 0206 	bic.w	r2, r3, #6
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	645a      	str	r2, [r3, #68]	; 0x44
 80091c6:	e002      	b.n	80091ce <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091da:	4a42      	ldr	r2, [pc, #264]	; (80092e4 <HAL_ADC_Start_DMA+0x1dc>)
 80091dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e2:	4a41      	ldr	r2, [pc, #260]	; (80092e8 <HAL_ADC_Start_DMA+0x1e0>)
 80091e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ea:	4a40      	ldr	r2, [pc, #256]	; (80092ec <HAL_ADC_Start_DMA+0x1e4>)
 80091ec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80091f6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	685a      	ldr	r2, [r3, #4]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009206:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	689a      	ldr	r2, [r3, #8]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009216:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	334c      	adds	r3, #76	; 0x4c
 8009222:	4619      	mov	r1, r3
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f000 fea4 	bl	8009f74 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800922c:	4b30      	ldr	r3, [pc, #192]	; (80092f0 <HAL_ADC_Start_DMA+0x1e8>)
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	f003 031f 	and.w	r3, r3, #31
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10f      	bne.n	8009258 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009242:	2b00      	cmp	r3, #0
 8009244:	d143      	bne.n	80092ce <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	689a      	ldr	r2, [r3, #8]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009254:	609a      	str	r2, [r3, #8]
 8009256:	e03a      	b.n	80092ce <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a25      	ldr	r2, [pc, #148]	; (80092f4 <HAL_ADC_Start_DMA+0x1ec>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d10e      	bne.n	8009280 <HAL_ADC_Start_DMA+0x178>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800926c:	2b00      	cmp	r3, #0
 800926e:	d107      	bne.n	8009280 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	689a      	ldr	r2, [r3, #8]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800927e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8009280:	4b1b      	ldr	r3, [pc, #108]	; (80092f0 <HAL_ADC_Start_DMA+0x1e8>)
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	f003 0310 	and.w	r3, r3, #16
 8009288:	2b00      	cmp	r3, #0
 800928a:	d120      	bne.n	80092ce <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a19      	ldr	r2, [pc, #100]	; (80092f8 <HAL_ADC_Start_DMA+0x1f0>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d11b      	bne.n	80092ce <HAL_ADC_Start_DMA+0x1c6>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d114      	bne.n	80092ce <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	689a      	ldr	r2, [r3, #8]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80092b2:	609a      	str	r2, [r3, #8]
 80092b4:	e00b      	b.n	80092ce <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ba:	f043 0210 	orr.w	r2, r3, #16
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c6:	f043 0201 	orr.w	r2, r3, #1
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3718      	adds	r7, #24
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	20000224 	.word	0x20000224
 80092dc:	431bde83 	.word	0x431bde83
 80092e0:	fffff8fe 	.word	0xfffff8fe
 80092e4:	08009921 	.word	0x08009921
 80092e8:	080099db 	.word	0x080099db
 80092ec:	080099f7 	.word	0x080099f7
 80092f0:	40012300 	.word	0x40012300
 80092f4:	40012000 	.word	0x40012000
 80092f8:	40012200 	.word	0x40012200

080092fc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800930e:	2b01      	cmp	r3, #1
 8009310:	d101      	bne.n	8009316 <HAL_ADC_Stop_DMA+0x1a>
 8009312:	2302      	movs	r3, #2
 8009314:	e046      	b.n	80093a4 <HAL_ADC_Stop_DMA+0xa8>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	689a      	ldr	r2, [r3, #8]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f022 0201 	bic.w	r2, r2, #1
 800932c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b00      	cmp	r3, #0
 800933a:	d12e      	bne.n	800939a <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	689a      	ldr	r2, [r3, #8]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800934a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009350:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009354:	b2db      	uxtb	r3, r3
 8009356:	2b02      	cmp	r3, #2
 8009358:	d10f      	bne.n	800937a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935e:	4618      	mov	r0, r3
 8009360:	f000 fe68 	bl	800a034 <HAL_DMA_Abort>
 8009364:	4603      	mov	r3, r0
 8009366:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8009368:	7bfb      	ldrb	r3, [r7, #15]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d005      	beq.n	800937a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009372:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8009388:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800938e:	4b07      	ldr	r3, [pc, #28]	; (80093ac <HAL_ADC_Stop_DMA+0xb0>)
 8009390:	4013      	ands	r3, r2
 8009392:	f043 0201 	orr.w	r2, r3, #1
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80093a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	ffffeefe 	.word	0xffffeefe

080093b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d101      	bne.n	80093f4 <HAL_ADC_ConfigChannel+0x1c>
 80093f0:	2302      	movs	r3, #2
 80093f2:	e12a      	b.n	800964a <HAL_ADC_ConfigChannel+0x272>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2b09      	cmp	r3, #9
 8009402:	d93a      	bls.n	800947a <HAL_ADC_ConfigChannel+0xa2>
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800940c:	d035      	beq.n	800947a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68d9      	ldr	r1, [r3, #12]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	b29b      	uxth	r3, r3
 800941a:	461a      	mov	r2, r3
 800941c:	4613      	mov	r3, r2
 800941e:	005b      	lsls	r3, r3, #1
 8009420:	4413      	add	r3, r2
 8009422:	3b1e      	subs	r3, #30
 8009424:	2207      	movs	r2, #7
 8009426:	fa02 f303 	lsl.w	r3, r2, r3
 800942a:	43da      	mvns	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	400a      	ands	r2, r1
 8009432:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a87      	ldr	r2, [pc, #540]	; (8009658 <HAL_ADC_ConfigChannel+0x280>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d10a      	bne.n	8009454 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68d9      	ldr	r1, [r3, #12]
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	061a      	lsls	r2, r3, #24
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	430a      	orrs	r2, r1
 8009450:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009452:	e035      	b.n	80094c0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	68d9      	ldr	r1, [r3, #12]
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	b29b      	uxth	r3, r3
 8009464:	4618      	mov	r0, r3
 8009466:	4603      	mov	r3, r0
 8009468:	005b      	lsls	r3, r3, #1
 800946a:	4403      	add	r3, r0
 800946c:	3b1e      	subs	r3, #30
 800946e:	409a      	lsls	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	430a      	orrs	r2, r1
 8009476:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009478:	e022      	b.n	80094c0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	6919      	ldr	r1, [r3, #16]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	b29b      	uxth	r3, r3
 8009486:	461a      	mov	r2, r3
 8009488:	4613      	mov	r3, r2
 800948a:	005b      	lsls	r3, r3, #1
 800948c:	4413      	add	r3, r2
 800948e:	2207      	movs	r2, #7
 8009490:	fa02 f303 	lsl.w	r3, r2, r3
 8009494:	43da      	mvns	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	400a      	ands	r2, r1
 800949c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6919      	ldr	r1, [r3, #16]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	689a      	ldr	r2, [r3, #8]
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	4618      	mov	r0, r3
 80094b0:	4603      	mov	r3, r0
 80094b2:	005b      	lsls	r3, r3, #1
 80094b4:	4403      	add	r3, r0
 80094b6:	409a      	lsls	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	430a      	orrs	r2, r1
 80094be:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	2b06      	cmp	r3, #6
 80094c6:	d824      	bhi.n	8009512 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	685a      	ldr	r2, [r3, #4]
 80094d2:	4613      	mov	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	3b05      	subs	r3, #5
 80094da:	221f      	movs	r2, #31
 80094dc:	fa02 f303 	lsl.w	r3, r2, r3
 80094e0:	43da      	mvns	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	400a      	ands	r2, r1
 80094e8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	4618      	mov	r0, r3
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	685a      	ldr	r2, [r3, #4]
 80094fc:	4613      	mov	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4413      	add	r3, r2
 8009502:	3b05      	subs	r3, #5
 8009504:	fa00 f203 	lsl.w	r2, r0, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	430a      	orrs	r2, r1
 800950e:	635a      	str	r2, [r3, #52]	; 0x34
 8009510:	e04c      	b.n	80095ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	2b0c      	cmp	r3, #12
 8009518:	d824      	bhi.n	8009564 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	685a      	ldr	r2, [r3, #4]
 8009524:	4613      	mov	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4413      	add	r3, r2
 800952a:	3b23      	subs	r3, #35	; 0x23
 800952c:	221f      	movs	r2, #31
 800952e:	fa02 f303 	lsl.w	r3, r2, r3
 8009532:	43da      	mvns	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	400a      	ands	r2, r1
 800953a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	b29b      	uxth	r3, r3
 8009548:	4618      	mov	r0, r3
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	685a      	ldr	r2, [r3, #4]
 800954e:	4613      	mov	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	3b23      	subs	r3, #35	; 0x23
 8009556:	fa00 f203 	lsl.w	r2, r0, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	430a      	orrs	r2, r1
 8009560:	631a      	str	r2, [r3, #48]	; 0x30
 8009562:	e023      	b.n	80095ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	685a      	ldr	r2, [r3, #4]
 800956e:	4613      	mov	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4413      	add	r3, r2
 8009574:	3b41      	subs	r3, #65	; 0x41
 8009576:	221f      	movs	r2, #31
 8009578:	fa02 f303 	lsl.w	r3, r2, r3
 800957c:	43da      	mvns	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	400a      	ands	r2, r1
 8009584:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	b29b      	uxth	r3, r3
 8009592:	4618      	mov	r0, r3
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	4613      	mov	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	3b41      	subs	r3, #65	; 0x41
 80095a0:	fa00 f203 	lsl.w	r2, r0, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	430a      	orrs	r2, r1
 80095aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a2a      	ldr	r2, [pc, #168]	; (800965c <HAL_ADC_ConfigChannel+0x284>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d10a      	bne.n	80095cc <HAL_ADC_ConfigChannel+0x1f4>
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095be:	d105      	bne.n	80095cc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80095c0:	4b27      	ldr	r3, [pc, #156]	; (8009660 <HAL_ADC_ConfigChannel+0x288>)
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	4a26      	ldr	r2, [pc, #152]	; (8009660 <HAL_ADC_ConfigChannel+0x288>)
 80095c6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80095ca:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a22      	ldr	r2, [pc, #136]	; (800965c <HAL_ADC_ConfigChannel+0x284>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d109      	bne.n	80095ea <HAL_ADC_ConfigChannel+0x212>
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b12      	cmp	r3, #18
 80095dc:	d105      	bne.n	80095ea <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80095de:	4b20      	ldr	r3, [pc, #128]	; (8009660 <HAL_ADC_ConfigChannel+0x288>)
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	4a1f      	ldr	r2, [pc, #124]	; (8009660 <HAL_ADC_ConfigChannel+0x288>)
 80095e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80095e8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a1b      	ldr	r2, [pc, #108]	; (800965c <HAL_ADC_ConfigChannel+0x284>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d125      	bne.n	8009640 <HAL_ADC_ConfigChannel+0x268>
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a17      	ldr	r2, [pc, #92]	; (8009658 <HAL_ADC_ConfigChannel+0x280>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d003      	beq.n	8009606 <HAL_ADC_ConfigChannel+0x22e>
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b11      	cmp	r3, #17
 8009604:	d11c      	bne.n	8009640 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8009606:	4b16      	ldr	r3, [pc, #88]	; (8009660 <HAL_ADC_ConfigChannel+0x288>)
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	4a15      	ldr	r2, [pc, #84]	; (8009660 <HAL_ADC_ConfigChannel+0x288>)
 800960c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009610:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a10      	ldr	r2, [pc, #64]	; (8009658 <HAL_ADC_ConfigChannel+0x280>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d111      	bne.n	8009640 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800961c:	4b11      	ldr	r3, [pc, #68]	; (8009664 <HAL_ADC_ConfigChannel+0x28c>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a11      	ldr	r2, [pc, #68]	; (8009668 <HAL_ADC_ConfigChannel+0x290>)
 8009622:	fba2 2303 	umull	r2, r3, r2, r3
 8009626:	0c9a      	lsrs	r2, r3, #18
 8009628:	4613      	mov	r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4413      	add	r3, r2
 800962e:	005b      	lsls	r3, r3, #1
 8009630:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8009632:	e002      	b.n	800963a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	3b01      	subs	r3, #1
 8009638:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1f9      	bne.n	8009634 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3714      	adds	r7, #20
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	10000012 	.word	0x10000012
 800965c:	40012000 	.word	0x40012000
 8009660:	40012300 	.word	0x40012300
 8009664:	20000224 	.word	0x20000224
 8009668:	431bde83 	.word	0x431bde83

0800966c <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800967c:	2b01      	cmp	r3, #1
 800967e:	d101      	bne.n	8009684 <HAL_ADC_AnalogWDGConfig+0x18>
 8009680:	2302      	movs	r3, #2
 8009682:	e04b      	b.n	800971c <HAL_ADC_AnalogWDGConfig+0xb0>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	7c1b      	ldrb	r3, [r3, #16]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d108      	bne.n	80096a6 <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	685a      	ldr	r2, [r3, #4]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096a2:	605a      	str	r2, [r3, #4]
 80096a4:	e007      	b.n	80096b6 <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096b4:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	6859      	ldr	r1, [r3, #4]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	4b19      	ldr	r3, [pc, #100]	; (8009728 <HAL_ADC_AnalogWDGConfig+0xbc>)
 80096c2:	400b      	ands	r3, r1
 80096c4:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	6859      	ldr	r1, [r3, #4]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	430a      	orrs	r2, r1
 80096d6:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	6852      	ldr	r2, [r2, #4]
 80096e0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	683a      	ldr	r2, [r7, #0]
 80096e8:	6892      	ldr	r2, [r2, #8]
 80096ea:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f022 021f 	bic.w	r2, r2, #31
 80096fa:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	685a      	ldr	r2, [r3, #4]
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	b29b      	uxth	r3, r3
 8009708:	4619      	mov	r1, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	430a      	orrs	r2, r1
 8009710:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	ff3ffdff 	.word	0xff3ffdff

0800972c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8009734:	4b78      	ldr	r3, [pc, #480]	; (8009918 <ADC_Init+0x1ec>)
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	4a77      	ldr	r2, [pc, #476]	; (8009918 <ADC_Init+0x1ec>)
 800973a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800973e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8009740:	4b75      	ldr	r3, [pc, #468]	; (8009918 <ADC_Init+0x1ec>)
 8009742:	685a      	ldr	r2, [r3, #4]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	4973      	ldr	r1, [pc, #460]	; (8009918 <ADC_Init+0x1ec>)
 800974a:	4313      	orrs	r3, r2
 800974c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	685a      	ldr	r2, [r3, #4]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800975c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6859      	ldr	r1, [r3, #4]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	021a      	lsls	r2, r3, #8
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	430a      	orrs	r2, r1
 8009770:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	685a      	ldr	r2, [r3, #4]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009780:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	6859      	ldr	r1, [r3, #4]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	689a      	ldr	r2, [r3, #8]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	430a      	orrs	r2, r1
 8009792:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	689a      	ldr	r2, [r3, #8]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	6899      	ldr	r1, [r3, #8]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68da      	ldr	r2, [r3, #12]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	430a      	orrs	r2, r1
 80097b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ba:	4a58      	ldr	r2, [pc, #352]	; (800991c <ADC_Init+0x1f0>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d022      	beq.n	8009806 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	689a      	ldr	r2, [r3, #8]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80097ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	6899      	ldr	r1, [r3, #8]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	430a      	orrs	r2, r1
 80097e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	689a      	ldr	r2, [r3, #8]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80097f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	6899      	ldr	r1, [r3, #8]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	430a      	orrs	r2, r1
 8009802:	609a      	str	r2, [r3, #8]
 8009804:	e00f      	b.n	8009826 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	689a      	ldr	r2, [r3, #8]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009814:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	689a      	ldr	r2, [r3, #8]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009824:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	689a      	ldr	r2, [r3, #8]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f022 0202 	bic.w	r2, r2, #2
 8009834:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	6899      	ldr	r1, [r3, #8]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	005a      	lsls	r2, r3, #1
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	430a      	orrs	r2, r1
 8009848:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d01b      	beq.n	800988c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	685a      	ldr	r2, [r3, #4]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009862:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	685a      	ldr	r2, [r3, #4]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009872:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6859      	ldr	r1, [r3, #4]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987e:	3b01      	subs	r3, #1
 8009880:	035a      	lsls	r2, r3, #13
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	430a      	orrs	r2, r1
 8009888:	605a      	str	r2, [r3, #4]
 800988a:	e007      	b.n	800989c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	685a      	ldr	r2, [r3, #4]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800989a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80098aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	69db      	ldr	r3, [r3, #28]
 80098b6:	3b01      	subs	r3, #1
 80098b8:	051a      	lsls	r2, r3, #20
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	430a      	orrs	r2, r1
 80098c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	689a      	ldr	r2, [r3, #8]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80098d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	6899      	ldr	r1, [r3, #8]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80098de:	025a      	lsls	r2, r3, #9
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	430a      	orrs	r2, r1
 80098e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	689a      	ldr	r2, [r3, #8]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6899      	ldr	r1, [r3, #8]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	029a      	lsls	r2, r3, #10
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	430a      	orrs	r2, r1
 800990a:	609a      	str	r2, [r3, #8]
}
 800990c:	bf00      	nop
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr
 8009918:	40012300 	.word	0x40012300
 800991c:	0f000001 	.word	0x0f000001

08009920 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009932:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009936:	2b00      	cmp	r3, #0
 8009938:	d13c      	bne.n	80099b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009950:	2b00      	cmp	r3, #0
 8009952:	d12b      	bne.n	80099ac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009958:	2b00      	cmp	r3, #0
 800995a:	d127      	bne.n	80099ac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009962:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009966:	2b00      	cmp	r3, #0
 8009968:	d006      	beq.n	8009978 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009974:	2b00      	cmp	r3, #0
 8009976:	d119      	bne.n	80099ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	685a      	ldr	r2, [r3, #4]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f022 0220 	bic.w	r2, r2, #32
 8009986:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800999c:	2b00      	cmp	r3, #0
 800999e:	d105      	bne.n	80099ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a4:	f043 0201 	orr.w	r2, r3, #1
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f7fe f883 	bl	8007ab8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80099b2:	e00e      	b.n	80099d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b8:	f003 0310 	and.w	r3, r3, #16
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d003      	beq.n	80099c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f7ff fcff 	bl	80093c4 <HAL_ADC_ErrorCallback>
}
 80099c6:	e004      	b.n	80099d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	4798      	blx	r3
}
 80099d2:	bf00      	nop
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b084      	sub	sp, #16
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f7ff fce1 	bl	80093b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80099ee:	bf00      	nop
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b084      	sub	sp, #16
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a02:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2240      	movs	r2, #64	; 0x40
 8009a08:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a0e:	f043 0204 	orr.w	r2, r3, #4
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f7ff fcd4 	bl	80093c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009a1c:	bf00      	nop
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b085      	sub	sp, #20
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f003 0307 	and.w	r3, r3, #7
 8009a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009a34:	4b0b      	ldr	r3, [pc, #44]	; (8009a64 <__NVIC_SetPriorityGrouping+0x40>)
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009a40:	4013      	ands	r3, r2
 8009a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009a4c:	4b06      	ldr	r3, [pc, #24]	; (8009a68 <__NVIC_SetPriorityGrouping+0x44>)
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009a52:	4a04      	ldr	r2, [pc, #16]	; (8009a64 <__NVIC_SetPriorityGrouping+0x40>)
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	60d3      	str	r3, [r2, #12]
}
 8009a58:	bf00      	nop
 8009a5a:	3714      	adds	r7, #20
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr
 8009a64:	e000ed00 	.word	0xe000ed00
 8009a68:	05fa0000 	.word	0x05fa0000

08009a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009a70:	4b04      	ldr	r3, [pc, #16]	; (8009a84 <__NVIC_GetPriorityGrouping+0x18>)
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	0a1b      	lsrs	r3, r3, #8
 8009a76:	f003 0307 	and.w	r3, r3, #7
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr
 8009a84:	e000ed00 	.word	0xe000ed00

08009a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	4603      	mov	r3, r0
 8009a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	db0b      	blt.n	8009ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a9a:	79fb      	ldrb	r3, [r7, #7]
 8009a9c:	f003 021f 	and.w	r2, r3, #31
 8009aa0:	4907      	ldr	r1, [pc, #28]	; (8009ac0 <__NVIC_EnableIRQ+0x38>)
 8009aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009aa6:	095b      	lsrs	r3, r3, #5
 8009aa8:	2001      	movs	r0, #1
 8009aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8009aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009ab2:	bf00      	nop
 8009ab4:	370c      	adds	r7, #12
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	e000e100 	.word	0xe000e100

08009ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	4603      	mov	r3, r0
 8009acc:	6039      	str	r1, [r7, #0]
 8009ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	db0a      	blt.n	8009aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	b2da      	uxtb	r2, r3
 8009adc:	490c      	ldr	r1, [pc, #48]	; (8009b10 <__NVIC_SetPriority+0x4c>)
 8009ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ae2:	0112      	lsls	r2, r2, #4
 8009ae4:	b2d2      	uxtb	r2, r2
 8009ae6:	440b      	add	r3, r1
 8009ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009aec:	e00a      	b.n	8009b04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	b2da      	uxtb	r2, r3
 8009af2:	4908      	ldr	r1, [pc, #32]	; (8009b14 <__NVIC_SetPriority+0x50>)
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	f003 030f 	and.w	r3, r3, #15
 8009afa:	3b04      	subs	r3, #4
 8009afc:	0112      	lsls	r2, r2, #4
 8009afe:	b2d2      	uxtb	r2, r2
 8009b00:	440b      	add	r3, r1
 8009b02:	761a      	strb	r2, [r3, #24]
}
 8009b04:	bf00      	nop
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr
 8009b10:	e000e100 	.word	0xe000e100
 8009b14:	e000ed00 	.word	0xe000ed00

08009b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b089      	sub	sp, #36	; 0x24
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f003 0307 	and.w	r3, r3, #7
 8009b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	f1c3 0307 	rsb	r3, r3, #7
 8009b32:	2b04      	cmp	r3, #4
 8009b34:	bf28      	it	cs
 8009b36:	2304      	movcs	r3, #4
 8009b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	2b06      	cmp	r3, #6
 8009b40:	d902      	bls.n	8009b48 <NVIC_EncodePriority+0x30>
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	3b03      	subs	r3, #3
 8009b46:	e000      	b.n	8009b4a <NVIC_EncodePriority+0x32>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	fa02 f303 	lsl.w	r3, r2, r3
 8009b56:	43da      	mvns	r2, r3
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	401a      	ands	r2, r3
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009b60:	f04f 31ff 	mov.w	r1, #4294967295
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	fa01 f303 	lsl.w	r3, r1, r3
 8009b6a:	43d9      	mvns	r1, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b70:	4313      	orrs	r3, r2
         );
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3724      	adds	r7, #36	; 0x24
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
	...

08009b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b90:	d301      	bcc.n	8009b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009b92:	2301      	movs	r3, #1
 8009b94:	e00f      	b.n	8009bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009b96:	4a0a      	ldr	r2, [pc, #40]	; (8009bc0 <SysTick_Config+0x40>)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009b9e:	210f      	movs	r1, #15
 8009ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba4:	f7ff ff8e 	bl	8009ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009ba8:	4b05      	ldr	r3, [pc, #20]	; (8009bc0 <SysTick_Config+0x40>)
 8009baa:	2200      	movs	r2, #0
 8009bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009bae:	4b04      	ldr	r3, [pc, #16]	; (8009bc0 <SysTick_Config+0x40>)
 8009bb0:	2207      	movs	r2, #7
 8009bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	e000e010 	.word	0xe000e010

08009bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f7ff ff29 	bl	8009a24 <__NVIC_SetPriorityGrouping>
}
 8009bd2:	bf00      	nop
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b086      	sub	sp, #24
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	4603      	mov	r3, r0
 8009be2:	60b9      	str	r1, [r7, #8]
 8009be4:	607a      	str	r2, [r7, #4]
 8009be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009be8:	2300      	movs	r3, #0
 8009bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009bec:	f7ff ff3e 	bl	8009a6c <__NVIC_GetPriorityGrouping>
 8009bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	68b9      	ldr	r1, [r7, #8]
 8009bf6:	6978      	ldr	r0, [r7, #20]
 8009bf8:	f7ff ff8e 	bl	8009b18 <NVIC_EncodePriority>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c02:	4611      	mov	r1, r2
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7ff ff5d 	bl	8009ac4 <__NVIC_SetPriority>
}
 8009c0a:	bf00      	nop
 8009c0c:	3718      	adds	r7, #24
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b082      	sub	sp, #8
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	4603      	mov	r3, r0
 8009c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7ff ff31 	bl	8009a88 <__NVIC_EnableIRQ>
}
 8009c26:	bf00      	nop
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b082      	sub	sp, #8
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7ff ffa2 	bl	8009b80 <SysTick_Config>
 8009c3c:	4603      	mov	r3, r0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b082      	sub	sp, #8
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d101      	bne.n	8009c58 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	e014      	b.n	8009c82 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	791b      	ldrb	r3, [r3, #4]
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d105      	bne.n	8009c6e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7fe f8e9 	bl	8007e40 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2202      	movs	r2, #2
 8009c72:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009c8a:	b480      	push	{r7}
 8009c8c:	b083      	sub	sp, #12
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
 8009c92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	795b      	ldrb	r3, [r3, #5]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d101      	bne.n	8009ca0 <HAL_DAC_Start+0x16>
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	e040      	b.n	8009d22 <HAL_DAC_Start+0x98>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2202      	movs	r2, #2
 8009caa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6819      	ldr	r1, [r3, #0]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	f003 0310 	and.w	r3, r3, #16
 8009cb8:	2201      	movs	r2, #1
 8009cba:	409a      	lsls	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10f      	bne.n	8009cea <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8009cd4:	2b3c      	cmp	r3, #60	; 0x3c
 8009cd6:	d11d      	bne.n	8009d14 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	685a      	ldr	r2, [r3, #4]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f042 0201 	orr.w	r2, r2, #1
 8009ce6:	605a      	str	r2, [r3, #4]
 8009ce8:	e014      	b.n	8009d14 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	f003 0310 	and.w	r3, r3, #16
 8009cfa:	213c      	movs	r1, #60	; 0x3c
 8009cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d107      	bne.n	8009d14 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	685a      	ldr	r2, [r3, #4]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f042 0202 	orr.w	r2, r2, #2
 8009d12:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8009d2e:	b480      	push	{r7}
 8009d30:	b087      	sub	sp, #28
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	60f8      	str	r0, [r7, #12]
 8009d36:	60b9      	str	r1, [r7, #8]
 8009d38:	607a      	str	r2, [r7, #4]
 8009d3a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d105      	bne.n	8009d58 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4413      	add	r3, r2
 8009d52:	3308      	adds	r3, #8
 8009d54:	617b      	str	r3, [r7, #20]
 8009d56:	e004      	b.n	8009d62 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	3314      	adds	r3, #20
 8009d60:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	461a      	mov	r2, r3
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	371c      	adds	r7, #28
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b087      	sub	sp, #28
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	795b      	ldrb	r3, [r3, #5]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d101      	bne.n	8009d90 <HAL_DAC_ConfigChannel+0x18>
 8009d8c:	2302      	movs	r3, #2
 8009d8e:	e03c      	b.n	8009e0a <HAL_DAC_ConfigChannel+0x92>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2201      	movs	r2, #1
 8009d94:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2202      	movs	r2, #2
 8009d9a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f003 0310 	and.w	r3, r3, #16
 8009daa:	f640 72fe 	movw	r2, #4094	; 0xffe
 8009dae:	fa02 f303 	lsl.w	r3, r2, r3
 8009db2:	43db      	mvns	r3, r3
 8009db4:	697a      	ldr	r2, [r7, #20]
 8009db6:	4013      	ands	r3, r2
 8009db8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f003 0310 	and.w	r3, r3, #16
 8009dcc:	693a      	ldr	r2, [r7, #16]
 8009dce:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd2:	697a      	ldr	r2, [r7, #20]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	697a      	ldr	r2, [r7, #20]
 8009dde:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	6819      	ldr	r1, [r3, #0]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f003 0310 	and.w	r3, r3, #16
 8009dec:	22c0      	movs	r2, #192	; 0xc0
 8009dee:	fa02 f303 	lsl.w	r3, r2, r3
 8009df2:	43da      	mvns	r2, r3
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	400a      	ands	r2, r1
 8009dfa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2200      	movs	r2, #0
 8009e06:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	371c      	adds	r7, #28
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
	...

08009e18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009e20:	2300      	movs	r3, #0
 8009e22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009e24:	f7ff f82e 	bl	8008e84 <HAL_GetTick>
 8009e28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d101      	bne.n	8009e34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e099      	b.n	8009f68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f022 0201 	bic.w	r2, r2, #1
 8009e52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009e54:	e00f      	b.n	8009e76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009e56:	f7ff f815 	bl	8008e84 <HAL_GetTick>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	2b05      	cmp	r3, #5
 8009e62:	d908      	bls.n	8009e76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2220      	movs	r2, #32
 8009e68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2203      	movs	r2, #3
 8009e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009e72:	2303      	movs	r3, #3
 8009e74:	e078      	b.n	8009f68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f003 0301 	and.w	r3, r3, #1
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1e8      	bne.n	8009e56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	4b38      	ldr	r3, [pc, #224]	; (8009f70 <HAL_DMA_Init+0x158>)
 8009e90:	4013      	ands	r3, r2
 8009e92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	685a      	ldr	r2, [r3, #4]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	699b      	ldr	r3, [r3, #24]
 8009eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009eba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6a1b      	ldr	r3, [r3, #32]
 8009ec0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009ec2:	697a      	ldr	r2, [r7, #20]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ecc:	2b04      	cmp	r3, #4
 8009ece:	d107      	bne.n	8009ee0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	697a      	ldr	r2, [r7, #20]
 8009ee6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	f023 0307 	bic.w	r3, r3, #7
 8009ef6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efc:	697a      	ldr	r2, [r7, #20]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f06:	2b04      	cmp	r3, #4
 8009f08:	d117      	bne.n	8009f3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00e      	beq.n	8009f3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 fb23 	bl	800a568 <DMA_CheckFifoParam>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d008      	beq.n	8009f3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2240      	movs	r2, #64	; 0x40
 8009f2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009f36:	2301      	movs	r3, #1
 8009f38:	e016      	b.n	8009f68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	697a      	ldr	r2, [r7, #20]
 8009f40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fada 	bl	800a4fc <DMA_CalcBaseAndBitshift>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f50:	223f      	movs	r2, #63	; 0x3f
 8009f52:	409a      	lsls	r2, r3
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2201      	movs	r2, #1
 8009f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3718      	adds	r7, #24
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	e010803f 	.word	0xe010803f

08009f74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b086      	sub	sp, #24
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]
 8009f80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d101      	bne.n	8009f9a <HAL_DMA_Start_IT+0x26>
 8009f96:	2302      	movs	r3, #2
 8009f98:	e048      	b.n	800a02c <HAL_DMA_Start_IT+0xb8>
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d137      	bne.n	800a01e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2202      	movs	r2, #2
 8009fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	68b9      	ldr	r1, [r7, #8]
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	f000 fa6c 	bl	800a4a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fcc:	223f      	movs	r2, #63	; 0x3f
 8009fce:	409a      	lsls	r2, r3
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f042 0216 	orr.w	r2, r2, #22
 8009fe2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	695a      	ldr	r2, [r3, #20]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009ff2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d007      	beq.n	800a00c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f042 0208 	orr.w	r2, r2, #8
 800a00a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f042 0201 	orr.w	r2, r2, #1
 800a01a:	601a      	str	r2, [r3, #0]
 800a01c:	e005      	b.n	800a02a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a026:	2302      	movs	r3, #2
 800a028:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a02a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3718      	adds	r7, #24
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a040:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a042:	f7fe ff1f 	bl	8008e84 <HAL_GetTick>
 800a046:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	2b02      	cmp	r3, #2
 800a052:	d008      	beq.n	800a066 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2280      	movs	r2, #128	; 0x80
 800a058:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e052      	b.n	800a10c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f022 0216 	bic.w	r2, r2, #22
 800a074:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	695a      	ldr	r2, [r3, #20]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a084:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d103      	bne.n	800a096 <HAL_DMA_Abort+0x62>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a092:	2b00      	cmp	r3, #0
 800a094:	d007      	beq.n	800a0a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f022 0208 	bic.w	r2, r2, #8
 800a0a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f022 0201 	bic.w	r2, r2, #1
 800a0b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a0b6:	e013      	b.n	800a0e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a0b8:	f7fe fee4 	bl	8008e84 <HAL_GetTick>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	2b05      	cmp	r3, #5
 800a0c4:	d90c      	bls.n	800a0e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2220      	movs	r2, #32
 800a0ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2203      	movs	r2, #3
 800a0d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	e015      	b.n	800a10c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 0301 	and.w	r3, r3, #1
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1e4      	bne.n	800a0b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0f2:	223f      	movs	r2, #63	; 0x3f
 800a0f4:	409a      	lsls	r2, r3
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2b02      	cmp	r3, #2
 800a126:	d004      	beq.n	800a132 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2280      	movs	r2, #128	; 0x80
 800a12c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e00c      	b.n	800a14c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2205      	movs	r2, #5
 800a136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f022 0201 	bic.w	r2, r2, #1
 800a148:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800a160:	2300      	movs	r3, #0
 800a162:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800a164:	4b92      	ldr	r3, [pc, #584]	; (800a3b0 <HAL_DMA_IRQHandler+0x258>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a92      	ldr	r2, [pc, #584]	; (800a3b4 <HAL_DMA_IRQHandler+0x25c>)
 800a16a:	fba2 2303 	umull	r2, r3, r2, r3
 800a16e:	0a9b      	lsrs	r3, r3, #10
 800a170:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a176:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a182:	2208      	movs	r2, #8
 800a184:	409a      	lsls	r2, r3
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	4013      	ands	r3, r2
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d01a      	beq.n	800a1c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 0304 	and.w	r3, r3, #4
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d013      	beq.n	800a1c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f022 0204 	bic.w	r2, r2, #4
 800a1aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1b0:	2208      	movs	r2, #8
 800a1b2:	409a      	lsls	r2, r3
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1bc:	f043 0201 	orr.w	r2, r3, #1
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	409a      	lsls	r2, r3
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	4013      	ands	r3, r2
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d012      	beq.n	800a1fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	695b      	ldr	r3, [r3, #20]
 800a1da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00b      	beq.n	800a1fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	409a      	lsls	r2, r3
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1f2:	f043 0202 	orr.w	r2, r3, #2
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1fe:	2204      	movs	r2, #4
 800a200:	409a      	lsls	r2, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	4013      	ands	r3, r2
 800a206:	2b00      	cmp	r3, #0
 800a208:	d012      	beq.n	800a230 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 0302 	and.w	r3, r3, #2
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00b      	beq.n	800a230 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a21c:	2204      	movs	r2, #4
 800a21e:	409a      	lsls	r2, r3
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a228:	f043 0204 	orr.w	r2, r3, #4
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a234:	2210      	movs	r2, #16
 800a236:	409a      	lsls	r2, r3
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	4013      	ands	r3, r2
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d043      	beq.n	800a2c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f003 0308 	and.w	r3, r3, #8
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d03c      	beq.n	800a2c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a252:	2210      	movs	r2, #16
 800a254:	409a      	lsls	r2, r3
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d018      	beq.n	800a29a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a272:	2b00      	cmp	r3, #0
 800a274:	d108      	bne.n	800a288 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d024      	beq.n	800a2c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	4798      	blx	r3
 800a286:	e01f      	b.n	800a2c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d01b      	beq.n	800a2c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	4798      	blx	r3
 800a298:	e016      	b.n	800a2c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d107      	bne.n	800a2b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f022 0208 	bic.w	r2, r2, #8
 800a2b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d003      	beq.n	800a2c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2cc:	2220      	movs	r2, #32
 800a2ce:	409a      	lsls	r2, r3
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f000 808e 	beq.w	800a3f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 0310 	and.w	r3, r3, #16
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f000 8086 	beq.w	800a3f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2ee:	2220      	movs	r2, #32
 800a2f0:	409a      	lsls	r2, r3
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	2b05      	cmp	r3, #5
 800a300:	d136      	bne.n	800a370 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f022 0216 	bic.w	r2, r2, #22
 800a310:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	695a      	ldr	r2, [r3, #20]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a320:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a326:	2b00      	cmp	r3, #0
 800a328:	d103      	bne.n	800a332 <HAL_DMA_IRQHandler+0x1da>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d007      	beq.n	800a342 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f022 0208 	bic.w	r2, r2, #8
 800a340:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a346:	223f      	movs	r2, #63	; 0x3f
 800a348:	409a      	lsls	r2, r3
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2201      	movs	r2, #1
 800a35a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a362:	2b00      	cmp	r3, #0
 800a364:	d07d      	beq.n	800a462 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	4798      	blx	r3
        }
        return;
 800a36e:	e078      	b.n	800a462 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d01c      	beq.n	800a3b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d108      	bne.n	800a39e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a390:	2b00      	cmp	r3, #0
 800a392:	d030      	beq.n	800a3f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	4798      	blx	r3
 800a39c:	e02b      	b.n	800a3f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d027      	beq.n	800a3f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	4798      	blx	r3
 800a3ae:	e022      	b.n	800a3f6 <HAL_DMA_IRQHandler+0x29e>
 800a3b0:	20000224 	.word	0x20000224
 800a3b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d10f      	bne.n	800a3e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f022 0210 	bic.w	r2, r2, #16
 800a3d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d003      	beq.n	800a3f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d032      	beq.n	800a464 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a402:	f003 0301 	and.w	r3, r3, #1
 800a406:	2b00      	cmp	r3, #0
 800a408:	d022      	beq.n	800a450 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2205      	movs	r2, #5
 800a40e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f022 0201 	bic.w	r2, r2, #1
 800a420:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	3301      	adds	r3, #1
 800a426:	60bb      	str	r3, [r7, #8]
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d307      	bcc.n	800a43e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 0301 	and.w	r3, r3, #1
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1f2      	bne.n	800a422 <HAL_DMA_IRQHandler+0x2ca>
 800a43c:	e000      	b.n	800a440 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a43e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a454:	2b00      	cmp	r3, #0
 800a456:	d005      	beq.n	800a464 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	4798      	blx	r3
 800a460:	e000      	b.n	800a464 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a462:	bf00      	nop
    }
  }
}
 800a464:	3718      	adds	r7, #24
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop

0800a46c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a47a:	b2db      	uxtb	r3, r3
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a494:	4618      	mov	r0, r3
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
 800a4ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a4bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	683a      	ldr	r2, [r7, #0]
 800a4c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	2b40      	cmp	r3, #64	; 0x40
 800a4cc:	d108      	bne.n	800a4e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	68ba      	ldr	r2, [r7, #8]
 800a4dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a4de:	e007      	b.n	800a4f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	60da      	str	r2, [r3, #12]
}
 800a4f0:	bf00      	nop
 800a4f2:	3714      	adds	r7, #20
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	3b10      	subs	r3, #16
 800a50c:	4a13      	ldr	r2, [pc, #76]	; (800a55c <DMA_CalcBaseAndBitshift+0x60>)
 800a50e:	fba2 2303 	umull	r2, r3, r2, r3
 800a512:	091b      	lsrs	r3, r3, #4
 800a514:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a516:	4a12      	ldr	r2, [pc, #72]	; (800a560 <DMA_CalcBaseAndBitshift+0x64>)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	4413      	add	r3, r2
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	461a      	mov	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2b03      	cmp	r3, #3
 800a528:	d908      	bls.n	800a53c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	461a      	mov	r2, r3
 800a530:	4b0c      	ldr	r3, [pc, #48]	; (800a564 <DMA_CalcBaseAndBitshift+0x68>)
 800a532:	4013      	ands	r3, r2
 800a534:	1d1a      	adds	r2, r3, #4
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	659a      	str	r2, [r3, #88]	; 0x58
 800a53a:	e006      	b.n	800a54a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	461a      	mov	r2, r3
 800a542:	4b08      	ldr	r3, [pc, #32]	; (800a564 <DMA_CalcBaseAndBitshift+0x68>)
 800a544:	4013      	ands	r3, r2
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3714      	adds	r7, #20
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	aaaaaaab 	.word	0xaaaaaaab
 800a560:	08022414 	.word	0x08022414
 800a564:	fffffc00 	.word	0xfffffc00

0800a568 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a568:	b480      	push	{r7}
 800a56a:	b085      	sub	sp, #20
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a578:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	699b      	ldr	r3, [r3, #24]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d11f      	bne.n	800a5c2 <DMA_CheckFifoParam+0x5a>
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	2b03      	cmp	r3, #3
 800a586:	d856      	bhi.n	800a636 <DMA_CheckFifoParam+0xce>
 800a588:	a201      	add	r2, pc, #4	; (adr r2, 800a590 <DMA_CheckFifoParam+0x28>)
 800a58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58e:	bf00      	nop
 800a590:	0800a5a1 	.word	0x0800a5a1
 800a594:	0800a5b3 	.word	0x0800a5b3
 800a598:	0800a5a1 	.word	0x0800a5a1
 800a59c:	0800a637 	.word	0x0800a637
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d046      	beq.n	800a63a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a5b0:	e043      	b.n	800a63a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a5ba:	d140      	bne.n	800a63e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a5c0:	e03d      	b.n	800a63e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	699b      	ldr	r3, [r3, #24]
 800a5c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5ca:	d121      	bne.n	800a610 <DMA_CheckFifoParam+0xa8>
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	2b03      	cmp	r3, #3
 800a5d0:	d837      	bhi.n	800a642 <DMA_CheckFifoParam+0xda>
 800a5d2:	a201      	add	r2, pc, #4	; (adr r2, 800a5d8 <DMA_CheckFifoParam+0x70>)
 800a5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d8:	0800a5e9 	.word	0x0800a5e9
 800a5dc:	0800a5ef 	.word	0x0800a5ef
 800a5e0:	0800a5e9 	.word	0x0800a5e9
 800a5e4:	0800a601 	.word	0x0800a601
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a5ec:	e030      	b.n	800a650 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d025      	beq.n	800a646 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a5fe:	e022      	b.n	800a646 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a604:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a608:	d11f      	bne.n	800a64a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a60e:	e01c      	b.n	800a64a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	2b02      	cmp	r3, #2
 800a614:	d903      	bls.n	800a61e <DMA_CheckFifoParam+0xb6>
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	2b03      	cmp	r3, #3
 800a61a:	d003      	beq.n	800a624 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a61c:	e018      	b.n	800a650 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	73fb      	strb	r3, [r7, #15]
      break;
 800a622:	e015      	b.n	800a650 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d00e      	beq.n	800a64e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	73fb      	strb	r3, [r7, #15]
      break;
 800a634:	e00b      	b.n	800a64e <DMA_CheckFifoParam+0xe6>
      break;
 800a636:	bf00      	nop
 800a638:	e00a      	b.n	800a650 <DMA_CheckFifoParam+0xe8>
      break;
 800a63a:	bf00      	nop
 800a63c:	e008      	b.n	800a650 <DMA_CheckFifoParam+0xe8>
      break;
 800a63e:	bf00      	nop
 800a640:	e006      	b.n	800a650 <DMA_CheckFifoParam+0xe8>
      break;
 800a642:	bf00      	nop
 800a644:	e004      	b.n	800a650 <DMA_CheckFifoParam+0xe8>
      break;
 800a646:	bf00      	nop
 800a648:	e002      	b.n	800a650 <DMA_CheckFifoParam+0xe8>
      break;   
 800a64a:	bf00      	nop
 800a64c:	e000      	b.n	800a650 <DMA_CheckFifoParam+0xe8>
      break;
 800a64e:	bf00      	nop
    }
  } 
  
  return status; 
 800a650:	7bfb      	ldrb	r3, [r7, #15]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop

0800a660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a660:	b480      	push	{r7}
 800a662:	b089      	sub	sp, #36	; 0x24
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800a66a:	2300      	movs	r3, #0
 800a66c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800a66e:	2300      	movs	r3, #0
 800a670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800a672:	2300      	movs	r3, #0
 800a674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800a676:	2300      	movs	r3, #0
 800a678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a67a:	2300      	movs	r3, #0
 800a67c:	61fb      	str	r3, [r7, #28]
 800a67e:	e169      	b.n	800a954 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a680:	2201      	movs	r2, #1
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	fa02 f303 	lsl.w	r3, r2, r3
 800a688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	697a      	ldr	r2, [r7, #20]
 800a690:	4013      	ands	r3, r2
 800a692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a694:	693a      	ldr	r2, [r7, #16]
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	429a      	cmp	r2, r3
 800a69a:	f040 8158 	bne.w	800a94e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d00b      	beq.n	800a6be <HAL_GPIO_Init+0x5e>
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	d007      	beq.n	800a6be <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a6b2:	2b11      	cmp	r3, #17
 800a6b4:	d003      	beq.n	800a6be <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	2b12      	cmp	r3, #18
 800a6bc:	d130      	bne.n	800a720 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	005b      	lsls	r3, r3, #1
 800a6c8:	2203      	movs	r2, #3
 800a6ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ce:	43db      	mvns	r3, r3
 800a6d0:	69ba      	ldr	r2, [r7, #24]
 800a6d2:	4013      	ands	r3, r2
 800a6d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	68da      	ldr	r2, [r3, #12]
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	005b      	lsls	r3, r3, #1
 800a6de:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e2:	69ba      	ldr	r2, [r7, #24]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	69ba      	ldr	r2, [r7, #24]
 800a6ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a6fc:	43db      	mvns	r3, r3
 800a6fe:	69ba      	ldr	r2, [r7, #24]
 800a700:	4013      	ands	r3, r2
 800a702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	091b      	lsrs	r3, r3, #4
 800a70a:	f003 0201 	and.w	r2, r3, #1
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	fa02 f303 	lsl.w	r3, r2, r3
 800a714:	69ba      	ldr	r2, [r7, #24]
 800a716:	4313      	orrs	r3, r2
 800a718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	69ba      	ldr	r2, [r7, #24]
 800a71e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	005b      	lsls	r3, r3, #1
 800a72a:	2203      	movs	r2, #3
 800a72c:	fa02 f303 	lsl.w	r3, r2, r3
 800a730:	43db      	mvns	r3, r3
 800a732:	69ba      	ldr	r2, [r7, #24]
 800a734:	4013      	ands	r3, r2
 800a736:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	689a      	ldr	r2, [r3, #8]
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	005b      	lsls	r3, r3, #1
 800a740:	fa02 f303 	lsl.w	r3, r2, r3
 800a744:	69ba      	ldr	r2, [r7, #24]
 800a746:	4313      	orrs	r3, r2
 800a748:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	69ba      	ldr	r2, [r7, #24]
 800a74e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	2b02      	cmp	r3, #2
 800a756:	d003      	beq.n	800a760 <HAL_GPIO_Init+0x100>
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	2b12      	cmp	r3, #18
 800a75e:	d123      	bne.n	800a7a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	08da      	lsrs	r2, r3, #3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	3208      	adds	r2, #8
 800a768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a76c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	f003 0307 	and.w	r3, r3, #7
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	220f      	movs	r2, #15
 800a778:	fa02 f303 	lsl.w	r3, r2, r3
 800a77c:	43db      	mvns	r3, r3
 800a77e:	69ba      	ldr	r2, [r7, #24]
 800a780:	4013      	ands	r3, r2
 800a782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	691a      	ldr	r2, [r3, #16]
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	f003 0307 	and.w	r3, r3, #7
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	fa02 f303 	lsl.w	r3, r2, r3
 800a794:	69ba      	ldr	r2, [r7, #24]
 800a796:	4313      	orrs	r3, r2
 800a798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	08da      	lsrs	r2, r3, #3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	3208      	adds	r2, #8
 800a7a2:	69b9      	ldr	r1, [r7, #24]
 800a7a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	005b      	lsls	r3, r3, #1
 800a7b2:	2203      	movs	r2, #3
 800a7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b8:	43db      	mvns	r3, r3
 800a7ba:	69ba      	ldr	r2, [r7, #24]
 800a7bc:	4013      	ands	r3, r2
 800a7be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	f003 0203 	and.w	r2, r3, #3
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	005b      	lsls	r3, r3, #1
 800a7cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d0:	69ba      	ldr	r2, [r7, #24]
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	69ba      	ldr	r2, [r7, #24]
 800a7da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f000 80b2 	beq.w	800a94e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a7ea:	4b60      	ldr	r3, [pc, #384]	; (800a96c <HAL_GPIO_Init+0x30c>)
 800a7ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ee:	4a5f      	ldr	r2, [pc, #380]	; (800a96c <HAL_GPIO_Init+0x30c>)
 800a7f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a7f4:	6453      	str	r3, [r2, #68]	; 0x44
 800a7f6:	4b5d      	ldr	r3, [pc, #372]	; (800a96c <HAL_GPIO_Init+0x30c>)
 800a7f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7fe:	60fb      	str	r3, [r7, #12]
 800a800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800a802:	4a5b      	ldr	r2, [pc, #364]	; (800a970 <HAL_GPIO_Init+0x310>)
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	089b      	lsrs	r3, r3, #2
 800a808:	3302      	adds	r3, #2
 800a80a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a80e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	f003 0303 	and.w	r3, r3, #3
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	220f      	movs	r2, #15
 800a81a:	fa02 f303 	lsl.w	r3, r2, r3
 800a81e:	43db      	mvns	r3, r3
 800a820:	69ba      	ldr	r2, [r7, #24]
 800a822:	4013      	ands	r3, r2
 800a824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a52      	ldr	r2, [pc, #328]	; (800a974 <HAL_GPIO_Init+0x314>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d02b      	beq.n	800a886 <HAL_GPIO_Init+0x226>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a51      	ldr	r2, [pc, #324]	; (800a978 <HAL_GPIO_Init+0x318>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d025      	beq.n	800a882 <HAL_GPIO_Init+0x222>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4a50      	ldr	r2, [pc, #320]	; (800a97c <HAL_GPIO_Init+0x31c>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d01f      	beq.n	800a87e <HAL_GPIO_Init+0x21e>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4a4f      	ldr	r2, [pc, #316]	; (800a980 <HAL_GPIO_Init+0x320>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d019      	beq.n	800a87a <HAL_GPIO_Init+0x21a>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4a4e      	ldr	r2, [pc, #312]	; (800a984 <HAL_GPIO_Init+0x324>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d013      	beq.n	800a876 <HAL_GPIO_Init+0x216>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4a4d      	ldr	r2, [pc, #308]	; (800a988 <HAL_GPIO_Init+0x328>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d00d      	beq.n	800a872 <HAL_GPIO_Init+0x212>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	4a4c      	ldr	r2, [pc, #304]	; (800a98c <HAL_GPIO_Init+0x32c>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d007      	beq.n	800a86e <HAL_GPIO_Init+0x20e>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4a4b      	ldr	r2, [pc, #300]	; (800a990 <HAL_GPIO_Init+0x330>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d101      	bne.n	800a86a <HAL_GPIO_Init+0x20a>
 800a866:	2307      	movs	r3, #7
 800a868:	e00e      	b.n	800a888 <HAL_GPIO_Init+0x228>
 800a86a:	2308      	movs	r3, #8
 800a86c:	e00c      	b.n	800a888 <HAL_GPIO_Init+0x228>
 800a86e:	2306      	movs	r3, #6
 800a870:	e00a      	b.n	800a888 <HAL_GPIO_Init+0x228>
 800a872:	2305      	movs	r3, #5
 800a874:	e008      	b.n	800a888 <HAL_GPIO_Init+0x228>
 800a876:	2304      	movs	r3, #4
 800a878:	e006      	b.n	800a888 <HAL_GPIO_Init+0x228>
 800a87a:	2303      	movs	r3, #3
 800a87c:	e004      	b.n	800a888 <HAL_GPIO_Init+0x228>
 800a87e:	2302      	movs	r3, #2
 800a880:	e002      	b.n	800a888 <HAL_GPIO_Init+0x228>
 800a882:	2301      	movs	r3, #1
 800a884:	e000      	b.n	800a888 <HAL_GPIO_Init+0x228>
 800a886:	2300      	movs	r3, #0
 800a888:	69fa      	ldr	r2, [r7, #28]
 800a88a:	f002 0203 	and.w	r2, r2, #3
 800a88e:	0092      	lsls	r2, r2, #2
 800a890:	4093      	lsls	r3, r2
 800a892:	69ba      	ldr	r2, [r7, #24]
 800a894:	4313      	orrs	r3, r2
 800a896:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800a898:	4935      	ldr	r1, [pc, #212]	; (800a970 <HAL_GPIO_Init+0x310>)
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	089b      	lsrs	r3, r3, #2
 800a89e:	3302      	adds	r3, #2
 800a8a0:	69ba      	ldr	r2, [r7, #24]
 800a8a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a8a6:	4b3b      	ldr	r3, [pc, #236]	; (800a994 <HAL_GPIO_Init+0x334>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	43db      	mvns	r3, r3
 800a8b0:	69ba      	ldr	r2, [r7, #24]
 800a8b2:	4013      	ands	r3, r2
 800a8b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d003      	beq.n	800a8ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a8c2:	69ba      	ldr	r2, [r7, #24]
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a8ca:	4a32      	ldr	r2, [pc, #200]	; (800a994 <HAL_GPIO_Init+0x334>)
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a8d0:	4b30      	ldr	r3, [pc, #192]	; (800a994 <HAL_GPIO_Init+0x334>)
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	43db      	mvns	r3, r3
 800a8da:	69ba      	ldr	r2, [r7, #24]
 800a8dc:	4013      	ands	r3, r2
 800a8de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d003      	beq.n	800a8f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a8ec:	69ba      	ldr	r2, [r7, #24]
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a8f4:	4a27      	ldr	r2, [pc, #156]	; (800a994 <HAL_GPIO_Init+0x334>)
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a8fa:	4b26      	ldr	r3, [pc, #152]	; (800a994 <HAL_GPIO_Init+0x334>)
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	43db      	mvns	r3, r3
 800a904:	69ba      	ldr	r2, [r7, #24]
 800a906:	4013      	ands	r3, r2
 800a908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a912:	2b00      	cmp	r3, #0
 800a914:	d003      	beq.n	800a91e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a916:	69ba      	ldr	r2, [r7, #24]
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	4313      	orrs	r3, r2
 800a91c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a91e:	4a1d      	ldr	r2, [pc, #116]	; (800a994 <HAL_GPIO_Init+0x334>)
 800a920:	69bb      	ldr	r3, [r7, #24]
 800a922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a924:	4b1b      	ldr	r3, [pc, #108]	; (800a994 <HAL_GPIO_Init+0x334>)
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	43db      	mvns	r3, r3
 800a92e:	69ba      	ldr	r2, [r7, #24]
 800a930:	4013      	ands	r3, r2
 800a932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d003      	beq.n	800a948 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a940:	69ba      	ldr	r2, [r7, #24]
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	4313      	orrs	r3, r2
 800a946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a948:	4a12      	ldr	r2, [pc, #72]	; (800a994 <HAL_GPIO_Init+0x334>)
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	3301      	adds	r3, #1
 800a952:	61fb      	str	r3, [r7, #28]
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	2b0f      	cmp	r3, #15
 800a958:	f67f ae92 	bls.w	800a680 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800a95c:	bf00      	nop
 800a95e:	bf00      	nop
 800a960:	3724      	adds	r7, #36	; 0x24
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	40023800 	.word	0x40023800
 800a970:	40013800 	.word	0x40013800
 800a974:	40020000 	.word	0x40020000
 800a978:	40020400 	.word	0x40020400
 800a97c:	40020800 	.word	0x40020800
 800a980:	40020c00 	.word	0x40020c00
 800a984:	40021000 	.word	0x40021000
 800a988:	40021400 	.word	0x40021400
 800a98c:	40021800 	.word	0x40021800
 800a990:	40021c00 	.word	0x40021c00
 800a994:	40013c00 	.word	0x40013c00

0800a998 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	691a      	ldr	r2, [r3, #16]
 800a9a8:	887b      	ldrh	r3, [r7, #2]
 800a9aa:	4013      	ands	r3, r2
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d002      	beq.n	800a9b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	73fb      	strb	r3, [r7, #15]
 800a9b4:	e001      	b.n	800a9ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a9ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3714      	adds	r7, #20
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	807b      	strh	r3, [r7, #2]
 800a9d4:	4613      	mov	r3, r2
 800a9d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a9d8:	787b      	ldrb	r3, [r7, #1]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d003      	beq.n	800a9e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a9de:	887a      	ldrh	r2, [r7, #2]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800a9e4:	e003      	b.n	800a9ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800a9e6:	887b      	ldrh	r3, [r7, #2]
 800a9e8:	041a      	lsls	r2, r3, #16
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	619a      	str	r2, [r3, #24]
}
 800a9ee:	bf00      	nop
 800a9f0:	370c      	adds	r7, #12
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr

0800a9fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a9fa:	b480      	push	{r7}
 800a9fc:	b085      	sub	sp, #20
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
 800aa02:	460b      	mov	r3, r1
 800aa04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	695b      	ldr	r3, [r3, #20]
 800aa0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800aa0c:	887a      	ldrh	r2, [r7, #2]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	4013      	ands	r3, r2
 800aa12:	041a      	lsls	r2, r3, #16
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	43d9      	mvns	r1, r3
 800aa18:	887b      	ldrh	r3, [r7, #2]
 800aa1a:	400b      	ands	r3, r1
 800aa1c:	431a      	orrs	r2, r3
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	619a      	str	r2, [r3, #24]
}
 800aa22:	bf00      	nop
 800aa24:	3714      	adds	r7, #20
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr
	...

0800aa30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	4603      	mov	r3, r0
 800aa38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800aa3a:	4b08      	ldr	r3, [pc, #32]	; (800aa5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800aa3c:	695a      	ldr	r2, [r3, #20]
 800aa3e:	88fb      	ldrh	r3, [r7, #6]
 800aa40:	4013      	ands	r3, r2
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d006      	beq.n	800aa54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800aa46:	4a05      	ldr	r2, [pc, #20]	; (800aa5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800aa48:	88fb      	ldrh	r3, [r7, #6]
 800aa4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800aa4c:	88fb      	ldrh	r3, [r7, #6]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7fc ff72 	bl	8007938 <HAL_GPIO_EXTI_Callback>
  }
}
 800aa54:	bf00      	nop
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	40013c00 	.word	0x40013c00

0800aa60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d101      	bne.n	800aa72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e07f      	b.n	800ab72 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d106      	bne.n	800aa8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7fd fa1a 	bl	8007ec0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2224      	movs	r2, #36	; 0x24
 800aa90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f022 0201 	bic.w	r2, r2, #1
 800aaa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685a      	ldr	r2, [r3, #4]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800aab0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	689a      	ldr	r2, [r3, #8]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aac0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d107      	bne.n	800aada <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	689a      	ldr	r2, [r3, #8]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aad6:	609a      	str	r2, [r3, #8]
 800aad8:	e006      	b.n	800aae8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	689a      	ldr	r2, [r3, #8]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800aae6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d104      	bne.n	800aafa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aaf8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	6859      	ldr	r1, [r3, #4]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	4b1d      	ldr	r3, [pc, #116]	; (800ab7c <HAL_I2C_Init+0x11c>)
 800ab06:	430b      	orrs	r3, r1
 800ab08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	68da      	ldr	r2, [r3, #12]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ab18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	691a      	ldr	r2, [r3, #16]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	695b      	ldr	r3, [r3, #20]
 800ab22:	ea42 0103 	orr.w	r1, r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	699b      	ldr	r3, [r3, #24]
 800ab2a:	021a      	lsls	r2, r3, #8
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	430a      	orrs	r2, r1
 800ab32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	69d9      	ldr	r1, [r3, #28]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6a1a      	ldr	r2, [r3, #32]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	430a      	orrs	r2, r1
 800ab42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f042 0201 	orr.w	r2, r2, #1
 800ab52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2220      	movs	r2, #32
 800ab5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	02008000 	.word	0x02008000

0800ab80 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b088      	sub	sp, #32
 800ab84:	af02      	add	r7, sp, #8
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	607a      	str	r2, [r7, #4]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	817b      	strh	r3, [r7, #10]
 800ab90:	4613      	mov	r3, r2
 800ab92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	2b20      	cmp	r3, #32
 800ab9e:	f040 80da 	bne.w	800ad56 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d101      	bne.n	800abb0 <HAL_I2C_Master_Transmit+0x30>
 800abac:	2302      	movs	r3, #2
 800abae:	e0d3      	b.n	800ad58 <HAL_I2C_Master_Transmit+0x1d8>
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800abb8:	f7fe f964 	bl	8008e84 <HAL_GetTick>
 800abbc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	2319      	movs	r3, #25
 800abc4:	2201      	movs	r2, #1
 800abc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	f001 fc67 	bl	800c49e <I2C_WaitOnFlagUntilTimeout>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d001      	beq.n	800abda <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	e0be      	b.n	800ad58 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2221      	movs	r2, #33	; 0x21
 800abde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2210      	movs	r2, #16
 800abe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2200      	movs	r2, #0
 800abee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	893a      	ldrh	r2, [r7, #8]
 800abfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2200      	movs	r2, #0
 800ac00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	2bff      	cmp	r3, #255	; 0xff
 800ac0a:	d90e      	bls.n	800ac2a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	22ff      	movs	r2, #255	; 0xff
 800ac10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac16:	b2da      	uxtb	r2, r3
 800ac18:	8979      	ldrh	r1, [r7, #10]
 800ac1a:	4b51      	ldr	r3, [pc, #324]	; (800ad60 <HAL_I2C_Master_Transmit+0x1e0>)
 800ac1c:	9300      	str	r3, [sp, #0]
 800ac1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac22:	68f8      	ldr	r0, [r7, #12]
 800ac24:	f001 fd5e 	bl	800c6e4 <I2C_TransferConfig>
 800ac28:	e06c      	b.n	800ad04 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac2e:	b29a      	uxth	r2, r3
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac38:	b2da      	uxtb	r2, r3
 800ac3a:	8979      	ldrh	r1, [r7, #10]
 800ac3c:	4b48      	ldr	r3, [pc, #288]	; (800ad60 <HAL_I2C_Master_Transmit+0x1e0>)
 800ac3e:	9300      	str	r3, [sp, #0]
 800ac40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	f001 fd4d 	bl	800c6e4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800ac4a:	e05b      	b.n	800ad04 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac4c:	697a      	ldr	r2, [r7, #20]
 800ac4e:	6a39      	ldr	r1, [r7, #32]
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f001 fc64 	bl	800c51e <I2C_WaitOnTXISFlagUntilTimeout>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d001      	beq.n	800ac60 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e07b      	b.n	800ad58 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac64:	781a      	ldrb	r2, [r3, #0]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac70:	1c5a      	adds	r2, r3, #1
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	b29a      	uxth	r2, r3
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d034      	beq.n	800ad04 <HAL_I2C_Master_Transmit+0x184>
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d130      	bne.n	800ad04 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	6a3b      	ldr	r3, [r7, #32]
 800aca8:	2200      	movs	r2, #0
 800acaa:	2180      	movs	r1, #128	; 0x80
 800acac:	68f8      	ldr	r0, [r7, #12]
 800acae:	f001 fbf6 	bl	800c49e <I2C_WaitOnFlagUntilTimeout>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d001      	beq.n	800acbc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	e04d      	b.n	800ad58 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	2bff      	cmp	r3, #255	; 0xff
 800acc4:	d90e      	bls.n	800ace4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	22ff      	movs	r2, #255	; 0xff
 800acca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	8979      	ldrh	r1, [r7, #10]
 800acd4:	2300      	movs	r3, #0
 800acd6:	9300      	str	r3, [sp, #0]
 800acd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f001 fd01 	bl	800c6e4 <I2C_TransferConfig>
 800ace2:	e00f      	b.n	800ad04 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ace8:	b29a      	uxth	r2, r3
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acf2:	b2da      	uxtb	r2, r3
 800acf4:	8979      	ldrh	r1, [r7, #10]
 800acf6:	2300      	movs	r3, #0
 800acf8:	9300      	str	r3, [sp, #0]
 800acfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800acfe:	68f8      	ldr	r0, [r7, #12]
 800ad00:	f001 fcf0 	bl	800c6e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d19e      	bne.n	800ac4c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad0e:	697a      	ldr	r2, [r7, #20]
 800ad10:	6a39      	ldr	r1, [r7, #32]
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f001 fc43 	bl	800c59e <I2C_WaitOnSTOPFlagUntilTimeout>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d001      	beq.n	800ad22 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e01a      	b.n	800ad58 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2220      	movs	r2, #32
 800ad28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	6859      	ldr	r1, [r3, #4]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	4b0b      	ldr	r3, [pc, #44]	; (800ad64 <HAL_I2C_Master_Transmit+0x1e4>)
 800ad36:	400b      	ands	r3, r1
 800ad38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2220      	movs	r2, #32
 800ad3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	e000      	b.n	800ad58 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800ad56:	2302      	movs	r3, #2
  }
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3718      	adds	r7, #24
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	80002000 	.word	0x80002000
 800ad64:	fe00e800 	.word	0xfe00e800

0800ad68 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b088      	sub	sp, #32
 800ad6c:	af02      	add	r7, sp, #8
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	607a      	str	r2, [r7, #4]
 800ad72:	461a      	mov	r2, r3
 800ad74:	460b      	mov	r3, r1
 800ad76:	817b      	strh	r3, [r7, #10]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	2b20      	cmp	r3, #32
 800ad86:	d153      	bne.n	800ae30 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad96:	d101      	bne.n	800ad9c <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 800ad98:	2302      	movs	r3, #2
 800ad9a:	e04a      	b.n	800ae32 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d101      	bne.n	800adaa <HAL_I2C_Master_Transmit_IT+0x42>
 800ada6:	2302      	movs	r3, #2
 800ada8:	e043      	b.n	800ae32 <HAL_I2C_Master_Transmit_IT+0xca>
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2201      	movs	r2, #1
 800adae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2221      	movs	r2, #33	; 0x21
 800adb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2210      	movs	r2, #16
 800adbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2200      	movs	r2, #0
 800adc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	893a      	ldrh	r2, [r7, #8]
 800add2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	4a19      	ldr	r2, [pc, #100]	; (800ae3c <HAL_I2C_Master_Transmit_IT+0xd4>)
 800add8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	4a18      	ldr	r2, [pc, #96]	; (800ae40 <HAL_I2C_Master_Transmit_IT+0xd8>)
 800adde:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	2bff      	cmp	r3, #255	; 0xff
 800ade8:	d906      	bls.n	800adf8 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	22ff      	movs	r2, #255	; 0xff
 800adee:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800adf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800adf4:	617b      	str	r3, [r7, #20]
 800adf6:	e007      	b.n	800ae08 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800ae02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ae06:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae0c:	b2da      	uxtb	r2, r3
 800ae0e:	8979      	ldrh	r1, [r7, #10]
 800ae10:	4b0c      	ldr	r3, [pc, #48]	; (800ae44 <HAL_I2C_Master_Transmit_IT+0xdc>)
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f001 fc64 	bl	800c6e4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ae24:	2101      	movs	r1, #1
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f001 fc8a 	bl	800c740 <I2C_Enable_IRQ>

    return HAL_OK;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	e000      	b.n	800ae32 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 800ae30:	2302      	movs	r3, #2
  }
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3718      	adds	r7, #24
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	ffff0000 	.word	0xffff0000
 800ae40:	0800b24d 	.word	0x0800b24d
 800ae44:	80002000 	.word	0x80002000

0800ae48 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b088      	sub	sp, #32
 800ae4c:	af02      	add	r7, sp, #8
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	607a      	str	r2, [r7, #4]
 800ae52:	461a      	mov	r2, r3
 800ae54:	460b      	mov	r3, r1
 800ae56:	817b      	strh	r3, [r7, #10]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	2b20      	cmp	r3, #32
 800ae66:	d153      	bne.n	800af10 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	699b      	ldr	r3, [r3, #24]
 800ae6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae76:	d101      	bne.n	800ae7c <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 800ae78:	2302      	movs	r3, #2
 800ae7a:	e04a      	b.n	800af12 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d101      	bne.n	800ae8a <HAL_I2C_Master_Receive_IT+0x42>
 800ae86:	2302      	movs	r3, #2
 800ae88:	e043      	b.n	800af12 <HAL_I2C_Master_Receive_IT+0xca>
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2222      	movs	r2, #34	; 0x22
 800ae96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2210      	movs	r2, #16
 800ae9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	893a      	ldrh	r2, [r7, #8]
 800aeb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	4a19      	ldr	r2, [pc, #100]	; (800af1c <HAL_I2C_Master_Receive_IT+0xd4>)
 800aeb8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	4a18      	ldr	r2, [pc, #96]	; (800af20 <HAL_I2C_Master_Receive_IT+0xd8>)
 800aebe:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	2bff      	cmp	r3, #255	; 0xff
 800aec8:	d906      	bls.n	800aed8 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	22ff      	movs	r2, #255	; 0xff
 800aece:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800aed0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aed4:	617b      	str	r3, [r7, #20]
 800aed6:	e007      	b.n	800aee8 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aedc:	b29a      	uxth	r2, r3
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800aee2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aee6:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aeec:	b2da      	uxtb	r2, r3
 800aeee:	8979      	ldrh	r1, [r7, #10]
 800aef0:	4b0c      	ldr	r3, [pc, #48]	; (800af24 <HAL_I2C_Master_Receive_IT+0xdc>)
 800aef2:	9300      	str	r3, [sp, #0]
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f001 fbf4 	bl	800c6e4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800af04:	2102      	movs	r1, #2
 800af06:	68f8      	ldr	r0, [r7, #12]
 800af08:	f001 fc1a 	bl	800c740 <I2C_Enable_IRQ>

    return HAL_OK;
 800af0c:	2300      	movs	r3, #0
 800af0e:	e000      	b.n	800af12 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 800af10:	2302      	movs	r3, #2
  }
}
 800af12:	4618      	mov	r0, r3
 800af14:	3718      	adds	r7, #24
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	ffff0000 	.word	0xffff0000
 800af20:	0800b24d 	.word	0x0800b24d
 800af24:	80002400 	.word	0x80002400

0800af28 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b088      	sub	sp, #32
 800af2c:	af02      	add	r7, sp, #8
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	4608      	mov	r0, r1
 800af32:	4611      	mov	r1, r2
 800af34:	461a      	mov	r2, r3
 800af36:	4603      	mov	r3, r0
 800af38:	817b      	strh	r3, [r7, #10]
 800af3a:	460b      	mov	r3, r1
 800af3c:	813b      	strh	r3, [r7, #8]
 800af3e:	4613      	mov	r3, r2
 800af40:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	2b20      	cmp	r3, #32
 800af4c:	d176      	bne.n	800b03c <HAL_I2C_Mem_Write_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800af4e:	6a3b      	ldr	r3, [r7, #32]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d002      	beq.n	800af5a <HAL_I2C_Mem_Write_IT+0x32>
 800af54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af56:	2b00      	cmp	r3, #0
 800af58:	d105      	bne.n	800af66 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af60:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800af62:	2301      	movs	r3, #1
 800af64:	e06b      	b.n	800b03e <HAL_I2C_Mem_Write_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	699b      	ldr	r3, [r3, #24]
 800af6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af74:	d101      	bne.n	800af7a <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800af76:	2302      	movs	r3, #2
 800af78:	e061      	b.n	800b03e <HAL_I2C_Mem_Write_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af80:	2b01      	cmp	r3, #1
 800af82:	d101      	bne.n	800af88 <HAL_I2C_Mem_Write_IT+0x60>
 800af84:	2302      	movs	r3, #2
 800af86:	e05a      	b.n	800b03e <HAL_I2C_Mem_Write_IT+0x116>
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800af90:	f7fd ff78 	bl	8008e84 <HAL_GetTick>
 800af94:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2221      	movs	r2, #33	; 0x21
 800af9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2240      	movs	r2, #64	; 0x40
 800afa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2200      	movs	r2, #0
 800afaa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6a3a      	ldr	r2, [r7, #32]
 800afb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800afb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	4a23      	ldr	r2, [pc, #140]	; (800b048 <HAL_I2C_Mem_Write_IT+0x120>)
 800afbc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	4a22      	ldr	r2, [pc, #136]	; (800b04c <HAL_I2C_Mem_Write_IT+0x124>)
 800afc2:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afc8:	b29b      	uxth	r3, r3
 800afca:	2bff      	cmp	r3, #255	; 0xff
 800afcc:	d906      	bls.n	800afdc <HAL_I2C_Mem_Write_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	22ff      	movs	r2, #255	; 0xff
 800afd2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800afd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800afd8:	617b      	str	r3, [r7, #20]
 800afda:	e007      	b.n	800afec <HAL_I2C_Mem_Write_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afe0:	b29a      	uxth	r2, r3
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800afe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800afea:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800afec:	88f8      	ldrh	r0, [r7, #6]
 800afee:	893a      	ldrh	r2, [r7, #8]
 800aff0:	8979      	ldrh	r1, [r7, #10]
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	9301      	str	r3, [sp, #4]
 800aff6:	2319      	movs	r3, #25
 800aff8:	9300      	str	r3, [sp, #0]
 800affa:	4603      	mov	r3, r0
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f000 fd23 	bl	800ba48 <I2C_RequestMemoryWrite>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d005      	beq.n	800b014 <HAL_I2C_Mem_Write_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	e014      	b.n	800b03e <HAL_I2C_Mem_Write_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b018:	b2da      	uxtb	r2, r3
 800b01a:	8979      	ldrh	r1, [r7, #10]
 800b01c:	2300      	movs	r3, #0
 800b01e:	9300      	str	r3, [sp, #0]
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f001 fb5e 	bl	800c6e4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2200      	movs	r2, #0
 800b02c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b030:	2101      	movs	r1, #1
 800b032:	68f8      	ldr	r0, [r7, #12]
 800b034:	f001 fb84 	bl	800c740 <I2C_Enable_IRQ>

    return HAL_OK;
 800b038:	2300      	movs	r3, #0
 800b03a:	e000      	b.n	800b03e <HAL_I2C_Mem_Write_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 800b03c:	2302      	movs	r3, #2
  }
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3718      	adds	r7, #24
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	ffff0000 	.word	0xffff0000
 800b04c:	0800b24d 	.word	0x0800b24d

0800b050 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b088      	sub	sp, #32
 800b054:	af02      	add	r7, sp, #8
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	4608      	mov	r0, r1
 800b05a:	4611      	mov	r1, r2
 800b05c:	461a      	mov	r2, r3
 800b05e:	4603      	mov	r3, r0
 800b060:	817b      	strh	r3, [r7, #10]
 800b062:	460b      	mov	r3, r1
 800b064:	813b      	strh	r3, [r7, #8]
 800b066:	4613      	mov	r3, r2
 800b068:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b070:	b2db      	uxtb	r3, r3
 800b072:	2b20      	cmp	r3, #32
 800b074:	d176      	bne.n	800b164 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800b076:	6a3b      	ldr	r3, [r7, #32]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d002      	beq.n	800b082 <HAL_I2C_Mem_Read_IT+0x32>
 800b07c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d105      	bne.n	800b08e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b088:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	e06b      	b.n	800b166 <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	699b      	ldr	r3, [r3, #24]
 800b094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b09c:	d101      	bne.n	800b0a2 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800b09e:	2302      	movs	r3, #2
 800b0a0:	e061      	b.n	800b166 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d101      	bne.n	800b0b0 <HAL_I2C_Mem_Read_IT+0x60>
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	e05a      	b.n	800b166 <HAL_I2C_Mem_Read_IT+0x116>
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b0b8:	f7fd fee4 	bl	8008e84 <HAL_GetTick>
 800b0bc:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2222      	movs	r2, #34	; 0x22
 800b0c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2240      	movs	r2, #64	; 0x40
 800b0ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	6a3a      	ldr	r2, [r7, #32]
 800b0d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b0de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	4a23      	ldr	r2, [pc, #140]	; (800b170 <HAL_I2C_Mem_Read_IT+0x120>)
 800b0e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	4a22      	ldr	r2, [pc, #136]	; (800b174 <HAL_I2C_Mem_Read_IT+0x124>)
 800b0ea:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	2bff      	cmp	r3, #255	; 0xff
 800b0f4:	d906      	bls.n	800b104 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	22ff      	movs	r2, #255	; 0xff
 800b0fa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b0fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b100:	617b      	str	r3, [r7, #20]
 800b102:	e007      	b.n	800b114 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b108:	b29a      	uxth	r2, r3
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b10e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b112:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800b114:	88f8      	ldrh	r0, [r7, #6]
 800b116:	893a      	ldrh	r2, [r7, #8]
 800b118:	8979      	ldrh	r1, [r7, #10]
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	9301      	str	r3, [sp, #4]
 800b11e:	2319      	movs	r3, #25
 800b120:	9300      	str	r3, [sp, #0]
 800b122:	4603      	mov	r3, r0
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f000 fce3 	bl	800baf0 <I2C_RequestMemoryRead>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d005      	beq.n	800b13c <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2200      	movs	r2, #0
 800b134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	e014      	b.n	800b166 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b140:	b2da      	uxtb	r2, r3
 800b142:	8979      	ldrh	r1, [r7, #10]
 800b144:	4b0c      	ldr	r3, [pc, #48]	; (800b178 <HAL_I2C_Mem_Read_IT+0x128>)
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f001 faca 	bl	800c6e4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b158:	2102      	movs	r1, #2
 800b15a:	68f8      	ldr	r0, [r7, #12]
 800b15c:	f001 faf0 	bl	800c740 <I2C_Enable_IRQ>

    return HAL_OK;
 800b160:	2300      	movs	r3, #0
 800b162:	e000      	b.n	800b166 <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 800b164:	2302      	movs	r3, #2
  }
}
 800b166:	4618      	mov	r0, r3
 800b168:	3718      	adds	r7, #24
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	ffff0000 	.word	0xffff0000
 800b174:	0800b24d 	.word	0x0800b24d
 800b178:	80002400 	.word	0x80002400

0800b17c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	699b      	ldr	r3, [r3, #24]
 800b18a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d005      	beq.n	800b1a8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a0:	68ba      	ldr	r2, [r7, #8]
 800b1a2:	68f9      	ldr	r1, [r7, #12]
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	4798      	blx	r3
  }
}
 800b1a8:	bf00      	nop
 800b1aa:	3710      	adds	r7, #16
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b1b8:	bf00      	nop
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	70fb      	strb	r3, [r7, #3]
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b1e8:	bf00      	nop
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800b1fc:	bf00      	nop
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b23e:	b2db      	uxtb	r3, r3
}
 800b240:	4618      	mov	r0, r3
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b088      	sub	sp, #32
 800b250:	af02      	add	r7, sp, #8
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b262:	2b01      	cmp	r3, #1
 800b264:	d101      	bne.n	800b26a <I2C_Master_ISR_IT+0x1e>
 800b266:	2302      	movs	r3, #2
 800b268:	e114      	b.n	800b494 <I2C_Master_ISR_IT+0x248>
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2201      	movs	r2, #1
 800b26e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	091b      	lsrs	r3, r3, #4
 800b276:	f003 0301 	and.w	r3, r3, #1
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d013      	beq.n	800b2a6 <I2C_Master_ISR_IT+0x5a>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	091b      	lsrs	r3, r3, #4
 800b282:	f003 0301 	and.w	r3, r3, #1
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00d      	beq.n	800b2a6 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2210      	movs	r2, #16
 800b290:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b296:	f043 0204 	orr.w	r2, r3, #4
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b29e:	68f8      	ldr	r0, [r7, #12]
 800b2a0:	f001 f8bb 	bl	800c41a <I2C_Flush_TXDR>
 800b2a4:	e0e1      	b.n	800b46a <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	089b      	lsrs	r3, r3, #2
 800b2aa:	f003 0301 	and.w	r3, r3, #1
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d023      	beq.n	800b2fa <I2C_Master_ISR_IT+0xae>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	089b      	lsrs	r3, r3, #2
 800b2b6:	f003 0301 	and.w	r3, r3, #1
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d01d      	beq.n	800b2fa <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	f023 0304 	bic.w	r3, r3, #4
 800b2c4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d0:	b2d2      	uxtb	r2, r2
 800b2d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d8:	1c5a      	adds	r2, r3, #1
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	b29a      	uxth	r2, r3
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	3b01      	subs	r3, #1
 800b2f2:	b29a      	uxth	r2, r3
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b2f8:	e0b7      	b.n	800b46a <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	085b      	lsrs	r3, r3, #1
 800b2fe:	f003 0301 	and.w	r3, r3, #1
 800b302:	2b00      	cmp	r3, #0
 800b304:	d01e      	beq.n	800b344 <I2C_Master_ISR_IT+0xf8>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	085b      	lsrs	r3, r3, #1
 800b30a:	f003 0301 	and.w	r3, r3, #1
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d018      	beq.n	800b344 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b316:	781a      	ldrb	r2, [r3, #0]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b322:	1c5a      	adds	r2, r3, #1
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b32c:	3b01      	subs	r3, #1
 800b32e:	b29a      	uxth	r2, r3
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b338:	b29b      	uxth	r3, r3
 800b33a:	3b01      	subs	r3, #1
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b342:	e092      	b.n	800b46a <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	09db      	lsrs	r3, r3, #7
 800b348:	f003 0301 	and.w	r3, r3, #1
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d05d      	beq.n	800b40c <I2C_Master_ISR_IT+0x1c0>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	099b      	lsrs	r3, r3, #6
 800b354:	f003 0301 	and.w	r3, r3, #1
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d057      	beq.n	800b40c <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b360:	b29b      	uxth	r3, r3
 800b362:	2b00      	cmp	r3, #0
 800b364:	d040      	beq.n	800b3e8 <I2C_Master_ISR_IT+0x19c>
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d13c      	bne.n	800b3e8 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	b29b      	uxth	r3, r3
 800b376:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b37a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b380:	b29b      	uxth	r3, r3
 800b382:	2bff      	cmp	r3, #255	; 0xff
 800b384:	d90e      	bls.n	800b3a4 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	22ff      	movs	r2, #255	; 0xff
 800b38a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b390:	b2da      	uxtb	r2, r3
 800b392:	8a79      	ldrh	r1, [r7, #18]
 800b394:	2300      	movs	r3, #0
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f001 f9a1 	bl	800c6e4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b3a2:	e032      	b.n	800b40a <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b3b6:	d00b      	beq.n	800b3d0 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3bc:	b2da      	uxtb	r2, r3
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c2:	8a79      	ldrh	r1, [r7, #18]
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	9000      	str	r0, [sp, #0]
 800b3c8:	68f8      	ldr	r0, [r7, #12]
 800b3ca:	f001 f98b 	bl	800c6e4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b3ce:	e01c      	b.n	800b40a <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3d4:	b2da      	uxtb	r2, r3
 800b3d6:	8a79      	ldrh	r1, [r7, #18]
 800b3d8:	2300      	movs	r3, #0
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f001 f97f 	bl	800c6e4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b3e6:	e010      	b.n	800b40a <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3f6:	d003      	beq.n	800b400 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f000 fc51 	bl	800bca0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b3fe:	e034      	b.n	800b46a <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b400:	2140      	movs	r1, #64	; 0x40
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f000 ff12 	bl	800c22c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b408:	e02f      	b.n	800b46a <I2C_Master_ISR_IT+0x21e>
 800b40a:	e02e      	b.n	800b46a <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	099b      	lsrs	r3, r3, #6
 800b410:	f003 0301 	and.w	r3, r3, #1
 800b414:	2b00      	cmp	r3, #0
 800b416:	d028      	beq.n	800b46a <I2C_Master_ISR_IT+0x21e>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	099b      	lsrs	r3, r3, #6
 800b41c:	f003 0301 	and.w	r3, r3, #1
 800b420:	2b00      	cmp	r3, #0
 800b422:	d022      	beq.n	800b46a <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b428:	b29b      	uxth	r3, r3
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d119      	bne.n	800b462 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b438:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b43c:	d015      	beq.n	800b46a <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b442:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b446:	d108      	bne.n	800b45a <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	685a      	ldr	r2, [r3, #4]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b456:	605a      	str	r2, [r3, #4]
 800b458:	e007      	b.n	800b46a <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b45a:	68f8      	ldr	r0, [r7, #12]
 800b45c:	f000 fc20 	bl	800bca0 <I2C_ITMasterSeqCplt>
 800b460:	e003      	b.n	800b46a <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b462:	2140      	movs	r1, #64	; 0x40
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f000 fee1 	bl	800c22c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	095b      	lsrs	r3, r3, #5
 800b46e:	f003 0301 	and.w	r3, r3, #1
 800b472:	2b00      	cmp	r3, #0
 800b474:	d009      	beq.n	800b48a <I2C_Master_ISR_IT+0x23e>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	095b      	lsrs	r3, r3, #5
 800b47a:	f003 0301 	and.w	r3, r3, #1
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d003      	beq.n	800b48a <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800b482:	6979      	ldr	r1, [r7, #20]
 800b484:	68f8      	ldr	r0, [r7, #12]
 800b486:	f000 fca7 	bl	800bdd8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b492:	2300      	movs	r3, #0
}
 800b494:	4618      	mov	r0, r3
 800b496:	3718      	adds	r7, #24
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b086      	sub	sp, #24
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d101      	bne.n	800b4c0 <I2C_Slave_ISR_IT+0x24>
 800b4bc:	2302      	movs	r3, #2
 800b4be:	e0ec      	b.n	800b69a <I2C_Slave_ISR_IT+0x1fe>
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	095b      	lsrs	r3, r3, #5
 800b4cc:	f003 0301 	and.w	r3, r3, #1
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d009      	beq.n	800b4e8 <I2C_Slave_ISR_IT+0x4c>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	095b      	lsrs	r3, r3, #5
 800b4d8:	f003 0301 	and.w	r3, r3, #1
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d003      	beq.n	800b4e8 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800b4e0:	6939      	ldr	r1, [r7, #16]
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f000 fd42 	bl	800bf6c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	091b      	lsrs	r3, r3, #4
 800b4ec:	f003 0301 	and.w	r3, r3, #1
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d04d      	beq.n	800b590 <I2C_Slave_ISR_IT+0xf4>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	091b      	lsrs	r3, r3, #4
 800b4f8:	f003 0301 	and.w	r3, r3, #1
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d047      	beq.n	800b590 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b504:	b29b      	uxth	r3, r3
 800b506:	2b00      	cmp	r3, #0
 800b508:	d128      	bne.n	800b55c <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b510:	b2db      	uxtb	r3, r3
 800b512:	2b28      	cmp	r3, #40	; 0x28
 800b514:	d108      	bne.n	800b528 <I2C_Slave_ISR_IT+0x8c>
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b51c:	d104      	bne.n	800b528 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b51e:	6939      	ldr	r1, [r7, #16]
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f000 fe2d 	bl	800c180 <I2C_ITListenCplt>
 800b526:	e032      	b.n	800b58e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	2b29      	cmp	r3, #41	; 0x29
 800b532:	d10e      	bne.n	800b552 <I2C_Slave_ISR_IT+0xb6>
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b53a:	d00a      	beq.n	800b552 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2210      	movs	r2, #16
 800b542:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f000 ff68 	bl	800c41a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	f000 fbe5 	bl	800bd1a <I2C_ITSlaveSeqCplt>
 800b550:	e01d      	b.n	800b58e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2210      	movs	r2, #16
 800b558:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800b55a:	e096      	b.n	800b68a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2210      	movs	r2, #16
 800b562:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b568:	f043 0204 	orr.w	r2, r3, #4
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d004      	beq.n	800b580 <I2C_Slave_ISR_IT+0xe4>
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b57c:	f040 8085 	bne.w	800b68a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b584:	4619      	mov	r1, r3
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	f000 fe50 	bl	800c22c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b58c:	e07d      	b.n	800b68a <I2C_Slave_ISR_IT+0x1ee>
 800b58e:	e07c      	b.n	800b68a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	089b      	lsrs	r3, r3, #2
 800b594:	f003 0301 	and.w	r3, r3, #1
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d030      	beq.n	800b5fe <I2C_Slave_ISR_IT+0x162>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	089b      	lsrs	r3, r3, #2
 800b5a0:	f003 0301 	and.w	r3, r3, #1
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d02a      	beq.n	800b5fe <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d018      	beq.n	800b5e4 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5bc:	b2d2      	uxtb	r2, r2
 800b5be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c4:	1c5a      	adds	r2, r3, #1
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	b29a      	uxth	r2, r3
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d14f      	bne.n	800b68e <I2C_Slave_ISR_IT+0x1f2>
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b5f4:	d04b      	beq.n	800b68e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	f000 fb8f 	bl	800bd1a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800b5fc:	e047      	b.n	800b68e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	08db      	lsrs	r3, r3, #3
 800b602:	f003 0301 	and.w	r3, r3, #1
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00a      	beq.n	800b620 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	08db      	lsrs	r3, r3, #3
 800b60e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b612:	2b00      	cmp	r3, #0
 800b614:	d004      	beq.n	800b620 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800b616:	6939      	ldr	r1, [r7, #16]
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f000 fabd 	bl	800bb98 <I2C_ITAddrCplt>
 800b61e:	e037      	b.n	800b690 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	085b      	lsrs	r3, r3, #1
 800b624:	f003 0301 	and.w	r3, r3, #1
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d031      	beq.n	800b690 <I2C_Slave_ISR_IT+0x1f4>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	085b      	lsrs	r3, r3, #1
 800b630:	f003 0301 	and.w	r3, r3, #1
 800b634:	2b00      	cmp	r3, #0
 800b636:	d02b      	beq.n	800b690 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d018      	beq.n	800b674 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b646:	781a      	ldrb	r2, [r3, #0]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b652:	1c5a      	adds	r2, r3, #1
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	3b01      	subs	r3, #1
 800b660:	b29a      	uxth	r2, r3
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b66a:	3b01      	subs	r3, #1
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	851a      	strh	r2, [r3, #40]	; 0x28
 800b672:	e00d      	b.n	800b690 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b67a:	d002      	beq.n	800b682 <I2C_Slave_ISR_IT+0x1e6>
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d106      	bne.n	800b690 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	f000 fb49 	bl	800bd1a <I2C_ITSlaveSeqCplt>
 800b688:	e002      	b.n	800b690 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800b68a:	bf00      	nop
 800b68c:	e000      	b.n	800b690 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800b68e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2200      	movs	r2, #0
 800b694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b698:	2300      	movs	r3, #0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3718      	adds	r7, #24
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b088      	sub	sp, #32
 800b6a6:	af02      	add	r7, sp, #8
 800b6a8:	60f8      	str	r0, [r7, #12]
 800b6aa:	60b9      	str	r1, [r7, #8]
 800b6ac:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d101      	bne.n	800b6bc <I2C_Master_ISR_DMA+0x1a>
 800b6b8:	2302      	movs	r3, #2
 800b6ba:	e0e1      	b.n	800b880 <I2C_Master_ISR_DMA+0x1de>
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	091b      	lsrs	r3, r3, #4
 800b6c8:	f003 0301 	and.w	r3, r3, #1
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d017      	beq.n	800b700 <I2C_Master_ISR_DMA+0x5e>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	091b      	lsrs	r3, r3, #4
 800b6d4:	f003 0301 	and.w	r3, r3, #1
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d011      	beq.n	800b700 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2210      	movs	r2, #16
 800b6e2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6e8:	f043 0204 	orr.w	r2, r3, #4
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b6f0:	2120      	movs	r1, #32
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f001 f824 	bl	800c740 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f000 fe8e 	bl	800c41a <I2C_Flush_TXDR>
 800b6fe:	e0ba      	b.n	800b876 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	09db      	lsrs	r3, r3, #7
 800b704:	f003 0301 	and.w	r3, r3, #1
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d072      	beq.n	800b7f2 <I2C_Master_ISR_DMA+0x150>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	099b      	lsrs	r3, r3, #6
 800b710:	f003 0301 	and.w	r3, r3, #1
 800b714:	2b00      	cmp	r3, #0
 800b716:	d06c      	beq.n	800b7f2 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b726:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d04e      	beq.n	800b7d0 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	b29b      	uxth	r3, r3
 800b73a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b73e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b744:	b29b      	uxth	r3, r3
 800b746:	2bff      	cmp	r3, #255	; 0xff
 800b748:	d906      	bls.n	800b758 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	22ff      	movs	r2, #255	; 0xff
 800b74e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800b750:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b754:	617b      	str	r3, [r7, #20]
 800b756:	e010      	b.n	800b77a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b75c:	b29a      	uxth	r2, r3
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b766:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b76a:	d003      	beq.n	800b774 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b770:	617b      	str	r3, [r7, #20]
 800b772:	e002      	b.n	800b77a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800b774:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b778:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b77e:	b2da      	uxtb	r2, r3
 800b780:	8a79      	ldrh	r1, [r7, #18]
 800b782:	2300      	movs	r3, #0
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f000 ffab 	bl	800c6e4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b792:	b29a      	uxth	r2, r3
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b798:	1ad3      	subs	r3, r2, r3
 800b79a:	b29a      	uxth	r2, r3
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	2b22      	cmp	r3, #34	; 0x22
 800b7aa:	d108      	bne.n	800b7be <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b7ba:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b7bc:	e05b      	b.n	800b876 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b7cc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b7ce:	e052      	b.n	800b876 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7de:	d003      	beq.n	800b7e8 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f000 fa5d 	bl	800bca0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800b7e6:	e046      	b.n	800b876 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b7e8:	2140      	movs	r1, #64	; 0x40
 800b7ea:	68f8      	ldr	r0, [r7, #12]
 800b7ec:	f000 fd1e 	bl	800c22c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b7f0:	e041      	b.n	800b876 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	099b      	lsrs	r3, r3, #6
 800b7f6:	f003 0301 	and.w	r3, r3, #1
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d029      	beq.n	800b852 <I2C_Master_ISR_DMA+0x1b0>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	099b      	lsrs	r3, r3, #6
 800b802:	f003 0301 	and.w	r3, r3, #1
 800b806:	2b00      	cmp	r3, #0
 800b808:	d023      	beq.n	800b852 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b80e:	b29b      	uxth	r3, r3
 800b810:	2b00      	cmp	r3, #0
 800b812:	d119      	bne.n	800b848 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b81e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b822:	d027      	beq.n	800b874 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b828:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b82c:	d108      	bne.n	800b840 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b83c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800b83e:	e019      	b.n	800b874 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f000 fa2d 	bl	800bca0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800b846:	e015      	b.n	800b874 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b848:	2140      	movs	r1, #64	; 0x40
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	f000 fcee 	bl	800c22c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b850:	e010      	b.n	800b874 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	095b      	lsrs	r3, r3, #5
 800b856:	f003 0301 	and.w	r3, r3, #1
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00b      	beq.n	800b876 <I2C_Master_ISR_DMA+0x1d4>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	095b      	lsrs	r3, r3, #5
 800b862:	f003 0301 	and.w	r3, r3, #1
 800b866:	2b00      	cmp	r3, #0
 800b868:	d005      	beq.n	800b876 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b86a:	68b9      	ldr	r1, [r7, #8]
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	f000 fab3 	bl	800bdd8 <I2C_ITMasterCplt>
 800b872:	e000      	b.n	800b876 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800b874:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2200      	movs	r2, #0
 800b87a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3718      	adds	r7, #24
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b088      	sub	sp, #32
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b898:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800b89a:	2300      	movs	r3, #0
 800b89c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d101      	bne.n	800b8ac <I2C_Slave_ISR_DMA+0x24>
 800b8a8:	2302      	movs	r3, #2
 800b8aa:	e0c9      	b.n	800ba40 <I2C_Slave_ISR_DMA+0x1b8>
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	095b      	lsrs	r3, r3, #5
 800b8b8:	f003 0301 	and.w	r3, r3, #1
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d009      	beq.n	800b8d4 <I2C_Slave_ISR_DMA+0x4c>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	095b      	lsrs	r3, r3, #5
 800b8c4:	f003 0301 	and.w	r3, r3, #1
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d003      	beq.n	800b8d4 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800b8cc:	68b9      	ldr	r1, [r7, #8]
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	f000 fb4c 	bl	800bf6c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	091b      	lsrs	r3, r3, #4
 800b8d8:	f003 0301 	and.w	r3, r3, #1
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	f000 809a 	beq.w	800ba16 <I2C_Slave_ISR_DMA+0x18e>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	091b      	lsrs	r3, r3, #4
 800b8e6:	f003 0301 	and.w	r3, r3, #1
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	f000 8093 	beq.w	800ba16 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	0b9b      	lsrs	r3, r3, #14
 800b8f4:	f003 0301 	and.w	r3, r3, #1
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d105      	bne.n	800b908 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	0bdb      	lsrs	r3, r3, #15
 800b900:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b904:	2b00      	cmp	r3, #0
 800b906:	d07f      	beq.n	800ba08 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00d      	beq.n	800b92c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	0bdb      	lsrs	r3, r3, #15
 800b914:	f003 0301 	and.w	r3, r3, #1
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d007      	beq.n	800b92c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d101      	bne.n	800b92c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800b928:	2301      	movs	r3, #1
 800b92a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00d      	beq.n	800b950 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	0b9b      	lsrs	r3, r3, #14
 800b938:	f003 0301 	and.w	r3, r3, #1
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d007      	beq.n	800b950 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d101      	bne.n	800b950 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800b94c:	2301      	movs	r3, #1
 800b94e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d128      	bne.n	800b9a8 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	2b28      	cmp	r3, #40	; 0x28
 800b960:	d108      	bne.n	800b974 <I2C_Slave_ISR_DMA+0xec>
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b968:	d104      	bne.n	800b974 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800b96a:	68b9      	ldr	r1, [r7, #8]
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f000 fc07 	bl	800c180 <I2C_ITListenCplt>
 800b972:	e048      	b.n	800ba06 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	2b29      	cmp	r3, #41	; 0x29
 800b97e:	d10e      	bne.n	800b99e <I2C_Slave_ISR_DMA+0x116>
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b986:	d00a      	beq.n	800b99e <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2210      	movs	r2, #16
 800b98e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f000 fd42 	bl	800c41a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f000 f9bf 	bl	800bd1a <I2C_ITSlaveSeqCplt>
 800b99c:	e033      	b.n	800ba06 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2210      	movs	r2, #16
 800b9a4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800b9a6:	e034      	b.n	800ba12 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2210      	movs	r2, #16
 800b9ae:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9b4:	f043 0204 	orr.w	r2, r3, #4
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9c2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d003      	beq.n	800b9d2 <I2C_Slave_ISR_DMA+0x14a>
 800b9ca:	69bb      	ldr	r3, [r7, #24]
 800b9cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b9d0:	d11f      	bne.n	800ba12 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b9d2:	7dfb      	ldrb	r3, [r7, #23]
 800b9d4:	2b21      	cmp	r3, #33	; 0x21
 800b9d6:	d002      	beq.n	800b9de <I2C_Slave_ISR_DMA+0x156>
 800b9d8:	7dfb      	ldrb	r3, [r7, #23]
 800b9da:	2b29      	cmp	r3, #41	; 0x29
 800b9dc:	d103      	bne.n	800b9e6 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2221      	movs	r2, #33	; 0x21
 800b9e2:	631a      	str	r2, [r3, #48]	; 0x30
 800b9e4:	e008      	b.n	800b9f8 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b9e6:	7dfb      	ldrb	r3, [r7, #23]
 800b9e8:	2b22      	cmp	r3, #34	; 0x22
 800b9ea:	d002      	beq.n	800b9f2 <I2C_Slave_ISR_DMA+0x16a>
 800b9ec:	7dfb      	ldrb	r3, [r7, #23]
 800b9ee:	2b2a      	cmp	r3, #42	; 0x2a
 800b9f0:	d102      	bne.n	800b9f8 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2222      	movs	r2, #34	; 0x22
 800b9f6:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f000 fc14 	bl	800c22c <I2C_ITError>
      if (treatdmanack == 1U)
 800ba04:	e005      	b.n	800ba12 <I2C_Slave_ISR_DMA+0x18a>
 800ba06:	e004      	b.n	800ba12 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2210      	movs	r2, #16
 800ba0e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ba10:	e011      	b.n	800ba36 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800ba12:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ba14:	e00f      	b.n	800ba36 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	08db      	lsrs	r3, r3, #3
 800ba1a:	f003 0301 	and.w	r3, r3, #1
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d009      	beq.n	800ba36 <I2C_Slave_ISR_DMA+0x1ae>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	08db      	lsrs	r3, r3, #3
 800ba26:	f003 0301 	and.w	r3, r3, #1
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d003      	beq.n	800ba36 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800ba2e:	68b9      	ldr	r1, [r7, #8]
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	f000 f8b1 	bl	800bb98 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3720      	adds	r7, #32
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b086      	sub	sp, #24
 800ba4c:	af02      	add	r7, sp, #8
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	4608      	mov	r0, r1
 800ba52:	4611      	mov	r1, r2
 800ba54:	461a      	mov	r2, r3
 800ba56:	4603      	mov	r3, r0
 800ba58:	817b      	strh	r3, [r7, #10]
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	813b      	strh	r3, [r7, #8]
 800ba5e:	4613      	mov	r3, r2
 800ba60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ba62:	88fb      	ldrh	r3, [r7, #6]
 800ba64:	b2da      	uxtb	r2, r3
 800ba66:	8979      	ldrh	r1, [r7, #10]
 800ba68:	4b20      	ldr	r3, [pc, #128]	; (800baec <I2C_RequestMemoryWrite+0xa4>)
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f000 fe37 	bl	800c6e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba76:	69fa      	ldr	r2, [r7, #28]
 800ba78:	69b9      	ldr	r1, [r7, #24]
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	f000 fd4f 	bl	800c51e <I2C_WaitOnTXISFlagUntilTimeout>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ba86:	2301      	movs	r3, #1
 800ba88:	e02c      	b.n	800bae4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ba8a:	88fb      	ldrh	r3, [r7, #6]
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d105      	bne.n	800ba9c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ba90:	893b      	ldrh	r3, [r7, #8]
 800ba92:	b2da      	uxtb	r2, r3
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	629a      	str	r2, [r3, #40]	; 0x28
 800ba9a:	e015      	b.n	800bac8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ba9c:	893b      	ldrh	r3, [r7, #8]
 800ba9e:	0a1b      	lsrs	r3, r3, #8
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	b2da      	uxtb	r2, r3
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800baaa:	69fa      	ldr	r2, [r7, #28]
 800baac:	69b9      	ldr	r1, [r7, #24]
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	f000 fd35 	bl	800c51e <I2C_WaitOnTXISFlagUntilTimeout>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800baba:	2301      	movs	r3, #1
 800babc:	e012      	b.n	800bae4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800babe:	893b      	ldrh	r3, [r7, #8]
 800bac0:	b2da      	uxtb	r2, r3
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bac8:	69fb      	ldr	r3, [r7, #28]
 800baca:	9300      	str	r3, [sp, #0]
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	2200      	movs	r2, #0
 800bad0:	2180      	movs	r1, #128	; 0x80
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f000 fce3 	bl	800c49e <I2C_WaitOnFlagUntilTimeout>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d001      	beq.n	800bae2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	e000      	b.n	800bae4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	80002000 	.word	0x80002000

0800baf0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b086      	sub	sp, #24
 800baf4:	af02      	add	r7, sp, #8
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	4608      	mov	r0, r1
 800bafa:	4611      	mov	r1, r2
 800bafc:	461a      	mov	r2, r3
 800bafe:	4603      	mov	r3, r0
 800bb00:	817b      	strh	r3, [r7, #10]
 800bb02:	460b      	mov	r3, r1
 800bb04:	813b      	strh	r3, [r7, #8]
 800bb06:	4613      	mov	r3, r2
 800bb08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bb0a:	88fb      	ldrh	r3, [r7, #6]
 800bb0c:	b2da      	uxtb	r2, r3
 800bb0e:	8979      	ldrh	r1, [r7, #10]
 800bb10:	4b20      	ldr	r3, [pc, #128]	; (800bb94 <I2C_RequestMemoryRead+0xa4>)
 800bb12:	9300      	str	r3, [sp, #0]
 800bb14:	2300      	movs	r3, #0
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	f000 fde4 	bl	800c6e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb1c:	69fa      	ldr	r2, [r7, #28]
 800bb1e:	69b9      	ldr	r1, [r7, #24]
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f000 fcfc 	bl	800c51e <I2C_WaitOnTXISFlagUntilTimeout>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d001      	beq.n	800bb30 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	e02c      	b.n	800bb8a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bb30:	88fb      	ldrh	r3, [r7, #6]
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d105      	bne.n	800bb42 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bb36:	893b      	ldrh	r3, [r7, #8]
 800bb38:	b2da      	uxtb	r2, r3
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	629a      	str	r2, [r3, #40]	; 0x28
 800bb40:	e015      	b.n	800bb6e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bb42:	893b      	ldrh	r3, [r7, #8]
 800bb44:	0a1b      	lsrs	r3, r3, #8
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	b2da      	uxtb	r2, r3
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb50:	69fa      	ldr	r2, [r7, #28]
 800bb52:	69b9      	ldr	r1, [r7, #24]
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f000 fce2 	bl	800c51e <I2C_WaitOnTXISFlagUntilTimeout>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d001      	beq.n	800bb64 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e012      	b.n	800bb8a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bb64:	893b      	ldrh	r3, [r7, #8]
 800bb66:	b2da      	uxtb	r2, r3
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800bb6e:	69fb      	ldr	r3, [r7, #28]
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	2200      	movs	r2, #0
 800bb76:	2140      	movs	r1, #64	; 0x40
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f000 fc90 	bl	800c49e <I2C_WaitOnFlagUntilTimeout>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d001      	beq.n	800bb88 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800bb84:	2301      	movs	r3, #1
 800bb86:	e000      	b.n	800bb8a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800bb88:	2300      	movs	r3, #0
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3710      	adds	r7, #16
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	80002000 	.word	0x80002000

0800bb98 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bbae:	2b28      	cmp	r3, #40	; 0x28
 800bbb0:	d16a      	bne.n	800bc88 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	699b      	ldr	r3, [r3, #24]
 800bbb8:	0c1b      	lsrs	r3, r3, #16
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	f003 0301 	and.w	r3, r3, #1
 800bbc0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	699b      	ldr	r3, [r3, #24]
 800bbc8:	0c1b      	lsrs	r3, r3, #16
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800bbd0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbde:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800bbec:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	2b02      	cmp	r3, #2
 800bbf4:	d138      	bne.n	800bc68 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800bbf6:	897b      	ldrh	r3, [r7, #10]
 800bbf8:	09db      	lsrs	r3, r3, #7
 800bbfa:	b29a      	uxth	r2, r3
 800bbfc:	89bb      	ldrh	r3, [r7, #12]
 800bbfe:	4053      	eors	r3, r2
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	f003 0306 	and.w	r3, r3, #6
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d11c      	bne.n	800bc44 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800bc0a:	897b      	ldrh	r3, [r7, #10]
 800bc0c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc12:	1c5a      	adds	r2, r3, #1
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc1c:	2b02      	cmp	r3, #2
 800bc1e:	d13b      	bne.n	800bc98 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	2208      	movs	r2, #8
 800bc2c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bc36:	89ba      	ldrh	r2, [r7, #12]
 800bc38:	7bfb      	ldrb	r3, [r7, #15]
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f7ff facb 	bl	800b1d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800bc42:	e029      	b.n	800bc98 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800bc44:	893b      	ldrh	r3, [r7, #8]
 800bc46:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800bc48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 fddb 	bl	800c808 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2200      	movs	r2, #0
 800bc56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bc5a:	89ba      	ldrh	r2, [r7, #12]
 800bc5c:	7bfb      	ldrb	r3, [r7, #15]
 800bc5e:	4619      	mov	r1, r3
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f7ff fab9 	bl	800b1d8 <HAL_I2C_AddrCallback>
}
 800bc66:	e017      	b.n	800bc98 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800bc68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f000 fdcb 	bl	800c808 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2200      	movs	r2, #0
 800bc76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bc7a:	89ba      	ldrh	r2, [r7, #12]
 800bc7c:	7bfb      	ldrb	r3, [r7, #15]
 800bc7e:	4619      	mov	r1, r3
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f7ff faa9 	bl	800b1d8 <HAL_I2C_AddrCallback>
}
 800bc86:	e007      	b.n	800bc98 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2208      	movs	r2, #8
 800bc8e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800bc98:	bf00      	nop
 800bc9a:	3710      	adds	r7, #16
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b21      	cmp	r3, #33	; 0x21
 800bcba:	d115      	bne.n	800bce8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2220      	movs	r2, #32
 800bcc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2211      	movs	r2, #17
 800bcc8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2200      	movs	r2, #0
 800bcce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bcd0:	2101      	movs	r1, #1
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 fd98 	bl	800c808 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f7fb febd 	bl	8007a60 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bce6:	e014      	b.n	800bd12 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2220      	movs	r2, #32
 800bcec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2212      	movs	r2, #18
 800bcf4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bcfc:	2102      	movs	r1, #2
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 fd82 	bl	800c808 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f7fb fe89 	bl	8007a24 <HAL_I2C_MasterRxCpltCallback>
}
 800bd12:	bf00      	nop
 800bd14:	3708      	adds	r7, #8
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b084      	sub	sp, #16
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	0b9b      	lsrs	r3, r3, #14
 800bd36:	f003 0301 	and.w	r3, r3, #1
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d008      	beq.n	800bd50 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bd4c:	601a      	str	r2, [r3, #0]
 800bd4e:	e00d      	b.n	800bd6c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	0bdb      	lsrs	r3, r3, #15
 800bd54:	f003 0301 	and.w	r3, r3, #1
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d007      	beq.n	800bd6c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bd6a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	2b29      	cmp	r3, #41	; 0x29
 800bd76:	d112      	bne.n	800bd9e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2228      	movs	r2, #40	; 0x28
 800bd7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2221      	movs	r2, #33	; 0x21
 800bd84:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bd86:	2101      	movs	r1, #1
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 fd3d 	bl	800c808 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2200      	movs	r2, #0
 800bd92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f7ff fa0a 	bl	800b1b0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bd9c:	e017      	b.n	800bdce <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	2b2a      	cmp	r3, #42	; 0x2a
 800bda8:	d111      	bne.n	800bdce <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2228      	movs	r2, #40	; 0x28
 800bdae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2222      	movs	r2, #34	; 0x22
 800bdb6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bdb8:	2102      	movs	r1, #2
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 fd24 	bl	800c808 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f7ff f9fb 	bl	800b1c4 <HAL_I2C_SlaveRxCpltCallback>
}
 800bdce:	bf00      	nop
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
	...

0800bdd8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b086      	sub	sp, #24
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	2220      	movs	r2, #32
 800bdec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	2b21      	cmp	r3, #33	; 0x21
 800bdf8:	d107      	bne.n	800be0a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bdfa:	2101      	movs	r1, #1
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 fd03 	bl	800c808 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2211      	movs	r2, #17
 800be06:	631a      	str	r2, [r3, #48]	; 0x30
 800be08:	e00c      	b.n	800be24 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be10:	b2db      	uxtb	r3, r3
 800be12:	2b22      	cmp	r3, #34	; 0x22
 800be14:	d106      	bne.n	800be24 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800be16:	2102      	movs	r1, #2
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 fcf5 	bl	800c808 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2212      	movs	r2, #18
 800be22:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	6859      	ldr	r1, [r3, #4]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	4b4d      	ldr	r3, [pc, #308]	; (800bf64 <I2C_ITMasterCplt+0x18c>)
 800be30:	400b      	ands	r3, r1
 800be32:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a4a      	ldr	r2, [pc, #296]	; (800bf68 <I2C_ITMasterCplt+0x190>)
 800be3e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	091b      	lsrs	r3, r3, #4
 800be44:	f003 0301 	and.w	r3, r3, #1
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d009      	beq.n	800be60 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2210      	movs	r2, #16
 800be52:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be58:	f043 0204 	orr.w	r2, r3, #4
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be66:	b2db      	uxtb	r3, r3
 800be68:	2b60      	cmp	r3, #96	; 0x60
 800be6a:	d10b      	bne.n	800be84 <I2C_ITMasterCplt+0xac>
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	089b      	lsrs	r3, r3, #2
 800be70:	f003 0301 	and.w	r3, r3, #1
 800be74:	2b00      	cmp	r3, #0
 800be76:	d005      	beq.n	800be84 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800be82:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 fac8 	bl	800c41a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be8e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be96:	b2db      	uxtb	r3, r3
 800be98:	2b60      	cmp	r3, #96	; 0x60
 800be9a:	d002      	beq.n	800bea2 <I2C_ITMasterCplt+0xca>
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d006      	beq.n	800beb0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bea6:	4619      	mov	r1, r3
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 f9bf 	bl	800c22c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800beae:	e054      	b.n	800bf5a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	2b21      	cmp	r3, #33	; 0x21
 800beba:	d124      	bne.n	800bf06 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2220      	movs	r2, #32
 800bec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	2b40      	cmp	r3, #64	; 0x40
 800bed4:	d10b      	bne.n	800beee <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2200      	movs	r2, #0
 800beda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2200      	movs	r2, #0
 800bee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f7fb fd8a 	bl	8007a00 <HAL_I2C_MemTxCpltCallback>
}
 800beec:	e035      	b.n	800bf5a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2200      	movs	r2, #0
 800befa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f7fb fdae 	bl	8007a60 <HAL_I2C_MasterTxCpltCallback>
}
 800bf04:	e029      	b.n	800bf5a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	2b22      	cmp	r3, #34	; 0x22
 800bf10:	d123      	bne.n	800bf5a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2220      	movs	r2, #32
 800bf16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	2b40      	cmp	r3, #64	; 0x40
 800bf2a:	d10b      	bne.n	800bf44 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f7fb fd4d 	bl	80079dc <HAL_I2C_MemRxCpltCallback>
}
 800bf42:	e00a      	b.n	800bf5a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f7fb fd65 	bl	8007a24 <HAL_I2C_MasterRxCpltCallback>
}
 800bf5a:	bf00      	nop
 800bf5c:	3718      	adds	r7, #24
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	fe00e800 	.word	0xfe00e800
 800bf68:	ffff0000 	.word	0xffff0000

0800bf6c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b086      	sub	sp, #24
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf88:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	2220      	movs	r2, #32
 800bf90:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bf92:	7bfb      	ldrb	r3, [r7, #15]
 800bf94:	2b21      	cmp	r3, #33	; 0x21
 800bf96:	d002      	beq.n	800bf9e <I2C_ITSlaveCplt+0x32>
 800bf98:	7bfb      	ldrb	r3, [r7, #15]
 800bf9a:	2b29      	cmp	r3, #41	; 0x29
 800bf9c:	d108      	bne.n	800bfb0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800bf9e:	f248 0101 	movw	r1, #32769	; 0x8001
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 fc30 	bl	800c808 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2221      	movs	r2, #33	; 0x21
 800bfac:	631a      	str	r2, [r3, #48]	; 0x30
 800bfae:	e00d      	b.n	800bfcc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800bfb0:	7bfb      	ldrb	r3, [r7, #15]
 800bfb2:	2b22      	cmp	r3, #34	; 0x22
 800bfb4:	d002      	beq.n	800bfbc <I2C_ITSlaveCplt+0x50>
 800bfb6:	7bfb      	ldrb	r3, [r7, #15]
 800bfb8:	2b2a      	cmp	r3, #42	; 0x2a
 800bfba:	d107      	bne.n	800bfcc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800bfbc:	f248 0102 	movw	r1, #32770	; 0x8002
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 fc21 	bl	800c808 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2222      	movs	r2, #34	; 0x22
 800bfca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	685a      	ldr	r2, [r3, #4]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bfda:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	6859      	ldr	r1, [r3, #4]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	4b64      	ldr	r3, [pc, #400]	; (800c178 <I2C_ITSlaveCplt+0x20c>)
 800bfe8:	400b      	ands	r3, r1
 800bfea:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 fa14 	bl	800c41a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	0b9b      	lsrs	r3, r3, #14
 800bff6:	f003 0301 	and.w	r3, r3, #1
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d013      	beq.n	800c026 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c00c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c012:	2b00      	cmp	r3, #0
 800c014:	d020      	beq.n	800c058 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	b29a      	uxth	r2, r3
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c024:	e018      	b.n	800c058 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	0bdb      	lsrs	r3, r3, #15
 800c02a:	f003 0301 	and.w	r3, r3, #1
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d012      	beq.n	800c058 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c040:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c046:	2b00      	cmp	r3, #0
 800c048:	d006      	beq.n	800c058 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	b29a      	uxth	r2, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	089b      	lsrs	r3, r3, #2
 800c05c:	f003 0301 	and.w	r3, r3, #1
 800c060:	2b00      	cmp	r3, #0
 800c062:	d020      	beq.n	800c0a6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	f023 0304 	bic.w	r3, r3, #4
 800c06a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c076:	b2d2      	uxtb	r2, r2
 800c078:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07e:	1c5a      	adds	r2, r3, #1
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00c      	beq.n	800c0a6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c090:	3b01      	subs	r3, #1
 800c092:	b29a      	uxth	r2, r3
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	b29a      	uxth	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d005      	beq.n	800c0bc <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0b4:	f043 0204 	orr.w	r2, r3, #4
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d010      	beq.n	800c0f4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 f8a7 	bl	800c22c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	2b28      	cmp	r3, #40	; 0x28
 800c0e8:	d141      	bne.n	800c16e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800c0ea:	6979      	ldr	r1, [r7, #20]
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 f847 	bl	800c180 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c0f2:	e03c      	b.n	800c16e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c0fc:	d014      	beq.n	800c128 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7ff fe0b 	bl	800bd1a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	4a1d      	ldr	r2, [pc, #116]	; (800c17c <I2C_ITSlaveCplt+0x210>)
 800c108:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2220      	movs	r2, #32
 800c10e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2200      	movs	r2, #0
 800c116:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f7ff f867 	bl	800b1f4 <HAL_I2C_ListenCpltCallback>
}
 800c126:	e022      	b.n	800c16e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	2b22      	cmp	r3, #34	; 0x22
 800c132:	d10e      	bne.n	800c152 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2220      	movs	r2, #32
 800c138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2200      	movs	r2, #0
 800c146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f7ff f83a 	bl	800b1c4 <HAL_I2C_SlaveRxCpltCallback>
}
 800c150:	e00d      	b.n	800c16e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2220      	movs	r2, #32
 800c156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f7ff f821 	bl	800b1b0 <HAL_I2C_SlaveTxCpltCallback>
}
 800c16e:	bf00      	nop
 800c170:	3718      	adds	r7, #24
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	fe00e800 	.word	0xfe00e800
 800c17c:	ffff0000 	.word	0xffff0000

0800c180 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4a26      	ldr	r2, [pc, #152]	; (800c228 <I2C_ITListenCplt+0xa8>)
 800c18e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2200      	movs	r2, #0
 800c194:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2220      	movs	r2, #32
 800c19a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	089b      	lsrs	r3, r3, #2
 800c1b0:	f003 0301 	and.w	r3, r3, #1
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d022      	beq.n	800c1fe <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c2:	b2d2      	uxtb	r2, r2
 800c1c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ca:	1c5a      	adds	r2, r3, #1
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d012      	beq.n	800c1fe <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	b29a      	uxth	r2, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	3b01      	subs	r3, #1
 800c1ec:	b29a      	uxth	r2, r3
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1f6:	f043 0204 	orr.w	r2, r3, #4
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c1fe:	f248 0103 	movw	r1, #32771	; 0x8003
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 fb00 	bl	800c808 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2210      	movs	r2, #16
 800c20e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2200      	movs	r2, #0
 800c214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7fe ffeb 	bl	800b1f4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800c21e:	bf00      	nop
 800c220:	3708      	adds	r7, #8
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	ffff0000 	.word	0xffff0000

0800c22c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c23c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2200      	movs	r2, #0
 800c242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	4a5d      	ldr	r2, [pc, #372]	; (800c3c0 <I2C_ITError+0x194>)
 800c24a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	431a      	orrs	r2, r3
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800c25e:	7bfb      	ldrb	r3, [r7, #15]
 800c260:	2b28      	cmp	r3, #40	; 0x28
 800c262:	d005      	beq.n	800c270 <I2C_ITError+0x44>
 800c264:	7bfb      	ldrb	r3, [r7, #15]
 800c266:	2b29      	cmp	r3, #41	; 0x29
 800c268:	d002      	beq.n	800c270 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
 800c26c:	2b2a      	cmp	r3, #42	; 0x2a
 800c26e:	d10b      	bne.n	800c288 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c270:	2103      	movs	r1, #3
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 fac8 	bl	800c808 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2228      	movs	r2, #40	; 0x28
 800c27c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	4a50      	ldr	r2, [pc, #320]	; (800c3c4 <I2C_ITError+0x198>)
 800c284:	635a      	str	r2, [r3, #52]	; 0x34
 800c286:	e011      	b.n	800c2ac <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c288:	f248 0103 	movw	r1, #32771	; 0x8003
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 fabb 	bl	800c808 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	2b60      	cmp	r3, #96	; 0x60
 800c29c:	d003      	beq.n	800c2a6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2220      	movs	r2, #32
 800c2a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2b0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d039      	beq.n	800c32e <I2C_ITError+0x102>
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	2b11      	cmp	r3, #17
 800c2be:	d002      	beq.n	800c2c6 <I2C_ITError+0x9a>
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	2b21      	cmp	r3, #33	; 0x21
 800c2c4:	d133      	bne.n	800c32e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2d4:	d107      	bne.n	800c2e6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c2e4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7fe f8be 	bl	800a46c <HAL_DMA_GetState>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	d017      	beq.n	800c326 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2fa:	4a33      	ldr	r2, [pc, #204]	; (800c3c8 <I2C_ITError+0x19c>)
 800c2fc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7fd ff02 	bl	800a114 <HAL_DMA_Abort_IT>
 800c310:	4603      	mov	r3, r0
 800c312:	2b00      	cmp	r3, #0
 800c314:	d04d      	beq.n	800c3b2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c31a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c320:	4610      	mov	r0, r2
 800c322:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c324:	e045      	b.n	800c3b2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f850 	bl	800c3cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c32c:	e041      	b.n	800c3b2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c332:	2b00      	cmp	r3, #0
 800c334:	d039      	beq.n	800c3aa <I2C_ITError+0x17e>
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	2b12      	cmp	r3, #18
 800c33a:	d002      	beq.n	800c342 <I2C_ITError+0x116>
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	2b22      	cmp	r3, #34	; 0x22
 800c340:	d133      	bne.n	800c3aa <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c34c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c350:	d107      	bne.n	800c362 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c360:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c366:	4618      	mov	r0, r3
 800c368:	f7fe f880 	bl	800a46c <HAL_DMA_GetState>
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d017      	beq.n	800c3a2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c376:	4a14      	ldr	r2, [pc, #80]	; (800c3c8 <I2C_ITError+0x19c>)
 800c378:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2200      	movs	r2, #0
 800c37e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c386:	4618      	mov	r0, r3
 800c388:	f7fd fec4 	bl	800a114 <HAL_DMA_Abort_IT>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d011      	beq.n	800c3b6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c39c:	4610      	mov	r0, r2
 800c39e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c3a0:	e009      	b.n	800c3b6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 f812 	bl	800c3cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c3a8:	e005      	b.n	800c3b6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 f80e 	bl	800c3cc <I2C_TreatErrorCallback>
  }
}
 800c3b0:	e002      	b.n	800c3b8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c3b2:	bf00      	nop
 800c3b4:	e000      	b.n	800c3b8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c3b6:	bf00      	nop
}
 800c3b8:	bf00      	nop
 800c3ba:	3710      	adds	r7, #16
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	ffff0000 	.word	0xffff0000
 800c3c4:	0800b49d 	.word	0x0800b49d
 800c3c8:	0800c463 	.word	0x0800c463

0800c3cc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	2b60      	cmp	r3, #96	; 0x60
 800c3de:	d10e      	bne.n	800c3fe <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2220      	movs	r2, #32
 800c3e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f7fe ff10 	bl	800b21c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c3fc:	e009      	b.n	800c412 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f7fe fefb 	bl	800b208 <HAL_I2C_ErrorCallback>
}
 800c412:	bf00      	nop
 800c414:	3708      	adds	r7, #8
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c41a:	b480      	push	{r7}
 800c41c:	b083      	sub	sp, #12
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	699b      	ldr	r3, [r3, #24]
 800c428:	f003 0302 	and.w	r3, r3, #2
 800c42c:	2b02      	cmp	r3, #2
 800c42e:	d103      	bne.n	800c438 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2200      	movs	r2, #0
 800c436:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	699b      	ldr	r3, [r3, #24]
 800c43e:	f003 0301 	and.w	r3, r3, #1
 800c442:	2b01      	cmp	r3, #1
 800c444:	d007      	beq.n	800c456 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	699a      	ldr	r2, [r3, #24]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f042 0201 	orr.w	r2, r2, #1
 800c454:	619a      	str	r2, [r3, #24]
  }
}
 800c456:	bf00      	nop
 800c458:	370c      	adds	r7, #12
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr

0800c462 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c462:	b580      	push	{r7, lr}
 800c464:	b084      	sub	sp, #16
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c46e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c474:	2b00      	cmp	r3, #0
 800c476:	d003      	beq.n	800c480 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c47c:	2200      	movs	r2, #0
 800c47e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c484:	2b00      	cmp	r3, #0
 800c486:	d003      	beq.n	800c490 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c48c:	2200      	movs	r2, #0
 800c48e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800c490:	68f8      	ldr	r0, [r7, #12]
 800c492:	f7ff ff9b 	bl	800c3cc <I2C_TreatErrorCallback>
}
 800c496:	bf00      	nop
 800c498:	3710      	adds	r7, #16
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}

0800c49e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c49e:	b580      	push	{r7, lr}
 800c4a0:	b084      	sub	sp, #16
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	60f8      	str	r0, [r7, #12]
 800c4a6:	60b9      	str	r1, [r7, #8]
 800c4a8:	603b      	str	r3, [r7, #0]
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c4ae:	e022      	b.n	800c4f6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4b6:	d01e      	beq.n	800c4f6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4b8:	f7fc fce4 	bl	8008e84 <HAL_GetTick>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	683a      	ldr	r2, [r7, #0]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d302      	bcc.n	800c4ce <I2C_WaitOnFlagUntilTimeout+0x30>
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d113      	bne.n	800c4f6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4d2:	f043 0220 	orr.w	r2, r3, #32
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2220      	movs	r2, #32
 800c4de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	e00f      	b.n	800c516 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	699a      	ldr	r2, [r3, #24]
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	4013      	ands	r3, r2
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	429a      	cmp	r2, r3
 800c504:	bf0c      	ite	eq
 800c506:	2301      	moveq	r3, #1
 800c508:	2300      	movne	r3, #0
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	461a      	mov	r2, r3
 800c50e:	79fb      	ldrb	r3, [r7, #7]
 800c510:	429a      	cmp	r2, r3
 800c512:	d0cd      	beq.n	800c4b0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c51e:	b580      	push	{r7, lr}
 800c520:	b084      	sub	sp, #16
 800c522:	af00      	add	r7, sp, #0
 800c524:	60f8      	str	r0, [r7, #12]
 800c526:	60b9      	str	r1, [r7, #8]
 800c528:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c52a:	e02c      	b.n	800c586 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	68b9      	ldr	r1, [r7, #8]
 800c530:	68f8      	ldr	r0, [r7, #12]
 800c532:	f000 f871 	bl	800c618 <I2C_IsAcknowledgeFailed>
 800c536:	4603      	mov	r3, r0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d001      	beq.n	800c540 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c53c:	2301      	movs	r3, #1
 800c53e:	e02a      	b.n	800c596 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c546:	d01e      	beq.n	800c586 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c548:	f7fc fc9c 	bl	8008e84 <HAL_GetTick>
 800c54c:	4602      	mov	r2, r0
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	1ad3      	subs	r3, r2, r3
 800c552:	68ba      	ldr	r2, [r7, #8]
 800c554:	429a      	cmp	r2, r3
 800c556:	d302      	bcc.n	800c55e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d113      	bne.n	800c586 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c562:	f043 0220 	orr.w	r2, r3, #32
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2220      	movs	r2, #32
 800c56e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2200      	movs	r2, #0
 800c576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	e007      	b.n	800c596 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	699b      	ldr	r3, [r3, #24]
 800c58c:	f003 0302 	and.w	r3, r3, #2
 800c590:	2b02      	cmp	r3, #2
 800c592:	d1cb      	bne.n	800c52c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c594:	2300      	movs	r3, #0
}
 800c596:	4618      	mov	r0, r3
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c59e:	b580      	push	{r7, lr}
 800c5a0:	b084      	sub	sp, #16
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	60f8      	str	r0, [r7, #12]
 800c5a6:	60b9      	str	r1, [r7, #8]
 800c5a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c5aa:	e028      	b.n	800c5fe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	68b9      	ldr	r1, [r7, #8]
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f000 f831 	bl	800c618 <I2C_IsAcknowledgeFailed>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d001      	beq.n	800c5c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c5bc:	2301      	movs	r3, #1
 800c5be:	e026      	b.n	800c60e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5c0:	f7fc fc60 	bl	8008e84 <HAL_GetTick>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	1ad3      	subs	r3, r2, r3
 800c5ca:	68ba      	ldr	r2, [r7, #8]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d302      	bcc.n	800c5d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d113      	bne.n	800c5fe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5da:	f043 0220 	orr.w	r2, r3, #32
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2220      	movs	r2, #32
 800c5e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e007      	b.n	800c60e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	699b      	ldr	r3, [r3, #24]
 800c604:	f003 0320 	and.w	r3, r3, #32
 800c608:	2b20      	cmp	r3, #32
 800c60a:	d1cf      	bne.n	800c5ac <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c60c:	2300      	movs	r3, #0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3710      	adds	r7, #16
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
	...

0800c618 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	60f8      	str	r0, [r7, #12]
 800c620:	60b9      	str	r1, [r7, #8]
 800c622:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	699b      	ldr	r3, [r3, #24]
 800c62a:	f003 0310 	and.w	r3, r3, #16
 800c62e:	2b10      	cmp	r3, #16
 800c630:	d151      	bne.n	800c6d6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c632:	e022      	b.n	800c67a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c63a:	d01e      	beq.n	800c67a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c63c:	f7fc fc22 	bl	8008e84 <HAL_GetTick>
 800c640:	4602      	mov	r2, r0
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	1ad3      	subs	r3, r2, r3
 800c646:	68ba      	ldr	r2, [r7, #8]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d302      	bcc.n	800c652 <I2C_IsAcknowledgeFailed+0x3a>
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d113      	bne.n	800c67a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c656:	f043 0220 	orr.w	r2, r3, #32
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2220      	movs	r2, #32
 800c662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2200      	movs	r2, #0
 800c66a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2200      	movs	r2, #0
 800c672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800c676:	2301      	movs	r3, #1
 800c678:	e02e      	b.n	800c6d8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	699b      	ldr	r3, [r3, #24]
 800c680:	f003 0320 	and.w	r3, r3, #32
 800c684:	2b20      	cmp	r3, #32
 800c686:	d1d5      	bne.n	800c634 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2210      	movs	r2, #16
 800c68e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2220      	movs	r2, #32
 800c696:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c698:	68f8      	ldr	r0, [r7, #12]
 800c69a:	f7ff febe 	bl	800c41a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	6859      	ldr	r1, [r3, #4]
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681a      	ldr	r2, [r3, #0]
 800c6a8:	4b0d      	ldr	r3, [pc, #52]	; (800c6e0 <I2C_IsAcknowledgeFailed+0xc8>)
 800c6aa:	400b      	ands	r3, r1
 800c6ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6b2:	f043 0204 	orr.w	r2, r3, #4
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2220      	movs	r2, #32
 800c6be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	e000      	b.n	800c6d8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800c6d6:	2300      	movs	r3, #0
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3710      	adds	r7, #16
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	fe00e800 	.word	0xfe00e800

0800c6e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b085      	sub	sp, #20
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	607b      	str	r3, [r7, #4]
 800c6ee:	460b      	mov	r3, r1
 800c6f0:	817b      	strh	r3, [r7, #10]
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	685a      	ldr	r2, [r3, #4]
 800c6fc:	69bb      	ldr	r3, [r7, #24]
 800c6fe:	0d5b      	lsrs	r3, r3, #21
 800c700:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c704:	4b0d      	ldr	r3, [pc, #52]	; (800c73c <I2C_TransferConfig+0x58>)
 800c706:	430b      	orrs	r3, r1
 800c708:	43db      	mvns	r3, r3
 800c70a:	ea02 0103 	and.w	r1, r2, r3
 800c70e:	897b      	ldrh	r3, [r7, #10]
 800c710:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c714:	7a7b      	ldrb	r3, [r7, #9]
 800c716:	041b      	lsls	r3, r3, #16
 800c718:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c71c:	431a      	orrs	r2, r3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	431a      	orrs	r2, r3
 800c722:	69bb      	ldr	r3, [r7, #24]
 800c724:	431a      	orrs	r2, r3
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	430a      	orrs	r2, r1
 800c72c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800c72e:	bf00      	nop
 800c730:	3714      	adds	r7, #20
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr
 800c73a:	bf00      	nop
 800c73c:	03ff63ff 	.word	0x03ff63ff

0800c740 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c740:	b480      	push	{r7}
 800c742:	b085      	sub	sp, #20
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	460b      	mov	r3, r1
 800c74a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800c74c:	2300      	movs	r3, #0
 800c74e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c754:	4a2a      	ldr	r2, [pc, #168]	; (800c800 <I2C_Enable_IRQ+0xc0>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d004      	beq.n	800c764 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800c75e:	4a29      	ldr	r2, [pc, #164]	; (800c804 <I2C_Enable_IRQ+0xc4>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d11d      	bne.n	800c7a0 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c764:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	da03      	bge.n	800c774 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800c772:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c774:	887b      	ldrh	r3, [r7, #2]
 800c776:	2b10      	cmp	r3, #16
 800c778:	d103      	bne.n	800c782 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800c780:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c782:	887b      	ldrh	r3, [r7, #2]
 800c784:	2b20      	cmp	r3, #32
 800c786:	d103      	bne.n	800c790 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c78e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c790:	887b      	ldrh	r3, [r7, #2]
 800c792:	2b40      	cmp	r3, #64	; 0x40
 800c794:	d125      	bne.n	800c7e2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c79c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c79e:	e020      	b.n	800c7e2 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c7a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	da03      	bge.n	800c7b0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800c7ae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c7b0:	887b      	ldrh	r3, [r7, #2]
 800c7b2:	f003 0301 	and.w	r3, r3, #1
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d003      	beq.n	800c7c2 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800c7c0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c7c2:	887b      	ldrh	r3, [r7, #2]
 800c7c4:	f003 0302 	and.w	r3, r3, #2
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d003      	beq.n	800c7d4 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800c7d2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c7d4:	887b      	ldrh	r3, [r7, #2]
 800c7d6:	2b20      	cmp	r3, #32
 800c7d8:	d103      	bne.n	800c7e2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f043 0320 	orr.w	r3, r3, #32
 800c7e0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	6819      	ldr	r1, [r3, #0]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	68fa      	ldr	r2, [r7, #12]
 800c7ee:	430a      	orrs	r2, r1
 800c7f0:	601a      	str	r2, [r3, #0]
}
 800c7f2:	bf00      	nop
 800c7f4:	3714      	adds	r7, #20
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop
 800c800:	0800b6a3 	.word	0x0800b6a3
 800c804:	0800b889 	.word	0x0800b889

0800c808 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c808:	b480      	push	{r7}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	460b      	mov	r3, r1
 800c812:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800c814:	2300      	movs	r3, #0
 800c816:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c818:	887b      	ldrh	r3, [r7, #2]
 800c81a:	f003 0301 	and.w	r3, r3, #1
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d00f      	beq.n	800c842 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800c828:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c830:	b2db      	uxtb	r3, r3
 800c832:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c836:	2b28      	cmp	r3, #40	; 0x28
 800c838:	d003      	beq.n	800c842 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800c840:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c842:	887b      	ldrh	r3, [r7, #2]
 800c844:	f003 0302 	and.w	r3, r3, #2
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00f      	beq.n	800c86c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800c852:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c860:	2b28      	cmp	r3, #40	; 0x28
 800c862:	d003      	beq.n	800c86c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800c86a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c86c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c870:	2b00      	cmp	r3, #0
 800c872:	da03      	bge.n	800c87c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800c87a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c87c:	887b      	ldrh	r3, [r7, #2]
 800c87e:	2b10      	cmp	r3, #16
 800c880:	d103      	bne.n	800c88a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800c888:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c88a:	887b      	ldrh	r3, [r7, #2]
 800c88c:	2b20      	cmp	r3, #32
 800c88e:	d103      	bne.n	800c898 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f043 0320 	orr.w	r3, r3, #32
 800c896:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c898:	887b      	ldrh	r3, [r7, #2]
 800c89a:	2b40      	cmp	r3, #64	; 0x40
 800c89c:	d103      	bne.n	800c8a6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8a4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	6819      	ldr	r1, [r3, #0]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	43da      	mvns	r2, r3
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	400a      	ands	r2, r1
 800c8b6:	601a      	str	r2, [r3, #0]
}
 800c8b8:	bf00      	nop
 800c8ba:	3714      	adds	r7, #20
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	2b20      	cmp	r3, #32
 800c8d8:	d138      	bne.n	800c94c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d101      	bne.n	800c8e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c8e4:	2302      	movs	r3, #2
 800c8e6:	e032      	b.n	800c94e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2224      	movs	r2, #36	; 0x24
 800c8f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f022 0201 	bic.w	r2, r2, #1
 800c906:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c916:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	6819      	ldr	r1, [r3, #0]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	683a      	ldr	r2, [r7, #0]
 800c924:	430a      	orrs	r2, r1
 800c926:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f042 0201 	orr.w	r2, r2, #1
 800c936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2220      	movs	r2, #32
 800c93c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2200      	movs	r2, #0
 800c944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c948:	2300      	movs	r3, #0
 800c94a:	e000      	b.n	800c94e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c94c:	2302      	movs	r3, #2
  }
}
 800c94e:	4618      	mov	r0, r3
 800c950:	370c      	adds	r7, #12
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr

0800c95a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c95a:	b480      	push	{r7}
 800c95c:	b085      	sub	sp, #20
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
 800c962:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	2b20      	cmp	r3, #32
 800c96e:	d139      	bne.n	800c9e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c976:	2b01      	cmp	r3, #1
 800c978:	d101      	bne.n	800c97e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c97a:	2302      	movs	r3, #2
 800c97c:	e033      	b.n	800c9e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2201      	movs	r2, #1
 800c982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2224      	movs	r2, #36	; 0x24
 800c98a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f022 0201 	bic.w	r2, r2, #1
 800c99c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c9ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	021b      	lsls	r3, r3, #8
 800c9b2:	68fa      	ldr	r2, [r7, #12]
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	68fa      	ldr	r2, [r7, #12]
 800c9be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f042 0201 	orr.w	r2, r2, #1
 800c9ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2220      	movs	r2, #32
 800c9d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	e000      	b.n	800c9e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c9e4:	2302      	movs	r3, #2
  }
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3714      	adds	r7, #20
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr

0800c9f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c9f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9f4:	b08f      	sub	sp, #60	; 0x3c
 800c9f6:	af0a      	add	r7, sp, #40	; 0x28
 800c9f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d101      	bne.n	800ca04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ca00:	2301      	movs	r3, #1
 800ca02:	e116      	b.n	800cc32 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d106      	bne.n	800ca24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f00f f8ec 	bl	801bbfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2203      	movs	r2, #3
 800ca28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d102      	bne.n	800ca3e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4618      	mov	r0, r3
 800ca44:	f007 fc13 	bl	801426e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	603b      	str	r3, [r7, #0]
 800ca4e:	687e      	ldr	r6, [r7, #4]
 800ca50:	466d      	mov	r5, sp
 800ca52:	f106 0410 	add.w	r4, r6, #16
 800ca56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ca5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ca5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ca62:	e885 0003 	stmia.w	r5, {r0, r1}
 800ca66:	1d33      	adds	r3, r6, #4
 800ca68:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ca6a:	6838      	ldr	r0, [r7, #0]
 800ca6c:	f007 faee 	bl	801404c <USB_CoreInit>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d005      	beq.n	800ca82 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2202      	movs	r2, #2
 800ca7a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e0d7      	b.n	800cc32 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2100      	movs	r1, #0
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f007 fc01 	bl	8014290 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca8e:	2300      	movs	r3, #0
 800ca90:	73fb      	strb	r3, [r7, #15]
 800ca92:	e04a      	b.n	800cb2a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ca94:	7bfa      	ldrb	r2, [r7, #15]
 800ca96:	6879      	ldr	r1, [r7, #4]
 800ca98:	4613      	mov	r3, r2
 800ca9a:	00db      	lsls	r3, r3, #3
 800ca9c:	1a9b      	subs	r3, r3, r2
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	440b      	add	r3, r1
 800caa2:	333d      	adds	r3, #61	; 0x3d
 800caa4:	2201      	movs	r2, #1
 800caa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800caa8:	7bfa      	ldrb	r2, [r7, #15]
 800caaa:	6879      	ldr	r1, [r7, #4]
 800caac:	4613      	mov	r3, r2
 800caae:	00db      	lsls	r3, r3, #3
 800cab0:	1a9b      	subs	r3, r3, r2
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	440b      	add	r3, r1
 800cab6:	333c      	adds	r3, #60	; 0x3c
 800cab8:	7bfa      	ldrb	r2, [r7, #15]
 800caba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800cabc:	7bfa      	ldrb	r2, [r7, #15]
 800cabe:	7bfb      	ldrb	r3, [r7, #15]
 800cac0:	b298      	uxth	r0, r3
 800cac2:	6879      	ldr	r1, [r7, #4]
 800cac4:	4613      	mov	r3, r2
 800cac6:	00db      	lsls	r3, r3, #3
 800cac8:	1a9b      	subs	r3, r3, r2
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	440b      	add	r3, r1
 800cace:	3342      	adds	r3, #66	; 0x42
 800cad0:	4602      	mov	r2, r0
 800cad2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800cad4:	7bfa      	ldrb	r2, [r7, #15]
 800cad6:	6879      	ldr	r1, [r7, #4]
 800cad8:	4613      	mov	r3, r2
 800cada:	00db      	lsls	r3, r3, #3
 800cadc:	1a9b      	subs	r3, r3, r2
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	440b      	add	r3, r1
 800cae2:	333f      	adds	r3, #63	; 0x3f
 800cae4:	2200      	movs	r2, #0
 800cae6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800cae8:	7bfa      	ldrb	r2, [r7, #15]
 800caea:	6879      	ldr	r1, [r7, #4]
 800caec:	4613      	mov	r3, r2
 800caee:	00db      	lsls	r3, r3, #3
 800caf0:	1a9b      	subs	r3, r3, r2
 800caf2:	009b      	lsls	r3, r3, #2
 800caf4:	440b      	add	r3, r1
 800caf6:	3344      	adds	r3, #68	; 0x44
 800caf8:	2200      	movs	r2, #0
 800cafa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800cafc:	7bfa      	ldrb	r2, [r7, #15]
 800cafe:	6879      	ldr	r1, [r7, #4]
 800cb00:	4613      	mov	r3, r2
 800cb02:	00db      	lsls	r3, r3, #3
 800cb04:	1a9b      	subs	r3, r3, r2
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	440b      	add	r3, r1
 800cb0a:	3348      	adds	r3, #72	; 0x48
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800cb10:	7bfa      	ldrb	r2, [r7, #15]
 800cb12:	6879      	ldr	r1, [r7, #4]
 800cb14:	4613      	mov	r3, r2
 800cb16:	00db      	lsls	r3, r3, #3
 800cb18:	1a9b      	subs	r3, r3, r2
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	440b      	add	r3, r1
 800cb1e:	3350      	adds	r3, #80	; 0x50
 800cb20:	2200      	movs	r2, #0
 800cb22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb24:	7bfb      	ldrb	r3, [r7, #15]
 800cb26:	3301      	adds	r3, #1
 800cb28:	73fb      	strb	r3, [r7, #15]
 800cb2a:	7bfa      	ldrb	r2, [r7, #15]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d3af      	bcc.n	800ca94 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb34:	2300      	movs	r3, #0
 800cb36:	73fb      	strb	r3, [r7, #15]
 800cb38:	e044      	b.n	800cbc4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800cb3a:	7bfa      	ldrb	r2, [r7, #15]
 800cb3c:	6879      	ldr	r1, [r7, #4]
 800cb3e:	4613      	mov	r3, r2
 800cb40:	00db      	lsls	r3, r3, #3
 800cb42:	1a9b      	subs	r3, r3, r2
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	440b      	add	r3, r1
 800cb48:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800cb50:	7bfa      	ldrb	r2, [r7, #15]
 800cb52:	6879      	ldr	r1, [r7, #4]
 800cb54:	4613      	mov	r3, r2
 800cb56:	00db      	lsls	r3, r3, #3
 800cb58:	1a9b      	subs	r3, r3, r2
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	440b      	add	r3, r1
 800cb5e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800cb62:	7bfa      	ldrb	r2, [r7, #15]
 800cb64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800cb66:	7bfa      	ldrb	r2, [r7, #15]
 800cb68:	6879      	ldr	r1, [r7, #4]
 800cb6a:	4613      	mov	r3, r2
 800cb6c:	00db      	lsls	r3, r3, #3
 800cb6e:	1a9b      	subs	r3, r3, r2
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	440b      	add	r3, r1
 800cb74:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cb78:	2200      	movs	r2, #0
 800cb7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800cb7c:	7bfa      	ldrb	r2, [r7, #15]
 800cb7e:	6879      	ldr	r1, [r7, #4]
 800cb80:	4613      	mov	r3, r2
 800cb82:	00db      	lsls	r3, r3, #3
 800cb84:	1a9b      	subs	r3, r3, r2
 800cb86:	009b      	lsls	r3, r3, #2
 800cb88:	440b      	add	r3, r1
 800cb8a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800cb8e:	2200      	movs	r2, #0
 800cb90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800cb92:	7bfa      	ldrb	r2, [r7, #15]
 800cb94:	6879      	ldr	r1, [r7, #4]
 800cb96:	4613      	mov	r3, r2
 800cb98:	00db      	lsls	r3, r3, #3
 800cb9a:	1a9b      	subs	r3, r3, r2
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	440b      	add	r3, r1
 800cba0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cba4:	2200      	movs	r2, #0
 800cba6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800cba8:	7bfa      	ldrb	r2, [r7, #15]
 800cbaa:	6879      	ldr	r1, [r7, #4]
 800cbac:	4613      	mov	r3, r2
 800cbae:	00db      	lsls	r3, r3, #3
 800cbb0:	1a9b      	subs	r3, r3, r2
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	440b      	add	r3, r1
 800cbb6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800cbba:	2200      	movs	r2, #0
 800cbbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cbbe:	7bfb      	ldrb	r3, [r7, #15]
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	73fb      	strb	r3, [r7, #15]
 800cbc4:	7bfa      	ldrb	r2, [r7, #15]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d3b5      	bcc.n	800cb3a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	603b      	str	r3, [r7, #0]
 800cbd4:	687e      	ldr	r6, [r7, #4]
 800cbd6:	466d      	mov	r5, sp
 800cbd8:	f106 0410 	add.w	r4, r6, #16
 800cbdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cbe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cbe4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cbe8:	e885 0003 	stmia.w	r5, {r0, r1}
 800cbec:	1d33      	adds	r3, r6, #4
 800cbee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cbf0:	6838      	ldr	r0, [r7, #0]
 800cbf2:	f007 fb77 	bl	80142e4 <USB_DevInit>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d005      	beq.n	800cc08 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2202      	movs	r2, #2
 800cc00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800cc04:	2301      	movs	r3, #1
 800cc06:	e014      	b.n	800cc32 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2201      	movs	r2, #1
 800cc14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d102      	bne.n	800cc26 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f001 f8ad 	bl	800dd80 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f008 fbcf 	bl	80153ce <USB_DevDisconnect>

  return HAL_OK;
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc3a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800cc3a:	b580      	push	{r7, lr}
 800cc3c:	b082      	sub	sp, #8
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d101      	bne.n	800cc50 <HAL_PCD_Start+0x16>
 800cc4c:	2302      	movs	r3, #2
 800cc4e:	e012      	b.n	800cc76 <HAL_PCD_Start+0x3c>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2201      	movs	r2, #1
 800cc54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f007 faf5 	bl	801424c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4618      	mov	r0, r3
 800cc68:	f008 fb90 	bl	801538c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cc74:	2300      	movs	r3, #0
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3708      	adds	r7, #8
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800cc7e:	b590      	push	{r4, r7, lr}
 800cc80:	b08d      	sub	sp, #52	; 0x34
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc8c:	6a3b      	ldr	r3, [r7, #32]
 800cc8e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f008 fc4e 	bl	8015536 <USB_GetMode>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	f040 83ca 	bne.w	800d436 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f008 fbb2 	bl	8015410 <USB_ReadInterrupts>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	f000 83c0 	beq.w	800d434 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f008 fba9 	bl	8015410 <USB_ReadInterrupts>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	f003 0302 	and.w	r3, r3, #2
 800ccc4:	2b02      	cmp	r3, #2
 800ccc6:	d107      	bne.n	800ccd8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	695a      	ldr	r2, [r3, #20]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f002 0202 	and.w	r2, r2, #2
 800ccd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f008 fb97 	bl	8015410 <USB_ReadInterrupts>
 800cce2:	4603      	mov	r3, r0
 800cce4:	f003 0310 	and.w	r3, r3, #16
 800cce8:	2b10      	cmp	r3, #16
 800ccea:	d161      	bne.n	800cdb0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	699a      	ldr	r2, [r3, #24]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f022 0210 	bic.w	r2, r2, #16
 800ccfa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800ccfc:	6a3b      	ldr	r3, [r7, #32]
 800ccfe:	6a1b      	ldr	r3, [r3, #32]
 800cd00:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800cd02:	69bb      	ldr	r3, [r7, #24]
 800cd04:	f003 020f 	and.w	r2, r3, #15
 800cd08:	4613      	mov	r3, r2
 800cd0a:	00db      	lsls	r3, r3, #3
 800cd0c:	1a9b      	subs	r3, r3, r2
 800cd0e:	009b      	lsls	r3, r3, #2
 800cd10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	4413      	add	r3, r2
 800cd18:	3304      	adds	r3, #4
 800cd1a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800cd1c:	69bb      	ldr	r3, [r7, #24]
 800cd1e:	0c5b      	lsrs	r3, r3, #17
 800cd20:	f003 030f 	and.w	r3, r3, #15
 800cd24:	2b02      	cmp	r3, #2
 800cd26:	d124      	bne.n	800cd72 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800cd28:	69ba      	ldr	r2, [r7, #24]
 800cd2a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800cd2e:	4013      	ands	r3, r2
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d035      	beq.n	800cda0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800cd38:	69bb      	ldr	r3, [r7, #24]
 800cd3a:	091b      	lsrs	r3, r3, #4
 800cd3c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800cd3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	461a      	mov	r2, r3
 800cd46:	6a38      	ldr	r0, [r7, #32]
 800cd48:	f008 f9fd 	bl	8015146 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	68da      	ldr	r2, [r3, #12]
 800cd50:	69bb      	ldr	r3, [r7, #24]
 800cd52:	091b      	lsrs	r3, r3, #4
 800cd54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd58:	441a      	add	r2, r3
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	699a      	ldr	r2, [r3, #24]
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	091b      	lsrs	r3, r3, #4
 800cd66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd6a:	441a      	add	r2, r3
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	619a      	str	r2, [r3, #24]
 800cd70:	e016      	b.n	800cda0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800cd72:	69bb      	ldr	r3, [r7, #24]
 800cd74:	0c5b      	lsrs	r3, r3, #17
 800cd76:	f003 030f 	and.w	r3, r3, #15
 800cd7a:	2b06      	cmp	r3, #6
 800cd7c:	d110      	bne.n	800cda0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cd84:	2208      	movs	r2, #8
 800cd86:	4619      	mov	r1, r3
 800cd88:	6a38      	ldr	r0, [r7, #32]
 800cd8a:	f008 f9dc 	bl	8015146 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	699a      	ldr	r2, [r3, #24]
 800cd92:	69bb      	ldr	r3, [r7, #24]
 800cd94:	091b      	lsrs	r3, r3, #4
 800cd96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd9a:	441a      	add	r2, r3
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	699a      	ldr	r2, [r3, #24]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f042 0210 	orr.w	r2, r2, #16
 800cdae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f008 fb2b 	bl	8015410 <USB_ReadInterrupts>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cdc0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cdc4:	d16e      	bne.n	800cea4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f008 fb31 	bl	8015436 <USB_ReadDevAllOutEpInterrupt>
 800cdd4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800cdd6:	e062      	b.n	800ce9e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800cdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdda:	f003 0301 	and.w	r3, r3, #1
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d057      	beq.n	800ce92 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cde8:	b2d2      	uxtb	r2, r2
 800cdea:	4611      	mov	r1, r2
 800cdec:	4618      	mov	r0, r3
 800cdee:	f008 fb56 	bl	801549e <USB_ReadDevOutEPInterrupt>
 800cdf2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	f003 0301 	and.w	r3, r3, #1
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d00c      	beq.n	800ce18 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800cdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce00:	015a      	lsls	r2, r3, #5
 800ce02:	69fb      	ldr	r3, [r7, #28]
 800ce04:	4413      	add	r3, r2
 800ce06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800ce10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 fe0a 	bl	800da2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	f003 0308 	and.w	r3, r3, #8
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d00c      	beq.n	800ce3c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800ce22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce24:	015a      	lsls	r2, r3, #5
 800ce26:	69fb      	ldr	r3, [r7, #28]
 800ce28:	4413      	add	r3, r2
 800ce2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce2e:	461a      	mov	r2, r3
 800ce30:	2308      	movs	r3, #8
 800ce32:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800ce34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f000 ff04 	bl	800dc44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	f003 0310 	and.w	r3, r3, #16
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d008      	beq.n	800ce58 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800ce46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce48:	015a      	lsls	r2, r3, #5
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	4413      	add	r3, r2
 800ce4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce52:	461a      	mov	r2, r3
 800ce54:	2310      	movs	r3, #16
 800ce56:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	f003 0320 	and.w	r3, r3, #32
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d008      	beq.n	800ce74 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ce62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce64:	015a      	lsls	r2, r3, #5
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	4413      	add	r3, r2
 800ce6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce6e:	461a      	mov	r2, r3
 800ce70:	2320      	movs	r3, #32
 800ce72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d009      	beq.n	800ce92 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800ce7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce80:	015a      	lsls	r2, r3, #5
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	4413      	add	r3, r2
 800ce86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ce90:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800ce92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce94:	3301      	adds	r3, #1
 800ce96:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800ce98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9a:	085b      	lsrs	r3, r3, #1
 800ce9c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800ce9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d199      	bne.n	800cdd8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f008 fab1 	bl	8015410 <USB_ReadInterrupts>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ceb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ceb8:	f040 80c0 	bne.w	800d03c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4618      	mov	r0, r3
 800cec2:	f008 fad2 	bl	801546a <USB_ReadDevAllInEpInterrupt>
 800cec6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800cec8:	2300      	movs	r3, #0
 800ceca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800cecc:	e0b2      	b.n	800d034 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800cece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced0:	f003 0301 	and.w	r3, r3, #1
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	f000 80a7 	beq.w	800d028 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cee0:	b2d2      	uxtb	r2, r2
 800cee2:	4611      	mov	r1, r2
 800cee4:	4618      	mov	r0, r3
 800cee6:	f008 faf8 	bl	80154da <USB_ReadDevInEPInterrupt>
 800ceea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	f003 0301 	and.w	r3, r3, #1
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d057      	beq.n	800cfa6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef8:	f003 030f 	and.w	r3, r3, #15
 800cefc:	2201      	movs	r2, #1
 800cefe:	fa02 f303 	lsl.w	r3, r2, r3
 800cf02:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cf04:	69fb      	ldr	r3, [r7, #28]
 800cf06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	43db      	mvns	r3, r3
 800cf10:	69f9      	ldr	r1, [r7, #28]
 800cf12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf16:	4013      	ands	r3, r2
 800cf18:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800cf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1c:	015a      	lsls	r2, r3, #5
 800cf1e:	69fb      	ldr	r3, [r7, #28]
 800cf20:	4413      	add	r3, r2
 800cf22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf26:	461a      	mov	r2, r3
 800cf28:	2301      	movs	r3, #1
 800cf2a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	691b      	ldr	r3, [r3, #16]
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d132      	bne.n	800cf9a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800cf34:	6879      	ldr	r1, [r7, #4]
 800cf36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf38:	4613      	mov	r3, r2
 800cf3a:	00db      	lsls	r3, r3, #3
 800cf3c:	1a9b      	subs	r3, r3, r2
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	440b      	add	r3, r1
 800cf42:	3348      	adds	r3, #72	; 0x48
 800cf44:	6819      	ldr	r1, [r3, #0]
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	00db      	lsls	r3, r3, #3
 800cf4e:	1a9b      	subs	r3, r3, r2
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	4403      	add	r3, r0
 800cf54:	3344      	adds	r3, #68	; 0x44
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4419      	add	r1, r3
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf5e:	4613      	mov	r3, r2
 800cf60:	00db      	lsls	r3, r3, #3
 800cf62:	1a9b      	subs	r3, r3, r2
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	4403      	add	r3, r0
 800cf68:	3348      	adds	r3, #72	; 0x48
 800cf6a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800cf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d113      	bne.n	800cf9a <HAL_PCD_IRQHandler+0x31c>
 800cf72:	6879      	ldr	r1, [r7, #4]
 800cf74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf76:	4613      	mov	r3, r2
 800cf78:	00db      	lsls	r3, r3, #3
 800cf7a:	1a9b      	subs	r3, r3, r2
 800cf7c:	009b      	lsls	r3, r3, #2
 800cf7e:	440b      	add	r3, r1
 800cf80:	3350      	adds	r3, #80	; 0x50
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d108      	bne.n	800cf9a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6818      	ldr	r0, [r3, #0]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cf92:	461a      	mov	r2, r3
 800cf94:	2101      	movs	r1, #1
 800cf96:	f008 fb01 	bl	801559c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800cf9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f00e febc 	bl	801bd1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	f003 0308 	and.w	r3, r3, #8
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d008      	beq.n	800cfc2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800cfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb2:	015a      	lsls	r2, r3, #5
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	2308      	movs	r3, #8
 800cfc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	f003 0310 	and.w	r3, r3, #16
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d008      	beq.n	800cfde <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800cfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfce:	015a      	lsls	r2, r3, #5
 800cfd0:	69fb      	ldr	r3, [r7, #28]
 800cfd2:	4413      	add	r3, r2
 800cfd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfd8:	461a      	mov	r2, r3
 800cfda:	2310      	movs	r3, #16
 800cfdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d008      	beq.n	800cffa <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800cfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfea:	015a      	lsls	r2, r3, #5
 800cfec:	69fb      	ldr	r3, [r7, #28]
 800cfee:	4413      	add	r3, r2
 800cff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cff4:	461a      	mov	r2, r3
 800cff6:	2340      	movs	r3, #64	; 0x40
 800cff8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	f003 0302 	and.w	r3, r3, #2
 800d000:	2b00      	cmp	r3, #0
 800d002:	d008      	beq.n	800d016 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800d004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d006:	015a      	lsls	r2, r3, #5
 800d008:	69fb      	ldr	r3, [r7, #28]
 800d00a:	4413      	add	r3, r2
 800d00c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d010:	461a      	mov	r2, r3
 800d012:	2302      	movs	r3, #2
 800d014:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d003      	beq.n	800d028 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800d020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 fc75 	bl	800d912 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800d028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02a:	3301      	adds	r3, #1
 800d02c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800d02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d030:	085b      	lsrs	r3, r3, #1
 800d032:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800d034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d036:	2b00      	cmp	r3, #0
 800d038:	f47f af49 	bne.w	800cece <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4618      	mov	r0, r3
 800d042:	f008 f9e5 	bl	8015410 <USB_ReadInterrupts>
 800d046:	4603      	mov	r3, r0
 800d048:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d04c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d050:	d122      	bne.n	800d098 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d052:	69fb      	ldr	r3, [r7, #28]
 800d054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d058:	685b      	ldr	r3, [r3, #4]
 800d05a:	69fa      	ldr	r2, [r7, #28]
 800d05c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d060:	f023 0301 	bic.w	r3, r3, #1
 800d064:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d108      	bne.n	800d082 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800d078:	2100      	movs	r1, #0
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f00f f8be 	bl	801c1fc <HAL_PCDEx_LPM_Callback>
 800d080:	e002      	b.n	800d088 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f00e fec2 	bl	801be0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	695a      	ldr	r2, [r3, #20]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800d096:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4618      	mov	r0, r3
 800d09e:	f008 f9b7 	bl	8015410 <USB_ReadInterrupts>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d0ac:	d112      	bne.n	800d0d4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800d0ae:	69fb      	ldr	r3, [r7, #28]
 800d0b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0b4:	689b      	ldr	r3, [r3, #8]
 800d0b6:	f003 0301 	and.w	r3, r3, #1
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d102      	bne.n	800d0c4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f00e fe7e 	bl	801bdc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	695a      	ldr	r2, [r3, #20]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800d0d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f008 f999 	bl	8015410 <USB_ReadInterrupts>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0e8:	d121      	bne.n	800d12e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	695a      	ldr	r2, [r3, #20]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800d0f8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800d100:	2b00      	cmp	r3, #0
 800d102:	d111      	bne.n	800d128 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d112:	089b      	lsrs	r3, r3, #2
 800d114:	f003 020f 	and.w	r2, r3, #15
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800d11e:	2101      	movs	r1, #1
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f00f f86b 	bl	801c1fc <HAL_PCDEx_LPM_Callback>
 800d126:	e002      	b.n	800d12e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f00e fe49 	bl	801bdc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4618      	mov	r0, r3
 800d134:	f008 f96c 	bl	8015410 <USB_ReadInterrupts>
 800d138:	4603      	mov	r3, r0
 800d13a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d13e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d142:	f040 80c7 	bne.w	800d2d4 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	69fa      	ldr	r2, [r7, #28]
 800d150:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d154:	f023 0301 	bic.w	r3, r3, #1
 800d158:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2110      	movs	r1, #16
 800d160:	4618      	mov	r0, r3
 800d162:	f007 fa2d 	bl	80145c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d166:	2300      	movs	r3, #0
 800d168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d16a:	e056      	b.n	800d21a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800d16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16e:	015a      	lsls	r2, r3, #5
 800d170:	69fb      	ldr	r3, [r7, #28]
 800d172:	4413      	add	r3, r2
 800d174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d178:	461a      	mov	r2, r3
 800d17a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d17e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d182:	015a      	lsls	r2, r3, #5
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	4413      	add	r3, r2
 800d188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d190:	0151      	lsls	r1, r2, #5
 800d192:	69fa      	ldr	r2, [r7, #28]
 800d194:	440a      	add	r2, r1
 800d196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d19a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d19e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a2:	015a      	lsls	r2, r3, #5
 800d1a4:	69fb      	ldr	r3, [r7, #28]
 800d1a6:	4413      	add	r3, r2
 800d1a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1b0:	0151      	lsls	r1, r2, #5
 800d1b2:	69fa      	ldr	r2, [r7, #28]
 800d1b4:	440a      	add	r2, r1
 800d1b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d1be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800d1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c2:	015a      	lsls	r2, r3, #5
 800d1c4:	69fb      	ldr	r3, [r7, #28]
 800d1c6:	4413      	add	r3, r2
 800d1c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d1d2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d6:	015a      	lsls	r2, r3, #5
 800d1d8:	69fb      	ldr	r3, [r7, #28]
 800d1da:	4413      	add	r3, r2
 800d1dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1e4:	0151      	lsls	r1, r2, #5
 800d1e6:	69fa      	ldr	r2, [r7, #28]
 800d1e8:	440a      	add	r2, r1
 800d1ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d1f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f6:	015a      	lsls	r2, r3, #5
 800d1f8:	69fb      	ldr	r3, [r7, #28]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d204:	0151      	lsls	r1, r2, #5
 800d206:	69fa      	ldr	r2, [r7, #28]
 800d208:	440a      	add	r2, r1
 800d20a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d20e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d212:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d216:	3301      	adds	r3, #1
 800d218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d220:	429a      	cmp	r2, r3
 800d222:	d3a3      	bcc.n	800d16c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800d224:	69fb      	ldr	r3, [r7, #28]
 800d226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d22a:	69db      	ldr	r3, [r3, #28]
 800d22c:	69fa      	ldr	r2, [r7, #28]
 800d22e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d232:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800d236:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d016      	beq.n	800d26e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d24a:	69fa      	ldr	r2, [r7, #28]
 800d24c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d250:	f043 030b 	orr.w	r3, r3, #11
 800d254:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800d258:	69fb      	ldr	r3, [r7, #28]
 800d25a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d25e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d260:	69fa      	ldr	r2, [r7, #28]
 800d262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d266:	f043 030b 	orr.w	r3, r3, #11
 800d26a:	6453      	str	r3, [r2, #68]	; 0x44
 800d26c:	e015      	b.n	800d29a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d274:	695a      	ldr	r2, [r3, #20]
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d27c:	4619      	mov	r1, r3
 800d27e:	f242 032b 	movw	r3, #8235	; 0x202b
 800d282:	4313      	orrs	r3, r2
 800d284:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d28c:	691b      	ldr	r3, [r3, #16]
 800d28e:	69fa      	ldr	r2, [r7, #28]
 800d290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d294:	f043 030b 	orr.w	r3, r3, #11
 800d298:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800d29a:	69fb      	ldr	r3, [r7, #28]
 800d29c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	69fa      	ldr	r2, [r7, #28]
 800d2a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2a8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d2ac:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6818      	ldr	r0, [r3, #0]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	691b      	ldr	r3, [r3, #16]
 800d2b6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d2be:	461a      	mov	r2, r3
 800d2c0:	f008 f96c 	bl	801559c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	695a      	ldr	r2, [r3, #20]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800d2d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f008 f899 	bl	8015410 <USB_ReadInterrupts>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d2e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d2e8:	d124      	bne.n	800d334 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f008 f930 	bl	8015554 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f007 f9c2 	bl	8014682 <USB_GetDevSpeed>
 800d2fe:	4603      	mov	r3, r0
 800d300:	461a      	mov	r2, r3
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681c      	ldr	r4, [r3, #0]
 800d30a:	f001 fa2f 	bl	800e76c <HAL_RCC_GetHCLKFreq>
 800d30e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d314:	b2db      	uxtb	r3, r3
 800d316:	461a      	mov	r2, r3
 800d318:	4620      	mov	r0, r4
 800d31a:	f006 fef5 	bl	8014108 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f00e fd25 	bl	801bd6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	695a      	ldr	r2, [r3, #20]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800d332:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4618      	mov	r0, r3
 800d33a:	f008 f869 	bl	8015410 <USB_ReadInterrupts>
 800d33e:	4603      	mov	r3, r0
 800d340:	f003 0308 	and.w	r3, r3, #8
 800d344:	2b08      	cmp	r3, #8
 800d346:	d10a      	bne.n	800d35e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f00e fd02 	bl	801bd52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	695a      	ldr	r2, [r3, #20]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	f002 0208 	and.w	r2, r2, #8
 800d35c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	4618      	mov	r0, r3
 800d364:	f008 f854 	bl	8015410 <USB_ReadInterrupts>
 800d368:	4603      	mov	r3, r0
 800d36a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d36e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d372:	d10f      	bne.n	800d394 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800d374:	2300      	movs	r3, #0
 800d376:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800d378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	4619      	mov	r1, r3
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f00e fd64 	bl	801be4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	695a      	ldr	r2, [r3, #20]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800d392:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4618      	mov	r0, r3
 800d39a:	f008 f839 	bl	8015410 <USB_ReadInterrupts>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d3a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d3a8:	d10f      	bne.n	800d3ca <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800d3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b0:	b2db      	uxtb	r3, r3
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f00e fd37 	bl	801be28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	695a      	ldr	r2, [r3, #20]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800d3c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f008 f81e 	bl	8015410 <USB_ReadInterrupts>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d3da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3de:	d10a      	bne.n	800d3f6 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f00e fd45 	bl	801be70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	695a      	ldr	r2, [r3, #20]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800d3f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f008 f808 	bl	8015410 <USB_ReadInterrupts>
 800d400:	4603      	mov	r3, r0
 800d402:	f003 0304 	and.w	r3, r3, #4
 800d406:	2b04      	cmp	r3, #4
 800d408:	d115      	bne.n	800d436 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800d412:	69bb      	ldr	r3, [r7, #24]
 800d414:	f003 0304 	and.w	r3, r3, #4
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d002      	beq.n	800d422 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f00e fd35 	bl	801be8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	6859      	ldr	r1, [r3, #4]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	69ba      	ldr	r2, [r7, #24]
 800d42e:	430a      	orrs	r2, r1
 800d430:	605a      	str	r2, [r3, #4]
 800d432:	e000      	b.n	800d436 <HAL_PCD_IRQHandler+0x7b8>
      return;
 800d434:	bf00      	nop
    }
  }
}
 800d436:	3734      	adds	r7, #52	; 0x34
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd90      	pop	{r4, r7, pc}

0800d43c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	460b      	mov	r3, r1
 800d446:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d44e:	2b01      	cmp	r3, #1
 800d450:	d101      	bne.n	800d456 <HAL_PCD_SetAddress+0x1a>
 800d452:	2302      	movs	r3, #2
 800d454:	e013      	b.n	800d47e <HAL_PCD_SetAddress+0x42>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2201      	movs	r2, #1
 800d45a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	78fa      	ldrb	r2, [r7, #3]
 800d462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	78fa      	ldrb	r2, [r7, #3]
 800d46c:	4611      	mov	r1, r2
 800d46e:	4618      	mov	r0, r3
 800d470:	f007 ff66 	bl	8015340 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2200      	movs	r2, #0
 800d478:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d47c:	2300      	movs	r3, #0
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3708      	adds	r7, #8
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}

0800d486 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800d486:	b580      	push	{r7, lr}
 800d488:	b084      	sub	sp, #16
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
 800d48e:	4608      	mov	r0, r1
 800d490:	4611      	mov	r1, r2
 800d492:	461a      	mov	r2, r3
 800d494:	4603      	mov	r3, r0
 800d496:	70fb      	strb	r3, [r7, #3]
 800d498:	460b      	mov	r3, r1
 800d49a:	803b      	strh	r3, [r7, #0]
 800d49c:	4613      	mov	r3, r2
 800d49e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d4a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	da0f      	bge.n	800d4cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d4ac:	78fb      	ldrb	r3, [r7, #3]
 800d4ae:	f003 020f 	and.w	r2, r3, #15
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	00db      	lsls	r3, r3, #3
 800d4b6:	1a9b      	subs	r3, r3, r2
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	3338      	adds	r3, #56	; 0x38
 800d4bc:	687a      	ldr	r2, [r7, #4]
 800d4be:	4413      	add	r3, r2
 800d4c0:	3304      	adds	r3, #4
 800d4c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	705a      	strb	r2, [r3, #1]
 800d4ca:	e00f      	b.n	800d4ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d4cc:	78fb      	ldrb	r3, [r7, #3]
 800d4ce:	f003 020f 	and.w	r2, r3, #15
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	00db      	lsls	r3, r3, #3
 800d4d6:	1a9b      	subs	r3, r3, r2
 800d4d8:	009b      	lsls	r3, r3, #2
 800d4da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	3304      	adds	r3, #4
 800d4e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d4ec:	78fb      	ldrb	r3, [r7, #3]
 800d4ee:	f003 030f 	and.w	r3, r3, #15
 800d4f2:	b2da      	uxtb	r2, r3
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800d4f8:	883a      	ldrh	r2, [r7, #0]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	78ba      	ldrb	r2, [r7, #2]
 800d502:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	785b      	ldrb	r3, [r3, #1]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d004      	beq.n	800d516 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	b29a      	uxth	r2, r3
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d516:	78bb      	ldrb	r3, [r7, #2]
 800d518:	2b02      	cmp	r3, #2
 800d51a:	d102      	bne.n	800d522 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	2200      	movs	r2, #0
 800d520:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d101      	bne.n	800d530 <HAL_PCD_EP_Open+0xaa>
 800d52c:	2302      	movs	r3, #2
 800d52e:	e00e      	b.n	800d54e <HAL_PCD_EP_Open+0xc8>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2201      	movs	r2, #1
 800d534:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	68f9      	ldr	r1, [r7, #12]
 800d53e:	4618      	mov	r0, r3
 800d540:	f007 f8c4 	bl	80146cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2200      	movs	r2, #0
 800d548:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800d54c:	7afb      	ldrb	r3, [r7, #11]
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3710      	adds	r7, #16
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}

0800d556 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d556:	b580      	push	{r7, lr}
 800d558:	b084      	sub	sp, #16
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
 800d55e:	460b      	mov	r3, r1
 800d560:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d562:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d566:	2b00      	cmp	r3, #0
 800d568:	da0f      	bge.n	800d58a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d56a:	78fb      	ldrb	r3, [r7, #3]
 800d56c:	f003 020f 	and.w	r2, r3, #15
 800d570:	4613      	mov	r3, r2
 800d572:	00db      	lsls	r3, r3, #3
 800d574:	1a9b      	subs	r3, r3, r2
 800d576:	009b      	lsls	r3, r3, #2
 800d578:	3338      	adds	r3, #56	; 0x38
 800d57a:	687a      	ldr	r2, [r7, #4]
 800d57c:	4413      	add	r3, r2
 800d57e:	3304      	adds	r3, #4
 800d580:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2201      	movs	r2, #1
 800d586:	705a      	strb	r2, [r3, #1]
 800d588:	e00f      	b.n	800d5aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d58a:	78fb      	ldrb	r3, [r7, #3]
 800d58c:	f003 020f 	and.w	r2, r3, #15
 800d590:	4613      	mov	r3, r2
 800d592:	00db      	lsls	r3, r3, #3
 800d594:	1a9b      	subs	r3, r3, r2
 800d596:	009b      	lsls	r3, r3, #2
 800d598:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	4413      	add	r3, r2
 800d5a0:	3304      	adds	r3, #4
 800d5a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800d5aa:	78fb      	ldrb	r3, [r7, #3]
 800d5ac:	f003 030f 	and.w	r3, r3, #15
 800d5b0:	b2da      	uxtb	r2, r3
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d101      	bne.n	800d5c4 <HAL_PCD_EP_Close+0x6e>
 800d5c0:	2302      	movs	r3, #2
 800d5c2:	e00e      	b.n	800d5e2 <HAL_PCD_EP_Close+0x8c>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	68f9      	ldr	r1, [r7, #12]
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f007 f902 	bl	80147dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800d5e0:	2300      	movs	r3, #0
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3710      	adds	r7, #16
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b086      	sub	sp, #24
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	60f8      	str	r0, [r7, #12]
 800d5f2:	607a      	str	r2, [r7, #4]
 800d5f4:	603b      	str	r3, [r7, #0]
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d5fa:	7afb      	ldrb	r3, [r7, #11]
 800d5fc:	f003 020f 	and.w	r2, r3, #15
 800d600:	4613      	mov	r3, r2
 800d602:	00db      	lsls	r3, r3, #3
 800d604:	1a9b      	subs	r3, r3, r2
 800d606:	009b      	lsls	r3, r3, #2
 800d608:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d60c:	68fa      	ldr	r2, [r7, #12]
 800d60e:	4413      	add	r3, r2
 800d610:	3304      	adds	r3, #4
 800d612:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	687a      	ldr	r2, [r7, #4]
 800d618:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	683a      	ldr	r2, [r7, #0]
 800d61e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	2200      	movs	r2, #0
 800d624:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	2200      	movs	r2, #0
 800d62a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d62c:	7afb      	ldrb	r3, [r7, #11]
 800d62e:	f003 030f 	and.w	r3, r3, #15
 800d632:	b2da      	uxtb	r2, r3
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	d102      	bne.n	800d646 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d646:	7afb      	ldrb	r3, [r7, #11]
 800d648:	f003 030f 	and.w	r3, r3, #15
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d109      	bne.n	800d664 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6818      	ldr	r0, [r3, #0]
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	691b      	ldr	r3, [r3, #16]
 800d658:	b2db      	uxtb	r3, r3
 800d65a:	461a      	mov	r2, r3
 800d65c:	6979      	ldr	r1, [r7, #20]
 800d65e:	f007 fbe5 	bl	8014e2c <USB_EP0StartXfer>
 800d662:	e008      	b.n	800d676 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	6818      	ldr	r0, [r3, #0]
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	691b      	ldr	r3, [r3, #16]
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	461a      	mov	r2, r3
 800d670:	6979      	ldr	r1, [r7, #20]
 800d672:	f007 f98f 	bl	8014994 <USB_EPStartXfer>
  }

  return HAL_OK;
 800d676:	2300      	movs	r3, #0
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3718      	adds	r7, #24
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d680:	b480      	push	{r7}
 800d682:	b083      	sub	sp, #12
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	460b      	mov	r3, r1
 800d68a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d68c:	78fb      	ldrb	r3, [r7, #3]
 800d68e:	f003 020f 	and.w	r2, r3, #15
 800d692:	6879      	ldr	r1, [r7, #4]
 800d694:	4613      	mov	r3, r2
 800d696:	00db      	lsls	r3, r3, #3
 800d698:	1a9b      	subs	r3, r3, r2
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	440b      	add	r3, r1
 800d69e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d6a2:	681b      	ldr	r3, [r3, #0]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	370c      	adds	r7, #12
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr

0800d6b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b086      	sub	sp, #24
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	607a      	str	r2, [r7, #4]
 800d6ba:	603b      	str	r3, [r7, #0]
 800d6bc:	460b      	mov	r3, r1
 800d6be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d6c0:	7afb      	ldrb	r3, [r7, #11]
 800d6c2:	f003 020f 	and.w	r2, r3, #15
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	00db      	lsls	r3, r3, #3
 800d6ca:	1a9b      	subs	r3, r3, r2
 800d6cc:	009b      	lsls	r3, r3, #2
 800d6ce:	3338      	adds	r3, #56	; 0x38
 800d6d0:	68fa      	ldr	r2, [r7, #12]
 800d6d2:	4413      	add	r3, r2
 800d6d4:	3304      	adds	r3, #4
 800d6d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	687a      	ldr	r2, [r7, #4]
 800d6dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	683a      	ldr	r2, [r7, #0]
 800d6e2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d6f0:	7afb      	ldrb	r3, [r7, #11]
 800d6f2:	f003 030f 	and.w	r3, r3, #15
 800d6f6:	b2da      	uxtb	r2, r3
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	691b      	ldr	r3, [r3, #16]
 800d700:	2b01      	cmp	r3, #1
 800d702:	d102      	bne.n	800d70a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d70a:	7afb      	ldrb	r3, [r7, #11]
 800d70c:	f003 030f 	and.w	r3, r3, #15
 800d710:	2b00      	cmp	r3, #0
 800d712:	d109      	bne.n	800d728 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	6818      	ldr	r0, [r3, #0]
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	691b      	ldr	r3, [r3, #16]
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	461a      	mov	r2, r3
 800d720:	6979      	ldr	r1, [r7, #20]
 800d722:	f007 fb83 	bl	8014e2c <USB_EP0StartXfer>
 800d726:	e008      	b.n	800d73a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	6818      	ldr	r0, [r3, #0]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	691b      	ldr	r3, [r3, #16]
 800d730:	b2db      	uxtb	r3, r3
 800d732:	461a      	mov	r2, r3
 800d734:	6979      	ldr	r1, [r7, #20]
 800d736:	f007 f92d 	bl	8014994 <USB_EPStartXfer>
  }

  return HAL_OK;
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3718      	adds	r7, #24
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	460b      	mov	r3, r1
 800d74e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d750:	78fb      	ldrb	r3, [r7, #3]
 800d752:	f003 020f 	and.w	r2, r3, #15
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d901      	bls.n	800d762 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d75e:	2301      	movs	r3, #1
 800d760:	e050      	b.n	800d804 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d762:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d766:	2b00      	cmp	r3, #0
 800d768:	da0f      	bge.n	800d78a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d76a:	78fb      	ldrb	r3, [r7, #3]
 800d76c:	f003 020f 	and.w	r2, r3, #15
 800d770:	4613      	mov	r3, r2
 800d772:	00db      	lsls	r3, r3, #3
 800d774:	1a9b      	subs	r3, r3, r2
 800d776:	009b      	lsls	r3, r3, #2
 800d778:	3338      	adds	r3, #56	; 0x38
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	4413      	add	r3, r2
 800d77e:	3304      	adds	r3, #4
 800d780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	2201      	movs	r2, #1
 800d786:	705a      	strb	r2, [r3, #1]
 800d788:	e00d      	b.n	800d7a6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d78a:	78fa      	ldrb	r2, [r7, #3]
 800d78c:	4613      	mov	r3, r2
 800d78e:	00db      	lsls	r3, r3, #3
 800d790:	1a9b      	subs	r3, r3, r2
 800d792:	009b      	lsls	r3, r3, #2
 800d794:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	4413      	add	r3, r2
 800d79c:	3304      	adds	r3, #4
 800d79e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2201      	movs	r2, #1
 800d7aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d7ac:	78fb      	ldrb	r3, [r7, #3]
 800d7ae:	f003 030f 	and.w	r3, r3, #15
 800d7b2:	b2da      	uxtb	r2, r3
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d7be:	2b01      	cmp	r3, #1
 800d7c0:	d101      	bne.n	800d7c6 <HAL_PCD_EP_SetStall+0x82>
 800d7c2:	2302      	movs	r3, #2
 800d7c4:	e01e      	b.n	800d804 <HAL_PCD_EP_SetStall+0xc0>
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	68f9      	ldr	r1, [r7, #12]
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f007 fcdf 	bl	8015198 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d7da:	78fb      	ldrb	r3, [r7, #3]
 800d7dc:	f003 030f 	and.w	r3, r3, #15
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d10a      	bne.n	800d7fa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6818      	ldr	r0, [r3, #0]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	691b      	ldr	r3, [r3, #16]
 800d7ec:	b2d9      	uxtb	r1, r3
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	f007 fed1 	bl	801559c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d802:	2300      	movs	r3, #0
}
 800d804:	4618      	mov	r0, r3
 800d806:	3710      	adds	r7, #16
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b084      	sub	sp, #16
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	460b      	mov	r3, r1
 800d816:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d818:	78fb      	ldrb	r3, [r7, #3]
 800d81a:	f003 020f 	and.w	r2, r3, #15
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	429a      	cmp	r2, r3
 800d824:	d901      	bls.n	800d82a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d826:	2301      	movs	r3, #1
 800d828:	e042      	b.n	800d8b0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d82a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	da0f      	bge.n	800d852 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d832:	78fb      	ldrb	r3, [r7, #3]
 800d834:	f003 020f 	and.w	r2, r3, #15
 800d838:	4613      	mov	r3, r2
 800d83a:	00db      	lsls	r3, r3, #3
 800d83c:	1a9b      	subs	r3, r3, r2
 800d83e:	009b      	lsls	r3, r3, #2
 800d840:	3338      	adds	r3, #56	; 0x38
 800d842:	687a      	ldr	r2, [r7, #4]
 800d844:	4413      	add	r3, r2
 800d846:	3304      	adds	r3, #4
 800d848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2201      	movs	r2, #1
 800d84e:	705a      	strb	r2, [r3, #1]
 800d850:	e00f      	b.n	800d872 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d852:	78fb      	ldrb	r3, [r7, #3]
 800d854:	f003 020f 	and.w	r2, r3, #15
 800d858:	4613      	mov	r3, r2
 800d85a:	00db      	lsls	r3, r3, #3
 800d85c:	1a9b      	subs	r3, r3, r2
 800d85e:	009b      	lsls	r3, r3, #2
 800d860:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d864:	687a      	ldr	r2, [r7, #4]
 800d866:	4413      	add	r3, r2
 800d868:	3304      	adds	r3, #4
 800d86a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2200      	movs	r2, #0
 800d870:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2200      	movs	r2, #0
 800d876:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d878:	78fb      	ldrb	r3, [r7, #3]
 800d87a:	f003 030f 	and.w	r3, r3, #15
 800d87e:	b2da      	uxtb	r2, r3
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d101      	bne.n	800d892 <HAL_PCD_EP_ClrStall+0x86>
 800d88e:	2302      	movs	r3, #2
 800d890:	e00e      	b.n	800d8b0 <HAL_PCD_EP_ClrStall+0xa4>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2201      	movs	r2, #1
 800d896:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	68f9      	ldr	r1, [r7, #12]
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f007 fce7 	bl	8015274 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d8ae:	2300      	movs	r3, #0
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3710      	adds	r7, #16
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d101      	bne.n	800d8d2 <HAL_PCD_EP_Flush+0x1a>
 800d8ce:	2302      	movs	r3, #2
 800d8d0:	e01b      	b.n	800d90a <HAL_PCD_EP_Flush+0x52>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800d8da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	da09      	bge.n	800d8f6 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681a      	ldr	r2, [r3, #0]
 800d8e6:	78fb      	ldrb	r3, [r7, #3]
 800d8e8:	f003 030f 	and.w	r3, r3, #15
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	4610      	mov	r0, r2
 800d8f0:	f006 fe66 	bl	80145c0 <USB_FlushTxFifo>
 800d8f4:	e004      	b.n	800d900 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f006 fe86 	bl	801460c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2200      	movs	r2, #0
 800d904:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d908:	2300      	movs	r3, #0
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3708      	adds	r7, #8
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}

0800d912 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d912:	b580      	push	{r7, lr}
 800d914:	b08a      	sub	sp, #40	; 0x28
 800d916:	af02      	add	r7, sp, #8
 800d918:	6078      	str	r0, [r7, #4]
 800d91a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d926:	683a      	ldr	r2, [r7, #0]
 800d928:	4613      	mov	r3, r2
 800d92a:	00db      	lsls	r3, r3, #3
 800d92c:	1a9b      	subs	r3, r3, r2
 800d92e:	009b      	lsls	r3, r3, #2
 800d930:	3338      	adds	r3, #56	; 0x38
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	4413      	add	r3, r2
 800d936:	3304      	adds	r3, #4
 800d938:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	699a      	ldr	r2, [r3, #24]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	695b      	ldr	r3, [r3, #20]
 800d942:	429a      	cmp	r2, r3
 800d944:	d901      	bls.n	800d94a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d946:	2301      	movs	r3, #1
 800d948:	e06c      	b.n	800da24 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	695a      	ldr	r2, [r3, #20]
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	699b      	ldr	r3, [r3, #24]
 800d952:	1ad3      	subs	r3, r2, r3
 800d954:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	69fa      	ldr	r2, [r7, #28]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d902      	bls.n	800d966 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d966:	69fb      	ldr	r3, [r7, #28]
 800d968:	3303      	adds	r3, #3
 800d96a:	089b      	lsrs	r3, r3, #2
 800d96c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d96e:	e02b      	b.n	800d9c8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	695a      	ldr	r2, [r3, #20]
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	699b      	ldr	r3, [r3, #24]
 800d978:	1ad3      	subs	r3, r2, r3
 800d97a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	689b      	ldr	r3, [r3, #8]
 800d980:	69fa      	ldr	r2, [r7, #28]
 800d982:	429a      	cmp	r2, r3
 800d984:	d902      	bls.n	800d98c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	689b      	ldr	r3, [r3, #8]
 800d98a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d98c:	69fb      	ldr	r3, [r7, #28]
 800d98e:	3303      	adds	r3, #3
 800d990:	089b      	lsrs	r3, r3, #2
 800d992:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	68d9      	ldr	r1, [r3, #12]
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	b2da      	uxtb	r2, r3
 800d99c:	69fb      	ldr	r3, [r7, #28]
 800d99e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	9300      	str	r3, [sp, #0]
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	6978      	ldr	r0, [r7, #20]
 800d9ac:	f007 fb96 	bl	80150dc <USB_WritePacket>

    ep->xfer_buff  += len;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	68da      	ldr	r2, [r3, #12]
 800d9b4:	69fb      	ldr	r3, [r7, #28]
 800d9b6:	441a      	add	r2, r3
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	699a      	ldr	r2, [r3, #24]
 800d9c0:	69fb      	ldr	r3, [r7, #28]
 800d9c2:	441a      	add	r2, r3
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	015a      	lsls	r2, r3, #5
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	4413      	add	r3, r2
 800d9d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9d4:	699b      	ldr	r3, [r3, #24]
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	69ba      	ldr	r2, [r7, #24]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d809      	bhi.n	800d9f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	699a      	ldr	r2, [r3, #24]
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d203      	bcs.n	800d9f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	695b      	ldr	r3, [r3, #20]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d1be      	bne.n	800d970 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	695a      	ldr	r2, [r3, #20]
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	699b      	ldr	r3, [r3, #24]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d811      	bhi.n	800da22 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	f003 030f 	and.w	r3, r3, #15
 800da04:	2201      	movs	r2, #1
 800da06:	fa02 f303 	lsl.w	r3, r2, r3
 800da0a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	43db      	mvns	r3, r3
 800da18:	6939      	ldr	r1, [r7, #16]
 800da1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800da1e:	4013      	ands	r3, r2
 800da20:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	3720      	adds	r7, #32
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b086      	sub	sp, #24
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	333c      	adds	r3, #60	; 0x3c
 800da44:	3304      	adds	r3, #4
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	015a      	lsls	r2, r3, #5
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	4413      	add	r3, r2
 800da52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da56:	689b      	ldr	r3, [r3, #8]
 800da58:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	691b      	ldr	r3, [r3, #16]
 800da5e:	2b01      	cmp	r3, #1
 800da60:	f040 80a0 	bne.w	800dba4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	f003 0308 	and.w	r3, r3, #8
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d015      	beq.n	800da9a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	4a72      	ldr	r2, [pc, #456]	; (800dc3c <PCD_EP_OutXfrComplete_int+0x210>)
 800da72:	4293      	cmp	r3, r2
 800da74:	f240 80dd 	bls.w	800dc32 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800da7e:	2b00      	cmp	r3, #0
 800da80:	f000 80d7 	beq.w	800dc32 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	015a      	lsls	r2, r3, #5
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	4413      	add	r3, r2
 800da8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da90:	461a      	mov	r2, r3
 800da92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da96:	6093      	str	r3, [r2, #8]
 800da98:	e0cb      	b.n	800dc32 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	f003 0320 	and.w	r3, r3, #32
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d009      	beq.n	800dab8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	015a      	lsls	r2, r3, #5
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	4413      	add	r3, r2
 800daac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dab0:	461a      	mov	r2, r3
 800dab2:	2320      	movs	r3, #32
 800dab4:	6093      	str	r3, [r2, #8]
 800dab6:	e0bc      	b.n	800dc32 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	f040 80b7 	bne.w	800dc32 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	4a5d      	ldr	r2, [pc, #372]	; (800dc3c <PCD_EP_OutXfrComplete_int+0x210>)
 800dac8:	4293      	cmp	r3, r2
 800daca:	d90f      	bls.n	800daec <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d00a      	beq.n	800daec <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	015a      	lsls	r2, r3, #5
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	4413      	add	r3, r2
 800dade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dae2:	461a      	mov	r2, r3
 800dae4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dae8:	6093      	str	r3, [r2, #8]
 800daea:	e0a2      	b.n	800dc32 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800daec:	6879      	ldr	r1, [r7, #4]
 800daee:	683a      	ldr	r2, [r7, #0]
 800daf0:	4613      	mov	r3, r2
 800daf2:	00db      	lsls	r3, r3, #3
 800daf4:	1a9b      	subs	r3, r3, r2
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	440b      	add	r3, r1
 800dafa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800dafe:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	0159      	lsls	r1, r3, #5
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	440b      	add	r3, r1
 800db08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db0c:	691b      	ldr	r3, [r3, #16]
 800db0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800db12:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	683a      	ldr	r2, [r7, #0]
 800db18:	4613      	mov	r3, r2
 800db1a:	00db      	lsls	r3, r3, #3
 800db1c:	1a9b      	subs	r3, r3, r2
 800db1e:	009b      	lsls	r3, r3, #2
 800db20:	4403      	add	r3, r0
 800db22:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800db26:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800db28:	6879      	ldr	r1, [r7, #4]
 800db2a:	683a      	ldr	r2, [r7, #0]
 800db2c:	4613      	mov	r3, r2
 800db2e:	00db      	lsls	r3, r3, #3
 800db30:	1a9b      	subs	r3, r3, r2
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	440b      	add	r3, r1
 800db36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800db3a:	6819      	ldr	r1, [r3, #0]
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	683a      	ldr	r2, [r7, #0]
 800db40:	4613      	mov	r3, r2
 800db42:	00db      	lsls	r3, r3, #3
 800db44:	1a9b      	subs	r3, r3, r2
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	4403      	add	r3, r0
 800db4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4419      	add	r1, r3
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	683a      	ldr	r2, [r7, #0]
 800db56:	4613      	mov	r3, r2
 800db58:	00db      	lsls	r3, r3, #3
 800db5a:	1a9b      	subs	r3, r3, r2
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	4403      	add	r3, r0
 800db60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800db64:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d114      	bne.n	800db96 <PCD_EP_OutXfrComplete_int+0x16a>
 800db6c:	6879      	ldr	r1, [r7, #4]
 800db6e:	683a      	ldr	r2, [r7, #0]
 800db70:	4613      	mov	r3, r2
 800db72:	00db      	lsls	r3, r3, #3
 800db74:	1a9b      	subs	r3, r3, r2
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	440b      	add	r3, r1
 800db7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d108      	bne.n	800db96 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6818      	ldr	r0, [r3, #0]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800db8e:	461a      	mov	r2, r3
 800db90:	2101      	movs	r1, #1
 800db92:	f007 fd03 	bl	801559c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	4619      	mov	r1, r3
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f00e f8a3 	bl	801bce8 <HAL_PCD_DataOutStageCallback>
 800dba2:	e046      	b.n	800dc32 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	4a26      	ldr	r2, [pc, #152]	; (800dc40 <PCD_EP_OutXfrComplete_int+0x214>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d124      	bne.n	800dbf6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d00a      	beq.n	800dbcc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	015a      	lsls	r2, r3, #5
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dbc8:	6093      	str	r3, [r2, #8]
 800dbca:	e032      	b.n	800dc32 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	f003 0320 	and.w	r3, r3, #32
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d008      	beq.n	800dbe8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	015a      	lsls	r2, r3, #5
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	4413      	add	r3, r2
 800dbde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	2320      	movs	r3, #32
 800dbe6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	b2db      	uxtb	r3, r3
 800dbec:	4619      	mov	r1, r3
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f00e f87a 	bl	801bce8 <HAL_PCD_DataOutStageCallback>
 800dbf4:	e01d      	b.n	800dc32 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d114      	bne.n	800dc26 <PCD_EP_OutXfrComplete_int+0x1fa>
 800dbfc:	6879      	ldr	r1, [r7, #4]
 800dbfe:	683a      	ldr	r2, [r7, #0]
 800dc00:	4613      	mov	r3, r2
 800dc02:	00db      	lsls	r3, r3, #3
 800dc04:	1a9b      	subs	r3, r3, r2
 800dc06:	009b      	lsls	r3, r3, #2
 800dc08:	440b      	add	r3, r1
 800dc0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d108      	bne.n	800dc26 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6818      	ldr	r0, [r3, #0]
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800dc1e:	461a      	mov	r2, r3
 800dc20:	2100      	movs	r1, #0
 800dc22:	f007 fcbb 	bl	801559c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f00e f85b 	bl	801bce8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800dc32:	2300      	movs	r3, #0
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3718      	adds	r7, #24
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	4f54300a 	.word	0x4f54300a
 800dc40:	4f54310a 	.word	0x4f54310a

0800dc44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b086      	sub	sp, #24
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	333c      	adds	r3, #60	; 0x3c
 800dc5c:	3304      	adds	r3, #4
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	015a      	lsls	r2, r3, #5
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	4413      	add	r3, r2
 800dc6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc6e:	689b      	ldr	r3, [r3, #8]
 800dc70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	4a15      	ldr	r2, [pc, #84]	; (800dccc <PCD_EP_OutSetupPacket_int+0x88>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d90e      	bls.n	800dc98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d009      	beq.n	800dc98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	015a      	lsls	r2, r3, #5
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	4413      	add	r3, r2
 800dc8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc90:	461a      	mov	r2, r3
 800dc92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f00e f813 	bl	801bcc4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	4a0a      	ldr	r2, [pc, #40]	; (800dccc <PCD_EP_OutSetupPacket_int+0x88>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d90c      	bls.n	800dcc0 <PCD_EP_OutSetupPacket_int+0x7c>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	691b      	ldr	r3, [r3, #16]
 800dcaa:	2b01      	cmp	r3, #1
 800dcac:	d108      	bne.n	800dcc0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6818      	ldr	r0, [r3, #0]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800dcb8:	461a      	mov	r2, r3
 800dcba:	2101      	movs	r1, #1
 800dcbc:	f007 fc6e 	bl	801559c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800dcc0:	2300      	movs	r3, #0
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3718      	adds	r7, #24
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
 800dcca:	bf00      	nop
 800dccc:	4f54300a 	.word	0x4f54300a

0800dcd0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b085      	sub	sp, #20
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	460b      	mov	r3, r1
 800dcda:	70fb      	strb	r3, [r7, #3]
 800dcdc:	4613      	mov	r3, r2
 800dcde:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800dce8:	78fb      	ldrb	r3, [r7, #3]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d107      	bne.n	800dcfe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800dcee:	883b      	ldrh	r3, [r7, #0]
 800dcf0:	0419      	lsls	r1, r3, #16
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	68ba      	ldr	r2, [r7, #8]
 800dcf8:	430a      	orrs	r2, r1
 800dcfa:	629a      	str	r2, [r3, #40]	; 0x28
 800dcfc:	e028      	b.n	800dd50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd04:	0c1b      	lsrs	r3, r3, #16
 800dd06:	68ba      	ldr	r2, [r7, #8]
 800dd08:	4413      	add	r3, r2
 800dd0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	73fb      	strb	r3, [r7, #15]
 800dd10:	e00d      	b.n	800dd2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	7bfb      	ldrb	r3, [r7, #15]
 800dd18:	3340      	adds	r3, #64	; 0x40
 800dd1a:	009b      	lsls	r3, r3, #2
 800dd1c:	4413      	add	r3, r2
 800dd1e:	685b      	ldr	r3, [r3, #4]
 800dd20:	0c1b      	lsrs	r3, r3, #16
 800dd22:	68ba      	ldr	r2, [r7, #8]
 800dd24:	4413      	add	r3, r2
 800dd26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800dd28:	7bfb      	ldrb	r3, [r7, #15]
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	73fb      	strb	r3, [r7, #15]
 800dd2e:	7bfa      	ldrb	r2, [r7, #15]
 800dd30:	78fb      	ldrb	r3, [r7, #3]
 800dd32:	3b01      	subs	r3, #1
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d3ec      	bcc.n	800dd12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800dd38:	883b      	ldrh	r3, [r7, #0]
 800dd3a:	0418      	lsls	r0, r3, #16
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6819      	ldr	r1, [r3, #0]
 800dd40:	78fb      	ldrb	r3, [r7, #3]
 800dd42:	3b01      	subs	r3, #1
 800dd44:	68ba      	ldr	r2, [r7, #8]
 800dd46:	4302      	orrs	r2, r0
 800dd48:	3340      	adds	r3, #64	; 0x40
 800dd4a:	009b      	lsls	r3, r3, #2
 800dd4c:	440b      	add	r3, r1
 800dd4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800dd50:	2300      	movs	r3, #0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3714      	adds	r7, #20
 800dd56:	46bd      	mov	sp, r7
 800dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5c:	4770      	bx	lr

0800dd5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800dd5e:	b480      	push	{r7}
 800dd60:	b083      	sub	sp, #12
 800dd62:	af00      	add	r7, sp, #0
 800dd64:	6078      	str	r0, [r7, #4]
 800dd66:	460b      	mov	r3, r1
 800dd68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	887a      	ldrh	r2, [r7, #2]
 800dd70:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800dd72:	2300      	movs	r3, #0
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	370c      	adds	r7, #12
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7e:	4770      	bx	lr

0800dd80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b085      	sub	sp, #20
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2201      	movs	r2, #1
 800dd92:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	699b      	ldr	r3, [r3, #24]
 800dda2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ddae:	4b05      	ldr	r3, [pc, #20]	; (800ddc4 <HAL_PCDEx_ActivateLPM+0x44>)
 800ddb0:	4313      	orrs	r3, r2
 800ddb2:	68fa      	ldr	r2, [r7, #12]
 800ddb4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800ddb6:	2300      	movs	r3, #0
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3714      	adds	r7, #20
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc2:	4770      	bx	lr
 800ddc4:	10000003 	.word	0x10000003

0800ddc8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ddcc:	4b05      	ldr	r3, [pc, #20]	; (800dde4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	4a04      	ldr	r2, [pc, #16]	; (800dde4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ddd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ddd6:	6013      	str	r3, [r2, #0]
}
 800ddd8:	bf00      	nop
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr
 800dde2:	bf00      	nop
 800dde4:	40007000 	.word	0x40007000

0800dde8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ddf2:	4b23      	ldr	r3, [pc, #140]	; (800de80 <HAL_PWREx_EnableOverDrive+0x98>)
 800ddf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddf6:	4a22      	ldr	r2, [pc, #136]	; (800de80 <HAL_PWREx_EnableOverDrive+0x98>)
 800ddf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ddfc:	6413      	str	r3, [r2, #64]	; 0x40
 800ddfe:	4b20      	ldr	r3, [pc, #128]	; (800de80 <HAL_PWREx_EnableOverDrive+0x98>)
 800de00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de06:	603b      	str	r3, [r7, #0]
 800de08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800de0a:	4b1e      	ldr	r3, [pc, #120]	; (800de84 <HAL_PWREx_EnableOverDrive+0x9c>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	4a1d      	ldr	r2, [pc, #116]	; (800de84 <HAL_PWREx_EnableOverDrive+0x9c>)
 800de10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800de16:	f7fb f835 	bl	8008e84 <HAL_GetTick>
 800de1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800de1c:	e009      	b.n	800de32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800de1e:	f7fb f831 	bl	8008e84 <HAL_GetTick>
 800de22:	4602      	mov	r2, r0
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de2c:	d901      	bls.n	800de32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800de2e:	2303      	movs	r3, #3
 800de30:	e022      	b.n	800de78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800de32:	4b14      	ldr	r3, [pc, #80]	; (800de84 <HAL_PWREx_EnableOverDrive+0x9c>)
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de3e:	d1ee      	bne.n	800de1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800de40:	4b10      	ldr	r3, [pc, #64]	; (800de84 <HAL_PWREx_EnableOverDrive+0x9c>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4a0f      	ldr	r2, [pc, #60]	; (800de84 <HAL_PWREx_EnableOverDrive+0x9c>)
 800de46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800de4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800de4c:	f7fb f81a 	bl	8008e84 <HAL_GetTick>
 800de50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800de52:	e009      	b.n	800de68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800de54:	f7fb f816 	bl	8008e84 <HAL_GetTick>
 800de58:	4602      	mov	r2, r0
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	1ad3      	subs	r3, r2, r3
 800de5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de62:	d901      	bls.n	800de68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800de64:	2303      	movs	r3, #3
 800de66:	e007      	b.n	800de78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800de68:	4b06      	ldr	r3, [pc, #24]	; (800de84 <HAL_PWREx_EnableOverDrive+0x9c>)
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800de74:	d1ee      	bne.n	800de54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800de76:	2300      	movs	r3, #0
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3708      	adds	r7, #8
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	40023800 	.word	0x40023800
 800de84:	40007000 	.word	0x40007000

0800de88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b086      	sub	sp, #24
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800de90:	2300      	movs	r3, #0
 800de92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d101      	bne.n	800de9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800de9a:	2301      	movs	r3, #1
 800de9c:	e291      	b.n	800e3c2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f003 0301 	and.w	r3, r3, #1
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	f000 8087 	beq.w	800dfba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800deac:	4b96      	ldr	r3, [pc, #600]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	f003 030c 	and.w	r3, r3, #12
 800deb4:	2b04      	cmp	r3, #4
 800deb6:	d00c      	beq.n	800ded2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800deb8:	4b93      	ldr	r3, [pc, #588]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800deba:	689b      	ldr	r3, [r3, #8]
 800debc:	f003 030c 	and.w	r3, r3, #12
 800dec0:	2b08      	cmp	r3, #8
 800dec2:	d112      	bne.n	800deea <HAL_RCC_OscConfig+0x62>
 800dec4:	4b90      	ldr	r3, [pc, #576]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800decc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ded0:	d10b      	bne.n	800deea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ded2:	4b8d      	ldr	r3, [pc, #564]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d06c      	beq.n	800dfb8 <HAL_RCC_OscConfig+0x130>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d168      	bne.n	800dfb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800dee6:	2301      	movs	r3, #1
 800dee8:	e26b      	b.n	800e3c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800def2:	d106      	bne.n	800df02 <HAL_RCC_OscConfig+0x7a>
 800def4:	4b84      	ldr	r3, [pc, #528]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4a83      	ldr	r2, [pc, #524]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800defa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800defe:	6013      	str	r3, [r2, #0]
 800df00:	e02e      	b.n	800df60 <HAL_RCC_OscConfig+0xd8>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d10c      	bne.n	800df24 <HAL_RCC_OscConfig+0x9c>
 800df0a:	4b7f      	ldr	r3, [pc, #508]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4a7e      	ldr	r2, [pc, #504]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800df10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800df14:	6013      	str	r3, [r2, #0]
 800df16:	4b7c      	ldr	r3, [pc, #496]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4a7b      	ldr	r2, [pc, #492]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800df1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800df20:	6013      	str	r3, [r2, #0]
 800df22:	e01d      	b.n	800df60 <HAL_RCC_OscConfig+0xd8>
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800df2c:	d10c      	bne.n	800df48 <HAL_RCC_OscConfig+0xc0>
 800df2e:	4b76      	ldr	r3, [pc, #472]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	4a75      	ldr	r2, [pc, #468]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800df34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800df38:	6013      	str	r3, [r2, #0]
 800df3a:	4b73      	ldr	r3, [pc, #460]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4a72      	ldr	r2, [pc, #456]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800df40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df44:	6013      	str	r3, [r2, #0]
 800df46:	e00b      	b.n	800df60 <HAL_RCC_OscConfig+0xd8>
 800df48:	4b6f      	ldr	r3, [pc, #444]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	4a6e      	ldr	r2, [pc, #440]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800df4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800df52:	6013      	str	r3, [r2, #0]
 800df54:	4b6c      	ldr	r3, [pc, #432]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a6b      	ldr	r2, [pc, #428]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800df5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800df5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	685b      	ldr	r3, [r3, #4]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d013      	beq.n	800df90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df68:	f7fa ff8c 	bl	8008e84 <HAL_GetTick>
 800df6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800df6e:	e008      	b.n	800df82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800df70:	f7fa ff88 	bl	8008e84 <HAL_GetTick>
 800df74:	4602      	mov	r2, r0
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	1ad3      	subs	r3, r2, r3
 800df7a:	2b64      	cmp	r3, #100	; 0x64
 800df7c:	d901      	bls.n	800df82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800df7e:	2303      	movs	r3, #3
 800df80:	e21f      	b.n	800e3c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800df82:	4b61      	ldr	r3, [pc, #388]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d0f0      	beq.n	800df70 <HAL_RCC_OscConfig+0xe8>
 800df8e:	e014      	b.n	800dfba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df90:	f7fa ff78 	bl	8008e84 <HAL_GetTick>
 800df94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800df96:	e008      	b.n	800dfaa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800df98:	f7fa ff74 	bl	8008e84 <HAL_GetTick>
 800df9c:	4602      	mov	r2, r0
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	1ad3      	subs	r3, r2, r3
 800dfa2:	2b64      	cmp	r3, #100	; 0x64
 800dfa4:	d901      	bls.n	800dfaa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800dfa6:	2303      	movs	r3, #3
 800dfa8:	e20b      	b.n	800e3c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dfaa:	4b57      	ldr	r3, [pc, #348]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d1f0      	bne.n	800df98 <HAL_RCC_OscConfig+0x110>
 800dfb6:	e000      	b.n	800dfba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dfb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f003 0302 	and.w	r3, r3, #2
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d069      	beq.n	800e09a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800dfc6:	4b50      	ldr	r3, [pc, #320]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800dfc8:	689b      	ldr	r3, [r3, #8]
 800dfca:	f003 030c 	and.w	r3, r3, #12
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00b      	beq.n	800dfea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dfd2:	4b4d      	ldr	r3, [pc, #308]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800dfd4:	689b      	ldr	r3, [r3, #8]
 800dfd6:	f003 030c 	and.w	r3, r3, #12
 800dfda:	2b08      	cmp	r3, #8
 800dfdc:	d11c      	bne.n	800e018 <HAL_RCC_OscConfig+0x190>
 800dfde:	4b4a      	ldr	r3, [pc, #296]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d116      	bne.n	800e018 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dfea:	4b47      	ldr	r3, [pc, #284]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f003 0302 	and.w	r3, r3, #2
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d005      	beq.n	800e002 <HAL_RCC_OscConfig+0x17a>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	68db      	ldr	r3, [r3, #12]
 800dffa:	2b01      	cmp	r3, #1
 800dffc:	d001      	beq.n	800e002 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800dffe:	2301      	movs	r3, #1
 800e000:	e1df      	b.n	800e3c2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e002:	4b41      	ldr	r3, [pc, #260]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	691b      	ldr	r3, [r3, #16]
 800e00e:	00db      	lsls	r3, r3, #3
 800e010:	493d      	ldr	r1, [pc, #244]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800e012:	4313      	orrs	r3, r2
 800e014:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e016:	e040      	b.n	800e09a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	68db      	ldr	r3, [r3, #12]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d023      	beq.n	800e068 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e020:	4b39      	ldr	r3, [pc, #228]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	4a38      	ldr	r2, [pc, #224]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800e026:	f043 0301 	orr.w	r3, r3, #1
 800e02a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e02c:	f7fa ff2a 	bl	8008e84 <HAL_GetTick>
 800e030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e032:	e008      	b.n	800e046 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e034:	f7fa ff26 	bl	8008e84 <HAL_GetTick>
 800e038:	4602      	mov	r2, r0
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	1ad3      	subs	r3, r2, r3
 800e03e:	2b02      	cmp	r3, #2
 800e040:	d901      	bls.n	800e046 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800e042:	2303      	movs	r3, #3
 800e044:	e1bd      	b.n	800e3c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e046:	4b30      	ldr	r3, [pc, #192]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f003 0302 	and.w	r3, r3, #2
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d0f0      	beq.n	800e034 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e052:	4b2d      	ldr	r3, [pc, #180]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	691b      	ldr	r3, [r3, #16]
 800e05e:	00db      	lsls	r3, r3, #3
 800e060:	4929      	ldr	r1, [pc, #164]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800e062:	4313      	orrs	r3, r2
 800e064:	600b      	str	r3, [r1, #0]
 800e066:	e018      	b.n	800e09a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e068:	4b27      	ldr	r3, [pc, #156]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4a26      	ldr	r2, [pc, #152]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800e06e:	f023 0301 	bic.w	r3, r3, #1
 800e072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e074:	f7fa ff06 	bl	8008e84 <HAL_GetTick>
 800e078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e07a:	e008      	b.n	800e08e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e07c:	f7fa ff02 	bl	8008e84 <HAL_GetTick>
 800e080:	4602      	mov	r2, r0
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	1ad3      	subs	r3, r2, r3
 800e086:	2b02      	cmp	r3, #2
 800e088:	d901      	bls.n	800e08e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800e08a:	2303      	movs	r3, #3
 800e08c:	e199      	b.n	800e3c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e08e:	4b1e      	ldr	r3, [pc, #120]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f003 0302 	and.w	r3, r3, #2
 800e096:	2b00      	cmp	r3, #0
 800e098:	d1f0      	bne.n	800e07c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	f003 0308 	and.w	r3, r3, #8
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d038      	beq.n	800e118 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	695b      	ldr	r3, [r3, #20]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d019      	beq.n	800e0e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e0ae:	4b16      	ldr	r3, [pc, #88]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800e0b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0b2:	4a15      	ldr	r2, [pc, #84]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800e0b4:	f043 0301 	orr.w	r3, r3, #1
 800e0b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e0ba:	f7fa fee3 	bl	8008e84 <HAL_GetTick>
 800e0be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e0c0:	e008      	b.n	800e0d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e0c2:	f7fa fedf 	bl	8008e84 <HAL_GetTick>
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	1ad3      	subs	r3, r2, r3
 800e0cc:	2b02      	cmp	r3, #2
 800e0ce:	d901      	bls.n	800e0d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800e0d0:	2303      	movs	r3, #3
 800e0d2:	e176      	b.n	800e3c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e0d4:	4b0c      	ldr	r3, [pc, #48]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800e0d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0d8:	f003 0302 	and.w	r3, r3, #2
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d0f0      	beq.n	800e0c2 <HAL_RCC_OscConfig+0x23a>
 800e0e0:	e01a      	b.n	800e118 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e0e2:	4b09      	ldr	r3, [pc, #36]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800e0e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0e6:	4a08      	ldr	r2, [pc, #32]	; (800e108 <HAL_RCC_OscConfig+0x280>)
 800e0e8:	f023 0301 	bic.w	r3, r3, #1
 800e0ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e0ee:	f7fa fec9 	bl	8008e84 <HAL_GetTick>
 800e0f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e0f4:	e00a      	b.n	800e10c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e0f6:	f7fa fec5 	bl	8008e84 <HAL_GetTick>
 800e0fa:	4602      	mov	r2, r0
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	1ad3      	subs	r3, r2, r3
 800e100:	2b02      	cmp	r3, #2
 800e102:	d903      	bls.n	800e10c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800e104:	2303      	movs	r3, #3
 800e106:	e15c      	b.n	800e3c2 <HAL_RCC_OscConfig+0x53a>
 800e108:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e10c:	4b91      	ldr	r3, [pc, #580]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e10e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e110:	f003 0302 	and.w	r3, r3, #2
 800e114:	2b00      	cmp	r3, #0
 800e116:	d1ee      	bne.n	800e0f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f003 0304 	and.w	r3, r3, #4
 800e120:	2b00      	cmp	r3, #0
 800e122:	f000 80a4 	beq.w	800e26e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e126:	4b8b      	ldr	r3, [pc, #556]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e12a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d10d      	bne.n	800e14e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800e132:	4b88      	ldr	r3, [pc, #544]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e136:	4a87      	ldr	r2, [pc, #540]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e13c:	6413      	str	r3, [r2, #64]	; 0x40
 800e13e:	4b85      	ldr	r3, [pc, #532]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e146:	60bb      	str	r3, [r7, #8]
 800e148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e14a:	2301      	movs	r3, #1
 800e14c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e14e:	4b82      	ldr	r3, [pc, #520]	; (800e358 <HAL_RCC_OscConfig+0x4d0>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e156:	2b00      	cmp	r3, #0
 800e158:	d118      	bne.n	800e18c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800e15a:	4b7f      	ldr	r3, [pc, #508]	; (800e358 <HAL_RCC_OscConfig+0x4d0>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	4a7e      	ldr	r2, [pc, #504]	; (800e358 <HAL_RCC_OscConfig+0x4d0>)
 800e160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e166:	f7fa fe8d 	bl	8008e84 <HAL_GetTick>
 800e16a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e16c:	e008      	b.n	800e180 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e16e:	f7fa fe89 	bl	8008e84 <HAL_GetTick>
 800e172:	4602      	mov	r2, r0
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	1ad3      	subs	r3, r2, r3
 800e178:	2b64      	cmp	r3, #100	; 0x64
 800e17a:	d901      	bls.n	800e180 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800e17c:	2303      	movs	r3, #3
 800e17e:	e120      	b.n	800e3c2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e180:	4b75      	ldr	r3, [pc, #468]	; (800e358 <HAL_RCC_OscConfig+0x4d0>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d0f0      	beq.n	800e16e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	689b      	ldr	r3, [r3, #8]
 800e190:	2b01      	cmp	r3, #1
 800e192:	d106      	bne.n	800e1a2 <HAL_RCC_OscConfig+0x31a>
 800e194:	4b6f      	ldr	r3, [pc, #444]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e198:	4a6e      	ldr	r2, [pc, #440]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e19a:	f043 0301 	orr.w	r3, r3, #1
 800e19e:	6713      	str	r3, [r2, #112]	; 0x70
 800e1a0:	e02d      	b.n	800e1fe <HAL_RCC_OscConfig+0x376>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	689b      	ldr	r3, [r3, #8]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d10c      	bne.n	800e1c4 <HAL_RCC_OscConfig+0x33c>
 800e1aa:	4b6a      	ldr	r3, [pc, #424]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e1ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1ae:	4a69      	ldr	r2, [pc, #420]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e1b0:	f023 0301 	bic.w	r3, r3, #1
 800e1b4:	6713      	str	r3, [r2, #112]	; 0x70
 800e1b6:	4b67      	ldr	r3, [pc, #412]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e1b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1ba:	4a66      	ldr	r2, [pc, #408]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e1bc:	f023 0304 	bic.w	r3, r3, #4
 800e1c0:	6713      	str	r3, [r2, #112]	; 0x70
 800e1c2:	e01c      	b.n	800e1fe <HAL_RCC_OscConfig+0x376>
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	689b      	ldr	r3, [r3, #8]
 800e1c8:	2b05      	cmp	r3, #5
 800e1ca:	d10c      	bne.n	800e1e6 <HAL_RCC_OscConfig+0x35e>
 800e1cc:	4b61      	ldr	r3, [pc, #388]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e1ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1d0:	4a60      	ldr	r2, [pc, #384]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e1d2:	f043 0304 	orr.w	r3, r3, #4
 800e1d6:	6713      	str	r3, [r2, #112]	; 0x70
 800e1d8:	4b5e      	ldr	r3, [pc, #376]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e1da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1dc:	4a5d      	ldr	r2, [pc, #372]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e1de:	f043 0301 	orr.w	r3, r3, #1
 800e1e2:	6713      	str	r3, [r2, #112]	; 0x70
 800e1e4:	e00b      	b.n	800e1fe <HAL_RCC_OscConfig+0x376>
 800e1e6:	4b5b      	ldr	r3, [pc, #364]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e1e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1ea:	4a5a      	ldr	r2, [pc, #360]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e1ec:	f023 0301 	bic.w	r3, r3, #1
 800e1f0:	6713      	str	r3, [r2, #112]	; 0x70
 800e1f2:	4b58      	ldr	r3, [pc, #352]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e1f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1f6:	4a57      	ldr	r2, [pc, #348]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e1f8:	f023 0304 	bic.w	r3, r3, #4
 800e1fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	689b      	ldr	r3, [r3, #8]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d015      	beq.n	800e232 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e206:	f7fa fe3d 	bl	8008e84 <HAL_GetTick>
 800e20a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e20c:	e00a      	b.n	800e224 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e20e:	f7fa fe39 	bl	8008e84 <HAL_GetTick>
 800e212:	4602      	mov	r2, r0
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	1ad3      	subs	r3, r2, r3
 800e218:	f241 3288 	movw	r2, #5000	; 0x1388
 800e21c:	4293      	cmp	r3, r2
 800e21e:	d901      	bls.n	800e224 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800e220:	2303      	movs	r3, #3
 800e222:	e0ce      	b.n	800e3c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e224:	4b4b      	ldr	r3, [pc, #300]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e228:	f003 0302 	and.w	r3, r3, #2
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d0ee      	beq.n	800e20e <HAL_RCC_OscConfig+0x386>
 800e230:	e014      	b.n	800e25c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e232:	f7fa fe27 	bl	8008e84 <HAL_GetTick>
 800e236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e238:	e00a      	b.n	800e250 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e23a:	f7fa fe23 	bl	8008e84 <HAL_GetTick>
 800e23e:	4602      	mov	r2, r0
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	1ad3      	subs	r3, r2, r3
 800e244:	f241 3288 	movw	r2, #5000	; 0x1388
 800e248:	4293      	cmp	r3, r2
 800e24a:	d901      	bls.n	800e250 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800e24c:	2303      	movs	r3, #3
 800e24e:	e0b8      	b.n	800e3c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e250:	4b40      	ldr	r3, [pc, #256]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e254:	f003 0302 	and.w	r3, r3, #2
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d1ee      	bne.n	800e23a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e25c:	7dfb      	ldrb	r3, [r7, #23]
 800e25e:	2b01      	cmp	r3, #1
 800e260:	d105      	bne.n	800e26e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e262:	4b3c      	ldr	r3, [pc, #240]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e266:	4a3b      	ldr	r2, [pc, #236]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e26c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	699b      	ldr	r3, [r3, #24]
 800e272:	2b00      	cmp	r3, #0
 800e274:	f000 80a4 	beq.w	800e3c0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e278:	4b36      	ldr	r3, [pc, #216]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	f003 030c 	and.w	r3, r3, #12
 800e280:	2b08      	cmp	r3, #8
 800e282:	d06b      	beq.n	800e35c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	699b      	ldr	r3, [r3, #24]
 800e288:	2b02      	cmp	r3, #2
 800e28a:	d149      	bne.n	800e320 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e28c:	4b31      	ldr	r3, [pc, #196]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4a30      	ldr	r2, [pc, #192]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e298:	f7fa fdf4 	bl	8008e84 <HAL_GetTick>
 800e29c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e29e:	e008      	b.n	800e2b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e2a0:	f7fa fdf0 	bl	8008e84 <HAL_GetTick>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	1ad3      	subs	r3, r2, r3
 800e2aa:	2b02      	cmp	r3, #2
 800e2ac:	d901      	bls.n	800e2b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800e2ae:	2303      	movs	r3, #3
 800e2b0:	e087      	b.n	800e3c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e2b2:	4b28      	ldr	r3, [pc, #160]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d1f0      	bne.n	800e2a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	69da      	ldr	r2, [r3, #28]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6a1b      	ldr	r3, [r3, #32]
 800e2c6:	431a      	orrs	r2, r3
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2cc:	019b      	lsls	r3, r3, #6
 800e2ce:	431a      	orrs	r2, r3
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2d4:	085b      	lsrs	r3, r3, #1
 800e2d6:	3b01      	subs	r3, #1
 800e2d8:	041b      	lsls	r3, r3, #16
 800e2da:	431a      	orrs	r2, r3
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2e0:	061b      	lsls	r3, r3, #24
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	4a1b      	ldr	r2, [pc, #108]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e2e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e2ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e2ec:	4b19      	ldr	r3, [pc, #100]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	4a18      	ldr	r2, [pc, #96]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e2f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e2f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e2f8:	f7fa fdc4 	bl	8008e84 <HAL_GetTick>
 800e2fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e2fe:	e008      	b.n	800e312 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e300:	f7fa fdc0 	bl	8008e84 <HAL_GetTick>
 800e304:	4602      	mov	r2, r0
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	1ad3      	subs	r3, r2, r3
 800e30a:	2b02      	cmp	r3, #2
 800e30c:	d901      	bls.n	800e312 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800e30e:	2303      	movs	r3, #3
 800e310:	e057      	b.n	800e3c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e312:	4b10      	ldr	r3, [pc, #64]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d0f0      	beq.n	800e300 <HAL_RCC_OscConfig+0x478>
 800e31e:	e04f      	b.n	800e3c0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e320:	4b0c      	ldr	r3, [pc, #48]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4a0b      	ldr	r2, [pc, #44]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e32a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e32c:	f7fa fdaa 	bl	8008e84 <HAL_GetTick>
 800e330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e332:	e008      	b.n	800e346 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e334:	f7fa fda6 	bl	8008e84 <HAL_GetTick>
 800e338:	4602      	mov	r2, r0
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	1ad3      	subs	r3, r2, r3
 800e33e:	2b02      	cmp	r3, #2
 800e340:	d901      	bls.n	800e346 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800e342:	2303      	movs	r3, #3
 800e344:	e03d      	b.n	800e3c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e346:	4b03      	ldr	r3, [pc, #12]	; (800e354 <HAL_RCC_OscConfig+0x4cc>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d1f0      	bne.n	800e334 <HAL_RCC_OscConfig+0x4ac>
 800e352:	e035      	b.n	800e3c0 <HAL_RCC_OscConfig+0x538>
 800e354:	40023800 	.word	0x40023800
 800e358:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800e35c:	4b1b      	ldr	r3, [pc, #108]	; (800e3cc <HAL_RCC_OscConfig+0x544>)
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	699b      	ldr	r3, [r3, #24]
 800e366:	2b01      	cmp	r3, #1
 800e368:	d028      	beq.n	800e3bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e374:	429a      	cmp	r2, r3
 800e376:	d121      	bne.n	800e3bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e382:	429a      	cmp	r2, r3
 800e384:	d11a      	bne.n	800e3bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e386:	68fa      	ldr	r2, [r7, #12]
 800e388:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e38c:	4013      	ands	r3, r2
 800e38e:	687a      	ldr	r2, [r7, #4]
 800e390:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e392:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e394:	4293      	cmp	r3, r2
 800e396:	d111      	bne.n	800e3bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3a2:	085b      	lsrs	r3, r3, #1
 800e3a4:	3b01      	subs	r3, #1
 800e3a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d107      	bne.n	800e3bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d001      	beq.n	800e3c0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	e000      	b.n	800e3c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800e3c0:	2300      	movs	r3, #0
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3718      	adds	r7, #24
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	40023800 	.word	0x40023800

0800e3d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b084      	sub	sp, #16
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d101      	bne.n	800e3e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	e0d0      	b.n	800e58a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e3e8:	4b6a      	ldr	r3, [pc, #424]	; (800e594 <HAL_RCC_ClockConfig+0x1c4>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f003 030f 	and.w	r3, r3, #15
 800e3f0:	683a      	ldr	r2, [r7, #0]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d910      	bls.n	800e418 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e3f6:	4b67      	ldr	r3, [pc, #412]	; (800e594 <HAL_RCC_ClockConfig+0x1c4>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f023 020f 	bic.w	r2, r3, #15
 800e3fe:	4965      	ldr	r1, [pc, #404]	; (800e594 <HAL_RCC_ClockConfig+0x1c4>)
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	4313      	orrs	r3, r2
 800e404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e406:	4b63      	ldr	r3, [pc, #396]	; (800e594 <HAL_RCC_ClockConfig+0x1c4>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f003 030f 	and.w	r3, r3, #15
 800e40e:	683a      	ldr	r2, [r7, #0]
 800e410:	429a      	cmp	r2, r3
 800e412:	d001      	beq.n	800e418 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800e414:	2301      	movs	r3, #1
 800e416:	e0b8      	b.n	800e58a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f003 0302 	and.w	r3, r3, #2
 800e420:	2b00      	cmp	r3, #0
 800e422:	d020      	beq.n	800e466 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f003 0304 	and.w	r3, r3, #4
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d005      	beq.n	800e43c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e430:	4b59      	ldr	r3, [pc, #356]	; (800e598 <HAL_RCC_ClockConfig+0x1c8>)
 800e432:	689b      	ldr	r3, [r3, #8]
 800e434:	4a58      	ldr	r2, [pc, #352]	; (800e598 <HAL_RCC_ClockConfig+0x1c8>)
 800e436:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e43a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f003 0308 	and.w	r3, r3, #8
 800e444:	2b00      	cmp	r3, #0
 800e446:	d005      	beq.n	800e454 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e448:	4b53      	ldr	r3, [pc, #332]	; (800e598 <HAL_RCC_ClockConfig+0x1c8>)
 800e44a:	689b      	ldr	r3, [r3, #8]
 800e44c:	4a52      	ldr	r2, [pc, #328]	; (800e598 <HAL_RCC_ClockConfig+0x1c8>)
 800e44e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e452:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e454:	4b50      	ldr	r3, [pc, #320]	; (800e598 <HAL_RCC_ClockConfig+0x1c8>)
 800e456:	689b      	ldr	r3, [r3, #8]
 800e458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	689b      	ldr	r3, [r3, #8]
 800e460:	494d      	ldr	r1, [pc, #308]	; (800e598 <HAL_RCC_ClockConfig+0x1c8>)
 800e462:	4313      	orrs	r3, r2
 800e464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f003 0301 	and.w	r3, r3, #1
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d040      	beq.n	800e4f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	685b      	ldr	r3, [r3, #4]
 800e476:	2b01      	cmp	r3, #1
 800e478:	d107      	bne.n	800e48a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e47a:	4b47      	ldr	r3, [pc, #284]	; (800e598 <HAL_RCC_ClockConfig+0x1c8>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e482:	2b00      	cmp	r3, #0
 800e484:	d115      	bne.n	800e4b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e486:	2301      	movs	r3, #1
 800e488:	e07f      	b.n	800e58a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	2b02      	cmp	r3, #2
 800e490:	d107      	bne.n	800e4a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e492:	4b41      	ldr	r3, [pc, #260]	; (800e598 <HAL_RCC_ClockConfig+0x1c8>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d109      	bne.n	800e4b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e49e:	2301      	movs	r3, #1
 800e4a0:	e073      	b.n	800e58a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e4a2:	4b3d      	ldr	r3, [pc, #244]	; (800e598 <HAL_RCC_ClockConfig+0x1c8>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f003 0302 	and.w	r3, r3, #2
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d101      	bne.n	800e4b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	e06b      	b.n	800e58a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e4b2:	4b39      	ldr	r3, [pc, #228]	; (800e598 <HAL_RCC_ClockConfig+0x1c8>)
 800e4b4:	689b      	ldr	r3, [r3, #8]
 800e4b6:	f023 0203 	bic.w	r2, r3, #3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	4936      	ldr	r1, [pc, #216]	; (800e598 <HAL_RCC_ClockConfig+0x1c8>)
 800e4c0:	4313      	orrs	r3, r2
 800e4c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e4c4:	f7fa fcde 	bl	8008e84 <HAL_GetTick>
 800e4c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e4ca:	e00a      	b.n	800e4e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e4cc:	f7fa fcda 	bl	8008e84 <HAL_GetTick>
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	1ad3      	subs	r3, r2, r3
 800e4d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d901      	bls.n	800e4e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800e4de:	2303      	movs	r3, #3
 800e4e0:	e053      	b.n	800e58a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e4e2:	4b2d      	ldr	r3, [pc, #180]	; (800e598 <HAL_RCC_ClockConfig+0x1c8>)
 800e4e4:	689b      	ldr	r3, [r3, #8]
 800e4e6:	f003 020c 	and.w	r2, r3, #12
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	009b      	lsls	r3, r3, #2
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d1eb      	bne.n	800e4cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e4f4:	4b27      	ldr	r3, [pc, #156]	; (800e594 <HAL_RCC_ClockConfig+0x1c4>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f003 030f 	and.w	r3, r3, #15
 800e4fc:	683a      	ldr	r2, [r7, #0]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d210      	bcs.n	800e524 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e502:	4b24      	ldr	r3, [pc, #144]	; (800e594 <HAL_RCC_ClockConfig+0x1c4>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	f023 020f 	bic.w	r2, r3, #15
 800e50a:	4922      	ldr	r1, [pc, #136]	; (800e594 <HAL_RCC_ClockConfig+0x1c4>)
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	4313      	orrs	r3, r2
 800e510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e512:	4b20      	ldr	r3, [pc, #128]	; (800e594 <HAL_RCC_ClockConfig+0x1c4>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	f003 030f 	and.w	r3, r3, #15
 800e51a:	683a      	ldr	r2, [r7, #0]
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d001      	beq.n	800e524 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800e520:	2301      	movs	r3, #1
 800e522:	e032      	b.n	800e58a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	f003 0304 	and.w	r3, r3, #4
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d008      	beq.n	800e542 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e530:	4b19      	ldr	r3, [pc, #100]	; (800e598 <HAL_RCC_ClockConfig+0x1c8>)
 800e532:	689b      	ldr	r3, [r3, #8]
 800e534:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	68db      	ldr	r3, [r3, #12]
 800e53c:	4916      	ldr	r1, [pc, #88]	; (800e598 <HAL_RCC_ClockConfig+0x1c8>)
 800e53e:	4313      	orrs	r3, r2
 800e540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f003 0308 	and.w	r3, r3, #8
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d009      	beq.n	800e562 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800e54e:	4b12      	ldr	r3, [pc, #72]	; (800e598 <HAL_RCC_ClockConfig+0x1c8>)
 800e550:	689b      	ldr	r3, [r3, #8]
 800e552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	691b      	ldr	r3, [r3, #16]
 800e55a:	00db      	lsls	r3, r3, #3
 800e55c:	490e      	ldr	r1, [pc, #56]	; (800e598 <HAL_RCC_ClockConfig+0x1c8>)
 800e55e:	4313      	orrs	r3, r2
 800e560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800e562:	f000 f821 	bl	800e5a8 <HAL_RCC_GetSysClockFreq>
 800e566:	4602      	mov	r2, r0
 800e568:	4b0b      	ldr	r3, [pc, #44]	; (800e598 <HAL_RCC_ClockConfig+0x1c8>)
 800e56a:	689b      	ldr	r3, [r3, #8]
 800e56c:	091b      	lsrs	r3, r3, #4
 800e56e:	f003 030f 	and.w	r3, r3, #15
 800e572:	490a      	ldr	r1, [pc, #40]	; (800e59c <HAL_RCC_ClockConfig+0x1cc>)
 800e574:	5ccb      	ldrb	r3, [r1, r3]
 800e576:	fa22 f303 	lsr.w	r3, r2, r3
 800e57a:	4a09      	ldr	r2, [pc, #36]	; (800e5a0 <HAL_RCC_ClockConfig+0x1d0>)
 800e57c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800e57e:	4b09      	ldr	r3, [pc, #36]	; (800e5a4 <HAL_RCC_ClockConfig+0x1d4>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	4618      	mov	r0, r3
 800e584:	f7fa fc3a 	bl	8008dfc <HAL_InitTick>

  return HAL_OK;
 800e588:	2300      	movs	r3, #0
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3710      	adds	r7, #16
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	40023c00 	.word	0x40023c00
 800e598:	40023800 	.word	0x40023800
 800e59c:	080223fc 	.word	0x080223fc
 800e5a0:	20000224 	.word	0x20000224
 800e5a4:	20000228 	.word	0x20000228

0800e5a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e5a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e5ac:	b084      	sub	sp, #16
 800e5ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	607b      	str	r3, [r7, #4]
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	60fb      	str	r3, [r7, #12]
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e5c0:	4b67      	ldr	r3, [pc, #412]	; (800e760 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e5c2:	689b      	ldr	r3, [r3, #8]
 800e5c4:	f003 030c 	and.w	r3, r3, #12
 800e5c8:	2b08      	cmp	r3, #8
 800e5ca:	d00d      	beq.n	800e5e8 <HAL_RCC_GetSysClockFreq+0x40>
 800e5cc:	2b08      	cmp	r3, #8
 800e5ce:	f200 80bd 	bhi.w	800e74c <HAL_RCC_GetSysClockFreq+0x1a4>
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d002      	beq.n	800e5dc <HAL_RCC_GetSysClockFreq+0x34>
 800e5d6:	2b04      	cmp	r3, #4
 800e5d8:	d003      	beq.n	800e5e2 <HAL_RCC_GetSysClockFreq+0x3a>
 800e5da:	e0b7      	b.n	800e74c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e5dc:	4b61      	ldr	r3, [pc, #388]	; (800e764 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800e5de:	60bb      	str	r3, [r7, #8]
      break;
 800e5e0:	e0b7      	b.n	800e752 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e5e2:	4b61      	ldr	r3, [pc, #388]	; (800e768 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800e5e4:	60bb      	str	r3, [r7, #8]
      break;
 800e5e6:	e0b4      	b.n	800e752 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e5e8:	4b5d      	ldr	r3, [pc, #372]	; (800e760 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e5ea:	685b      	ldr	r3, [r3, #4]
 800e5ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5f0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800e5f2:	4b5b      	ldr	r3, [pc, #364]	; (800e760 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e5f4:	685b      	ldr	r3, [r3, #4]
 800e5f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d04d      	beq.n	800e69a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e5fe:	4b58      	ldr	r3, [pc, #352]	; (800e760 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	099b      	lsrs	r3, r3, #6
 800e604:	461a      	mov	r2, r3
 800e606:	f04f 0300 	mov.w	r3, #0
 800e60a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e60e:	f04f 0100 	mov.w	r1, #0
 800e612:	ea02 0800 	and.w	r8, r2, r0
 800e616:	ea03 0901 	and.w	r9, r3, r1
 800e61a:	4640      	mov	r0, r8
 800e61c:	4649      	mov	r1, r9
 800e61e:	f04f 0200 	mov.w	r2, #0
 800e622:	f04f 0300 	mov.w	r3, #0
 800e626:	014b      	lsls	r3, r1, #5
 800e628:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e62c:	0142      	lsls	r2, r0, #5
 800e62e:	4610      	mov	r0, r2
 800e630:	4619      	mov	r1, r3
 800e632:	ebb0 0008 	subs.w	r0, r0, r8
 800e636:	eb61 0109 	sbc.w	r1, r1, r9
 800e63a:	f04f 0200 	mov.w	r2, #0
 800e63e:	f04f 0300 	mov.w	r3, #0
 800e642:	018b      	lsls	r3, r1, #6
 800e644:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e648:	0182      	lsls	r2, r0, #6
 800e64a:	1a12      	subs	r2, r2, r0
 800e64c:	eb63 0301 	sbc.w	r3, r3, r1
 800e650:	f04f 0000 	mov.w	r0, #0
 800e654:	f04f 0100 	mov.w	r1, #0
 800e658:	00d9      	lsls	r1, r3, #3
 800e65a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e65e:	00d0      	lsls	r0, r2, #3
 800e660:	4602      	mov	r2, r0
 800e662:	460b      	mov	r3, r1
 800e664:	eb12 0208 	adds.w	r2, r2, r8
 800e668:	eb43 0309 	adc.w	r3, r3, r9
 800e66c:	f04f 0000 	mov.w	r0, #0
 800e670:	f04f 0100 	mov.w	r1, #0
 800e674:	0259      	lsls	r1, r3, #9
 800e676:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800e67a:	0250      	lsls	r0, r2, #9
 800e67c:	4602      	mov	r2, r0
 800e67e:	460b      	mov	r3, r1
 800e680:	4610      	mov	r0, r2
 800e682:	4619      	mov	r1, r3
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	461a      	mov	r2, r3
 800e688:	f04f 0300 	mov.w	r3, #0
 800e68c:	f7f2 fb34 	bl	8000cf8 <__aeabi_uldivmod>
 800e690:	4602      	mov	r2, r0
 800e692:	460b      	mov	r3, r1
 800e694:	4613      	mov	r3, r2
 800e696:	60fb      	str	r3, [r7, #12]
 800e698:	e04a      	b.n	800e730 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e69a:	4b31      	ldr	r3, [pc, #196]	; (800e760 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	099b      	lsrs	r3, r3, #6
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	f04f 0300 	mov.w	r3, #0
 800e6a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e6aa:	f04f 0100 	mov.w	r1, #0
 800e6ae:	ea02 0400 	and.w	r4, r2, r0
 800e6b2:	ea03 0501 	and.w	r5, r3, r1
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	4629      	mov	r1, r5
 800e6ba:	f04f 0200 	mov.w	r2, #0
 800e6be:	f04f 0300 	mov.w	r3, #0
 800e6c2:	014b      	lsls	r3, r1, #5
 800e6c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e6c8:	0142      	lsls	r2, r0, #5
 800e6ca:	4610      	mov	r0, r2
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	1b00      	subs	r0, r0, r4
 800e6d0:	eb61 0105 	sbc.w	r1, r1, r5
 800e6d4:	f04f 0200 	mov.w	r2, #0
 800e6d8:	f04f 0300 	mov.w	r3, #0
 800e6dc:	018b      	lsls	r3, r1, #6
 800e6de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e6e2:	0182      	lsls	r2, r0, #6
 800e6e4:	1a12      	subs	r2, r2, r0
 800e6e6:	eb63 0301 	sbc.w	r3, r3, r1
 800e6ea:	f04f 0000 	mov.w	r0, #0
 800e6ee:	f04f 0100 	mov.w	r1, #0
 800e6f2:	00d9      	lsls	r1, r3, #3
 800e6f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e6f8:	00d0      	lsls	r0, r2, #3
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	1912      	adds	r2, r2, r4
 800e700:	eb45 0303 	adc.w	r3, r5, r3
 800e704:	f04f 0000 	mov.w	r0, #0
 800e708:	f04f 0100 	mov.w	r1, #0
 800e70c:	0299      	lsls	r1, r3, #10
 800e70e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800e712:	0290      	lsls	r0, r2, #10
 800e714:	4602      	mov	r2, r0
 800e716:	460b      	mov	r3, r1
 800e718:	4610      	mov	r0, r2
 800e71a:	4619      	mov	r1, r3
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	461a      	mov	r2, r3
 800e720:	f04f 0300 	mov.w	r3, #0
 800e724:	f7f2 fae8 	bl	8000cf8 <__aeabi_uldivmod>
 800e728:	4602      	mov	r2, r0
 800e72a:	460b      	mov	r3, r1
 800e72c:	4613      	mov	r3, r2
 800e72e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800e730:	4b0b      	ldr	r3, [pc, #44]	; (800e760 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	0c1b      	lsrs	r3, r3, #16
 800e736:	f003 0303 	and.w	r3, r3, #3
 800e73a:	3301      	adds	r3, #1
 800e73c:	005b      	lsls	r3, r3, #1
 800e73e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800e740:	68fa      	ldr	r2, [r7, #12]
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	fbb2 f3f3 	udiv	r3, r2, r3
 800e748:	60bb      	str	r3, [r7, #8]
      break;
 800e74a:	e002      	b.n	800e752 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e74c:	4b05      	ldr	r3, [pc, #20]	; (800e764 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800e74e:	60bb      	str	r3, [r7, #8]
      break;
 800e750:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e752:	68bb      	ldr	r3, [r7, #8]
}
 800e754:	4618      	mov	r0, r3
 800e756:	3710      	adds	r7, #16
 800e758:	46bd      	mov	sp, r7
 800e75a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e75e:	bf00      	nop
 800e760:	40023800 	.word	0x40023800
 800e764:	00f42400 	.word	0x00f42400
 800e768:	007a1200 	.word	0x007a1200

0800e76c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e76c:	b480      	push	{r7}
 800e76e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e770:	4b03      	ldr	r3, [pc, #12]	; (800e780 <HAL_RCC_GetHCLKFreq+0x14>)
 800e772:	681b      	ldr	r3, [r3, #0]
}
 800e774:	4618      	mov	r0, r3
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr
 800e77e:	bf00      	nop
 800e780:	20000224 	.word	0x20000224

0800e784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e788:	f7ff fff0 	bl	800e76c <HAL_RCC_GetHCLKFreq>
 800e78c:	4602      	mov	r2, r0
 800e78e:	4b05      	ldr	r3, [pc, #20]	; (800e7a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e790:	689b      	ldr	r3, [r3, #8]
 800e792:	0a9b      	lsrs	r3, r3, #10
 800e794:	f003 0307 	and.w	r3, r3, #7
 800e798:	4903      	ldr	r1, [pc, #12]	; (800e7a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e79a:	5ccb      	ldrb	r3, [r1, r3]
 800e79c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	40023800 	.word	0x40023800
 800e7a8:	0802240c 	.word	0x0802240c

0800e7ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e7b0:	f7ff ffdc 	bl	800e76c <HAL_RCC_GetHCLKFreq>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	4b05      	ldr	r3, [pc, #20]	; (800e7cc <HAL_RCC_GetPCLK2Freq+0x20>)
 800e7b8:	689b      	ldr	r3, [r3, #8]
 800e7ba:	0b5b      	lsrs	r3, r3, #13
 800e7bc:	f003 0307 	and.w	r3, r3, #7
 800e7c0:	4903      	ldr	r1, [pc, #12]	; (800e7d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e7c2:	5ccb      	ldrb	r3, [r1, r3]
 800e7c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	bd80      	pop	{r7, pc}
 800e7cc:	40023800 	.word	0x40023800
 800e7d0:	0802240c 	.word	0x0802240c

0800e7d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b088      	sub	sp, #32
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f003 0301 	and.w	r3, r3, #1
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d012      	beq.n	800e81e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e7f8:	4b65      	ldr	r3, [pc, #404]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e7fa:	689b      	ldr	r3, [r3, #8]
 800e7fc:	4a64      	ldr	r2, [pc, #400]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e7fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e802:	6093      	str	r3, [r2, #8]
 800e804:	4b62      	ldr	r3, [pc, #392]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e806:	689a      	ldr	r2, [r3, #8]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e80c:	4960      	ldr	r1, [pc, #384]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e80e:	4313      	orrs	r3, r2
 800e810:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e816:	2b00      	cmp	r3, #0
 800e818:	d101      	bne.n	800e81e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800e81a:	2301      	movs	r3, #1
 800e81c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e826:	2b00      	cmp	r3, #0
 800e828:	d017      	beq.n	800e85a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e82a:	4b59      	ldr	r3, [pc, #356]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e82c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e830:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e838:	4955      	ldr	r1, [pc, #340]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e83a:	4313      	orrs	r3, r2
 800e83c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e848:	d101      	bne.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800e84a:	2301      	movs	r3, #1
 800e84c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e852:	2b00      	cmp	r3, #0
 800e854:	d101      	bne.n	800e85a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800e856:	2301      	movs	r3, #1
 800e858:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e862:	2b00      	cmp	r3, #0
 800e864:	d017      	beq.n	800e896 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e866:	4b4a      	ldr	r3, [pc, #296]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e86c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e874:	4946      	ldr	r1, [pc, #280]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e876:	4313      	orrs	r3, r2
 800e878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e884:	d101      	bne.n	800e88a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800e886:	2301      	movs	r3, #1
 800e888:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d101      	bne.n	800e896 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800e892:	2301      	movs	r3, #1
 800e894:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f003 0320 	and.w	r3, r3, #32
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	f000 808b 	beq.w	800e9ba <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e8a4:	4b3a      	ldr	r3, [pc, #232]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e8a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8a8:	4a39      	ldr	r2, [pc, #228]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e8aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e8ae:	6413      	str	r3, [r2, #64]	; 0x40
 800e8b0:	4b37      	ldr	r3, [pc, #220]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e8b8:	60fb      	str	r3, [r7, #12]
 800e8ba:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e8bc:	4b35      	ldr	r3, [pc, #212]	; (800e994 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	4a34      	ldr	r2, [pc, #208]	; (800e994 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800e8c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e8c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e8c8:	f7fa fadc 	bl	8008e84 <HAL_GetTick>
 800e8cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e8ce:	e008      	b.n	800e8e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e8d0:	f7fa fad8 	bl	8008e84 <HAL_GetTick>
 800e8d4:	4602      	mov	r2, r0
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	1ad3      	subs	r3, r2, r3
 800e8da:	2b64      	cmp	r3, #100	; 0x64
 800e8dc:	d901      	bls.n	800e8e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e8de:	2303      	movs	r3, #3
 800e8e0:	e2bc      	b.n	800ee5c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e8e2:	4b2c      	ldr	r3, [pc, #176]	; (800e994 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d0f0      	beq.n	800e8d0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e8ee:	4b28      	ldr	r3, [pc, #160]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e8f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d035      	beq.n	800e96a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e906:	693a      	ldr	r2, [r7, #16]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d02e      	beq.n	800e96a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e90c:	4b20      	ldr	r3, [pc, #128]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e90e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e914:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e916:	4b1e      	ldr	r3, [pc, #120]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e91a:	4a1d      	ldr	r2, [pc, #116]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e91c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e920:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e922:	4b1b      	ldr	r3, [pc, #108]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e926:	4a1a      	ldr	r2, [pc, #104]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e92c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800e92e:	4a18      	ldr	r2, [pc, #96]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e934:	4b16      	ldr	r3, [pc, #88]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e938:	f003 0301 	and.w	r3, r3, #1
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d114      	bne.n	800e96a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e940:	f7fa faa0 	bl	8008e84 <HAL_GetTick>
 800e944:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e946:	e00a      	b.n	800e95e <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e948:	f7fa fa9c 	bl	8008e84 <HAL_GetTick>
 800e94c:	4602      	mov	r2, r0
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	1ad3      	subs	r3, r2, r3
 800e952:	f241 3288 	movw	r2, #5000	; 0x1388
 800e956:	4293      	cmp	r3, r2
 800e958:	d901      	bls.n	800e95e <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800e95a:	2303      	movs	r3, #3
 800e95c:	e27e      	b.n	800ee5c <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e95e:	4b0c      	ldr	r3, [pc, #48]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e962:	f003 0302 	and.w	r3, r3, #2
 800e966:	2b00      	cmp	r3, #0
 800e968:	d0ee      	beq.n	800e948 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e96e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e976:	d111      	bne.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800e978:	4b05      	ldr	r3, [pc, #20]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e97a:	689b      	ldr	r3, [r3, #8]
 800e97c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800e984:	4b04      	ldr	r3, [pc, #16]	; (800e998 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e986:	400b      	ands	r3, r1
 800e988:	4901      	ldr	r1, [pc, #4]	; (800e990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e98a:	4313      	orrs	r3, r2
 800e98c:	608b      	str	r3, [r1, #8]
 800e98e:	e00b      	b.n	800e9a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800e990:	40023800 	.word	0x40023800
 800e994:	40007000 	.word	0x40007000
 800e998:	0ffffcff 	.word	0x0ffffcff
 800e99c:	4ba4      	ldr	r3, [pc, #656]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	4aa3      	ldr	r2, [pc, #652]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800e9a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800e9a6:	6093      	str	r3, [r2, #8]
 800e9a8:	4ba1      	ldr	r3, [pc, #644]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800e9aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e9b4:	499e      	ldr	r1, [pc, #632]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f003 0310 	and.w	r3, r3, #16
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d010      	beq.n	800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e9c6:	4b9a      	ldr	r3, [pc, #616]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800e9c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9cc:	4a98      	ldr	r2, [pc, #608]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800e9ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e9d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800e9d6:	4b96      	ldr	r3, [pc, #600]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800e9d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9e0:	4993      	ldr	r1, [pc, #588]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d00a      	beq.n	800ea0a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e9f4:	4b8e      	ldr	r3, [pc, #568]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800e9f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea02:	498b      	ldr	r1, [pc, #556]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ea04:	4313      	orrs	r3, r2
 800ea06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d00a      	beq.n	800ea2c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ea16:	4b86      	ldr	r3, [pc, #536]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ea18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea24:	4982      	ldr	r1, [pc, #520]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ea26:	4313      	orrs	r3, r2
 800ea28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d00a      	beq.n	800ea4e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ea38:	4b7d      	ldr	r3, [pc, #500]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ea3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea46:	497a      	ldr	r1, [pc, #488]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ea48:	4313      	orrs	r3, r2
 800ea4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d00a      	beq.n	800ea70 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ea5a:	4b75      	ldr	r3, [pc, #468]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ea5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea60:	f023 0203 	bic.w	r2, r3, #3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea68:	4971      	ldr	r1, [pc, #452]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ea6a:	4313      	orrs	r3, r2
 800ea6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d00a      	beq.n	800ea92 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ea7c:	4b6c      	ldr	r3, [pc, #432]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ea7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea82:	f023 020c 	bic.w	r2, r3, #12
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea8a:	4969      	ldr	r1, [pc, #420]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d00a      	beq.n	800eab4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ea9e:	4b64      	ldr	r3, [pc, #400]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eaa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eaa4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaac:	4960      	ldr	r1, [pc, #384]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eaae:	4313      	orrs	r3, r2
 800eab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d00a      	beq.n	800ead6 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800eac0:	4b5b      	ldr	r3, [pc, #364]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eac6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eace:	4958      	ldr	r1, [pc, #352]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ead0:	4313      	orrs	r3, r2
 800ead2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d00a      	beq.n	800eaf8 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800eae2:	4b53      	ldr	r3, [pc, #332]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eaf0:	494f      	ldr	r1, [pc, #316]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eaf2:	4313      	orrs	r3, r2
 800eaf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d00a      	beq.n	800eb1a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800eb04:	4b4a      	ldr	r3, [pc, #296]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eb06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb12:	4947      	ldr	r1, [pc, #284]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eb14:	4313      	orrs	r3, r2
 800eb16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d00a      	beq.n	800eb3c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800eb26:	4b42      	ldr	r3, [pc, #264]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eb28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb34:	493e      	ldr	r1, [pc, #248]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eb36:	4313      	orrs	r3, r2
 800eb38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d00a      	beq.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800eb48:	4b39      	ldr	r3, [pc, #228]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eb4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb56:	4936      	ldr	r1, [pc, #216]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eb58:	4313      	orrs	r3, r2
 800eb5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d011      	beq.n	800eb8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800eb6a:	4b31      	ldr	r3, [pc, #196]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eb6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb70:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb78:	492d      	ldr	r1, [pc, #180]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eb7a:	4313      	orrs	r3, r2
 800eb7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eb88:	d101      	bne.n	800eb8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d00a      	beq.n	800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800eb9a:	4b25      	ldr	r3, [pc, #148]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eb9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eba0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eba8:	4921      	ldr	r1, [pc, #132]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ebaa:	4313      	orrs	r3, r2
 800ebac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d00a      	beq.n	800ebd2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ebbc:	4b1c      	ldr	r3, [pc, #112]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ebbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebc2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebca:	4919      	ldr	r1, [pc, #100]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ebcc:	4313      	orrs	r3, r2
 800ebce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d00a      	beq.n	800ebf4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800ebde:	4b14      	ldr	r3, [pc, #80]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ebe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebe4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebec:	4910      	ldr	r1, [pc, #64]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ebee:	4313      	orrs	r3, r2
 800ebf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ebf4:	69fb      	ldr	r3, [r7, #28]
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	d006      	beq.n	800ec08 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	f000 809d 	beq.w	800ed42 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ec08:	4b09      	ldr	r3, [pc, #36]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4a08      	ldr	r2, [pc, #32]	; (800ec30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ec0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ec12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ec14:	f7fa f936 	bl	8008e84 <HAL_GetTick>
 800ec18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ec1a:	e00b      	b.n	800ec34 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ec1c:	f7fa f932 	bl	8008e84 <HAL_GetTick>
 800ec20:	4602      	mov	r2, r0
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	1ad3      	subs	r3, r2, r3
 800ec26:	2b64      	cmp	r3, #100	; 0x64
 800ec28:	d904      	bls.n	800ec34 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ec2a:	2303      	movs	r3, #3
 800ec2c:	e116      	b.n	800ee5c <HAL_RCCEx_PeriphCLKConfig+0x688>
 800ec2e:	bf00      	nop
 800ec30:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ec34:	4b8b      	ldr	r3, [pc, #556]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d1ed      	bne.n	800ec1c <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	f003 0301 	and.w	r3, r3, #1
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d017      	beq.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d113      	bne.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ec54:	4b83      	ldr	r3, [pc, #524]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ec56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec5a:	0e1b      	lsrs	r3, r3, #24
 800ec5c:	f003 030f 	and.w	r3, r3, #15
 800ec60:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	019a      	lsls	r2, r3, #6
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	061b      	lsls	r3, r3, #24
 800ec6c:	431a      	orrs	r2, r3
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	689b      	ldr	r3, [r3, #8]
 800ec72:	071b      	lsls	r3, r3, #28
 800ec74:	497b      	ldr	r1, [pc, #492]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ec76:	4313      	orrs	r3, r2
 800ec78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d004      	beq.n	800ec92 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec90:	d00a      	beq.n	800eca8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d024      	beq.n	800ece8 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eca6:	d11f      	bne.n	800ece8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800eca8:	4b6e      	ldr	r3, [pc, #440]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ecaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecae:	0f1b      	lsrs	r3, r3, #28
 800ecb0:	f003 0307 	and.w	r3, r3, #7
 800ecb4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	685b      	ldr	r3, [r3, #4]
 800ecba:	019a      	lsls	r2, r3, #6
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	68db      	ldr	r3, [r3, #12]
 800ecc0:	061b      	lsls	r3, r3, #24
 800ecc2:	431a      	orrs	r2, r3
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	071b      	lsls	r3, r3, #28
 800ecc8:	4966      	ldr	r1, [pc, #408]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ecca:	4313      	orrs	r3, r2
 800eccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800ecd0:	4b64      	ldr	r3, [pc, #400]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ecd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ecd6:	f023 021f 	bic.w	r2, r3, #31
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	69db      	ldr	r3, [r3, #28]
 800ecde:	3b01      	subs	r3, #1
 800ece0:	4960      	ldr	r1, [pc, #384]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ece2:	4313      	orrs	r3, r2
 800ece4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d00d      	beq.n	800ed10 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	685b      	ldr	r3, [r3, #4]
 800ecf8:	019a      	lsls	r2, r3, #6
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	68db      	ldr	r3, [r3, #12]
 800ecfe:	061b      	lsls	r3, r3, #24
 800ed00:	431a      	orrs	r2, r3
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	689b      	ldr	r3, [r3, #8]
 800ed06:	071b      	lsls	r3, r3, #28
 800ed08:	4956      	ldr	r1, [pc, #344]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ed0a:	4313      	orrs	r3, r2
 800ed0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ed10:	4b54      	ldr	r3, [pc, #336]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	4a53      	ldr	r2, [pc, #332]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ed16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ed1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ed1c:	f7fa f8b2 	bl	8008e84 <HAL_GetTick>
 800ed20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ed22:	e008      	b.n	800ed36 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ed24:	f7fa f8ae 	bl	8008e84 <HAL_GetTick>
 800ed28:	4602      	mov	r2, r0
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	1ad3      	subs	r3, r2, r3
 800ed2e:	2b64      	cmp	r3, #100	; 0x64
 800ed30:	d901      	bls.n	800ed36 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ed32:	2303      	movs	r3, #3
 800ed34:	e092      	b.n	800ee5c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ed36:	4b4b      	ldr	r3, [pc, #300]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d0f0      	beq.n	800ed24 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ed42:	69bb      	ldr	r3, [r7, #24]
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	f040 8088 	bne.w	800ee5a <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ed4a:	4b46      	ldr	r3, [pc, #280]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	4a45      	ldr	r2, [pc, #276]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ed50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ed54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ed56:	f7fa f895 	bl	8008e84 <HAL_GetTick>
 800ed5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ed5c:	e008      	b.n	800ed70 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ed5e:	f7fa f891 	bl	8008e84 <HAL_GetTick>
 800ed62:	4602      	mov	r2, r0
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	1ad3      	subs	r3, r2, r3
 800ed68:	2b64      	cmp	r3, #100	; 0x64
 800ed6a:	d901      	bls.n	800ed70 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ed6c:	2303      	movs	r3, #3
 800ed6e:	e075      	b.n	800ee5c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ed70:	4b3c      	ldr	r3, [pc, #240]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ed78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ed7c:	d0ef      	beq.n	800ed5e <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d003      	beq.n	800ed92 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d009      	beq.n	800eda6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d024      	beq.n	800ede8 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d120      	bne.n	800ede8 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800eda6:	4b2f      	ldr	r3, [pc, #188]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800eda8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edac:	0c1b      	lsrs	r3, r3, #16
 800edae:	f003 0303 	and.w	r3, r3, #3
 800edb2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	691b      	ldr	r3, [r3, #16]
 800edb8:	019a      	lsls	r2, r3, #6
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	041b      	lsls	r3, r3, #16
 800edbe:	431a      	orrs	r2, r3
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	695b      	ldr	r3, [r3, #20]
 800edc4:	061b      	lsls	r3, r3, #24
 800edc6:	4927      	ldr	r1, [pc, #156]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800edc8:	4313      	orrs	r3, r2
 800edca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800edce:	4b25      	ldr	r3, [pc, #148]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800edd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800edd4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6a1b      	ldr	r3, [r3, #32]
 800eddc:	3b01      	subs	r3, #1
 800edde:	021b      	lsls	r3, r3, #8
 800ede0:	4920      	ldr	r1, [pc, #128]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ede2:	4313      	orrs	r3, r2
 800ede4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d018      	beq.n	800ee26 <HAL_RCCEx_PeriphCLKConfig+0x652>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800edfc:	d113      	bne.n	800ee26 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800edfe:	4b19      	ldr	r3, [pc, #100]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ee00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee04:	0e1b      	lsrs	r3, r3, #24
 800ee06:	f003 030f 	and.w	r3, r3, #15
 800ee0a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	691b      	ldr	r3, [r3, #16]
 800ee10:	019a      	lsls	r2, r3, #6
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	699b      	ldr	r3, [r3, #24]
 800ee16:	041b      	lsls	r3, r3, #16
 800ee18:	431a      	orrs	r2, r3
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	061b      	lsls	r3, r3, #24
 800ee1e:	4911      	ldr	r1, [pc, #68]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ee20:	4313      	orrs	r3, r2
 800ee22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ee26:	4b0f      	ldr	r3, [pc, #60]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	4a0e      	ldr	r2, [pc, #56]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ee2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ee32:	f7fa f827 	bl	8008e84 <HAL_GetTick>
 800ee36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ee38:	e008      	b.n	800ee4c <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ee3a:	f7fa f823 	bl	8008e84 <HAL_GetTick>
 800ee3e:	4602      	mov	r2, r0
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	1ad3      	subs	r3, r2, r3
 800ee44:	2b64      	cmp	r3, #100	; 0x64
 800ee46:	d901      	bls.n	800ee4c <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ee48:	2303      	movs	r3, #3
 800ee4a:	e007      	b.n	800ee5c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ee4c:	4b05      	ldr	r3, [pc, #20]	; (800ee64 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ee54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ee58:	d1ef      	bne.n	800ee3a <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800ee5a:	2300      	movs	r3, #0
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3720      	adds	r7, #32
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}
 800ee64:	40023800 	.word	0x40023800

0800ee68 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d101      	bne.n	800ee7a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800ee76:	2301      	movs	r3, #1
 800ee78:	e081      	b.n	800ef7e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	7f5b      	ldrb	r3, [r3, #29]
 800ee7e:	b2db      	uxtb	r3, r3
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d105      	bne.n	800ee90 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2200      	movs	r2, #0
 800ee88:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f7f9 f8be 	bl	800800c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2202      	movs	r2, #2
 800ee94:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	22ca      	movs	r2, #202	; 0xca
 800ee9c:	625a      	str	r2, [r3, #36]	; 0x24
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	2253      	movs	r2, #83	; 0x53
 800eea4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f000 faac 	bl	800f404 <RTC_EnterInitMode>
 800eeac:	4603      	mov	r3, r0
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d008      	beq.n	800eec4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	22ff      	movs	r2, #255	; 0xff
 800eeb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2204      	movs	r2, #4
 800eebe:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800eec0:	2301      	movs	r3, #1
 800eec2:	e05c      	b.n	800ef7e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	6899      	ldr	r1, [r3, #8]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681a      	ldr	r2, [r3, #0]
 800eece:	4b2e      	ldr	r3, [pc, #184]	; (800ef88 <HAL_RTC_Init+0x120>)
 800eed0:	400b      	ands	r3, r1
 800eed2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	6899      	ldr	r1, [r3, #8]
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	685a      	ldr	r2, [r3, #4]
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	691b      	ldr	r3, [r3, #16]
 800eee2:	431a      	orrs	r2, r3
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	695b      	ldr	r3, [r3, #20]
 800eee8:	431a      	orrs	r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	430a      	orrs	r2, r1
 800eef0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	687a      	ldr	r2, [r7, #4]
 800eef8:	68d2      	ldr	r2, [r2, #12]
 800eefa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	6919      	ldr	r1, [r3, #16]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	689b      	ldr	r3, [r3, #8]
 800ef06:	041a      	lsls	r2, r3, #16
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	430a      	orrs	r2, r1
 800ef0e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	68da      	ldr	r2, [r3, #12]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ef1e:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	689b      	ldr	r3, [r3, #8]
 800ef26:	f003 0320 	and.w	r3, r3, #32
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d10e      	bne.n	800ef4c <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f000 fa40 	bl	800f3b4 <HAL_RTC_WaitForSynchro>
 800ef34:	4603      	mov	r3, r0
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d008      	beq.n	800ef4c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	22ff      	movs	r2, #255	; 0xff
 800ef40:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2204      	movs	r2, #4
 800ef46:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800ef48:	2301      	movs	r3, #1
 800ef4a:	e018      	b.n	800ef7e <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	f022 0208 	bic.w	r2, r2, #8
 800ef5a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	699a      	ldr	r2, [r3, #24]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	430a      	orrs	r2, r1
 800ef6c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	22ff      	movs	r2, #255	; 0xff
 800ef74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2201      	movs	r2, #1
 800ef7a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800ef7c:	2300      	movs	r3, #0
  }
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3708      	adds	r7, #8
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	bf00      	nop
 800ef88:	ff8fffbf 	.word	0xff8fffbf

0800ef8c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ef8c:	b590      	push	{r4, r7, lr}
 800ef8e:	b087      	sub	sp, #28
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	60f8      	str	r0, [r7, #12]
 800ef94:	60b9      	str	r1, [r7, #8]
 800ef96:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	7f1b      	ldrb	r3, [r3, #28]
 800efa0:	2b01      	cmp	r3, #1
 800efa2:	d101      	bne.n	800efa8 <HAL_RTC_SetTime+0x1c>
 800efa4:	2302      	movs	r3, #2
 800efa6:	e0a8      	b.n	800f0fa <HAL_RTC_SetTime+0x16e>
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2201      	movs	r2, #1
 800efac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	2202      	movs	r2, #2
 800efb2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d126      	bne.n	800f008 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	689b      	ldr	r3, [r3, #8]
 800efc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d102      	bne.n	800efce <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	2200      	movs	r2, #0
 800efcc:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	781b      	ldrb	r3, [r3, #0]
 800efd2:	4618      	mov	r0, r3
 800efd4:	f000 fa42 	bl	800f45c <RTC_ByteToBcd2>
 800efd8:	4603      	mov	r3, r0
 800efda:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	785b      	ldrb	r3, [r3, #1]
 800efe0:	4618      	mov	r0, r3
 800efe2:	f000 fa3b 	bl	800f45c <RTC_ByteToBcd2>
 800efe6:	4603      	mov	r3, r0
 800efe8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800efea:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	789b      	ldrb	r3, [r3, #2]
 800eff0:	4618      	mov	r0, r3
 800eff2:	f000 fa33 	bl	800f45c <RTC_ByteToBcd2>
 800eff6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800eff8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	7b1b      	ldrb	r3, [r3, #12]
 800f000:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800f002:	4313      	orrs	r3, r2
 800f004:	617b      	str	r3, [r7, #20]
 800f006:	e018      	b.n	800f03a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	689b      	ldr	r3, [r3, #8]
 800f00e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f012:	2b00      	cmp	r3, #0
 800f014:	d102      	bne.n	800f01c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	2200      	movs	r2, #0
 800f01a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	785b      	ldrb	r3, [r3, #1]
 800f026:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800f028:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800f02a:	68ba      	ldr	r2, [r7, #8]
 800f02c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800f02e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	7b1b      	ldrb	r3, [r3, #12]
 800f034:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800f036:	4313      	orrs	r3, r2
 800f038:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	22ca      	movs	r2, #202	; 0xca
 800f040:	625a      	str	r2, [r3, #36]	; 0x24
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	2253      	movs	r2, #83	; 0x53
 800f048:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800f04a:	68f8      	ldr	r0, [r7, #12]
 800f04c:	f000 f9da 	bl	800f404 <RTC_EnterInitMode>
 800f050:	4603      	mov	r3, r0
 800f052:	2b00      	cmp	r3, #0
 800f054:	d00b      	beq.n	800f06e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	22ff      	movs	r2, #255	; 0xff
 800f05c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	2204      	movs	r2, #4
 800f062:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2200      	movs	r2, #0
 800f068:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800f06a:	2301      	movs	r3, #1
 800f06c:	e045      	b.n	800f0fa <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	6979      	ldr	r1, [r7, #20]
 800f074:	4b23      	ldr	r3, [pc, #140]	; (800f104 <HAL_RTC_SetTime+0x178>)
 800f076:	400b      	ands	r3, r1
 800f078:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	689a      	ldr	r2, [r3, #8]
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f088:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	6899      	ldr	r1, [r3, #8]
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	691a      	ldr	r2, [r3, #16]
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	695b      	ldr	r3, [r3, #20]
 800f098:	431a      	orrs	r2, r3
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	430a      	orrs	r2, r1
 800f0a0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	68da      	ldr	r2, [r3, #12]
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f0b0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	689b      	ldr	r3, [r3, #8]
 800f0b8:	f003 0320 	and.w	r3, r3, #32
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d111      	bne.n	800f0e4 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f0c0:	68f8      	ldr	r0, [r7, #12]
 800f0c2:	f000 f977 	bl	800f3b4 <HAL_RTC_WaitForSynchro>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d00b      	beq.n	800f0e4 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	22ff      	movs	r2, #255	; 0xff
 800f0d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2204      	movs	r2, #4
 800f0d8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	2200      	movs	r2, #0
 800f0de:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	e00a      	b.n	800f0fa <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	22ff      	movs	r2, #255	; 0xff
 800f0ea:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800f0f8:	2300      	movs	r3, #0
  }
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	371c      	adds	r7, #28
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd90      	pop	{r4, r7, pc}
 800f102:	bf00      	nop
 800f104:	007f7f7f 	.word	0x007f7f7f

0800f108 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b086      	sub	sp, #24
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	60f8      	str	r0, [r7, #12]
 800f110:	60b9      	str	r1, [r7, #8]
 800f112:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800f114:	2300      	movs	r3, #0
 800f116:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	691b      	ldr	r3, [r3, #16]
 800f128:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	681a      	ldr	r2, [r3, #0]
 800f136:	4b22      	ldr	r3, [pc, #136]	; (800f1c0 <HAL_RTC_GetTime+0xb8>)
 800f138:	4013      	ands	r3, r2
 800f13a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	0c1b      	lsrs	r3, r3, #16
 800f140:	b2db      	uxtb	r3, r3
 800f142:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f146:	b2da      	uxtb	r2, r3
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	0a1b      	lsrs	r3, r3, #8
 800f150:	b2db      	uxtb	r3, r3
 800f152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f156:	b2da      	uxtb	r2, r3
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f164:	b2da      	uxtb	r2, r3
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	0c1b      	lsrs	r3, r3, #16
 800f16e:	b2db      	uxtb	r3, r3
 800f170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f174:	b2da      	uxtb	r2, r3
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d11a      	bne.n	800f1b6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	4618      	mov	r0, r3
 800f186:	f000 f987 	bl	800f498 <RTC_Bcd2ToByte>
 800f18a:	4603      	mov	r3, r0
 800f18c:	461a      	mov	r2, r3
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	785b      	ldrb	r3, [r3, #1]
 800f196:	4618      	mov	r0, r3
 800f198:	f000 f97e 	bl	800f498 <RTC_Bcd2ToByte>
 800f19c:	4603      	mov	r3, r0
 800f19e:	461a      	mov	r2, r3
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	789b      	ldrb	r3, [r3, #2]
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f000 f975 	bl	800f498 <RTC_Bcd2ToByte>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800f1b6:	2300      	movs	r3, #0
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3718      	adds	r7, #24
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}
 800f1c0:	007f7f7f 	.word	0x007f7f7f

0800f1c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f1c4:	b590      	push	{r4, r7, lr}
 800f1c6:	b087      	sub	sp, #28
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	60b9      	str	r1, [r7, #8]
 800f1ce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	7f1b      	ldrb	r3, [r3, #28]
 800f1d8:	2b01      	cmp	r3, #1
 800f1da:	d101      	bne.n	800f1e0 <HAL_RTC_SetDate+0x1c>
 800f1dc:	2302      	movs	r3, #2
 800f1de:	e092      	b.n	800f306 <HAL_RTC_SetDate+0x142>
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	2201      	movs	r2, #1
 800f1e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	2202      	movs	r2, #2
 800f1ea:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d10e      	bne.n	800f210 <HAL_RTC_SetDate+0x4c>
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	785b      	ldrb	r3, [r3, #1]
 800f1f6:	f003 0310 	and.w	r3, r3, #16
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d008      	beq.n	800f210 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	785b      	ldrb	r3, [r3, #1]
 800f202:	f023 0310 	bic.w	r3, r3, #16
 800f206:	b2db      	uxtb	r3, r3
 800f208:	330a      	adds	r3, #10
 800f20a:	b2da      	uxtb	r2, r3
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d11c      	bne.n	800f250 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	78db      	ldrb	r3, [r3, #3]
 800f21a:	4618      	mov	r0, r3
 800f21c:	f000 f91e 	bl	800f45c <RTC_ByteToBcd2>
 800f220:	4603      	mov	r3, r0
 800f222:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	785b      	ldrb	r3, [r3, #1]
 800f228:	4618      	mov	r0, r3
 800f22a:	f000 f917 	bl	800f45c <RTC_ByteToBcd2>
 800f22e:	4603      	mov	r3, r0
 800f230:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800f232:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	789b      	ldrb	r3, [r3, #2]
 800f238:	4618      	mov	r0, r3
 800f23a:	f000 f90f 	bl	800f45c <RTC_ByteToBcd2>
 800f23e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800f240:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	781b      	ldrb	r3, [r3, #0]
 800f248:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800f24a:	4313      	orrs	r3, r2
 800f24c:	617b      	str	r3, [r7, #20]
 800f24e:	e00e      	b.n	800f26e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	78db      	ldrb	r3, [r3, #3]
 800f254:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	785b      	ldrb	r3, [r3, #1]
 800f25a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800f25c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800f25e:	68ba      	ldr	r2, [r7, #8]
 800f260:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800f262:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	781b      	ldrb	r3, [r3, #0]
 800f268:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800f26a:	4313      	orrs	r3, r2
 800f26c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	22ca      	movs	r2, #202	; 0xca
 800f274:	625a      	str	r2, [r3, #36]	; 0x24
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	2253      	movs	r2, #83	; 0x53
 800f27c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800f27e:	68f8      	ldr	r0, [r7, #12]
 800f280:	f000 f8c0 	bl	800f404 <RTC_EnterInitMode>
 800f284:	4603      	mov	r3, r0
 800f286:	2b00      	cmp	r3, #0
 800f288:	d00b      	beq.n	800f2a2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	22ff      	movs	r2, #255	; 0xff
 800f290:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	2204      	movs	r2, #4
 800f296:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	2200      	movs	r2, #0
 800f29c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800f29e:	2301      	movs	r3, #1
 800f2a0:	e031      	b.n	800f306 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681a      	ldr	r2, [r3, #0]
 800f2a6:	6979      	ldr	r1, [r7, #20]
 800f2a8:	4b19      	ldr	r3, [pc, #100]	; (800f310 <HAL_RTC_SetDate+0x14c>)
 800f2aa:	400b      	ands	r3, r1
 800f2ac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	68da      	ldr	r2, [r3, #12]
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f2bc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	689b      	ldr	r3, [r3, #8]
 800f2c4:	f003 0320 	and.w	r3, r3, #32
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d111      	bne.n	800f2f0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f2cc:	68f8      	ldr	r0, [r7, #12]
 800f2ce:	f000 f871 	bl	800f3b4 <HAL_RTC_WaitForSynchro>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d00b      	beq.n	800f2f0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	22ff      	movs	r2, #255	; 0xff
 800f2de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	2204      	movs	r2, #4
 800f2e4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	e00a      	b.n	800f306 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	22ff      	movs	r2, #255	; 0xff
 800f2f6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	2201      	movs	r2, #1
 800f2fc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	2200      	movs	r2, #0
 800f302:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800f304:	2300      	movs	r3, #0
  }
}
 800f306:	4618      	mov	r0, r3
 800f308:	371c      	adds	r7, #28
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd90      	pop	{r4, r7, pc}
 800f30e:	bf00      	nop
 800f310:	00ffff3f 	.word	0x00ffff3f

0800f314 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b086      	sub	sp, #24
 800f318:	af00      	add	r7, sp, #0
 800f31a:	60f8      	str	r0, [r7, #12]
 800f31c:	60b9      	str	r1, [r7, #8]
 800f31e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800f320:	2300      	movs	r3, #0
 800f322:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	685a      	ldr	r2, [r3, #4]
 800f32a:	4b21      	ldr	r3, [pc, #132]	; (800f3b0 <HAL_RTC_GetDate+0x9c>)
 800f32c:	4013      	ands	r3, r2
 800f32e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	0c1b      	lsrs	r3, r3, #16
 800f334:	b2da      	uxtb	r2, r3
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	0a1b      	lsrs	r3, r3, #8
 800f33e:	b2db      	uxtb	r3, r3
 800f340:	f003 031f 	and.w	r3, r3, #31
 800f344:	b2da      	uxtb	r2, r3
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	b2db      	uxtb	r3, r3
 800f34e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f352:	b2da      	uxtb	r2, r3
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	0b5b      	lsrs	r3, r3, #13
 800f35c:	b2db      	uxtb	r3, r3
 800f35e:	f003 0307 	and.w	r3, r3, #7
 800f362:	b2da      	uxtb	r2, r3
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d11a      	bne.n	800f3a4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	78db      	ldrb	r3, [r3, #3]
 800f372:	4618      	mov	r0, r3
 800f374:	f000 f890 	bl	800f498 <RTC_Bcd2ToByte>
 800f378:	4603      	mov	r3, r0
 800f37a:	461a      	mov	r2, r3
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	785b      	ldrb	r3, [r3, #1]
 800f384:	4618      	mov	r0, r3
 800f386:	f000 f887 	bl	800f498 <RTC_Bcd2ToByte>
 800f38a:	4603      	mov	r3, r0
 800f38c:	461a      	mov	r2, r3
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	789b      	ldrb	r3, [r3, #2]
 800f396:	4618      	mov	r0, r3
 800f398:	f000 f87e 	bl	800f498 <RTC_Bcd2ToByte>
 800f39c:	4603      	mov	r3, r0
 800f39e:	461a      	mov	r2, r3
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800f3a4:	2300      	movs	r3, #0
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3718      	adds	r7, #24
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}
 800f3ae:	bf00      	nop
 800f3b0:	00ffff3f 	.word	0x00ffff3f

0800f3b4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b084      	sub	sp, #16
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	68da      	ldr	r2, [r3, #12]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800f3ce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f3d0:	f7f9 fd58 	bl	8008e84 <HAL_GetTick>
 800f3d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800f3d6:	e009      	b.n	800f3ec <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800f3d8:	f7f9 fd54 	bl	8008e84 <HAL_GetTick>
 800f3dc:	4602      	mov	r2, r0
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	1ad3      	subs	r3, r2, r3
 800f3e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f3e6:	d901      	bls.n	800f3ec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800f3e8:	2303      	movs	r3, #3
 800f3ea:	e007      	b.n	800f3fc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	68db      	ldr	r3, [r3, #12]
 800f3f2:	f003 0320 	and.w	r3, r3, #32
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d0ee      	beq.n	800f3d8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800f3fa:	2300      	movs	r3, #0
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3710      	adds	r7, #16
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}

0800f404 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b084      	sub	sp, #16
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800f40c:	2300      	movs	r3, #0
 800f40e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	68db      	ldr	r3, [r3, #12]
 800f416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d119      	bne.n	800f452 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	f04f 32ff 	mov.w	r2, #4294967295
 800f426:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f428:	f7f9 fd2c 	bl	8008e84 <HAL_GetTick>
 800f42c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800f42e:	e009      	b.n	800f444 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800f430:	f7f9 fd28 	bl	8008e84 <HAL_GetTick>
 800f434:	4602      	mov	r2, r0
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	1ad3      	subs	r3, r2, r3
 800f43a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f43e:	d901      	bls.n	800f444 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800f440:	2303      	movs	r3, #3
 800f442:	e007      	b.n	800f454 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	68db      	ldr	r3, [r3, #12]
 800f44a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d0ee      	beq.n	800f430 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800f452:	2300      	movs	r3, #0
}
 800f454:	4618      	mov	r0, r3
 800f456:	3710      	adds	r7, #16
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}

0800f45c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800f45c:	b480      	push	{r7}
 800f45e:	b085      	sub	sp, #20
 800f460:	af00      	add	r7, sp, #0
 800f462:	4603      	mov	r3, r0
 800f464:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800f466:	2300      	movs	r3, #0
 800f468:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800f46a:	e005      	b.n	800f478 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	3301      	adds	r3, #1
 800f470:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800f472:	79fb      	ldrb	r3, [r7, #7]
 800f474:	3b0a      	subs	r3, #10
 800f476:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800f478:	79fb      	ldrb	r3, [r7, #7]
 800f47a:	2b09      	cmp	r3, #9
 800f47c:	d8f6      	bhi.n	800f46c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	b2db      	uxtb	r3, r3
 800f482:	011b      	lsls	r3, r3, #4
 800f484:	b2da      	uxtb	r2, r3
 800f486:	79fb      	ldrb	r3, [r7, #7]
 800f488:	4313      	orrs	r3, r2
 800f48a:	b2db      	uxtb	r3, r3
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3714      	adds	r7, #20
 800f490:	46bd      	mov	sp, r7
 800f492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f496:	4770      	bx	lr

0800f498 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800f498:	b480      	push	{r7}
 800f49a:	b085      	sub	sp, #20
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	4603      	mov	r3, r0
 800f4a0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800f4a6:	79fb      	ldrb	r3, [r7, #7]
 800f4a8:	091b      	lsrs	r3, r3, #4
 800f4aa:	b2db      	uxtb	r3, r3
 800f4ac:	461a      	mov	r2, r3
 800f4ae:	4613      	mov	r3, r2
 800f4b0:	009b      	lsls	r3, r3, #2
 800f4b2:	4413      	add	r3, r2
 800f4b4:	005b      	lsls	r3, r3, #1
 800f4b6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800f4b8:	79fb      	ldrb	r3, [r7, #7]
 800f4ba:	f003 030f 	and.w	r3, r3, #15
 800f4be:	b2da      	uxtb	r2, r3
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	b2db      	uxtb	r3, r3
 800f4c4:	4413      	add	r3, r2
 800f4c6:	b2db      	uxtb	r3, r3
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3714      	adds	r7, #20
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr

0800f4d4 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b087      	sub	sp, #28
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	60f8      	str	r0, [r7, #12]
 800f4dc:	60b9      	str	r1, [r7, #8]
 800f4de:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	3350      	adds	r3, #80	; 0x50
 800f4ea:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4);
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	009b      	lsls	r3, r3, #2
 800f4f0:	697a      	ldr	r2, [r7, #20]
 800f4f2:	4413      	add	r3, r2
 800f4f4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	687a      	ldr	r2, [r7, #4]
 800f4fa:	601a      	str	r2, [r3, #0]
}
 800f4fc:	bf00      	nop
 800f4fe:	371c      	adds	r7, #28
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr

0800f508 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800f508:	b480      	push	{r7}
 800f50a:	b085      	sub	sp, #20
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 800f512:	2300      	movs	r3, #0
 800f514:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	3350      	adds	r3, #80	; 0x50
 800f51c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4);
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	009b      	lsls	r3, r3, #2
 800f522:	68fa      	ldr	r2, [r7, #12]
 800f524:	4413      	add	r3, r2
 800f526:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	681b      	ldr	r3, [r3, #0]
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3714      	adds	r7, #20
 800f530:	46bd      	mov	sp, r7
 800f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f536:	4770      	bx	lr

0800f538 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b082      	sub	sp, #8
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d101      	bne.n	800f54a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800f546:	2301      	movs	r3, #1
 800f548:	e022      	b.n	800f590 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f550:	b2db      	uxtb	r3, r3
 800f552:	2b00      	cmp	r3, #0
 800f554:	d105      	bne.n	800f562 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2200      	movs	r2, #0
 800f55a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f7f8 fd6f 	bl	8008040 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2203      	movs	r2, #3
 800f566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f000 f814 	bl	800f598 <HAL_SD_InitCard>
 800f570:	4603      	mov	r3, r0
 800f572:	2b00      	cmp	r3, #0
 800f574:	d001      	beq.n	800f57a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800f576:	2301      	movs	r3, #1
 800f578:	e00a      	b.n	800f590 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2200      	movs	r2, #0
 800f57e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2200      	movs	r2, #0
 800f584:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2201      	movs	r2, #1
 800f58a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800f58e:	2300      	movs	r3, #0
}
 800f590:	4618      	mov	r0, r3
 800f592:	3708      	adds	r7, #8
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}

0800f598 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f598:	b5b0      	push	{r4, r5, r7, lr}
 800f59a:	b08e      	sub	sp, #56	; 0x38
 800f59c:	af04      	add	r7, sp, #16
 800f59e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800f5b4:	2376      	movs	r3, #118	; 0x76
 800f5b6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681d      	ldr	r5, [r3, #0]
 800f5bc:	466c      	mov	r4, sp
 800f5be:	f107 0314 	add.w	r3, r7, #20
 800f5c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f5c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f5ca:	f107 0308 	add.w	r3, r7, #8
 800f5ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f5d0:	4628      	mov	r0, r5
 800f5d2:	f003 ffc3 	bl	801355c <SDMMC_Init>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800f5dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d001      	beq.n	800f5e8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	e056      	b.n	800f696 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	685a      	ldr	r2, [r3, #4]
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f5f6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f003 fff7 	bl	80135f0 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	685a      	ldr	r2, [r3, #4]
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f610:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f000 fff2 	bl	80105fc <SD_PowerON>
 800f618:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f61a:	6a3b      	ldr	r3, [r7, #32]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d00b      	beq.n	800f638 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2201      	movs	r2, #1
 800f624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f62c:	6a3b      	ldr	r3, [r7, #32]
 800f62e:	431a      	orrs	r2, r3
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f634:	2301      	movs	r3, #1
 800f636:	e02e      	b.n	800f696 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f000 ff13 	bl	8010464 <SD_InitCard>
 800f63e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f640:	6a3b      	ldr	r3, [r7, #32]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d00b      	beq.n	800f65e <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2201      	movs	r2, #1
 800f64a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f652:	6a3b      	ldr	r3, [r7, #32]
 800f654:	431a      	orrs	r2, r3
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f65a:	2301      	movs	r3, #1
 800f65c:	e01b      	b.n	800f696 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f666:	4618      	mov	r0, r3
 800f668:	f004 f856 	bl	8013718 <SDMMC_CmdBlockLength>
 800f66c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f66e:	6a3b      	ldr	r3, [r7, #32]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d00f      	beq.n	800f694 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	4a09      	ldr	r2, [pc, #36]	; (800f6a0 <HAL_SD_InitCard+0x108>)
 800f67a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f680:	6a3b      	ldr	r3, [r7, #32]
 800f682:	431a      	orrs	r2, r3
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2201      	movs	r2, #1
 800f68c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f690:	2301      	movs	r3, #1
 800f692:	e000      	b.n	800f696 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800f694:	2300      	movs	r3, #0
}
 800f696:	4618      	mov	r0, r3
 800f698:	3728      	adds	r7, #40	; 0x28
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bdb0      	pop	{r4, r5, r7, pc}
 800f69e:	bf00      	nop
 800f6a0:	004005ff 	.word	0x004005ff

0800f6a4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b08c      	sub	sp, #48	; 0x30
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	60f8      	str	r0, [r7, #12]
 800f6ac:	60b9      	str	r1, [r7, #8]
 800f6ae:	607a      	str	r2, [r7, #4]
 800f6b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d107      	bne.n	800f6cc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	e0c3      	b.n	800f854 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	2b01      	cmp	r3, #1
 800f6d6:	f040 80bc 	bne.w	800f852 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f6e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	441a      	add	r2, r3
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d907      	bls.n	800f6fe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	e0aa      	b.n	800f854 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2203      	movs	r2, #3
 800f702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	2200      	movs	r2, #0
 800f70c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800f71c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f722:	4a4e      	ldr	r2, [pc, #312]	; (800f85c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800f724:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f72a:	4a4d      	ldr	r2, [pc, #308]	; (800f860 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800f72c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f732:	2200      	movs	r2, #0
 800f734:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f73a:	2200      	movs	r2, #0
 800f73c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f74e:	689a      	ldr	r2, [r3, #8]
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	430a      	orrs	r2, r1
 800f758:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	3380      	adds	r3, #128	; 0x80
 800f764:	4619      	mov	r1, r3
 800f766:	68ba      	ldr	r2, [r7, #8]
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	025b      	lsls	r3, r3, #9
 800f76c:	089b      	lsrs	r3, r3, #2
 800f76e:	f7fa fc01 	bl	8009f74 <HAL_DMA_Start_IT>
 800f772:	4603      	mov	r3, r0
 800f774:	2b00      	cmp	r3, #0
 800f776:	d017      	beq.n	800f7a8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800f786:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	4a35      	ldr	r2, [pc, #212]	; (800f864 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800f78e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f794:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2201      	movs	r2, #1
 800f7a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	e055      	b.n	800f854 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f042 0208 	orr.w	r2, r2, #8
 800f7b6:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d002      	beq.n	800f7c6 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800f7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c2:	025b      	lsls	r3, r3, #9
 800f7c4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f7c6:	f04f 33ff 	mov.w	r3, #4294967295
 800f7ca:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	025b      	lsls	r3, r3, #9
 800f7d0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f7d2:	2390      	movs	r3, #144	; 0x90
 800f7d4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f7d6:	2302      	movs	r3, #2
 800f7d8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800f7de:	2301      	movs	r3, #1
 800f7e0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	f107 0210 	add.w	r2, r7, #16
 800f7ea:	4611      	mov	r1, r2
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f003 ff67 	bl	80136c0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	2b01      	cmp	r3, #1
 800f7f6:	d90a      	bls.n	800f80e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	2282      	movs	r2, #130	; 0x82
 800f7fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f804:	4618      	mov	r0, r3
 800f806:	f003 ffcb 	bl	80137a0 <SDMMC_CmdReadMultiBlock>
 800f80a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f80c:	e009      	b.n	800f822 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	2281      	movs	r2, #129	; 0x81
 800f812:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f81a:	4618      	mov	r0, r3
 800f81c:	f003 ff9e 	bl	801375c <SDMMC_CmdReadSingleBlock>
 800f820:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800f822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f824:	2b00      	cmp	r3, #0
 800f826:	d012      	beq.n	800f84e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	4a0d      	ldr	r2, [pc, #52]	; (800f864 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800f82e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f836:	431a      	orrs	r2, r3
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2201      	movs	r2, #1
 800f840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	2200      	movs	r2, #0
 800f848:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800f84a:	2301      	movs	r3, #1
 800f84c:	e002      	b.n	800f854 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800f84e:	2300      	movs	r3, #0
 800f850:	e000      	b.n	800f854 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800f852:	2302      	movs	r3, #2
  }
}
 800f854:	4618      	mov	r0, r3
 800f856:	3730      	adds	r7, #48	; 0x30
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	08010273 	.word	0x08010273
 800f860:	080102e5 	.word	0x080102e5
 800f864:	004005ff 	.word	0x004005ff

0800f868 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b08c      	sub	sp, #48	; 0x30
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	60f8      	str	r0, [r7, #12]
 800f870:	60b9      	str	r1, [r7, #8]
 800f872:	607a      	str	r2, [r7, #4]
 800f874:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d107      	bne.n	800f890 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f884:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f88c:	2301      	movs	r3, #1
 800f88e:	e0c6      	b.n	800fa1e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f896:	b2db      	uxtb	r3, r3
 800f898:	2b01      	cmp	r3, #1
 800f89a:	f040 80bf 	bne.w	800fa1c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f8a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	441a      	add	r2, r3
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d907      	bls.n	800f8c2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800f8be:	2301      	movs	r3, #1
 800f8c0:	e0ad      	b.n	800fa1e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	2203      	movs	r2, #3
 800f8c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	f042 021a 	orr.w	r2, r2, #26
 800f8e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8e6:	4a50      	ldr	r2, [pc, #320]	; (800fa28 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800f8e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8ee:	4a4f      	ldr	r2, [pc, #316]	; (800fa2c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800f8f0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8fe:	2b01      	cmp	r3, #1
 800f900:	d002      	beq.n	800f908 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800f902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f904:	025b      	lsls	r3, r3, #9
 800f906:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	d90a      	bls.n	800f924 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	22a0      	movs	r2, #160	; 0xa0
 800f912:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f91a:	4618      	mov	r0, r3
 800f91c:	f003 ff84 	bl	8013828 <SDMMC_CmdWriteMultiBlock>
 800f920:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f922:	e009      	b.n	800f938 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	2290      	movs	r2, #144	; 0x90
 800f928:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f930:	4618      	mov	r0, r3
 800f932:	f003 ff57 	bl	80137e4 <SDMMC_CmdWriteSingleBlock>
 800f936:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800f938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d012      	beq.n	800f964 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	4a3b      	ldr	r2, [pc, #236]	; (800fa30 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800f944:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f94c:	431a      	orrs	r2, r3
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2201      	movs	r2, #1
 800f956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	2200      	movs	r2, #0
 800f95e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800f960:	2301      	movs	r3, #1
 800f962:	e05c      	b.n	800fa1e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	f042 0208 	orr.w	r2, r2, #8
 800f972:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f978:	2240      	movs	r2, #64	; 0x40
 800f97a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f98c:	689a      	ldr	r2, [r3, #8]
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	430a      	orrs	r2, r1
 800f996:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f99c:	68b9      	ldr	r1, [r7, #8]
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	3380      	adds	r3, #128	; 0x80
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	025b      	lsls	r3, r3, #9
 800f9aa:	089b      	lsrs	r3, r3, #2
 800f9ac:	f7fa fae2 	bl	8009f74 <HAL_DMA_Start_IT>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d01a      	beq.n	800f9ec <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	f022 021a 	bic.w	r2, r2, #26
 800f9c4:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	4a19      	ldr	r2, [pc, #100]	; (800fa30 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800f9cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2201      	movs	r2, #1
 800f9de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	e018      	b.n	800fa1e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f9ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f9f0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	025b      	lsls	r3, r3, #9
 800f9f6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f9f8:	2390      	movs	r3, #144	; 0x90
 800f9fa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800fa00:	2300      	movs	r3, #0
 800fa02:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800fa04:	2301      	movs	r3, #1
 800fa06:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	f107 0210 	add.w	r2, r7, #16
 800fa10:	4611      	mov	r1, r2
 800fa12:	4618      	mov	r0, r3
 800fa14:	f003 fe54 	bl	80136c0 <SDMMC_ConfigData>

      return HAL_OK;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	e000      	b.n	800fa1e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800fa1c:	2302      	movs	r3, #2
  }
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3730      	adds	r7, #48	; 0x30
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop
 800fa28:	08010249 	.word	0x08010249
 800fa2c:	080102e5 	.word	0x080102e5
 800fa30:	004005ff 	.word	0x004005ff

0800fa34 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b084      	sub	sp, #16
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa40:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d008      	beq.n	800fa62 <HAL_SD_IRQHandler+0x2e>
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	f003 0308 	and.w	r3, r3, #8
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d003      	beq.n	800fa62 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f000 ffed 	bl	8010a3a <SD_Read_IT>
 800fa60:	e153      	b.n	800fd0a <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	f000 808d 	beq.w	800fb8c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fa7a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	4ba3      	ldr	r3, [pc, #652]	; (800fd14 <HAL_SD_IRQHandler+0x2e0>)
 800fa88:	400b      	ands	r3, r1
 800fa8a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	f022 0201 	bic.w	r2, r2, #1
 800fa9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	f003 0308 	and.w	r3, r3, #8
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d039      	beq.n	800fb1a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	f003 0302 	and.w	r3, r3, #2
 800faac:	2b00      	cmp	r3, #0
 800faae:	d104      	bne.n	800faba <HAL_SD_IRQHandler+0x86>
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f003 0320 	and.w	r3, r3, #32
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d011      	beq.n	800fade <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	4618      	mov	r0, r3
 800fac0:	f003 fed4 	bl	801386c <SDMMC_CmdStopTransfer>
 800fac4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d008      	beq.n	800fade <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	431a      	orrs	r2, r3
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f000 f921 	bl	800fd20 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	f240 523a 	movw	r2, #1338	; 0x53a
 800fae6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2201      	movs	r2, #1
 800faec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2200      	movs	r2, #0
 800faf4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	f003 0301 	and.w	r3, r3, #1
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d104      	bne.n	800fb0a <HAL_SD_IRQHandler+0xd6>
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f003 0302 	and.w	r3, r3, #2
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d003      	beq.n	800fb12 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f005 fe7e 	bl	801580c <HAL_SD_RxCpltCallback>
 800fb10:	e0fb      	b.n	800fd0a <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f005 fe70 	bl	80157f8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fb18:	e0f7      	b.n	800fd0a <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	f000 80f2 	beq.w	800fd0a <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	f003 0320 	and.w	r3, r3, #32
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d011      	beq.n	800fb54 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4618      	mov	r0, r3
 800fb36:	f003 fe99 	bl	801386c <SDMMC_CmdStopTransfer>
 800fb3a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d008      	beq.n	800fb54 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	431a      	orrs	r2, r3
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f000 f8e6 	bl	800fd20 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	f003 0301 	and.w	r3, r3, #1
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	f040 80d5 	bne.w	800fd0a <HAL_SD_IRQHandler+0x2d6>
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	f003 0302 	and.w	r3, r3, #2
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	f040 80cf 	bne.w	800fd0a <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	f022 0208 	bic.w	r2, r2, #8
 800fb7a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2201      	movs	r2, #1
 800fb80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f005 fe37 	bl	80157f8 <HAL_SD_TxCpltCallback>
}
 800fb8a:	e0be      	b.n	800fd0a <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d008      	beq.n	800fbac <HAL_SD_IRQHandler+0x178>
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f003 0308 	and.w	r3, r3, #8
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d003      	beq.n	800fbac <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f000 ff99 	bl	8010adc <SD_Write_IT>
 800fbaa:	e0ae      	b.n	800fd0a <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbb2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	f000 80a7 	beq.w	800fd0a <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbc2:	f003 0302 	and.w	r3, r3, #2
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d005      	beq.n	800fbd6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbce:	f043 0202 	orr.w	r2, r3, #2
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbdc:	f003 0308 	and.w	r3, r3, #8
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d005      	beq.n	800fbf0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbe8:	f043 0208 	orr.w	r2, r3, #8
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbf6:	f003 0320 	and.w	r3, r3, #32
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d005      	beq.n	800fc0a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc02:	f043 0220 	orr.w	r2, r3, #32
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc10:	f003 0310 	and.w	r3, r3, #16
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d005      	beq.n	800fc24 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc1c:	f043 0210 	orr.w	r2, r3, #16
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	f240 523a 	movw	r2, #1338	; 0x53a
 800fc2c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800fc3c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	4618      	mov	r0, r3
 800fc44:	f003 fe12 	bl	801386c <SDMMC_CmdStopTransfer>
 800fc48:	4602      	mov	r2, r0
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc4e:	431a      	orrs	r2, r3
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f003 0308 	and.w	r3, r3, #8
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d00a      	beq.n	800fc74 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2201      	movs	r2, #1
 800fc62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f000 f857 	bl	800fd20 <HAL_SD_ErrorCallback>
}
 800fc72:	e04a      	b.n	800fd0a <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d045      	beq.n	800fd0a <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	f003 0310 	and.w	r3, r3, #16
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d104      	bne.n	800fc92 <HAL_SD_IRQHandler+0x25e>
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f003 0320 	and.w	r3, r3, #32
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d011      	beq.n	800fcb6 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc96:	4a20      	ldr	r2, [pc, #128]	; (800fd18 <HAL_SD_IRQHandler+0x2e4>)
 800fc98:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7fa fa38 	bl	800a114 <HAL_DMA_Abort_IT>
 800fca4:	4603      	mov	r3, r0
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d02f      	beq.n	800fd0a <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f000 fb6a 	bl	8010388 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800fcb4:	e029      	b.n	800fd0a <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	f003 0301 	and.w	r3, r3, #1
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d104      	bne.n	800fcca <HAL_SD_IRQHandler+0x296>
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f003 0302 	and.w	r3, r3, #2
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d011      	beq.n	800fcee <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcce:	4a13      	ldr	r2, [pc, #76]	; (800fd1c <HAL_SD_IRQHandler+0x2e8>)
 800fcd0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7fa fa1c 	bl	800a114 <HAL_DMA_Abort_IT>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d013      	beq.n	800fd0a <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fce6:	4618      	mov	r0, r3
 800fce8:	f000 fb85 	bl	80103f6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800fcec:	e00d      	b.n	800fd0a <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2201      	movs	r2, #1
 800fcf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f005 fd6e 	bl	80157e4 <HAL_SD_AbortCallback>
}
 800fd08:	e7ff      	b.n	800fd0a <HAL_SD_IRQHandler+0x2d6>
 800fd0a:	bf00      	nop
 800fd0c:	3710      	adds	r7, #16
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
 800fd12:	bf00      	nop
 800fd14:	ffff3ec5 	.word	0xffff3ec5
 800fd18:	08010389 	.word	0x08010389
 800fd1c:	080103f7 	.word	0x080103f7

0800fd20 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800fd20:	b480      	push	{r7}
 800fd22:	b083      	sub	sp, #12
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800fd28:	bf00      	nop
 800fd2a:	370c      	adds	r7, #12
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd32:	4770      	bx	lr

0800fd34 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800fd34:	b480      	push	{r7}
 800fd36:	b083      	sub	sp, #12
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd42:	0f9b      	lsrs	r3, r3, #30
 800fd44:	b2da      	uxtb	r2, r3
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd4e:	0e9b      	lsrs	r3, r3, #26
 800fd50:	b2db      	uxtb	r3, r3
 800fd52:	f003 030f 	and.w	r3, r3, #15
 800fd56:	b2da      	uxtb	r2, r3
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd60:	0e1b      	lsrs	r3, r3, #24
 800fd62:	b2db      	uxtb	r3, r3
 800fd64:	f003 0303 	and.w	r3, r3, #3
 800fd68:	b2da      	uxtb	r2, r3
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd72:	0c1b      	lsrs	r3, r3, #16
 800fd74:	b2da      	uxtb	r2, r3
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd7e:	0a1b      	lsrs	r3, r3, #8
 800fd80:	b2da      	uxtb	r2, r3
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd8a:	b2da      	uxtb	r2, r3
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd94:	0d1b      	lsrs	r3, r3, #20
 800fd96:	b29a      	uxth	r2, r3
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fda0:	0c1b      	lsrs	r3, r3, #16
 800fda2:	b2db      	uxtb	r3, r3
 800fda4:	f003 030f 	and.w	r3, r3, #15
 800fda8:	b2da      	uxtb	r2, r3
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fdb2:	0bdb      	lsrs	r3, r3, #15
 800fdb4:	b2db      	uxtb	r3, r3
 800fdb6:	f003 0301 	and.w	r3, r3, #1
 800fdba:	b2da      	uxtb	r2, r3
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fdc4:	0b9b      	lsrs	r3, r3, #14
 800fdc6:	b2db      	uxtb	r3, r3
 800fdc8:	f003 0301 	and.w	r3, r3, #1
 800fdcc:	b2da      	uxtb	r2, r3
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fdd6:	0b5b      	lsrs	r3, r3, #13
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	f003 0301 	and.w	r3, r3, #1
 800fdde:	b2da      	uxtb	r2, r3
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fde8:	0b1b      	lsrs	r3, r3, #12
 800fdea:	b2db      	uxtb	r3, r3
 800fdec:	f003 0301 	and.w	r3, r3, #1
 800fdf0:	b2da      	uxtb	r2, r3
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d163      	bne.n	800fecc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fe08:	009a      	lsls	r2, r3, #2
 800fe0a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800fe0e:	4013      	ands	r3, r2
 800fe10:	687a      	ldr	r2, [r7, #4]
 800fe12:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800fe14:	0f92      	lsrs	r2, r2, #30
 800fe16:	431a      	orrs	r2, r3
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe20:	0edb      	lsrs	r3, r3, #27
 800fe22:	b2db      	uxtb	r3, r3
 800fe24:	f003 0307 	and.w	r3, r3, #7
 800fe28:	b2da      	uxtb	r2, r3
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe32:	0e1b      	lsrs	r3, r3, #24
 800fe34:	b2db      	uxtb	r3, r3
 800fe36:	f003 0307 	and.w	r3, r3, #7
 800fe3a:	b2da      	uxtb	r2, r3
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe44:	0d5b      	lsrs	r3, r3, #21
 800fe46:	b2db      	uxtb	r3, r3
 800fe48:	f003 0307 	and.w	r3, r3, #7
 800fe4c:	b2da      	uxtb	r2, r3
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe56:	0c9b      	lsrs	r3, r3, #18
 800fe58:	b2db      	uxtb	r3, r3
 800fe5a:	f003 0307 	and.w	r3, r3, #7
 800fe5e:	b2da      	uxtb	r2, r3
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe68:	0bdb      	lsrs	r3, r3, #15
 800fe6a:	b2db      	uxtb	r3, r3
 800fe6c:	f003 0307 	and.w	r3, r3, #7
 800fe70:	b2da      	uxtb	r2, r3
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	691b      	ldr	r3, [r3, #16]
 800fe7a:	1c5a      	adds	r2, r3, #1
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	7e1b      	ldrb	r3, [r3, #24]
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	f003 0307 	and.w	r3, r3, #7
 800fe8a:	3302      	adds	r3, #2
 800fe8c:	2201      	movs	r2, #1
 800fe8e:	fa02 f303 	lsl.w	r3, r2, r3
 800fe92:	687a      	ldr	r2, [r7, #4]
 800fe94:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800fe96:	fb02 f203 	mul.w	r2, r2, r3
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	7a1b      	ldrb	r3, [r3, #8]
 800fea2:	b2db      	uxtb	r3, r3
 800fea4:	f003 030f 	and.w	r3, r3, #15
 800fea8:	2201      	movs	r2, #1
 800feaa:	409a      	lsls	r2, r3
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800feb4:	687a      	ldr	r2, [r7, #4]
 800feb6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800feb8:	0a52      	lsrs	r2, r2, #9
 800feba:	fb02 f203 	mul.w	r2, r2, r3
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fec8:	661a      	str	r2, [r3, #96]	; 0x60
 800feca:	e031      	b.n	800ff30 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fed0:	2b01      	cmp	r3, #1
 800fed2:	d11d      	bne.n	800ff10 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fed8:	041b      	lsls	r3, r3, #16
 800feda:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fee2:	0c1b      	lsrs	r3, r3, #16
 800fee4:	431a      	orrs	r2, r3
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	691b      	ldr	r3, [r3, #16]
 800feee:	3301      	adds	r3, #1
 800fef0:	029a      	lsls	r2, r3, #10
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ff04:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	661a      	str	r2, [r3, #96]	; 0x60
 800ff0e:	e00f      	b.n	800ff30 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	4a58      	ldr	r2, [pc, #352]	; (8010078 <HAL_SD_GetCardCSD+0x344>)
 800ff16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2201      	movs	r2, #1
 800ff28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	e09d      	b.n	801006c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff34:	0b9b      	lsrs	r3, r3, #14
 800ff36:	b2db      	uxtb	r3, r3
 800ff38:	f003 0301 	and.w	r3, r3, #1
 800ff3c:	b2da      	uxtb	r2, r3
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff46:	09db      	lsrs	r3, r3, #7
 800ff48:	b2db      	uxtb	r3, r3
 800ff4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff4e:	b2da      	uxtb	r2, r3
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff58:	b2db      	uxtb	r3, r3
 800ff5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff5e:	b2da      	uxtb	r2, r3
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff68:	0fdb      	lsrs	r3, r3, #31
 800ff6a:	b2da      	uxtb	r2, r3
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff74:	0f5b      	lsrs	r3, r3, #29
 800ff76:	b2db      	uxtb	r3, r3
 800ff78:	f003 0303 	and.w	r3, r3, #3
 800ff7c:	b2da      	uxtb	r2, r3
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff86:	0e9b      	lsrs	r3, r3, #26
 800ff88:	b2db      	uxtb	r3, r3
 800ff8a:	f003 0307 	and.w	r3, r3, #7
 800ff8e:	b2da      	uxtb	r2, r3
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff98:	0d9b      	lsrs	r3, r3, #22
 800ff9a:	b2db      	uxtb	r3, r3
 800ff9c:	f003 030f 	and.w	r3, r3, #15
 800ffa0:	b2da      	uxtb	r2, r3
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffaa:	0d5b      	lsrs	r3, r3, #21
 800ffac:	b2db      	uxtb	r3, r3
 800ffae:	f003 0301 	and.w	r3, r3, #1
 800ffb2:	b2da      	uxtb	r2, r3
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffc6:	0c1b      	lsrs	r3, r3, #16
 800ffc8:	b2db      	uxtb	r3, r3
 800ffca:	f003 0301 	and.w	r3, r3, #1
 800ffce:	b2da      	uxtb	r2, r3
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffda:	0bdb      	lsrs	r3, r3, #15
 800ffdc:	b2db      	uxtb	r3, r3
 800ffde:	f003 0301 	and.w	r3, r3, #1
 800ffe2:	b2da      	uxtb	r2, r3
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffee:	0b9b      	lsrs	r3, r3, #14
 800fff0:	b2db      	uxtb	r3, r3
 800fff2:	f003 0301 	and.w	r3, r3, #1
 800fff6:	b2da      	uxtb	r2, r3
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010002:	0b5b      	lsrs	r3, r3, #13
 8010004:	b2db      	uxtb	r3, r3
 8010006:	f003 0301 	and.w	r3, r3, #1
 801000a:	b2da      	uxtb	r2, r3
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010016:	0b1b      	lsrs	r3, r3, #12
 8010018:	b2db      	uxtb	r3, r3
 801001a:	f003 0301 	and.w	r3, r3, #1
 801001e:	b2da      	uxtb	r2, r3
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801002a:	0a9b      	lsrs	r3, r3, #10
 801002c:	b2db      	uxtb	r3, r3
 801002e:	f003 0303 	and.w	r3, r3, #3
 8010032:	b2da      	uxtb	r2, r3
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801003e:	0a1b      	lsrs	r3, r3, #8
 8010040:	b2db      	uxtb	r3, r3
 8010042:	f003 0303 	and.w	r3, r3, #3
 8010046:	b2da      	uxtb	r2, r3
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010052:	085b      	lsrs	r3, r3, #1
 8010054:	b2db      	uxtb	r3, r3
 8010056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801005a:	b2da      	uxtb	r2, r3
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	2201      	movs	r2, #1
 8010066:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 801006a:	2300      	movs	r3, #0
}
 801006c:	4618      	mov	r0, r3
 801006e:	370c      	adds	r7, #12
 8010070:	46bd      	mov	sp, r7
 8010072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010076:	4770      	bx	lr
 8010078:	004005ff 	.word	0x004005ff

0801007c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 801007c:	b480      	push	{r7}
 801007e:	b083      	sub	sp, #12
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80100c6:	2300      	movs	r3, #0
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	370c      	adds	r7, #12
 80100cc:	46bd      	mov	sp, r7
 80100ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d2:	4770      	bx	lr

080100d4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80100d4:	b5b0      	push	{r4, r5, r7, lr}
 80100d6:	b08e      	sub	sp, #56	; 0x38
 80100d8:	af04      	add	r7, sp, #16
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80100de:	2300      	movs	r3, #0
 80100e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2203      	movs	r2, #3
 80100e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100f0:	2b03      	cmp	r3, #3
 80100f2:	d02e      	beq.n	8010152 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80100fa:	d106      	bne.n	801010a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010100:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	639a      	str	r2, [r3, #56]	; 0x38
 8010108:	e029      	b.n	801015e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010110:	d10a      	bne.n	8010128 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f000 fb28 	bl	8010768 <SD_WideBus_Enable>
 8010118:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801011e:	6a3b      	ldr	r3, [r7, #32]
 8010120:	431a      	orrs	r2, r3
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	639a      	str	r2, [r3, #56]	; 0x38
 8010126:	e01a      	b.n	801015e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d10a      	bne.n	8010144 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f000 fb65 	bl	80107fe <SD_WideBus_Disable>
 8010134:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801013a:	6a3b      	ldr	r3, [r7, #32]
 801013c:	431a      	orrs	r2, r3
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	639a      	str	r2, [r3, #56]	; 0x38
 8010142:	e00c      	b.n	801015e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010148:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	639a      	str	r2, [r3, #56]	; 0x38
 8010150:	e005      	b.n	801015e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010156:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010162:	2b00      	cmp	r3, #0
 8010164:	d00b      	beq.n	801017e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	4a26      	ldr	r2, [pc, #152]	; (8010204 <HAL_SD_ConfigWideBusOperation+0x130>)
 801016c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2201      	movs	r2, #1
 8010172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8010176:	2301      	movs	r3, #1
 8010178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801017c:	e01f      	b.n	80101be <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	685b      	ldr	r3, [r3, #4]
 8010182:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	689b      	ldr	r3, [r3, #8]
 8010188:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	68db      	ldr	r3, [r3, #12]
 801018e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	695b      	ldr	r3, [r3, #20]
 8010198:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	699b      	ldr	r3, [r3, #24]
 801019e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681d      	ldr	r5, [r3, #0]
 80101a4:	466c      	mov	r4, sp
 80101a6:	f107 0314 	add.w	r3, r7, #20
 80101aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80101ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80101b2:	f107 0308 	add.w	r3, r7, #8
 80101b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80101b8:	4628      	mov	r0, r5
 80101ba:	f003 f9cf 	bl	801355c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80101c6:	4618      	mov	r0, r3
 80101c8:	f003 faa6 	bl	8013718 <SDMMC_CmdBlockLength>
 80101cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80101ce:	6a3b      	ldr	r3, [r7, #32]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d00c      	beq.n	80101ee <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	4a0a      	ldr	r2, [pc, #40]	; (8010204 <HAL_SD_ConfigWideBusOperation+0x130>)
 80101da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101e0:	6a3b      	ldr	r3, [r7, #32]
 80101e2:	431a      	orrs	r2, r3
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80101e8:	2301      	movs	r3, #1
 80101ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2201      	movs	r2, #1
 80101f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80101f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80101fa:	4618      	mov	r0, r3
 80101fc:	3728      	adds	r7, #40	; 0x28
 80101fe:	46bd      	mov	sp, r7
 8010200:	bdb0      	pop	{r4, r5, r7, pc}
 8010202:	bf00      	nop
 8010204:	004005ff 	.word	0x004005ff

08010208 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b086      	sub	sp, #24
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8010210:	2300      	movs	r3, #0
 8010212:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8010214:	f107 030c 	add.w	r3, r7, #12
 8010218:	4619      	mov	r1, r3
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	f000 fa7c 	bl	8010718 <SD_SendStatus>
 8010220:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010222:	697b      	ldr	r3, [r7, #20]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d005      	beq.n	8010234 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801022c:	697b      	ldr	r3, [r7, #20]
 801022e:	431a      	orrs	r2, r3
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	0a5b      	lsrs	r3, r3, #9
 8010238:	f003 030f 	and.w	r3, r3, #15
 801023c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 801023e:	693b      	ldr	r3, [r7, #16]
}
 8010240:	4618      	mov	r0, r3
 8010242:	3718      	adds	r7, #24
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}

08010248 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010248:	b480      	push	{r7}
 801024a:	b085      	sub	sp, #20
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010254:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010264:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8010266:	bf00      	nop
 8010268:	3714      	adds	r7, #20
 801026a:	46bd      	mov	sp, r7
 801026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010270:	4770      	bx	lr

08010272 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010272:	b580      	push	{r7, lr}
 8010274:	b084      	sub	sp, #16
 8010276:	af00      	add	r7, sp, #0
 8010278:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801027e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010284:	2b82      	cmp	r3, #130	; 0x82
 8010286:	d111      	bne.n	80102ac <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	4618      	mov	r0, r3
 801028e:	f003 faed 	bl	801386c <SDMMC_CmdStopTransfer>
 8010292:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d008      	beq.n	80102ac <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	431a      	orrs	r2, r3
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80102a6:	68f8      	ldr	r0, [r7, #12]
 80102a8:	f7ff fd3a 	bl	800fd20 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	f022 0208 	bic.w	r2, r2, #8
 80102ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	f240 523a 	movw	r2, #1338	; 0x53a
 80102c4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	2201      	movs	r2, #1
 80102ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	2200      	movs	r2, #0
 80102d2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80102d4:	68f8      	ldr	r0, [r7, #12]
 80102d6:	f005 fa99 	bl	801580c <HAL_SD_RxCpltCallback>
#endif
}
 80102da:	bf00      	nop
 80102dc:	3710      	adds	r7, #16
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}
	...

080102e4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b086      	sub	sp, #24
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102f0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f7fa f8c8 	bl	800a488 <HAL_DMA_GetError>
 80102f8:	4603      	mov	r3, r0
 80102fa:	2b02      	cmp	r3, #2
 80102fc:	d03e      	beq.n	801037c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010304:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801030a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801030c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 801030e:	693b      	ldr	r3, [r7, #16]
 8010310:	2b01      	cmp	r3, #1
 8010312:	d002      	beq.n	801031a <SD_DMAError+0x36>
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	2b01      	cmp	r3, #1
 8010318:	d12d      	bne.n	8010376 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	4a19      	ldr	r2, [pc, #100]	; (8010384 <SD_DMAError+0xa0>)
 8010320:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8010330:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8010332:	697b      	ldr	r3, [r7, #20]
 8010334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010336:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 801033e:	6978      	ldr	r0, [r7, #20]
 8010340:	f7ff ff62 	bl	8010208 <HAL_SD_GetCardState>
 8010344:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	2b06      	cmp	r3, #6
 801034a:	d002      	beq.n	8010352 <SD_DMAError+0x6e>
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	2b05      	cmp	r3, #5
 8010350:	d10a      	bne.n	8010368 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8010352:	697b      	ldr	r3, [r7, #20]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	4618      	mov	r0, r3
 8010358:	f003 fa88 	bl	801386c <SDMMC_CmdStopTransfer>
 801035c:	4602      	mov	r2, r0
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010362:	431a      	orrs	r2, r3
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	2201      	movs	r2, #1
 801036c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010370:	697b      	ldr	r3, [r7, #20]
 8010372:	2200      	movs	r2, #0
 8010374:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8010376:	6978      	ldr	r0, [r7, #20]
 8010378:	f7ff fcd2 	bl	800fd20 <HAL_SD_ErrorCallback>
#endif
  }
}
 801037c:	bf00      	nop
 801037e:	3718      	adds	r7, #24
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}
 8010384:	004005ff 	.word	0x004005ff

08010388 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b084      	sub	sp, #16
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010394:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	f240 523a 	movw	r2, #1338	; 0x53a
 801039e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80103a0:	68f8      	ldr	r0, [r7, #12]
 80103a2:	f7ff ff31 	bl	8010208 <HAL_SD_GetCardState>
 80103a6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2201      	movs	r2, #1
 80103ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	2200      	movs	r2, #0
 80103b4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	2b06      	cmp	r3, #6
 80103ba:	d002      	beq.n	80103c2 <SD_DMATxAbort+0x3a>
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	2b05      	cmp	r3, #5
 80103c0:	d10a      	bne.n	80103d8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	4618      	mov	r0, r3
 80103c8:	f003 fa50 	bl	801386c <SDMMC_CmdStopTransfer>
 80103cc:	4602      	mov	r2, r0
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103d2:	431a      	orrs	r2, r3
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d103      	bne.n	80103e8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80103e0:	68f8      	ldr	r0, [r7, #12]
 80103e2:	f005 f9ff 	bl	80157e4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80103e6:	e002      	b.n	80103ee <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80103e8:	68f8      	ldr	r0, [r7, #12]
 80103ea:	f7ff fc99 	bl	800fd20 <HAL_SD_ErrorCallback>
}
 80103ee:	bf00      	nop
 80103f0:	3710      	adds	r7, #16
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}

080103f6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80103f6:	b580      	push	{r7, lr}
 80103f8:	b084      	sub	sp, #16
 80103fa:	af00      	add	r7, sp, #0
 80103fc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010402:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f240 523a 	movw	r2, #1338	; 0x53a
 801040c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 801040e:	68f8      	ldr	r0, [r7, #12]
 8010410:	f7ff fefa 	bl	8010208 <HAL_SD_GetCardState>
 8010414:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	2201      	movs	r2, #1
 801041a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	2200      	movs	r2, #0
 8010422:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8010424:	68bb      	ldr	r3, [r7, #8]
 8010426:	2b06      	cmp	r3, #6
 8010428:	d002      	beq.n	8010430 <SD_DMARxAbort+0x3a>
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	2b05      	cmp	r3, #5
 801042e:	d10a      	bne.n	8010446 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	4618      	mov	r0, r3
 8010436:	f003 fa19 	bl	801386c <SDMMC_CmdStopTransfer>
 801043a:	4602      	mov	r2, r0
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010440:	431a      	orrs	r2, r3
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801044a:	2b00      	cmp	r3, #0
 801044c:	d103      	bne.n	8010456 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 801044e:	68f8      	ldr	r0, [r7, #12]
 8010450:	f005 f9c8 	bl	80157e4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8010454:	e002      	b.n	801045c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8010456:	68f8      	ldr	r0, [r7, #12]
 8010458:	f7ff fc62 	bl	800fd20 <HAL_SD_ErrorCallback>
}
 801045c:	bf00      	nop
 801045e:	3710      	adds	r7, #16
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8010464:	b5b0      	push	{r4, r5, r7, lr}
 8010466:	b094      	sub	sp, #80	; 0x50
 8010468:	af04      	add	r7, sp, #16
 801046a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 801046c:	2301      	movs	r3, #1
 801046e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	4618      	mov	r0, r3
 8010476:	f003 f8ca 	bl	801360e <SDMMC_GetPowerState>
 801047a:	4603      	mov	r3, r0
 801047c:	2b00      	cmp	r3, #0
 801047e:	d102      	bne.n	8010486 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010480:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8010484:	e0b6      	b.n	80105f4 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801048a:	2b03      	cmp	r3, #3
 801048c:	d02f      	beq.n	80104ee <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	4618      	mov	r0, r3
 8010494:	f003 faf5 	bl	8013a82 <SDMMC_CmdSendCID>
 8010498:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801049a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801049c:	2b00      	cmp	r3, #0
 801049e:	d001      	beq.n	80104a4 <SD_InitCard+0x40>
    {
      return errorstate;
 80104a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104a2:	e0a7      	b.n	80105f4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	2100      	movs	r1, #0
 80104aa:	4618      	mov	r0, r3
 80104ac:	f003 f8f5 	bl	801369a <SDMMC_GetResponse>
 80104b0:	4602      	mov	r2, r0
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	2104      	movs	r1, #4
 80104bc:	4618      	mov	r0, r3
 80104be:	f003 f8ec 	bl	801369a <SDMMC_GetResponse>
 80104c2:	4602      	mov	r2, r0
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	2108      	movs	r1, #8
 80104ce:	4618      	mov	r0, r3
 80104d0:	f003 f8e3 	bl	801369a <SDMMC_GetResponse>
 80104d4:	4602      	mov	r2, r0
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	210c      	movs	r1, #12
 80104e0:	4618      	mov	r0, r3
 80104e2:	f003 f8da 	bl	801369a <SDMMC_GetResponse>
 80104e6:	4602      	mov	r2, r0
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104f2:	2b03      	cmp	r3, #3
 80104f4:	d00d      	beq.n	8010512 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	f107 020e 	add.w	r2, r7, #14
 80104fe:	4611      	mov	r1, r2
 8010500:	4618      	mov	r0, r3
 8010502:	f003 fafb 	bl	8013afc <SDMMC_CmdSetRelAdd>
 8010506:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8010508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801050a:	2b00      	cmp	r3, #0
 801050c:	d001      	beq.n	8010512 <SD_InitCard+0xae>
    {
      return errorstate;
 801050e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010510:	e070      	b.n	80105f4 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010516:	2b03      	cmp	r3, #3
 8010518:	d036      	beq.n	8010588 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801051a:	89fb      	ldrh	r3, [r7, #14]
 801051c:	461a      	mov	r2, r3
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681a      	ldr	r2, [r3, #0]
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801052a:	041b      	lsls	r3, r3, #16
 801052c:	4619      	mov	r1, r3
 801052e:	4610      	mov	r0, r2
 8010530:	f003 fac5 	bl	8013abe <SDMMC_CmdSendCSD>
 8010534:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8010536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010538:	2b00      	cmp	r3, #0
 801053a:	d001      	beq.n	8010540 <SD_InitCard+0xdc>
    {
      return errorstate;
 801053c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801053e:	e059      	b.n	80105f4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	2100      	movs	r1, #0
 8010546:	4618      	mov	r0, r3
 8010548:	f003 f8a7 	bl	801369a <SDMMC_GetResponse>
 801054c:	4602      	mov	r2, r0
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	2104      	movs	r1, #4
 8010558:	4618      	mov	r0, r3
 801055a:	f003 f89e 	bl	801369a <SDMMC_GetResponse>
 801055e:	4602      	mov	r2, r0
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	2108      	movs	r1, #8
 801056a:	4618      	mov	r0, r3
 801056c:	f003 f895 	bl	801369a <SDMMC_GetResponse>
 8010570:	4602      	mov	r2, r0
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	210c      	movs	r1, #12
 801057c:	4618      	mov	r0, r3
 801057e:	f003 f88c 	bl	801369a <SDMMC_GetResponse>
 8010582:	4602      	mov	r2, r0
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	2104      	movs	r1, #4
 801058e:	4618      	mov	r0, r3
 8010590:	f003 f883 	bl	801369a <SDMMC_GetResponse>
 8010594:	4603      	mov	r3, r0
 8010596:	0d1a      	lsrs	r2, r3, #20
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 801059c:	f107 0310 	add.w	r3, r7, #16
 80105a0:	4619      	mov	r1, r3
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f7ff fbc6 	bl	800fd34 <HAL_SD_GetCardCSD>
 80105a8:	4603      	mov	r3, r0
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d002      	beq.n	80105b4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80105ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80105b2:	e01f      	b.n	80105f4 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	6819      	ldr	r1, [r3, #0]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105bc:	041b      	lsls	r3, r3, #16
 80105be:	461a      	mov	r2, r3
 80105c0:	f04f 0300 	mov.w	r3, #0
 80105c4:	4608      	mov	r0, r1
 80105c6:	f003 f973 	bl	80138b0 <SDMMC_CmdSelDesel>
 80105ca:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80105cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d001      	beq.n	80105d6 <SD_InitCard+0x172>
  {
    return errorstate;
 80105d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105d4:	e00e      	b.n	80105f4 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681d      	ldr	r5, [r3, #0]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	466c      	mov	r4, sp
 80105de:	f103 0210 	add.w	r2, r3, #16
 80105e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80105e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80105e8:	3304      	adds	r3, #4
 80105ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80105ec:	4628      	mov	r0, r5
 80105ee:	f002 ffb5 	bl	801355c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80105f2:	2300      	movs	r3, #0
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3740      	adds	r7, #64	; 0x40
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bdb0      	pop	{r4, r5, r7, pc}

080105fc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b086      	sub	sp, #24
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010604:	2300      	movs	r3, #0
 8010606:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8010608:	2300      	movs	r3, #0
 801060a:	617b      	str	r3, [r7, #20]
 801060c:	2300      	movs	r3, #0
 801060e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	4618      	mov	r0, r3
 8010616:	f003 f96e 	bl	80138f6 <SDMMC_CmdGoIdleState>
 801061a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d001      	beq.n	8010626 <SD_PowerON+0x2a>
  {
    return errorstate;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	e072      	b.n	801070c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	4618      	mov	r0, r3
 801062c:	f003 f981 	bl	8013932 <SDMMC_CmdOperCond>
 8010630:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d00d      	beq.n	8010654 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2200      	movs	r2, #0
 801063c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	4618      	mov	r0, r3
 8010644:	f003 f957 	bl	80138f6 <SDMMC_CmdGoIdleState>
 8010648:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d004      	beq.n	801065a <SD_PowerON+0x5e>
    {
      return errorstate;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	e05b      	b.n	801070c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2201      	movs	r2, #1
 8010658:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801065e:	2b01      	cmp	r3, #1
 8010660:	d137      	bne.n	80106d2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	2100      	movs	r1, #0
 8010668:	4618      	mov	r0, r3
 801066a:	f003 f981 	bl	8013970 <SDMMC_CmdAppCommand>
 801066e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d02d      	beq.n	80106d2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010676:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801067a:	e047      	b.n	801070c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	2100      	movs	r1, #0
 8010682:	4618      	mov	r0, r3
 8010684:	f003 f974 	bl	8013970 <SDMMC_CmdAppCommand>
 8010688:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d001      	beq.n	8010694 <SD_PowerON+0x98>
    {
      return errorstate;
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	e03b      	b.n	801070c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	491e      	ldr	r1, [pc, #120]	; (8010714 <SD_PowerON+0x118>)
 801069a:	4618      	mov	r0, r3
 801069c:	f003 f98a 	bl	80139b4 <SDMMC_CmdAppOperCommand>
 80106a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d002      	beq.n	80106ae <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80106a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80106ac:	e02e      	b.n	801070c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	2100      	movs	r1, #0
 80106b4:	4618      	mov	r0, r3
 80106b6:	f002 fff0 	bl	801369a <SDMMC_GetResponse>
 80106ba:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	0fdb      	lsrs	r3, r3, #31
 80106c0:	2b01      	cmp	r3, #1
 80106c2:	d101      	bne.n	80106c8 <SD_PowerON+0xcc>
 80106c4:	2301      	movs	r3, #1
 80106c6:	e000      	b.n	80106ca <SD_PowerON+0xce>
 80106c8:	2300      	movs	r3, #0
 80106ca:	613b      	str	r3, [r7, #16]

    count++;
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	3301      	adds	r3, #1
 80106d0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80106d2:	68bb      	ldr	r3, [r7, #8]
 80106d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80106d8:	4293      	cmp	r3, r2
 80106da:	d802      	bhi.n	80106e2 <SD_PowerON+0xe6>
 80106dc:	693b      	ldr	r3, [r7, #16]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d0cc      	beq.n	801067c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80106e8:	4293      	cmp	r3, r2
 80106ea:	d902      	bls.n	80106f2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80106ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80106f0:	e00c      	b.n	801070c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d003      	beq.n	8010704 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2201      	movs	r2, #1
 8010700:	645a      	str	r2, [r3, #68]	; 0x44
 8010702:	e002      	b.n	801070a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2200      	movs	r2, #0
 8010708:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 801070a:	2300      	movs	r3, #0
}
 801070c:	4618      	mov	r0, r3
 801070e:	3718      	adds	r7, #24
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}
 8010714:	c1100000 	.word	0xc1100000

08010718 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d102      	bne.n	801072e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8010728:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801072c:	e018      	b.n	8010760 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681a      	ldr	r2, [r3, #0]
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010736:	041b      	lsls	r3, r3, #16
 8010738:	4619      	mov	r1, r3
 801073a:	4610      	mov	r0, r2
 801073c:	f003 f9ff 	bl	8013b3e <SDMMC_CmdSendStatus>
 8010740:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d001      	beq.n	801074c <SD_SendStatus+0x34>
  {
    return errorstate;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	e009      	b.n	8010760 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	2100      	movs	r1, #0
 8010752:	4618      	mov	r0, r3
 8010754:	f002 ffa1 	bl	801369a <SDMMC_GetResponse>
 8010758:	4602      	mov	r2, r0
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 801075e:	2300      	movs	r3, #0
}
 8010760:	4618      	mov	r0, r3
 8010762:	3710      	adds	r7, #16
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}

08010768 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b086      	sub	sp, #24
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8010770:	2300      	movs	r3, #0
 8010772:	60fb      	str	r3, [r7, #12]
 8010774:	2300      	movs	r3, #0
 8010776:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	2100      	movs	r1, #0
 801077e:	4618      	mov	r0, r3
 8010780:	f002 ff8b 	bl	801369a <SDMMC_GetResponse>
 8010784:	4603      	mov	r3, r0
 8010786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801078a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801078e:	d102      	bne.n	8010796 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010790:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010794:	e02f      	b.n	80107f6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010796:	f107 030c 	add.w	r3, r7, #12
 801079a:	4619      	mov	r1, r3
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f000 f879 	bl	8010894 <SD_FindSCR>
 80107a2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d001      	beq.n	80107ae <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	e023      	b.n	80107f6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d01c      	beq.n	80107f2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681a      	ldr	r2, [r3, #0]
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107c0:	041b      	lsls	r3, r3, #16
 80107c2:	4619      	mov	r1, r3
 80107c4:	4610      	mov	r0, r2
 80107c6:	f003 f8d3 	bl	8013970 <SDMMC_CmdAppCommand>
 80107ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d001      	beq.n	80107d6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	e00f      	b.n	80107f6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	2102      	movs	r1, #2
 80107dc:	4618      	mov	r0, r3
 80107de:	f003 f90d 	bl	80139fc <SDMMC_CmdBusWidth>
 80107e2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d001      	beq.n	80107ee <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80107ea:	697b      	ldr	r3, [r7, #20]
 80107ec:	e003      	b.n	80107f6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80107ee:	2300      	movs	r3, #0
 80107f0:	e001      	b.n	80107f6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80107f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3718      	adds	r7, #24
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}

080107fe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80107fe:	b580      	push	{r7, lr}
 8010800:	b086      	sub	sp, #24
 8010802:	af00      	add	r7, sp, #0
 8010804:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8010806:	2300      	movs	r3, #0
 8010808:	60fb      	str	r3, [r7, #12]
 801080a:	2300      	movs	r3, #0
 801080c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	2100      	movs	r1, #0
 8010814:	4618      	mov	r0, r3
 8010816:	f002 ff40 	bl	801369a <SDMMC_GetResponse>
 801081a:	4603      	mov	r3, r0
 801081c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010820:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010824:	d102      	bne.n	801082c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010826:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801082a:	e02f      	b.n	801088c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801082c:	f107 030c 	add.w	r3, r7, #12
 8010830:	4619      	mov	r1, r3
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f000 f82e 	bl	8010894 <SD_FindSCR>
 8010838:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d001      	beq.n	8010844 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	e023      	b.n	801088c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8010844:	693b      	ldr	r3, [r7, #16]
 8010846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801084a:	2b00      	cmp	r3, #0
 801084c:	d01c      	beq.n	8010888 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010856:	041b      	lsls	r3, r3, #16
 8010858:	4619      	mov	r1, r3
 801085a:	4610      	mov	r0, r2
 801085c:	f003 f888 	bl	8013970 <SDMMC_CmdAppCommand>
 8010860:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010862:	697b      	ldr	r3, [r7, #20]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d001      	beq.n	801086c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8010868:	697b      	ldr	r3, [r7, #20]
 801086a:	e00f      	b.n	801088c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	2100      	movs	r1, #0
 8010872:	4618      	mov	r0, r3
 8010874:	f003 f8c2 	bl	80139fc <SDMMC_CmdBusWidth>
 8010878:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d001      	beq.n	8010884 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	e003      	b.n	801088c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8010884:	2300      	movs	r3, #0
 8010886:	e001      	b.n	801088c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010888:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 801088c:	4618      	mov	r0, r3
 801088e:	3718      	adds	r7, #24
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}

08010894 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8010894:	b590      	push	{r4, r7, lr}
 8010896:	b08f      	sub	sp, #60	; 0x3c
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
 801089c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801089e:	f7f8 faf1 	bl	8008e84 <HAL_GetTick>
 80108a2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80108a4:	2300      	movs	r3, #0
 80108a6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80108a8:	2300      	movs	r3, #0
 80108aa:	60bb      	str	r3, [r7, #8]
 80108ac:	2300      	movs	r3, #0
 80108ae:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	2108      	movs	r1, #8
 80108ba:	4618      	mov	r0, r3
 80108bc:	f002 ff2c 	bl	8013718 <SDMMC_CmdBlockLength>
 80108c0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80108c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d001      	beq.n	80108cc <SD_FindSCR+0x38>
  {
    return errorstate;
 80108c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ca:	e0b2      	b.n	8010a32 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681a      	ldr	r2, [r3, #0]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108d4:	041b      	lsls	r3, r3, #16
 80108d6:	4619      	mov	r1, r3
 80108d8:	4610      	mov	r0, r2
 80108da:	f003 f849 	bl	8013970 <SDMMC_CmdAppCommand>
 80108de:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80108e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d001      	beq.n	80108ea <SD_FindSCR+0x56>
  {
    return errorstate;
 80108e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e8:	e0a3      	b.n	8010a32 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80108ea:	f04f 33ff 	mov.w	r3, #4294967295
 80108ee:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80108f0:	2308      	movs	r3, #8
 80108f2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80108f4:	2330      	movs	r3, #48	; 0x30
 80108f6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80108f8:	2302      	movs	r3, #2
 80108fa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80108fc:	2300      	movs	r3, #0
 80108fe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8010900:	2301      	movs	r3, #1
 8010902:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	f107 0210 	add.w	r2, r7, #16
 801090c:	4611      	mov	r1, r2
 801090e:	4618      	mov	r0, r3
 8010910:	f002 fed6 	bl	80136c0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	4618      	mov	r0, r3
 801091a:	f003 f891 	bl	8013a40 <SDMMC_CmdSendSCR>
 801091e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8010920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010922:	2b00      	cmp	r3, #0
 8010924:	d02a      	beq.n	801097c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8010926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010928:	e083      	b.n	8010a32 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010934:	2b00      	cmp	r3, #0
 8010936:	d00f      	beq.n	8010958 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6819      	ldr	r1, [r3, #0]
 801093c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801093e:	009b      	lsls	r3, r3, #2
 8010940:	f107 0208 	add.w	r2, r7, #8
 8010944:	18d4      	adds	r4, r2, r3
 8010946:	4608      	mov	r0, r1
 8010948:	f002 fe34 	bl	80135b4 <SDMMC_ReadFIFO>
 801094c:	4603      	mov	r3, r0
 801094e:	6023      	str	r3, [r4, #0]
      index++;
 8010950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010952:	3301      	adds	r3, #1
 8010954:	637b      	str	r3, [r7, #52]	; 0x34
 8010956:	e006      	b.n	8010966 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801095e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010962:	2b00      	cmp	r3, #0
 8010964:	d012      	beq.n	801098c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8010966:	f7f8 fa8d 	bl	8008e84 <HAL_GetTick>
 801096a:	4602      	mov	r2, r0
 801096c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801096e:	1ad3      	subs	r3, r2, r3
 8010970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010974:	d102      	bne.n	801097c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8010976:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801097a:	e05a      	b.n	8010a32 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010982:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8010986:	2b00      	cmp	r3, #0
 8010988:	d0cf      	beq.n	801092a <SD_FindSCR+0x96>
 801098a:	e000      	b.n	801098e <SD_FindSCR+0xfa>
      break;
 801098c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010994:	f003 0308 	and.w	r3, r3, #8
 8010998:	2b00      	cmp	r3, #0
 801099a:	d005      	beq.n	80109a8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	2208      	movs	r2, #8
 80109a2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80109a4:	2308      	movs	r3, #8
 80109a6:	e044      	b.n	8010a32 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109ae:	f003 0302 	and.w	r3, r3, #2
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d005      	beq.n	80109c2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	2202      	movs	r2, #2
 80109bc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80109be:	2302      	movs	r3, #2
 80109c0:	e037      	b.n	8010a32 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109c8:	f003 0320 	and.w	r3, r3, #32
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d005      	beq.n	80109dc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	2220      	movs	r2, #32
 80109d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80109d8:	2320      	movs	r3, #32
 80109da:	e02a      	b.n	8010a32 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	f240 523a 	movw	r2, #1338	; 0x53a
 80109e4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	061a      	lsls	r2, r3, #24
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	021b      	lsls	r3, r3, #8
 80109ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80109f2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	0a1b      	lsrs	r3, r3, #8
 80109f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80109fc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	0e1b      	lsrs	r3, r3, #24
 8010a02:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a06:	601a      	str	r2, [r3, #0]
    scr++;
 8010a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a0a:	3304      	adds	r3, #4
 8010a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8010a0e:	68bb      	ldr	r3, [r7, #8]
 8010a10:	061a      	lsls	r2, r3, #24
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	021b      	lsls	r3, r3, #8
 8010a16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010a1a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	0a1b      	lsrs	r3, r3, #8
 8010a20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8010a24:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	0e1b      	lsrs	r3, r3, #24
 8010a2a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8010a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a2e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8010a30:	2300      	movs	r3, #0
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	373c      	adds	r7, #60	; 0x3c
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd90      	pop	{r4, r7, pc}

08010a3a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8010a3a:	b580      	push	{r7, lr}
 8010a3c:	b086      	sub	sp, #24
 8010a3e:	af00      	add	r7, sp, #0
 8010a40:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a46:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a4c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8010a4e:	693b      	ldr	r3, [r7, #16]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d03f      	beq.n	8010ad4 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8010a54:	2300      	movs	r3, #0
 8010a56:	617b      	str	r3, [r7, #20]
 8010a58:	e033      	b.n	8010ac2 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f002 fda8 	bl	80135b4 <SDMMC_ReadFIFO>
 8010a64:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	b2da      	uxtb	r2, r3
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	3301      	adds	r3, #1
 8010a72:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	3b01      	subs	r3, #1
 8010a78:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	0a1b      	lsrs	r3, r3, #8
 8010a7e:	b2da      	uxtb	r2, r3
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	3301      	adds	r3, #1
 8010a88:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010a8a:	693b      	ldr	r3, [r7, #16]
 8010a8c:	3b01      	subs	r3, #1
 8010a8e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8010a90:	68bb      	ldr	r3, [r7, #8]
 8010a92:	0c1b      	lsrs	r3, r3, #16
 8010a94:	b2da      	uxtb	r2, r3
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010aa0:	693b      	ldr	r3, [r7, #16]
 8010aa2:	3b01      	subs	r3, #1
 8010aa4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8010aa6:	68bb      	ldr	r3, [r7, #8]
 8010aa8:	0e1b      	lsrs	r3, r3, #24
 8010aaa:	b2da      	uxtb	r2, r3
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	3301      	adds	r3, #1
 8010ab4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010ab6:	693b      	ldr	r3, [r7, #16]
 8010ab8:	3b01      	subs	r3, #1
 8010aba:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	3301      	adds	r3, #1
 8010ac0:	617b      	str	r3, [r7, #20]
 8010ac2:	697b      	ldr	r3, [r7, #20]
 8010ac4:	2b07      	cmp	r3, #7
 8010ac6:	d9c8      	bls.n	8010a5a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	68fa      	ldr	r2, [r7, #12]
 8010acc:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	693a      	ldr	r2, [r7, #16]
 8010ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8010ad4:	bf00      	nop
 8010ad6:	3718      	adds	r7, #24
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}

08010adc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b086      	sub	sp, #24
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6a1b      	ldr	r3, [r3, #32]
 8010ae8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aee:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d043      	beq.n	8010b7e <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8010af6:	2300      	movs	r3, #0
 8010af8:	617b      	str	r3, [r7, #20]
 8010afa:	e037      	b.n	8010b6c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	781b      	ldrb	r3, [r3, #0]
 8010b00:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	3301      	adds	r3, #1
 8010b06:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010b08:	693b      	ldr	r3, [r7, #16]
 8010b0a:	3b01      	subs	r3, #1
 8010b0c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	781b      	ldrb	r3, [r3, #0]
 8010b12:	021a      	lsls	r2, r3, #8
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	4313      	orrs	r3, r2
 8010b18:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	3301      	adds	r3, #1
 8010b1e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010b20:	693b      	ldr	r3, [r7, #16]
 8010b22:	3b01      	subs	r3, #1
 8010b24:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	781b      	ldrb	r3, [r3, #0]
 8010b2a:	041a      	lsls	r2, r3, #16
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	4313      	orrs	r3, r2
 8010b30:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	3301      	adds	r3, #1
 8010b36:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	3b01      	subs	r3, #1
 8010b3c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	781b      	ldrb	r3, [r3, #0]
 8010b42:	061a      	lsls	r2, r3, #24
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	4313      	orrs	r3, r2
 8010b48:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	3301      	adds	r3, #1
 8010b4e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010b50:	693b      	ldr	r3, [r7, #16]
 8010b52:	3b01      	subs	r3, #1
 8010b54:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f107 0208 	add.w	r2, r7, #8
 8010b5e:	4611      	mov	r1, r2
 8010b60:	4618      	mov	r0, r3
 8010b62:	f002 fd34 	bl	80135ce <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8010b66:	697b      	ldr	r3, [r7, #20]
 8010b68:	3301      	adds	r3, #1
 8010b6a:	617b      	str	r3, [r7, #20]
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	2b07      	cmp	r3, #7
 8010b70:	d9c4      	bls.n	8010afc <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	68fa      	ldr	r2, [r7, #12]
 8010b76:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	693a      	ldr	r2, [r7, #16]
 8010b7c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8010b7e:	bf00      	nop
 8010b80:	3718      	adds	r7, #24
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}

08010b86 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b084      	sub	sp, #16
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d101      	bne.n	8010b98 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010b94:	2301      	movs	r3, #1
 8010b96:	e09d      	b.n	8010cd4 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d108      	bne.n	8010bb2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	685b      	ldr	r3, [r3, #4]
 8010ba4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010ba8:	d009      	beq.n	8010bbe <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2200      	movs	r2, #0
 8010bae:	61da      	str	r2, [r3, #28]
 8010bb0:	e005      	b.n	8010bbe <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010bca:	b2db      	uxtb	r3, r3
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d106      	bne.n	8010bde <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	f7f7 fb2b 	bl	8008234 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2202      	movs	r2, #2
 8010be2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	681a      	ldr	r2, [r3, #0]
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010bf4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	68db      	ldr	r3, [r3, #12]
 8010bfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010bfe:	d902      	bls.n	8010c06 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8010c00:	2300      	movs	r3, #0
 8010c02:	60fb      	str	r3, [r7, #12]
 8010c04:	e002      	b.n	8010c0c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8010c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c0a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	68db      	ldr	r3, [r3, #12]
 8010c10:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8010c14:	d007      	beq.n	8010c26 <HAL_SPI_Init+0xa0>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	68db      	ldr	r3, [r3, #12]
 8010c1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010c1e:	d002      	beq.n	8010c26 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2200      	movs	r2, #0
 8010c24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	685b      	ldr	r3, [r3, #4]
 8010c2a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	689b      	ldr	r3, [r3, #8]
 8010c32:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8010c36:	431a      	orrs	r2, r3
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	691b      	ldr	r3, [r3, #16]
 8010c3c:	f003 0302 	and.w	r3, r3, #2
 8010c40:	431a      	orrs	r2, r3
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	695b      	ldr	r3, [r3, #20]
 8010c46:	f003 0301 	and.w	r3, r3, #1
 8010c4a:	431a      	orrs	r2, r3
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	699b      	ldr	r3, [r3, #24]
 8010c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010c54:	431a      	orrs	r2, r3
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	69db      	ldr	r3, [r3, #28]
 8010c5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010c5e:	431a      	orrs	r2, r3
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6a1b      	ldr	r3, [r3, #32]
 8010c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c68:	ea42 0103 	orr.w	r1, r2, r3
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	430a      	orrs	r2, r1
 8010c7a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	699b      	ldr	r3, [r3, #24]
 8010c80:	0c1b      	lsrs	r3, r3, #16
 8010c82:	f003 0204 	and.w	r2, r3, #4
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c8a:	f003 0310 	and.w	r3, r3, #16
 8010c8e:	431a      	orrs	r2, r3
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c94:	f003 0308 	and.w	r3, r3, #8
 8010c98:	431a      	orrs	r2, r3
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	68db      	ldr	r3, [r3, #12]
 8010c9e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8010ca2:	ea42 0103 	orr.w	r1, r2, r3
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	430a      	orrs	r2, r1
 8010cb2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	69da      	ldr	r2, [r3, #28]
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010cc2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	2201      	movs	r2, #1
 8010cce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8010cd2:	2300      	movs	r3, #0
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3710      	adds	r7, #16
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b082      	sub	sp, #8
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d101      	bne.n	8010cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010cea:	2301      	movs	r3, #1
 8010cec:	e049      	b.n	8010d82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010cf4:	b2db      	uxtb	r3, r3
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d106      	bne.n	8010d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010d02:	6878      	ldr	r0, [r7, #4]
 8010d04:	f7f7 fb28 	bl	8008358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2202      	movs	r2, #2
 8010d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681a      	ldr	r2, [r3, #0]
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	3304      	adds	r3, #4
 8010d18:	4619      	mov	r1, r3
 8010d1a:	4610      	mov	r0, r2
 8010d1c:	f000 fd98 	bl	8011850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2201      	movs	r2, #1
 8010d24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2201      	movs	r2, #1
 8010d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2201      	movs	r2, #1
 8010d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2201      	movs	r2, #1
 8010d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2201      	movs	r2, #1
 8010d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	2201      	movs	r2, #1
 8010d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	2201      	movs	r2, #1
 8010d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2201      	movs	r2, #1
 8010d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2201      	movs	r2, #1
 8010d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2201      	movs	r2, #1
 8010d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2201      	movs	r2, #1
 8010d74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2201      	movs	r2, #1
 8010d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010d80:	2300      	movs	r3, #0
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3708      	adds	r7, #8
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
	...

08010d8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8010d8c:	b480      	push	{r7}
 8010d8e:	b085      	sub	sp, #20
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010d9a:	b2db      	uxtb	r3, r3
 8010d9c:	2b01      	cmp	r3, #1
 8010d9e:	d001      	beq.n	8010da4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8010da0:	2301      	movs	r3, #1
 8010da2:	e04c      	b.n	8010e3e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2202      	movs	r2, #2
 8010da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	4a26      	ldr	r2, [pc, #152]	; (8010e4c <HAL_TIM_Base_Start+0xc0>)
 8010db2:	4293      	cmp	r3, r2
 8010db4:	d022      	beq.n	8010dfc <HAL_TIM_Base_Start+0x70>
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010dbe:	d01d      	beq.n	8010dfc <HAL_TIM_Base_Start+0x70>
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	4a22      	ldr	r2, [pc, #136]	; (8010e50 <HAL_TIM_Base_Start+0xc4>)
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	d018      	beq.n	8010dfc <HAL_TIM_Base_Start+0x70>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	4a21      	ldr	r2, [pc, #132]	; (8010e54 <HAL_TIM_Base_Start+0xc8>)
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	d013      	beq.n	8010dfc <HAL_TIM_Base_Start+0x70>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	4a1f      	ldr	r2, [pc, #124]	; (8010e58 <HAL_TIM_Base_Start+0xcc>)
 8010dda:	4293      	cmp	r3, r2
 8010ddc:	d00e      	beq.n	8010dfc <HAL_TIM_Base_Start+0x70>
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	4a1e      	ldr	r2, [pc, #120]	; (8010e5c <HAL_TIM_Base_Start+0xd0>)
 8010de4:	4293      	cmp	r3, r2
 8010de6:	d009      	beq.n	8010dfc <HAL_TIM_Base_Start+0x70>
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	4a1c      	ldr	r2, [pc, #112]	; (8010e60 <HAL_TIM_Base_Start+0xd4>)
 8010dee:	4293      	cmp	r3, r2
 8010df0:	d004      	beq.n	8010dfc <HAL_TIM_Base_Start+0x70>
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	4a1b      	ldr	r2, [pc, #108]	; (8010e64 <HAL_TIM_Base_Start+0xd8>)
 8010df8:	4293      	cmp	r3, r2
 8010dfa:	d115      	bne.n	8010e28 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	689a      	ldr	r2, [r3, #8]
 8010e02:	4b19      	ldr	r3, [pc, #100]	; (8010e68 <HAL_TIM_Base_Start+0xdc>)
 8010e04:	4013      	ands	r3, r2
 8010e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	2b06      	cmp	r3, #6
 8010e0c:	d015      	beq.n	8010e3a <HAL_TIM_Base_Start+0xae>
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e14:	d011      	beq.n	8010e3a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	681a      	ldr	r2, [r3, #0]
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	f042 0201 	orr.w	r2, r2, #1
 8010e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e26:	e008      	b.n	8010e3a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	681a      	ldr	r2, [r3, #0]
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	f042 0201 	orr.w	r2, r2, #1
 8010e36:	601a      	str	r2, [r3, #0]
 8010e38:	e000      	b.n	8010e3c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010e3c:	2300      	movs	r3, #0
}
 8010e3e:	4618      	mov	r0, r3
 8010e40:	3714      	adds	r7, #20
 8010e42:	46bd      	mov	sp, r7
 8010e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e48:	4770      	bx	lr
 8010e4a:	bf00      	nop
 8010e4c:	40010000 	.word	0x40010000
 8010e50:	40000400 	.word	0x40000400
 8010e54:	40000800 	.word	0x40000800
 8010e58:	40000c00 	.word	0x40000c00
 8010e5c:	40010400 	.word	0x40010400
 8010e60:	40014000 	.word	0x40014000
 8010e64:	40001800 	.word	0x40001800
 8010e68:	00010007 	.word	0x00010007

08010e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010e6c:	b480      	push	{r7}
 8010e6e:	b085      	sub	sp, #20
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010e7a:	b2db      	uxtb	r3, r3
 8010e7c:	2b01      	cmp	r3, #1
 8010e7e:	d001      	beq.n	8010e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010e80:	2301      	movs	r3, #1
 8010e82:	e054      	b.n	8010f2e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2202      	movs	r2, #2
 8010e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	68da      	ldr	r2, [r3, #12]
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	f042 0201 	orr.w	r2, r2, #1
 8010e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	4a26      	ldr	r2, [pc, #152]	; (8010f3c <HAL_TIM_Base_Start_IT+0xd0>)
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	d022      	beq.n	8010eec <HAL_TIM_Base_Start_IT+0x80>
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010eae:	d01d      	beq.n	8010eec <HAL_TIM_Base_Start_IT+0x80>
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	4a22      	ldr	r2, [pc, #136]	; (8010f40 <HAL_TIM_Base_Start_IT+0xd4>)
 8010eb6:	4293      	cmp	r3, r2
 8010eb8:	d018      	beq.n	8010eec <HAL_TIM_Base_Start_IT+0x80>
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	4a21      	ldr	r2, [pc, #132]	; (8010f44 <HAL_TIM_Base_Start_IT+0xd8>)
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	d013      	beq.n	8010eec <HAL_TIM_Base_Start_IT+0x80>
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	4a1f      	ldr	r2, [pc, #124]	; (8010f48 <HAL_TIM_Base_Start_IT+0xdc>)
 8010eca:	4293      	cmp	r3, r2
 8010ecc:	d00e      	beq.n	8010eec <HAL_TIM_Base_Start_IT+0x80>
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	4a1e      	ldr	r2, [pc, #120]	; (8010f4c <HAL_TIM_Base_Start_IT+0xe0>)
 8010ed4:	4293      	cmp	r3, r2
 8010ed6:	d009      	beq.n	8010eec <HAL_TIM_Base_Start_IT+0x80>
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	4a1c      	ldr	r2, [pc, #112]	; (8010f50 <HAL_TIM_Base_Start_IT+0xe4>)
 8010ede:	4293      	cmp	r3, r2
 8010ee0:	d004      	beq.n	8010eec <HAL_TIM_Base_Start_IT+0x80>
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	4a1b      	ldr	r2, [pc, #108]	; (8010f54 <HAL_TIM_Base_Start_IT+0xe8>)
 8010ee8:	4293      	cmp	r3, r2
 8010eea:	d115      	bne.n	8010f18 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	689a      	ldr	r2, [r3, #8]
 8010ef2:	4b19      	ldr	r3, [pc, #100]	; (8010f58 <HAL_TIM_Base_Start_IT+0xec>)
 8010ef4:	4013      	ands	r3, r2
 8010ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	2b06      	cmp	r3, #6
 8010efc:	d015      	beq.n	8010f2a <HAL_TIM_Base_Start_IT+0xbe>
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f04:	d011      	beq.n	8010f2a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	681a      	ldr	r2, [r3, #0]
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	f042 0201 	orr.w	r2, r2, #1
 8010f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f16:	e008      	b.n	8010f2a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	681a      	ldr	r2, [r3, #0]
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	f042 0201 	orr.w	r2, r2, #1
 8010f26:	601a      	str	r2, [r3, #0]
 8010f28:	e000      	b.n	8010f2c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010f2c:	2300      	movs	r3, #0
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	3714      	adds	r7, #20
 8010f32:	46bd      	mov	sp, r7
 8010f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f38:	4770      	bx	lr
 8010f3a:	bf00      	nop
 8010f3c:	40010000 	.word	0x40010000
 8010f40:	40000400 	.word	0x40000400
 8010f44:	40000800 	.word	0x40000800
 8010f48:	40000c00 	.word	0x40000c00
 8010f4c:	40010400 	.word	0x40010400
 8010f50:	40014000 	.word	0x40014000
 8010f54:	40001800 	.word	0x40001800
 8010f58:	00010007 	.word	0x00010007

08010f5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b082      	sub	sp, #8
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d101      	bne.n	8010f6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	e049      	b.n	8011002 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010f74:	b2db      	uxtb	r3, r3
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d106      	bne.n	8010f88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	f000 f841 	bl	801100a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2202      	movs	r2, #2
 8010f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681a      	ldr	r2, [r3, #0]
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	3304      	adds	r3, #4
 8010f98:	4619      	mov	r1, r3
 8010f9a:	4610      	mov	r0, r2
 8010f9c:	f000 fc58 	bl	8011850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2201      	movs	r2, #1
 8010fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2201      	movs	r2, #1
 8010fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2201      	movs	r2, #1
 8010fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2201      	movs	r2, #1
 8010fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2201      	movs	r2, #1
 8010fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	2201      	movs	r2, #1
 8010fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2201      	movs	r2, #1
 8010fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2201      	movs	r2, #1
 8010fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2201      	movs	r2, #1
 8010fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2201      	movs	r2, #1
 8010ff4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2201      	movs	r2, #1
 8010ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011000:	2300      	movs	r3, #0
}
 8011002:	4618      	mov	r0, r3
 8011004:	3708      	adds	r7, #8
 8011006:	46bd      	mov	sp, r7
 8011008:	bd80      	pop	{r7, pc}

0801100a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801100a:	b480      	push	{r7}
 801100c:	b083      	sub	sp, #12
 801100e:	af00      	add	r7, sp, #0
 8011010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8011012:	bf00      	nop
 8011014:	370c      	adds	r7, #12
 8011016:	46bd      	mov	sp, r7
 8011018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101c:	4770      	bx	lr
	...

08011020 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b084      	sub	sp, #16
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
 8011028:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d109      	bne.n	8011044 <HAL_TIM_PWM_Start+0x24>
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011036:	b2db      	uxtb	r3, r3
 8011038:	2b01      	cmp	r3, #1
 801103a:	bf14      	ite	ne
 801103c:	2301      	movne	r3, #1
 801103e:	2300      	moveq	r3, #0
 8011040:	b2db      	uxtb	r3, r3
 8011042:	e03c      	b.n	80110be <HAL_TIM_PWM_Start+0x9e>
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	2b04      	cmp	r3, #4
 8011048:	d109      	bne.n	801105e <HAL_TIM_PWM_Start+0x3e>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8011050:	b2db      	uxtb	r3, r3
 8011052:	2b01      	cmp	r3, #1
 8011054:	bf14      	ite	ne
 8011056:	2301      	movne	r3, #1
 8011058:	2300      	moveq	r3, #0
 801105a:	b2db      	uxtb	r3, r3
 801105c:	e02f      	b.n	80110be <HAL_TIM_PWM_Start+0x9e>
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	2b08      	cmp	r3, #8
 8011062:	d109      	bne.n	8011078 <HAL_TIM_PWM_Start+0x58>
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801106a:	b2db      	uxtb	r3, r3
 801106c:	2b01      	cmp	r3, #1
 801106e:	bf14      	ite	ne
 8011070:	2301      	movne	r3, #1
 8011072:	2300      	moveq	r3, #0
 8011074:	b2db      	uxtb	r3, r3
 8011076:	e022      	b.n	80110be <HAL_TIM_PWM_Start+0x9e>
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	2b0c      	cmp	r3, #12
 801107c:	d109      	bne.n	8011092 <HAL_TIM_PWM_Start+0x72>
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011084:	b2db      	uxtb	r3, r3
 8011086:	2b01      	cmp	r3, #1
 8011088:	bf14      	ite	ne
 801108a:	2301      	movne	r3, #1
 801108c:	2300      	moveq	r3, #0
 801108e:	b2db      	uxtb	r3, r3
 8011090:	e015      	b.n	80110be <HAL_TIM_PWM_Start+0x9e>
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	2b10      	cmp	r3, #16
 8011096:	d109      	bne.n	80110ac <HAL_TIM_PWM_Start+0x8c>
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801109e:	b2db      	uxtb	r3, r3
 80110a0:	2b01      	cmp	r3, #1
 80110a2:	bf14      	ite	ne
 80110a4:	2301      	movne	r3, #1
 80110a6:	2300      	moveq	r3, #0
 80110a8:	b2db      	uxtb	r3, r3
 80110aa:	e008      	b.n	80110be <HAL_TIM_PWM_Start+0x9e>
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80110b2:	b2db      	uxtb	r3, r3
 80110b4:	2b01      	cmp	r3, #1
 80110b6:	bf14      	ite	ne
 80110b8:	2301      	movne	r3, #1
 80110ba:	2300      	moveq	r3, #0
 80110bc:	b2db      	uxtb	r3, r3
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d001      	beq.n	80110c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80110c2:	2301      	movs	r3, #1
 80110c4:	e092      	b.n	80111ec <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d104      	bne.n	80110d6 <HAL_TIM_PWM_Start+0xb6>
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2202      	movs	r2, #2
 80110d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80110d4:	e023      	b.n	801111e <HAL_TIM_PWM_Start+0xfe>
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	2b04      	cmp	r3, #4
 80110da:	d104      	bne.n	80110e6 <HAL_TIM_PWM_Start+0xc6>
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	2202      	movs	r2, #2
 80110e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80110e4:	e01b      	b.n	801111e <HAL_TIM_PWM_Start+0xfe>
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	2b08      	cmp	r3, #8
 80110ea:	d104      	bne.n	80110f6 <HAL_TIM_PWM_Start+0xd6>
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2202      	movs	r2, #2
 80110f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80110f4:	e013      	b.n	801111e <HAL_TIM_PWM_Start+0xfe>
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	2b0c      	cmp	r3, #12
 80110fa:	d104      	bne.n	8011106 <HAL_TIM_PWM_Start+0xe6>
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2202      	movs	r2, #2
 8011100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011104:	e00b      	b.n	801111e <HAL_TIM_PWM_Start+0xfe>
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	2b10      	cmp	r3, #16
 801110a:	d104      	bne.n	8011116 <HAL_TIM_PWM_Start+0xf6>
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2202      	movs	r2, #2
 8011110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011114:	e003      	b.n	801111e <HAL_TIM_PWM_Start+0xfe>
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2202      	movs	r2, #2
 801111a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	2201      	movs	r2, #1
 8011124:	6839      	ldr	r1, [r7, #0]
 8011126:	4618      	mov	r0, r3
 8011128:	f000 ff2a 	bl	8011f80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	4a30      	ldr	r2, [pc, #192]	; (80111f4 <HAL_TIM_PWM_Start+0x1d4>)
 8011132:	4293      	cmp	r3, r2
 8011134:	d004      	beq.n	8011140 <HAL_TIM_PWM_Start+0x120>
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	4a2f      	ldr	r2, [pc, #188]	; (80111f8 <HAL_TIM_PWM_Start+0x1d8>)
 801113c:	4293      	cmp	r3, r2
 801113e:	d101      	bne.n	8011144 <HAL_TIM_PWM_Start+0x124>
 8011140:	2301      	movs	r3, #1
 8011142:	e000      	b.n	8011146 <HAL_TIM_PWM_Start+0x126>
 8011144:	2300      	movs	r3, #0
 8011146:	2b00      	cmp	r3, #0
 8011148:	d007      	beq.n	801115a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011158:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	4a25      	ldr	r2, [pc, #148]	; (80111f4 <HAL_TIM_PWM_Start+0x1d4>)
 8011160:	4293      	cmp	r3, r2
 8011162:	d022      	beq.n	80111aa <HAL_TIM_PWM_Start+0x18a>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801116c:	d01d      	beq.n	80111aa <HAL_TIM_PWM_Start+0x18a>
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	4a22      	ldr	r2, [pc, #136]	; (80111fc <HAL_TIM_PWM_Start+0x1dc>)
 8011174:	4293      	cmp	r3, r2
 8011176:	d018      	beq.n	80111aa <HAL_TIM_PWM_Start+0x18a>
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	4a20      	ldr	r2, [pc, #128]	; (8011200 <HAL_TIM_PWM_Start+0x1e0>)
 801117e:	4293      	cmp	r3, r2
 8011180:	d013      	beq.n	80111aa <HAL_TIM_PWM_Start+0x18a>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	4a1f      	ldr	r2, [pc, #124]	; (8011204 <HAL_TIM_PWM_Start+0x1e4>)
 8011188:	4293      	cmp	r3, r2
 801118a:	d00e      	beq.n	80111aa <HAL_TIM_PWM_Start+0x18a>
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	4a19      	ldr	r2, [pc, #100]	; (80111f8 <HAL_TIM_PWM_Start+0x1d8>)
 8011192:	4293      	cmp	r3, r2
 8011194:	d009      	beq.n	80111aa <HAL_TIM_PWM_Start+0x18a>
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	4a1b      	ldr	r2, [pc, #108]	; (8011208 <HAL_TIM_PWM_Start+0x1e8>)
 801119c:	4293      	cmp	r3, r2
 801119e:	d004      	beq.n	80111aa <HAL_TIM_PWM_Start+0x18a>
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	4a19      	ldr	r2, [pc, #100]	; (801120c <HAL_TIM_PWM_Start+0x1ec>)
 80111a6:	4293      	cmp	r3, r2
 80111a8:	d115      	bne.n	80111d6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	689a      	ldr	r2, [r3, #8]
 80111b0:	4b17      	ldr	r3, [pc, #92]	; (8011210 <HAL_TIM_PWM_Start+0x1f0>)
 80111b2:	4013      	ands	r3, r2
 80111b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	2b06      	cmp	r3, #6
 80111ba:	d015      	beq.n	80111e8 <HAL_TIM_PWM_Start+0x1c8>
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111c2:	d011      	beq.n	80111e8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	681a      	ldr	r2, [r3, #0]
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	f042 0201 	orr.w	r2, r2, #1
 80111d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80111d4:	e008      	b.n	80111e8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	681a      	ldr	r2, [r3, #0]
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	f042 0201 	orr.w	r2, r2, #1
 80111e4:	601a      	str	r2, [r3, #0]
 80111e6:	e000      	b.n	80111ea <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80111e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80111ea:	2300      	movs	r3, #0
}
 80111ec:	4618      	mov	r0, r3
 80111ee:	3710      	adds	r7, #16
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	40010000 	.word	0x40010000
 80111f8:	40010400 	.word	0x40010400
 80111fc:	40000400 	.word	0x40000400
 8011200:	40000800 	.word	0x40000800
 8011204:	40000c00 	.word	0x40000c00
 8011208:	40014000 	.word	0x40014000
 801120c:	40001800 	.word	0x40001800
 8011210:	00010007 	.word	0x00010007

08011214 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b082      	sub	sp, #8
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	691b      	ldr	r3, [r3, #16]
 8011222:	f003 0302 	and.w	r3, r3, #2
 8011226:	2b02      	cmp	r3, #2
 8011228:	d122      	bne.n	8011270 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	68db      	ldr	r3, [r3, #12]
 8011230:	f003 0302 	and.w	r3, r3, #2
 8011234:	2b02      	cmp	r3, #2
 8011236:	d11b      	bne.n	8011270 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	f06f 0202 	mvn.w	r2, #2
 8011240:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2201      	movs	r2, #1
 8011246:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	699b      	ldr	r3, [r3, #24]
 801124e:	f003 0303 	and.w	r3, r3, #3
 8011252:	2b00      	cmp	r3, #0
 8011254:	d003      	beq.n	801125e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f000 fadc 	bl	8011814 <HAL_TIM_IC_CaptureCallback>
 801125c:	e005      	b.n	801126a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f000 face 	bl	8011800 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f000 fadf 	bl	8011828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2200      	movs	r2, #0
 801126e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	691b      	ldr	r3, [r3, #16]
 8011276:	f003 0304 	and.w	r3, r3, #4
 801127a:	2b04      	cmp	r3, #4
 801127c:	d122      	bne.n	80112c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	68db      	ldr	r3, [r3, #12]
 8011284:	f003 0304 	and.w	r3, r3, #4
 8011288:	2b04      	cmp	r3, #4
 801128a:	d11b      	bne.n	80112c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	f06f 0204 	mvn.w	r2, #4
 8011294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2202      	movs	r2, #2
 801129a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	699b      	ldr	r3, [r3, #24]
 80112a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d003      	beq.n	80112b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f000 fab2 	bl	8011814 <HAL_TIM_IC_CaptureCallback>
 80112b0:	e005      	b.n	80112be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80112b2:	6878      	ldr	r0, [r7, #4]
 80112b4:	f000 faa4 	bl	8011800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80112b8:	6878      	ldr	r0, [r7, #4]
 80112ba:	f000 fab5 	bl	8011828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2200      	movs	r2, #0
 80112c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	691b      	ldr	r3, [r3, #16]
 80112ca:	f003 0308 	and.w	r3, r3, #8
 80112ce:	2b08      	cmp	r3, #8
 80112d0:	d122      	bne.n	8011318 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	68db      	ldr	r3, [r3, #12]
 80112d8:	f003 0308 	and.w	r3, r3, #8
 80112dc:	2b08      	cmp	r3, #8
 80112de:	d11b      	bne.n	8011318 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	f06f 0208 	mvn.w	r2, #8
 80112e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2204      	movs	r2, #4
 80112ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	69db      	ldr	r3, [r3, #28]
 80112f6:	f003 0303 	and.w	r3, r3, #3
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d003      	beq.n	8011306 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f000 fa88 	bl	8011814 <HAL_TIM_IC_CaptureCallback>
 8011304:	e005      	b.n	8011312 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f000 fa7a 	bl	8011800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801130c:	6878      	ldr	r0, [r7, #4]
 801130e:	f000 fa8b 	bl	8011828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2200      	movs	r2, #0
 8011316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	691b      	ldr	r3, [r3, #16]
 801131e:	f003 0310 	and.w	r3, r3, #16
 8011322:	2b10      	cmp	r3, #16
 8011324:	d122      	bne.n	801136c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	68db      	ldr	r3, [r3, #12]
 801132c:	f003 0310 	and.w	r3, r3, #16
 8011330:	2b10      	cmp	r3, #16
 8011332:	d11b      	bne.n	801136c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	f06f 0210 	mvn.w	r2, #16
 801133c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2208      	movs	r2, #8
 8011342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	69db      	ldr	r3, [r3, #28]
 801134a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801134e:	2b00      	cmp	r3, #0
 8011350:	d003      	beq.n	801135a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011352:	6878      	ldr	r0, [r7, #4]
 8011354:	f000 fa5e 	bl	8011814 <HAL_TIM_IC_CaptureCallback>
 8011358:	e005      	b.n	8011366 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801135a:	6878      	ldr	r0, [r7, #4]
 801135c:	f000 fa50 	bl	8011800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	f000 fa61 	bl	8011828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	2200      	movs	r2, #0
 801136a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	691b      	ldr	r3, [r3, #16]
 8011372:	f003 0301 	and.w	r3, r3, #1
 8011376:	2b01      	cmp	r3, #1
 8011378:	d10e      	bne.n	8011398 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	68db      	ldr	r3, [r3, #12]
 8011380:	f003 0301 	and.w	r3, r3, #1
 8011384:	2b01      	cmp	r3, #1
 8011386:	d107      	bne.n	8011398 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	f06f 0201 	mvn.w	r2, #1
 8011390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	f7f6 fa2c 	bl	80077f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	691b      	ldr	r3, [r3, #16]
 801139e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113a2:	2b80      	cmp	r3, #128	; 0x80
 80113a4:	d10e      	bne.n	80113c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	68db      	ldr	r3, [r3, #12]
 80113ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113b0:	2b80      	cmp	r3, #128	; 0x80
 80113b2:	d107      	bne.n	80113c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80113bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f000 fe9c 	bl	80120fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	691b      	ldr	r3, [r3, #16]
 80113ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80113ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80113d2:	d10e      	bne.n	80113f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	68db      	ldr	r3, [r3, #12]
 80113da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113de:	2b80      	cmp	r3, #128	; 0x80
 80113e0:	d107      	bne.n	80113f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80113ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	f000 fe8f 	bl	8012110 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	691b      	ldr	r3, [r3, #16]
 80113f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113fc:	2b40      	cmp	r3, #64	; 0x40
 80113fe:	d10e      	bne.n	801141e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	68db      	ldr	r3, [r3, #12]
 8011406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801140a:	2b40      	cmp	r3, #64	; 0x40
 801140c:	d107      	bne.n	801141e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f000 fa0f 	bl	801183c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	691b      	ldr	r3, [r3, #16]
 8011424:	f003 0320 	and.w	r3, r3, #32
 8011428:	2b20      	cmp	r3, #32
 801142a:	d10e      	bne.n	801144a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	68db      	ldr	r3, [r3, #12]
 8011432:	f003 0320 	and.w	r3, r3, #32
 8011436:	2b20      	cmp	r3, #32
 8011438:	d107      	bne.n	801144a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	f06f 0220 	mvn.w	r2, #32
 8011442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011444:	6878      	ldr	r0, [r7, #4]
 8011446:	f000 fe4f 	bl	80120e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801144a:	bf00      	nop
 801144c:	3708      	adds	r7, #8
 801144e:	46bd      	mov	sp, r7
 8011450:	bd80      	pop	{r7, pc}
	...

08011454 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b084      	sub	sp, #16
 8011458:	af00      	add	r7, sp, #0
 801145a:	60f8      	str	r0, [r7, #12]
 801145c:	60b9      	str	r1, [r7, #8]
 801145e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011466:	2b01      	cmp	r3, #1
 8011468:	d101      	bne.n	801146e <HAL_TIM_PWM_ConfigChannel+0x1a>
 801146a:	2302      	movs	r3, #2
 801146c:	e0fd      	b.n	801166a <HAL_TIM_PWM_ConfigChannel+0x216>
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	2201      	movs	r2, #1
 8011472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	2b14      	cmp	r3, #20
 801147a:	f200 80f0 	bhi.w	801165e <HAL_TIM_PWM_ConfigChannel+0x20a>
 801147e:	a201      	add	r2, pc, #4	; (adr r2, 8011484 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8011480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011484:	080114d9 	.word	0x080114d9
 8011488:	0801165f 	.word	0x0801165f
 801148c:	0801165f 	.word	0x0801165f
 8011490:	0801165f 	.word	0x0801165f
 8011494:	08011519 	.word	0x08011519
 8011498:	0801165f 	.word	0x0801165f
 801149c:	0801165f 	.word	0x0801165f
 80114a0:	0801165f 	.word	0x0801165f
 80114a4:	0801155b 	.word	0x0801155b
 80114a8:	0801165f 	.word	0x0801165f
 80114ac:	0801165f 	.word	0x0801165f
 80114b0:	0801165f 	.word	0x0801165f
 80114b4:	0801159b 	.word	0x0801159b
 80114b8:	0801165f 	.word	0x0801165f
 80114bc:	0801165f 	.word	0x0801165f
 80114c0:	0801165f 	.word	0x0801165f
 80114c4:	080115dd 	.word	0x080115dd
 80114c8:	0801165f 	.word	0x0801165f
 80114cc:	0801165f 	.word	0x0801165f
 80114d0:	0801165f 	.word	0x0801165f
 80114d4:	0801161d 	.word	0x0801161d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	68b9      	ldr	r1, [r7, #8]
 80114de:	4618      	mov	r0, r3
 80114e0:	f000 fa56 	bl	8011990 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	699a      	ldr	r2, [r3, #24]
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	f042 0208 	orr.w	r2, r2, #8
 80114f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	699a      	ldr	r2, [r3, #24]
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	f022 0204 	bic.w	r2, r2, #4
 8011502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	6999      	ldr	r1, [r3, #24]
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	691a      	ldr	r2, [r3, #16]
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	430a      	orrs	r2, r1
 8011514:	619a      	str	r2, [r3, #24]
      break;
 8011516:	e0a3      	b.n	8011660 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	68b9      	ldr	r1, [r7, #8]
 801151e:	4618      	mov	r0, r3
 8011520:	f000 faa8 	bl	8011a74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	699a      	ldr	r2, [r3, #24]
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	699a      	ldr	r2, [r3, #24]
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	6999      	ldr	r1, [r3, #24]
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	691b      	ldr	r3, [r3, #16]
 801154e:	021a      	lsls	r2, r3, #8
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	430a      	orrs	r2, r1
 8011556:	619a      	str	r2, [r3, #24]
      break;
 8011558:	e082      	b.n	8011660 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	68b9      	ldr	r1, [r7, #8]
 8011560:	4618      	mov	r0, r3
 8011562:	f000 faff 	bl	8011b64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	69da      	ldr	r2, [r3, #28]
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	f042 0208 	orr.w	r2, r2, #8
 8011574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	69da      	ldr	r2, [r3, #28]
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	f022 0204 	bic.w	r2, r2, #4
 8011584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	69d9      	ldr	r1, [r3, #28]
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	691a      	ldr	r2, [r3, #16]
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	430a      	orrs	r2, r1
 8011596:	61da      	str	r2, [r3, #28]
      break;
 8011598:	e062      	b.n	8011660 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	68b9      	ldr	r1, [r7, #8]
 80115a0:	4618      	mov	r0, r3
 80115a2:	f000 fb55 	bl	8011c50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	69da      	ldr	r2, [r3, #28]
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80115b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	69da      	ldr	r2, [r3, #28]
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80115c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	69d9      	ldr	r1, [r3, #28]
 80115cc:	68bb      	ldr	r3, [r7, #8]
 80115ce:	691b      	ldr	r3, [r3, #16]
 80115d0:	021a      	lsls	r2, r3, #8
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	430a      	orrs	r2, r1
 80115d8:	61da      	str	r2, [r3, #28]
      break;
 80115da:	e041      	b.n	8011660 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	68b9      	ldr	r1, [r7, #8]
 80115e2:	4618      	mov	r0, r3
 80115e4:	f000 fb8c 	bl	8011d00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	f042 0208 	orr.w	r2, r2, #8
 80115f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	f022 0204 	bic.w	r2, r2, #4
 8011606:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	691a      	ldr	r2, [r3, #16]
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	430a      	orrs	r2, r1
 8011618:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801161a:	e021      	b.n	8011660 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	68b9      	ldr	r1, [r7, #8]
 8011622:	4618      	mov	r0, r3
 8011624:	f000 fbbe 	bl	8011da4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011636:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011646:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	691b      	ldr	r3, [r3, #16]
 8011652:	021a      	lsls	r2, r3, #8
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	430a      	orrs	r2, r1
 801165a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801165c:	e000      	b.n	8011660 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 801165e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	2200      	movs	r2, #0
 8011664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011668:	2300      	movs	r3, #0
}
 801166a:	4618      	mov	r0, r3
 801166c:	3710      	adds	r7, #16
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}
 8011672:	bf00      	nop

08011674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b084      	sub	sp, #16
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011684:	2b01      	cmp	r3, #1
 8011686:	d101      	bne.n	801168c <HAL_TIM_ConfigClockSource+0x18>
 8011688:	2302      	movs	r3, #2
 801168a:	e0b3      	b.n	80117f4 <HAL_TIM_ConfigClockSource+0x180>
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2201      	movs	r2, #1
 8011690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2202      	movs	r2, #2
 8011698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	689b      	ldr	r3, [r3, #8]
 80116a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80116a4:	68fa      	ldr	r2, [r7, #12]
 80116a6:	4b55      	ldr	r3, [pc, #340]	; (80117fc <HAL_TIM_ConfigClockSource+0x188>)
 80116a8:	4013      	ands	r3, r2
 80116aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80116b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	68fa      	ldr	r2, [r7, #12]
 80116ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80116c4:	d03e      	beq.n	8011744 <HAL_TIM_ConfigClockSource+0xd0>
 80116c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80116ca:	f200 8087 	bhi.w	80117dc <HAL_TIM_ConfigClockSource+0x168>
 80116ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80116d2:	f000 8085 	beq.w	80117e0 <HAL_TIM_ConfigClockSource+0x16c>
 80116d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80116da:	d87f      	bhi.n	80117dc <HAL_TIM_ConfigClockSource+0x168>
 80116dc:	2b70      	cmp	r3, #112	; 0x70
 80116de:	d01a      	beq.n	8011716 <HAL_TIM_ConfigClockSource+0xa2>
 80116e0:	2b70      	cmp	r3, #112	; 0x70
 80116e2:	d87b      	bhi.n	80117dc <HAL_TIM_ConfigClockSource+0x168>
 80116e4:	2b60      	cmp	r3, #96	; 0x60
 80116e6:	d050      	beq.n	801178a <HAL_TIM_ConfigClockSource+0x116>
 80116e8:	2b60      	cmp	r3, #96	; 0x60
 80116ea:	d877      	bhi.n	80117dc <HAL_TIM_ConfigClockSource+0x168>
 80116ec:	2b50      	cmp	r3, #80	; 0x50
 80116ee:	d03c      	beq.n	801176a <HAL_TIM_ConfigClockSource+0xf6>
 80116f0:	2b50      	cmp	r3, #80	; 0x50
 80116f2:	d873      	bhi.n	80117dc <HAL_TIM_ConfigClockSource+0x168>
 80116f4:	2b40      	cmp	r3, #64	; 0x40
 80116f6:	d058      	beq.n	80117aa <HAL_TIM_ConfigClockSource+0x136>
 80116f8:	2b40      	cmp	r3, #64	; 0x40
 80116fa:	d86f      	bhi.n	80117dc <HAL_TIM_ConfigClockSource+0x168>
 80116fc:	2b30      	cmp	r3, #48	; 0x30
 80116fe:	d064      	beq.n	80117ca <HAL_TIM_ConfigClockSource+0x156>
 8011700:	2b30      	cmp	r3, #48	; 0x30
 8011702:	d86b      	bhi.n	80117dc <HAL_TIM_ConfigClockSource+0x168>
 8011704:	2b20      	cmp	r3, #32
 8011706:	d060      	beq.n	80117ca <HAL_TIM_ConfigClockSource+0x156>
 8011708:	2b20      	cmp	r3, #32
 801170a:	d867      	bhi.n	80117dc <HAL_TIM_ConfigClockSource+0x168>
 801170c:	2b00      	cmp	r3, #0
 801170e:	d05c      	beq.n	80117ca <HAL_TIM_ConfigClockSource+0x156>
 8011710:	2b10      	cmp	r3, #16
 8011712:	d05a      	beq.n	80117ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8011714:	e062      	b.n	80117dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6818      	ldr	r0, [r3, #0]
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	6899      	ldr	r1, [r3, #8]
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	685a      	ldr	r2, [r3, #4]
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	68db      	ldr	r3, [r3, #12]
 8011726:	f000 fc0b 	bl	8011f40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	689b      	ldr	r3, [r3, #8]
 8011730:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011738:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	68fa      	ldr	r2, [r7, #12]
 8011740:	609a      	str	r2, [r3, #8]
      break;
 8011742:	e04e      	b.n	80117e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	6818      	ldr	r0, [r3, #0]
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	6899      	ldr	r1, [r3, #8]
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	685a      	ldr	r2, [r3, #4]
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	68db      	ldr	r3, [r3, #12]
 8011754:	f000 fbf4 	bl	8011f40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	689a      	ldr	r2, [r3, #8]
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011766:	609a      	str	r2, [r3, #8]
      break;
 8011768:	e03b      	b.n	80117e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	6818      	ldr	r0, [r3, #0]
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	6859      	ldr	r1, [r3, #4]
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	68db      	ldr	r3, [r3, #12]
 8011776:	461a      	mov	r2, r3
 8011778:	f000 fb68 	bl	8011e4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	2150      	movs	r1, #80	; 0x50
 8011782:	4618      	mov	r0, r3
 8011784:	f000 fbc1 	bl	8011f0a <TIM_ITRx_SetConfig>
      break;
 8011788:	e02b      	b.n	80117e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6818      	ldr	r0, [r3, #0]
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	6859      	ldr	r1, [r3, #4]
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	68db      	ldr	r3, [r3, #12]
 8011796:	461a      	mov	r2, r3
 8011798:	f000 fb87 	bl	8011eaa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	2160      	movs	r1, #96	; 0x60
 80117a2:	4618      	mov	r0, r3
 80117a4:	f000 fbb1 	bl	8011f0a <TIM_ITRx_SetConfig>
      break;
 80117a8:	e01b      	b.n	80117e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6818      	ldr	r0, [r3, #0]
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	6859      	ldr	r1, [r3, #4]
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	68db      	ldr	r3, [r3, #12]
 80117b6:	461a      	mov	r2, r3
 80117b8:	f000 fb48 	bl	8011e4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	2140      	movs	r1, #64	; 0x40
 80117c2:	4618      	mov	r0, r3
 80117c4:	f000 fba1 	bl	8011f0a <TIM_ITRx_SetConfig>
      break;
 80117c8:	e00b      	b.n	80117e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681a      	ldr	r2, [r3, #0]
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	4619      	mov	r1, r3
 80117d4:	4610      	mov	r0, r2
 80117d6:	f000 fb98 	bl	8011f0a <TIM_ITRx_SetConfig>
        break;
 80117da:	e002      	b.n	80117e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80117dc:	bf00      	nop
 80117de:	e000      	b.n	80117e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80117e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2201      	movs	r2, #1
 80117e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	2200      	movs	r2, #0
 80117ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80117f2:	2300      	movs	r3, #0
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3710      	adds	r7, #16
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}
 80117fc:	fffeff88 	.word	0xfffeff88

08011800 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011800:	b480      	push	{r7}
 8011802:	b083      	sub	sp, #12
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011808:	bf00      	nop
 801180a:	370c      	adds	r7, #12
 801180c:	46bd      	mov	sp, r7
 801180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011812:	4770      	bx	lr

08011814 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011814:	b480      	push	{r7}
 8011816:	b083      	sub	sp, #12
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801181c:	bf00      	nop
 801181e:	370c      	adds	r7, #12
 8011820:	46bd      	mov	sp, r7
 8011822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011826:	4770      	bx	lr

08011828 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011828:	b480      	push	{r7}
 801182a:	b083      	sub	sp, #12
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011830:	bf00      	nop
 8011832:	370c      	adds	r7, #12
 8011834:	46bd      	mov	sp, r7
 8011836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183a:	4770      	bx	lr

0801183c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801183c:	b480      	push	{r7}
 801183e:	b083      	sub	sp, #12
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011844:	bf00      	nop
 8011846:	370c      	adds	r7, #12
 8011848:	46bd      	mov	sp, r7
 801184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184e:	4770      	bx	lr

08011850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8011850:	b480      	push	{r7}
 8011852:	b085      	sub	sp, #20
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
 8011858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	4a40      	ldr	r2, [pc, #256]	; (8011964 <TIM_Base_SetConfig+0x114>)
 8011864:	4293      	cmp	r3, r2
 8011866:	d013      	beq.n	8011890 <TIM_Base_SetConfig+0x40>
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801186e:	d00f      	beq.n	8011890 <TIM_Base_SetConfig+0x40>
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	4a3d      	ldr	r2, [pc, #244]	; (8011968 <TIM_Base_SetConfig+0x118>)
 8011874:	4293      	cmp	r3, r2
 8011876:	d00b      	beq.n	8011890 <TIM_Base_SetConfig+0x40>
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	4a3c      	ldr	r2, [pc, #240]	; (801196c <TIM_Base_SetConfig+0x11c>)
 801187c:	4293      	cmp	r3, r2
 801187e:	d007      	beq.n	8011890 <TIM_Base_SetConfig+0x40>
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	4a3b      	ldr	r2, [pc, #236]	; (8011970 <TIM_Base_SetConfig+0x120>)
 8011884:	4293      	cmp	r3, r2
 8011886:	d003      	beq.n	8011890 <TIM_Base_SetConfig+0x40>
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	4a3a      	ldr	r2, [pc, #232]	; (8011974 <TIM_Base_SetConfig+0x124>)
 801188c:	4293      	cmp	r3, r2
 801188e:	d108      	bne.n	80118a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	685b      	ldr	r3, [r3, #4]
 801189c:	68fa      	ldr	r2, [r7, #12]
 801189e:	4313      	orrs	r3, r2
 80118a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	4a2f      	ldr	r2, [pc, #188]	; (8011964 <TIM_Base_SetConfig+0x114>)
 80118a6:	4293      	cmp	r3, r2
 80118a8:	d02b      	beq.n	8011902 <TIM_Base_SetConfig+0xb2>
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80118b0:	d027      	beq.n	8011902 <TIM_Base_SetConfig+0xb2>
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	4a2c      	ldr	r2, [pc, #176]	; (8011968 <TIM_Base_SetConfig+0x118>)
 80118b6:	4293      	cmp	r3, r2
 80118b8:	d023      	beq.n	8011902 <TIM_Base_SetConfig+0xb2>
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	4a2b      	ldr	r2, [pc, #172]	; (801196c <TIM_Base_SetConfig+0x11c>)
 80118be:	4293      	cmp	r3, r2
 80118c0:	d01f      	beq.n	8011902 <TIM_Base_SetConfig+0xb2>
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	4a2a      	ldr	r2, [pc, #168]	; (8011970 <TIM_Base_SetConfig+0x120>)
 80118c6:	4293      	cmp	r3, r2
 80118c8:	d01b      	beq.n	8011902 <TIM_Base_SetConfig+0xb2>
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	4a29      	ldr	r2, [pc, #164]	; (8011974 <TIM_Base_SetConfig+0x124>)
 80118ce:	4293      	cmp	r3, r2
 80118d0:	d017      	beq.n	8011902 <TIM_Base_SetConfig+0xb2>
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	4a28      	ldr	r2, [pc, #160]	; (8011978 <TIM_Base_SetConfig+0x128>)
 80118d6:	4293      	cmp	r3, r2
 80118d8:	d013      	beq.n	8011902 <TIM_Base_SetConfig+0xb2>
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	4a27      	ldr	r2, [pc, #156]	; (801197c <TIM_Base_SetConfig+0x12c>)
 80118de:	4293      	cmp	r3, r2
 80118e0:	d00f      	beq.n	8011902 <TIM_Base_SetConfig+0xb2>
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	4a26      	ldr	r2, [pc, #152]	; (8011980 <TIM_Base_SetConfig+0x130>)
 80118e6:	4293      	cmp	r3, r2
 80118e8:	d00b      	beq.n	8011902 <TIM_Base_SetConfig+0xb2>
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	4a25      	ldr	r2, [pc, #148]	; (8011984 <TIM_Base_SetConfig+0x134>)
 80118ee:	4293      	cmp	r3, r2
 80118f0:	d007      	beq.n	8011902 <TIM_Base_SetConfig+0xb2>
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	4a24      	ldr	r2, [pc, #144]	; (8011988 <TIM_Base_SetConfig+0x138>)
 80118f6:	4293      	cmp	r3, r2
 80118f8:	d003      	beq.n	8011902 <TIM_Base_SetConfig+0xb2>
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	4a23      	ldr	r2, [pc, #140]	; (801198c <TIM_Base_SetConfig+0x13c>)
 80118fe:	4293      	cmp	r3, r2
 8011900:	d108      	bne.n	8011914 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	68db      	ldr	r3, [r3, #12]
 801190e:	68fa      	ldr	r2, [r7, #12]
 8011910:	4313      	orrs	r3, r2
 8011912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	695b      	ldr	r3, [r3, #20]
 801191e:	4313      	orrs	r3, r2
 8011920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	68fa      	ldr	r2, [r7, #12]
 8011926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	689a      	ldr	r2, [r3, #8]
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	681a      	ldr	r2, [r3, #0]
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	4a0a      	ldr	r2, [pc, #40]	; (8011964 <TIM_Base_SetConfig+0x114>)
 801193c:	4293      	cmp	r3, r2
 801193e:	d003      	beq.n	8011948 <TIM_Base_SetConfig+0xf8>
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	4a0c      	ldr	r2, [pc, #48]	; (8011974 <TIM_Base_SetConfig+0x124>)
 8011944:	4293      	cmp	r3, r2
 8011946:	d103      	bne.n	8011950 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011948:	683b      	ldr	r3, [r7, #0]
 801194a:	691a      	ldr	r2, [r3, #16]
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2201      	movs	r2, #1
 8011954:	615a      	str	r2, [r3, #20]
}
 8011956:	bf00      	nop
 8011958:	3714      	adds	r7, #20
 801195a:	46bd      	mov	sp, r7
 801195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011960:	4770      	bx	lr
 8011962:	bf00      	nop
 8011964:	40010000 	.word	0x40010000
 8011968:	40000400 	.word	0x40000400
 801196c:	40000800 	.word	0x40000800
 8011970:	40000c00 	.word	0x40000c00
 8011974:	40010400 	.word	0x40010400
 8011978:	40014000 	.word	0x40014000
 801197c:	40014400 	.word	0x40014400
 8011980:	40014800 	.word	0x40014800
 8011984:	40001800 	.word	0x40001800
 8011988:	40001c00 	.word	0x40001c00
 801198c:	40002000 	.word	0x40002000

08011990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011990:	b480      	push	{r7}
 8011992:	b087      	sub	sp, #28
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
 8011998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6a1b      	ldr	r3, [r3, #32]
 801199e:	f023 0201 	bic.w	r2, r3, #1
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6a1b      	ldr	r3, [r3, #32]
 80119aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	685b      	ldr	r3, [r3, #4]
 80119b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	699b      	ldr	r3, [r3, #24]
 80119b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80119b8:	68fa      	ldr	r2, [r7, #12]
 80119ba:	4b2b      	ldr	r3, [pc, #172]	; (8011a68 <TIM_OC1_SetConfig+0xd8>)
 80119bc:	4013      	ands	r3, r2
 80119be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	f023 0303 	bic.w	r3, r3, #3
 80119c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	68fa      	ldr	r2, [r7, #12]
 80119ce:	4313      	orrs	r3, r2
 80119d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	f023 0302 	bic.w	r3, r3, #2
 80119d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	689b      	ldr	r3, [r3, #8]
 80119de:	697a      	ldr	r2, [r7, #20]
 80119e0:	4313      	orrs	r3, r2
 80119e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	4a21      	ldr	r2, [pc, #132]	; (8011a6c <TIM_OC1_SetConfig+0xdc>)
 80119e8:	4293      	cmp	r3, r2
 80119ea:	d003      	beq.n	80119f4 <TIM_OC1_SetConfig+0x64>
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	4a20      	ldr	r2, [pc, #128]	; (8011a70 <TIM_OC1_SetConfig+0xe0>)
 80119f0:	4293      	cmp	r3, r2
 80119f2:	d10c      	bne.n	8011a0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80119f4:	697b      	ldr	r3, [r7, #20]
 80119f6:	f023 0308 	bic.w	r3, r3, #8
 80119fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	68db      	ldr	r3, [r3, #12]
 8011a00:	697a      	ldr	r2, [r7, #20]
 8011a02:	4313      	orrs	r3, r2
 8011a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011a06:	697b      	ldr	r3, [r7, #20]
 8011a08:	f023 0304 	bic.w	r3, r3, #4
 8011a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	4a16      	ldr	r2, [pc, #88]	; (8011a6c <TIM_OC1_SetConfig+0xdc>)
 8011a12:	4293      	cmp	r3, r2
 8011a14:	d003      	beq.n	8011a1e <TIM_OC1_SetConfig+0x8e>
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	4a15      	ldr	r2, [pc, #84]	; (8011a70 <TIM_OC1_SetConfig+0xe0>)
 8011a1a:	4293      	cmp	r3, r2
 8011a1c:	d111      	bne.n	8011a42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011a1e:	693b      	ldr	r3, [r7, #16]
 8011a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	695b      	ldr	r3, [r3, #20]
 8011a32:	693a      	ldr	r2, [r7, #16]
 8011a34:	4313      	orrs	r3, r2
 8011a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011a38:	683b      	ldr	r3, [r7, #0]
 8011a3a:	699b      	ldr	r3, [r3, #24]
 8011a3c:	693a      	ldr	r2, [r7, #16]
 8011a3e:	4313      	orrs	r3, r2
 8011a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	693a      	ldr	r2, [r7, #16]
 8011a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	68fa      	ldr	r2, [r7, #12]
 8011a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011a4e:	683b      	ldr	r3, [r7, #0]
 8011a50:	685a      	ldr	r2, [r3, #4]
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	697a      	ldr	r2, [r7, #20]
 8011a5a:	621a      	str	r2, [r3, #32]
}
 8011a5c:	bf00      	nop
 8011a5e:	371c      	adds	r7, #28
 8011a60:	46bd      	mov	sp, r7
 8011a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a66:	4770      	bx	lr
 8011a68:	fffeff8f 	.word	0xfffeff8f
 8011a6c:	40010000 	.word	0x40010000
 8011a70:	40010400 	.word	0x40010400

08011a74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011a74:	b480      	push	{r7}
 8011a76:	b087      	sub	sp, #28
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
 8011a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	6a1b      	ldr	r3, [r3, #32]
 8011a82:	f023 0210 	bic.w	r2, r3, #16
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6a1b      	ldr	r3, [r3, #32]
 8011a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	685b      	ldr	r3, [r3, #4]
 8011a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	699b      	ldr	r3, [r3, #24]
 8011a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011a9c:	68fa      	ldr	r2, [r7, #12]
 8011a9e:	4b2e      	ldr	r3, [pc, #184]	; (8011b58 <TIM_OC2_SetConfig+0xe4>)
 8011aa0:	4013      	ands	r3, r2
 8011aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	021b      	lsls	r3, r3, #8
 8011ab2:	68fa      	ldr	r2, [r7, #12]
 8011ab4:	4313      	orrs	r3, r2
 8011ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011ab8:	697b      	ldr	r3, [r7, #20]
 8011aba:	f023 0320 	bic.w	r3, r3, #32
 8011abe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	689b      	ldr	r3, [r3, #8]
 8011ac4:	011b      	lsls	r3, r3, #4
 8011ac6:	697a      	ldr	r2, [r7, #20]
 8011ac8:	4313      	orrs	r3, r2
 8011aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	4a23      	ldr	r2, [pc, #140]	; (8011b5c <TIM_OC2_SetConfig+0xe8>)
 8011ad0:	4293      	cmp	r3, r2
 8011ad2:	d003      	beq.n	8011adc <TIM_OC2_SetConfig+0x68>
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	4a22      	ldr	r2, [pc, #136]	; (8011b60 <TIM_OC2_SetConfig+0xec>)
 8011ad8:	4293      	cmp	r3, r2
 8011ada:	d10d      	bne.n	8011af8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011adc:	697b      	ldr	r3, [r7, #20]
 8011ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011ae4:	683b      	ldr	r3, [r7, #0]
 8011ae6:	68db      	ldr	r3, [r3, #12]
 8011ae8:	011b      	lsls	r3, r3, #4
 8011aea:	697a      	ldr	r2, [r7, #20]
 8011aec:	4313      	orrs	r3, r2
 8011aee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011af0:	697b      	ldr	r3, [r7, #20]
 8011af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011af6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	4a18      	ldr	r2, [pc, #96]	; (8011b5c <TIM_OC2_SetConfig+0xe8>)
 8011afc:	4293      	cmp	r3, r2
 8011afe:	d003      	beq.n	8011b08 <TIM_OC2_SetConfig+0x94>
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	4a17      	ldr	r2, [pc, #92]	; (8011b60 <TIM_OC2_SetConfig+0xec>)
 8011b04:	4293      	cmp	r3, r2
 8011b06:	d113      	bne.n	8011b30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011b08:	693b      	ldr	r3, [r7, #16]
 8011b0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011b0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011b10:	693b      	ldr	r3, [r7, #16]
 8011b12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011b16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	695b      	ldr	r3, [r3, #20]
 8011b1c:	009b      	lsls	r3, r3, #2
 8011b1e:	693a      	ldr	r2, [r7, #16]
 8011b20:	4313      	orrs	r3, r2
 8011b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	699b      	ldr	r3, [r3, #24]
 8011b28:	009b      	lsls	r3, r3, #2
 8011b2a:	693a      	ldr	r2, [r7, #16]
 8011b2c:	4313      	orrs	r3, r2
 8011b2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	693a      	ldr	r2, [r7, #16]
 8011b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	68fa      	ldr	r2, [r7, #12]
 8011b3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	685a      	ldr	r2, [r3, #4]
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	697a      	ldr	r2, [r7, #20]
 8011b48:	621a      	str	r2, [r3, #32]
}
 8011b4a:	bf00      	nop
 8011b4c:	371c      	adds	r7, #28
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b54:	4770      	bx	lr
 8011b56:	bf00      	nop
 8011b58:	feff8fff 	.word	0xfeff8fff
 8011b5c:	40010000 	.word	0x40010000
 8011b60:	40010400 	.word	0x40010400

08011b64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011b64:	b480      	push	{r7}
 8011b66:	b087      	sub	sp, #28
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
 8011b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	6a1b      	ldr	r3, [r3, #32]
 8011b72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6a1b      	ldr	r3, [r3, #32]
 8011b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	685b      	ldr	r3, [r3, #4]
 8011b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	69db      	ldr	r3, [r3, #28]
 8011b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011b8c:	68fa      	ldr	r2, [r7, #12]
 8011b8e:	4b2d      	ldr	r3, [pc, #180]	; (8011c44 <TIM_OC3_SetConfig+0xe0>)
 8011b90:	4013      	ands	r3, r2
 8011b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	f023 0303 	bic.w	r3, r3, #3
 8011b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	68fa      	ldr	r2, [r7, #12]
 8011ba2:	4313      	orrs	r3, r2
 8011ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	689b      	ldr	r3, [r3, #8]
 8011bb2:	021b      	lsls	r3, r3, #8
 8011bb4:	697a      	ldr	r2, [r7, #20]
 8011bb6:	4313      	orrs	r3, r2
 8011bb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	4a22      	ldr	r2, [pc, #136]	; (8011c48 <TIM_OC3_SetConfig+0xe4>)
 8011bbe:	4293      	cmp	r3, r2
 8011bc0:	d003      	beq.n	8011bca <TIM_OC3_SetConfig+0x66>
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	4a21      	ldr	r2, [pc, #132]	; (8011c4c <TIM_OC3_SetConfig+0xe8>)
 8011bc6:	4293      	cmp	r3, r2
 8011bc8:	d10d      	bne.n	8011be6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011bca:	697b      	ldr	r3, [r7, #20]
 8011bcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	68db      	ldr	r3, [r3, #12]
 8011bd6:	021b      	lsls	r3, r3, #8
 8011bd8:	697a      	ldr	r2, [r7, #20]
 8011bda:	4313      	orrs	r3, r2
 8011bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	4a17      	ldr	r2, [pc, #92]	; (8011c48 <TIM_OC3_SetConfig+0xe4>)
 8011bea:	4293      	cmp	r3, r2
 8011bec:	d003      	beq.n	8011bf6 <TIM_OC3_SetConfig+0x92>
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	4a16      	ldr	r2, [pc, #88]	; (8011c4c <TIM_OC3_SetConfig+0xe8>)
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	d113      	bne.n	8011c1e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011bf6:	693b      	ldr	r3, [r7, #16]
 8011bf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011bfe:	693b      	ldr	r3, [r7, #16]
 8011c00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	695b      	ldr	r3, [r3, #20]
 8011c0a:	011b      	lsls	r3, r3, #4
 8011c0c:	693a      	ldr	r2, [r7, #16]
 8011c0e:	4313      	orrs	r3, r2
 8011c10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	699b      	ldr	r3, [r3, #24]
 8011c16:	011b      	lsls	r3, r3, #4
 8011c18:	693a      	ldr	r2, [r7, #16]
 8011c1a:	4313      	orrs	r3, r2
 8011c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	693a      	ldr	r2, [r7, #16]
 8011c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	68fa      	ldr	r2, [r7, #12]
 8011c28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011c2a:	683b      	ldr	r3, [r7, #0]
 8011c2c:	685a      	ldr	r2, [r3, #4]
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	697a      	ldr	r2, [r7, #20]
 8011c36:	621a      	str	r2, [r3, #32]
}
 8011c38:	bf00      	nop
 8011c3a:	371c      	adds	r7, #28
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c42:	4770      	bx	lr
 8011c44:	fffeff8f 	.word	0xfffeff8f
 8011c48:	40010000 	.word	0x40010000
 8011c4c:	40010400 	.word	0x40010400

08011c50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011c50:	b480      	push	{r7}
 8011c52:	b087      	sub	sp, #28
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
 8011c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	6a1b      	ldr	r3, [r3, #32]
 8011c5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	6a1b      	ldr	r3, [r3, #32]
 8011c6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	685b      	ldr	r3, [r3, #4]
 8011c70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	69db      	ldr	r3, [r3, #28]
 8011c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011c78:	68fa      	ldr	r2, [r7, #12]
 8011c7a:	4b1e      	ldr	r3, [pc, #120]	; (8011cf4 <TIM_OC4_SetConfig+0xa4>)
 8011c7c:	4013      	ands	r3, r2
 8011c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	021b      	lsls	r3, r3, #8
 8011c8e:	68fa      	ldr	r2, [r7, #12]
 8011c90:	4313      	orrs	r3, r2
 8011c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011c94:	693b      	ldr	r3, [r7, #16]
 8011c96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011c9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	689b      	ldr	r3, [r3, #8]
 8011ca0:	031b      	lsls	r3, r3, #12
 8011ca2:	693a      	ldr	r2, [r7, #16]
 8011ca4:	4313      	orrs	r3, r2
 8011ca6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	4a13      	ldr	r2, [pc, #76]	; (8011cf8 <TIM_OC4_SetConfig+0xa8>)
 8011cac:	4293      	cmp	r3, r2
 8011cae:	d003      	beq.n	8011cb8 <TIM_OC4_SetConfig+0x68>
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	4a12      	ldr	r2, [pc, #72]	; (8011cfc <TIM_OC4_SetConfig+0xac>)
 8011cb4:	4293      	cmp	r3, r2
 8011cb6:	d109      	bne.n	8011ccc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011cbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	695b      	ldr	r3, [r3, #20]
 8011cc4:	019b      	lsls	r3, r3, #6
 8011cc6:	697a      	ldr	r2, [r7, #20]
 8011cc8:	4313      	orrs	r3, r2
 8011cca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	697a      	ldr	r2, [r7, #20]
 8011cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	68fa      	ldr	r2, [r7, #12]
 8011cd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	685a      	ldr	r2, [r3, #4]
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	693a      	ldr	r2, [r7, #16]
 8011ce4:	621a      	str	r2, [r3, #32]
}
 8011ce6:	bf00      	nop
 8011ce8:	371c      	adds	r7, #28
 8011cea:	46bd      	mov	sp, r7
 8011cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf0:	4770      	bx	lr
 8011cf2:	bf00      	nop
 8011cf4:	feff8fff 	.word	0xfeff8fff
 8011cf8:	40010000 	.word	0x40010000
 8011cfc:	40010400 	.word	0x40010400

08011d00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8011d00:	b480      	push	{r7}
 8011d02:	b087      	sub	sp, #28
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
 8011d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	6a1b      	ldr	r3, [r3, #32]
 8011d0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6a1b      	ldr	r3, [r3, #32]
 8011d1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	685b      	ldr	r3, [r3, #4]
 8011d20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011d28:	68fa      	ldr	r2, [r7, #12]
 8011d2a:	4b1b      	ldr	r3, [pc, #108]	; (8011d98 <TIM_OC5_SetConfig+0x98>)
 8011d2c:	4013      	ands	r3, r2
 8011d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	68fa      	ldr	r2, [r7, #12]
 8011d36:	4313      	orrs	r3, r2
 8011d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011d3a:	693b      	ldr	r3, [r7, #16]
 8011d3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011d40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	689b      	ldr	r3, [r3, #8]
 8011d46:	041b      	lsls	r3, r3, #16
 8011d48:	693a      	ldr	r2, [r7, #16]
 8011d4a:	4313      	orrs	r3, r2
 8011d4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	4a12      	ldr	r2, [pc, #72]	; (8011d9c <TIM_OC5_SetConfig+0x9c>)
 8011d52:	4293      	cmp	r3, r2
 8011d54:	d003      	beq.n	8011d5e <TIM_OC5_SetConfig+0x5e>
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	4a11      	ldr	r2, [pc, #68]	; (8011da0 <TIM_OC5_SetConfig+0xa0>)
 8011d5a:	4293      	cmp	r3, r2
 8011d5c:	d109      	bne.n	8011d72 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011d64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	695b      	ldr	r3, [r3, #20]
 8011d6a:	021b      	lsls	r3, r3, #8
 8011d6c:	697a      	ldr	r2, [r7, #20]
 8011d6e:	4313      	orrs	r3, r2
 8011d70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	697a      	ldr	r2, [r7, #20]
 8011d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	68fa      	ldr	r2, [r7, #12]
 8011d7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	685a      	ldr	r2, [r3, #4]
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	693a      	ldr	r2, [r7, #16]
 8011d8a:	621a      	str	r2, [r3, #32]
}
 8011d8c:	bf00      	nop
 8011d8e:	371c      	adds	r7, #28
 8011d90:	46bd      	mov	sp, r7
 8011d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d96:	4770      	bx	lr
 8011d98:	fffeff8f 	.word	0xfffeff8f
 8011d9c:	40010000 	.word	0x40010000
 8011da0:	40010400 	.word	0x40010400

08011da4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8011da4:	b480      	push	{r7}
 8011da6:	b087      	sub	sp, #28
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
 8011dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	6a1b      	ldr	r3, [r3, #32]
 8011db2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	6a1b      	ldr	r3, [r3, #32]
 8011dbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	685b      	ldr	r3, [r3, #4]
 8011dc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011dcc:	68fa      	ldr	r2, [r7, #12]
 8011dce:	4b1c      	ldr	r3, [pc, #112]	; (8011e40 <TIM_OC6_SetConfig+0x9c>)
 8011dd0:	4013      	ands	r3, r2
 8011dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	021b      	lsls	r3, r3, #8
 8011dda:	68fa      	ldr	r2, [r7, #12]
 8011ddc:	4313      	orrs	r3, r2
 8011dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011de0:	693b      	ldr	r3, [r7, #16]
 8011de2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011de6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	689b      	ldr	r3, [r3, #8]
 8011dec:	051b      	lsls	r3, r3, #20
 8011dee:	693a      	ldr	r2, [r7, #16]
 8011df0:	4313      	orrs	r3, r2
 8011df2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	4a13      	ldr	r2, [pc, #76]	; (8011e44 <TIM_OC6_SetConfig+0xa0>)
 8011df8:	4293      	cmp	r3, r2
 8011dfa:	d003      	beq.n	8011e04 <TIM_OC6_SetConfig+0x60>
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	4a12      	ldr	r2, [pc, #72]	; (8011e48 <TIM_OC6_SetConfig+0xa4>)
 8011e00:	4293      	cmp	r3, r2
 8011e02:	d109      	bne.n	8011e18 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011e04:	697b      	ldr	r3, [r7, #20]
 8011e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	695b      	ldr	r3, [r3, #20]
 8011e10:	029b      	lsls	r3, r3, #10
 8011e12:	697a      	ldr	r2, [r7, #20]
 8011e14:	4313      	orrs	r3, r2
 8011e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	697a      	ldr	r2, [r7, #20]
 8011e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	68fa      	ldr	r2, [r7, #12]
 8011e22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	685a      	ldr	r2, [r3, #4]
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	693a      	ldr	r2, [r7, #16]
 8011e30:	621a      	str	r2, [r3, #32]
}
 8011e32:	bf00      	nop
 8011e34:	371c      	adds	r7, #28
 8011e36:	46bd      	mov	sp, r7
 8011e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3c:	4770      	bx	lr
 8011e3e:	bf00      	nop
 8011e40:	feff8fff 	.word	0xfeff8fff
 8011e44:	40010000 	.word	0x40010000
 8011e48:	40010400 	.word	0x40010400

08011e4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011e4c:	b480      	push	{r7}
 8011e4e:	b087      	sub	sp, #28
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	60f8      	str	r0, [r7, #12]
 8011e54:	60b9      	str	r1, [r7, #8]
 8011e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	6a1b      	ldr	r3, [r3, #32]
 8011e5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	6a1b      	ldr	r3, [r3, #32]
 8011e62:	f023 0201 	bic.w	r2, r3, #1
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	699b      	ldr	r3, [r3, #24]
 8011e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	011b      	lsls	r3, r3, #4
 8011e7c:	693a      	ldr	r2, [r7, #16]
 8011e7e:	4313      	orrs	r3, r2
 8011e80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011e82:	697b      	ldr	r3, [r7, #20]
 8011e84:	f023 030a 	bic.w	r3, r3, #10
 8011e88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011e8a:	697a      	ldr	r2, [r7, #20]
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	4313      	orrs	r3, r2
 8011e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	693a      	ldr	r2, [r7, #16]
 8011e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	697a      	ldr	r2, [r7, #20]
 8011e9c:	621a      	str	r2, [r3, #32]
}
 8011e9e:	bf00      	nop
 8011ea0:	371c      	adds	r7, #28
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea8:	4770      	bx	lr

08011eaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011eaa:	b480      	push	{r7}
 8011eac:	b087      	sub	sp, #28
 8011eae:	af00      	add	r7, sp, #0
 8011eb0:	60f8      	str	r0, [r7, #12]
 8011eb2:	60b9      	str	r1, [r7, #8]
 8011eb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	6a1b      	ldr	r3, [r3, #32]
 8011eba:	f023 0210 	bic.w	r2, r3, #16
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	699b      	ldr	r3, [r3, #24]
 8011ec6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	6a1b      	ldr	r3, [r3, #32]
 8011ecc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011ece:	697b      	ldr	r3, [r7, #20]
 8011ed0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011ed4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	031b      	lsls	r3, r3, #12
 8011eda:	697a      	ldr	r2, [r7, #20]
 8011edc:	4313      	orrs	r3, r2
 8011ede:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011ee0:	693b      	ldr	r3, [r7, #16]
 8011ee2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011ee6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011ee8:	68bb      	ldr	r3, [r7, #8]
 8011eea:	011b      	lsls	r3, r3, #4
 8011eec:	693a      	ldr	r2, [r7, #16]
 8011eee:	4313      	orrs	r3, r2
 8011ef0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	697a      	ldr	r2, [r7, #20]
 8011ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	693a      	ldr	r2, [r7, #16]
 8011efc:	621a      	str	r2, [r3, #32]
}
 8011efe:	bf00      	nop
 8011f00:	371c      	adds	r7, #28
 8011f02:	46bd      	mov	sp, r7
 8011f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f08:	4770      	bx	lr

08011f0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011f0a:	b480      	push	{r7}
 8011f0c:	b085      	sub	sp, #20
 8011f0e:	af00      	add	r7, sp, #0
 8011f10:	6078      	str	r0, [r7, #4]
 8011f12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	689b      	ldr	r3, [r3, #8]
 8011f18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011f22:	683a      	ldr	r2, [r7, #0]
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	4313      	orrs	r3, r2
 8011f28:	f043 0307 	orr.w	r3, r3, #7
 8011f2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	68fa      	ldr	r2, [r7, #12]
 8011f32:	609a      	str	r2, [r3, #8]
}
 8011f34:	bf00      	nop
 8011f36:	3714      	adds	r7, #20
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3e:	4770      	bx	lr

08011f40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011f40:	b480      	push	{r7}
 8011f42:	b087      	sub	sp, #28
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	60f8      	str	r0, [r7, #12]
 8011f48:	60b9      	str	r1, [r7, #8]
 8011f4a:	607a      	str	r2, [r7, #4]
 8011f4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	689b      	ldr	r3, [r3, #8]
 8011f52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011f54:	697b      	ldr	r3, [r7, #20]
 8011f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011f5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	021a      	lsls	r2, r3, #8
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	431a      	orrs	r2, r3
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	4313      	orrs	r3, r2
 8011f68:	697a      	ldr	r2, [r7, #20]
 8011f6a:	4313      	orrs	r3, r2
 8011f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	697a      	ldr	r2, [r7, #20]
 8011f72:	609a      	str	r2, [r3, #8]
}
 8011f74:	bf00      	nop
 8011f76:	371c      	adds	r7, #28
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7e:	4770      	bx	lr

08011f80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011f80:	b480      	push	{r7}
 8011f82:	b087      	sub	sp, #28
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	60f8      	str	r0, [r7, #12]
 8011f88:	60b9      	str	r1, [r7, #8]
 8011f8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	f003 031f 	and.w	r3, r3, #31
 8011f92:	2201      	movs	r2, #1
 8011f94:	fa02 f303 	lsl.w	r3, r2, r3
 8011f98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	6a1a      	ldr	r2, [r3, #32]
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	43db      	mvns	r3, r3
 8011fa2:	401a      	ands	r2, r3
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	6a1a      	ldr	r2, [r3, #32]
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	f003 031f 	and.w	r3, r3, #31
 8011fb2:	6879      	ldr	r1, [r7, #4]
 8011fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8011fb8:	431a      	orrs	r2, r3
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	621a      	str	r2, [r3, #32]
}
 8011fbe:	bf00      	nop
 8011fc0:	371c      	adds	r7, #28
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc8:	4770      	bx	lr
	...

08011fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011fcc:	b480      	push	{r7}
 8011fce:	b085      	sub	sp, #20
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
 8011fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011fdc:	2b01      	cmp	r3, #1
 8011fde:	d101      	bne.n	8011fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011fe0:	2302      	movs	r3, #2
 8011fe2:	e06d      	b.n	80120c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2201      	movs	r2, #1
 8011fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2202      	movs	r2, #2
 8011ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	685b      	ldr	r3, [r3, #4]
 8011ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	689b      	ldr	r3, [r3, #8]
 8012002:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	4a30      	ldr	r2, [pc, #192]	; (80120cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801200a:	4293      	cmp	r3, r2
 801200c:	d004      	beq.n	8012018 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	4a2f      	ldr	r2, [pc, #188]	; (80120d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012014:	4293      	cmp	r3, r2
 8012016:	d108      	bne.n	801202a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801201e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	685b      	ldr	r3, [r3, #4]
 8012024:	68fa      	ldr	r2, [r7, #12]
 8012026:	4313      	orrs	r3, r2
 8012028:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012030:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	68fa      	ldr	r2, [r7, #12]
 8012038:	4313      	orrs	r3, r2
 801203a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	68fa      	ldr	r2, [r7, #12]
 8012042:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	4a20      	ldr	r2, [pc, #128]	; (80120cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801204a:	4293      	cmp	r3, r2
 801204c:	d022      	beq.n	8012094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012056:	d01d      	beq.n	8012094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	4a1d      	ldr	r2, [pc, #116]	; (80120d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801205e:	4293      	cmp	r3, r2
 8012060:	d018      	beq.n	8012094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	4a1c      	ldr	r2, [pc, #112]	; (80120d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8012068:	4293      	cmp	r3, r2
 801206a:	d013      	beq.n	8012094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	4a1a      	ldr	r2, [pc, #104]	; (80120dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8012072:	4293      	cmp	r3, r2
 8012074:	d00e      	beq.n	8012094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	4a15      	ldr	r2, [pc, #84]	; (80120d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801207c:	4293      	cmp	r3, r2
 801207e:	d009      	beq.n	8012094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	4a16      	ldr	r2, [pc, #88]	; (80120e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012086:	4293      	cmp	r3, r2
 8012088:	d004      	beq.n	8012094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	4a15      	ldr	r2, [pc, #84]	; (80120e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012090:	4293      	cmp	r3, r2
 8012092:	d10c      	bne.n	80120ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801209a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	689b      	ldr	r3, [r3, #8]
 80120a0:	68ba      	ldr	r2, [r7, #8]
 80120a2:	4313      	orrs	r3, r2
 80120a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	68ba      	ldr	r2, [r7, #8]
 80120ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	2201      	movs	r2, #1
 80120b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2200      	movs	r2, #0
 80120ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80120be:	2300      	movs	r3, #0
}
 80120c0:	4618      	mov	r0, r3
 80120c2:	3714      	adds	r7, #20
 80120c4:	46bd      	mov	sp, r7
 80120c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ca:	4770      	bx	lr
 80120cc:	40010000 	.word	0x40010000
 80120d0:	40010400 	.word	0x40010400
 80120d4:	40000400 	.word	0x40000400
 80120d8:	40000800 	.word	0x40000800
 80120dc:	40000c00 	.word	0x40000c00
 80120e0:	40014000 	.word	0x40014000
 80120e4:	40001800 	.word	0x40001800

080120e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80120e8:	b480      	push	{r7}
 80120ea:	b083      	sub	sp, #12
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80120f0:	bf00      	nop
 80120f2:	370c      	adds	r7, #12
 80120f4:	46bd      	mov	sp, r7
 80120f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fa:	4770      	bx	lr

080120fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80120fc:	b480      	push	{r7}
 80120fe:	b083      	sub	sp, #12
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012104:	bf00      	nop
 8012106:	370c      	adds	r7, #12
 8012108:	46bd      	mov	sp, r7
 801210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210e:	4770      	bx	lr

08012110 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012110:	b480      	push	{r7}
 8012112:	b083      	sub	sp, #12
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012118:	bf00      	nop
 801211a:	370c      	adds	r7, #12
 801211c:	46bd      	mov	sp, r7
 801211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012122:	4770      	bx	lr

08012124 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b082      	sub	sp, #8
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d101      	bne.n	8012136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012132:	2301      	movs	r3, #1
 8012134:	e040      	b.n	80121b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801213a:	2b00      	cmp	r3, #0
 801213c:	d106      	bne.n	801214c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	2200      	movs	r2, #0
 8012142:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f7f6 f9cc 	bl	80084e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2224      	movs	r2, #36	; 0x24
 8012150:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	681a      	ldr	r2, [r3, #0]
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	f022 0201 	bic.w	r2, r2, #1
 8012160:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f000 fbf0 	bl	8012948 <UART_SetConfig>
 8012168:	4603      	mov	r3, r0
 801216a:	2b01      	cmp	r3, #1
 801216c:	d101      	bne.n	8012172 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 801216e:	2301      	movs	r3, #1
 8012170:	e022      	b.n	80121b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012176:	2b00      	cmp	r3, #0
 8012178:	d002      	beq.n	8012180 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801217a:	6878      	ldr	r0, [r7, #4]
 801217c:	f000 fe46 	bl	8012e0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	685a      	ldr	r2, [r3, #4]
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801218e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	689a      	ldr	r2, [r3, #8]
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801219e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	681a      	ldr	r2, [r3, #0]
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	f042 0201 	orr.w	r2, r2, #1
 80121ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80121b0:	6878      	ldr	r0, [r7, #4]
 80121b2:	f000 fecd 	bl	8012f50 <UART_CheckIdleState>
 80121b6:	4603      	mov	r3, r0
}
 80121b8:	4618      	mov	r0, r3
 80121ba:	3708      	adds	r7, #8
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}

080121c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b08a      	sub	sp, #40	; 0x28
 80121c4:	af02      	add	r7, sp, #8
 80121c6:	60f8      	str	r0, [r7, #12]
 80121c8:	60b9      	str	r1, [r7, #8]
 80121ca:	603b      	str	r3, [r7, #0]
 80121cc:	4613      	mov	r3, r2
 80121ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80121d4:	2b20      	cmp	r3, #32
 80121d6:	f040 8081 	bne.w	80122dc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80121da:	68bb      	ldr	r3, [r7, #8]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d002      	beq.n	80121e6 <HAL_UART_Transmit+0x26>
 80121e0:	88fb      	ldrh	r3, [r7, #6]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d101      	bne.n	80121ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80121e6:	2301      	movs	r3, #1
 80121e8:	e079      	b.n	80122de <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80121f0:	2b01      	cmp	r3, #1
 80121f2:	d101      	bne.n	80121f8 <HAL_UART_Transmit+0x38>
 80121f4:	2302      	movs	r3, #2
 80121f6:	e072      	b.n	80122de <HAL_UART_Transmit+0x11e>
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	2201      	movs	r2, #1
 80121fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	2200      	movs	r2, #0
 8012204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	2221      	movs	r2, #33	; 0x21
 801220c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801220e:	f7f6 fe39 	bl	8008e84 <HAL_GetTick>
 8012212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	88fa      	ldrh	r2, [r7, #6]
 8012218:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	88fa      	ldrh	r2, [r7, #6]
 8012220:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	689b      	ldr	r3, [r3, #8]
 8012228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801222c:	d108      	bne.n	8012240 <HAL_UART_Transmit+0x80>
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	691b      	ldr	r3, [r3, #16]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d104      	bne.n	8012240 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8012236:	2300      	movs	r3, #0
 8012238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	61bb      	str	r3, [r7, #24]
 801223e:	e003      	b.n	8012248 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012244:	2300      	movs	r3, #0
 8012246:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	2200      	movs	r2, #0
 801224c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8012250:	e02c      	b.n	80122ac <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	9300      	str	r3, [sp, #0]
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	2200      	movs	r2, #0
 801225a:	2180      	movs	r1, #128	; 0x80
 801225c:	68f8      	ldr	r0, [r7, #12]
 801225e:	f000 feaa 	bl	8012fb6 <UART_WaitOnFlagUntilTimeout>
 8012262:	4603      	mov	r3, r0
 8012264:	2b00      	cmp	r3, #0
 8012266:	d001      	beq.n	801226c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8012268:	2303      	movs	r3, #3
 801226a:	e038      	b.n	80122de <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 801226c:	69fb      	ldr	r3, [r7, #28]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d10b      	bne.n	801228a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012272:	69bb      	ldr	r3, [r7, #24]
 8012274:	881b      	ldrh	r3, [r3, #0]
 8012276:	461a      	mov	r2, r3
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012280:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8012282:	69bb      	ldr	r3, [r7, #24]
 8012284:	3302      	adds	r3, #2
 8012286:	61bb      	str	r3, [r7, #24]
 8012288:	e007      	b.n	801229a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801228a:	69fb      	ldr	r3, [r7, #28]
 801228c:	781a      	ldrb	r2, [r3, #0]
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8012294:	69fb      	ldr	r3, [r7, #28]
 8012296:	3301      	adds	r3, #1
 8012298:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80122a0:	b29b      	uxth	r3, r3
 80122a2:	3b01      	subs	r3, #1
 80122a4:	b29a      	uxth	r2, r3
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d1cc      	bne.n	8012252 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	9300      	str	r3, [sp, #0]
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	2200      	movs	r2, #0
 80122c0:	2140      	movs	r1, #64	; 0x40
 80122c2:	68f8      	ldr	r0, [r7, #12]
 80122c4:	f000 fe77 	bl	8012fb6 <UART_WaitOnFlagUntilTimeout>
 80122c8:	4603      	mov	r3, r0
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d001      	beq.n	80122d2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80122ce:	2303      	movs	r3, #3
 80122d0:	e005      	b.n	80122de <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	2220      	movs	r2, #32
 80122d6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80122d8:	2300      	movs	r3, #0
 80122da:	e000      	b.n	80122de <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80122dc:	2302      	movs	r3, #2
  }
}
 80122de:	4618      	mov	r0, r3
 80122e0:	3720      	adds	r7, #32
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}
	...

080122e8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80122e8:	b480      	push	{r7}
 80122ea:	b085      	sub	sp, #20
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	60f8      	str	r0, [r7, #12]
 80122f0:	60b9      	str	r1, [r7, #8]
 80122f2:	4613      	mov	r3, r2
 80122f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80122fa:	2b20      	cmp	r3, #32
 80122fc:	d145      	bne.n	801238a <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d002      	beq.n	801230a <HAL_UART_Transmit_IT+0x22>
 8012304:	88fb      	ldrh	r3, [r7, #6]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d101      	bne.n	801230e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 801230a:	2301      	movs	r3, #1
 801230c:	e03e      	b.n	801238c <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012314:	2b01      	cmp	r3, #1
 8012316:	d101      	bne.n	801231c <HAL_UART_Transmit_IT+0x34>
 8012318:	2302      	movs	r3, #2
 801231a:	e037      	b.n	801238c <HAL_UART_Transmit_IT+0xa4>
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	2201      	movs	r2, #1
 8012320:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	68ba      	ldr	r2, [r7, #8]
 8012328:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	88fa      	ldrh	r2, [r7, #6]
 801232e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	88fa      	ldrh	r2, [r7, #6]
 8012336:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	2200      	movs	r2, #0
 801233e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	2200      	movs	r2, #0
 8012344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	2221      	movs	r2, #33	; 0x21
 801234c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	689b      	ldr	r3, [r3, #8]
 8012352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012356:	d107      	bne.n	8012368 <HAL_UART_Transmit_IT+0x80>
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	691b      	ldr	r3, [r3, #16]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d103      	bne.n	8012368 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	4a0d      	ldr	r2, [pc, #52]	; (8012398 <HAL_UART_Transmit_IT+0xb0>)
 8012364:	669a      	str	r2, [r3, #104]	; 0x68
 8012366:	e002      	b.n	801236e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	4a0c      	ldr	r2, [pc, #48]	; (801239c <HAL_UART_Transmit_IT+0xb4>)
 801236c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	2200      	movs	r2, #0
 8012372:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	681a      	ldr	r2, [r3, #0]
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8012384:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8012386:	2300      	movs	r3, #0
 8012388:	e000      	b.n	801238c <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 801238a:	2302      	movs	r3, #2
  }
}
 801238c:	4618      	mov	r0, r3
 801238e:	3714      	adds	r7, #20
 8012390:	46bd      	mov	sp, r7
 8012392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012396:	4770      	bx	lr
 8012398:	08013305 	.word	0x08013305
 801239c:	08013293 	.word	0x08013293

080123a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b084      	sub	sp, #16
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	60f8      	str	r0, [r7, #12]
 80123a8:	60b9      	str	r1, [r7, #8]
 80123aa:	4613      	mov	r3, r2
 80123ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123b2:	2b20      	cmp	r3, #32
 80123b4:	d12c      	bne.n	8012410 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80123b6:	68bb      	ldr	r3, [r7, #8]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d002      	beq.n	80123c2 <HAL_UART_Receive_IT+0x22>
 80123bc:	88fb      	ldrh	r3, [r7, #6]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d101      	bne.n	80123c6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80123c2:	2301      	movs	r3, #1
 80123c4:	e025      	b.n	8012412 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80123cc:	2b01      	cmp	r3, #1
 80123ce:	d101      	bne.n	80123d4 <HAL_UART_Receive_IT+0x34>
 80123d0:	2302      	movs	r3, #2
 80123d2:	e01e      	b.n	8012412 <HAL_UART_Receive_IT+0x72>
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	2201      	movs	r2, #1
 80123d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	2200      	movs	r2, #0
 80123e0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	685b      	ldr	r3, [r3, #4]
 80123e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d007      	beq.n	8012400 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	681a      	ldr	r2, [r3, #0]
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80123fe:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8012400:	88fb      	ldrh	r3, [r7, #6]
 8012402:	461a      	mov	r2, r3
 8012404:	68b9      	ldr	r1, [r7, #8]
 8012406:	68f8      	ldr	r0, [r7, #12]
 8012408:	f000 fe52 	bl	80130b0 <UART_Start_Receive_IT>
 801240c:	4603      	mov	r3, r0
 801240e:	e000      	b.n	8012412 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8012410:	2302      	movs	r3, #2
  }
}
 8012412:	4618      	mov	r0, r3
 8012414:	3710      	adds	r7, #16
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}
	...

0801241c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	681a      	ldr	r2, [r3, #0]
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8012432:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	689a      	ldr	r2, [r3, #8]
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	f022 0201 	bic.w	r2, r2, #1
 8012442:	609a      	str	r2, [r3, #8]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012448:	2b01      	cmp	r3, #1
 801244a:	d107      	bne.n	801245c <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	681a      	ldr	r2, [r3, #0]
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	f022 0210 	bic.w	r2, r2, #16
 801245a:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	689b      	ldr	r3, [r3, #8]
 8012462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012466:	2b40      	cmp	r3, #64	; 0x40
 8012468:	d13c      	bne.n	80124e4 <HAL_UART_AbortReceive_IT+0xc8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	689a      	ldr	r2, [r3, #8]
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012478:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801247e:	2b00      	cmp	r3, #0
 8012480:	d013      	beq.n	80124aa <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012486:	4a24      	ldr	r2, [pc, #144]	; (8012518 <HAL_UART_AbortReceive_IT+0xfc>)
 8012488:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801248e:	4618      	mov	r0, r3
 8012490:	f7f7 fe40 	bl	800a114 <HAL_DMA_Abort_IT>
 8012494:	4603      	mov	r3, r0
 8012496:	2b00      	cmp	r3, #0
 8012498:	d038      	beq.n	801250c <HAL_UART_AbortReceive_IT+0xf0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801249e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80124a0:	687a      	ldr	r2, [r7, #4]
 80124a2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80124a4:	4610      	mov	r0, r2
 80124a6:	4798      	blx	r3
 80124a8:	e030      	b.n	801250c <HAL_UART_AbortReceive_IT+0xf0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	2200      	movs	r2, #0
 80124ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2200      	movs	r2, #0
 80124b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	220f      	movs	r2, #15
 80124be:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	699a      	ldr	r2, [r3, #24]
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	f042 0208 	orr.w	r2, r2, #8
 80124ce:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2220      	movs	r2, #32
 80124d4:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	2200      	movs	r2, #0
 80124da:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f000 fa1d 	bl	801291c <HAL_UART_AbortReceiveCpltCallback>
 80124e2:	e013      	b.n	801250c <HAL_UART_AbortReceive_IT+0xf0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	2200      	movs	r2, #0
 80124e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	2200      	movs	r2, #0
 80124f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	220f      	movs	r2, #15
 80124f8:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	2220      	movs	r2, #32
 80124fe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2200      	movs	r2, #0
 8012504:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f000 fa08 	bl	801291c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 801250c:	2300      	movs	r3, #0
}
 801250e:	4618      	mov	r0, r3
 8012510:	3708      	adds	r7, #8
 8012512:	46bd      	mov	sp, r7
 8012514:	bd80      	pop	{r7, pc}
 8012516:	bf00      	nop
 8012518:	0801324b 	.word	0x0801324b

0801251c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b088      	sub	sp, #32
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	69db      	ldr	r3, [r3, #28]
 801252a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	689b      	ldr	r3, [r3, #8]
 801253a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801253c:	69fa      	ldr	r2, [r7, #28]
 801253e:	f640 030f 	movw	r3, #2063	; 0x80f
 8012542:	4013      	ands	r3, r2
 8012544:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8012546:	693b      	ldr	r3, [r7, #16]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d113      	bne.n	8012574 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801254c:	69fb      	ldr	r3, [r7, #28]
 801254e:	f003 0320 	and.w	r3, r3, #32
 8012552:	2b00      	cmp	r3, #0
 8012554:	d00e      	beq.n	8012574 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012556:	69bb      	ldr	r3, [r7, #24]
 8012558:	f003 0320 	and.w	r3, r3, #32
 801255c:	2b00      	cmp	r3, #0
 801255e:	d009      	beq.n	8012574 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012564:	2b00      	cmp	r3, #0
 8012566:	f000 81b9 	beq.w	80128dc <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801256e:	6878      	ldr	r0, [r7, #4]
 8012570:	4798      	blx	r3
      }
      return;
 8012572:	e1b3      	b.n	80128dc <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012574:	693b      	ldr	r3, [r7, #16]
 8012576:	2b00      	cmp	r3, #0
 8012578:	f000 80e3 	beq.w	8012742 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	f003 0301 	and.w	r3, r3, #1
 8012582:	2b00      	cmp	r3, #0
 8012584:	d105      	bne.n	8012592 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8012586:	69ba      	ldr	r2, [r7, #24]
 8012588:	4ba5      	ldr	r3, [pc, #660]	; (8012820 <HAL_UART_IRQHandler+0x304>)
 801258a:	4013      	ands	r3, r2
 801258c:	2b00      	cmp	r3, #0
 801258e:	f000 80d8 	beq.w	8012742 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012592:	69fb      	ldr	r3, [r7, #28]
 8012594:	f003 0301 	and.w	r3, r3, #1
 8012598:	2b00      	cmp	r3, #0
 801259a:	d010      	beq.n	80125be <HAL_UART_IRQHandler+0xa2>
 801259c:	69bb      	ldr	r3, [r7, #24]
 801259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d00b      	beq.n	80125be <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	2201      	movs	r2, #1
 80125ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80125b4:	f043 0201 	orr.w	r2, r3, #1
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80125be:	69fb      	ldr	r3, [r7, #28]
 80125c0:	f003 0302 	and.w	r3, r3, #2
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d010      	beq.n	80125ea <HAL_UART_IRQHandler+0xce>
 80125c8:	697b      	ldr	r3, [r7, #20]
 80125ca:	f003 0301 	and.w	r3, r3, #1
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d00b      	beq.n	80125ea <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	2202      	movs	r2, #2
 80125d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80125e0:	f043 0204 	orr.w	r2, r3, #4
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80125ea:	69fb      	ldr	r3, [r7, #28]
 80125ec:	f003 0304 	and.w	r3, r3, #4
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d010      	beq.n	8012616 <HAL_UART_IRQHandler+0xfa>
 80125f4:	697b      	ldr	r3, [r7, #20]
 80125f6:	f003 0301 	and.w	r3, r3, #1
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d00b      	beq.n	8012616 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	2204      	movs	r2, #4
 8012604:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801260c:	f043 0202 	orr.w	r2, r3, #2
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012616:	69fb      	ldr	r3, [r7, #28]
 8012618:	f003 0308 	and.w	r3, r3, #8
 801261c:	2b00      	cmp	r3, #0
 801261e:	d015      	beq.n	801264c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8012620:	69bb      	ldr	r3, [r7, #24]
 8012622:	f003 0320 	and.w	r3, r3, #32
 8012626:	2b00      	cmp	r3, #0
 8012628:	d104      	bne.n	8012634 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801262a:	697b      	ldr	r3, [r7, #20]
 801262c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8012630:	2b00      	cmp	r3, #0
 8012632:	d00b      	beq.n	801264c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	2208      	movs	r2, #8
 801263a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012642:	f043 0208 	orr.w	r2, r3, #8
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801264c:	69fb      	ldr	r3, [r7, #28]
 801264e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012652:	2b00      	cmp	r3, #0
 8012654:	d011      	beq.n	801267a <HAL_UART_IRQHandler+0x15e>
 8012656:	69bb      	ldr	r3, [r7, #24]
 8012658:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801265c:	2b00      	cmp	r3, #0
 801265e:	d00c      	beq.n	801267a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012668:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012670:	f043 0220 	orr.w	r2, r3, #32
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012680:	2b00      	cmp	r3, #0
 8012682:	f000 812d 	beq.w	80128e0 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8012686:	69fb      	ldr	r3, [r7, #28]
 8012688:	f003 0320 	and.w	r3, r3, #32
 801268c:	2b00      	cmp	r3, #0
 801268e:	d00c      	beq.n	80126aa <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012690:	69bb      	ldr	r3, [r7, #24]
 8012692:	f003 0320 	and.w	r3, r3, #32
 8012696:	2b00      	cmp	r3, #0
 8012698:	d007      	beq.n	80126aa <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d003      	beq.n	80126aa <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80126b0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	689b      	ldr	r3, [r3, #8]
 80126b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126bc:	2b40      	cmp	r3, #64	; 0x40
 80126be:	d004      	beq.n	80126ca <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d031      	beq.n	801272e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80126ca:	6878      	ldr	r0, [r7, #4]
 80126cc:	f000 fd78 	bl	80131c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	689b      	ldr	r3, [r3, #8]
 80126d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126da:	2b40      	cmp	r3, #64	; 0x40
 80126dc:	d123      	bne.n	8012726 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	689a      	ldr	r2, [r3, #8]
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80126ec:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d013      	beq.n	801271e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126fa:	4a4a      	ldr	r2, [pc, #296]	; (8012824 <HAL_UART_IRQHandler+0x308>)
 80126fc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012702:	4618      	mov	r0, r3
 8012704:	f7f7 fd06 	bl	800a114 <HAL_DMA_Abort_IT>
 8012708:	4603      	mov	r3, r0
 801270a:	2b00      	cmp	r3, #0
 801270c:	d017      	beq.n	801273e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012714:	687a      	ldr	r2, [r7, #4]
 8012716:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8012718:	4610      	mov	r0, r2
 801271a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801271c:	e00f      	b.n	801273e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801271e:	6878      	ldr	r0, [r7, #4]
 8012720:	f000 f8f2 	bl	8012908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012724:	e00b      	b.n	801273e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f000 f8ee 	bl	8012908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801272c:	e007      	b.n	801273e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801272e:	6878      	ldr	r0, [r7, #4]
 8012730:	f000 f8ea 	bl	8012908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	2200      	movs	r2, #0
 8012738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 801273c:	e0d0      	b.n	80128e0 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801273e:	bf00      	nop
    return;
 8012740:	e0ce      	b.n	80128e0 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012746:	2b01      	cmp	r3, #1
 8012748:	f040 80a7 	bne.w	801289a <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801274c:	69fb      	ldr	r3, [r7, #28]
 801274e:	f003 0310 	and.w	r3, r3, #16
 8012752:	2b00      	cmp	r3, #0
 8012754:	f000 80a1 	beq.w	801289a <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012758:	69bb      	ldr	r3, [r7, #24]
 801275a:	f003 0310 	and.w	r3, r3, #16
 801275e:	2b00      	cmp	r3, #0
 8012760:	f000 809b 	beq.w	801289a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	2210      	movs	r2, #16
 801276a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	689b      	ldr	r3, [r3, #8]
 8012772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012776:	2b40      	cmp	r3, #64	; 0x40
 8012778:	d156      	bne.n	8012828 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	685b      	ldr	r3, [r3, #4]
 8012782:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8012784:	893b      	ldrh	r3, [r7, #8]
 8012786:	2b00      	cmp	r3, #0
 8012788:	f000 80ac 	beq.w	80128e4 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012792:	893a      	ldrh	r2, [r7, #8]
 8012794:	429a      	cmp	r2, r3
 8012796:	f080 80a5 	bcs.w	80128e4 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	893a      	ldrh	r2, [r7, #8]
 801279e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127a6:	69db      	ldr	r3, [r3, #28]
 80127a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127ac:	d02a      	beq.n	8012804 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	681a      	ldr	r2, [r3, #0]
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80127bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	689a      	ldr	r2, [r3, #8]
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	f022 0201 	bic.w	r2, r2, #1
 80127cc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	689a      	ldr	r2, [r3, #8]
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80127dc:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	2220      	movs	r2, #32
 80127e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2200      	movs	r2, #0
 80127e8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	681a      	ldr	r2, [r3, #0]
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	f022 0210 	bic.w	r2, r2, #16
 80127f8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127fe:	4618      	mov	r0, r3
 8012800:	f7f7 fc18 	bl	800a034 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012810:	b29b      	uxth	r3, r3
 8012812:	1ad3      	subs	r3, r2, r3
 8012814:	b29b      	uxth	r3, r3
 8012816:	4619      	mov	r1, r3
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f000 f889 	bl	8012930 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801281e:	e061      	b.n	80128e4 <HAL_UART_IRQHandler+0x3c8>
 8012820:	04000120 	.word	0x04000120
 8012824:	0801321f 	.word	0x0801321f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012834:	b29b      	uxth	r3, r3
 8012836:	1ad3      	subs	r3, r2, r3
 8012838:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012840:	b29b      	uxth	r3, r3
 8012842:	2b00      	cmp	r3, #0
 8012844:	d050      	beq.n	80128e8 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8012846:	897b      	ldrh	r3, [r7, #10]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d04d      	beq.n	80128e8 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	681a      	ldr	r2, [r3, #0]
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801285a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	689a      	ldr	r2, [r3, #8]
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	f022 0201 	bic.w	r2, r2, #1
 801286a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2220      	movs	r2, #32
 8012870:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	2200      	movs	r2, #0
 8012876:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2200      	movs	r2, #0
 801287c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	681a      	ldr	r2, [r3, #0]
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	f022 0210 	bic.w	r2, r2, #16
 801288c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801288e:	897b      	ldrh	r3, [r7, #10]
 8012890:	4619      	mov	r1, r3
 8012892:	6878      	ldr	r0, [r7, #4]
 8012894:	f000 f84c 	bl	8012930 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012898:	e026      	b.n	80128e8 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801289a:	69fb      	ldr	r3, [r7, #28]
 801289c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d00d      	beq.n	80128c0 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80128a4:	69bb      	ldr	r3, [r7, #24]
 80128a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d008      	beq.n	80128c0 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d01a      	beq.n	80128ec <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	4798      	blx	r3
    }
    return;
 80128be:	e015      	b.n	80128ec <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80128c0:	69fb      	ldr	r3, [r7, #28]
 80128c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d011      	beq.n	80128ee <HAL_UART_IRQHandler+0x3d2>
 80128ca:	69bb      	ldr	r3, [r7, #24]
 80128cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d00c      	beq.n	80128ee <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f000 fd53 	bl	8013380 <UART_EndTransmit_IT>
    return;
 80128da:	e008      	b.n	80128ee <HAL_UART_IRQHandler+0x3d2>
      return;
 80128dc:	bf00      	nop
 80128de:	e006      	b.n	80128ee <HAL_UART_IRQHandler+0x3d2>
    return;
 80128e0:	bf00      	nop
 80128e2:	e004      	b.n	80128ee <HAL_UART_IRQHandler+0x3d2>
      return;
 80128e4:	bf00      	nop
 80128e6:	e002      	b.n	80128ee <HAL_UART_IRQHandler+0x3d2>
      return;
 80128e8:	bf00      	nop
 80128ea:	e000      	b.n	80128ee <HAL_UART_IRQHandler+0x3d2>
    return;
 80128ec:	bf00      	nop
  }

}
 80128ee:	3720      	adds	r7, #32
 80128f0:	46bd      	mov	sp, r7
 80128f2:	bd80      	pop	{r7, pc}

080128f4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80128f4:	b480      	push	{r7}
 80128f6:	b083      	sub	sp, #12
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80128fc:	bf00      	nop
 80128fe:	370c      	adds	r7, #12
 8012900:	46bd      	mov	sp, r7
 8012902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012906:	4770      	bx	lr

08012908 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012908:	b480      	push	{r7}
 801290a:	b083      	sub	sp, #12
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012910:	bf00      	nop
 8012912:	370c      	adds	r7, #12
 8012914:	46bd      	mov	sp, r7
 8012916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291a:	4770      	bx	lr

0801291c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801291c:	b480      	push	{r7}
 801291e:	b083      	sub	sp, #12
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8012924:	bf00      	nop
 8012926:	370c      	adds	r7, #12
 8012928:	46bd      	mov	sp, r7
 801292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292e:	4770      	bx	lr

08012930 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012930:	b480      	push	{r7}
 8012932:	b083      	sub	sp, #12
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
 8012938:	460b      	mov	r3, r1
 801293a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801293c:	bf00      	nop
 801293e:	370c      	adds	r7, #12
 8012940:	46bd      	mov	sp, r7
 8012942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012946:	4770      	bx	lr

08012948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b088      	sub	sp, #32
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012950:	2300      	movs	r3, #0
 8012952:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	689a      	ldr	r2, [r3, #8]
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	691b      	ldr	r3, [r3, #16]
 801295c:	431a      	orrs	r2, r3
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	695b      	ldr	r3, [r3, #20]
 8012962:	431a      	orrs	r2, r3
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	69db      	ldr	r3, [r3, #28]
 8012968:	4313      	orrs	r3, r2
 801296a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	681a      	ldr	r2, [r3, #0]
 8012972:	4ba7      	ldr	r3, [pc, #668]	; (8012c10 <UART_SetConfig+0x2c8>)
 8012974:	4013      	ands	r3, r2
 8012976:	687a      	ldr	r2, [r7, #4]
 8012978:	6812      	ldr	r2, [r2, #0]
 801297a:	6979      	ldr	r1, [r7, #20]
 801297c:	430b      	orrs	r3, r1
 801297e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	685b      	ldr	r3, [r3, #4]
 8012986:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	68da      	ldr	r2, [r3, #12]
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	430a      	orrs	r2, r1
 8012994:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	699b      	ldr	r3, [r3, #24]
 801299a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	6a1b      	ldr	r3, [r3, #32]
 80129a0:	697a      	ldr	r2, [r7, #20]
 80129a2:	4313      	orrs	r3, r2
 80129a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	689b      	ldr	r3, [r3, #8]
 80129ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	697a      	ldr	r2, [r7, #20]
 80129b6:	430a      	orrs	r2, r1
 80129b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	4a95      	ldr	r2, [pc, #596]	; (8012c14 <UART_SetConfig+0x2cc>)
 80129c0:	4293      	cmp	r3, r2
 80129c2:	d120      	bne.n	8012a06 <UART_SetConfig+0xbe>
 80129c4:	4b94      	ldr	r3, [pc, #592]	; (8012c18 <UART_SetConfig+0x2d0>)
 80129c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129ca:	f003 0303 	and.w	r3, r3, #3
 80129ce:	2b03      	cmp	r3, #3
 80129d0:	d816      	bhi.n	8012a00 <UART_SetConfig+0xb8>
 80129d2:	a201      	add	r2, pc, #4	; (adr r2, 80129d8 <UART_SetConfig+0x90>)
 80129d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129d8:	080129e9 	.word	0x080129e9
 80129dc:	080129f5 	.word	0x080129f5
 80129e0:	080129ef 	.word	0x080129ef
 80129e4:	080129fb 	.word	0x080129fb
 80129e8:	2301      	movs	r3, #1
 80129ea:	77fb      	strb	r3, [r7, #31]
 80129ec:	e14f      	b.n	8012c8e <UART_SetConfig+0x346>
 80129ee:	2302      	movs	r3, #2
 80129f0:	77fb      	strb	r3, [r7, #31]
 80129f2:	e14c      	b.n	8012c8e <UART_SetConfig+0x346>
 80129f4:	2304      	movs	r3, #4
 80129f6:	77fb      	strb	r3, [r7, #31]
 80129f8:	e149      	b.n	8012c8e <UART_SetConfig+0x346>
 80129fa:	2308      	movs	r3, #8
 80129fc:	77fb      	strb	r3, [r7, #31]
 80129fe:	e146      	b.n	8012c8e <UART_SetConfig+0x346>
 8012a00:	2310      	movs	r3, #16
 8012a02:	77fb      	strb	r3, [r7, #31]
 8012a04:	e143      	b.n	8012c8e <UART_SetConfig+0x346>
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	4a84      	ldr	r2, [pc, #528]	; (8012c1c <UART_SetConfig+0x2d4>)
 8012a0c:	4293      	cmp	r3, r2
 8012a0e:	d132      	bne.n	8012a76 <UART_SetConfig+0x12e>
 8012a10:	4b81      	ldr	r3, [pc, #516]	; (8012c18 <UART_SetConfig+0x2d0>)
 8012a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a16:	f003 030c 	and.w	r3, r3, #12
 8012a1a:	2b0c      	cmp	r3, #12
 8012a1c:	d828      	bhi.n	8012a70 <UART_SetConfig+0x128>
 8012a1e:	a201      	add	r2, pc, #4	; (adr r2, 8012a24 <UART_SetConfig+0xdc>)
 8012a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a24:	08012a59 	.word	0x08012a59
 8012a28:	08012a71 	.word	0x08012a71
 8012a2c:	08012a71 	.word	0x08012a71
 8012a30:	08012a71 	.word	0x08012a71
 8012a34:	08012a65 	.word	0x08012a65
 8012a38:	08012a71 	.word	0x08012a71
 8012a3c:	08012a71 	.word	0x08012a71
 8012a40:	08012a71 	.word	0x08012a71
 8012a44:	08012a5f 	.word	0x08012a5f
 8012a48:	08012a71 	.word	0x08012a71
 8012a4c:	08012a71 	.word	0x08012a71
 8012a50:	08012a71 	.word	0x08012a71
 8012a54:	08012a6b 	.word	0x08012a6b
 8012a58:	2300      	movs	r3, #0
 8012a5a:	77fb      	strb	r3, [r7, #31]
 8012a5c:	e117      	b.n	8012c8e <UART_SetConfig+0x346>
 8012a5e:	2302      	movs	r3, #2
 8012a60:	77fb      	strb	r3, [r7, #31]
 8012a62:	e114      	b.n	8012c8e <UART_SetConfig+0x346>
 8012a64:	2304      	movs	r3, #4
 8012a66:	77fb      	strb	r3, [r7, #31]
 8012a68:	e111      	b.n	8012c8e <UART_SetConfig+0x346>
 8012a6a:	2308      	movs	r3, #8
 8012a6c:	77fb      	strb	r3, [r7, #31]
 8012a6e:	e10e      	b.n	8012c8e <UART_SetConfig+0x346>
 8012a70:	2310      	movs	r3, #16
 8012a72:	77fb      	strb	r3, [r7, #31]
 8012a74:	e10b      	b.n	8012c8e <UART_SetConfig+0x346>
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	4a69      	ldr	r2, [pc, #420]	; (8012c20 <UART_SetConfig+0x2d8>)
 8012a7c:	4293      	cmp	r3, r2
 8012a7e:	d120      	bne.n	8012ac2 <UART_SetConfig+0x17a>
 8012a80:	4b65      	ldr	r3, [pc, #404]	; (8012c18 <UART_SetConfig+0x2d0>)
 8012a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a86:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012a8a:	2b30      	cmp	r3, #48	; 0x30
 8012a8c:	d013      	beq.n	8012ab6 <UART_SetConfig+0x16e>
 8012a8e:	2b30      	cmp	r3, #48	; 0x30
 8012a90:	d814      	bhi.n	8012abc <UART_SetConfig+0x174>
 8012a92:	2b20      	cmp	r3, #32
 8012a94:	d009      	beq.n	8012aaa <UART_SetConfig+0x162>
 8012a96:	2b20      	cmp	r3, #32
 8012a98:	d810      	bhi.n	8012abc <UART_SetConfig+0x174>
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d002      	beq.n	8012aa4 <UART_SetConfig+0x15c>
 8012a9e:	2b10      	cmp	r3, #16
 8012aa0:	d006      	beq.n	8012ab0 <UART_SetConfig+0x168>
 8012aa2:	e00b      	b.n	8012abc <UART_SetConfig+0x174>
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	77fb      	strb	r3, [r7, #31]
 8012aa8:	e0f1      	b.n	8012c8e <UART_SetConfig+0x346>
 8012aaa:	2302      	movs	r3, #2
 8012aac:	77fb      	strb	r3, [r7, #31]
 8012aae:	e0ee      	b.n	8012c8e <UART_SetConfig+0x346>
 8012ab0:	2304      	movs	r3, #4
 8012ab2:	77fb      	strb	r3, [r7, #31]
 8012ab4:	e0eb      	b.n	8012c8e <UART_SetConfig+0x346>
 8012ab6:	2308      	movs	r3, #8
 8012ab8:	77fb      	strb	r3, [r7, #31]
 8012aba:	e0e8      	b.n	8012c8e <UART_SetConfig+0x346>
 8012abc:	2310      	movs	r3, #16
 8012abe:	77fb      	strb	r3, [r7, #31]
 8012ac0:	e0e5      	b.n	8012c8e <UART_SetConfig+0x346>
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	4a57      	ldr	r2, [pc, #348]	; (8012c24 <UART_SetConfig+0x2dc>)
 8012ac8:	4293      	cmp	r3, r2
 8012aca:	d120      	bne.n	8012b0e <UART_SetConfig+0x1c6>
 8012acc:	4b52      	ldr	r3, [pc, #328]	; (8012c18 <UART_SetConfig+0x2d0>)
 8012ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ad2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012ad6:	2bc0      	cmp	r3, #192	; 0xc0
 8012ad8:	d013      	beq.n	8012b02 <UART_SetConfig+0x1ba>
 8012ada:	2bc0      	cmp	r3, #192	; 0xc0
 8012adc:	d814      	bhi.n	8012b08 <UART_SetConfig+0x1c0>
 8012ade:	2b80      	cmp	r3, #128	; 0x80
 8012ae0:	d009      	beq.n	8012af6 <UART_SetConfig+0x1ae>
 8012ae2:	2b80      	cmp	r3, #128	; 0x80
 8012ae4:	d810      	bhi.n	8012b08 <UART_SetConfig+0x1c0>
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d002      	beq.n	8012af0 <UART_SetConfig+0x1a8>
 8012aea:	2b40      	cmp	r3, #64	; 0x40
 8012aec:	d006      	beq.n	8012afc <UART_SetConfig+0x1b4>
 8012aee:	e00b      	b.n	8012b08 <UART_SetConfig+0x1c0>
 8012af0:	2300      	movs	r3, #0
 8012af2:	77fb      	strb	r3, [r7, #31]
 8012af4:	e0cb      	b.n	8012c8e <UART_SetConfig+0x346>
 8012af6:	2302      	movs	r3, #2
 8012af8:	77fb      	strb	r3, [r7, #31]
 8012afa:	e0c8      	b.n	8012c8e <UART_SetConfig+0x346>
 8012afc:	2304      	movs	r3, #4
 8012afe:	77fb      	strb	r3, [r7, #31]
 8012b00:	e0c5      	b.n	8012c8e <UART_SetConfig+0x346>
 8012b02:	2308      	movs	r3, #8
 8012b04:	77fb      	strb	r3, [r7, #31]
 8012b06:	e0c2      	b.n	8012c8e <UART_SetConfig+0x346>
 8012b08:	2310      	movs	r3, #16
 8012b0a:	77fb      	strb	r3, [r7, #31]
 8012b0c:	e0bf      	b.n	8012c8e <UART_SetConfig+0x346>
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	4a45      	ldr	r2, [pc, #276]	; (8012c28 <UART_SetConfig+0x2e0>)
 8012b14:	4293      	cmp	r3, r2
 8012b16:	d125      	bne.n	8012b64 <UART_SetConfig+0x21c>
 8012b18:	4b3f      	ldr	r3, [pc, #252]	; (8012c18 <UART_SetConfig+0x2d0>)
 8012b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012b26:	d017      	beq.n	8012b58 <UART_SetConfig+0x210>
 8012b28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012b2c:	d817      	bhi.n	8012b5e <UART_SetConfig+0x216>
 8012b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b32:	d00b      	beq.n	8012b4c <UART_SetConfig+0x204>
 8012b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b38:	d811      	bhi.n	8012b5e <UART_SetConfig+0x216>
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d003      	beq.n	8012b46 <UART_SetConfig+0x1fe>
 8012b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b42:	d006      	beq.n	8012b52 <UART_SetConfig+0x20a>
 8012b44:	e00b      	b.n	8012b5e <UART_SetConfig+0x216>
 8012b46:	2300      	movs	r3, #0
 8012b48:	77fb      	strb	r3, [r7, #31]
 8012b4a:	e0a0      	b.n	8012c8e <UART_SetConfig+0x346>
 8012b4c:	2302      	movs	r3, #2
 8012b4e:	77fb      	strb	r3, [r7, #31]
 8012b50:	e09d      	b.n	8012c8e <UART_SetConfig+0x346>
 8012b52:	2304      	movs	r3, #4
 8012b54:	77fb      	strb	r3, [r7, #31]
 8012b56:	e09a      	b.n	8012c8e <UART_SetConfig+0x346>
 8012b58:	2308      	movs	r3, #8
 8012b5a:	77fb      	strb	r3, [r7, #31]
 8012b5c:	e097      	b.n	8012c8e <UART_SetConfig+0x346>
 8012b5e:	2310      	movs	r3, #16
 8012b60:	77fb      	strb	r3, [r7, #31]
 8012b62:	e094      	b.n	8012c8e <UART_SetConfig+0x346>
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	4a30      	ldr	r2, [pc, #192]	; (8012c2c <UART_SetConfig+0x2e4>)
 8012b6a:	4293      	cmp	r3, r2
 8012b6c:	d125      	bne.n	8012bba <UART_SetConfig+0x272>
 8012b6e:	4b2a      	ldr	r3, [pc, #168]	; (8012c18 <UART_SetConfig+0x2d0>)
 8012b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8012b78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012b7c:	d017      	beq.n	8012bae <UART_SetConfig+0x266>
 8012b7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012b82:	d817      	bhi.n	8012bb4 <UART_SetConfig+0x26c>
 8012b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012b88:	d00b      	beq.n	8012ba2 <UART_SetConfig+0x25a>
 8012b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012b8e:	d811      	bhi.n	8012bb4 <UART_SetConfig+0x26c>
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d003      	beq.n	8012b9c <UART_SetConfig+0x254>
 8012b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012b98:	d006      	beq.n	8012ba8 <UART_SetConfig+0x260>
 8012b9a:	e00b      	b.n	8012bb4 <UART_SetConfig+0x26c>
 8012b9c:	2301      	movs	r3, #1
 8012b9e:	77fb      	strb	r3, [r7, #31]
 8012ba0:	e075      	b.n	8012c8e <UART_SetConfig+0x346>
 8012ba2:	2302      	movs	r3, #2
 8012ba4:	77fb      	strb	r3, [r7, #31]
 8012ba6:	e072      	b.n	8012c8e <UART_SetConfig+0x346>
 8012ba8:	2304      	movs	r3, #4
 8012baa:	77fb      	strb	r3, [r7, #31]
 8012bac:	e06f      	b.n	8012c8e <UART_SetConfig+0x346>
 8012bae:	2308      	movs	r3, #8
 8012bb0:	77fb      	strb	r3, [r7, #31]
 8012bb2:	e06c      	b.n	8012c8e <UART_SetConfig+0x346>
 8012bb4:	2310      	movs	r3, #16
 8012bb6:	77fb      	strb	r3, [r7, #31]
 8012bb8:	e069      	b.n	8012c8e <UART_SetConfig+0x346>
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	4a1c      	ldr	r2, [pc, #112]	; (8012c30 <UART_SetConfig+0x2e8>)
 8012bc0:	4293      	cmp	r3, r2
 8012bc2:	d137      	bne.n	8012c34 <UART_SetConfig+0x2ec>
 8012bc4:	4b14      	ldr	r3, [pc, #80]	; (8012c18 <UART_SetConfig+0x2d0>)
 8012bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012bca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8012bce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012bd2:	d017      	beq.n	8012c04 <UART_SetConfig+0x2bc>
 8012bd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012bd8:	d817      	bhi.n	8012c0a <UART_SetConfig+0x2c2>
 8012bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012bde:	d00b      	beq.n	8012bf8 <UART_SetConfig+0x2b0>
 8012be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012be4:	d811      	bhi.n	8012c0a <UART_SetConfig+0x2c2>
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d003      	beq.n	8012bf2 <UART_SetConfig+0x2aa>
 8012bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012bee:	d006      	beq.n	8012bfe <UART_SetConfig+0x2b6>
 8012bf0:	e00b      	b.n	8012c0a <UART_SetConfig+0x2c2>
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	77fb      	strb	r3, [r7, #31]
 8012bf6:	e04a      	b.n	8012c8e <UART_SetConfig+0x346>
 8012bf8:	2302      	movs	r3, #2
 8012bfa:	77fb      	strb	r3, [r7, #31]
 8012bfc:	e047      	b.n	8012c8e <UART_SetConfig+0x346>
 8012bfe:	2304      	movs	r3, #4
 8012c00:	77fb      	strb	r3, [r7, #31]
 8012c02:	e044      	b.n	8012c8e <UART_SetConfig+0x346>
 8012c04:	2308      	movs	r3, #8
 8012c06:	77fb      	strb	r3, [r7, #31]
 8012c08:	e041      	b.n	8012c8e <UART_SetConfig+0x346>
 8012c0a:	2310      	movs	r3, #16
 8012c0c:	77fb      	strb	r3, [r7, #31]
 8012c0e:	e03e      	b.n	8012c8e <UART_SetConfig+0x346>
 8012c10:	efff69f3 	.word	0xefff69f3
 8012c14:	40011000 	.word	0x40011000
 8012c18:	40023800 	.word	0x40023800
 8012c1c:	40004400 	.word	0x40004400
 8012c20:	40004800 	.word	0x40004800
 8012c24:	40004c00 	.word	0x40004c00
 8012c28:	40005000 	.word	0x40005000
 8012c2c:	40011400 	.word	0x40011400
 8012c30:	40007800 	.word	0x40007800
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	4a71      	ldr	r2, [pc, #452]	; (8012e00 <UART_SetConfig+0x4b8>)
 8012c3a:	4293      	cmp	r3, r2
 8012c3c:	d125      	bne.n	8012c8a <UART_SetConfig+0x342>
 8012c3e:	4b71      	ldr	r3, [pc, #452]	; (8012e04 <UART_SetConfig+0x4bc>)
 8012c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012c44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012c48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012c4c:	d017      	beq.n	8012c7e <UART_SetConfig+0x336>
 8012c4e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012c52:	d817      	bhi.n	8012c84 <UART_SetConfig+0x33c>
 8012c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012c58:	d00b      	beq.n	8012c72 <UART_SetConfig+0x32a>
 8012c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012c5e:	d811      	bhi.n	8012c84 <UART_SetConfig+0x33c>
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d003      	beq.n	8012c6c <UART_SetConfig+0x324>
 8012c64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012c68:	d006      	beq.n	8012c78 <UART_SetConfig+0x330>
 8012c6a:	e00b      	b.n	8012c84 <UART_SetConfig+0x33c>
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	77fb      	strb	r3, [r7, #31]
 8012c70:	e00d      	b.n	8012c8e <UART_SetConfig+0x346>
 8012c72:	2302      	movs	r3, #2
 8012c74:	77fb      	strb	r3, [r7, #31]
 8012c76:	e00a      	b.n	8012c8e <UART_SetConfig+0x346>
 8012c78:	2304      	movs	r3, #4
 8012c7a:	77fb      	strb	r3, [r7, #31]
 8012c7c:	e007      	b.n	8012c8e <UART_SetConfig+0x346>
 8012c7e:	2308      	movs	r3, #8
 8012c80:	77fb      	strb	r3, [r7, #31]
 8012c82:	e004      	b.n	8012c8e <UART_SetConfig+0x346>
 8012c84:	2310      	movs	r3, #16
 8012c86:	77fb      	strb	r3, [r7, #31]
 8012c88:	e001      	b.n	8012c8e <UART_SetConfig+0x346>
 8012c8a:	2310      	movs	r3, #16
 8012c8c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	69db      	ldr	r3, [r3, #28]
 8012c92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012c96:	d15b      	bne.n	8012d50 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8012c98:	7ffb      	ldrb	r3, [r7, #31]
 8012c9a:	2b08      	cmp	r3, #8
 8012c9c:	d827      	bhi.n	8012cee <UART_SetConfig+0x3a6>
 8012c9e:	a201      	add	r2, pc, #4	; (adr r2, 8012ca4 <UART_SetConfig+0x35c>)
 8012ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ca4:	08012cc9 	.word	0x08012cc9
 8012ca8:	08012cd1 	.word	0x08012cd1
 8012cac:	08012cd9 	.word	0x08012cd9
 8012cb0:	08012cef 	.word	0x08012cef
 8012cb4:	08012cdf 	.word	0x08012cdf
 8012cb8:	08012cef 	.word	0x08012cef
 8012cbc:	08012cef 	.word	0x08012cef
 8012cc0:	08012cef 	.word	0x08012cef
 8012cc4:	08012ce7 	.word	0x08012ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012cc8:	f7fb fd5c 	bl	800e784 <HAL_RCC_GetPCLK1Freq>
 8012ccc:	61b8      	str	r0, [r7, #24]
        break;
 8012cce:	e013      	b.n	8012cf8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012cd0:	f7fb fd6c 	bl	800e7ac <HAL_RCC_GetPCLK2Freq>
 8012cd4:	61b8      	str	r0, [r7, #24]
        break;
 8012cd6:	e00f      	b.n	8012cf8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012cd8:	4b4b      	ldr	r3, [pc, #300]	; (8012e08 <UART_SetConfig+0x4c0>)
 8012cda:	61bb      	str	r3, [r7, #24]
        break;
 8012cdc:	e00c      	b.n	8012cf8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012cde:	f7fb fc63 	bl	800e5a8 <HAL_RCC_GetSysClockFreq>
 8012ce2:	61b8      	str	r0, [r7, #24]
        break;
 8012ce4:	e008      	b.n	8012cf8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012cea:	61bb      	str	r3, [r7, #24]
        break;
 8012cec:	e004      	b.n	8012cf8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8012cee:	2300      	movs	r3, #0
 8012cf0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8012cf2:	2301      	movs	r3, #1
 8012cf4:	77bb      	strb	r3, [r7, #30]
        break;
 8012cf6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012cf8:	69bb      	ldr	r3, [r7, #24]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d074      	beq.n	8012de8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012cfe:	69bb      	ldr	r3, [r7, #24]
 8012d00:	005a      	lsls	r2, r3, #1
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	685b      	ldr	r3, [r3, #4]
 8012d06:	085b      	lsrs	r3, r3, #1
 8012d08:	441a      	add	r2, r3
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	685b      	ldr	r3, [r3, #4]
 8012d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012d12:	b29b      	uxth	r3, r3
 8012d14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012d16:	693b      	ldr	r3, [r7, #16]
 8012d18:	2b0f      	cmp	r3, #15
 8012d1a:	d916      	bls.n	8012d4a <UART_SetConfig+0x402>
 8012d1c:	693b      	ldr	r3, [r7, #16]
 8012d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012d22:	d212      	bcs.n	8012d4a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012d24:	693b      	ldr	r3, [r7, #16]
 8012d26:	b29b      	uxth	r3, r3
 8012d28:	f023 030f 	bic.w	r3, r3, #15
 8012d2c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012d2e:	693b      	ldr	r3, [r7, #16]
 8012d30:	085b      	lsrs	r3, r3, #1
 8012d32:	b29b      	uxth	r3, r3
 8012d34:	f003 0307 	and.w	r3, r3, #7
 8012d38:	b29a      	uxth	r2, r3
 8012d3a:	89fb      	ldrh	r3, [r7, #14]
 8012d3c:	4313      	orrs	r3, r2
 8012d3e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	89fa      	ldrh	r2, [r7, #14]
 8012d46:	60da      	str	r2, [r3, #12]
 8012d48:	e04e      	b.n	8012de8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	77bb      	strb	r3, [r7, #30]
 8012d4e:	e04b      	b.n	8012de8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012d50:	7ffb      	ldrb	r3, [r7, #31]
 8012d52:	2b08      	cmp	r3, #8
 8012d54:	d827      	bhi.n	8012da6 <UART_SetConfig+0x45e>
 8012d56:	a201      	add	r2, pc, #4	; (adr r2, 8012d5c <UART_SetConfig+0x414>)
 8012d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d5c:	08012d81 	.word	0x08012d81
 8012d60:	08012d89 	.word	0x08012d89
 8012d64:	08012d91 	.word	0x08012d91
 8012d68:	08012da7 	.word	0x08012da7
 8012d6c:	08012d97 	.word	0x08012d97
 8012d70:	08012da7 	.word	0x08012da7
 8012d74:	08012da7 	.word	0x08012da7
 8012d78:	08012da7 	.word	0x08012da7
 8012d7c:	08012d9f 	.word	0x08012d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012d80:	f7fb fd00 	bl	800e784 <HAL_RCC_GetPCLK1Freq>
 8012d84:	61b8      	str	r0, [r7, #24]
        break;
 8012d86:	e013      	b.n	8012db0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012d88:	f7fb fd10 	bl	800e7ac <HAL_RCC_GetPCLK2Freq>
 8012d8c:	61b8      	str	r0, [r7, #24]
        break;
 8012d8e:	e00f      	b.n	8012db0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012d90:	4b1d      	ldr	r3, [pc, #116]	; (8012e08 <UART_SetConfig+0x4c0>)
 8012d92:	61bb      	str	r3, [r7, #24]
        break;
 8012d94:	e00c      	b.n	8012db0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012d96:	f7fb fc07 	bl	800e5a8 <HAL_RCC_GetSysClockFreq>
 8012d9a:	61b8      	str	r0, [r7, #24]
        break;
 8012d9c:	e008      	b.n	8012db0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012da2:	61bb      	str	r3, [r7, #24]
        break;
 8012da4:	e004      	b.n	8012db0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8012da6:	2300      	movs	r3, #0
 8012da8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8012daa:	2301      	movs	r3, #1
 8012dac:	77bb      	strb	r3, [r7, #30]
        break;
 8012dae:	bf00      	nop
    }

    if (pclk != 0U)
 8012db0:	69bb      	ldr	r3, [r7, #24]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d018      	beq.n	8012de8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	685b      	ldr	r3, [r3, #4]
 8012dba:	085a      	lsrs	r2, r3, #1
 8012dbc:	69bb      	ldr	r3, [r7, #24]
 8012dbe:	441a      	add	r2, r3
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	685b      	ldr	r3, [r3, #4]
 8012dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8012dc8:	b29b      	uxth	r3, r3
 8012dca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012dcc:	693b      	ldr	r3, [r7, #16]
 8012dce:	2b0f      	cmp	r3, #15
 8012dd0:	d908      	bls.n	8012de4 <UART_SetConfig+0x49c>
 8012dd2:	693b      	ldr	r3, [r7, #16]
 8012dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012dd8:	d204      	bcs.n	8012de4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	693a      	ldr	r2, [r7, #16]
 8012de0:	60da      	str	r2, [r3, #12]
 8012de2:	e001      	b.n	8012de8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8012de4:	2301      	movs	r3, #1
 8012de6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2200      	movs	r2, #0
 8012dec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2200      	movs	r2, #0
 8012df2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8012df4:	7fbb      	ldrb	r3, [r7, #30]
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	3720      	adds	r7, #32
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}
 8012dfe:	bf00      	nop
 8012e00:	40007c00 	.word	0x40007c00
 8012e04:	40023800 	.word	0x40023800
 8012e08:	00f42400 	.word	0x00f42400

08012e0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012e0c:	b480      	push	{r7}
 8012e0e:	b083      	sub	sp, #12
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e18:	f003 0301 	and.w	r3, r3, #1
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d00a      	beq.n	8012e36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	685b      	ldr	r3, [r3, #4]
 8012e26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	430a      	orrs	r2, r1
 8012e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e3a:	f003 0302 	and.w	r3, r3, #2
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d00a      	beq.n	8012e58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	685b      	ldr	r3, [r3, #4]
 8012e48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	430a      	orrs	r2, r1
 8012e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e5c:	f003 0304 	and.w	r3, r3, #4
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d00a      	beq.n	8012e7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	685b      	ldr	r3, [r3, #4]
 8012e6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	430a      	orrs	r2, r1
 8012e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e7e:	f003 0308 	and.w	r3, r3, #8
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d00a      	beq.n	8012e9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	685b      	ldr	r3, [r3, #4]
 8012e8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	430a      	orrs	r2, r1
 8012e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ea0:	f003 0310 	and.w	r3, r3, #16
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d00a      	beq.n	8012ebe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	689b      	ldr	r3, [r3, #8]
 8012eae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	430a      	orrs	r2, r1
 8012ebc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ec2:	f003 0320 	and.w	r3, r3, #32
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d00a      	beq.n	8012ee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	689b      	ldr	r3, [r3, #8]
 8012ed0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	430a      	orrs	r2, r1
 8012ede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d01a      	beq.n	8012f22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	685b      	ldr	r3, [r3, #4]
 8012ef2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	430a      	orrs	r2, r1
 8012f00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012f0a:	d10a      	bne.n	8012f22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	685b      	ldr	r3, [r3, #4]
 8012f12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	430a      	orrs	r2, r1
 8012f20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d00a      	beq.n	8012f44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	685b      	ldr	r3, [r3, #4]
 8012f34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	430a      	orrs	r2, r1
 8012f42:	605a      	str	r2, [r3, #4]
  }
}
 8012f44:	bf00      	nop
 8012f46:	370c      	adds	r7, #12
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4e:	4770      	bx	lr

08012f50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b086      	sub	sp, #24
 8012f54:	af02      	add	r7, sp, #8
 8012f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012f60:	f7f5 ff90 	bl	8008e84 <HAL_GetTick>
 8012f64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	f003 0308 	and.w	r3, r3, #8
 8012f70:	2b08      	cmp	r3, #8
 8012f72:	d10e      	bne.n	8012f92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012f74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012f78:	9300      	str	r3, [sp, #0]
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	f000 f817 	bl	8012fb6 <UART_WaitOnFlagUntilTimeout>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d001      	beq.n	8012f92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012f8e:	2303      	movs	r3, #3
 8012f90:	e00d      	b.n	8012fae <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	2220      	movs	r2, #32
 8012f96:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	2220      	movs	r2, #32
 8012f9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8012fac:	2300      	movs	r3, #0
}
 8012fae:	4618      	mov	r0, r3
 8012fb0:	3710      	adds	r7, #16
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}

08012fb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012fb6:	b580      	push	{r7, lr}
 8012fb8:	b084      	sub	sp, #16
 8012fba:	af00      	add	r7, sp, #0
 8012fbc:	60f8      	str	r0, [r7, #12]
 8012fbe:	60b9      	str	r1, [r7, #8]
 8012fc0:	603b      	str	r3, [r7, #0]
 8012fc2:	4613      	mov	r3, r2
 8012fc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012fc6:	e05e      	b.n	8013086 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012fc8:	69bb      	ldr	r3, [r7, #24]
 8012fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fce:	d05a      	beq.n	8013086 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012fd0:	f7f5 ff58 	bl	8008e84 <HAL_GetTick>
 8012fd4:	4602      	mov	r2, r0
 8012fd6:	683b      	ldr	r3, [r7, #0]
 8012fd8:	1ad3      	subs	r3, r2, r3
 8012fda:	69ba      	ldr	r2, [r7, #24]
 8012fdc:	429a      	cmp	r2, r3
 8012fde:	d302      	bcc.n	8012fe6 <UART_WaitOnFlagUntilTimeout+0x30>
 8012fe0:	69bb      	ldr	r3, [r7, #24]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d11b      	bne.n	801301e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	681a      	ldr	r2, [r3, #0]
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8012ff4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	689a      	ldr	r2, [r3, #8]
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	f022 0201 	bic.w	r2, r2, #1
 8013004:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	2220      	movs	r2, #32
 801300a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	2220      	movs	r2, #32
 8013010:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	2200      	movs	r2, #0
 8013016:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 801301a:	2303      	movs	r3, #3
 801301c:	e043      	b.n	80130a6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	f003 0304 	and.w	r3, r3, #4
 8013028:	2b00      	cmp	r3, #0
 801302a:	d02c      	beq.n	8013086 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	69db      	ldr	r3, [r3, #28]
 8013032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801303a:	d124      	bne.n	8013086 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013044:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	681a      	ldr	r2, [r3, #0]
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8013054:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	689a      	ldr	r2, [r3, #8]
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	f022 0201 	bic.w	r2, r2, #1
 8013064:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	2220      	movs	r2, #32
 801306a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	2220      	movs	r2, #32
 8013070:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	2220      	movs	r2, #32
 8013076:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	2200      	movs	r2, #0
 801307e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8013082:	2303      	movs	r3, #3
 8013084:	e00f      	b.n	80130a6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	69da      	ldr	r2, [r3, #28]
 801308c:	68bb      	ldr	r3, [r7, #8]
 801308e:	4013      	ands	r3, r2
 8013090:	68ba      	ldr	r2, [r7, #8]
 8013092:	429a      	cmp	r2, r3
 8013094:	bf0c      	ite	eq
 8013096:	2301      	moveq	r3, #1
 8013098:	2300      	movne	r3, #0
 801309a:	b2db      	uxtb	r3, r3
 801309c:	461a      	mov	r2, r3
 801309e:	79fb      	ldrb	r3, [r7, #7]
 80130a0:	429a      	cmp	r2, r3
 80130a2:	d091      	beq.n	8012fc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80130a4:	2300      	movs	r3, #0
}
 80130a6:	4618      	mov	r0, r3
 80130a8:	3710      	adds	r7, #16
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}
	...

080130b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80130b0:	b480      	push	{r7}
 80130b2:	b085      	sub	sp, #20
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	60f8      	str	r0, [r7, #12]
 80130b8:	60b9      	str	r1, [r7, #8]
 80130ba:	4613      	mov	r3, r2
 80130bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	68ba      	ldr	r2, [r7, #8]
 80130c2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	88fa      	ldrh	r2, [r7, #6]
 80130c8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	88fa      	ldrh	r2, [r7, #6]
 80130d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	2200      	movs	r2, #0
 80130d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	689b      	ldr	r3, [r3, #8]
 80130de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80130e2:	d10e      	bne.n	8013102 <UART_Start_Receive_IT+0x52>
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	691b      	ldr	r3, [r3, #16]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d105      	bne.n	80130f8 <UART_Start_Receive_IT+0x48>
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80130f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80130f6:	e02d      	b.n	8013154 <UART_Start_Receive_IT+0xa4>
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	22ff      	movs	r2, #255	; 0xff
 80130fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8013100:	e028      	b.n	8013154 <UART_Start_Receive_IT+0xa4>
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	689b      	ldr	r3, [r3, #8]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d10d      	bne.n	8013126 <UART_Start_Receive_IT+0x76>
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	691b      	ldr	r3, [r3, #16]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d104      	bne.n	801311c <UART_Start_Receive_IT+0x6c>
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	22ff      	movs	r2, #255	; 0xff
 8013116:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801311a:	e01b      	b.n	8013154 <UART_Start_Receive_IT+0xa4>
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	227f      	movs	r2, #127	; 0x7f
 8013120:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8013124:	e016      	b.n	8013154 <UART_Start_Receive_IT+0xa4>
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	689b      	ldr	r3, [r3, #8]
 801312a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801312e:	d10d      	bne.n	801314c <UART_Start_Receive_IT+0x9c>
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	691b      	ldr	r3, [r3, #16]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d104      	bne.n	8013142 <UART_Start_Receive_IT+0x92>
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	227f      	movs	r2, #127	; 0x7f
 801313c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8013140:	e008      	b.n	8013154 <UART_Start_Receive_IT+0xa4>
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	223f      	movs	r2, #63	; 0x3f
 8013146:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801314a:	e003      	b.n	8013154 <UART_Start_Receive_IT+0xa4>
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	2200      	movs	r2, #0
 8013150:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	2200      	movs	r2, #0
 8013158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	2222      	movs	r2, #34	; 0x22
 8013160:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	689a      	ldr	r2, [r3, #8]
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	f042 0201 	orr.w	r2, r2, #1
 8013170:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	689b      	ldr	r3, [r3, #8]
 8013176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801317a:	d107      	bne.n	801318c <UART_Start_Receive_IT+0xdc>
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	691b      	ldr	r3, [r3, #16]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d103      	bne.n	801318c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	4a0c      	ldr	r2, [pc, #48]	; (80131b8 <UART_Start_Receive_IT+0x108>)
 8013188:	665a      	str	r2, [r3, #100]	; 0x64
 801318a:	e002      	b.n	8013192 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	4a0b      	ldr	r2, [pc, #44]	; (80131bc <UART_Start_Receive_IT+0x10c>)
 8013190:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	2200      	movs	r2, #0
 8013196:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	681a      	ldr	r2, [r3, #0]
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80131a8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80131aa:	2300      	movs	r3, #0
}
 80131ac:	4618      	mov	r0, r3
 80131ae:	3714      	adds	r7, #20
 80131b0:	46bd      	mov	sp, r7
 80131b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b6:	4770      	bx	lr
 80131b8:	08013487 	.word	0x08013487
 80131bc:	080133b3 	.word	0x080133b3

080131c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80131c0:	b480      	push	{r7}
 80131c2:	b083      	sub	sp, #12
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	681a      	ldr	r2, [r3, #0]
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80131d6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	689a      	ldr	r2, [r3, #8]
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	f022 0201 	bic.w	r2, r2, #1
 80131e6:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80131ec:	2b01      	cmp	r3, #1
 80131ee:	d107      	bne.n	8013200 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	681a      	ldr	r2, [r3, #0]
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	f022 0210 	bic.w	r2, r2, #16
 80131fe:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	2220      	movs	r2, #32
 8013204:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	2200      	movs	r2, #0
 801320a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2200      	movs	r2, #0
 8013210:	665a      	str	r2, [r3, #100]	; 0x64
}
 8013212:	bf00      	nop
 8013214:	370c      	adds	r7, #12
 8013216:	46bd      	mov	sp, r7
 8013218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801321c:	4770      	bx	lr

0801321e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801321e:	b580      	push	{r7, lr}
 8013220:	b084      	sub	sp, #16
 8013222:	af00      	add	r7, sp, #0
 8013224:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801322a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	2200      	movs	r2, #0
 8013230:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	2200      	movs	r2, #0
 8013238:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801323c:	68f8      	ldr	r0, [r7, #12]
 801323e:	f7ff fb63 	bl	8012908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013242:	bf00      	nop
 8013244:	3710      	adds	r7, #16
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}

0801324a <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 801324a:	b580      	push	{r7, lr}
 801324c:	b084      	sub	sp, #16
 801324e:	af00      	add	r7, sp, #0
 8013250:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013256:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	2200      	movs	r2, #0
 801325c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	220f      	movs	r2, #15
 8013266:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	699a      	ldr	r2, [r3, #24]
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	f042 0208 	orr.w	r2, r2, #8
 8013276:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	2220      	movs	r2, #32
 801327c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	2200      	movs	r2, #0
 8013282:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8013284:	68f8      	ldr	r0, [r7, #12]
 8013286:	f7ff fb49 	bl	801291c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801328a:	bf00      	nop
 801328c:	3710      	adds	r7, #16
 801328e:	46bd      	mov	sp, r7
 8013290:	bd80      	pop	{r7, pc}

08013292 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8013292:	b480      	push	{r7}
 8013294:	b083      	sub	sp, #12
 8013296:	af00      	add	r7, sp, #0
 8013298:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801329e:	2b21      	cmp	r3, #33	; 0x21
 80132a0:	d12a      	bne.n	80132f8 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80132a8:	b29b      	uxth	r3, r3
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d110      	bne.n	80132d0 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	681a      	ldr	r2, [r3, #0]
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80132bc:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	681a      	ldr	r2, [r3, #0]
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80132cc:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80132ce:	e013      	b.n	80132f8 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80132d4:	781a      	ldrb	r2, [r3, #0]
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80132e0:	1c5a      	adds	r2, r3, #1
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80132ec:	b29b      	uxth	r3, r3
 80132ee:	3b01      	subs	r3, #1
 80132f0:	b29a      	uxth	r2, r3
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80132f8:	bf00      	nop
 80132fa:	370c      	adds	r7, #12
 80132fc:	46bd      	mov	sp, r7
 80132fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013302:	4770      	bx	lr

08013304 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8013304:	b480      	push	{r7}
 8013306:	b085      	sub	sp, #20
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013310:	2b21      	cmp	r3, #33	; 0x21
 8013312:	d12f      	bne.n	8013374 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801331a:	b29b      	uxth	r3, r3
 801331c:	2b00      	cmp	r3, #0
 801331e:	d110      	bne.n	8013342 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	681a      	ldr	r2, [r3, #0]
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801332e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	681a      	ldr	r2, [r3, #0]
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801333e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8013340:	e018      	b.n	8013374 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013346:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	881b      	ldrh	r3, [r3, #0]
 801334c:	461a      	mov	r2, r3
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013356:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801335c:	1c9a      	adds	r2, r3, #2
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8013368:	b29b      	uxth	r3, r3
 801336a:	3b01      	subs	r3, #1
 801336c:	b29a      	uxth	r2, r3
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8013374:	bf00      	nop
 8013376:	3714      	adds	r7, #20
 8013378:	46bd      	mov	sp, r7
 801337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801337e:	4770      	bx	lr

08013380 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b082      	sub	sp, #8
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	681a      	ldr	r2, [r3, #0]
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013396:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	2220      	movs	r2, #32
 801339c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	2200      	movs	r2, #0
 80133a2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80133a4:	6878      	ldr	r0, [r7, #4]
 80133a6:	f7f4 fb75 	bl	8007a94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80133aa:	bf00      	nop
 80133ac:	3708      	adds	r7, #8
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd80      	pop	{r7, pc}

080133b2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80133b2:	b580      	push	{r7, lr}
 80133b4:	b084      	sub	sp, #16
 80133b6:	af00      	add	r7, sp, #0
 80133b8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80133c0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80133c6:	2b22      	cmp	r3, #34	; 0x22
 80133c8:	d151      	bne.n	801346e <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133d0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80133d2:	89bb      	ldrh	r3, [r7, #12]
 80133d4:	b2d9      	uxtb	r1, r3
 80133d6:	89fb      	ldrh	r3, [r7, #14]
 80133d8:	b2da      	uxtb	r2, r3
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133de:	400a      	ands	r2, r1
 80133e0:	b2d2      	uxtb	r2, r2
 80133e2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133e8:	1c5a      	adds	r2, r3, #1
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80133f4:	b29b      	uxth	r3, r3
 80133f6:	3b01      	subs	r3, #1
 80133f8:	b29a      	uxth	r2, r3
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8013406:	b29b      	uxth	r3, r3
 8013408:	2b00      	cmp	r3, #0
 801340a:	d138      	bne.n	801347e <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	681a      	ldr	r2, [r3, #0]
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801341a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	689a      	ldr	r2, [r3, #8]
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	f022 0201 	bic.w	r2, r2, #1
 801342a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2220      	movs	r2, #32
 8013430:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	2200      	movs	r2, #0
 8013436:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801343c:	2b01      	cmp	r3, #1
 801343e:	d10f      	bne.n	8013460 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	681a      	ldr	r2, [r3, #0]
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	f022 0210 	bic.w	r2, r2, #16
 801344e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8013456:	4619      	mov	r1, r3
 8013458:	6878      	ldr	r0, [r7, #4]
 801345a:	f7ff fa69 	bl	8012930 <HAL_UARTEx_RxEventCallback>
 801345e:	e002      	b.n	8013466 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8013460:	6878      	ldr	r0, [r7, #4]
 8013462:	f7ff fa47 	bl	80128f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	2200      	movs	r2, #0
 801346a:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801346c:	e007      	b.n	801347e <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	699a      	ldr	r2, [r3, #24]
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	f042 0208 	orr.w	r2, r2, #8
 801347c:	619a      	str	r2, [r3, #24]
}
 801347e:	bf00      	nop
 8013480:	3710      	adds	r7, #16
 8013482:	46bd      	mov	sp, r7
 8013484:	bd80      	pop	{r7, pc}

08013486 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8013486:	b580      	push	{r7, lr}
 8013488:	b084      	sub	sp, #16
 801348a:	af00      	add	r7, sp, #0
 801348c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013494:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801349a:	2b22      	cmp	r3, #34	; 0x22
 801349c:	d151      	bne.n	8013542 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134a4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80134aa:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80134ac:	89ba      	ldrh	r2, [r7, #12]
 80134ae:	89fb      	ldrh	r3, [r7, #14]
 80134b0:	4013      	ands	r3, r2
 80134b2:	b29a      	uxth	r2, r3
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80134bc:	1c9a      	adds	r2, r3, #2
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80134c8:	b29b      	uxth	r3, r3
 80134ca:	3b01      	subs	r3, #1
 80134cc:	b29a      	uxth	r2, r3
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80134da:	b29b      	uxth	r3, r3
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d138      	bne.n	8013552 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	681a      	ldr	r2, [r3, #0]
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80134ee:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	689a      	ldr	r2, [r3, #8]
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	f022 0201 	bic.w	r2, r2, #1
 80134fe:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	2220      	movs	r2, #32
 8013504:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	2200      	movs	r2, #0
 801350a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013510:	2b01      	cmp	r3, #1
 8013512:	d10f      	bne.n	8013534 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	681a      	ldr	r2, [r3, #0]
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	f022 0210 	bic.w	r2, r2, #16
 8013522:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801352a:	4619      	mov	r1, r3
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	f7ff f9ff 	bl	8012930 <HAL_UARTEx_RxEventCallback>
 8013532:	e002      	b.n	801353a <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8013534:	6878      	ldr	r0, [r7, #4]
 8013536:	f7ff f9dd 	bl	80128f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	2200      	movs	r2, #0
 801353e:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013540:	e007      	b.n	8013552 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	699a      	ldr	r2, [r3, #24]
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	f042 0208 	orr.w	r2, r2, #8
 8013550:	619a      	str	r2, [r3, #24]
}
 8013552:	bf00      	nop
 8013554:	3710      	adds	r7, #16
 8013556:	46bd      	mov	sp, r7
 8013558:	bd80      	pop	{r7, pc}
	...

0801355c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801355c:	b084      	sub	sp, #16
 801355e:	b480      	push	{r7}
 8013560:	b085      	sub	sp, #20
 8013562:	af00      	add	r7, sp, #0
 8013564:	6078      	str	r0, [r7, #4]
 8013566:	f107 001c 	add.w	r0, r7, #28
 801356a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801356e:	2300      	movs	r3, #0
 8013570:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8013572:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8013574:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8013576:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8013578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 801357a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 801357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801357e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8013580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8013582:	431a      	orrs	r2, r3
             Init.ClockDiv
 8013584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8013586:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8013588:	68fa      	ldr	r2, [r7, #12]
 801358a:	4313      	orrs	r3, r2
 801358c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	685a      	ldr	r2, [r3, #4]
 8013592:	4b07      	ldr	r3, [pc, #28]	; (80135b0 <SDMMC_Init+0x54>)
 8013594:	4013      	ands	r3, r2
 8013596:	68fa      	ldr	r2, [r7, #12]
 8013598:	431a      	orrs	r2, r3
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801359e:	2300      	movs	r3, #0
}
 80135a0:	4618      	mov	r0, r3
 80135a2:	3714      	adds	r7, #20
 80135a4:	46bd      	mov	sp, r7
 80135a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135aa:	b004      	add	sp, #16
 80135ac:	4770      	bx	lr
 80135ae:	bf00      	nop
 80135b0:	ffff8100 	.word	0xffff8100

080135b4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80135b4:	b480      	push	{r7}
 80135b6:	b083      	sub	sp, #12
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	370c      	adds	r7, #12
 80135c6:	46bd      	mov	sp, r7
 80135c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135cc:	4770      	bx	lr

080135ce <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80135ce:	b480      	push	{r7}
 80135d0:	b083      	sub	sp, #12
 80135d2:	af00      	add	r7, sp, #0
 80135d4:	6078      	str	r0, [r7, #4]
 80135d6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80135d8:	683b      	ldr	r3, [r7, #0]
 80135da:	681a      	ldr	r2, [r3, #0]
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80135e2:	2300      	movs	r3, #0
}
 80135e4:	4618      	mov	r0, r3
 80135e6:	370c      	adds	r7, #12
 80135e8:	46bd      	mov	sp, r7
 80135ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ee:	4770      	bx	lr

080135f0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b082      	sub	sp, #8
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	2203      	movs	r2, #3
 80135fc:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80135fe:	2002      	movs	r0, #2
 8013600:	f7f5 fc4c 	bl	8008e9c <HAL_Delay>
  
  return HAL_OK;
 8013604:	2300      	movs	r3, #0
}
 8013606:	4618      	mov	r0, r3
 8013608:	3708      	adds	r7, #8
 801360a:	46bd      	mov	sp, r7
 801360c:	bd80      	pop	{r7, pc}

0801360e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 801360e:	b480      	push	{r7}
 8013610:	b083      	sub	sp, #12
 8013612:	af00      	add	r7, sp, #0
 8013614:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	f003 0303 	and.w	r3, r3, #3
}
 801361e:	4618      	mov	r0, r3
 8013620:	370c      	adds	r7, #12
 8013622:	46bd      	mov	sp, r7
 8013624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013628:	4770      	bx	lr
	...

0801362c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801362c:	b480      	push	{r7}
 801362e:	b085      	sub	sp, #20
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
 8013634:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013636:	2300      	movs	r3, #0
 8013638:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801363a:	683b      	ldr	r3, [r7, #0]
 801363c:	681a      	ldr	r2, [r3, #0]
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8013642:	683b      	ldr	r3, [r7, #0]
 8013644:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801364a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801364c:	683b      	ldr	r3, [r7, #0]
 801364e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8013650:	431a      	orrs	r2, r3
                       Command->CPSM);
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8013656:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8013658:	68fa      	ldr	r2, [r7, #12]
 801365a:	4313      	orrs	r3, r2
 801365c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	68da      	ldr	r2, [r3, #12]
 8013662:	4b06      	ldr	r3, [pc, #24]	; (801367c <SDMMC_SendCommand+0x50>)
 8013664:	4013      	ands	r3, r2
 8013666:	68fa      	ldr	r2, [r7, #12]
 8013668:	431a      	orrs	r2, r3
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801366e:	2300      	movs	r3, #0
}
 8013670:	4618      	mov	r0, r3
 8013672:	3714      	adds	r7, #20
 8013674:	46bd      	mov	sp, r7
 8013676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367a:	4770      	bx	lr
 801367c:	fffff000 	.word	0xfffff000

08013680 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8013680:	b480      	push	{r7}
 8013682:	b083      	sub	sp, #12
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	691b      	ldr	r3, [r3, #16]
 801368c:	b2db      	uxtb	r3, r3
}
 801368e:	4618      	mov	r0, r3
 8013690:	370c      	adds	r7, #12
 8013692:	46bd      	mov	sp, r7
 8013694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013698:	4770      	bx	lr

0801369a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801369a:	b480      	push	{r7}
 801369c:	b085      	sub	sp, #20
 801369e:	af00      	add	r7, sp, #0
 80136a0:	6078      	str	r0, [r7, #4]
 80136a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	3314      	adds	r3, #20
 80136a8:	461a      	mov	r2, r3
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	4413      	add	r3, r2
 80136ae:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	681b      	ldr	r3, [r3, #0]
}  
 80136b4:	4618      	mov	r0, r3
 80136b6:	3714      	adds	r7, #20
 80136b8:	46bd      	mov	sp, r7
 80136ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136be:	4770      	bx	lr

080136c0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80136c0:	b480      	push	{r7}
 80136c2:	b085      	sub	sp, #20
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
 80136c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80136ca:	2300      	movs	r3, #0
 80136cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80136ce:	683b      	ldr	r3, [r7, #0]
 80136d0:	681a      	ldr	r2, [r3, #0]
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80136d6:	683b      	ldr	r3, [r7, #0]
 80136d8:	685a      	ldr	r2, [r3, #4]
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80136de:	683b      	ldr	r3, [r7, #0]
 80136e0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80136e2:	683b      	ldr	r3, [r7, #0]
 80136e4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80136e6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80136e8:	683b      	ldr	r3, [r7, #0]
 80136ea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80136ec:	431a      	orrs	r2, r3
                       Data->DPSM);
 80136ee:	683b      	ldr	r3, [r7, #0]
 80136f0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80136f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80136f4:	68fa      	ldr	r2, [r7, #12]
 80136f6:	4313      	orrs	r3, r2
 80136f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136fe:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	431a      	orrs	r2, r3
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801370a:	2300      	movs	r3, #0

}
 801370c:	4618      	mov	r0, r3
 801370e:	3714      	adds	r7, #20
 8013710:	46bd      	mov	sp, r7
 8013712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013716:	4770      	bx	lr

08013718 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b088      	sub	sp, #32
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
 8013720:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8013722:	683b      	ldr	r3, [r7, #0]
 8013724:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8013726:	2310      	movs	r3, #16
 8013728:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801372a:	2340      	movs	r3, #64	; 0x40
 801372c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801372e:	2300      	movs	r3, #0
 8013730:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013736:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013738:	f107 0308 	add.w	r3, r7, #8
 801373c:	4619      	mov	r1, r3
 801373e:	6878      	ldr	r0, [r7, #4]
 8013740:	f7ff ff74 	bl	801362c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8013744:	f241 3288 	movw	r2, #5000	; 0x1388
 8013748:	2110      	movs	r1, #16
 801374a:	6878      	ldr	r0, [r7, #4]
 801374c:	f000 fa46 	bl	8013bdc <SDMMC_GetCmdResp1>
 8013750:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013752:	69fb      	ldr	r3, [r7, #28]
}
 8013754:	4618      	mov	r0, r3
 8013756:	3720      	adds	r7, #32
 8013758:	46bd      	mov	sp, r7
 801375a:	bd80      	pop	{r7, pc}

0801375c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b088      	sub	sp, #32
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
 8013764:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801376a:	2311      	movs	r3, #17
 801376c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801376e:	2340      	movs	r3, #64	; 0x40
 8013770:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013772:	2300      	movs	r3, #0
 8013774:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801377a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801377c:	f107 0308 	add.w	r3, r7, #8
 8013780:	4619      	mov	r1, r3
 8013782:	6878      	ldr	r0, [r7, #4]
 8013784:	f7ff ff52 	bl	801362c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013788:	f241 3288 	movw	r2, #5000	; 0x1388
 801378c:	2111      	movs	r1, #17
 801378e:	6878      	ldr	r0, [r7, #4]
 8013790:	f000 fa24 	bl	8013bdc <SDMMC_GetCmdResp1>
 8013794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013796:	69fb      	ldr	r3, [r7, #28]
}
 8013798:	4618      	mov	r0, r3
 801379a:	3720      	adds	r7, #32
 801379c:	46bd      	mov	sp, r7
 801379e:	bd80      	pop	{r7, pc}

080137a0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b088      	sub	sp, #32
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
 80137a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80137ae:	2312      	movs	r3, #18
 80137b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80137b2:	2340      	movs	r3, #64	; 0x40
 80137b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80137b6:	2300      	movs	r3, #0
 80137b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80137ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80137be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80137c0:	f107 0308 	add.w	r3, r7, #8
 80137c4:	4619      	mov	r1, r3
 80137c6:	6878      	ldr	r0, [r7, #4]
 80137c8:	f7ff ff30 	bl	801362c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80137cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80137d0:	2112      	movs	r1, #18
 80137d2:	6878      	ldr	r0, [r7, #4]
 80137d4:	f000 fa02 	bl	8013bdc <SDMMC_GetCmdResp1>
 80137d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80137da:	69fb      	ldr	r3, [r7, #28]
}
 80137dc:	4618      	mov	r0, r3
 80137de:	3720      	adds	r7, #32
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd80      	pop	{r7, pc}

080137e4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b088      	sub	sp, #32
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
 80137ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80137f2:	2318      	movs	r3, #24
 80137f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80137f6:	2340      	movs	r3, #64	; 0x40
 80137f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80137fa:	2300      	movs	r3, #0
 80137fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80137fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013802:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013804:	f107 0308 	add.w	r3, r7, #8
 8013808:	4619      	mov	r1, r3
 801380a:	6878      	ldr	r0, [r7, #4]
 801380c:	f7ff ff0e 	bl	801362c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013810:	f241 3288 	movw	r2, #5000	; 0x1388
 8013814:	2118      	movs	r1, #24
 8013816:	6878      	ldr	r0, [r7, #4]
 8013818:	f000 f9e0 	bl	8013bdc <SDMMC_GetCmdResp1>
 801381c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801381e:	69fb      	ldr	r3, [r7, #28]
}
 8013820:	4618      	mov	r0, r3
 8013822:	3720      	adds	r7, #32
 8013824:	46bd      	mov	sp, r7
 8013826:	bd80      	pop	{r7, pc}

08013828 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b088      	sub	sp, #32
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
 8013830:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8013836:	2319      	movs	r3, #25
 8013838:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801383a:	2340      	movs	r3, #64	; 0x40
 801383c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801383e:	2300      	movs	r3, #0
 8013840:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013846:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013848:	f107 0308 	add.w	r3, r7, #8
 801384c:	4619      	mov	r1, r3
 801384e:	6878      	ldr	r0, [r7, #4]
 8013850:	f7ff feec 	bl	801362c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8013854:	f241 3288 	movw	r2, #5000	; 0x1388
 8013858:	2119      	movs	r1, #25
 801385a:	6878      	ldr	r0, [r7, #4]
 801385c:	f000 f9be 	bl	8013bdc <SDMMC_GetCmdResp1>
 8013860:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013862:	69fb      	ldr	r3, [r7, #28]
}
 8013864:	4618      	mov	r0, r3
 8013866:	3720      	adds	r7, #32
 8013868:	46bd      	mov	sp, r7
 801386a:	bd80      	pop	{r7, pc}

0801386c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b088      	sub	sp, #32
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8013874:	2300      	movs	r3, #0
 8013876:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8013878:	230c      	movs	r3, #12
 801387a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801387c:	2340      	movs	r3, #64	; 0x40
 801387e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013880:	2300      	movs	r3, #0
 8013882:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013888:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801388a:	f107 0308 	add.w	r3, r7, #8
 801388e:	4619      	mov	r1, r3
 8013890:	6878      	ldr	r0, [r7, #4]
 8013892:	f7ff fecb 	bl	801362c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8013896:	4a05      	ldr	r2, [pc, #20]	; (80138ac <SDMMC_CmdStopTransfer+0x40>)
 8013898:	210c      	movs	r1, #12
 801389a:	6878      	ldr	r0, [r7, #4]
 801389c:	f000 f99e 	bl	8013bdc <SDMMC_GetCmdResp1>
 80138a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80138a2:	69fb      	ldr	r3, [r7, #28]
}
 80138a4:	4618      	mov	r0, r3
 80138a6:	3720      	adds	r7, #32
 80138a8:	46bd      	mov	sp, r7
 80138aa:	bd80      	pop	{r7, pc}
 80138ac:	05f5e100 	.word	0x05f5e100

080138b0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b08a      	sub	sp, #40	; 0x28
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	60f8      	str	r0, [r7, #12]
 80138b8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80138bc:	683b      	ldr	r3, [r7, #0]
 80138be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80138c0:	2307      	movs	r3, #7
 80138c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80138c4:	2340      	movs	r3, #64	; 0x40
 80138c6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80138c8:	2300      	movs	r3, #0
 80138ca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80138cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80138d0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80138d2:	f107 0310 	add.w	r3, r7, #16
 80138d6:	4619      	mov	r1, r3
 80138d8:	68f8      	ldr	r0, [r7, #12]
 80138da:	f7ff fea7 	bl	801362c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80138de:	f241 3288 	movw	r2, #5000	; 0x1388
 80138e2:	2107      	movs	r1, #7
 80138e4:	68f8      	ldr	r0, [r7, #12]
 80138e6:	f000 f979 	bl	8013bdc <SDMMC_GetCmdResp1>
 80138ea:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80138ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80138ee:	4618      	mov	r0, r3
 80138f0:	3728      	adds	r7, #40	; 0x28
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bd80      	pop	{r7, pc}

080138f6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80138f6:	b580      	push	{r7, lr}
 80138f8:	b088      	sub	sp, #32
 80138fa:	af00      	add	r7, sp, #0
 80138fc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80138fe:	2300      	movs	r3, #0
 8013900:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8013902:	2300      	movs	r3, #0
 8013904:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8013906:	2300      	movs	r3, #0
 8013908:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801390a:	2300      	movs	r3, #0
 801390c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801390e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013912:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013914:	f107 0308 	add.w	r3, r7, #8
 8013918:	4619      	mov	r1, r3
 801391a:	6878      	ldr	r0, [r7, #4]
 801391c:	f7ff fe86 	bl	801362c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f000 f92f 	bl	8013b84 <SDMMC_GetCmdError>
 8013926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013928:	69fb      	ldr	r3, [r7, #28]
}
 801392a:	4618      	mov	r0, r3
 801392c:	3720      	adds	r7, #32
 801392e:	46bd      	mov	sp, r7
 8013930:	bd80      	pop	{r7, pc}

08013932 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8013932:	b580      	push	{r7, lr}
 8013934:	b088      	sub	sp, #32
 8013936:	af00      	add	r7, sp, #0
 8013938:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801393a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801393e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8013940:	2308      	movs	r3, #8
 8013942:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013944:	2340      	movs	r3, #64	; 0x40
 8013946:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013948:	2300      	movs	r3, #0
 801394a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801394c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013950:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013952:	f107 0308 	add.w	r3, r7, #8
 8013956:	4619      	mov	r1, r3
 8013958:	6878      	ldr	r0, [r7, #4]
 801395a:	f7ff fe67 	bl	801362c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801395e:	6878      	ldr	r0, [r7, #4]
 8013960:	f000 fb26 	bl	8013fb0 <SDMMC_GetCmdResp7>
 8013964:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013966:	69fb      	ldr	r3, [r7, #28]
}
 8013968:	4618      	mov	r0, r3
 801396a:	3720      	adds	r7, #32
 801396c:	46bd      	mov	sp, r7
 801396e:	bd80      	pop	{r7, pc}

08013970 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013970:	b580      	push	{r7, lr}
 8013972:	b088      	sub	sp, #32
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
 8013978:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801397a:	683b      	ldr	r3, [r7, #0]
 801397c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801397e:	2337      	movs	r3, #55	; 0x37
 8013980:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013982:	2340      	movs	r3, #64	; 0x40
 8013984:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013986:	2300      	movs	r3, #0
 8013988:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801398a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801398e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013990:	f107 0308 	add.w	r3, r7, #8
 8013994:	4619      	mov	r1, r3
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f7ff fe48 	bl	801362c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801399c:	f241 3288 	movw	r2, #5000	; 0x1388
 80139a0:	2137      	movs	r1, #55	; 0x37
 80139a2:	6878      	ldr	r0, [r7, #4]
 80139a4:	f000 f91a 	bl	8013bdc <SDMMC_GetCmdResp1>
 80139a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80139aa:	69fb      	ldr	r3, [r7, #28]
}
 80139ac:	4618      	mov	r0, r3
 80139ae:	3720      	adds	r7, #32
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd80      	pop	{r7, pc}

080139b4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b088      	sub	sp, #32
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
 80139bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80139be:	683a      	ldr	r2, [r7, #0]
 80139c0:	4b0d      	ldr	r3, [pc, #52]	; (80139f8 <SDMMC_CmdAppOperCommand+0x44>)
 80139c2:	4313      	orrs	r3, r2
 80139c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80139c6:	2329      	movs	r3, #41	; 0x29
 80139c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80139ca:	2340      	movs	r3, #64	; 0x40
 80139cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80139ce:	2300      	movs	r3, #0
 80139d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80139d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80139d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80139d8:	f107 0308 	add.w	r3, r7, #8
 80139dc:	4619      	mov	r1, r3
 80139de:	6878      	ldr	r0, [r7, #4]
 80139e0:	f7ff fe24 	bl	801362c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80139e4:	6878      	ldr	r0, [r7, #4]
 80139e6:	f000 fa2f 	bl	8013e48 <SDMMC_GetCmdResp3>
 80139ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80139ec:	69fb      	ldr	r3, [r7, #28]
}
 80139ee:	4618      	mov	r0, r3
 80139f0:	3720      	adds	r7, #32
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}
 80139f6:	bf00      	nop
 80139f8:	80100000 	.word	0x80100000

080139fc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b088      	sub	sp, #32
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
 8013a04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8013a0a:	2306      	movs	r3, #6
 8013a0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013a0e:	2340      	movs	r3, #64	; 0x40
 8013a10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013a12:	2300      	movs	r3, #0
 8013a14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013a1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013a1c:	f107 0308 	add.w	r3, r7, #8
 8013a20:	4619      	mov	r1, r3
 8013a22:	6878      	ldr	r0, [r7, #4]
 8013a24:	f7ff fe02 	bl	801362c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8013a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8013a2c:	2106      	movs	r1, #6
 8013a2e:	6878      	ldr	r0, [r7, #4]
 8013a30:	f000 f8d4 	bl	8013bdc <SDMMC_GetCmdResp1>
 8013a34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013a36:	69fb      	ldr	r3, [r7, #28]
}
 8013a38:	4618      	mov	r0, r3
 8013a3a:	3720      	adds	r7, #32
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd80      	pop	{r7, pc}

08013a40 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b088      	sub	sp, #32
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8013a48:	2300      	movs	r3, #0
 8013a4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8013a4c:	2333      	movs	r3, #51	; 0x33
 8013a4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013a50:	2340      	movs	r3, #64	; 0x40
 8013a52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013a54:	2300      	movs	r3, #0
 8013a56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013a5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013a5e:	f107 0308 	add.w	r3, r7, #8
 8013a62:	4619      	mov	r1, r3
 8013a64:	6878      	ldr	r0, [r7, #4]
 8013a66:	f7ff fde1 	bl	801362c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8013a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8013a6e:	2133      	movs	r1, #51	; 0x33
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	f000 f8b3 	bl	8013bdc <SDMMC_GetCmdResp1>
 8013a76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013a78:	69fb      	ldr	r3, [r7, #28]
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3720      	adds	r7, #32
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}

08013a82 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8013a82:	b580      	push	{r7, lr}
 8013a84:	b088      	sub	sp, #32
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8013a8e:	2302      	movs	r3, #2
 8013a90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013a92:	23c0      	movs	r3, #192	; 0xc0
 8013a94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013a96:	2300      	movs	r3, #0
 8013a98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013a9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013aa0:	f107 0308 	add.w	r3, r7, #8
 8013aa4:	4619      	mov	r1, r3
 8013aa6:	6878      	ldr	r0, [r7, #4]
 8013aa8:	f7ff fdc0 	bl	801362c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013aac:	6878      	ldr	r0, [r7, #4]
 8013aae:	f000 f983 	bl	8013db8 <SDMMC_GetCmdResp2>
 8013ab2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013ab4:	69fb      	ldr	r3, [r7, #28]
}
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	3720      	adds	r7, #32
 8013aba:	46bd      	mov	sp, r7
 8013abc:	bd80      	pop	{r7, pc}

08013abe <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013abe:	b580      	push	{r7, lr}
 8013ac0:	b088      	sub	sp, #32
 8013ac2:	af00      	add	r7, sp, #0
 8013ac4:	6078      	str	r0, [r7, #4]
 8013ac6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8013ac8:	683b      	ldr	r3, [r7, #0]
 8013aca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8013acc:	2309      	movs	r3, #9
 8013ace:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013ad0:	23c0      	movs	r3, #192	; 0xc0
 8013ad2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013adc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013ade:	f107 0308 	add.w	r3, r7, #8
 8013ae2:	4619      	mov	r1, r3
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f7ff fda1 	bl	801362c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013aea:	6878      	ldr	r0, [r7, #4]
 8013aec:	f000 f964 	bl	8013db8 <SDMMC_GetCmdResp2>
 8013af0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013af2:	69fb      	ldr	r3, [r7, #28]
}
 8013af4:	4618      	mov	r0, r3
 8013af6:	3720      	adds	r7, #32
 8013af8:	46bd      	mov	sp, r7
 8013afa:	bd80      	pop	{r7, pc}

08013afc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b088      	sub	sp, #32
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
 8013b04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8013b06:	2300      	movs	r3, #0
 8013b08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8013b0a:	2303      	movs	r3, #3
 8013b0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013b0e:	2340      	movs	r3, #64	; 0x40
 8013b10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013b12:	2300      	movs	r3, #0
 8013b14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013b1c:	f107 0308 	add.w	r3, r7, #8
 8013b20:	4619      	mov	r1, r3
 8013b22:	6878      	ldr	r0, [r7, #4]
 8013b24:	f7ff fd82 	bl	801362c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8013b28:	683a      	ldr	r2, [r7, #0]
 8013b2a:	2103      	movs	r1, #3
 8013b2c:	6878      	ldr	r0, [r7, #4]
 8013b2e:	f000 f9c9 	bl	8013ec4 <SDMMC_GetCmdResp6>
 8013b32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013b34:	69fb      	ldr	r3, [r7, #28]
}
 8013b36:	4618      	mov	r0, r3
 8013b38:	3720      	adds	r7, #32
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	bd80      	pop	{r7, pc}

08013b3e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013b3e:	b580      	push	{r7, lr}
 8013b40:	b088      	sub	sp, #32
 8013b42:	af00      	add	r7, sp, #0
 8013b44:	6078      	str	r0, [r7, #4]
 8013b46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8013b48:	683b      	ldr	r3, [r7, #0]
 8013b4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8013b4c:	230d      	movs	r3, #13
 8013b4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013b50:	2340      	movs	r3, #64	; 0x40
 8013b52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013b54:	2300      	movs	r3, #0
 8013b56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013b5e:	f107 0308 	add.w	r3, r7, #8
 8013b62:	4619      	mov	r1, r3
 8013b64:	6878      	ldr	r0, [r7, #4]
 8013b66:	f7ff fd61 	bl	801362c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8013b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8013b6e:	210d      	movs	r1, #13
 8013b70:	6878      	ldr	r0, [r7, #4]
 8013b72:	f000 f833 	bl	8013bdc <SDMMC_GetCmdResp1>
 8013b76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013b78:	69fb      	ldr	r3, [r7, #28]
}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	3720      	adds	r7, #32
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bd80      	pop	{r7, pc}
	...

08013b84 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013b84:	b480      	push	{r7}
 8013b86:	b085      	sub	sp, #20
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013b8c:	4b11      	ldr	r3, [pc, #68]	; (8013bd4 <SDMMC_GetCmdError+0x50>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	4a11      	ldr	r2, [pc, #68]	; (8013bd8 <SDMMC_GetCmdError+0x54>)
 8013b92:	fba2 2303 	umull	r2, r3, r2, r3
 8013b96:	0a5b      	lsrs	r3, r3, #9
 8013b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8013b9c:	fb02 f303 	mul.w	r3, r2, r3
 8013ba0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	1e5a      	subs	r2, r3, #1
 8013ba6:	60fa      	str	r2, [r7, #12]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d102      	bne.n	8013bb2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013bac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013bb0:	e009      	b.n	8013bc6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d0f1      	beq.n	8013ba2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	22c5      	movs	r2, #197	; 0xc5
 8013bc2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8013bc4:	2300      	movs	r3, #0
}
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	3714      	adds	r7, #20
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd0:	4770      	bx	lr
 8013bd2:	bf00      	nop
 8013bd4:	20000224 	.word	0x20000224
 8013bd8:	10624dd3 	.word	0x10624dd3

08013bdc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b088      	sub	sp, #32
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	60f8      	str	r0, [r7, #12]
 8013be4:	460b      	mov	r3, r1
 8013be6:	607a      	str	r2, [r7, #4]
 8013be8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013bea:	4b70      	ldr	r3, [pc, #448]	; (8013dac <SDMMC_GetCmdResp1+0x1d0>)
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	4a70      	ldr	r2, [pc, #448]	; (8013db0 <SDMMC_GetCmdResp1+0x1d4>)
 8013bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8013bf4:	0a5a      	lsrs	r2, r3, #9
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	fb02 f303 	mul.w	r3, r2, r3
 8013bfc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8013bfe:	69fb      	ldr	r3, [r7, #28]
 8013c00:	1e5a      	subs	r2, r3, #1
 8013c02:	61fa      	str	r2, [r7, #28]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d102      	bne.n	8013c0e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013c08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013c0c:	e0c9      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c12:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013c14:	69bb      	ldr	r3, [r7, #24]
 8013c16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d0ef      	beq.n	8013bfe <SDMMC_GetCmdResp1+0x22>
 8013c1e:	69bb      	ldr	r3, [r7, #24]
 8013c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d1ea      	bne.n	8013bfe <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c2c:	f003 0304 	and.w	r3, r3, #4
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d004      	beq.n	8013c3e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	2204      	movs	r2, #4
 8013c38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013c3a:	2304      	movs	r3, #4
 8013c3c:	e0b1      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c42:	f003 0301 	and.w	r3, r3, #1
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d004      	beq.n	8013c54 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	2201      	movs	r2, #1
 8013c4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013c50:	2301      	movs	r3, #1
 8013c52:	e0a6      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	22c5      	movs	r2, #197	; 0xc5
 8013c58:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013c5a:	68f8      	ldr	r0, [r7, #12]
 8013c5c:	f7ff fd10 	bl	8013680 <SDMMC_GetCommandResponse>
 8013c60:	4603      	mov	r3, r0
 8013c62:	461a      	mov	r2, r3
 8013c64:	7afb      	ldrb	r3, [r7, #11]
 8013c66:	4293      	cmp	r3, r2
 8013c68:	d001      	beq.n	8013c6e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013c6a:	2301      	movs	r3, #1
 8013c6c:	e099      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013c6e:	2100      	movs	r1, #0
 8013c70:	68f8      	ldr	r0, [r7, #12]
 8013c72:	f7ff fd12 	bl	801369a <SDMMC_GetResponse>
 8013c76:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013c78:	697a      	ldr	r2, [r7, #20]
 8013c7a:	4b4e      	ldr	r3, [pc, #312]	; (8013db4 <SDMMC_GetCmdResp1+0x1d8>)
 8013c7c:	4013      	ands	r3, r2
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d101      	bne.n	8013c86 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8013c82:	2300      	movs	r3, #0
 8013c84:	e08d      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013c86:	697b      	ldr	r3, [r7, #20]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	da02      	bge.n	8013c92 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013c8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013c90:	e087      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013c92:	697b      	ldr	r3, [r7, #20]
 8013c94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d001      	beq.n	8013ca0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013c9c:	2340      	movs	r3, #64	; 0x40
 8013c9e:	e080      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013ca0:	697b      	ldr	r3, [r7, #20]
 8013ca2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d001      	beq.n	8013cae <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013caa:	2380      	movs	r3, #128	; 0x80
 8013cac:	e079      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013cae:	697b      	ldr	r3, [r7, #20]
 8013cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d002      	beq.n	8013cbe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013cbc:	e071      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013cbe:	697b      	ldr	r3, [r7, #20]
 8013cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d002      	beq.n	8013cce <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013ccc:	e069      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013cce:	697b      	ldr	r3, [r7, #20]
 8013cd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d002      	beq.n	8013cde <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013cdc:	e061      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013cde:	697b      	ldr	r3, [r7, #20]
 8013ce0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d002      	beq.n	8013cee <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013ce8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013cec:	e059      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013cee:	697b      	ldr	r3, [r7, #20]
 8013cf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d002      	beq.n	8013cfe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013cfc:	e051      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013cfe:	697b      	ldr	r3, [r7, #20]
 8013d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d002      	beq.n	8013d0e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013d0c:	e049      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013d0e:	697b      	ldr	r3, [r7, #20]
 8013d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d002      	beq.n	8013d1e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013d18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013d1c:	e041      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013d1e:	697b      	ldr	r3, [r7, #20]
 8013d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d002      	beq.n	8013d2e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013d2c:	e039      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013d2e:	697b      	ldr	r3, [r7, #20]
 8013d30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d002      	beq.n	8013d3e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013d38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013d3c:	e031      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013d3e:	697b      	ldr	r3, [r7, #20]
 8013d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d002      	beq.n	8013d4e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013d48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013d4c:	e029      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013d4e:	697b      	ldr	r3, [r7, #20]
 8013d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d002      	beq.n	8013d5e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013d58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013d5c:	e021      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013d5e:	697b      	ldr	r3, [r7, #20]
 8013d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d002      	beq.n	8013d6e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013d68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013d6c:	e019      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013d6e:	697b      	ldr	r3, [r7, #20]
 8013d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d002      	beq.n	8013d7e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013d78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013d7c:	e011      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013d7e:	697b      	ldr	r3, [r7, #20]
 8013d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d002      	beq.n	8013d8e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8013d88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013d8c:	e009      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8013d8e:	697b      	ldr	r3, [r7, #20]
 8013d90:	f003 0308 	and.w	r3, r3, #8
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d002      	beq.n	8013d9e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013d98:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013d9c:	e001      	b.n	8013da2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013d9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	3720      	adds	r7, #32
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}
 8013daa:	bf00      	nop
 8013dac:	20000224 	.word	0x20000224
 8013db0:	10624dd3 	.word	0x10624dd3
 8013db4:	fdffe008 	.word	0xfdffe008

08013db8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8013db8:	b480      	push	{r7}
 8013dba:	b085      	sub	sp, #20
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013dc0:	4b1f      	ldr	r3, [pc, #124]	; (8013e40 <SDMMC_GetCmdResp2+0x88>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	4a1f      	ldr	r2, [pc, #124]	; (8013e44 <SDMMC_GetCmdResp2+0x8c>)
 8013dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8013dca:	0a5b      	lsrs	r3, r3, #9
 8013dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8013dd0:	fb02 f303 	mul.w	r3, r2, r3
 8013dd4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	1e5a      	subs	r2, r3, #1
 8013dda:	60fa      	str	r2, [r7, #12]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d102      	bne.n	8013de6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013de0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013de4:	e026      	b.n	8013e34 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013dec:	68bb      	ldr	r3, [r7, #8]
 8013dee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d0ef      	beq.n	8013dd6 <SDMMC_GetCmdResp2+0x1e>
 8013df6:	68bb      	ldr	r3, [r7, #8]
 8013df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d1ea      	bne.n	8013dd6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e04:	f003 0304 	and.w	r3, r3, #4
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d004      	beq.n	8013e16 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	2204      	movs	r2, #4
 8013e10:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013e12:	2304      	movs	r3, #4
 8013e14:	e00e      	b.n	8013e34 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e1a:	f003 0301 	and.w	r3, r3, #1
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d004      	beq.n	8013e2c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	2201      	movs	r2, #1
 8013e26:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013e28:	2301      	movs	r3, #1
 8013e2a:	e003      	b.n	8013e34 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	22c5      	movs	r2, #197	; 0xc5
 8013e30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013e32:	2300      	movs	r3, #0
}
 8013e34:	4618      	mov	r0, r3
 8013e36:	3714      	adds	r7, #20
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3e:	4770      	bx	lr
 8013e40:	20000224 	.word	0x20000224
 8013e44:	10624dd3 	.word	0x10624dd3

08013e48 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013e48:	b480      	push	{r7}
 8013e4a:	b085      	sub	sp, #20
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013e50:	4b1a      	ldr	r3, [pc, #104]	; (8013ebc <SDMMC_GetCmdResp3+0x74>)
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	4a1a      	ldr	r2, [pc, #104]	; (8013ec0 <SDMMC_GetCmdResp3+0x78>)
 8013e56:	fba2 2303 	umull	r2, r3, r2, r3
 8013e5a:	0a5b      	lsrs	r3, r3, #9
 8013e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013e60:	fb02 f303 	mul.w	r3, r2, r3
 8013e64:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	1e5a      	subs	r2, r3, #1
 8013e6a:	60fa      	str	r2, [r7, #12]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d102      	bne.n	8013e76 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013e70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013e74:	e01b      	b.n	8013eae <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e7a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013e7c:	68bb      	ldr	r3, [r7, #8]
 8013e7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d0ef      	beq.n	8013e66 <SDMMC_GetCmdResp3+0x1e>
 8013e86:	68bb      	ldr	r3, [r7, #8]
 8013e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d1ea      	bne.n	8013e66 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e94:	f003 0304 	and.w	r3, r3, #4
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d004      	beq.n	8013ea6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2204      	movs	r2, #4
 8013ea0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013ea2:	2304      	movs	r3, #4
 8013ea4:	e003      	b.n	8013eae <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	22c5      	movs	r2, #197	; 0xc5
 8013eaa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8013eac:	2300      	movs	r3, #0
}
 8013eae:	4618      	mov	r0, r3
 8013eb0:	3714      	adds	r7, #20
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb8:	4770      	bx	lr
 8013eba:	bf00      	nop
 8013ebc:	20000224 	.word	0x20000224
 8013ec0:	10624dd3 	.word	0x10624dd3

08013ec4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b088      	sub	sp, #32
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	60f8      	str	r0, [r7, #12]
 8013ecc:	460b      	mov	r3, r1
 8013ece:	607a      	str	r2, [r7, #4]
 8013ed0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013ed2:	4b35      	ldr	r3, [pc, #212]	; (8013fa8 <SDMMC_GetCmdResp6+0xe4>)
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	4a35      	ldr	r2, [pc, #212]	; (8013fac <SDMMC_GetCmdResp6+0xe8>)
 8013ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8013edc:	0a5b      	lsrs	r3, r3, #9
 8013ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ee2:	fb02 f303 	mul.w	r3, r2, r3
 8013ee6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8013ee8:	69fb      	ldr	r3, [r7, #28]
 8013eea:	1e5a      	subs	r2, r3, #1
 8013eec:	61fa      	str	r2, [r7, #28]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d102      	bne.n	8013ef8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013ef2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013ef6:	e052      	b.n	8013f9e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013efc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013efe:	69bb      	ldr	r3, [r7, #24]
 8013f00:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d0ef      	beq.n	8013ee8 <SDMMC_GetCmdResp6+0x24>
 8013f08:	69bb      	ldr	r3, [r7, #24]
 8013f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d1ea      	bne.n	8013ee8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f16:	f003 0304 	and.w	r3, r3, #4
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d004      	beq.n	8013f28 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	2204      	movs	r2, #4
 8013f22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013f24:	2304      	movs	r3, #4
 8013f26:	e03a      	b.n	8013f9e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f2c:	f003 0301 	and.w	r3, r3, #1
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d004      	beq.n	8013f3e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	2201      	movs	r2, #1
 8013f38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013f3a:	2301      	movs	r3, #1
 8013f3c:	e02f      	b.n	8013f9e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013f3e:	68f8      	ldr	r0, [r7, #12]
 8013f40:	f7ff fb9e 	bl	8013680 <SDMMC_GetCommandResponse>
 8013f44:	4603      	mov	r3, r0
 8013f46:	461a      	mov	r2, r3
 8013f48:	7afb      	ldrb	r3, [r7, #11]
 8013f4a:	4293      	cmp	r3, r2
 8013f4c:	d001      	beq.n	8013f52 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013f4e:	2301      	movs	r3, #1
 8013f50:	e025      	b.n	8013f9e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	22c5      	movs	r2, #197	; 0xc5
 8013f56:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013f58:	2100      	movs	r1, #0
 8013f5a:	68f8      	ldr	r0, [r7, #12]
 8013f5c:	f7ff fb9d 	bl	801369a <SDMMC_GetResponse>
 8013f60:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8013f62:	697b      	ldr	r3, [r7, #20]
 8013f64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d106      	bne.n	8013f7a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8013f6c:	697b      	ldr	r3, [r7, #20]
 8013f6e:	0c1b      	lsrs	r3, r3, #16
 8013f70:	b29a      	uxth	r2, r3
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8013f76:	2300      	movs	r3, #0
 8013f78:	e011      	b.n	8013f9e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8013f7a:	697b      	ldr	r3, [r7, #20]
 8013f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d002      	beq.n	8013f8a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013f88:	e009      	b.n	8013f9e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8013f8a:	697b      	ldr	r3, [r7, #20]
 8013f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d002      	beq.n	8013f9a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013f98:	e001      	b.n	8013f9e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013f9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	3720      	adds	r7, #32
 8013fa2:	46bd      	mov	sp, r7
 8013fa4:	bd80      	pop	{r7, pc}
 8013fa6:	bf00      	nop
 8013fa8:	20000224 	.word	0x20000224
 8013fac:	10624dd3 	.word	0x10624dd3

08013fb0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013fb0:	b480      	push	{r7}
 8013fb2:	b085      	sub	sp, #20
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013fb8:	4b22      	ldr	r3, [pc, #136]	; (8014044 <SDMMC_GetCmdResp7+0x94>)
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	4a22      	ldr	r2, [pc, #136]	; (8014048 <SDMMC_GetCmdResp7+0x98>)
 8013fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8013fc2:	0a5b      	lsrs	r3, r3, #9
 8013fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8013fc8:	fb02 f303 	mul.w	r3, r2, r3
 8013fcc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	1e5a      	subs	r2, r3, #1
 8013fd2:	60fa      	str	r2, [r7, #12]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d102      	bne.n	8013fde <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013fd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013fdc:	e02c      	b.n	8014038 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013fe2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013fe4:	68bb      	ldr	r3, [r7, #8]
 8013fe6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d0ef      	beq.n	8013fce <SDMMC_GetCmdResp7+0x1e>
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d1ea      	bne.n	8013fce <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ffc:	f003 0304 	and.w	r3, r3, #4
 8014000:	2b00      	cmp	r3, #0
 8014002:	d004      	beq.n	801400e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	2204      	movs	r2, #4
 8014008:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801400a:	2304      	movs	r3, #4
 801400c:	e014      	b.n	8014038 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014012:	f003 0301 	and.w	r3, r3, #1
 8014016:	2b00      	cmp	r3, #0
 8014018:	d004      	beq.n	8014024 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	2201      	movs	r2, #1
 801401e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014020:	2301      	movs	r3, #1
 8014022:	e009      	b.n	8014038 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801402c:	2b00      	cmp	r3, #0
 801402e:	d002      	beq.n	8014036 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	2240      	movs	r2, #64	; 0x40
 8014034:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8014036:	2300      	movs	r3, #0
  
}
 8014038:	4618      	mov	r0, r3
 801403a:	3714      	adds	r7, #20
 801403c:	46bd      	mov	sp, r7
 801403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014042:	4770      	bx	lr
 8014044:	20000224 	.word	0x20000224
 8014048:	10624dd3 	.word	0x10624dd3

0801404c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801404c:	b084      	sub	sp, #16
 801404e:	b580      	push	{r7, lr}
 8014050:	b084      	sub	sp, #16
 8014052:	af00      	add	r7, sp, #0
 8014054:	6078      	str	r0, [r7, #4]
 8014056:	f107 001c 	add.w	r0, r7, #28
 801405a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014060:	2b01      	cmp	r3, #1
 8014062:	d126      	bne.n	80140b2 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014068:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	68da      	ldr	r2, [r3, #12]
 8014074:	4b23      	ldr	r3, [pc, #140]	; (8014104 <USB_CoreInit+0xb8>)
 8014076:	4013      	ands	r3, r2
 8014078:	687a      	ldr	r2, [r7, #4]
 801407a:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	68db      	ldr	r3, [r3, #12]
 8014080:	f043 0210 	orr.w	r2, r3, #16
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	68db      	ldr	r3, [r3, #12]
 801408c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8014094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014096:	2b01      	cmp	r3, #1
 8014098:	d105      	bne.n	80140a6 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	68db      	ldr	r3, [r3, #12]
 801409e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80140a6:	6878      	ldr	r0, [r7, #4]
 80140a8:	f001 fad6 	bl	8015658 <USB_CoreReset>
 80140ac:	4603      	mov	r3, r0
 80140ae:	73fb      	strb	r3, [r7, #15]
 80140b0:	e010      	b.n	80140d4 <USB_CoreInit+0x88>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	68db      	ldr	r3, [r3, #12]
 80140b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80140be:	6878      	ldr	r0, [r7, #4]
 80140c0:	f001 faca 	bl	8015658 <USB_CoreReset>
 80140c4:	4603      	mov	r3, r0
 80140c6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80140d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140d6:	2b01      	cmp	r3, #1
 80140d8:	d10b      	bne.n	80140f2 <USB_CoreInit+0xa6>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	689b      	ldr	r3, [r3, #8]
 80140de:	f043 0206 	orr.w	r2, r3, #6
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	689b      	ldr	r3, [r3, #8]
 80140ea:	f043 0220 	orr.w	r2, r3, #32
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80140f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80140f4:	4618      	mov	r0, r3
 80140f6:	3710      	adds	r7, #16
 80140f8:	46bd      	mov	sp, r7
 80140fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80140fe:	b004      	add	sp, #16
 8014100:	4770      	bx	lr
 8014102:	bf00      	nop
 8014104:	ffbdffbf 	.word	0xffbdffbf

08014108 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8014108:	b480      	push	{r7}
 801410a:	b087      	sub	sp, #28
 801410c:	af00      	add	r7, sp, #0
 801410e:	60f8      	str	r0, [r7, #12]
 8014110:	60b9      	str	r1, [r7, #8]
 8014112:	4613      	mov	r3, r2
 8014114:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8014116:	79fb      	ldrb	r3, [r7, #7]
 8014118:	2b02      	cmp	r3, #2
 801411a:	d165      	bne.n	80141e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801411c:	68bb      	ldr	r3, [r7, #8]
 801411e:	4a41      	ldr	r2, [pc, #260]	; (8014224 <USB_SetTurnaroundTime+0x11c>)
 8014120:	4293      	cmp	r3, r2
 8014122:	d906      	bls.n	8014132 <USB_SetTurnaroundTime+0x2a>
 8014124:	68bb      	ldr	r3, [r7, #8]
 8014126:	4a40      	ldr	r2, [pc, #256]	; (8014228 <USB_SetTurnaroundTime+0x120>)
 8014128:	4293      	cmp	r3, r2
 801412a:	d202      	bcs.n	8014132 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801412c:	230f      	movs	r3, #15
 801412e:	617b      	str	r3, [r7, #20]
 8014130:	e062      	b.n	80141f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014132:	68bb      	ldr	r3, [r7, #8]
 8014134:	4a3c      	ldr	r2, [pc, #240]	; (8014228 <USB_SetTurnaroundTime+0x120>)
 8014136:	4293      	cmp	r3, r2
 8014138:	d306      	bcc.n	8014148 <USB_SetTurnaroundTime+0x40>
 801413a:	68bb      	ldr	r3, [r7, #8]
 801413c:	4a3b      	ldr	r2, [pc, #236]	; (801422c <USB_SetTurnaroundTime+0x124>)
 801413e:	4293      	cmp	r3, r2
 8014140:	d202      	bcs.n	8014148 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8014142:	230e      	movs	r3, #14
 8014144:	617b      	str	r3, [r7, #20]
 8014146:	e057      	b.n	80141f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8014148:	68bb      	ldr	r3, [r7, #8]
 801414a:	4a38      	ldr	r2, [pc, #224]	; (801422c <USB_SetTurnaroundTime+0x124>)
 801414c:	4293      	cmp	r3, r2
 801414e:	d306      	bcc.n	801415e <USB_SetTurnaroundTime+0x56>
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	4a37      	ldr	r2, [pc, #220]	; (8014230 <USB_SetTurnaroundTime+0x128>)
 8014154:	4293      	cmp	r3, r2
 8014156:	d202      	bcs.n	801415e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8014158:	230d      	movs	r3, #13
 801415a:	617b      	str	r3, [r7, #20]
 801415c:	e04c      	b.n	80141f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801415e:	68bb      	ldr	r3, [r7, #8]
 8014160:	4a33      	ldr	r2, [pc, #204]	; (8014230 <USB_SetTurnaroundTime+0x128>)
 8014162:	4293      	cmp	r3, r2
 8014164:	d306      	bcc.n	8014174 <USB_SetTurnaroundTime+0x6c>
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	4a32      	ldr	r2, [pc, #200]	; (8014234 <USB_SetTurnaroundTime+0x12c>)
 801416a:	4293      	cmp	r3, r2
 801416c:	d802      	bhi.n	8014174 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801416e:	230c      	movs	r3, #12
 8014170:	617b      	str	r3, [r7, #20]
 8014172:	e041      	b.n	80141f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8014174:	68bb      	ldr	r3, [r7, #8]
 8014176:	4a2f      	ldr	r2, [pc, #188]	; (8014234 <USB_SetTurnaroundTime+0x12c>)
 8014178:	4293      	cmp	r3, r2
 801417a:	d906      	bls.n	801418a <USB_SetTurnaroundTime+0x82>
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	4a2e      	ldr	r2, [pc, #184]	; (8014238 <USB_SetTurnaroundTime+0x130>)
 8014180:	4293      	cmp	r3, r2
 8014182:	d802      	bhi.n	801418a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8014184:	230b      	movs	r3, #11
 8014186:	617b      	str	r3, [r7, #20]
 8014188:	e036      	b.n	80141f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801418a:	68bb      	ldr	r3, [r7, #8]
 801418c:	4a2a      	ldr	r2, [pc, #168]	; (8014238 <USB_SetTurnaroundTime+0x130>)
 801418e:	4293      	cmp	r3, r2
 8014190:	d906      	bls.n	80141a0 <USB_SetTurnaroundTime+0x98>
 8014192:	68bb      	ldr	r3, [r7, #8]
 8014194:	4a29      	ldr	r2, [pc, #164]	; (801423c <USB_SetTurnaroundTime+0x134>)
 8014196:	4293      	cmp	r3, r2
 8014198:	d802      	bhi.n	80141a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801419a:	230a      	movs	r3, #10
 801419c:	617b      	str	r3, [r7, #20]
 801419e:	e02b      	b.n	80141f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80141a0:	68bb      	ldr	r3, [r7, #8]
 80141a2:	4a26      	ldr	r2, [pc, #152]	; (801423c <USB_SetTurnaroundTime+0x134>)
 80141a4:	4293      	cmp	r3, r2
 80141a6:	d906      	bls.n	80141b6 <USB_SetTurnaroundTime+0xae>
 80141a8:	68bb      	ldr	r3, [r7, #8]
 80141aa:	4a25      	ldr	r2, [pc, #148]	; (8014240 <USB_SetTurnaroundTime+0x138>)
 80141ac:	4293      	cmp	r3, r2
 80141ae:	d202      	bcs.n	80141b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80141b0:	2309      	movs	r3, #9
 80141b2:	617b      	str	r3, [r7, #20]
 80141b4:	e020      	b.n	80141f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80141b6:	68bb      	ldr	r3, [r7, #8]
 80141b8:	4a21      	ldr	r2, [pc, #132]	; (8014240 <USB_SetTurnaroundTime+0x138>)
 80141ba:	4293      	cmp	r3, r2
 80141bc:	d306      	bcc.n	80141cc <USB_SetTurnaroundTime+0xc4>
 80141be:	68bb      	ldr	r3, [r7, #8]
 80141c0:	4a20      	ldr	r2, [pc, #128]	; (8014244 <USB_SetTurnaroundTime+0x13c>)
 80141c2:	4293      	cmp	r3, r2
 80141c4:	d802      	bhi.n	80141cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80141c6:	2308      	movs	r3, #8
 80141c8:	617b      	str	r3, [r7, #20]
 80141ca:	e015      	b.n	80141f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80141cc:	68bb      	ldr	r3, [r7, #8]
 80141ce:	4a1d      	ldr	r2, [pc, #116]	; (8014244 <USB_SetTurnaroundTime+0x13c>)
 80141d0:	4293      	cmp	r3, r2
 80141d2:	d906      	bls.n	80141e2 <USB_SetTurnaroundTime+0xda>
 80141d4:	68bb      	ldr	r3, [r7, #8]
 80141d6:	4a1c      	ldr	r2, [pc, #112]	; (8014248 <USB_SetTurnaroundTime+0x140>)
 80141d8:	4293      	cmp	r3, r2
 80141da:	d202      	bcs.n	80141e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80141dc:	2307      	movs	r3, #7
 80141de:	617b      	str	r3, [r7, #20]
 80141e0:	e00a      	b.n	80141f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80141e2:	2306      	movs	r3, #6
 80141e4:	617b      	str	r3, [r7, #20]
 80141e6:	e007      	b.n	80141f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80141e8:	79fb      	ldrb	r3, [r7, #7]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d102      	bne.n	80141f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80141ee:	2309      	movs	r3, #9
 80141f0:	617b      	str	r3, [r7, #20]
 80141f2:	e001      	b.n	80141f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80141f4:	2309      	movs	r3, #9
 80141f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	68db      	ldr	r3, [r3, #12]
 80141fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	68da      	ldr	r2, [r3, #12]
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	029b      	lsls	r3, r3, #10
 801420c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8014210:	431a      	orrs	r2, r3
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8014216:	2300      	movs	r3, #0
}
 8014218:	4618      	mov	r0, r3
 801421a:	371c      	adds	r7, #28
 801421c:	46bd      	mov	sp, r7
 801421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014222:	4770      	bx	lr
 8014224:	00d8acbf 	.word	0x00d8acbf
 8014228:	00e4e1c0 	.word	0x00e4e1c0
 801422c:	00f42400 	.word	0x00f42400
 8014230:	01067380 	.word	0x01067380
 8014234:	011a499f 	.word	0x011a499f
 8014238:	01312cff 	.word	0x01312cff
 801423c:	014ca43f 	.word	0x014ca43f
 8014240:	016e3600 	.word	0x016e3600
 8014244:	01a6ab1f 	.word	0x01a6ab1f
 8014248:	01e84800 	.word	0x01e84800

0801424c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801424c:	b480      	push	{r7}
 801424e:	b083      	sub	sp, #12
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	689b      	ldr	r3, [r3, #8]
 8014258:	f043 0201 	orr.w	r2, r3, #1
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014260:	2300      	movs	r3, #0
}
 8014262:	4618      	mov	r0, r3
 8014264:	370c      	adds	r7, #12
 8014266:	46bd      	mov	sp, r7
 8014268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801426c:	4770      	bx	lr

0801426e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801426e:	b480      	push	{r7}
 8014270:	b083      	sub	sp, #12
 8014272:	af00      	add	r7, sp, #0
 8014274:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	689b      	ldr	r3, [r3, #8]
 801427a:	f023 0201 	bic.w	r2, r3, #1
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014282:	2300      	movs	r3, #0
}
 8014284:	4618      	mov	r0, r3
 8014286:	370c      	adds	r7, #12
 8014288:	46bd      	mov	sp, r7
 801428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428e:	4770      	bx	lr

08014290 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b082      	sub	sp, #8
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
 8014298:	460b      	mov	r3, r1
 801429a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	68db      	ldr	r3, [r3, #12]
 80142a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80142a8:	78fb      	ldrb	r3, [r7, #3]
 80142aa:	2b01      	cmp	r3, #1
 80142ac:	d106      	bne.n	80142bc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	68db      	ldr	r3, [r3, #12]
 80142b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	60da      	str	r2, [r3, #12]
 80142ba:	e00b      	b.n	80142d4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80142bc:	78fb      	ldrb	r3, [r7, #3]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d106      	bne.n	80142d0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	68db      	ldr	r3, [r3, #12]
 80142c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	60da      	str	r2, [r3, #12]
 80142ce:	e001      	b.n	80142d4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80142d0:	2301      	movs	r3, #1
 80142d2:	e003      	b.n	80142dc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80142d4:	2032      	movs	r0, #50	; 0x32
 80142d6:	f7f4 fde1 	bl	8008e9c <HAL_Delay>

  return HAL_OK;
 80142da:	2300      	movs	r3, #0
}
 80142dc:	4618      	mov	r0, r3
 80142de:	3708      	adds	r7, #8
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd80      	pop	{r7, pc}

080142e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80142e4:	b084      	sub	sp, #16
 80142e6:	b580      	push	{r7, lr}
 80142e8:	b086      	sub	sp, #24
 80142ea:	af00      	add	r7, sp, #0
 80142ec:	6078      	str	r0, [r7, #4]
 80142ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80142f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80142f6:	2300      	movs	r3, #0
 80142f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80142fe:	2300      	movs	r3, #0
 8014300:	613b      	str	r3, [r7, #16]
 8014302:	e009      	b.n	8014318 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8014304:	687a      	ldr	r2, [r7, #4]
 8014306:	693b      	ldr	r3, [r7, #16]
 8014308:	3340      	adds	r3, #64	; 0x40
 801430a:	009b      	lsls	r3, r3, #2
 801430c:	4413      	add	r3, r2
 801430e:	2200      	movs	r2, #0
 8014310:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8014312:	693b      	ldr	r3, [r7, #16]
 8014314:	3301      	adds	r3, #1
 8014316:	613b      	str	r3, [r7, #16]
 8014318:	693b      	ldr	r3, [r7, #16]
 801431a:	2b0e      	cmp	r3, #14
 801431c:	d9f2      	bls.n	8014304 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801431e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014320:	2b00      	cmp	r3, #0
 8014322:	d11c      	bne.n	801435e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801432a:	685b      	ldr	r3, [r3, #4]
 801432c:	68fa      	ldr	r2, [r7, #12]
 801432e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014332:	f043 0302 	orr.w	r3, r3, #2
 8014336:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801433c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	601a      	str	r2, [r3, #0]
 801435c:	e005      	b.n	801436a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014362:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014370:	461a      	mov	r2, r3
 8014372:	2300      	movs	r3, #0
 8014374:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801437c:	4619      	mov	r1, r3
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014384:	461a      	mov	r2, r3
 8014386:	680b      	ldr	r3, [r1, #0]
 8014388:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801438a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801438c:	2b01      	cmp	r3, #1
 801438e:	d10c      	bne.n	80143aa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014392:	2b00      	cmp	r3, #0
 8014394:	d104      	bne.n	80143a0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8014396:	2100      	movs	r1, #0
 8014398:	6878      	ldr	r0, [r7, #4]
 801439a:	f000 f959 	bl	8014650 <USB_SetDevSpeed>
 801439e:	e018      	b.n	80143d2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80143a0:	2101      	movs	r1, #1
 80143a2:	6878      	ldr	r0, [r7, #4]
 80143a4:	f000 f954 	bl	8014650 <USB_SetDevSpeed>
 80143a8:	e013      	b.n	80143d2 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80143aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143ac:	2b03      	cmp	r3, #3
 80143ae:	d10c      	bne.n	80143ca <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80143b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d104      	bne.n	80143c0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80143b6:	2100      	movs	r1, #0
 80143b8:	6878      	ldr	r0, [r7, #4]
 80143ba:	f000 f949 	bl	8014650 <USB_SetDevSpeed>
 80143be:	e008      	b.n	80143d2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80143c0:	2101      	movs	r1, #1
 80143c2:	6878      	ldr	r0, [r7, #4]
 80143c4:	f000 f944 	bl	8014650 <USB_SetDevSpeed>
 80143c8:	e003      	b.n	80143d2 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80143ca:	2103      	movs	r1, #3
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f000 f93f 	bl	8014650 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80143d2:	2110      	movs	r1, #16
 80143d4:	6878      	ldr	r0, [r7, #4]
 80143d6:	f000 f8f3 	bl	80145c0 <USB_FlushTxFifo>
 80143da:	4603      	mov	r3, r0
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d001      	beq.n	80143e4 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80143e0:	2301      	movs	r3, #1
 80143e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80143e4:	6878      	ldr	r0, [r7, #4]
 80143e6:	f000 f911 	bl	801460c <USB_FlushRxFifo>
 80143ea:	4603      	mov	r3, r0
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d001      	beq.n	80143f4 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80143f0:	2301      	movs	r3, #1
 80143f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80143fa:	461a      	mov	r2, r3
 80143fc:	2300      	movs	r3, #0
 80143fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014406:	461a      	mov	r2, r3
 8014408:	2300      	movs	r3, #0
 801440a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014412:	461a      	mov	r2, r3
 8014414:	2300      	movs	r3, #0
 8014416:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014418:	2300      	movs	r3, #0
 801441a:	613b      	str	r3, [r7, #16]
 801441c:	e043      	b.n	80144a6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801441e:	693b      	ldr	r3, [r7, #16]
 8014420:	015a      	lsls	r2, r3, #5
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	4413      	add	r3, r2
 8014426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014434:	d118      	bne.n	8014468 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8014436:	693b      	ldr	r3, [r7, #16]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d10a      	bne.n	8014452 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801443c:	693b      	ldr	r3, [r7, #16]
 801443e:	015a      	lsls	r2, r3, #5
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	4413      	add	r3, r2
 8014444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014448:	461a      	mov	r2, r3
 801444a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801444e:	6013      	str	r3, [r2, #0]
 8014450:	e013      	b.n	801447a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8014452:	693b      	ldr	r3, [r7, #16]
 8014454:	015a      	lsls	r2, r3, #5
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	4413      	add	r3, r2
 801445a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801445e:	461a      	mov	r2, r3
 8014460:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8014464:	6013      	str	r3, [r2, #0]
 8014466:	e008      	b.n	801447a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8014468:	693b      	ldr	r3, [r7, #16]
 801446a:	015a      	lsls	r2, r3, #5
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	4413      	add	r3, r2
 8014470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014474:	461a      	mov	r2, r3
 8014476:	2300      	movs	r3, #0
 8014478:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801447a:	693b      	ldr	r3, [r7, #16]
 801447c:	015a      	lsls	r2, r3, #5
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	4413      	add	r3, r2
 8014482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014486:	461a      	mov	r2, r3
 8014488:	2300      	movs	r3, #0
 801448a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801448c:	693b      	ldr	r3, [r7, #16]
 801448e:	015a      	lsls	r2, r3, #5
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	4413      	add	r3, r2
 8014494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014498:	461a      	mov	r2, r3
 801449a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801449e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80144a0:	693b      	ldr	r3, [r7, #16]
 80144a2:	3301      	adds	r3, #1
 80144a4:	613b      	str	r3, [r7, #16]
 80144a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144a8:	693a      	ldr	r2, [r7, #16]
 80144aa:	429a      	cmp	r2, r3
 80144ac:	d3b7      	bcc.n	801441e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80144ae:	2300      	movs	r3, #0
 80144b0:	613b      	str	r3, [r7, #16]
 80144b2:	e043      	b.n	801453c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80144b4:	693b      	ldr	r3, [r7, #16]
 80144b6:	015a      	lsls	r2, r3, #5
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	4413      	add	r3, r2
 80144bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80144c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80144ca:	d118      	bne.n	80144fe <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80144cc:	693b      	ldr	r3, [r7, #16]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d10a      	bne.n	80144e8 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80144d2:	693b      	ldr	r3, [r7, #16]
 80144d4:	015a      	lsls	r2, r3, #5
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	4413      	add	r3, r2
 80144da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144de:	461a      	mov	r2, r3
 80144e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80144e4:	6013      	str	r3, [r2, #0]
 80144e6:	e013      	b.n	8014510 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80144e8:	693b      	ldr	r3, [r7, #16]
 80144ea:	015a      	lsls	r2, r3, #5
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	4413      	add	r3, r2
 80144f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144f4:	461a      	mov	r2, r3
 80144f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80144fa:	6013      	str	r3, [r2, #0]
 80144fc:	e008      	b.n	8014510 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80144fe:	693b      	ldr	r3, [r7, #16]
 8014500:	015a      	lsls	r2, r3, #5
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	4413      	add	r3, r2
 8014506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801450a:	461a      	mov	r2, r3
 801450c:	2300      	movs	r3, #0
 801450e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014510:	693b      	ldr	r3, [r7, #16]
 8014512:	015a      	lsls	r2, r3, #5
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	4413      	add	r3, r2
 8014518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801451c:	461a      	mov	r2, r3
 801451e:	2300      	movs	r3, #0
 8014520:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014522:	693b      	ldr	r3, [r7, #16]
 8014524:	015a      	lsls	r2, r3, #5
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	4413      	add	r3, r2
 801452a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801452e:	461a      	mov	r2, r3
 8014530:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8014534:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014536:	693b      	ldr	r3, [r7, #16]
 8014538:	3301      	adds	r3, #1
 801453a:	613b      	str	r3, [r7, #16]
 801453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801453e:	693a      	ldr	r2, [r7, #16]
 8014540:	429a      	cmp	r2, r3
 8014542:	d3b7      	bcc.n	80144b4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801454a:	691b      	ldr	r3, [r3, #16]
 801454c:	68fa      	ldr	r2, [r7, #12]
 801454e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014552:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014556:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	2200      	movs	r2, #0
 801455c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8014564:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014568:	2b00      	cmp	r3, #0
 801456a:	d105      	bne.n	8014578 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	699b      	ldr	r3, [r3, #24]
 8014570:	f043 0210 	orr.w	r2, r3, #16
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	699a      	ldr	r2, [r3, #24]
 801457c:	4b0e      	ldr	r3, [pc, #56]	; (80145b8 <USB_DevInit+0x2d4>)
 801457e:	4313      	orrs	r3, r2
 8014580:	687a      	ldr	r2, [r7, #4]
 8014582:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8014584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014586:	2b00      	cmp	r3, #0
 8014588:	d005      	beq.n	8014596 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	699b      	ldr	r3, [r3, #24]
 801458e:	f043 0208 	orr.w	r2, r3, #8
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8014596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014598:	2b01      	cmp	r3, #1
 801459a:	d105      	bne.n	80145a8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	699a      	ldr	r2, [r3, #24]
 80145a0:	4b06      	ldr	r3, [pc, #24]	; (80145bc <USB_DevInit+0x2d8>)
 80145a2:	4313      	orrs	r3, r2
 80145a4:	687a      	ldr	r2, [r7, #4]
 80145a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80145a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80145aa:	4618      	mov	r0, r3
 80145ac:	3718      	adds	r7, #24
 80145ae:	46bd      	mov	sp, r7
 80145b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80145b4:	b004      	add	sp, #16
 80145b6:	4770      	bx	lr
 80145b8:	803c3800 	.word	0x803c3800
 80145bc:	40000004 	.word	0x40000004

080145c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80145c0:	b480      	push	{r7}
 80145c2:	b085      	sub	sp, #20
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
 80145c8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80145ca:	2300      	movs	r3, #0
 80145cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80145ce:	683b      	ldr	r3, [r7, #0]
 80145d0:	019b      	lsls	r3, r3, #6
 80145d2:	f043 0220 	orr.w	r2, r3, #32
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	3301      	adds	r3, #1
 80145de:	60fb      	str	r3, [r7, #12]
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	4a09      	ldr	r2, [pc, #36]	; (8014608 <USB_FlushTxFifo+0x48>)
 80145e4:	4293      	cmp	r3, r2
 80145e6:	d901      	bls.n	80145ec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80145e8:	2303      	movs	r3, #3
 80145ea:	e006      	b.n	80145fa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	691b      	ldr	r3, [r3, #16]
 80145f0:	f003 0320 	and.w	r3, r3, #32
 80145f4:	2b20      	cmp	r3, #32
 80145f6:	d0f0      	beq.n	80145da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80145f8:	2300      	movs	r3, #0
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	3714      	adds	r7, #20
 80145fe:	46bd      	mov	sp, r7
 8014600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014604:	4770      	bx	lr
 8014606:	bf00      	nop
 8014608:	00030d40 	.word	0x00030d40

0801460c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801460c:	b480      	push	{r7}
 801460e:	b085      	sub	sp, #20
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8014614:	2300      	movs	r3, #0
 8014616:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	2210      	movs	r2, #16
 801461c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	3301      	adds	r3, #1
 8014622:	60fb      	str	r3, [r7, #12]
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	4a09      	ldr	r2, [pc, #36]	; (801464c <USB_FlushRxFifo+0x40>)
 8014628:	4293      	cmp	r3, r2
 801462a:	d901      	bls.n	8014630 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 801462c:	2303      	movs	r3, #3
 801462e:	e006      	b.n	801463e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	691b      	ldr	r3, [r3, #16]
 8014634:	f003 0310 	and.w	r3, r3, #16
 8014638:	2b10      	cmp	r3, #16
 801463a:	d0f0      	beq.n	801461e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801463c:	2300      	movs	r3, #0
}
 801463e:	4618      	mov	r0, r3
 8014640:	3714      	adds	r7, #20
 8014642:	46bd      	mov	sp, r7
 8014644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014648:	4770      	bx	lr
 801464a:	bf00      	nop
 801464c:	00030d40 	.word	0x00030d40

08014650 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8014650:	b480      	push	{r7}
 8014652:	b085      	sub	sp, #20
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
 8014658:	460b      	mov	r3, r1
 801465a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014666:	681a      	ldr	r2, [r3, #0]
 8014668:	78fb      	ldrb	r3, [r7, #3]
 801466a:	68f9      	ldr	r1, [r7, #12]
 801466c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014670:	4313      	orrs	r3, r2
 8014672:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8014674:	2300      	movs	r3, #0
}
 8014676:	4618      	mov	r0, r3
 8014678:	3714      	adds	r7, #20
 801467a:	46bd      	mov	sp, r7
 801467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014680:	4770      	bx	lr

08014682 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8014682:	b480      	push	{r7}
 8014684:	b087      	sub	sp, #28
 8014686:	af00      	add	r7, sp, #0
 8014688:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801468e:	693b      	ldr	r3, [r7, #16]
 8014690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014694:	689b      	ldr	r3, [r3, #8]
 8014696:	f003 0306 	and.w	r3, r3, #6
 801469a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d102      	bne.n	80146a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80146a2:	2300      	movs	r3, #0
 80146a4:	75fb      	strb	r3, [r7, #23]
 80146a6:	e00a      	b.n	80146be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	2b02      	cmp	r3, #2
 80146ac:	d002      	beq.n	80146b4 <USB_GetDevSpeed+0x32>
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	2b06      	cmp	r3, #6
 80146b2:	d102      	bne.n	80146ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80146b4:	2302      	movs	r3, #2
 80146b6:	75fb      	strb	r3, [r7, #23]
 80146b8:	e001      	b.n	80146be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80146ba:	230f      	movs	r3, #15
 80146bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80146be:	7dfb      	ldrb	r3, [r7, #23]
}
 80146c0:	4618      	mov	r0, r3
 80146c2:	371c      	adds	r7, #28
 80146c4:	46bd      	mov	sp, r7
 80146c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ca:	4770      	bx	lr

080146cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80146cc:	b480      	push	{r7}
 80146ce:	b085      	sub	sp, #20
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
 80146d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80146da:	683b      	ldr	r3, [r7, #0]
 80146dc:	781b      	ldrb	r3, [r3, #0]
 80146de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80146e0:	683b      	ldr	r3, [r7, #0]
 80146e2:	785b      	ldrb	r3, [r3, #1]
 80146e4:	2b01      	cmp	r3, #1
 80146e6:	d139      	bne.n	801475c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80146ee:	69da      	ldr	r2, [r3, #28]
 80146f0:	683b      	ldr	r3, [r7, #0]
 80146f2:	781b      	ldrb	r3, [r3, #0]
 80146f4:	f003 030f 	and.w	r3, r3, #15
 80146f8:	2101      	movs	r1, #1
 80146fa:	fa01 f303 	lsl.w	r3, r1, r3
 80146fe:	b29b      	uxth	r3, r3
 8014700:	68f9      	ldr	r1, [r7, #12]
 8014702:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014706:	4313      	orrs	r3, r2
 8014708:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801470a:	68bb      	ldr	r3, [r7, #8]
 801470c:	015a      	lsls	r2, r3, #5
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	4413      	add	r3, r2
 8014712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801471c:	2b00      	cmp	r3, #0
 801471e:	d153      	bne.n	80147c8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014720:	68bb      	ldr	r3, [r7, #8]
 8014722:	015a      	lsls	r2, r3, #5
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	4413      	add	r3, r2
 8014728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801472c:	681a      	ldr	r2, [r3, #0]
 801472e:	683b      	ldr	r3, [r7, #0]
 8014730:	689b      	ldr	r3, [r3, #8]
 8014732:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	78db      	ldrb	r3, [r3, #3]
 801473a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801473c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801473e:	68bb      	ldr	r3, [r7, #8]
 8014740:	059b      	lsls	r3, r3, #22
 8014742:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014744:	431a      	orrs	r2, r3
 8014746:	68bb      	ldr	r3, [r7, #8]
 8014748:	0159      	lsls	r1, r3, #5
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	440b      	add	r3, r1
 801474e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014752:	4619      	mov	r1, r3
 8014754:	4b20      	ldr	r3, [pc, #128]	; (80147d8 <USB_ActivateEndpoint+0x10c>)
 8014756:	4313      	orrs	r3, r2
 8014758:	600b      	str	r3, [r1, #0]
 801475a:	e035      	b.n	80147c8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014762:	69da      	ldr	r2, [r3, #28]
 8014764:	683b      	ldr	r3, [r7, #0]
 8014766:	781b      	ldrb	r3, [r3, #0]
 8014768:	f003 030f 	and.w	r3, r3, #15
 801476c:	2101      	movs	r1, #1
 801476e:	fa01 f303 	lsl.w	r3, r1, r3
 8014772:	041b      	lsls	r3, r3, #16
 8014774:	68f9      	ldr	r1, [r7, #12]
 8014776:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801477a:	4313      	orrs	r3, r2
 801477c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801477e:	68bb      	ldr	r3, [r7, #8]
 8014780:	015a      	lsls	r2, r3, #5
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	4413      	add	r3, r2
 8014786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014790:	2b00      	cmp	r3, #0
 8014792:	d119      	bne.n	80147c8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014794:	68bb      	ldr	r3, [r7, #8]
 8014796:	015a      	lsls	r2, r3, #5
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	4413      	add	r3, r2
 801479c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147a0:	681a      	ldr	r2, [r3, #0]
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	689b      	ldr	r3, [r3, #8]
 80147a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80147aa:	683b      	ldr	r3, [r7, #0]
 80147ac:	78db      	ldrb	r3, [r3, #3]
 80147ae:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80147b0:	430b      	orrs	r3, r1
 80147b2:	431a      	orrs	r2, r3
 80147b4:	68bb      	ldr	r3, [r7, #8]
 80147b6:	0159      	lsls	r1, r3, #5
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	440b      	add	r3, r1
 80147bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147c0:	4619      	mov	r1, r3
 80147c2:	4b05      	ldr	r3, [pc, #20]	; (80147d8 <USB_ActivateEndpoint+0x10c>)
 80147c4:	4313      	orrs	r3, r2
 80147c6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80147c8:	2300      	movs	r3, #0
}
 80147ca:	4618      	mov	r0, r3
 80147cc:	3714      	adds	r7, #20
 80147ce:	46bd      	mov	sp, r7
 80147d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d4:	4770      	bx	lr
 80147d6:	bf00      	nop
 80147d8:	10008000 	.word	0x10008000

080147dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80147dc:	b480      	push	{r7}
 80147de:	b085      	sub	sp, #20
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
 80147e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	781b      	ldrb	r3, [r3, #0]
 80147ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80147f0:	683b      	ldr	r3, [r7, #0]
 80147f2:	785b      	ldrb	r3, [r3, #1]
 80147f4:	2b01      	cmp	r3, #1
 80147f6:	d161      	bne.n	80148bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80147f8:	68bb      	ldr	r3, [r7, #8]
 80147fa:	015a      	lsls	r2, r3, #5
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	4413      	add	r3, r2
 8014800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801480a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801480e:	d11f      	bne.n	8014850 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	015a      	lsls	r2, r3, #5
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	4413      	add	r3, r2
 8014818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	68ba      	ldr	r2, [r7, #8]
 8014820:	0151      	lsls	r1, r2, #5
 8014822:	68fa      	ldr	r2, [r7, #12]
 8014824:	440a      	add	r2, r1
 8014826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801482a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801482e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014830:	68bb      	ldr	r3, [r7, #8]
 8014832:	015a      	lsls	r2, r3, #5
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	4413      	add	r3, r2
 8014838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	68ba      	ldr	r2, [r7, #8]
 8014840:	0151      	lsls	r1, r2, #5
 8014842:	68fa      	ldr	r2, [r7, #12]
 8014844:	440a      	add	r2, r1
 8014846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801484a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801484e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014858:	683b      	ldr	r3, [r7, #0]
 801485a:	781b      	ldrb	r3, [r3, #0]
 801485c:	f003 030f 	and.w	r3, r3, #15
 8014860:	2101      	movs	r1, #1
 8014862:	fa01 f303 	lsl.w	r3, r1, r3
 8014866:	b29b      	uxth	r3, r3
 8014868:	43db      	mvns	r3, r3
 801486a:	68f9      	ldr	r1, [r7, #12]
 801486c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014870:	4013      	ands	r3, r2
 8014872:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801487a:	69da      	ldr	r2, [r3, #28]
 801487c:	683b      	ldr	r3, [r7, #0]
 801487e:	781b      	ldrb	r3, [r3, #0]
 8014880:	f003 030f 	and.w	r3, r3, #15
 8014884:	2101      	movs	r1, #1
 8014886:	fa01 f303 	lsl.w	r3, r1, r3
 801488a:	b29b      	uxth	r3, r3
 801488c:	43db      	mvns	r3, r3
 801488e:	68f9      	ldr	r1, [r7, #12]
 8014890:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014894:	4013      	ands	r3, r2
 8014896:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	015a      	lsls	r2, r3, #5
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	4413      	add	r3, r2
 80148a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80148a4:	681a      	ldr	r2, [r3, #0]
 80148a6:	68bb      	ldr	r3, [r7, #8]
 80148a8:	0159      	lsls	r1, r3, #5
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	440b      	add	r3, r1
 80148ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80148b2:	4619      	mov	r1, r3
 80148b4:	4b35      	ldr	r3, [pc, #212]	; (801498c <USB_DeactivateEndpoint+0x1b0>)
 80148b6:	4013      	ands	r3, r2
 80148b8:	600b      	str	r3, [r1, #0]
 80148ba:	e060      	b.n	801497e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80148bc:	68bb      	ldr	r3, [r7, #8]
 80148be:	015a      	lsls	r2, r3, #5
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	4413      	add	r3, r2
 80148c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80148ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80148d2:	d11f      	bne.n	8014914 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80148d4:	68bb      	ldr	r3, [r7, #8]
 80148d6:	015a      	lsls	r2, r3, #5
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	4413      	add	r3, r2
 80148dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	68ba      	ldr	r2, [r7, #8]
 80148e4:	0151      	lsls	r1, r2, #5
 80148e6:	68fa      	ldr	r2, [r7, #12]
 80148e8:	440a      	add	r2, r1
 80148ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80148ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80148f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80148f4:	68bb      	ldr	r3, [r7, #8]
 80148f6:	015a      	lsls	r2, r3, #5
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	4413      	add	r3, r2
 80148fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	68ba      	ldr	r2, [r7, #8]
 8014904:	0151      	lsls	r1, r2, #5
 8014906:	68fa      	ldr	r2, [r7, #12]
 8014908:	440a      	add	r2, r1
 801490a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801490e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014912:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801491a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801491c:	683b      	ldr	r3, [r7, #0]
 801491e:	781b      	ldrb	r3, [r3, #0]
 8014920:	f003 030f 	and.w	r3, r3, #15
 8014924:	2101      	movs	r1, #1
 8014926:	fa01 f303 	lsl.w	r3, r1, r3
 801492a:	041b      	lsls	r3, r3, #16
 801492c:	43db      	mvns	r3, r3
 801492e:	68f9      	ldr	r1, [r7, #12]
 8014930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014934:	4013      	ands	r3, r2
 8014936:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801493e:	69da      	ldr	r2, [r3, #28]
 8014940:	683b      	ldr	r3, [r7, #0]
 8014942:	781b      	ldrb	r3, [r3, #0]
 8014944:	f003 030f 	and.w	r3, r3, #15
 8014948:	2101      	movs	r1, #1
 801494a:	fa01 f303 	lsl.w	r3, r1, r3
 801494e:	041b      	lsls	r3, r3, #16
 8014950:	43db      	mvns	r3, r3
 8014952:	68f9      	ldr	r1, [r7, #12]
 8014954:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014958:	4013      	ands	r3, r2
 801495a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	015a      	lsls	r2, r3, #5
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	4413      	add	r3, r2
 8014964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014968:	681a      	ldr	r2, [r3, #0]
 801496a:	68bb      	ldr	r3, [r7, #8]
 801496c:	0159      	lsls	r1, r3, #5
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	440b      	add	r3, r1
 8014972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014976:	4619      	mov	r1, r3
 8014978:	4b05      	ldr	r3, [pc, #20]	; (8014990 <USB_DeactivateEndpoint+0x1b4>)
 801497a:	4013      	ands	r3, r2
 801497c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801497e:	2300      	movs	r3, #0
}
 8014980:	4618      	mov	r0, r3
 8014982:	3714      	adds	r7, #20
 8014984:	46bd      	mov	sp, r7
 8014986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498a:	4770      	bx	lr
 801498c:	ec337800 	.word	0xec337800
 8014990:	eff37800 	.word	0xeff37800

08014994 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b08a      	sub	sp, #40	; 0x28
 8014998:	af02      	add	r7, sp, #8
 801499a:	60f8      	str	r0, [r7, #12]
 801499c:	60b9      	str	r1, [r7, #8]
 801499e:	4613      	mov	r3, r2
 80149a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80149a6:	68bb      	ldr	r3, [r7, #8]
 80149a8:	781b      	ldrb	r3, [r3, #0]
 80149aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80149ac:	68bb      	ldr	r3, [r7, #8]
 80149ae:	785b      	ldrb	r3, [r3, #1]
 80149b0:	2b01      	cmp	r3, #1
 80149b2:	f040 8163 	bne.w	8014c7c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80149b6:	68bb      	ldr	r3, [r7, #8]
 80149b8:	695b      	ldr	r3, [r3, #20]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d132      	bne.n	8014a24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80149be:	69bb      	ldr	r3, [r7, #24]
 80149c0:	015a      	lsls	r2, r3, #5
 80149c2:	69fb      	ldr	r3, [r7, #28]
 80149c4:	4413      	add	r3, r2
 80149c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80149ca:	691a      	ldr	r2, [r3, #16]
 80149cc:	69bb      	ldr	r3, [r7, #24]
 80149ce:	0159      	lsls	r1, r3, #5
 80149d0:	69fb      	ldr	r3, [r7, #28]
 80149d2:	440b      	add	r3, r1
 80149d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80149d8:	4619      	mov	r1, r3
 80149da:	4ba5      	ldr	r3, [pc, #660]	; (8014c70 <USB_EPStartXfer+0x2dc>)
 80149dc:	4013      	ands	r3, r2
 80149de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80149e0:	69bb      	ldr	r3, [r7, #24]
 80149e2:	015a      	lsls	r2, r3, #5
 80149e4:	69fb      	ldr	r3, [r7, #28]
 80149e6:	4413      	add	r3, r2
 80149e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80149ec:	691b      	ldr	r3, [r3, #16]
 80149ee:	69ba      	ldr	r2, [r7, #24]
 80149f0:	0151      	lsls	r1, r2, #5
 80149f2:	69fa      	ldr	r2, [r7, #28]
 80149f4:	440a      	add	r2, r1
 80149f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80149fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80149fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014a00:	69bb      	ldr	r3, [r7, #24]
 8014a02:	015a      	lsls	r2, r3, #5
 8014a04:	69fb      	ldr	r3, [r7, #28]
 8014a06:	4413      	add	r3, r2
 8014a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a0c:	691a      	ldr	r2, [r3, #16]
 8014a0e:	69bb      	ldr	r3, [r7, #24]
 8014a10:	0159      	lsls	r1, r3, #5
 8014a12:	69fb      	ldr	r3, [r7, #28]
 8014a14:	440b      	add	r3, r1
 8014a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a1a:	4619      	mov	r1, r3
 8014a1c:	4b95      	ldr	r3, [pc, #596]	; (8014c74 <USB_EPStartXfer+0x2e0>)
 8014a1e:	4013      	ands	r3, r2
 8014a20:	610b      	str	r3, [r1, #16]
 8014a22:	e074      	b.n	8014b0e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014a24:	69bb      	ldr	r3, [r7, #24]
 8014a26:	015a      	lsls	r2, r3, #5
 8014a28:	69fb      	ldr	r3, [r7, #28]
 8014a2a:	4413      	add	r3, r2
 8014a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a30:	691a      	ldr	r2, [r3, #16]
 8014a32:	69bb      	ldr	r3, [r7, #24]
 8014a34:	0159      	lsls	r1, r3, #5
 8014a36:	69fb      	ldr	r3, [r7, #28]
 8014a38:	440b      	add	r3, r1
 8014a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a3e:	4619      	mov	r1, r3
 8014a40:	4b8c      	ldr	r3, [pc, #560]	; (8014c74 <USB_EPStartXfer+0x2e0>)
 8014a42:	4013      	ands	r3, r2
 8014a44:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014a46:	69bb      	ldr	r3, [r7, #24]
 8014a48:	015a      	lsls	r2, r3, #5
 8014a4a:	69fb      	ldr	r3, [r7, #28]
 8014a4c:	4413      	add	r3, r2
 8014a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a52:	691a      	ldr	r2, [r3, #16]
 8014a54:	69bb      	ldr	r3, [r7, #24]
 8014a56:	0159      	lsls	r1, r3, #5
 8014a58:	69fb      	ldr	r3, [r7, #28]
 8014a5a:	440b      	add	r3, r1
 8014a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a60:	4619      	mov	r1, r3
 8014a62:	4b83      	ldr	r3, [pc, #524]	; (8014c70 <USB_EPStartXfer+0x2dc>)
 8014a64:	4013      	ands	r3, r2
 8014a66:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014a68:	69bb      	ldr	r3, [r7, #24]
 8014a6a:	015a      	lsls	r2, r3, #5
 8014a6c:	69fb      	ldr	r3, [r7, #28]
 8014a6e:	4413      	add	r3, r2
 8014a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a74:	691a      	ldr	r2, [r3, #16]
 8014a76:	68bb      	ldr	r3, [r7, #8]
 8014a78:	6959      	ldr	r1, [r3, #20]
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	689b      	ldr	r3, [r3, #8]
 8014a7e:	440b      	add	r3, r1
 8014a80:	1e59      	subs	r1, r3, #1
 8014a82:	68bb      	ldr	r3, [r7, #8]
 8014a84:	689b      	ldr	r3, [r3, #8]
 8014a86:	fbb1 f3f3 	udiv	r3, r1, r3
 8014a8a:	04d9      	lsls	r1, r3, #19
 8014a8c:	4b7a      	ldr	r3, [pc, #488]	; (8014c78 <USB_EPStartXfer+0x2e4>)
 8014a8e:	400b      	ands	r3, r1
 8014a90:	69b9      	ldr	r1, [r7, #24]
 8014a92:	0148      	lsls	r0, r1, #5
 8014a94:	69f9      	ldr	r1, [r7, #28]
 8014a96:	4401      	add	r1, r0
 8014a98:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014a9c:	4313      	orrs	r3, r2
 8014a9e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014aa0:	69bb      	ldr	r3, [r7, #24]
 8014aa2:	015a      	lsls	r2, r3, #5
 8014aa4:	69fb      	ldr	r3, [r7, #28]
 8014aa6:	4413      	add	r3, r2
 8014aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014aac:	691a      	ldr	r2, [r3, #16]
 8014aae:	68bb      	ldr	r3, [r7, #8]
 8014ab0:	695b      	ldr	r3, [r3, #20]
 8014ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014ab6:	69b9      	ldr	r1, [r7, #24]
 8014ab8:	0148      	lsls	r0, r1, #5
 8014aba:	69f9      	ldr	r1, [r7, #28]
 8014abc:	4401      	add	r1, r0
 8014abe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014ac2:	4313      	orrs	r3, r2
 8014ac4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	78db      	ldrb	r3, [r3, #3]
 8014aca:	2b01      	cmp	r3, #1
 8014acc:	d11f      	bne.n	8014b0e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014ace:	69bb      	ldr	r3, [r7, #24]
 8014ad0:	015a      	lsls	r2, r3, #5
 8014ad2:	69fb      	ldr	r3, [r7, #28]
 8014ad4:	4413      	add	r3, r2
 8014ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ada:	691b      	ldr	r3, [r3, #16]
 8014adc:	69ba      	ldr	r2, [r7, #24]
 8014ade:	0151      	lsls	r1, r2, #5
 8014ae0:	69fa      	ldr	r2, [r7, #28]
 8014ae2:	440a      	add	r2, r1
 8014ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014ae8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8014aec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8014aee:	69bb      	ldr	r3, [r7, #24]
 8014af0:	015a      	lsls	r2, r3, #5
 8014af2:	69fb      	ldr	r3, [r7, #28]
 8014af4:	4413      	add	r3, r2
 8014af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014afa:	691b      	ldr	r3, [r3, #16]
 8014afc:	69ba      	ldr	r2, [r7, #24]
 8014afe:	0151      	lsls	r1, r2, #5
 8014b00:	69fa      	ldr	r2, [r7, #28]
 8014b02:	440a      	add	r2, r1
 8014b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014b08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014b0c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8014b0e:	79fb      	ldrb	r3, [r7, #7]
 8014b10:	2b01      	cmp	r3, #1
 8014b12:	d14b      	bne.n	8014bac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014b14:	68bb      	ldr	r3, [r7, #8]
 8014b16:	691b      	ldr	r3, [r3, #16]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d009      	beq.n	8014b30 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014b1c:	69bb      	ldr	r3, [r7, #24]
 8014b1e:	015a      	lsls	r2, r3, #5
 8014b20:	69fb      	ldr	r3, [r7, #28]
 8014b22:	4413      	add	r3, r2
 8014b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b28:	461a      	mov	r2, r3
 8014b2a:	68bb      	ldr	r3, [r7, #8]
 8014b2c:	691b      	ldr	r3, [r3, #16]
 8014b2e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014b30:	68bb      	ldr	r3, [r7, #8]
 8014b32:	78db      	ldrb	r3, [r3, #3]
 8014b34:	2b01      	cmp	r3, #1
 8014b36:	d128      	bne.n	8014b8a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014b38:	69fb      	ldr	r3, [r7, #28]
 8014b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014b3e:	689b      	ldr	r3, [r3, #8]
 8014b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d110      	bne.n	8014b6a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014b48:	69bb      	ldr	r3, [r7, #24]
 8014b4a:	015a      	lsls	r2, r3, #5
 8014b4c:	69fb      	ldr	r3, [r7, #28]
 8014b4e:	4413      	add	r3, r2
 8014b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	69ba      	ldr	r2, [r7, #24]
 8014b58:	0151      	lsls	r1, r2, #5
 8014b5a:	69fa      	ldr	r2, [r7, #28]
 8014b5c:	440a      	add	r2, r1
 8014b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014b62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014b66:	6013      	str	r3, [r2, #0]
 8014b68:	e00f      	b.n	8014b8a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014b6a:	69bb      	ldr	r3, [r7, #24]
 8014b6c:	015a      	lsls	r2, r3, #5
 8014b6e:	69fb      	ldr	r3, [r7, #28]
 8014b70:	4413      	add	r3, r2
 8014b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	69ba      	ldr	r2, [r7, #24]
 8014b7a:	0151      	lsls	r1, r2, #5
 8014b7c:	69fa      	ldr	r2, [r7, #28]
 8014b7e:	440a      	add	r2, r1
 8014b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014b88:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014b8a:	69bb      	ldr	r3, [r7, #24]
 8014b8c:	015a      	lsls	r2, r3, #5
 8014b8e:	69fb      	ldr	r3, [r7, #28]
 8014b90:	4413      	add	r3, r2
 8014b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	69ba      	ldr	r2, [r7, #24]
 8014b9a:	0151      	lsls	r1, r2, #5
 8014b9c:	69fa      	ldr	r2, [r7, #28]
 8014b9e:	440a      	add	r2, r1
 8014ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014ba4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014ba8:	6013      	str	r3, [r2, #0]
 8014baa:	e133      	b.n	8014e14 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014bac:	69bb      	ldr	r3, [r7, #24]
 8014bae:	015a      	lsls	r2, r3, #5
 8014bb0:	69fb      	ldr	r3, [r7, #28]
 8014bb2:	4413      	add	r3, r2
 8014bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	69ba      	ldr	r2, [r7, #24]
 8014bbc:	0151      	lsls	r1, r2, #5
 8014bbe:	69fa      	ldr	r2, [r7, #28]
 8014bc0:	440a      	add	r2, r1
 8014bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014bc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014bca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014bcc:	68bb      	ldr	r3, [r7, #8]
 8014bce:	78db      	ldrb	r3, [r3, #3]
 8014bd0:	2b01      	cmp	r3, #1
 8014bd2:	d015      	beq.n	8014c00 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014bd4:	68bb      	ldr	r3, [r7, #8]
 8014bd6:	695b      	ldr	r3, [r3, #20]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	f000 811b 	beq.w	8014e14 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014bde:	69fb      	ldr	r3, [r7, #28]
 8014be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	781b      	ldrb	r3, [r3, #0]
 8014bea:	f003 030f 	and.w	r3, r3, #15
 8014bee:	2101      	movs	r1, #1
 8014bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8014bf4:	69f9      	ldr	r1, [r7, #28]
 8014bf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014bfa:	4313      	orrs	r3, r2
 8014bfc:	634b      	str	r3, [r1, #52]	; 0x34
 8014bfe:	e109      	b.n	8014e14 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014c00:	69fb      	ldr	r3, [r7, #28]
 8014c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c06:	689b      	ldr	r3, [r3, #8]
 8014c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d110      	bne.n	8014c32 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014c10:	69bb      	ldr	r3, [r7, #24]
 8014c12:	015a      	lsls	r2, r3, #5
 8014c14:	69fb      	ldr	r3, [r7, #28]
 8014c16:	4413      	add	r3, r2
 8014c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	69ba      	ldr	r2, [r7, #24]
 8014c20:	0151      	lsls	r1, r2, #5
 8014c22:	69fa      	ldr	r2, [r7, #28]
 8014c24:	440a      	add	r2, r1
 8014c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014c2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014c2e:	6013      	str	r3, [r2, #0]
 8014c30:	e00f      	b.n	8014c52 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014c32:	69bb      	ldr	r3, [r7, #24]
 8014c34:	015a      	lsls	r2, r3, #5
 8014c36:	69fb      	ldr	r3, [r7, #28]
 8014c38:	4413      	add	r3, r2
 8014c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	69ba      	ldr	r2, [r7, #24]
 8014c42:	0151      	lsls	r1, r2, #5
 8014c44:	69fa      	ldr	r2, [r7, #28]
 8014c46:	440a      	add	r2, r1
 8014c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014c50:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014c52:	68bb      	ldr	r3, [r7, #8]
 8014c54:	68d9      	ldr	r1, [r3, #12]
 8014c56:	68bb      	ldr	r3, [r7, #8]
 8014c58:	781a      	ldrb	r2, [r3, #0]
 8014c5a:	68bb      	ldr	r3, [r7, #8]
 8014c5c:	695b      	ldr	r3, [r3, #20]
 8014c5e:	b298      	uxth	r0, r3
 8014c60:	79fb      	ldrb	r3, [r7, #7]
 8014c62:	9300      	str	r3, [sp, #0]
 8014c64:	4603      	mov	r3, r0
 8014c66:	68f8      	ldr	r0, [r7, #12]
 8014c68:	f000 fa38 	bl	80150dc <USB_WritePacket>
 8014c6c:	e0d2      	b.n	8014e14 <USB_EPStartXfer+0x480>
 8014c6e:	bf00      	nop
 8014c70:	e007ffff 	.word	0xe007ffff
 8014c74:	fff80000 	.word	0xfff80000
 8014c78:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014c7c:	69bb      	ldr	r3, [r7, #24]
 8014c7e:	015a      	lsls	r2, r3, #5
 8014c80:	69fb      	ldr	r3, [r7, #28]
 8014c82:	4413      	add	r3, r2
 8014c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c88:	691a      	ldr	r2, [r3, #16]
 8014c8a:	69bb      	ldr	r3, [r7, #24]
 8014c8c:	0159      	lsls	r1, r3, #5
 8014c8e:	69fb      	ldr	r3, [r7, #28]
 8014c90:	440b      	add	r3, r1
 8014c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c96:	4619      	mov	r1, r3
 8014c98:	4b61      	ldr	r3, [pc, #388]	; (8014e20 <USB_EPStartXfer+0x48c>)
 8014c9a:	4013      	ands	r3, r2
 8014c9c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014c9e:	69bb      	ldr	r3, [r7, #24]
 8014ca0:	015a      	lsls	r2, r3, #5
 8014ca2:	69fb      	ldr	r3, [r7, #28]
 8014ca4:	4413      	add	r3, r2
 8014ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014caa:	691a      	ldr	r2, [r3, #16]
 8014cac:	69bb      	ldr	r3, [r7, #24]
 8014cae:	0159      	lsls	r1, r3, #5
 8014cb0:	69fb      	ldr	r3, [r7, #28]
 8014cb2:	440b      	add	r3, r1
 8014cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cb8:	4619      	mov	r1, r3
 8014cba:	4b5a      	ldr	r3, [pc, #360]	; (8014e24 <USB_EPStartXfer+0x490>)
 8014cbc:	4013      	ands	r3, r2
 8014cbe:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8014cc0:	68bb      	ldr	r3, [r7, #8]
 8014cc2:	695b      	ldr	r3, [r3, #20]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d123      	bne.n	8014d10 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014cc8:	69bb      	ldr	r3, [r7, #24]
 8014cca:	015a      	lsls	r2, r3, #5
 8014ccc:	69fb      	ldr	r3, [r7, #28]
 8014cce:	4413      	add	r3, r2
 8014cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cd4:	691a      	ldr	r2, [r3, #16]
 8014cd6:	68bb      	ldr	r3, [r7, #8]
 8014cd8:	689b      	ldr	r3, [r3, #8]
 8014cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014cde:	69b9      	ldr	r1, [r7, #24]
 8014ce0:	0148      	lsls	r0, r1, #5
 8014ce2:	69f9      	ldr	r1, [r7, #28]
 8014ce4:	4401      	add	r1, r0
 8014ce6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014cea:	4313      	orrs	r3, r2
 8014cec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014cee:	69bb      	ldr	r3, [r7, #24]
 8014cf0:	015a      	lsls	r2, r3, #5
 8014cf2:	69fb      	ldr	r3, [r7, #28]
 8014cf4:	4413      	add	r3, r2
 8014cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cfa:	691b      	ldr	r3, [r3, #16]
 8014cfc:	69ba      	ldr	r2, [r7, #24]
 8014cfe:	0151      	lsls	r1, r2, #5
 8014d00:	69fa      	ldr	r2, [r7, #28]
 8014d02:	440a      	add	r2, r1
 8014d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014d08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014d0c:	6113      	str	r3, [r2, #16]
 8014d0e:	e033      	b.n	8014d78 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014d10:	68bb      	ldr	r3, [r7, #8]
 8014d12:	695a      	ldr	r2, [r3, #20]
 8014d14:	68bb      	ldr	r3, [r7, #8]
 8014d16:	689b      	ldr	r3, [r3, #8]
 8014d18:	4413      	add	r3, r2
 8014d1a:	1e5a      	subs	r2, r3, #1
 8014d1c:	68bb      	ldr	r3, [r7, #8]
 8014d1e:	689b      	ldr	r3, [r3, #8]
 8014d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d24:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014d26:	69bb      	ldr	r3, [r7, #24]
 8014d28:	015a      	lsls	r2, r3, #5
 8014d2a:	69fb      	ldr	r3, [r7, #28]
 8014d2c:	4413      	add	r3, r2
 8014d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d32:	691a      	ldr	r2, [r3, #16]
 8014d34:	8afb      	ldrh	r3, [r7, #22]
 8014d36:	04d9      	lsls	r1, r3, #19
 8014d38:	4b3b      	ldr	r3, [pc, #236]	; (8014e28 <USB_EPStartXfer+0x494>)
 8014d3a:	400b      	ands	r3, r1
 8014d3c:	69b9      	ldr	r1, [r7, #24]
 8014d3e:	0148      	lsls	r0, r1, #5
 8014d40:	69f9      	ldr	r1, [r7, #28]
 8014d42:	4401      	add	r1, r0
 8014d44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014d48:	4313      	orrs	r3, r2
 8014d4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8014d4c:	69bb      	ldr	r3, [r7, #24]
 8014d4e:	015a      	lsls	r2, r3, #5
 8014d50:	69fb      	ldr	r3, [r7, #28]
 8014d52:	4413      	add	r3, r2
 8014d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d58:	691a      	ldr	r2, [r3, #16]
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	689b      	ldr	r3, [r3, #8]
 8014d5e:	8af9      	ldrh	r1, [r7, #22]
 8014d60:	fb01 f303 	mul.w	r3, r1, r3
 8014d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014d68:	69b9      	ldr	r1, [r7, #24]
 8014d6a:	0148      	lsls	r0, r1, #5
 8014d6c:	69f9      	ldr	r1, [r7, #28]
 8014d6e:	4401      	add	r1, r0
 8014d70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014d74:	4313      	orrs	r3, r2
 8014d76:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014d78:	79fb      	ldrb	r3, [r7, #7]
 8014d7a:	2b01      	cmp	r3, #1
 8014d7c:	d10d      	bne.n	8014d9a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014d7e:	68bb      	ldr	r3, [r7, #8]
 8014d80:	68db      	ldr	r3, [r3, #12]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d009      	beq.n	8014d9a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014d86:	68bb      	ldr	r3, [r7, #8]
 8014d88:	68d9      	ldr	r1, [r3, #12]
 8014d8a:	69bb      	ldr	r3, [r7, #24]
 8014d8c:	015a      	lsls	r2, r3, #5
 8014d8e:	69fb      	ldr	r3, [r7, #28]
 8014d90:	4413      	add	r3, r2
 8014d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d96:	460a      	mov	r2, r1
 8014d98:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014d9a:	68bb      	ldr	r3, [r7, #8]
 8014d9c:	78db      	ldrb	r3, [r3, #3]
 8014d9e:	2b01      	cmp	r3, #1
 8014da0:	d128      	bne.n	8014df4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014da2:	69fb      	ldr	r3, [r7, #28]
 8014da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014da8:	689b      	ldr	r3, [r3, #8]
 8014daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d110      	bne.n	8014dd4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014db2:	69bb      	ldr	r3, [r7, #24]
 8014db4:	015a      	lsls	r2, r3, #5
 8014db6:	69fb      	ldr	r3, [r7, #28]
 8014db8:	4413      	add	r3, r2
 8014dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	69ba      	ldr	r2, [r7, #24]
 8014dc2:	0151      	lsls	r1, r2, #5
 8014dc4:	69fa      	ldr	r2, [r7, #28]
 8014dc6:	440a      	add	r2, r1
 8014dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014dcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014dd0:	6013      	str	r3, [r2, #0]
 8014dd2:	e00f      	b.n	8014df4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014dd4:	69bb      	ldr	r3, [r7, #24]
 8014dd6:	015a      	lsls	r2, r3, #5
 8014dd8:	69fb      	ldr	r3, [r7, #28]
 8014dda:	4413      	add	r3, r2
 8014ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	69ba      	ldr	r2, [r7, #24]
 8014de4:	0151      	lsls	r1, r2, #5
 8014de6:	69fa      	ldr	r2, [r7, #28]
 8014de8:	440a      	add	r2, r1
 8014dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014df2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014df4:	69bb      	ldr	r3, [r7, #24]
 8014df6:	015a      	lsls	r2, r3, #5
 8014df8:	69fb      	ldr	r3, [r7, #28]
 8014dfa:	4413      	add	r3, r2
 8014dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	69ba      	ldr	r2, [r7, #24]
 8014e04:	0151      	lsls	r1, r2, #5
 8014e06:	69fa      	ldr	r2, [r7, #28]
 8014e08:	440a      	add	r2, r1
 8014e0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014e0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014e12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014e14:	2300      	movs	r3, #0
}
 8014e16:	4618      	mov	r0, r3
 8014e18:	3720      	adds	r7, #32
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	bd80      	pop	{r7, pc}
 8014e1e:	bf00      	nop
 8014e20:	fff80000 	.word	0xfff80000
 8014e24:	e007ffff 	.word	0xe007ffff
 8014e28:	1ff80000 	.word	0x1ff80000

08014e2c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014e2c:	b480      	push	{r7}
 8014e2e:	b087      	sub	sp, #28
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	60f8      	str	r0, [r7, #12]
 8014e34:	60b9      	str	r1, [r7, #8]
 8014e36:	4613      	mov	r3, r2
 8014e38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8014e3e:	68bb      	ldr	r3, [r7, #8]
 8014e40:	781b      	ldrb	r3, [r3, #0]
 8014e42:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014e44:	68bb      	ldr	r3, [r7, #8]
 8014e46:	785b      	ldrb	r3, [r3, #1]
 8014e48:	2b01      	cmp	r3, #1
 8014e4a:	f040 80cd 	bne.w	8014fe8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014e4e:	68bb      	ldr	r3, [r7, #8]
 8014e50:	695b      	ldr	r3, [r3, #20]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d132      	bne.n	8014ebc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014e56:	693b      	ldr	r3, [r7, #16]
 8014e58:	015a      	lsls	r2, r3, #5
 8014e5a:	697b      	ldr	r3, [r7, #20]
 8014e5c:	4413      	add	r3, r2
 8014e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e62:	691a      	ldr	r2, [r3, #16]
 8014e64:	693b      	ldr	r3, [r7, #16]
 8014e66:	0159      	lsls	r1, r3, #5
 8014e68:	697b      	ldr	r3, [r7, #20]
 8014e6a:	440b      	add	r3, r1
 8014e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e70:	4619      	mov	r1, r3
 8014e72:	4b98      	ldr	r3, [pc, #608]	; (80150d4 <USB_EP0StartXfer+0x2a8>)
 8014e74:	4013      	ands	r3, r2
 8014e76:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014e78:	693b      	ldr	r3, [r7, #16]
 8014e7a:	015a      	lsls	r2, r3, #5
 8014e7c:	697b      	ldr	r3, [r7, #20]
 8014e7e:	4413      	add	r3, r2
 8014e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e84:	691b      	ldr	r3, [r3, #16]
 8014e86:	693a      	ldr	r2, [r7, #16]
 8014e88:	0151      	lsls	r1, r2, #5
 8014e8a:	697a      	ldr	r2, [r7, #20]
 8014e8c:	440a      	add	r2, r1
 8014e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014e92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014e96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014e98:	693b      	ldr	r3, [r7, #16]
 8014e9a:	015a      	lsls	r2, r3, #5
 8014e9c:	697b      	ldr	r3, [r7, #20]
 8014e9e:	4413      	add	r3, r2
 8014ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ea4:	691a      	ldr	r2, [r3, #16]
 8014ea6:	693b      	ldr	r3, [r7, #16]
 8014ea8:	0159      	lsls	r1, r3, #5
 8014eaa:	697b      	ldr	r3, [r7, #20]
 8014eac:	440b      	add	r3, r1
 8014eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014eb2:	4619      	mov	r1, r3
 8014eb4:	4b88      	ldr	r3, [pc, #544]	; (80150d8 <USB_EP0StartXfer+0x2ac>)
 8014eb6:	4013      	ands	r3, r2
 8014eb8:	610b      	str	r3, [r1, #16]
 8014eba:	e04e      	b.n	8014f5a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014ebc:	693b      	ldr	r3, [r7, #16]
 8014ebe:	015a      	lsls	r2, r3, #5
 8014ec0:	697b      	ldr	r3, [r7, #20]
 8014ec2:	4413      	add	r3, r2
 8014ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ec8:	691a      	ldr	r2, [r3, #16]
 8014eca:	693b      	ldr	r3, [r7, #16]
 8014ecc:	0159      	lsls	r1, r3, #5
 8014ece:	697b      	ldr	r3, [r7, #20]
 8014ed0:	440b      	add	r3, r1
 8014ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ed6:	4619      	mov	r1, r3
 8014ed8:	4b7f      	ldr	r3, [pc, #508]	; (80150d8 <USB_EP0StartXfer+0x2ac>)
 8014eda:	4013      	ands	r3, r2
 8014edc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014ede:	693b      	ldr	r3, [r7, #16]
 8014ee0:	015a      	lsls	r2, r3, #5
 8014ee2:	697b      	ldr	r3, [r7, #20]
 8014ee4:	4413      	add	r3, r2
 8014ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014eea:	691a      	ldr	r2, [r3, #16]
 8014eec:	693b      	ldr	r3, [r7, #16]
 8014eee:	0159      	lsls	r1, r3, #5
 8014ef0:	697b      	ldr	r3, [r7, #20]
 8014ef2:	440b      	add	r3, r1
 8014ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ef8:	4619      	mov	r1, r3
 8014efa:	4b76      	ldr	r3, [pc, #472]	; (80150d4 <USB_EP0StartXfer+0x2a8>)
 8014efc:	4013      	ands	r3, r2
 8014efe:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8014f00:	68bb      	ldr	r3, [r7, #8]
 8014f02:	695a      	ldr	r2, [r3, #20]
 8014f04:	68bb      	ldr	r3, [r7, #8]
 8014f06:	689b      	ldr	r3, [r3, #8]
 8014f08:	429a      	cmp	r2, r3
 8014f0a:	d903      	bls.n	8014f14 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8014f0c:	68bb      	ldr	r3, [r7, #8]
 8014f0e:	689a      	ldr	r2, [r3, #8]
 8014f10:	68bb      	ldr	r3, [r7, #8]
 8014f12:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014f14:	693b      	ldr	r3, [r7, #16]
 8014f16:	015a      	lsls	r2, r3, #5
 8014f18:	697b      	ldr	r3, [r7, #20]
 8014f1a:	4413      	add	r3, r2
 8014f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f20:	691b      	ldr	r3, [r3, #16]
 8014f22:	693a      	ldr	r2, [r7, #16]
 8014f24:	0151      	lsls	r1, r2, #5
 8014f26:	697a      	ldr	r2, [r7, #20]
 8014f28:	440a      	add	r2, r1
 8014f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014f2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014f32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014f34:	693b      	ldr	r3, [r7, #16]
 8014f36:	015a      	lsls	r2, r3, #5
 8014f38:	697b      	ldr	r3, [r7, #20]
 8014f3a:	4413      	add	r3, r2
 8014f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f40:	691a      	ldr	r2, [r3, #16]
 8014f42:	68bb      	ldr	r3, [r7, #8]
 8014f44:	695b      	ldr	r3, [r3, #20]
 8014f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014f4a:	6939      	ldr	r1, [r7, #16]
 8014f4c:	0148      	lsls	r0, r1, #5
 8014f4e:	6979      	ldr	r1, [r7, #20]
 8014f50:	4401      	add	r1, r0
 8014f52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014f56:	4313      	orrs	r3, r2
 8014f58:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014f5a:	79fb      	ldrb	r3, [r7, #7]
 8014f5c:	2b01      	cmp	r3, #1
 8014f5e:	d11e      	bne.n	8014f9e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014f60:	68bb      	ldr	r3, [r7, #8]
 8014f62:	691b      	ldr	r3, [r3, #16]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d009      	beq.n	8014f7c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014f68:	693b      	ldr	r3, [r7, #16]
 8014f6a:	015a      	lsls	r2, r3, #5
 8014f6c:	697b      	ldr	r3, [r7, #20]
 8014f6e:	4413      	add	r3, r2
 8014f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f74:	461a      	mov	r2, r3
 8014f76:	68bb      	ldr	r3, [r7, #8]
 8014f78:	691b      	ldr	r3, [r3, #16]
 8014f7a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014f7c:	693b      	ldr	r3, [r7, #16]
 8014f7e:	015a      	lsls	r2, r3, #5
 8014f80:	697b      	ldr	r3, [r7, #20]
 8014f82:	4413      	add	r3, r2
 8014f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	693a      	ldr	r2, [r7, #16]
 8014f8c:	0151      	lsls	r1, r2, #5
 8014f8e:	697a      	ldr	r2, [r7, #20]
 8014f90:	440a      	add	r2, r1
 8014f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014f96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014f9a:	6013      	str	r3, [r2, #0]
 8014f9c:	e092      	b.n	80150c4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014f9e:	693b      	ldr	r3, [r7, #16]
 8014fa0:	015a      	lsls	r2, r3, #5
 8014fa2:	697b      	ldr	r3, [r7, #20]
 8014fa4:	4413      	add	r3, r2
 8014fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	693a      	ldr	r2, [r7, #16]
 8014fae:	0151      	lsls	r1, r2, #5
 8014fb0:	697a      	ldr	r2, [r7, #20]
 8014fb2:	440a      	add	r2, r1
 8014fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014fb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014fbc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8014fbe:	68bb      	ldr	r3, [r7, #8]
 8014fc0:	695b      	ldr	r3, [r3, #20]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d07e      	beq.n	80150c4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014fc6:	697b      	ldr	r3, [r7, #20]
 8014fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014fce:	68bb      	ldr	r3, [r7, #8]
 8014fd0:	781b      	ldrb	r3, [r3, #0]
 8014fd2:	f003 030f 	and.w	r3, r3, #15
 8014fd6:	2101      	movs	r1, #1
 8014fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8014fdc:	6979      	ldr	r1, [r7, #20]
 8014fde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014fe2:	4313      	orrs	r3, r2
 8014fe4:	634b      	str	r3, [r1, #52]	; 0x34
 8014fe6:	e06d      	b.n	80150c4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014fe8:	693b      	ldr	r3, [r7, #16]
 8014fea:	015a      	lsls	r2, r3, #5
 8014fec:	697b      	ldr	r3, [r7, #20]
 8014fee:	4413      	add	r3, r2
 8014ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ff4:	691a      	ldr	r2, [r3, #16]
 8014ff6:	693b      	ldr	r3, [r7, #16]
 8014ff8:	0159      	lsls	r1, r3, #5
 8014ffa:	697b      	ldr	r3, [r7, #20]
 8014ffc:	440b      	add	r3, r1
 8014ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015002:	4619      	mov	r1, r3
 8015004:	4b34      	ldr	r3, [pc, #208]	; (80150d8 <USB_EP0StartXfer+0x2ac>)
 8015006:	4013      	ands	r3, r2
 8015008:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801500a:	693b      	ldr	r3, [r7, #16]
 801500c:	015a      	lsls	r2, r3, #5
 801500e:	697b      	ldr	r3, [r7, #20]
 8015010:	4413      	add	r3, r2
 8015012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015016:	691a      	ldr	r2, [r3, #16]
 8015018:	693b      	ldr	r3, [r7, #16]
 801501a:	0159      	lsls	r1, r3, #5
 801501c:	697b      	ldr	r3, [r7, #20]
 801501e:	440b      	add	r3, r1
 8015020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015024:	4619      	mov	r1, r3
 8015026:	4b2b      	ldr	r3, [pc, #172]	; (80150d4 <USB_EP0StartXfer+0x2a8>)
 8015028:	4013      	ands	r3, r2
 801502a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 801502c:	68bb      	ldr	r3, [r7, #8]
 801502e:	695b      	ldr	r3, [r3, #20]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d003      	beq.n	801503c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8015034:	68bb      	ldr	r3, [r7, #8]
 8015036:	689a      	ldr	r2, [r3, #8]
 8015038:	68bb      	ldr	r3, [r7, #8]
 801503a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801503c:	693b      	ldr	r3, [r7, #16]
 801503e:	015a      	lsls	r2, r3, #5
 8015040:	697b      	ldr	r3, [r7, #20]
 8015042:	4413      	add	r3, r2
 8015044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015048:	691b      	ldr	r3, [r3, #16]
 801504a:	693a      	ldr	r2, [r7, #16]
 801504c:	0151      	lsls	r1, r2, #5
 801504e:	697a      	ldr	r2, [r7, #20]
 8015050:	440a      	add	r2, r1
 8015052:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015056:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801505a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801505c:	693b      	ldr	r3, [r7, #16]
 801505e:	015a      	lsls	r2, r3, #5
 8015060:	697b      	ldr	r3, [r7, #20]
 8015062:	4413      	add	r3, r2
 8015064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015068:	691a      	ldr	r2, [r3, #16]
 801506a:	68bb      	ldr	r3, [r7, #8]
 801506c:	689b      	ldr	r3, [r3, #8]
 801506e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015072:	6939      	ldr	r1, [r7, #16]
 8015074:	0148      	lsls	r0, r1, #5
 8015076:	6979      	ldr	r1, [r7, #20]
 8015078:	4401      	add	r1, r0
 801507a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801507e:	4313      	orrs	r3, r2
 8015080:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8015082:	79fb      	ldrb	r3, [r7, #7]
 8015084:	2b01      	cmp	r3, #1
 8015086:	d10d      	bne.n	80150a4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8015088:	68bb      	ldr	r3, [r7, #8]
 801508a:	68db      	ldr	r3, [r3, #12]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d009      	beq.n	80150a4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8015090:	68bb      	ldr	r3, [r7, #8]
 8015092:	68d9      	ldr	r1, [r3, #12]
 8015094:	693b      	ldr	r3, [r7, #16]
 8015096:	015a      	lsls	r2, r3, #5
 8015098:	697b      	ldr	r3, [r7, #20]
 801509a:	4413      	add	r3, r2
 801509c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80150a0:	460a      	mov	r2, r1
 80150a2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80150a4:	693b      	ldr	r3, [r7, #16]
 80150a6:	015a      	lsls	r2, r3, #5
 80150a8:	697b      	ldr	r3, [r7, #20]
 80150aa:	4413      	add	r3, r2
 80150ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	693a      	ldr	r2, [r7, #16]
 80150b4:	0151      	lsls	r1, r2, #5
 80150b6:	697a      	ldr	r2, [r7, #20]
 80150b8:	440a      	add	r2, r1
 80150ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80150be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80150c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80150c4:	2300      	movs	r3, #0
}
 80150c6:	4618      	mov	r0, r3
 80150c8:	371c      	adds	r7, #28
 80150ca:	46bd      	mov	sp, r7
 80150cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d0:	4770      	bx	lr
 80150d2:	bf00      	nop
 80150d4:	e007ffff 	.word	0xe007ffff
 80150d8:	fff80000 	.word	0xfff80000

080150dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80150dc:	b480      	push	{r7}
 80150de:	b089      	sub	sp, #36	; 0x24
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	60f8      	str	r0, [r7, #12]
 80150e4:	60b9      	str	r1, [r7, #8]
 80150e6:	4611      	mov	r1, r2
 80150e8:	461a      	mov	r2, r3
 80150ea:	460b      	mov	r3, r1
 80150ec:	71fb      	strb	r3, [r7, #7]
 80150ee:	4613      	mov	r3, r2
 80150f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80150f6:	68bb      	ldr	r3, [r7, #8]
 80150f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80150fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d11a      	bne.n	8015138 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8015102:	88bb      	ldrh	r3, [r7, #4]
 8015104:	3303      	adds	r3, #3
 8015106:	089b      	lsrs	r3, r3, #2
 8015108:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801510a:	2300      	movs	r3, #0
 801510c:	61bb      	str	r3, [r7, #24]
 801510e:	e00f      	b.n	8015130 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8015110:	79fb      	ldrb	r3, [r7, #7]
 8015112:	031a      	lsls	r2, r3, #12
 8015114:	697b      	ldr	r3, [r7, #20]
 8015116:	4413      	add	r3, r2
 8015118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801511c:	461a      	mov	r2, r3
 801511e:	69fb      	ldr	r3, [r7, #28]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	6013      	str	r3, [r2, #0]
      pSrc++;
 8015124:	69fb      	ldr	r3, [r7, #28]
 8015126:	3304      	adds	r3, #4
 8015128:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801512a:	69bb      	ldr	r3, [r7, #24]
 801512c:	3301      	adds	r3, #1
 801512e:	61bb      	str	r3, [r7, #24]
 8015130:	69ba      	ldr	r2, [r7, #24]
 8015132:	693b      	ldr	r3, [r7, #16]
 8015134:	429a      	cmp	r2, r3
 8015136:	d3eb      	bcc.n	8015110 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8015138:	2300      	movs	r3, #0
}
 801513a:	4618      	mov	r0, r3
 801513c:	3724      	adds	r7, #36	; 0x24
 801513e:	46bd      	mov	sp, r7
 8015140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015144:	4770      	bx	lr

08015146 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8015146:	b480      	push	{r7}
 8015148:	b089      	sub	sp, #36	; 0x24
 801514a:	af00      	add	r7, sp, #0
 801514c:	60f8      	str	r0, [r7, #12]
 801514e:	60b9      	str	r1, [r7, #8]
 8015150:	4613      	mov	r3, r2
 8015152:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8015158:	68bb      	ldr	r3, [r7, #8]
 801515a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 801515c:	88fb      	ldrh	r3, [r7, #6]
 801515e:	3303      	adds	r3, #3
 8015160:	089b      	lsrs	r3, r3, #2
 8015162:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8015164:	2300      	movs	r3, #0
 8015166:	61bb      	str	r3, [r7, #24]
 8015168:	e00b      	b.n	8015182 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801516a:	697b      	ldr	r3, [r7, #20]
 801516c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015170:	681a      	ldr	r2, [r3, #0]
 8015172:	69fb      	ldr	r3, [r7, #28]
 8015174:	601a      	str	r2, [r3, #0]
    pDest++;
 8015176:	69fb      	ldr	r3, [r7, #28]
 8015178:	3304      	adds	r3, #4
 801517a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801517c:	69bb      	ldr	r3, [r7, #24]
 801517e:	3301      	adds	r3, #1
 8015180:	61bb      	str	r3, [r7, #24]
 8015182:	69ba      	ldr	r2, [r7, #24]
 8015184:	693b      	ldr	r3, [r7, #16]
 8015186:	429a      	cmp	r2, r3
 8015188:	d3ef      	bcc.n	801516a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 801518a:	69fb      	ldr	r3, [r7, #28]
}
 801518c:	4618      	mov	r0, r3
 801518e:	3724      	adds	r7, #36	; 0x24
 8015190:	46bd      	mov	sp, r7
 8015192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015196:	4770      	bx	lr

08015198 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015198:	b480      	push	{r7}
 801519a:	b085      	sub	sp, #20
 801519c:	af00      	add	r7, sp, #0
 801519e:	6078      	str	r0, [r7, #4]
 80151a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80151a6:	683b      	ldr	r3, [r7, #0]
 80151a8:	781b      	ldrb	r3, [r3, #0]
 80151aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	785b      	ldrb	r3, [r3, #1]
 80151b0:	2b01      	cmp	r3, #1
 80151b2:	d12c      	bne.n	801520e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80151b4:	68bb      	ldr	r3, [r7, #8]
 80151b6:	015a      	lsls	r2, r3, #5
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	4413      	add	r3, r2
 80151bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	db12      	blt.n	80151ec <USB_EPSetStall+0x54>
 80151c6:	68bb      	ldr	r3, [r7, #8]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d00f      	beq.n	80151ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80151cc:	68bb      	ldr	r3, [r7, #8]
 80151ce:	015a      	lsls	r2, r3, #5
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	4413      	add	r3, r2
 80151d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	68ba      	ldr	r2, [r7, #8]
 80151dc:	0151      	lsls	r1, r2, #5
 80151de:	68fa      	ldr	r2, [r7, #12]
 80151e0:	440a      	add	r2, r1
 80151e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80151e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80151ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80151ec:	68bb      	ldr	r3, [r7, #8]
 80151ee:	015a      	lsls	r2, r3, #5
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	4413      	add	r3, r2
 80151f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	68ba      	ldr	r2, [r7, #8]
 80151fc:	0151      	lsls	r1, r2, #5
 80151fe:	68fa      	ldr	r2, [r7, #12]
 8015200:	440a      	add	r2, r1
 8015202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015206:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801520a:	6013      	str	r3, [r2, #0]
 801520c:	e02b      	b.n	8015266 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801520e:	68bb      	ldr	r3, [r7, #8]
 8015210:	015a      	lsls	r2, r3, #5
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	4413      	add	r3, r2
 8015216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	2b00      	cmp	r3, #0
 801521e:	db12      	blt.n	8015246 <USB_EPSetStall+0xae>
 8015220:	68bb      	ldr	r3, [r7, #8]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d00f      	beq.n	8015246 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015226:	68bb      	ldr	r3, [r7, #8]
 8015228:	015a      	lsls	r2, r3, #5
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	4413      	add	r3, r2
 801522e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	68ba      	ldr	r2, [r7, #8]
 8015236:	0151      	lsls	r1, r2, #5
 8015238:	68fa      	ldr	r2, [r7, #12]
 801523a:	440a      	add	r2, r1
 801523c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015240:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015244:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8015246:	68bb      	ldr	r3, [r7, #8]
 8015248:	015a      	lsls	r2, r3, #5
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	4413      	add	r3, r2
 801524e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	68ba      	ldr	r2, [r7, #8]
 8015256:	0151      	lsls	r1, r2, #5
 8015258:	68fa      	ldr	r2, [r7, #12]
 801525a:	440a      	add	r2, r1
 801525c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015260:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015264:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015266:	2300      	movs	r3, #0
}
 8015268:	4618      	mov	r0, r3
 801526a:	3714      	adds	r7, #20
 801526c:	46bd      	mov	sp, r7
 801526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015272:	4770      	bx	lr

08015274 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015274:	b480      	push	{r7}
 8015276:	b085      	sub	sp, #20
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
 801527c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015282:	683b      	ldr	r3, [r7, #0]
 8015284:	781b      	ldrb	r3, [r3, #0]
 8015286:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015288:	683b      	ldr	r3, [r7, #0]
 801528a:	785b      	ldrb	r3, [r3, #1]
 801528c:	2b01      	cmp	r3, #1
 801528e:	d128      	bne.n	80152e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8015290:	68bb      	ldr	r3, [r7, #8]
 8015292:	015a      	lsls	r2, r3, #5
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	4413      	add	r3, r2
 8015298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	68ba      	ldr	r2, [r7, #8]
 80152a0:	0151      	lsls	r1, r2, #5
 80152a2:	68fa      	ldr	r2, [r7, #12]
 80152a4:	440a      	add	r2, r1
 80152a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80152aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80152ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80152b0:	683b      	ldr	r3, [r7, #0]
 80152b2:	78db      	ldrb	r3, [r3, #3]
 80152b4:	2b03      	cmp	r3, #3
 80152b6:	d003      	beq.n	80152c0 <USB_EPClearStall+0x4c>
 80152b8:	683b      	ldr	r3, [r7, #0]
 80152ba:	78db      	ldrb	r3, [r3, #3]
 80152bc:	2b02      	cmp	r3, #2
 80152be:	d138      	bne.n	8015332 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80152c0:	68bb      	ldr	r3, [r7, #8]
 80152c2:	015a      	lsls	r2, r3, #5
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	4413      	add	r3, r2
 80152c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	68ba      	ldr	r2, [r7, #8]
 80152d0:	0151      	lsls	r1, r2, #5
 80152d2:	68fa      	ldr	r2, [r7, #12]
 80152d4:	440a      	add	r2, r1
 80152d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80152da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80152de:	6013      	str	r3, [r2, #0]
 80152e0:	e027      	b.n	8015332 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80152e2:	68bb      	ldr	r3, [r7, #8]
 80152e4:	015a      	lsls	r2, r3, #5
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	4413      	add	r3, r2
 80152ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	68ba      	ldr	r2, [r7, #8]
 80152f2:	0151      	lsls	r1, r2, #5
 80152f4:	68fa      	ldr	r2, [r7, #12]
 80152f6:	440a      	add	r2, r1
 80152f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80152fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8015300:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015302:	683b      	ldr	r3, [r7, #0]
 8015304:	78db      	ldrb	r3, [r3, #3]
 8015306:	2b03      	cmp	r3, #3
 8015308:	d003      	beq.n	8015312 <USB_EPClearStall+0x9e>
 801530a:	683b      	ldr	r3, [r7, #0]
 801530c:	78db      	ldrb	r3, [r3, #3]
 801530e:	2b02      	cmp	r3, #2
 8015310:	d10f      	bne.n	8015332 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015312:	68bb      	ldr	r3, [r7, #8]
 8015314:	015a      	lsls	r2, r3, #5
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	4413      	add	r3, r2
 801531a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	68ba      	ldr	r2, [r7, #8]
 8015322:	0151      	lsls	r1, r2, #5
 8015324:	68fa      	ldr	r2, [r7, #12]
 8015326:	440a      	add	r2, r1
 8015328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801532c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015330:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8015332:	2300      	movs	r3, #0
}
 8015334:	4618      	mov	r0, r3
 8015336:	3714      	adds	r7, #20
 8015338:	46bd      	mov	sp, r7
 801533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801533e:	4770      	bx	lr

08015340 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8015340:	b480      	push	{r7}
 8015342:	b085      	sub	sp, #20
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
 8015348:	460b      	mov	r3, r1
 801534a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	68fa      	ldr	r2, [r7, #12]
 801535a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801535e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8015362:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801536a:	681a      	ldr	r2, [r3, #0]
 801536c:	78fb      	ldrb	r3, [r7, #3]
 801536e:	011b      	lsls	r3, r3, #4
 8015370:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8015374:	68f9      	ldr	r1, [r7, #12]
 8015376:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801537a:	4313      	orrs	r3, r2
 801537c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801537e:	2300      	movs	r3, #0
}
 8015380:	4618      	mov	r0, r3
 8015382:	3714      	adds	r7, #20
 8015384:	46bd      	mov	sp, r7
 8015386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538a:	4770      	bx	lr

0801538c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801538c:	b480      	push	{r7}
 801538e:	b085      	sub	sp, #20
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	68fa      	ldr	r2, [r7, #12]
 80153a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80153a6:	f023 0303 	bic.w	r3, r3, #3
 80153aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80153b2:	685b      	ldr	r3, [r3, #4]
 80153b4:	68fa      	ldr	r2, [r7, #12]
 80153b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80153ba:	f023 0302 	bic.w	r3, r3, #2
 80153be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80153c0:	2300      	movs	r3, #0
}
 80153c2:	4618      	mov	r0, r3
 80153c4:	3714      	adds	r7, #20
 80153c6:	46bd      	mov	sp, r7
 80153c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153cc:	4770      	bx	lr

080153ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80153ce:	b480      	push	{r7}
 80153d0:	b085      	sub	sp, #20
 80153d2:	af00      	add	r7, sp, #0
 80153d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	68fa      	ldr	r2, [r7, #12]
 80153e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80153e8:	f023 0303 	bic.w	r3, r3, #3
 80153ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80153f4:	685b      	ldr	r3, [r3, #4]
 80153f6:	68fa      	ldr	r2, [r7, #12]
 80153f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80153fc:	f043 0302 	orr.w	r3, r3, #2
 8015400:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015402:	2300      	movs	r3, #0
}
 8015404:	4618      	mov	r0, r3
 8015406:	3714      	adds	r7, #20
 8015408:	46bd      	mov	sp, r7
 801540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540e:	4770      	bx	lr

08015410 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8015410:	b480      	push	{r7}
 8015412:	b085      	sub	sp, #20
 8015414:	af00      	add	r7, sp, #0
 8015416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	695b      	ldr	r3, [r3, #20]
 801541c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	699b      	ldr	r3, [r3, #24]
 8015422:	68fa      	ldr	r2, [r7, #12]
 8015424:	4013      	ands	r3, r2
 8015426:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015428:	68fb      	ldr	r3, [r7, #12]
}
 801542a:	4618      	mov	r0, r3
 801542c:	3714      	adds	r7, #20
 801542e:	46bd      	mov	sp, r7
 8015430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015434:	4770      	bx	lr

08015436 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8015436:	b480      	push	{r7}
 8015438:	b085      	sub	sp, #20
 801543a:	af00      	add	r7, sp, #0
 801543c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015448:	699b      	ldr	r3, [r3, #24]
 801544a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015452:	69db      	ldr	r3, [r3, #28]
 8015454:	68ba      	ldr	r2, [r7, #8]
 8015456:	4013      	ands	r3, r2
 8015458:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801545a:	68bb      	ldr	r3, [r7, #8]
 801545c:	0c1b      	lsrs	r3, r3, #16
}
 801545e:	4618      	mov	r0, r3
 8015460:	3714      	adds	r7, #20
 8015462:	46bd      	mov	sp, r7
 8015464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015468:	4770      	bx	lr

0801546a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801546a:	b480      	push	{r7}
 801546c:	b085      	sub	sp, #20
 801546e:	af00      	add	r7, sp, #0
 8015470:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801547c:	699b      	ldr	r3, [r3, #24]
 801547e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015486:	69db      	ldr	r3, [r3, #28]
 8015488:	68ba      	ldr	r2, [r7, #8]
 801548a:	4013      	ands	r3, r2
 801548c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801548e:	68bb      	ldr	r3, [r7, #8]
 8015490:	b29b      	uxth	r3, r3
}
 8015492:	4618      	mov	r0, r3
 8015494:	3714      	adds	r7, #20
 8015496:	46bd      	mov	sp, r7
 8015498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549c:	4770      	bx	lr

0801549e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801549e:	b480      	push	{r7}
 80154a0:	b085      	sub	sp, #20
 80154a2:	af00      	add	r7, sp, #0
 80154a4:	6078      	str	r0, [r7, #4]
 80154a6:	460b      	mov	r3, r1
 80154a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80154ae:	78fb      	ldrb	r3, [r7, #3]
 80154b0:	015a      	lsls	r2, r3, #5
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	4413      	add	r3, r2
 80154b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80154ba:	689b      	ldr	r3, [r3, #8]
 80154bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80154c4:	695b      	ldr	r3, [r3, #20]
 80154c6:	68ba      	ldr	r2, [r7, #8]
 80154c8:	4013      	ands	r3, r2
 80154ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80154cc:	68bb      	ldr	r3, [r7, #8]
}
 80154ce:	4618      	mov	r0, r3
 80154d0:	3714      	adds	r7, #20
 80154d2:	46bd      	mov	sp, r7
 80154d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d8:	4770      	bx	lr

080154da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80154da:	b480      	push	{r7}
 80154dc:	b087      	sub	sp, #28
 80154de:	af00      	add	r7, sp, #0
 80154e0:	6078      	str	r0, [r7, #4]
 80154e2:	460b      	mov	r3, r1
 80154e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80154ea:	697b      	ldr	r3, [r7, #20]
 80154ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80154f0:	691b      	ldr	r3, [r3, #16]
 80154f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80154f4:	697b      	ldr	r3, [r7, #20]
 80154f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80154fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80154fe:	78fb      	ldrb	r3, [r7, #3]
 8015500:	f003 030f 	and.w	r3, r3, #15
 8015504:	68fa      	ldr	r2, [r7, #12]
 8015506:	fa22 f303 	lsr.w	r3, r2, r3
 801550a:	01db      	lsls	r3, r3, #7
 801550c:	b2db      	uxtb	r3, r3
 801550e:	693a      	ldr	r2, [r7, #16]
 8015510:	4313      	orrs	r3, r2
 8015512:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015514:	78fb      	ldrb	r3, [r7, #3]
 8015516:	015a      	lsls	r2, r3, #5
 8015518:	697b      	ldr	r3, [r7, #20]
 801551a:	4413      	add	r3, r2
 801551c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015520:	689b      	ldr	r3, [r3, #8]
 8015522:	693a      	ldr	r2, [r7, #16]
 8015524:	4013      	ands	r3, r2
 8015526:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015528:	68bb      	ldr	r3, [r7, #8]
}
 801552a:	4618      	mov	r0, r3
 801552c:	371c      	adds	r7, #28
 801552e:	46bd      	mov	sp, r7
 8015530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015534:	4770      	bx	lr

08015536 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8015536:	b480      	push	{r7}
 8015538:	b083      	sub	sp, #12
 801553a:	af00      	add	r7, sp, #0
 801553c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	695b      	ldr	r3, [r3, #20]
 8015542:	f003 0301 	and.w	r3, r3, #1
}
 8015546:	4618      	mov	r0, r3
 8015548:	370c      	adds	r7, #12
 801554a:	46bd      	mov	sp, r7
 801554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015550:	4770      	bx	lr
	...

08015554 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8015554:	b480      	push	{r7}
 8015556:	b085      	sub	sp, #20
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015566:	681a      	ldr	r2, [r3, #0]
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801556e:	4619      	mov	r1, r3
 8015570:	4b09      	ldr	r3, [pc, #36]	; (8015598 <USB_ActivateSetup+0x44>)
 8015572:	4013      	ands	r3, r2
 8015574:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801557c:	685b      	ldr	r3, [r3, #4]
 801557e:	68fa      	ldr	r2, [r7, #12]
 8015580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015588:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801558a:	2300      	movs	r3, #0
}
 801558c:	4618      	mov	r0, r3
 801558e:	3714      	adds	r7, #20
 8015590:	46bd      	mov	sp, r7
 8015592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015596:	4770      	bx	lr
 8015598:	fffff800 	.word	0xfffff800

0801559c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801559c:	b480      	push	{r7}
 801559e:	b087      	sub	sp, #28
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	60f8      	str	r0, [r7, #12]
 80155a4:	460b      	mov	r3, r1
 80155a6:	607a      	str	r2, [r7, #4]
 80155a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	333c      	adds	r3, #60	; 0x3c
 80155b2:	3304      	adds	r3, #4
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80155b8:	693b      	ldr	r3, [r7, #16]
 80155ba:	4a26      	ldr	r2, [pc, #152]	; (8015654 <USB_EP0_OutStart+0xb8>)
 80155bc:	4293      	cmp	r3, r2
 80155be:	d90a      	bls.n	80155d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80155c0:	697b      	ldr	r3, [r7, #20]
 80155c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80155cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80155d0:	d101      	bne.n	80155d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80155d2:	2300      	movs	r3, #0
 80155d4:	e037      	b.n	8015646 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80155d6:	697b      	ldr	r3, [r7, #20]
 80155d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80155dc:	461a      	mov	r2, r3
 80155de:	2300      	movs	r3, #0
 80155e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80155e2:	697b      	ldr	r3, [r7, #20]
 80155e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80155e8:	691b      	ldr	r3, [r3, #16]
 80155ea:	697a      	ldr	r2, [r7, #20]
 80155ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80155f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80155f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80155f6:	697b      	ldr	r3, [r7, #20]
 80155f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80155fc:	691b      	ldr	r3, [r3, #16]
 80155fe:	697a      	ldr	r2, [r7, #20]
 8015600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015604:	f043 0318 	orr.w	r3, r3, #24
 8015608:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801560a:	697b      	ldr	r3, [r7, #20]
 801560c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015610:	691b      	ldr	r3, [r3, #16]
 8015612:	697a      	ldr	r2, [r7, #20]
 8015614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015618:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801561c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801561e:	7afb      	ldrb	r3, [r7, #11]
 8015620:	2b01      	cmp	r3, #1
 8015622:	d10f      	bne.n	8015644 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015624:	697b      	ldr	r3, [r7, #20]
 8015626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801562a:	461a      	mov	r2, r3
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8015630:	697b      	ldr	r3, [r7, #20]
 8015632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	697a      	ldr	r2, [r7, #20]
 801563a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801563e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8015642:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015644:	2300      	movs	r3, #0
}
 8015646:	4618      	mov	r0, r3
 8015648:	371c      	adds	r7, #28
 801564a:	46bd      	mov	sp, r7
 801564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015650:	4770      	bx	lr
 8015652:	bf00      	nop
 8015654:	4f54300a 	.word	0x4f54300a

08015658 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015658:	b480      	push	{r7}
 801565a:	b085      	sub	sp, #20
 801565c:	af00      	add	r7, sp, #0
 801565e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8015660:	2300      	movs	r3, #0
 8015662:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	3301      	adds	r3, #1
 8015668:	60fb      	str	r3, [r7, #12]
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	4a13      	ldr	r2, [pc, #76]	; (80156bc <USB_CoreReset+0x64>)
 801566e:	4293      	cmp	r3, r2
 8015670:	d901      	bls.n	8015676 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8015672:	2303      	movs	r3, #3
 8015674:	e01b      	b.n	80156ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	691b      	ldr	r3, [r3, #16]
 801567a:	2b00      	cmp	r3, #0
 801567c:	daf2      	bge.n	8015664 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801567e:	2300      	movs	r3, #0
 8015680:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	691b      	ldr	r3, [r3, #16]
 8015686:	f043 0201 	orr.w	r2, r3, #1
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	3301      	adds	r3, #1
 8015692:	60fb      	str	r3, [r7, #12]
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	4a09      	ldr	r2, [pc, #36]	; (80156bc <USB_CoreReset+0x64>)
 8015698:	4293      	cmp	r3, r2
 801569a:	d901      	bls.n	80156a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801569c:	2303      	movs	r3, #3
 801569e:	e006      	b.n	80156ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	691b      	ldr	r3, [r3, #16]
 80156a4:	f003 0301 	and.w	r3, r3, #1
 80156a8:	2b01      	cmp	r3, #1
 80156aa:	d0f0      	beq.n	801568e <USB_CoreReset+0x36>

  return HAL_OK;
 80156ac:	2300      	movs	r3, #0
}
 80156ae:	4618      	mov	r0, r3
 80156b0:	3714      	adds	r7, #20
 80156b2:	46bd      	mov	sp, r7
 80156b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b8:	4770      	bx	lr
 80156ba:	bf00      	nop
 80156bc:	00030d40 	.word	0x00030d40

080156c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80156c4:	4904      	ldr	r1, [pc, #16]	; (80156d8 <MX_FATFS_Init+0x18>)
 80156c6:	4805      	ldr	r0, [pc, #20]	; (80156dc <MX_FATFS_Init+0x1c>)
 80156c8:	f005 ffb4 	bl	801b634 <FATFS_LinkDriver>
 80156cc:	4603      	mov	r3, r0
 80156ce:	461a      	mov	r2, r3
 80156d0:	4b03      	ldr	r3, [pc, #12]	; (80156e0 <MX_FATFS_Init+0x20>)
 80156d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80156d4:	bf00      	nop
 80156d6:	bd80      	pop	{r7, pc}
 80156d8:	200075c8 	.word	0x200075c8
 80156dc:	0802241c 	.word	0x0802241c
 80156e0:	200075c4 	.word	0x200075c4

080156e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80156e4:	b480      	push	{r7}
 80156e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80156e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80156ea:	4618      	mov	r0, r3
 80156ec:	46bd      	mov	sp, r7
 80156ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f2:	4770      	bx	lr

080156f4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b082      	sub	sp, #8
 80156f8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80156fa:	2300      	movs	r3, #0
 80156fc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80156fe:	f000 f896 	bl	801582e <BSP_SD_IsDetected>
 8015702:	4603      	mov	r3, r0
 8015704:	2b01      	cmp	r3, #1
 8015706:	d001      	beq.n	801570c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8015708:	2302      	movs	r3, #2
 801570a:	e012      	b.n	8015732 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 801570c:	480b      	ldr	r0, [pc, #44]	; (801573c <BSP_SD_Init+0x48>)
 801570e:	f7f9 ff13 	bl	800f538 <HAL_SD_Init>
 8015712:	4603      	mov	r3, r0
 8015714:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8015716:	79fb      	ldrb	r3, [r7, #7]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d109      	bne.n	8015730 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801571c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8015720:	4806      	ldr	r0, [pc, #24]	; (801573c <BSP_SD_Init+0x48>)
 8015722:	f7fa fcd7 	bl	80100d4 <HAL_SD_ConfigWideBusOperation>
 8015726:	4603      	mov	r3, r0
 8015728:	2b00      	cmp	r3, #0
 801572a:	d001      	beq.n	8015730 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801572c:	2301      	movs	r3, #1
 801572e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8015730:	79fb      	ldrb	r3, [r7, #7]
}
 8015732:	4618      	mov	r0, r3
 8015734:	3708      	adds	r7, #8
 8015736:	46bd      	mov	sp, r7
 8015738:	bd80      	pop	{r7, pc}
 801573a:	bf00      	nop
 801573c:	200048fc 	.word	0x200048fc

08015740 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8015740:	b580      	push	{r7, lr}
 8015742:	b086      	sub	sp, #24
 8015744:	af00      	add	r7, sp, #0
 8015746:	60f8      	str	r0, [r7, #12]
 8015748:	60b9      	str	r1, [r7, #8]
 801574a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801574c:	2300      	movs	r3, #0
 801574e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	68ba      	ldr	r2, [r7, #8]
 8015754:	68f9      	ldr	r1, [r7, #12]
 8015756:	4806      	ldr	r0, [pc, #24]	; (8015770 <BSP_SD_ReadBlocks_DMA+0x30>)
 8015758:	f7f9 ffa4 	bl	800f6a4 <HAL_SD_ReadBlocks_DMA>
 801575c:	4603      	mov	r3, r0
 801575e:	2b00      	cmp	r3, #0
 8015760:	d001      	beq.n	8015766 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8015762:	2301      	movs	r3, #1
 8015764:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8015766:	7dfb      	ldrb	r3, [r7, #23]
}
 8015768:	4618      	mov	r0, r3
 801576a:	3718      	adds	r7, #24
 801576c:	46bd      	mov	sp, r7
 801576e:	bd80      	pop	{r7, pc}
 8015770:	200048fc 	.word	0x200048fc

08015774 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b086      	sub	sp, #24
 8015778:	af00      	add	r7, sp, #0
 801577a:	60f8      	str	r0, [r7, #12]
 801577c:	60b9      	str	r1, [r7, #8]
 801577e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015780:	2300      	movs	r3, #0
 8015782:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	68ba      	ldr	r2, [r7, #8]
 8015788:	68f9      	ldr	r1, [r7, #12]
 801578a:	4806      	ldr	r0, [pc, #24]	; (80157a4 <BSP_SD_WriteBlocks_DMA+0x30>)
 801578c:	f7fa f86c 	bl	800f868 <HAL_SD_WriteBlocks_DMA>
 8015790:	4603      	mov	r3, r0
 8015792:	2b00      	cmp	r3, #0
 8015794:	d001      	beq.n	801579a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8015796:	2301      	movs	r3, #1
 8015798:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801579a:	7dfb      	ldrb	r3, [r7, #23]
}
 801579c:	4618      	mov	r0, r3
 801579e:	3718      	adds	r7, #24
 80157a0:	46bd      	mov	sp, r7
 80157a2:	bd80      	pop	{r7, pc}
 80157a4:	200048fc 	.word	0x200048fc

080157a8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80157ac:	4805      	ldr	r0, [pc, #20]	; (80157c4 <BSP_SD_GetCardState+0x1c>)
 80157ae:	f7fa fd2b 	bl	8010208 <HAL_SD_GetCardState>
 80157b2:	4603      	mov	r3, r0
 80157b4:	2b04      	cmp	r3, #4
 80157b6:	bf14      	ite	ne
 80157b8:	2301      	movne	r3, #1
 80157ba:	2300      	moveq	r3, #0
 80157bc:	b2db      	uxtb	r3, r3
}
 80157be:	4618      	mov	r0, r3
 80157c0:	bd80      	pop	{r7, pc}
 80157c2:	bf00      	nop
 80157c4:	200048fc 	.word	0x200048fc

080157c8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b082      	sub	sp, #8
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80157d0:	6879      	ldr	r1, [r7, #4]
 80157d2:	4803      	ldr	r0, [pc, #12]	; (80157e0 <BSP_SD_GetCardInfo+0x18>)
 80157d4:	f7fa fc52 	bl	801007c <HAL_SD_GetCardInfo>
}
 80157d8:	bf00      	nop
 80157da:	3708      	adds	r7, #8
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd80      	pop	{r7, pc}
 80157e0:	200048fc 	.word	0x200048fc

080157e4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b082      	sub	sp, #8
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80157ec:	f000 f818 	bl	8015820 <BSP_SD_AbortCallback>
}
 80157f0:	bf00      	nop
 80157f2:	3708      	adds	r7, #8
 80157f4:	46bd      	mov	sp, r7
 80157f6:	bd80      	pop	{r7, pc}

080157f8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80157f8:	b580      	push	{r7, lr}
 80157fa:	b082      	sub	sp, #8
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8015800:	f000 f9a8 	bl	8015b54 <BSP_SD_WriteCpltCallback>
}
 8015804:	bf00      	nop
 8015806:	3708      	adds	r7, #8
 8015808:	46bd      	mov	sp, r7
 801580a:	bd80      	pop	{r7, pc}

0801580c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801580c:	b580      	push	{r7, lr}
 801580e:	b082      	sub	sp, #8
 8015810:	af00      	add	r7, sp, #0
 8015812:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8015814:	f000 f9aa 	bl	8015b6c <BSP_SD_ReadCpltCallback>
}
 8015818:	bf00      	nop
 801581a:	3708      	adds	r7, #8
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}

08015820 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8015820:	b480      	push	{r7}
 8015822:	af00      	add	r7, sp, #0

}
 8015824:	bf00      	nop
 8015826:	46bd      	mov	sp, r7
 8015828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582c:	4770      	bx	lr

0801582e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801582e:	b580      	push	{r7, lr}
 8015830:	b082      	sub	sp, #8
 8015832:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8015834:	2301      	movs	r3, #1
 8015836:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8015838:	f000 f80c 	bl	8015854 <BSP_PlatformIsDetected>
 801583c:	4603      	mov	r3, r0
 801583e:	2b00      	cmp	r3, #0
 8015840:	d101      	bne.n	8015846 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8015842:	2300      	movs	r3, #0
 8015844:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8015846:	79fb      	ldrb	r3, [r7, #7]
 8015848:	b2db      	uxtb	r3, r3
}
 801584a:	4618      	mov	r0, r3
 801584c:	3708      	adds	r7, #8
 801584e:	46bd      	mov	sp, r7
 8015850:	bd80      	pop	{r7, pc}
	...

08015854 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8015854:	b580      	push	{r7, lr}
 8015856:	b082      	sub	sp, #8
 8015858:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801585a:	2301      	movs	r3, #1
 801585c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801585e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8015862:	4806      	ldr	r0, [pc, #24]	; (801587c <BSP_PlatformIsDetected+0x28>)
 8015864:	f7f5 f898 	bl	800a998 <HAL_GPIO_ReadPin>
 8015868:	4603      	mov	r3, r0
 801586a:	2b00      	cmp	r3, #0
 801586c:	d001      	beq.n	8015872 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801586e:	2300      	movs	r3, #0
 8015870:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8015872:	79fb      	ldrb	r3, [r7, #7]
}
 8015874:	4618      	mov	r0, r3
 8015876:	3708      	adds	r7, #8
 8015878:	46bd      	mov	sp, r7
 801587a:	bd80      	pop	{r7, pc}
 801587c:	40021800 	.word	0x40021800

08015880 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8015880:	b580      	push	{r7, lr}
 8015882:	b084      	sub	sp, #16
 8015884:	af00      	add	r7, sp, #0
 8015886:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8015888:	f7f3 fafc 	bl	8008e84 <HAL_GetTick>
 801588c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801588e:	e006      	b.n	801589e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015890:	f7ff ff8a 	bl	80157a8 <BSP_SD_GetCardState>
 8015894:	4603      	mov	r3, r0
 8015896:	2b00      	cmp	r3, #0
 8015898:	d101      	bne.n	801589e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801589a:	2300      	movs	r3, #0
 801589c:	e009      	b.n	80158b2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801589e:	f7f3 faf1 	bl	8008e84 <HAL_GetTick>
 80158a2:	4602      	mov	r2, r0
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	1ad3      	subs	r3, r2, r3
 80158a8:	687a      	ldr	r2, [r7, #4]
 80158aa:	429a      	cmp	r2, r3
 80158ac:	d8f0      	bhi.n	8015890 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80158ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80158b2:	4618      	mov	r0, r3
 80158b4:	3710      	adds	r7, #16
 80158b6:	46bd      	mov	sp, r7
 80158b8:	bd80      	pop	{r7, pc}
	...

080158bc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80158bc:	b580      	push	{r7, lr}
 80158be:	b082      	sub	sp, #8
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	4603      	mov	r3, r0
 80158c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80158c6:	4b0b      	ldr	r3, [pc, #44]	; (80158f4 <SD_CheckStatus+0x38>)
 80158c8:	2201      	movs	r2, #1
 80158ca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80158cc:	f7ff ff6c 	bl	80157a8 <BSP_SD_GetCardState>
 80158d0:	4603      	mov	r3, r0
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d107      	bne.n	80158e6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80158d6:	4b07      	ldr	r3, [pc, #28]	; (80158f4 <SD_CheckStatus+0x38>)
 80158d8:	781b      	ldrb	r3, [r3, #0]
 80158da:	b2db      	uxtb	r3, r3
 80158dc:	f023 0301 	bic.w	r3, r3, #1
 80158e0:	b2da      	uxtb	r2, r3
 80158e2:	4b04      	ldr	r3, [pc, #16]	; (80158f4 <SD_CheckStatus+0x38>)
 80158e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80158e6:	4b03      	ldr	r3, [pc, #12]	; (80158f4 <SD_CheckStatus+0x38>)
 80158e8:	781b      	ldrb	r3, [r3, #0]
 80158ea:	b2db      	uxtb	r3, r3
}
 80158ec:	4618      	mov	r0, r3
 80158ee:	3708      	adds	r7, #8
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd80      	pop	{r7, pc}
 80158f4:	2000022d 	.word	0x2000022d

080158f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b082      	sub	sp, #8
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	4603      	mov	r3, r0
 8015900:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8015902:	f7ff fef7 	bl	80156f4 <BSP_SD_Init>
 8015906:	4603      	mov	r3, r0
 8015908:	2b00      	cmp	r3, #0
 801590a:	d107      	bne.n	801591c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801590c:	79fb      	ldrb	r3, [r7, #7]
 801590e:	4618      	mov	r0, r3
 8015910:	f7ff ffd4 	bl	80158bc <SD_CheckStatus>
 8015914:	4603      	mov	r3, r0
 8015916:	461a      	mov	r2, r3
 8015918:	4b04      	ldr	r3, [pc, #16]	; (801592c <SD_initialize+0x34>)
 801591a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801591c:	4b03      	ldr	r3, [pc, #12]	; (801592c <SD_initialize+0x34>)
 801591e:	781b      	ldrb	r3, [r3, #0]
 8015920:	b2db      	uxtb	r3, r3
}
 8015922:	4618      	mov	r0, r3
 8015924:	3708      	adds	r7, #8
 8015926:	46bd      	mov	sp, r7
 8015928:	bd80      	pop	{r7, pc}
 801592a:	bf00      	nop
 801592c:	2000022d 	.word	0x2000022d

08015930 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b082      	sub	sp, #8
 8015934:	af00      	add	r7, sp, #0
 8015936:	4603      	mov	r3, r0
 8015938:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801593a:	79fb      	ldrb	r3, [r7, #7]
 801593c:	4618      	mov	r0, r3
 801593e:	f7ff ffbd 	bl	80158bc <SD_CheckStatus>
 8015942:	4603      	mov	r3, r0
}
 8015944:	4618      	mov	r0, r3
 8015946:	3708      	adds	r7, #8
 8015948:	46bd      	mov	sp, r7
 801594a:	bd80      	pop	{r7, pc}

0801594c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b086      	sub	sp, #24
 8015950:	af00      	add	r7, sp, #0
 8015952:	60b9      	str	r1, [r7, #8]
 8015954:	607a      	str	r2, [r7, #4]
 8015956:	603b      	str	r3, [r7, #0]
 8015958:	4603      	mov	r3, r0
 801595a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801595c:	2301      	movs	r3, #1
 801595e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015960:	f247 5030 	movw	r0, #30000	; 0x7530
 8015964:	f7ff ff8c 	bl	8015880 <SD_CheckStatusWithTimeout>
 8015968:	4603      	mov	r3, r0
 801596a:	2b00      	cmp	r3, #0
 801596c:	da01      	bge.n	8015972 <SD_read+0x26>
  {
    return res;
 801596e:	7dfb      	ldrb	r3, [r7, #23]
 8015970:	e03b      	b.n	80159ea <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8015972:	683a      	ldr	r2, [r7, #0]
 8015974:	6879      	ldr	r1, [r7, #4]
 8015976:	68b8      	ldr	r0, [r7, #8]
 8015978:	f7ff fee2 	bl	8015740 <BSP_SD_ReadBlocks_DMA>
 801597c:	4603      	mov	r3, r0
 801597e:	2b00      	cmp	r3, #0
 8015980:	d132      	bne.n	80159e8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8015982:	4b1c      	ldr	r3, [pc, #112]	; (80159f4 <SD_read+0xa8>)
 8015984:	2200      	movs	r2, #0
 8015986:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8015988:	f7f3 fa7c 	bl	8008e84 <HAL_GetTick>
 801598c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801598e:	bf00      	nop
 8015990:	4b18      	ldr	r3, [pc, #96]	; (80159f4 <SD_read+0xa8>)
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d108      	bne.n	80159aa <SD_read+0x5e>
 8015998:	f7f3 fa74 	bl	8008e84 <HAL_GetTick>
 801599c:	4602      	mov	r2, r0
 801599e:	693b      	ldr	r3, [r7, #16]
 80159a0:	1ad3      	subs	r3, r2, r3
 80159a2:	f247 522f 	movw	r2, #29999	; 0x752f
 80159a6:	4293      	cmp	r3, r2
 80159a8:	d9f2      	bls.n	8015990 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80159aa:	4b12      	ldr	r3, [pc, #72]	; (80159f4 <SD_read+0xa8>)
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d102      	bne.n	80159b8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80159b2:	2301      	movs	r3, #1
 80159b4:	75fb      	strb	r3, [r7, #23]
 80159b6:	e017      	b.n	80159e8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80159b8:	4b0e      	ldr	r3, [pc, #56]	; (80159f4 <SD_read+0xa8>)
 80159ba:	2200      	movs	r2, #0
 80159bc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80159be:	f7f3 fa61 	bl	8008e84 <HAL_GetTick>
 80159c2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80159c4:	e007      	b.n	80159d6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80159c6:	f7ff feef 	bl	80157a8 <BSP_SD_GetCardState>
 80159ca:	4603      	mov	r3, r0
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d102      	bne.n	80159d6 <SD_read+0x8a>
          {
            res = RES_OK;
 80159d0:	2300      	movs	r3, #0
 80159d2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80159d4:	e008      	b.n	80159e8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80159d6:	f7f3 fa55 	bl	8008e84 <HAL_GetTick>
 80159da:	4602      	mov	r2, r0
 80159dc:	693b      	ldr	r3, [r7, #16]
 80159de:	1ad3      	subs	r3, r2, r3
 80159e0:	f247 522f 	movw	r2, #29999	; 0x752f
 80159e4:	4293      	cmp	r3, r2
 80159e6:	d9ee      	bls.n	80159c6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80159e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80159ea:	4618      	mov	r0, r3
 80159ec:	3718      	adds	r7, #24
 80159ee:	46bd      	mov	sp, r7
 80159f0:	bd80      	pop	{r7, pc}
 80159f2:	bf00      	nop
 80159f4:	20001b80 	.word	0x20001b80

080159f8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b086      	sub	sp, #24
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	60b9      	str	r1, [r7, #8]
 8015a00:	607a      	str	r2, [r7, #4]
 8015a02:	603b      	str	r3, [r7, #0]
 8015a04:	4603      	mov	r3, r0
 8015a06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015a08:	2301      	movs	r3, #1
 8015a0a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8015a0c:	4b24      	ldr	r3, [pc, #144]	; (8015aa0 <SD_write+0xa8>)
 8015a0e:	2200      	movs	r2, #0
 8015a10:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015a12:	f247 5030 	movw	r0, #30000	; 0x7530
 8015a16:	f7ff ff33 	bl	8015880 <SD_CheckStatusWithTimeout>
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	da01      	bge.n	8015a24 <SD_write+0x2c>
  {
    return res;
 8015a20:	7dfb      	ldrb	r3, [r7, #23]
 8015a22:	e038      	b.n	8015a96 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8015a24:	683a      	ldr	r2, [r7, #0]
 8015a26:	6879      	ldr	r1, [r7, #4]
 8015a28:	68b8      	ldr	r0, [r7, #8]
 8015a2a:	f7ff fea3 	bl	8015774 <BSP_SD_WriteBlocks_DMA>
 8015a2e:	4603      	mov	r3, r0
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d12f      	bne.n	8015a94 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8015a34:	f7f3 fa26 	bl	8008e84 <HAL_GetTick>
 8015a38:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015a3a:	bf00      	nop
 8015a3c:	4b18      	ldr	r3, [pc, #96]	; (8015aa0 <SD_write+0xa8>)
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d108      	bne.n	8015a56 <SD_write+0x5e>
 8015a44:	f7f3 fa1e 	bl	8008e84 <HAL_GetTick>
 8015a48:	4602      	mov	r2, r0
 8015a4a:	693b      	ldr	r3, [r7, #16]
 8015a4c:	1ad3      	subs	r3, r2, r3
 8015a4e:	f247 522f 	movw	r2, #29999	; 0x752f
 8015a52:	4293      	cmp	r3, r2
 8015a54:	d9f2      	bls.n	8015a3c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8015a56:	4b12      	ldr	r3, [pc, #72]	; (8015aa0 <SD_write+0xa8>)
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d102      	bne.n	8015a64 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8015a5e:	2301      	movs	r3, #1
 8015a60:	75fb      	strb	r3, [r7, #23]
 8015a62:	e017      	b.n	8015a94 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8015a64:	4b0e      	ldr	r3, [pc, #56]	; (8015aa0 <SD_write+0xa8>)
 8015a66:	2200      	movs	r2, #0
 8015a68:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015a6a:	f7f3 fa0b 	bl	8008e84 <HAL_GetTick>
 8015a6e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015a70:	e007      	b.n	8015a82 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015a72:	f7ff fe99 	bl	80157a8 <BSP_SD_GetCardState>
 8015a76:	4603      	mov	r3, r0
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d102      	bne.n	8015a82 <SD_write+0x8a>
          {
            res = RES_OK;
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	75fb      	strb	r3, [r7, #23]
            break;
 8015a80:	e008      	b.n	8015a94 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015a82:	f7f3 f9ff 	bl	8008e84 <HAL_GetTick>
 8015a86:	4602      	mov	r2, r0
 8015a88:	693b      	ldr	r3, [r7, #16]
 8015a8a:	1ad3      	subs	r3, r2, r3
 8015a8c:	f247 522f 	movw	r2, #29999	; 0x752f
 8015a90:	4293      	cmp	r3, r2
 8015a92:	d9ee      	bls.n	8015a72 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8015a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8015a96:	4618      	mov	r0, r3
 8015a98:	3718      	adds	r7, #24
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	bd80      	pop	{r7, pc}
 8015a9e:	bf00      	nop
 8015aa0:	20001b7c 	.word	0x20001b7c

08015aa4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b08c      	sub	sp, #48	; 0x30
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	4603      	mov	r3, r0
 8015aac:	603a      	str	r2, [r7, #0]
 8015aae:	71fb      	strb	r3, [r7, #7]
 8015ab0:	460b      	mov	r3, r1
 8015ab2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015ab4:	2301      	movs	r3, #1
 8015ab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8015aba:	4b25      	ldr	r3, [pc, #148]	; (8015b50 <SD_ioctl+0xac>)
 8015abc:	781b      	ldrb	r3, [r3, #0]
 8015abe:	b2db      	uxtb	r3, r3
 8015ac0:	f003 0301 	and.w	r3, r3, #1
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d001      	beq.n	8015acc <SD_ioctl+0x28>
 8015ac8:	2303      	movs	r3, #3
 8015aca:	e03c      	b.n	8015b46 <SD_ioctl+0xa2>

  switch (cmd)
 8015acc:	79bb      	ldrb	r3, [r7, #6]
 8015ace:	2b03      	cmp	r3, #3
 8015ad0:	d834      	bhi.n	8015b3c <SD_ioctl+0x98>
 8015ad2:	a201      	add	r2, pc, #4	; (adr r2, 8015ad8 <SD_ioctl+0x34>)
 8015ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ad8:	08015ae9 	.word	0x08015ae9
 8015adc:	08015af1 	.word	0x08015af1
 8015ae0:	08015b09 	.word	0x08015b09
 8015ae4:	08015b23 	.word	0x08015b23
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8015ae8:	2300      	movs	r3, #0
 8015aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015aee:	e028      	b.n	8015b42 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8015af0:	f107 030c 	add.w	r3, r7, #12
 8015af4:	4618      	mov	r0, r3
 8015af6:	f7ff fe67 	bl	80157c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8015afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015afc:	683b      	ldr	r3, [r7, #0]
 8015afe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015b00:	2300      	movs	r3, #0
 8015b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015b06:	e01c      	b.n	8015b42 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015b08:	f107 030c 	add.w	r3, r7, #12
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	f7ff fe5b 	bl	80157c8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8015b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b14:	b29a      	uxth	r2, r3
 8015b16:	683b      	ldr	r3, [r7, #0]
 8015b18:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015b20:	e00f      	b.n	8015b42 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015b22:	f107 030c 	add.w	r3, r7, #12
 8015b26:	4618      	mov	r0, r3
 8015b28:	f7ff fe4e 	bl	80157c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8015b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b2e:	0a5a      	lsrs	r2, r3, #9
 8015b30:	683b      	ldr	r3, [r7, #0]
 8015b32:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015b34:	2300      	movs	r3, #0
 8015b36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015b3a:	e002      	b.n	8015b42 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8015b3c:	2304      	movs	r3, #4
 8015b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8015b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015b46:	4618      	mov	r0, r3
 8015b48:	3730      	adds	r7, #48	; 0x30
 8015b4a:	46bd      	mov	sp, r7
 8015b4c:	bd80      	pop	{r7, pc}
 8015b4e:	bf00      	nop
 8015b50:	2000022d 	.word	0x2000022d

08015b54 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8015b54:	b480      	push	{r7}
 8015b56:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8015b58:	4b03      	ldr	r3, [pc, #12]	; (8015b68 <BSP_SD_WriteCpltCallback+0x14>)
 8015b5a:	2201      	movs	r2, #1
 8015b5c:	601a      	str	r2, [r3, #0]
}
 8015b5e:	bf00      	nop
 8015b60:	46bd      	mov	sp, r7
 8015b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b66:	4770      	bx	lr
 8015b68:	20001b7c 	.word	0x20001b7c

08015b6c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8015b6c:	b480      	push	{r7}
 8015b6e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8015b70:	4b03      	ldr	r3, [pc, #12]	; (8015b80 <BSP_SD_ReadCpltCallback+0x14>)
 8015b72:	2201      	movs	r2, #1
 8015b74:	601a      	str	r2, [r3, #0]
}
 8015b76:	bf00      	nop
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b7e:	4770      	bx	lr
 8015b80:	20001b80 	.word	0x20001b80

08015b84 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015b84:	b580      	push	{r7, lr}
 8015b86:	b084      	sub	sp, #16
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	6078      	str	r0, [r7, #4]
 8015b8c:	460b      	mov	r3, r1
 8015b8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8015b90:	f44f 701d 	mov.w	r0, #628	; 0x274
 8015b94:	f006 fbe0 	bl	801c358 <malloc>
 8015b98:	4603      	mov	r3, r0
 8015b9a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d105      	bne.n	8015bae <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8015baa:	2302      	movs	r3, #2
 8015bac:	e034      	b.n	8015c18 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	68fa      	ldr	r2, [r7, #12]
 8015bb2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	7c1b      	ldrb	r3, [r3, #16]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d115      	bne.n	8015bea <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8015bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015bc2:	2202      	movs	r2, #2
 8015bc4:	2101      	movs	r1, #1
 8015bc6:	6878      	ldr	r0, [r7, #4]
 8015bc8:	f006 f9d5 	bl	801bf76 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	2201      	movs	r2, #1
 8015bd0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8015bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015bd8:	2202      	movs	r2, #2
 8015bda:	2181      	movs	r1, #129	; 0x81
 8015bdc:	6878      	ldr	r0, [r7, #4]
 8015bde:	f006 f9ca 	bl	801bf76 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	2201      	movs	r2, #1
 8015be6:	871a      	strh	r2, [r3, #56]	; 0x38
 8015be8:	e012      	b.n	8015c10 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8015bea:	2340      	movs	r3, #64	; 0x40
 8015bec:	2202      	movs	r2, #2
 8015bee:	2101      	movs	r1, #1
 8015bf0:	6878      	ldr	r0, [r7, #4]
 8015bf2:	f006 f9c0 	bl	801bf76 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	2201      	movs	r2, #1
 8015bfa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8015bfe:	2340      	movs	r3, #64	; 0x40
 8015c00:	2202      	movs	r2, #2
 8015c02:	2181      	movs	r1, #129	; 0x81
 8015c04:	6878      	ldr	r0, [r7, #4]
 8015c06:	f006 f9b6 	bl	801bf76 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	2201      	movs	r2, #1
 8015c0e:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8015c10:	6878      	ldr	r0, [r7, #4]
 8015c12:	f000 f990 	bl	8015f36 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8015c16:	2300      	movs	r3, #0
}
 8015c18:	4618      	mov	r0, r3
 8015c1a:	3710      	adds	r7, #16
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	bd80      	pop	{r7, pc}

08015c20 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b082      	sub	sp, #8
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
 8015c28:	460b      	mov	r3, r1
 8015c2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8015c2c:	2101      	movs	r1, #1
 8015c2e:	6878      	ldr	r0, [r7, #4]
 8015c30:	f006 f9c7 	bl	801bfc2 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	2200      	movs	r2, #0
 8015c38:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8015c3c:	2181      	movs	r1, #129	; 0x81
 8015c3e:	6878      	ldr	r0, [r7, #4]
 8015c40:	f006 f9bf 	bl	801bfc2 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	2200      	movs	r2, #0
 8015c48:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8015c4a:	6878      	ldr	r0, [r7, #4]
 8015c4c:	f000 f9c9 	bl	8015fe2 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d009      	beq.n	8015c6e <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015c60:	4618      	mov	r0, r3
 8015c62:	f006 fb81 	bl	801c368 <free>
    pdev->pClassData = NULL;
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	2200      	movs	r2, #0
 8015c6a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015c6e:	2300      	movs	r3, #0
}
 8015c70:	4618      	mov	r0, r3
 8015c72:	3708      	adds	r7, #8
 8015c74:	46bd      	mov	sp, r7
 8015c76:	bd80      	pop	{r7, pc}

08015c78 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b086      	sub	sp, #24
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	6078      	str	r0, [r7, #4]
 8015c80:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015c88:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8015c8e:	2300      	movs	r3, #0
 8015c90:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015c92:	683b      	ldr	r3, [r7, #0]
 8015c94:	781b      	ldrb	r3, [r3, #0]
 8015c96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d04e      	beq.n	8015d3c <USBD_MSC_Setup+0xc4>
 8015c9e:	2b20      	cmp	r3, #32
 8015ca0:	f040 80c8 	bne.w	8015e34 <USBD_MSC_Setup+0x1bc>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8015ca4:	683b      	ldr	r3, [r7, #0]
 8015ca6:	785b      	ldrb	r3, [r3, #1]
 8015ca8:	2bfe      	cmp	r3, #254	; 0xfe
 8015caa:	d002      	beq.n	8015cb2 <USBD_MSC_Setup+0x3a>
 8015cac:	2bff      	cmp	r3, #255	; 0xff
 8015cae:	d025      	beq.n	8015cfc <USBD_MSC_Setup+0x84>
 8015cb0:	e03c      	b.n	8015d2c <USBD_MSC_Setup+0xb4>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8015cb2:	683b      	ldr	r3, [r7, #0]
 8015cb4:	885b      	ldrh	r3, [r3, #2]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d119      	bne.n	8015cee <USBD_MSC_Setup+0x76>
 8015cba:	683b      	ldr	r3, [r7, #0]
 8015cbc:	88db      	ldrh	r3, [r3, #6]
 8015cbe:	2b01      	cmp	r3, #1
 8015cc0:	d115      	bne.n	8015cee <USBD_MSC_Setup+0x76>
          ((req->bmRequest & 0x80U) == 0x80U))
 8015cc2:	683b      	ldr	r3, [r7, #0]
 8015cc4:	781b      	ldrb	r3, [r3, #0]
 8015cc6:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	da10      	bge.n	8015cee <USBD_MSC_Setup+0x76>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015cd2:	699b      	ldr	r3, [r3, #24]
 8015cd4:	4798      	blx	r3
 8015cd6:	4603      	mov	r3, r0
 8015cd8:	461a      	mov	r2, r3
 8015cda:	693b      	ldr	r3, [r7, #16]
 8015cdc:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8015cde:	693b      	ldr	r3, [r7, #16]
 8015ce0:	2201      	movs	r2, #1
 8015ce2:	4619      	mov	r1, r3
 8015ce4:	6878      	ldr	r0, [r7, #4]
 8015ce6:	f002 fd3d 	bl	8018764 <USBD_CtlSendData>
 8015cea:	bf00      	nop
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8015cec:	e025      	b.n	8015d3a <USBD_MSC_Setup+0xc2>
        USBD_CtlError(pdev, req);
 8015cee:	6839      	ldr	r1, [r7, #0]
 8015cf0:	6878      	ldr	r0, [r7, #4]
 8015cf2:	f002 fcc6 	bl	8018682 <USBD_CtlError>
        ret = USBD_FAIL;
 8015cf6:	2303      	movs	r3, #3
 8015cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8015cfa:	e01e      	b.n	8015d3a <USBD_MSC_Setup+0xc2>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8015cfc:	683b      	ldr	r3, [r7, #0]
 8015cfe:	885b      	ldrh	r3, [r3, #2]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d10c      	bne.n	8015d1e <USBD_MSC_Setup+0xa6>
 8015d04:	683b      	ldr	r3, [r7, #0]
 8015d06:	88db      	ldrh	r3, [r3, #6]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d108      	bne.n	8015d1e <USBD_MSC_Setup+0xa6>
          ((req->bmRequest & 0x80U) != 0x80U))
 8015d0c:	683b      	ldr	r3, [r7, #0]
 8015d0e:	781b      	ldrb	r3, [r3, #0]
 8015d10:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	db03      	blt.n	8015d1e <USBD_MSC_Setup+0xa6>
      {
        MSC_BOT_Reset(pdev);
 8015d16:	6878      	ldr	r0, [r7, #4]
 8015d18:	f000 f941 	bl	8015f9e <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8015d1c:	e00d      	b.n	8015d3a <USBD_MSC_Setup+0xc2>
        USBD_CtlError(pdev, req);
 8015d1e:	6839      	ldr	r1, [r7, #0]
 8015d20:	6878      	ldr	r0, [r7, #4]
 8015d22:	f002 fcae 	bl	8018682 <USBD_CtlError>
        ret = USBD_FAIL;
 8015d26:	2303      	movs	r3, #3
 8015d28:	75fb      	strb	r3, [r7, #23]
      break;
 8015d2a:	e006      	b.n	8015d3a <USBD_MSC_Setup+0xc2>

    default:
      USBD_CtlError(pdev, req);
 8015d2c:	6839      	ldr	r1, [r7, #0]
 8015d2e:	6878      	ldr	r0, [r7, #4]
 8015d30:	f002 fca7 	bl	8018682 <USBD_CtlError>
      ret = USBD_FAIL;
 8015d34:	2303      	movs	r3, #3
 8015d36:	75fb      	strb	r3, [r7, #23]
      break;
 8015d38:	bf00      	nop
    }
    break;
 8015d3a:	e082      	b.n	8015e42 <USBD_MSC_Setup+0x1ca>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8015d3c:	683b      	ldr	r3, [r7, #0]
 8015d3e:	785b      	ldrb	r3, [r3, #1]
 8015d40:	2b0b      	cmp	r3, #11
 8015d42:	d86e      	bhi.n	8015e22 <USBD_MSC_Setup+0x1aa>
 8015d44:	a201      	add	r2, pc, #4	; (adr r2, 8015d4c <USBD_MSC_Setup+0xd4>)
 8015d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d4a:	bf00      	nop
 8015d4c:	08015d7d 	.word	0x08015d7d
 8015d50:	08015df3 	.word	0x08015df3
 8015d54:	08015e23 	.word	0x08015e23
 8015d58:	08015e23 	.word	0x08015e23
 8015d5c:	08015e23 	.word	0x08015e23
 8015d60:	08015e23 	.word	0x08015e23
 8015d64:	08015e23 	.word	0x08015e23
 8015d68:	08015e23 	.word	0x08015e23
 8015d6c:	08015e23 	.word	0x08015e23
 8015d70:	08015e23 	.word	0x08015e23
 8015d74:	08015da5 	.word	0x08015da5
 8015d78:	08015dcd 	.word	0x08015dcd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d82:	2b03      	cmp	r3, #3
 8015d84:	d107      	bne.n	8015d96 <USBD_MSC_Setup+0x11e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015d86:	f107 030e 	add.w	r3, r7, #14
 8015d8a:	2202      	movs	r2, #2
 8015d8c:	4619      	mov	r1, r3
 8015d8e:	6878      	ldr	r0, [r7, #4]
 8015d90:	f002 fce8 	bl	8018764 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8015d94:	e04d      	b.n	8015e32 <USBD_MSC_Setup+0x1ba>
        USBD_CtlError(pdev, req);
 8015d96:	6839      	ldr	r1, [r7, #0]
 8015d98:	6878      	ldr	r0, [r7, #4]
 8015d9a:	f002 fc72 	bl	8018682 <USBD_CtlError>
        ret = USBD_FAIL;
 8015d9e:	2303      	movs	r3, #3
 8015da0:	75fb      	strb	r3, [r7, #23]
      break;
 8015da2:	e046      	b.n	8015e32 <USBD_MSC_Setup+0x1ba>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015daa:	2b03      	cmp	r3, #3
 8015dac:	d107      	bne.n	8015dbe <USBD_MSC_Setup+0x146>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8015dae:	693b      	ldr	r3, [r7, #16]
 8015db0:	3304      	adds	r3, #4
 8015db2:	2201      	movs	r2, #1
 8015db4:	4619      	mov	r1, r3
 8015db6:	6878      	ldr	r0, [r7, #4]
 8015db8:	f002 fcd4 	bl	8018764 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8015dbc:	e039      	b.n	8015e32 <USBD_MSC_Setup+0x1ba>
        USBD_CtlError(pdev, req);
 8015dbe:	6839      	ldr	r1, [r7, #0]
 8015dc0:	6878      	ldr	r0, [r7, #4]
 8015dc2:	f002 fc5e 	bl	8018682 <USBD_CtlError>
        ret = USBD_FAIL;
 8015dc6:	2303      	movs	r3, #3
 8015dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8015dca:	e032      	b.n	8015e32 <USBD_MSC_Setup+0x1ba>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015dd2:	2b03      	cmp	r3, #3
 8015dd4:	d106      	bne.n	8015de4 <USBD_MSC_Setup+0x16c>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 8015dd6:	683b      	ldr	r3, [r7, #0]
 8015dd8:	885b      	ldrh	r3, [r3, #2]
 8015dda:	b2db      	uxtb	r3, r3
 8015ddc:	461a      	mov	r2, r3
 8015dde:	693b      	ldr	r3, [r7, #16]
 8015de0:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8015de2:	e026      	b.n	8015e32 <USBD_MSC_Setup+0x1ba>
        USBD_CtlError(pdev, req);
 8015de4:	6839      	ldr	r1, [r7, #0]
 8015de6:	6878      	ldr	r0, [r7, #4]
 8015de8:	f002 fc4b 	bl	8018682 <USBD_CtlError>
        ret = USBD_FAIL;
 8015dec:	2303      	movs	r3, #3
 8015dee:	75fb      	strb	r3, [r7, #23]
      break;
 8015df0:	e01f      	b.n	8015e32 <USBD_MSC_Setup+0x1ba>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015df8:	2b03      	cmp	r3, #3
 8015dfa:	d119      	bne.n	8015e30 <USBD_MSC_Setup+0x1b8>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8015dfc:	683b      	ldr	r3, [r7, #0]
 8015dfe:	885b      	ldrh	r3, [r3, #2]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d115      	bne.n	8015e30 <USBD_MSC_Setup+0x1b8>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8015e04:	683b      	ldr	r3, [r7, #0]
 8015e06:	889b      	ldrh	r3, [r3, #4]
 8015e08:	b2db      	uxtb	r3, r3
 8015e0a:	4619      	mov	r1, r3
 8015e0c:	6878      	ldr	r0, [r7, #4]
 8015e0e:	f006 f8f7 	bl	801c000 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8015e12:	683b      	ldr	r3, [r7, #0]
 8015e14:	889b      	ldrh	r3, [r3, #4]
 8015e16:	b2db      	uxtb	r3, r3
 8015e18:	4619      	mov	r1, r3
 8015e1a:	6878      	ldr	r0, [r7, #4]
 8015e1c:	f000 fa5c 	bl	80162d8 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8015e20:	e006      	b.n	8015e30 <USBD_MSC_Setup+0x1b8>

    default:
      USBD_CtlError(pdev, req);
 8015e22:	6839      	ldr	r1, [r7, #0]
 8015e24:	6878      	ldr	r0, [r7, #4]
 8015e26:	f002 fc2c 	bl	8018682 <USBD_CtlError>
      ret = USBD_FAIL;
 8015e2a:	2303      	movs	r3, #3
 8015e2c:	75fb      	strb	r3, [r7, #23]
      break;
 8015e2e:	e000      	b.n	8015e32 <USBD_MSC_Setup+0x1ba>
      break;
 8015e30:	bf00      	nop
    }
    break;
 8015e32:	e006      	b.n	8015e42 <USBD_MSC_Setup+0x1ca>

  default:
    USBD_CtlError(pdev, req);
 8015e34:	6839      	ldr	r1, [r7, #0]
 8015e36:	6878      	ldr	r0, [r7, #4]
 8015e38:	f002 fc23 	bl	8018682 <USBD_CtlError>
    ret = USBD_FAIL;
 8015e3c:	2303      	movs	r3, #3
 8015e3e:	75fb      	strb	r3, [r7, #23]
    break;
 8015e40:	bf00      	nop
  }

  return (uint8_t)ret;
 8015e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e44:	4618      	mov	r0, r3
 8015e46:	3718      	adds	r7, #24
 8015e48:	46bd      	mov	sp, r7
 8015e4a:	bd80      	pop	{r7, pc}

08015e4c <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b082      	sub	sp, #8
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
 8015e54:	460b      	mov	r3, r1
 8015e56:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8015e58:	78fb      	ldrb	r3, [r7, #3]
 8015e5a:	4619      	mov	r1, r3
 8015e5c:	6878      	ldr	r0, [r7, #4]
 8015e5e:	f000 f8d1 	bl	8016004 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8015e62:	2300      	movs	r3, #0
}
 8015e64:	4618      	mov	r0, r3
 8015e66:	3708      	adds	r7, #8
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	bd80      	pop	{r7, pc}

08015e6c <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b082      	sub	sp, #8
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
 8015e74:	460b      	mov	r3, r1
 8015e76:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8015e78:	78fb      	ldrb	r3, [r7, #3]
 8015e7a:	4619      	mov	r1, r3
 8015e7c:	6878      	ldr	r0, [r7, #4]
 8015e7e:	f000 f8f3 	bl	8016068 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8015e82:	2300      	movs	r3, #0
}
 8015e84:	4618      	mov	r0, r3
 8015e86:	3708      	adds	r7, #8
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	bd80      	pop	{r7, pc}

08015e8c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8015e8c:	b480      	push	{r7}
 8015e8e:	b083      	sub	sp, #12
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	2220      	movs	r2, #32
 8015e98:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8015e9a:	4b03      	ldr	r3, [pc, #12]	; (8015ea8 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	370c      	adds	r7, #12
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea6:	4770      	bx	lr
 8015ea8:	20000268 	.word	0x20000268

08015eac <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8015eac:	b480      	push	{r7}
 8015eae:	b083      	sub	sp, #12
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	2220      	movs	r2, #32
 8015eb8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8015eba:	4b03      	ldr	r3, [pc, #12]	; (8015ec8 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	370c      	adds	r7, #12
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec6:	4770      	bx	lr
 8015ec8:	20000288 	.word	0x20000288

08015ecc <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015ecc:	b480      	push	{r7}
 8015ece:	b083      	sub	sp, #12
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	2220      	movs	r2, #32
 8015ed8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8015eda:	4b03      	ldr	r3, [pc, #12]	; (8015ee8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8015edc:	4618      	mov	r0, r3
 8015ede:	370c      	adds	r7, #12
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee6:	4770      	bx	lr
 8015ee8:	200002a8 	.word	0x200002a8

08015eec <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015eec:	b480      	push	{r7}
 8015eee:	b083      	sub	sp, #12
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	220a      	movs	r2, #10
 8015ef8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8015efa:	4b03      	ldr	r3, [pc, #12]	; (8015f08 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015efc:	4618      	mov	r0, r3
 8015efe:	370c      	adds	r7, #12
 8015f00:	46bd      	mov	sp, r7
 8015f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f06:	4770      	bx	lr
 8015f08:	200002c8 	.word	0x200002c8

08015f0c <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8015f0c:	b480      	push	{r7}
 8015f0e:	b083      	sub	sp, #12
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	6078      	str	r0, [r7, #4]
 8015f14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015f16:	683b      	ldr	r3, [r7, #0]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d101      	bne.n	8015f20 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015f1c:	2303      	movs	r3, #3
 8015f1e:	e004      	b.n	8015f2a <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	683a      	ldr	r2, [r7, #0]
 8015f24:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8015f28:	2300      	movs	r3, #0
}
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	370c      	adds	r7, #12
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f34:	4770      	bx	lr

08015f36 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8015f36:	b580      	push	{r7, lr}
 8015f38:	b084      	sub	sp, #16
 8015f3a:	af00      	add	r7, sp, #0
 8015f3c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015f44:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	2200      	movs	r2, #0
 8015f4a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	2200      	movs	r2, #0
 8015f50:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	2200      	movs	r2, #0
 8015f56:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	2200      	movs	r2, #0
 8015f5e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	2200      	movs	r2, #0
 8015f66:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	2000      	movs	r0, #0
 8015f74:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8015f76:	2101      	movs	r1, #1
 8015f78:	6878      	ldr	r0, [r7, #4]
 8015f7a:	f006 f841 	bl	801c000 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8015f7e:	2181      	movs	r1, #129	; 0x81
 8015f80:	6878      	ldr	r0, [r7, #4]
 8015f82:	f006 f83d 	bl	801c000 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8015f8c:	231f      	movs	r3, #31
 8015f8e:	2101      	movs	r1, #1
 8015f90:	6878      	ldr	r0, [r7, #4]
 8015f92:	f006 f8fe 	bl	801c192 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8015f96:	bf00      	nop
 8015f98:	3710      	adds	r7, #16
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bd80      	pop	{r7, pc}

08015f9e <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8015f9e:	b580      	push	{r7, lr}
 8015fa0:	b084      	sub	sp, #16
 8015fa2:	af00      	add	r7, sp, #0
 8015fa4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015fac:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	2200      	movs	r2, #0
 8015fb2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	2201      	movs	r2, #1
 8015fb8:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8015fba:	2181      	movs	r1, #129	; 0x81
 8015fbc:	6878      	ldr	r0, [r7, #4]
 8015fbe:	f006 f85d 	bl	801c07c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8015fc2:	2101      	movs	r1, #1
 8015fc4:	6878      	ldr	r0, [r7, #4]
 8015fc6:	f006 f859 	bl	801c07c <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8015fd0:	231f      	movs	r3, #31
 8015fd2:	2101      	movs	r1, #1
 8015fd4:	6878      	ldr	r0, [r7, #4]
 8015fd6:	f006 f8dc 	bl	801c192 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8015fda:	bf00      	nop
 8015fdc:	3710      	adds	r7, #16
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	bd80      	pop	{r7, pc}

08015fe2 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8015fe2:	b480      	push	{r7}
 8015fe4:	b085      	sub	sp, #20
 8015fe6:	af00      	add	r7, sp, #0
 8015fe8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015ff0:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	721a      	strb	r2, [r3, #8]
}
 8015ff8:	bf00      	nop
 8015ffa:	3714      	adds	r7, #20
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016002:	4770      	bx	lr

08016004 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016004:	b580      	push	{r7, lr}
 8016006:	b084      	sub	sp, #16
 8016008:	af00      	add	r7, sp, #0
 801600a:	6078      	str	r0, [r7, #4]
 801600c:	460b      	mov	r3, r1
 801600e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016016:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	7a1b      	ldrb	r3, [r3, #8]
 801601c:	2b02      	cmp	r3, #2
 801601e:	d005      	beq.n	801602c <MSC_BOT_DataIn+0x28>
 8016020:	2b02      	cmp	r3, #2
 8016022:	db1a      	blt.n	801605a <MSC_BOT_DataIn+0x56>
 8016024:	3b03      	subs	r3, #3
 8016026:	2b01      	cmp	r3, #1
 8016028:	d817      	bhi.n	801605a <MSC_BOT_DataIn+0x56>
 801602a:	e011      	b.n	8016050 <MSC_BOT_DataIn+0x4c>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8016038:	461a      	mov	r2, r3
 801603a:	6878      	ldr	r0, [r7, #4]
 801603c:	f000 f974 	bl	8016328 <SCSI_ProcessCmd>
 8016040:	4603      	mov	r3, r0
 8016042:	2b00      	cmp	r3, #0
 8016044:	da0b      	bge.n	801605e <MSC_BOT_DataIn+0x5a>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8016046:	2101      	movs	r1, #1
 8016048:	6878      	ldr	r0, [r7, #4]
 801604a:	f000 f8eb 	bl	8016224 <MSC_BOT_SendCSW>
    }
    break;
 801604e:	e006      	b.n	801605e <MSC_BOT_DataIn+0x5a>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8016050:	2100      	movs	r1, #0
 8016052:	6878      	ldr	r0, [r7, #4]
 8016054:	f000 f8e6 	bl	8016224 <MSC_BOT_SendCSW>
    break;
 8016058:	e002      	b.n	8016060 <MSC_BOT_DataIn+0x5c>

  default:
    break;
 801605a:	bf00      	nop
 801605c:	e000      	b.n	8016060 <MSC_BOT_DataIn+0x5c>
    break;
 801605e:	bf00      	nop
  }
}
 8016060:	bf00      	nop
 8016062:	3710      	adds	r7, #16
 8016064:	46bd      	mov	sp, r7
 8016066:	bd80      	pop	{r7, pc}

08016068 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b084      	sub	sp, #16
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
 8016070:	460b      	mov	r3, r1
 8016072:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801607a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	7a1b      	ldrb	r3, [r3, #8]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d002      	beq.n	801608a <MSC_BOT_DataOut+0x22>
 8016084:	2b01      	cmp	r3, #1
 8016086:	d004      	beq.n	8016092 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8016088:	e015      	b.n	80160b6 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 801608a:	6878      	ldr	r0, [r7, #4]
 801608c:	f000 f818 	bl	80160c0 <MSC_BOT_CBW_Decode>
      break;
 8016090:	e011      	b.n	80160b6 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801609e:	461a      	mov	r2, r3
 80160a0:	6878      	ldr	r0, [r7, #4]
 80160a2:	f000 f941 	bl	8016328 <SCSI_ProcessCmd>
 80160a6:	4603      	mov	r3, r0
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	da03      	bge.n	80160b4 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80160ac:	2101      	movs	r1, #1
 80160ae:	6878      	ldr	r0, [r7, #4]
 80160b0:	f000 f8b8 	bl	8016224 <MSC_BOT_SendCSW>
      break;
 80160b4:	bf00      	nop
  }
}
 80160b6:	bf00      	nop
 80160b8:	3710      	adds	r7, #16
 80160ba:	46bd      	mov	sp, r7
 80160bc:	bd80      	pop	{r7, pc}
	...

080160c0 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b084      	sub	sp, #16
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80160ce:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80160e8:	2101      	movs	r1, #1
 80160ea:	6878      	ldr	r0, [r7, #4]
 80160ec:	f006 f872 	bl	801c1d4 <USBD_LL_GetRxDataSize>
 80160f0:	4603      	mov	r3, r0
 80160f2:	2b1f      	cmp	r3, #31
 80160f4:	d114      	bne.n	8016120 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80160fc:	4a32      	ldr	r2, [pc, #200]	; (80161c8 <MSC_BOT_CBW_Decode+0x108>)
 80160fe:	4293      	cmp	r3, r2
 8016100:	d10e      	bne.n	8016120 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8016108:	2b01      	cmp	r3, #1
 801610a:	d809      	bhi.n	8016120 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8016112:	2b00      	cmp	r3, #0
 8016114:	d004      	beq.n	8016120 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801611c:	2b10      	cmp	r3, #16
 801611e:	d90e      	bls.n	801613e <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8016126:	2320      	movs	r3, #32
 8016128:	2205      	movs	r2, #5
 801612a:	6878      	ldr	r0, [r7, #4]
 801612c:	f000 fd71 	bl	8016c12 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	2202      	movs	r2, #2
 8016134:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8016136:	6878      	ldr	r0, [r7, #4]
 8016138:	f000 f8a0 	bl	801627c <MSC_BOT_Abort>
 801613c:	e041      	b.n	80161c2 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801614a:	461a      	mov	r2, r3
 801614c:	6878      	ldr	r0, [r7, #4]
 801614e:	f000 f8eb 	bl	8016328 <SCSI_ProcessCmd>
 8016152:	4603      	mov	r3, r0
 8016154:	2b00      	cmp	r3, #0
 8016156:	da0c      	bge.n	8016172 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	7a1b      	ldrb	r3, [r3, #8]
 801615c:	2b05      	cmp	r3, #5
 801615e:	d104      	bne.n	801616a <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8016160:	2101      	movs	r1, #1
 8016162:	6878      	ldr	r0, [r7, #4]
 8016164:	f000 f85e 	bl	8016224 <MSC_BOT_SendCSW>
 8016168:	e02b      	b.n	80161c2 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801616a:	6878      	ldr	r0, [r7, #4]
 801616c:	f000 f886 	bl	801627c <MSC_BOT_Abort>
 8016170:	e027      	b.n	80161c2 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	7a1b      	ldrb	r3, [r3, #8]
 8016176:	2b02      	cmp	r3, #2
 8016178:	d022      	beq.n	80161c0 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801617e:	2b01      	cmp	r3, #1
 8016180:	d01e      	beq.n	80161c0 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8016186:	2b03      	cmp	r3, #3
 8016188:	d01a      	beq.n	80161c0 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	68db      	ldr	r3, [r3, #12]
 801618e:	2b00      	cmp	r3, #0
 8016190:	d009      	beq.n	80161a6 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	f103 0110 	add.w	r1, r3, #16
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	68db      	ldr	r3, [r3, #12]
 801619c:	461a      	mov	r2, r3
 801619e:	6878      	ldr	r0, [r7, #4]
 80161a0:	f000 f814 	bl	80161cc <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80161a4:	e00d      	b.n	80161c2 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	68db      	ldr	r3, [r3, #12]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d104      	bne.n	80161b8 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80161ae:	2100      	movs	r1, #0
 80161b0:	6878      	ldr	r0, [r7, #4]
 80161b2:	f000 f837 	bl	8016224 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80161b6:	e004      	b.n	80161c2 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80161b8:	6878      	ldr	r0, [r7, #4]
 80161ba:	f000 f85f 	bl	801627c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80161be:	e000      	b.n	80161c2 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 80161c0:	bf00      	nop
    }
  }
}
 80161c2:	3710      	adds	r7, #16
 80161c4:	46bd      	mov	sp, r7
 80161c6:	bd80      	pop	{r7, pc}
 80161c8:	43425355 	.word	0x43425355

080161cc <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b086      	sub	sp, #24
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	60f8      	str	r0, [r7, #12]
 80161d4:	60b9      	str	r1, [r7, #8]
 80161d6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80161de:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 80161e0:	697b      	ldr	r3, [r7, #20]
 80161e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80161e6:	687a      	ldr	r2, [r7, #4]
 80161e8:	4293      	cmp	r3, r2
 80161ea:	bf28      	it	cs
 80161ec:	4613      	movcs	r3, r2
 80161ee:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80161f0:	697b      	ldr	r3, [r7, #20]
 80161f2:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	1ad2      	subs	r2, r2, r3
 80161fa:	697b      	ldr	r3, [r7, #20]
 80161fc:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8016200:	697b      	ldr	r3, [r7, #20]
 8016202:	2200      	movs	r2, #0
 8016204:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8016208:	697b      	ldr	r3, [r7, #20]
 801620a:	2204      	movs	r2, #4
 801620c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 801620e:	693b      	ldr	r3, [r7, #16]
 8016210:	68ba      	ldr	r2, [r7, #8]
 8016212:	2181      	movs	r1, #129	; 0x81
 8016214:	68f8      	ldr	r0, [r7, #12]
 8016216:	f005 ff9b 	bl	801c150 <USBD_LL_Transmit>
}
 801621a:	bf00      	nop
 801621c:	3718      	adds	r7, #24
 801621e:	46bd      	mov	sp, r7
 8016220:	bd80      	pop	{r7, pc}
	...

08016224 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8016224:	b580      	push	{r7, lr}
 8016226:	b084      	sub	sp, #16
 8016228:	af00      	add	r7, sp, #0
 801622a:	6078      	str	r0, [r7, #4]
 801622c:	460b      	mov	r3, r1
 801622e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016236:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	4a0f      	ldr	r2, [pc, #60]	; (8016278 <MSC_BOT_SendCSW+0x54>)
 801623c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	78fa      	ldrb	r2, [r7, #3]
 8016244:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	2200      	movs	r2, #0
 801624c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8016254:	230d      	movs	r3, #13
 8016256:	2181      	movs	r1, #129	; 0x81
 8016258:	6878      	ldr	r0, [r7, #4]
 801625a:	f005 ff79 	bl	801c150 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8016264:	231f      	movs	r3, #31
 8016266:	2101      	movs	r1, #1
 8016268:	6878      	ldr	r0, [r7, #4]
 801626a:	f005 ff92 	bl	801c192 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 801626e:	bf00      	nop
 8016270:	3710      	adds	r7, #16
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}
 8016276:	bf00      	nop
 8016278:	53425355 	.word	0x53425355

0801627c <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801627c:	b580      	push	{r7, lr}
 801627e:	b084      	sub	sp, #16
 8016280:	af00      	add	r7, sp, #0
 8016282:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801628a:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8016292:	2b00      	cmp	r3, #0
 8016294:	d10c      	bne.n	80162b0 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 801629c:	2b00      	cmp	r3, #0
 801629e:	d007      	beq.n	80162b0 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d103      	bne.n	80162b0 <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80162a8:	2101      	movs	r1, #1
 80162aa:	6878      	ldr	r0, [r7, #4]
 80162ac:	f005 fec7 	bl	801c03e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80162b0:	2181      	movs	r1, #129	; 0x81
 80162b2:	6878      	ldr	r0, [r7, #4]
 80162b4:	f005 fec3 	bl	801c03e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	7a5b      	ldrb	r3, [r3, #9]
 80162bc:	2b02      	cmp	r3, #2
 80162be:	d107      	bne.n	80162d0 <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80162c0:	2181      	movs	r1, #129	; 0x81
 80162c2:	6878      	ldr	r0, [r7, #4]
 80162c4:	f005 febb 	bl	801c03e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80162c8:	2101      	movs	r1, #1
 80162ca:	6878      	ldr	r0, [r7, #4]
 80162cc:	f005 feb7 	bl	801c03e <USBD_LL_StallEP>
  }
}
 80162d0:	bf00      	nop
 80162d2:	3710      	adds	r7, #16
 80162d4:	46bd      	mov	sp, r7
 80162d6:	bd80      	pop	{r7, pc}

080162d8 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b084      	sub	sp, #16
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
 80162e0:	460b      	mov	r3, r1
 80162e2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80162ea:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	7a5b      	ldrb	r3, [r3, #9]
 80162f0:	2b02      	cmp	r3, #2
 80162f2:	d108      	bne.n	8016306 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80162f4:	2181      	movs	r1, #129	; 0x81
 80162f6:	6878      	ldr	r0, [r7, #4]
 80162f8:	f005 fea1 	bl	801c03e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80162fc:	2101      	movs	r1, #1
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	f005 fe9d 	bl	801c03e <USBD_LL_StallEP>
 8016304:	e00d      	b.n	8016322 <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8016306:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801630a:	2b00      	cmp	r3, #0
 801630c:	da08      	bge.n	8016320 <MSC_BOT_CplClrFeature+0x48>
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	7a5b      	ldrb	r3, [r3, #9]
 8016312:	2b01      	cmp	r3, #1
 8016314:	d004      	beq.n	8016320 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8016316:	2101      	movs	r1, #1
 8016318:	6878      	ldr	r0, [r7, #4]
 801631a:	f7ff ff83 	bl	8016224 <MSC_BOT_SendCSW>
 801631e:	e000      	b.n	8016322 <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8016320:	bf00      	nop
  }
}
 8016322:	3710      	adds	r7, #16
 8016324:	46bd      	mov	sp, r7
 8016326:	bd80      	pop	{r7, pc}

08016328 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8016328:	b580      	push	{r7, lr}
 801632a:	b086      	sub	sp, #24
 801632c:	af00      	add	r7, sp, #0
 801632e:	60f8      	str	r0, [r7, #12]
 8016330:	460b      	mov	r3, r1
 8016332:	607a      	str	r2, [r7, #4]
 8016334:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801633c:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	781b      	ldrb	r3, [r3, #0]
 8016342:	2baa      	cmp	r3, #170	; 0xaa
 8016344:	f000 8144 	beq.w	80165d0 <SCSI_ProcessCmd+0x2a8>
 8016348:	2baa      	cmp	r3, #170	; 0xaa
 801634a:	f300 8153 	bgt.w	80165f4 <SCSI_ProcessCmd+0x2cc>
 801634e:	2ba8      	cmp	r3, #168	; 0xa8
 8016350:	f000 812c 	beq.w	80165ac <SCSI_ProcessCmd+0x284>
 8016354:	2ba8      	cmp	r3, #168	; 0xa8
 8016356:	f300 814d 	bgt.w	80165f4 <SCSI_ProcessCmd+0x2cc>
 801635a:	2b5a      	cmp	r3, #90	; 0x5a
 801635c:	f300 80c0 	bgt.w	80164e0 <SCSI_ProcessCmd+0x1b8>
 8016360:	2b00      	cmp	r3, #0
 8016362:	f2c0 8147 	blt.w	80165f4 <SCSI_ProcessCmd+0x2cc>
 8016366:	2b5a      	cmp	r3, #90	; 0x5a
 8016368:	f200 8144 	bhi.w	80165f4 <SCSI_ProcessCmd+0x2cc>
 801636c:	a201      	add	r2, pc, #4	; (adr r2, 8016374 <SCSI_ProcessCmd+0x4c>)
 801636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016372:	bf00      	nop
 8016374:	080164e7 	.word	0x080164e7
 8016378:	080165f5 	.word	0x080165f5
 801637c:	080165f5 	.word	0x080165f5
 8016380:	080164f9 	.word	0x080164f9
 8016384:	080165f5 	.word	0x080165f5
 8016388:	080165f5 	.word	0x080165f5
 801638c:	080165f5 	.word	0x080165f5
 8016390:	080165f5 	.word	0x080165f5
 8016394:	080165f5 	.word	0x080165f5
 8016398:	080165f5 	.word	0x080165f5
 801639c:	080165f5 	.word	0x080165f5
 80163a0:	080165f5 	.word	0x080165f5
 80163a4:	080165f5 	.word	0x080165f5
 80163a8:	080165f5 	.word	0x080165f5
 80163ac:	080165f5 	.word	0x080165f5
 80163b0:	080165f5 	.word	0x080165f5
 80163b4:	080165f5 	.word	0x080165f5
 80163b8:	080165f5 	.word	0x080165f5
 80163bc:	0801650b 	.word	0x0801650b
 80163c0:	080165f5 	.word	0x080165f5
 80163c4:	080165f5 	.word	0x080165f5
 80163c8:	080165f5 	.word	0x080165f5
 80163cc:	080165f5 	.word	0x080165f5
 80163d0:	080165f5 	.word	0x080165f5
 80163d4:	080165f5 	.word	0x080165f5
 80163d8:	080165f5 	.word	0x080165f5
 80163dc:	08016541 	.word	0x08016541
 80163e0:	0801651d 	.word	0x0801651d
 80163e4:	080165f5 	.word	0x080165f5
 80163e8:	080165f5 	.word	0x080165f5
 80163ec:	0801652f 	.word	0x0801652f
 80163f0:	080165f5 	.word	0x080165f5
 80163f4:	080165f5 	.word	0x080165f5
 80163f8:	080165f5 	.word	0x080165f5
 80163fc:	080165f5 	.word	0x080165f5
 8016400:	08016565 	.word	0x08016565
 8016404:	080165f5 	.word	0x080165f5
 8016408:	08016577 	.word	0x08016577
 801640c:	080165f5 	.word	0x080165f5
 8016410:	080165f5 	.word	0x080165f5
 8016414:	0801659b 	.word	0x0801659b
 8016418:	080165f5 	.word	0x080165f5
 801641c:	080165bf 	.word	0x080165bf
 8016420:	080165f5 	.word	0x080165f5
 8016424:	080165f5 	.word	0x080165f5
 8016428:	080165f5 	.word	0x080165f5
 801642c:	080165f5 	.word	0x080165f5
 8016430:	080165e3 	.word	0x080165e3
 8016434:	080165f5 	.word	0x080165f5
 8016438:	080165f5 	.word	0x080165f5
 801643c:	080165f5 	.word	0x080165f5
 8016440:	080165f5 	.word	0x080165f5
 8016444:	080165f5 	.word	0x080165f5
 8016448:	080165f5 	.word	0x080165f5
 801644c:	080165f5 	.word	0x080165f5
 8016450:	080165f5 	.word	0x080165f5
 8016454:	080165f5 	.word	0x080165f5
 8016458:	080165f5 	.word	0x080165f5
 801645c:	080165f5 	.word	0x080165f5
 8016460:	080165f5 	.word	0x080165f5
 8016464:	080165f5 	.word	0x080165f5
 8016468:	080165f5 	.word	0x080165f5
 801646c:	080165f5 	.word	0x080165f5
 8016470:	080165f5 	.word	0x080165f5
 8016474:	080165f5 	.word	0x080165f5
 8016478:	080165f5 	.word	0x080165f5
 801647c:	080165f5 	.word	0x080165f5
 8016480:	080165f5 	.word	0x080165f5
 8016484:	080165f5 	.word	0x080165f5
 8016488:	080165f5 	.word	0x080165f5
 801648c:	080165f5 	.word	0x080165f5
 8016490:	080165f5 	.word	0x080165f5
 8016494:	080165f5 	.word	0x080165f5
 8016498:	080165f5 	.word	0x080165f5
 801649c:	080165f5 	.word	0x080165f5
 80164a0:	080165f5 	.word	0x080165f5
 80164a4:	080165f5 	.word	0x080165f5
 80164a8:	080165f5 	.word	0x080165f5
 80164ac:	080165f5 	.word	0x080165f5
 80164b0:	080165f5 	.word	0x080165f5
 80164b4:	080165f5 	.word	0x080165f5
 80164b8:	080165f5 	.word	0x080165f5
 80164bc:	080165f5 	.word	0x080165f5
 80164c0:	080165f5 	.word	0x080165f5
 80164c4:	080165f5 	.word	0x080165f5
 80164c8:	080165f5 	.word	0x080165f5
 80164cc:	080165f5 	.word	0x080165f5
 80164d0:	080165f5 	.word	0x080165f5
 80164d4:	080165f5 	.word	0x080165f5
 80164d8:	080165f5 	.word	0x080165f5
 80164dc:	08016553 	.word	0x08016553
 80164e0:	2b9e      	cmp	r3, #158	; 0x9e
 80164e2:	d051      	beq.n	8016588 <SCSI_ProcessCmd+0x260>
 80164e4:	e086      	b.n	80165f4 <SCSI_ProcessCmd+0x2cc>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80164e6:	7afb      	ldrb	r3, [r7, #11]
 80164e8:	687a      	ldr	r2, [r7, #4]
 80164ea:	4619      	mov	r1, r3
 80164ec:	68f8      	ldr	r0, [r7, #12]
 80164ee:	f000 f893 	bl	8016618 <SCSI_TestUnitReady>
 80164f2:	4603      	mov	r3, r0
 80164f4:	75fb      	strb	r3, [r7, #23]
    break;
 80164f6:	e089      	b.n	801660c <SCSI_ProcessCmd+0x2e4>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 80164f8:	7afb      	ldrb	r3, [r7, #11]
 80164fa:	687a      	ldr	r2, [r7, #4]
 80164fc:	4619      	mov	r1, r3
 80164fe:	68f8      	ldr	r0, [r7, #12]
 8016500:	f000 fb0e 	bl	8016b20 <SCSI_RequestSense>
 8016504:	4603      	mov	r3, r0
 8016506:	75fb      	strb	r3, [r7, #23]
    break;
 8016508:	e080      	b.n	801660c <SCSI_ProcessCmd+0x2e4>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 801650a:	7afb      	ldrb	r3, [r7, #11]
 801650c:	687a      	ldr	r2, [r7, #4]
 801650e:	4619      	mov	r1, r3
 8016510:	68f8      	ldr	r0, [r7, #12]
 8016512:	f000 f8cb 	bl	80166ac <SCSI_Inquiry>
 8016516:	4603      	mov	r3, r0
 8016518:	75fb      	strb	r3, [r7, #23]
    break;
 801651a:	e077      	b.n	801660c <SCSI_ProcessCmd+0x2e4>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801651c:	7afb      	ldrb	r3, [r7, #11]
 801651e:	687a      	ldr	r2, [r7, #4]
 8016520:	4619      	mov	r1, r3
 8016522:	68f8      	ldr	r0, [r7, #12]
 8016524:	f000 fbb8 	bl	8016c98 <SCSI_StartStopUnit>
 8016528:	4603      	mov	r3, r0
 801652a:	75fb      	strb	r3, [r7, #23]
    break;
 801652c:	e06e      	b.n	801660c <SCSI_ProcessCmd+0x2e4>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801652e:	7afb      	ldrb	r3, [r7, #11]
 8016530:	687a      	ldr	r2, [r7, #4]
 8016532:	4619      	mov	r1, r3
 8016534:	68f8      	ldr	r0, [r7, #12]
 8016536:	f000 fbfa 	bl	8016d2e <SCSI_AllowPreventRemovable>
 801653a:	4603      	mov	r3, r0
 801653c:	75fb      	strb	r3, [r7, #23]
    break;
 801653e:	e065      	b.n	801660c <SCSI_ProcessCmd+0x2e4>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8016540:	7afb      	ldrb	r3, [r7, #11]
 8016542:	687a      	ldr	r2, [r7, #4]
 8016544:	4619      	mov	r1, r3
 8016546:	68f8      	ldr	r0, [r7, #12]
 8016548:	f000 fa9e 	bl	8016a88 <SCSI_ModeSense6>
 801654c:	4603      	mov	r3, r0
 801654e:	75fb      	strb	r3, [r7, #23]
    break;
 8016550:	e05c      	b.n	801660c <SCSI_ProcessCmd+0x2e4>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8016552:	7afb      	ldrb	r3, [r7, #11]
 8016554:	687a      	ldr	r2, [r7, #4]
 8016556:	4619      	mov	r1, r3
 8016558:	68f8      	ldr	r0, [r7, #12]
 801655a:	f000 fabb 	bl	8016ad4 <SCSI_ModeSense10>
 801655e:	4603      	mov	r3, r0
 8016560:	75fb      	strb	r3, [r7, #23]
    break;
 8016562:	e053      	b.n	801660c <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8016564:	7afb      	ldrb	r3, [r7, #11]
 8016566:	687a      	ldr	r2, [r7, #4]
 8016568:	4619      	mov	r1, r3
 801656a:	68f8      	ldr	r0, [r7, #12]
 801656c:	f000 fa1f 	bl	80169ae <SCSI_ReadFormatCapacity>
 8016570:	4603      	mov	r3, r0
 8016572:	75fb      	strb	r3, [r7, #23]
    break;
 8016574:	e04a      	b.n	801660c <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8016576:	7afb      	ldrb	r3, [r7, #11]
 8016578:	687a      	ldr	r2, [r7, #4]
 801657a:	4619      	mov	r1, r3
 801657c:	68f8      	ldr	r0, [r7, #12]
 801657e:	f000 f903 	bl	8016788 <SCSI_ReadCapacity10>
 8016582:	4603      	mov	r3, r0
 8016584:	75fb      	strb	r3, [r7, #23]
    break;
 8016586:	e041      	b.n	801660c <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8016588:	7afb      	ldrb	r3, [r7, #11]
 801658a:	687a      	ldr	r2, [r7, #4]
 801658c:	4619      	mov	r1, r3
 801658e:	68f8      	ldr	r0, [r7, #12]
 8016590:	f000 f969 	bl	8016866 <SCSI_ReadCapacity16>
 8016594:	4603      	mov	r3, r0
 8016596:	75fb      	strb	r3, [r7, #23]
    break;
 8016598:	e038      	b.n	801660c <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 801659a:	7afb      	ldrb	r3, [r7, #11]
 801659c:	687a      	ldr	r2, [r7, #4]
 801659e:	4619      	mov	r1, r3
 80165a0:	68f8      	ldr	r0, [r7, #12]
 80165a2:	f000 fbe7 	bl	8016d74 <SCSI_Read10>
 80165a6:	4603      	mov	r3, r0
 80165a8:	75fb      	strb	r3, [r7, #23]
    break;
 80165aa:	e02f      	b.n	801660c <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 80165ac:	7afb      	ldrb	r3, [r7, #11]
 80165ae:	687a      	ldr	r2, [r7, #4]
 80165b0:	4619      	mov	r1, r3
 80165b2:	68f8      	ldr	r0, [r7, #12]
 80165b4:	f000 fc78 	bl	8016ea8 <SCSI_Read12>
 80165b8:	4603      	mov	r3, r0
 80165ba:	75fb      	strb	r3, [r7, #23]
    break;
 80165bc:	e026      	b.n	801660c <SCSI_ProcessCmd+0x2e4>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 80165be:	7afb      	ldrb	r3, [r7, #11]
 80165c0:	687a      	ldr	r2, [r7, #4]
 80165c2:	4619      	mov	r1, r3
 80165c4:	68f8      	ldr	r0, [r7, #12]
 80165c6:	f000 fd14 	bl	8016ff2 <SCSI_Write10>
 80165ca:	4603      	mov	r3, r0
 80165cc:	75fb      	strb	r3, [r7, #23]
    break;
 80165ce:	e01d      	b.n	801660c <SCSI_ProcessCmd+0x2e4>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 80165d0:	7afb      	ldrb	r3, [r7, #11]
 80165d2:	687a      	ldr	r2, [r7, #4]
 80165d4:	4619      	mov	r1, r3
 80165d6:	68f8      	ldr	r0, [r7, #12]
 80165d8:	f000 fdca 	bl	8017170 <SCSI_Write12>
 80165dc:	4603      	mov	r3, r0
 80165de:	75fb      	strb	r3, [r7, #23]
    break;
 80165e0:	e014      	b.n	801660c <SCSI_ProcessCmd+0x2e4>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 80165e2:	7afb      	ldrb	r3, [r7, #11]
 80165e4:	687a      	ldr	r2, [r7, #4]
 80165e6:	4619      	mov	r1, r3
 80165e8:	68f8      	ldr	r0, [r7, #12]
 80165ea:	f000 fe90 	bl	801730e <SCSI_Verify10>
 80165ee:	4603      	mov	r3, r0
 80165f0:	75fb      	strb	r3, [r7, #23]
    break;
 80165f2:	e00b      	b.n	801660c <SCSI_ProcessCmd+0x2e4>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80165f4:	7af9      	ldrb	r1, [r7, #11]
 80165f6:	2320      	movs	r3, #32
 80165f8:	2205      	movs	r2, #5
 80165fa:	68f8      	ldr	r0, [r7, #12]
 80165fc:	f000 fb09 	bl	8016c12 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8016600:	693b      	ldr	r3, [r7, #16]
 8016602:	2202      	movs	r2, #2
 8016604:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8016606:	23ff      	movs	r3, #255	; 0xff
 8016608:	75fb      	strb	r3, [r7, #23]
    break;
 801660a:	bf00      	nop
  }

  return ret;
 801660c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016610:	4618      	mov	r0, r3
 8016612:	3718      	adds	r7, #24
 8016614:	46bd      	mov	sp, r7
 8016616:	bd80      	pop	{r7, pc}

08016618 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b086      	sub	sp, #24
 801661c:	af00      	add	r7, sp, #0
 801661e:	60f8      	str	r0, [r7, #12]
 8016620:	460b      	mov	r3, r1
 8016622:	607a      	str	r2, [r7, #4]
 8016624:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801662c:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801662e:	697b      	ldr	r3, [r7, #20]
 8016630:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8016634:	2b00      	cmp	r3, #0
 8016636:	d00a      	beq.n	801664e <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016638:	697b      	ldr	r3, [r7, #20]
 801663a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801663e:	2320      	movs	r3, #32
 8016640:	2205      	movs	r2, #5
 8016642:	68f8      	ldr	r0, [r7, #12]
 8016644:	f000 fae5 	bl	8016c12 <SCSI_SenseCode>

    return -1;
 8016648:	f04f 33ff 	mov.w	r3, #4294967295
 801664c:	e02a      	b.n	80166a4 <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801664e:	697b      	ldr	r3, [r7, #20]
 8016650:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8016654:	2b02      	cmp	r3, #2
 8016656:	d10b      	bne.n	8016670 <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016658:	7af9      	ldrb	r1, [r7, #11]
 801665a:	233a      	movs	r3, #58	; 0x3a
 801665c:	2202      	movs	r2, #2
 801665e:	68f8      	ldr	r0, [r7, #12]
 8016660:	f000 fad7 	bl	8016c12 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8016664:	697b      	ldr	r3, [r7, #20]
 8016666:	2205      	movs	r2, #5
 8016668:	721a      	strb	r2, [r3, #8]
    return -1;
 801666a:	f04f 33ff 	mov.w	r3, #4294967295
 801666e:	e019      	b.n	80166a4 <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016676:	689b      	ldr	r3, [r3, #8]
 8016678:	7afa      	ldrb	r2, [r7, #11]
 801667a:	4610      	mov	r0, r2
 801667c:	4798      	blx	r3
 801667e:	4603      	mov	r3, r0
 8016680:	2b00      	cmp	r3, #0
 8016682:	d00b      	beq.n	801669c <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016684:	7af9      	ldrb	r1, [r7, #11]
 8016686:	233a      	movs	r3, #58	; 0x3a
 8016688:	2202      	movs	r2, #2
 801668a:	68f8      	ldr	r0, [r7, #12]
 801668c:	f000 fac1 	bl	8016c12 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8016690:	697b      	ldr	r3, [r7, #20]
 8016692:	2205      	movs	r2, #5
 8016694:	721a      	strb	r2, [r3, #8]

    return -1;
 8016696:	f04f 33ff 	mov.w	r3, #4294967295
 801669a:	e003      	b.n	80166a4 <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 801669c:	697b      	ldr	r3, [r7, #20]
 801669e:	2200      	movs	r2, #0
 80166a0:	60da      	str	r2, [r3, #12]

  return 0;
 80166a2:	2300      	movs	r3, #0
}
 80166a4:	4618      	mov	r0, r3
 80166a6:	3718      	adds	r7, #24
 80166a8:	46bd      	mov	sp, r7
 80166aa:	bd80      	pop	{r7, pc}

080166ac <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b088      	sub	sp, #32
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	60f8      	str	r0, [r7, #12]
 80166b4:	460b      	mov	r3, r1
 80166b6:	607a      	str	r2, [r7, #4]
 80166b8:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80166c0:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 80166c2:	69bb      	ldr	r3, [r7, #24]
 80166c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d10a      	bne.n	80166e2 <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80166cc:	69bb      	ldr	r3, [r7, #24]
 80166ce:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80166d2:	2320      	movs	r3, #32
 80166d4:	2205      	movs	r2, #5
 80166d6:	68f8      	ldr	r0, [r7, #12]
 80166d8:	f000 fa9b 	bl	8016c12 <SCSI_SenseCode>
    return -1;
 80166dc:	f04f 33ff 	mov.w	r3, #4294967295
 80166e0:	e04a      	b.n	8016778 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	3301      	adds	r3, #1
 80166e6:	781b      	ldrb	r3, [r3, #0]
 80166e8:	f003 0301 	and.w	r3, r3, #1
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d020      	beq.n	8016732 <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	3302      	adds	r3, #2
 80166f4:	781b      	ldrb	r3, [r3, #0]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d105      	bne.n	8016706 <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80166fa:	2206      	movs	r2, #6
 80166fc:	4920      	ldr	r1, [pc, #128]	; (8016780 <SCSI_Inquiry+0xd4>)
 80166fe:	69b8      	ldr	r0, [r7, #24]
 8016700:	f000 ff50 	bl	80175a4 <SCSI_UpdateBotData>
 8016704:	e037      	b.n	8016776 <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	3302      	adds	r3, #2
 801670a:	781b      	ldrb	r3, [r3, #0]
 801670c:	2b80      	cmp	r3, #128	; 0x80
 801670e:	d105      	bne.n	801671c <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8016710:	2208      	movs	r2, #8
 8016712:	491c      	ldr	r1, [pc, #112]	; (8016784 <SCSI_Inquiry+0xd8>)
 8016714:	69b8      	ldr	r0, [r7, #24]
 8016716:	f000 ff45 	bl	80175a4 <SCSI_UpdateBotData>
 801671a:	e02c      	b.n	8016776 <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 801671c:	69bb      	ldr	r3, [r7, #24]
 801671e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8016722:	2324      	movs	r3, #36	; 0x24
 8016724:	2205      	movs	r2, #5
 8016726:	68f8      	ldr	r0, [r7, #12]
 8016728:	f000 fa73 	bl	8016c12 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 801672c:	f04f 33ff 	mov.w	r3, #4294967295
 8016730:	e022      	b.n	8016778 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016738:	69d9      	ldr	r1, [r3, #28]
 801673a:	7afa      	ldrb	r2, [r7, #11]
 801673c:	4613      	mov	r3, r2
 801673e:	00db      	lsls	r3, r3, #3
 8016740:	4413      	add	r3, r2
 8016742:	009b      	lsls	r3, r3, #2
 8016744:	440b      	add	r3, r1
 8016746:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8016748:	697b      	ldr	r3, [r7, #20]
 801674a:	3304      	adds	r3, #4
 801674c:	781b      	ldrb	r3, [r3, #0]
 801674e:	b29b      	uxth	r3, r3
 8016750:	3305      	adds	r3, #5
 8016752:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	3304      	adds	r3, #4
 8016758:	781b      	ldrb	r3, [r3, #0]
 801675a:	b29b      	uxth	r3, r3
 801675c:	8bfa      	ldrh	r2, [r7, #30]
 801675e:	429a      	cmp	r2, r3
 8016760:	d303      	bcc.n	801676a <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	3304      	adds	r3, #4
 8016766:	781b      	ldrb	r3, [r3, #0]
 8016768:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801676a:	8bfb      	ldrh	r3, [r7, #30]
 801676c:	461a      	mov	r2, r3
 801676e:	6979      	ldr	r1, [r7, #20]
 8016770:	69b8      	ldr	r0, [r7, #24]
 8016772:	f000 ff17 	bl	80175a4 <SCSI_UpdateBotData>
  }

  return 0;
 8016776:	2300      	movs	r3, #0
}
 8016778:	4618      	mov	r0, r3
 801677a:	3720      	adds	r7, #32
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}
 8016780:	200002d4 	.word	0x200002d4
 8016784:	200002dc 	.word	0x200002dc

08016788 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016788:	b580      	push	{r7, lr}
 801678a:	b086      	sub	sp, #24
 801678c:	af00      	add	r7, sp, #0
 801678e:	60f8      	str	r0, [r7, #12]
 8016790:	460b      	mov	r3, r1
 8016792:	607a      	str	r2, [r7, #4]
 8016794:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801679c:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80167a4:	685b      	ldr	r3, [r3, #4]
 80167a6:	697a      	ldr	r2, [r7, #20]
 80167a8:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80167ac:	697a      	ldr	r2, [r7, #20]
 80167ae:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80167b2:	7af8      	ldrb	r0, [r7, #11]
 80167b4:	4798      	blx	r3
 80167b6:	4603      	mov	r3, r0
 80167b8:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80167ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d104      	bne.n	80167cc <SCSI_ReadCapacity10+0x44>
 80167c2:	697b      	ldr	r3, [r7, #20]
 80167c4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80167c8:	2b02      	cmp	r3, #2
 80167ca:	d108      	bne.n	80167de <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80167cc:	7af9      	ldrb	r1, [r7, #11]
 80167ce:	233a      	movs	r3, #58	; 0x3a
 80167d0:	2202      	movs	r2, #2
 80167d2:	68f8      	ldr	r0, [r7, #12]
 80167d4:	f000 fa1d 	bl	8016c12 <SCSI_SenseCode>
    return -1;
 80167d8:	f04f 33ff 	mov.w	r3, #4294967295
 80167dc:	e03f      	b.n	801685e <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80167de:	697b      	ldr	r3, [r7, #20]
 80167e0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80167e4:	3b01      	subs	r3, #1
 80167e6:	0e1b      	lsrs	r3, r3, #24
 80167e8:	b2da      	uxtb	r2, r3
 80167ea:	697b      	ldr	r3, [r7, #20]
 80167ec:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80167ee:	697b      	ldr	r3, [r7, #20]
 80167f0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80167f4:	3b01      	subs	r3, #1
 80167f6:	0c1b      	lsrs	r3, r3, #16
 80167f8:	b2da      	uxtb	r2, r3
 80167fa:	697b      	ldr	r3, [r7, #20]
 80167fc:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80167fe:	697b      	ldr	r3, [r7, #20]
 8016800:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8016804:	3b01      	subs	r3, #1
 8016806:	0a1b      	lsrs	r3, r3, #8
 8016808:	b2da      	uxtb	r2, r3
 801680a:	697b      	ldr	r3, [r7, #20]
 801680c:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801680e:	697b      	ldr	r3, [r7, #20]
 8016810:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8016814:	b2db      	uxtb	r3, r3
 8016816:	3b01      	subs	r3, #1
 8016818:	b2da      	uxtb	r2, r3
 801681a:	697b      	ldr	r3, [r7, #20]
 801681c:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801681e:	697b      	ldr	r3, [r7, #20]
 8016820:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8016824:	161b      	asrs	r3, r3, #24
 8016826:	b2da      	uxtb	r2, r3
 8016828:	697b      	ldr	r3, [r7, #20]
 801682a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801682c:	697b      	ldr	r3, [r7, #20]
 801682e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8016832:	141b      	asrs	r3, r3, #16
 8016834:	b2da      	uxtb	r2, r3
 8016836:	697b      	ldr	r3, [r7, #20]
 8016838:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801683a:	697b      	ldr	r3, [r7, #20]
 801683c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8016840:	0a1b      	lsrs	r3, r3, #8
 8016842:	b29b      	uxth	r3, r3
 8016844:	b2da      	uxtb	r2, r3
 8016846:	697b      	ldr	r3, [r7, #20]
 8016848:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801684a:	697b      	ldr	r3, [r7, #20]
 801684c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8016850:	b2da      	uxtb	r2, r3
 8016852:	697b      	ldr	r3, [r7, #20]
 8016854:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8016856:	697b      	ldr	r3, [r7, #20]
 8016858:	2208      	movs	r2, #8
 801685a:	60da      	str	r2, [r3, #12]

  return 0;
 801685c:	2300      	movs	r3, #0

}
 801685e:	4618      	mov	r0, r3
 8016860:	3718      	adds	r7, #24
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}

08016866 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016866:	b580      	push	{r7, lr}
 8016868:	b088      	sub	sp, #32
 801686a:	af00      	add	r7, sp, #0
 801686c:	60f8      	str	r0, [r7, #12]
 801686e:	460b      	mov	r3, r1
 8016870:	607a      	str	r2, [r7, #4]
 8016872:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801687a:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016882:	685b      	ldr	r3, [r3, #4]
 8016884:	69ba      	ldr	r2, [r7, #24]
 8016886:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801688a:	69ba      	ldr	r2, [r7, #24]
 801688c:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8016890:	7af8      	ldrb	r0, [r7, #11]
 8016892:	4798      	blx	r3
 8016894:	4603      	mov	r3, r0
 8016896:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016898:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d104      	bne.n	80168aa <SCSI_ReadCapacity16+0x44>
 80168a0:	69bb      	ldr	r3, [r7, #24]
 80168a2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80168a6:	2b02      	cmp	r3, #2
 80168a8:	d108      	bne.n	80168bc <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80168aa:	7af9      	ldrb	r1, [r7, #11]
 80168ac:	233a      	movs	r3, #58	; 0x3a
 80168ae:	2202      	movs	r2, #2
 80168b0:	68f8      	ldr	r0, [r7, #12]
 80168b2:	f000 f9ae 	bl	8016c12 <SCSI_SenseCode>
    return -1;
 80168b6:	f04f 33ff 	mov.w	r3, #4294967295
 80168ba:	e074      	b.n	80169a6 <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	330a      	adds	r3, #10
 80168c0:	781b      	ldrb	r3, [r3, #0]
 80168c2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	330b      	adds	r3, #11
 80168c8:	781b      	ldrb	r3, [r3, #0]
 80168ca:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80168cc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	330c      	adds	r3, #12
 80168d2:	781b      	ldrb	r3, [r3, #0]
 80168d4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80168d6:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 80168d8:	687a      	ldr	r2, [r7, #4]
 80168da:	320d      	adds	r2, #13
 80168dc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80168de:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80168e0:	69bb      	ldr	r3, [r7, #24]
 80168e2:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80168e4:	2300      	movs	r3, #0
 80168e6:	77fb      	strb	r3, [r7, #31]
 80168e8:	e007      	b.n	80168fa <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 80168ea:	7ffb      	ldrb	r3, [r7, #31]
 80168ec:	69ba      	ldr	r2, [r7, #24]
 80168ee:	4413      	add	r3, r2
 80168f0:	2200      	movs	r2, #0
 80168f2:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80168f4:	7ffb      	ldrb	r3, [r7, #31]
 80168f6:	3301      	adds	r3, #1
 80168f8:	77fb      	strb	r3, [r7, #31]
 80168fa:	7ffa      	ldrb	r2, [r7, #31]
 80168fc:	69bb      	ldr	r3, [r7, #24]
 80168fe:	68db      	ldr	r3, [r3, #12]
 8016900:	429a      	cmp	r2, r3
 8016902:	d3f2      	bcc.n	80168ea <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8016904:	69bb      	ldr	r3, [r7, #24]
 8016906:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801690a:	3b01      	subs	r3, #1
 801690c:	0e1b      	lsrs	r3, r3, #24
 801690e:	b2da      	uxtb	r2, r3
 8016910:	69bb      	ldr	r3, [r7, #24]
 8016912:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8016914:	69bb      	ldr	r3, [r7, #24]
 8016916:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801691a:	3b01      	subs	r3, #1
 801691c:	0c1b      	lsrs	r3, r3, #16
 801691e:	b2da      	uxtb	r2, r3
 8016920:	69bb      	ldr	r3, [r7, #24]
 8016922:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8016924:	69bb      	ldr	r3, [r7, #24]
 8016926:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801692a:	3b01      	subs	r3, #1
 801692c:	0a1b      	lsrs	r3, r3, #8
 801692e:	b2da      	uxtb	r2, r3
 8016930:	69bb      	ldr	r3, [r7, #24]
 8016932:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8016934:	69bb      	ldr	r3, [r7, #24]
 8016936:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801693a:	b2db      	uxtb	r3, r3
 801693c:	3b01      	subs	r3, #1
 801693e:	b2da      	uxtb	r2, r3
 8016940:	69bb      	ldr	r3, [r7, #24]
 8016942:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8016944:	69bb      	ldr	r3, [r7, #24]
 8016946:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801694a:	161b      	asrs	r3, r3, #24
 801694c:	b2da      	uxtb	r2, r3
 801694e:	69bb      	ldr	r3, [r7, #24]
 8016950:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8016952:	69bb      	ldr	r3, [r7, #24]
 8016954:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8016958:	141b      	asrs	r3, r3, #16
 801695a:	b2da      	uxtb	r2, r3
 801695c:	69bb      	ldr	r3, [r7, #24]
 801695e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8016960:	69bb      	ldr	r3, [r7, #24]
 8016962:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8016966:	0a1b      	lsrs	r3, r3, #8
 8016968:	b29b      	uxth	r3, r3
 801696a:	b2da      	uxtb	r2, r3
 801696c:	69bb      	ldr	r3, [r7, #24]
 801696e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8016970:	69bb      	ldr	r3, [r7, #24]
 8016972:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8016976:	b2da      	uxtb	r2, r3
 8016978:	69bb      	ldr	r3, [r7, #24]
 801697a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	330a      	adds	r3, #10
 8016980:	781b      	ldrb	r3, [r3, #0]
 8016982:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	330b      	adds	r3, #11
 8016988:	781b      	ldrb	r3, [r3, #0]
 801698a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801698c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	330c      	adds	r3, #12
 8016992:	781b      	ldrb	r3, [r3, #0]
 8016994:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8016996:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8016998:	687a      	ldr	r2, [r7, #4]
 801699a:	320d      	adds	r2, #13
 801699c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801699e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80169a0:	69bb      	ldr	r3, [r7, #24]
 80169a2:	60da      	str	r2, [r3, #12]

  return 0;
 80169a4:	2300      	movs	r3, #0
}
 80169a6:	4618      	mov	r0, r3
 80169a8:	3720      	adds	r7, #32
 80169aa:	46bd      	mov	sp, r7
 80169ac:	bd80      	pop	{r7, pc}

080169ae <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80169ae:	b580      	push	{r7, lr}
 80169b0:	b088      	sub	sp, #32
 80169b2:	af00      	add	r7, sp, #0
 80169b4:	60f8      	str	r0, [r7, #12]
 80169b6:	460b      	mov	r3, r1
 80169b8:	607a      	str	r2, [r7, #4]
 80169ba:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80169c2:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80169ca:	685b      	ldr	r3, [r3, #4]
 80169cc:	f107 0214 	add.w	r2, r7, #20
 80169d0:	f107 0110 	add.w	r1, r7, #16
 80169d4:	7af8      	ldrb	r0, [r7, #11]
 80169d6:	4798      	blx	r3
 80169d8:	4603      	mov	r3, r0
 80169da:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80169dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d104      	bne.n	80169ee <SCSI_ReadFormatCapacity+0x40>
 80169e4:	69bb      	ldr	r3, [r7, #24]
 80169e6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80169ea:	2b02      	cmp	r3, #2
 80169ec:	d108      	bne.n	8016a00 <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80169ee:	7af9      	ldrb	r1, [r7, #11]
 80169f0:	233a      	movs	r3, #58	; 0x3a
 80169f2:	2202      	movs	r2, #2
 80169f4:	68f8      	ldr	r0, [r7, #12]
 80169f6:	f000 f90c 	bl	8016c12 <SCSI_SenseCode>
    return -1;
 80169fa:	f04f 33ff 	mov.w	r3, #4294967295
 80169fe:	e03e      	b.n	8016a7e <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 8016a00:	2300      	movs	r3, #0
 8016a02:	83fb      	strh	r3, [r7, #30]
 8016a04:	e007      	b.n	8016a16 <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 8016a06:	8bfb      	ldrh	r3, [r7, #30]
 8016a08:	69ba      	ldr	r2, [r7, #24]
 8016a0a:	4413      	add	r3, r2
 8016a0c:	2200      	movs	r2, #0
 8016a0e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8016a10:	8bfb      	ldrh	r3, [r7, #30]
 8016a12:	3301      	adds	r3, #1
 8016a14:	83fb      	strh	r3, [r7, #30]
 8016a16:	8bfb      	ldrh	r3, [r7, #30]
 8016a18:	2b0b      	cmp	r3, #11
 8016a1a:	d9f4      	bls.n	8016a06 <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 8016a1c:	69bb      	ldr	r3, [r7, #24]
 8016a1e:	2208      	movs	r2, #8
 8016a20:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8016a22:	693b      	ldr	r3, [r7, #16]
 8016a24:	3b01      	subs	r3, #1
 8016a26:	0e1b      	lsrs	r3, r3, #24
 8016a28:	b2da      	uxtb	r2, r3
 8016a2a:	69bb      	ldr	r3, [r7, #24]
 8016a2c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8016a2e:	693b      	ldr	r3, [r7, #16]
 8016a30:	3b01      	subs	r3, #1
 8016a32:	0c1b      	lsrs	r3, r3, #16
 8016a34:	b2da      	uxtb	r2, r3
 8016a36:	69bb      	ldr	r3, [r7, #24]
 8016a38:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8016a3a:	693b      	ldr	r3, [r7, #16]
 8016a3c:	3b01      	subs	r3, #1
 8016a3e:	0a1b      	lsrs	r3, r3, #8
 8016a40:	b2da      	uxtb	r2, r3
 8016a42:	69bb      	ldr	r3, [r7, #24]
 8016a44:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8016a46:	693b      	ldr	r3, [r7, #16]
 8016a48:	b2db      	uxtb	r3, r3
 8016a4a:	3b01      	subs	r3, #1
 8016a4c:	b2da      	uxtb	r2, r3
 8016a4e:	69bb      	ldr	r3, [r7, #24]
 8016a50:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8016a52:	69bb      	ldr	r3, [r7, #24]
 8016a54:	2202      	movs	r2, #2
 8016a56:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8016a58:	8abb      	ldrh	r3, [r7, #20]
 8016a5a:	141b      	asrs	r3, r3, #16
 8016a5c:	b2da      	uxtb	r2, r3
 8016a5e:	69bb      	ldr	r3, [r7, #24]
 8016a60:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8016a62:	8abb      	ldrh	r3, [r7, #20]
 8016a64:	0a1b      	lsrs	r3, r3, #8
 8016a66:	b29b      	uxth	r3, r3
 8016a68:	b2da      	uxtb	r2, r3
 8016a6a:	69bb      	ldr	r3, [r7, #24]
 8016a6c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8016a6e:	8abb      	ldrh	r3, [r7, #20]
 8016a70:	b2da      	uxtb	r2, r3
 8016a72:	69bb      	ldr	r3, [r7, #24]
 8016a74:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8016a76:	69bb      	ldr	r3, [r7, #24]
 8016a78:	220c      	movs	r2, #12
 8016a7a:	60da      	str	r2, [r3, #12]

  return 0;
 8016a7c:	2300      	movs	r3, #0
}
 8016a7e:	4618      	mov	r0, r3
 8016a80:	3720      	adds	r7, #32
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bd80      	pop	{r7, pc}
	...

08016a88 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b086      	sub	sp, #24
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	60f8      	str	r0, [r7, #12]
 8016a90:	460b      	mov	r3, r1
 8016a92:	607a      	str	r2, [r7, #4]
 8016a94:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016a9c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8016a9e:	2317      	movs	r3, #23
 8016aa0:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	3304      	adds	r3, #4
 8016aa6:	781b      	ldrb	r3, [r3, #0]
 8016aa8:	b29b      	uxth	r3, r3
 8016aaa:	8afa      	ldrh	r2, [r7, #22]
 8016aac:	429a      	cmp	r2, r3
 8016aae:	d303      	bcc.n	8016ab8 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	3304      	adds	r3, #4
 8016ab4:	781b      	ldrb	r3, [r3, #0]
 8016ab6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8016ab8:	8afb      	ldrh	r3, [r7, #22]
 8016aba:	461a      	mov	r2, r3
 8016abc:	4904      	ldr	r1, [pc, #16]	; (8016ad0 <SCSI_ModeSense6+0x48>)
 8016abe:	6938      	ldr	r0, [r7, #16]
 8016ac0:	f000 fd70 	bl	80175a4 <SCSI_UpdateBotData>

  return 0;
 8016ac4:	2300      	movs	r3, #0
}
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	3718      	adds	r7, #24
 8016aca:	46bd      	mov	sp, r7
 8016acc:	bd80      	pop	{r7, pc}
 8016ace:	bf00      	nop
 8016ad0:	200002e4 	.word	0x200002e4

08016ad4 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	b086      	sub	sp, #24
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	60f8      	str	r0, [r7, #12]
 8016adc:	460b      	mov	r3, r1
 8016ade:	607a      	str	r2, [r7, #4]
 8016ae0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016ae8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8016aea:	231b      	movs	r3, #27
 8016aec:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	3308      	adds	r3, #8
 8016af2:	781b      	ldrb	r3, [r3, #0]
 8016af4:	b29b      	uxth	r3, r3
 8016af6:	8afa      	ldrh	r2, [r7, #22]
 8016af8:	429a      	cmp	r2, r3
 8016afa:	d303      	bcc.n	8016b04 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	3308      	adds	r3, #8
 8016b00:	781b      	ldrb	r3, [r3, #0]
 8016b02:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8016b04:	8afb      	ldrh	r3, [r7, #22]
 8016b06:	461a      	mov	r2, r3
 8016b08:	4904      	ldr	r1, [pc, #16]	; (8016b1c <SCSI_ModeSense10+0x48>)
 8016b0a:	6938      	ldr	r0, [r7, #16]
 8016b0c:	f000 fd4a 	bl	80175a4 <SCSI_UpdateBotData>

  return 0;
 8016b10:	2300      	movs	r3, #0
}
 8016b12:	4618      	mov	r0, r3
 8016b14:	3718      	adds	r7, #24
 8016b16:	46bd      	mov	sp, r7
 8016b18:	bd80      	pop	{r7, pc}
 8016b1a:	bf00      	nop
 8016b1c:	200002fc 	.word	0x200002fc

08016b20 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016b20:	b580      	push	{r7, lr}
 8016b22:	b086      	sub	sp, #24
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	60f8      	str	r0, [r7, #12]
 8016b28:	460b      	mov	r3, r1
 8016b2a:	607a      	str	r2, [r7, #4]
 8016b2c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016b34:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 8016b36:	693b      	ldr	r3, [r7, #16]
 8016b38:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d10a      	bne.n	8016b56 <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016b40:	693b      	ldr	r3, [r7, #16]
 8016b42:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8016b46:	2320      	movs	r3, #32
 8016b48:	2205      	movs	r2, #5
 8016b4a:	68f8      	ldr	r0, [r7, #12]
 8016b4c:	f000 f861 	bl	8016c12 <SCSI_SenseCode>
    return -1;
 8016b50:	f04f 33ff 	mov.w	r3, #4294967295
 8016b54:	e059      	b.n	8016c0a <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8016b56:	2300      	movs	r3, #0
 8016b58:	75fb      	strb	r3, [r7, #23]
 8016b5a:	e007      	b.n	8016b6c <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 8016b5c:	7dfb      	ldrb	r3, [r7, #23]
 8016b5e:	693a      	ldr	r2, [r7, #16]
 8016b60:	4413      	add	r3, r2
 8016b62:	2200      	movs	r2, #0
 8016b64:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8016b66:	7dfb      	ldrb	r3, [r7, #23]
 8016b68:	3301      	adds	r3, #1
 8016b6a:	75fb      	strb	r3, [r7, #23]
 8016b6c:	7dfb      	ldrb	r3, [r7, #23]
 8016b6e:	2b11      	cmp	r3, #17
 8016b70:	d9f4      	bls.n	8016b5c <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 8016b72:	693b      	ldr	r3, [r7, #16]
 8016b74:	2270      	movs	r2, #112	; 0x70
 8016b76:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8016b78:	693b      	ldr	r3, [r7, #16]
 8016b7a:	220c      	movs	r2, #12
 8016b7c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8016b7e:	693b      	ldr	r3, [r7, #16]
 8016b80:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8016b84:	693b      	ldr	r3, [r7, #16]
 8016b86:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8016b8a:	429a      	cmp	r2, r3
 8016b8c:	d02e      	beq.n	8016bec <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8016b8e:	693b      	ldr	r3, [r7, #16]
 8016b90:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8016b94:	461a      	mov	r2, r3
 8016b96:	693b      	ldr	r3, [r7, #16]
 8016b98:	3248      	adds	r2, #72	; 0x48
 8016b9a:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8016b9e:	693b      	ldr	r3, [r7, #16]
 8016ba0:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8016ba2:	693b      	ldr	r3, [r7, #16]
 8016ba4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8016ba8:	693a      	ldr	r2, [r7, #16]
 8016baa:	3348      	adds	r3, #72	; 0x48
 8016bac:	00db      	lsls	r3, r3, #3
 8016bae:	4413      	add	r3, r2
 8016bb0:	791a      	ldrb	r2, [r3, #4]
 8016bb2:	693b      	ldr	r3, [r7, #16]
 8016bb4:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8016bb6:	693b      	ldr	r3, [r7, #16]
 8016bb8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8016bbc:	693a      	ldr	r2, [r7, #16]
 8016bbe:	3348      	adds	r3, #72	; 0x48
 8016bc0:	00db      	lsls	r3, r3, #3
 8016bc2:	4413      	add	r3, r2
 8016bc4:	795a      	ldrb	r2, [r3, #5]
 8016bc6:	693b      	ldr	r3, [r7, #16]
 8016bc8:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8016bca:	693b      	ldr	r3, [r7, #16]
 8016bcc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8016bd0:	3301      	adds	r3, #1
 8016bd2:	b2da      	uxtb	r2, r3
 8016bd4:	693b      	ldr	r3, [r7, #16]
 8016bd6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8016bda:	693b      	ldr	r3, [r7, #16]
 8016bdc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8016be0:	2b04      	cmp	r3, #4
 8016be2:	d103      	bne.n	8016bec <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 8016be4:	693b      	ldr	r3, [r7, #16]
 8016be6:	2200      	movs	r2, #0
 8016be8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8016bec:	693b      	ldr	r3, [r7, #16]
 8016bee:	2212      	movs	r2, #18
 8016bf0:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	3304      	adds	r3, #4
 8016bf6:	781b      	ldrb	r3, [r3, #0]
 8016bf8:	2b12      	cmp	r3, #18
 8016bfa:	d805      	bhi.n	8016c08 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	3304      	adds	r3, #4
 8016c00:	781b      	ldrb	r3, [r3, #0]
 8016c02:	461a      	mov	r2, r3
 8016c04:	693b      	ldr	r3, [r7, #16]
 8016c06:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8016c08:	2300      	movs	r3, #0
}
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	3718      	adds	r7, #24
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	bd80      	pop	{r7, pc}

08016c12 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8016c12:	b480      	push	{r7}
 8016c14:	b085      	sub	sp, #20
 8016c16:	af00      	add	r7, sp, #0
 8016c18:	6078      	str	r0, [r7, #4]
 8016c1a:	4608      	mov	r0, r1
 8016c1c:	4611      	mov	r1, r2
 8016c1e:	461a      	mov	r2, r3
 8016c20:	4603      	mov	r3, r0
 8016c22:	70fb      	strb	r3, [r7, #3]
 8016c24:	460b      	mov	r3, r1
 8016c26:	70bb      	strb	r3, [r7, #2]
 8016c28:	4613      	mov	r3, r2
 8016c2a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016c32:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8016c3a:	461a      	mov	r2, r3
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	3248      	adds	r2, #72	; 0x48
 8016c40:	78b9      	ldrb	r1, [r7, #2]
 8016c42:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8016c4c:	68fa      	ldr	r2, [r7, #12]
 8016c4e:	3348      	adds	r3, #72	; 0x48
 8016c50:	00db      	lsls	r3, r3, #3
 8016c52:	4413      	add	r3, r2
 8016c54:	787a      	ldrb	r2, [r7, #1]
 8016c56:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8016c5e:	68fa      	ldr	r2, [r7, #12]
 8016c60:	3348      	adds	r3, #72	; 0x48
 8016c62:	00db      	lsls	r3, r3, #3
 8016c64:	4413      	add	r3, r2
 8016c66:	2200      	movs	r2, #0
 8016c68:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8016c70:	3301      	adds	r3, #1
 8016c72:	b2da      	uxtb	r2, r3
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8016c80:	2b04      	cmp	r3, #4
 8016c82:	d103      	bne.n	8016c8c <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	2200      	movs	r2, #0
 8016c88:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 8016c8c:	bf00      	nop
 8016c8e:	3714      	adds	r7, #20
 8016c90:	46bd      	mov	sp, r7
 8016c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c96:	4770      	bx	lr

08016c98 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	b086      	sub	sp, #24
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	60f8      	str	r0, [r7, #12]
 8016ca0:	460b      	mov	r3, r1
 8016ca2:	607a      	str	r2, [r7, #4]
 8016ca4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016cac:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8016cae:	697b      	ldr	r3, [r7, #20]
 8016cb0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8016cb4:	2b01      	cmp	r3, #1
 8016cb6:	d10f      	bne.n	8016cd8 <SCSI_StartStopUnit+0x40>
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	3304      	adds	r3, #4
 8016cbc:	781b      	ldrb	r3, [r3, #0]
 8016cbe:	f003 0303 	and.w	r3, r3, #3
 8016cc2:	2b02      	cmp	r3, #2
 8016cc4:	d108      	bne.n	8016cd8 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8016cc6:	7af9      	ldrb	r1, [r7, #11]
 8016cc8:	2324      	movs	r3, #36	; 0x24
 8016cca:	2205      	movs	r2, #5
 8016ccc:	68f8      	ldr	r0, [r7, #12]
 8016cce:	f7ff ffa0 	bl	8016c12 <SCSI_SenseCode>

    return -1;
 8016cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8016cd6:	e026      	b.n	8016d26 <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	3304      	adds	r3, #4
 8016cdc:	781b      	ldrb	r3, [r3, #0]
 8016cde:	f003 0303 	and.w	r3, r3, #3
 8016ce2:	2b01      	cmp	r3, #1
 8016ce4:	d104      	bne.n	8016cf0 <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8016ce6:	697b      	ldr	r3, [r7, #20]
 8016ce8:	2200      	movs	r2, #0
 8016cea:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8016cee:	e016      	b.n	8016d1e <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	3304      	adds	r3, #4
 8016cf4:	781b      	ldrb	r3, [r3, #0]
 8016cf6:	f003 0303 	and.w	r3, r3, #3
 8016cfa:	2b02      	cmp	r3, #2
 8016cfc:	d104      	bne.n	8016d08 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8016cfe:	697b      	ldr	r3, [r7, #20]
 8016d00:	2202      	movs	r2, #2
 8016d02:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8016d06:	e00a      	b.n	8016d1e <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	3304      	adds	r3, #4
 8016d0c:	781b      	ldrb	r3, [r3, #0]
 8016d0e:	f003 0303 	and.w	r3, r3, #3
 8016d12:	2b03      	cmp	r3, #3
 8016d14:	d103      	bne.n	8016d1e <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8016d16:	697b      	ldr	r3, [r7, #20]
 8016d18:	2200      	movs	r2, #0
 8016d1a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8016d1e:	697b      	ldr	r3, [r7, #20]
 8016d20:	2200      	movs	r2, #0
 8016d22:	60da      	str	r2, [r3, #12]

  return 0;
 8016d24:	2300      	movs	r3, #0
}
 8016d26:	4618      	mov	r0, r3
 8016d28:	3718      	adds	r7, #24
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	bd80      	pop	{r7, pc}

08016d2e <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016d2e:	b480      	push	{r7}
 8016d30:	b087      	sub	sp, #28
 8016d32:	af00      	add	r7, sp, #0
 8016d34:	60f8      	str	r0, [r7, #12]
 8016d36:	460b      	mov	r3, r1
 8016d38:	607a      	str	r2, [r7, #4]
 8016d3a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016d42:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	3304      	adds	r3, #4
 8016d48:	781b      	ldrb	r3, [r3, #0]
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d104      	bne.n	8016d58 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8016d4e:	697b      	ldr	r3, [r7, #20]
 8016d50:	2200      	movs	r2, #0
 8016d52:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8016d56:	e003      	b.n	8016d60 <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8016d58:	697b      	ldr	r3, [r7, #20]
 8016d5a:	2201      	movs	r2, #1
 8016d5c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8016d60:	697b      	ldr	r3, [r7, #20]
 8016d62:	2200      	movs	r2, #0
 8016d64:	60da      	str	r2, [r3, #12]

  return 0;
 8016d66:	2300      	movs	r3, #0
}
 8016d68:	4618      	mov	r0, r3
 8016d6a:	371c      	adds	r7, #28
 8016d6c:	46bd      	mov	sp, r7
 8016d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d72:	4770      	bx	lr

08016d74 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b086      	sub	sp, #24
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	60f8      	str	r0, [r7, #12]
 8016d7c:	460b      	mov	r3, r1
 8016d7e:	607a      	str	r2, [r7, #4]
 8016d80:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016d88:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8016d8a:	697b      	ldr	r3, [r7, #20]
 8016d8c:	7a1b      	ldrb	r3, [r3, #8]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d17c      	bne.n	8016e8c <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8016d92:	697b      	ldr	r3, [r7, #20]
 8016d94:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8016d98:	b25b      	sxtb	r3, r3
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	db0a      	blt.n	8016db4 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016d9e:	697b      	ldr	r3, [r7, #20]
 8016da0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8016da4:	2320      	movs	r3, #32
 8016da6:	2205      	movs	r2, #5
 8016da8:	68f8      	ldr	r0, [r7, #12]
 8016daa:	f7ff ff32 	bl	8016c12 <SCSI_SenseCode>
      return -1;
 8016dae:	f04f 33ff 	mov.w	r3, #4294967295
 8016db2:	e075      	b.n	8016ea0 <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8016db4:	697b      	ldr	r3, [r7, #20]
 8016db6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8016dba:	2b02      	cmp	r3, #2
 8016dbc:	d108      	bne.n	8016dd0 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016dbe:	7af9      	ldrb	r1, [r7, #11]
 8016dc0:	233a      	movs	r3, #58	; 0x3a
 8016dc2:	2202      	movs	r2, #2
 8016dc4:	68f8      	ldr	r0, [r7, #12]
 8016dc6:	f7ff ff24 	bl	8016c12 <SCSI_SenseCode>

      return -1;
 8016dca:	f04f 33ff 	mov.w	r3, #4294967295
 8016dce:	e067      	b.n	8016ea0 <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016dd6:	689b      	ldr	r3, [r3, #8]
 8016dd8:	7afa      	ldrb	r2, [r7, #11]
 8016dda:	4610      	mov	r0, r2
 8016ddc:	4798      	blx	r3
 8016dde:	4603      	mov	r3, r0
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d008      	beq.n	8016df6 <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016de4:	7af9      	ldrb	r1, [r7, #11]
 8016de6:	233a      	movs	r3, #58	; 0x3a
 8016de8:	2202      	movs	r2, #2
 8016dea:	68f8      	ldr	r0, [r7, #12]
 8016dec:	f7ff ff11 	bl	8016c12 <SCSI_SenseCode>
      return -1;
 8016df0:	f04f 33ff 	mov.w	r3, #4294967295
 8016df4:	e054      	b.n	8016ea0 <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	3302      	adds	r3, #2
 8016dfa:	781b      	ldrb	r3, [r3, #0]
 8016dfc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	3303      	adds	r3, #3
 8016e02:	781b      	ldrb	r3, [r3, #0]
 8016e04:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8016e06:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	3304      	adds	r3, #4
 8016e0c:	781b      	ldrb	r3, [r3, #0]
 8016e0e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8016e10:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8016e12:	687a      	ldr	r2, [r7, #4]
 8016e14:	3205      	adds	r2, #5
 8016e16:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8016e18:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8016e1a:	697b      	ldr	r3, [r7, #20]
 8016e1c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	3307      	adds	r3, #7
 8016e24:	781b      	ldrb	r3, [r3, #0]
 8016e26:	021b      	lsls	r3, r3, #8
 8016e28:	687a      	ldr	r2, [r7, #4]
 8016e2a:	3208      	adds	r2, #8
 8016e2c:	7812      	ldrb	r2, [r2, #0]
 8016e2e:	431a      	orrs	r2, r3
 8016e30:	697b      	ldr	r3, [r7, #20]
 8016e32:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8016e36:	697b      	ldr	r3, [r7, #20]
 8016e38:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8016e3c:	697b      	ldr	r3, [r7, #20]
 8016e3e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8016e42:	7af9      	ldrb	r1, [r7, #11]
 8016e44:	68f8      	ldr	r0, [r7, #12]
 8016e46:	f000 fa95 	bl	8017374 <SCSI_CheckAddressRange>
 8016e4a:	4603      	mov	r3, r0
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	da02      	bge.n	8016e56 <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8016e50:	f04f 33ff 	mov.w	r3, #4294967295
 8016e54:	e024      	b.n	8016ea0 <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8016e56:	697b      	ldr	r3, [r7, #20]
 8016e58:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8016e5c:	697b      	ldr	r3, [r7, #20]
 8016e5e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8016e62:	6979      	ldr	r1, [r7, #20]
 8016e64:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8016e68:	fb01 f303 	mul.w	r3, r1, r3
 8016e6c:	429a      	cmp	r2, r3
 8016e6e:	d00a      	beq.n	8016e86 <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016e70:	697b      	ldr	r3, [r7, #20]
 8016e72:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8016e76:	2320      	movs	r3, #32
 8016e78:	2205      	movs	r2, #5
 8016e7a:	68f8      	ldr	r0, [r7, #12]
 8016e7c:	f7ff fec9 	bl	8016c12 <SCSI_SenseCode>
      return -1;
 8016e80:	f04f 33ff 	mov.w	r3, #4294967295
 8016e84:	e00c      	b.n	8016ea0 <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8016e86:	697b      	ldr	r3, [r7, #20]
 8016e88:	2202      	movs	r2, #2
 8016e8a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8016e8c:	697b      	ldr	r3, [r7, #20]
 8016e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016e92:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8016e94:	7afb      	ldrb	r3, [r7, #11]
 8016e96:	4619      	mov	r1, r3
 8016e98:	68f8      	ldr	r0, [r7, #12]
 8016e9a:	f000 fa8d 	bl	80173b8 <SCSI_ProcessRead>
 8016e9e:	4603      	mov	r3, r0
}
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	3718      	adds	r7, #24
 8016ea4:	46bd      	mov	sp, r7
 8016ea6:	bd80      	pop	{r7, pc}

08016ea8 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b086      	sub	sp, #24
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	60f8      	str	r0, [r7, #12]
 8016eb0:	460b      	mov	r3, r1
 8016eb2:	607a      	str	r2, [r7, #4]
 8016eb4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016ebc:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8016ebe:	697b      	ldr	r3, [r7, #20]
 8016ec0:	7a1b      	ldrb	r3, [r3, #8]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	f040 8087 	bne.w	8016fd6 <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8016ec8:	697b      	ldr	r3, [r7, #20]
 8016eca:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8016ece:	b25b      	sxtb	r3, r3
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	db0a      	blt.n	8016eea <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016ed4:	697b      	ldr	r3, [r7, #20]
 8016ed6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8016eda:	2320      	movs	r3, #32
 8016edc:	2205      	movs	r2, #5
 8016ede:	68f8      	ldr	r0, [r7, #12]
 8016ee0:	f7ff fe97 	bl	8016c12 <SCSI_SenseCode>
      return -1;
 8016ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8016ee8:	e07f      	b.n	8016fea <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8016eea:	697b      	ldr	r3, [r7, #20]
 8016eec:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8016ef0:	2b02      	cmp	r3, #2
 8016ef2:	d108      	bne.n	8016f06 <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016ef4:	7af9      	ldrb	r1, [r7, #11]
 8016ef6:	233a      	movs	r3, #58	; 0x3a
 8016ef8:	2202      	movs	r2, #2
 8016efa:	68f8      	ldr	r0, [r7, #12]
 8016efc:	f7ff fe89 	bl	8016c12 <SCSI_SenseCode>
      return -1;
 8016f00:	f04f 33ff 	mov.w	r3, #4294967295
 8016f04:	e071      	b.n	8016fea <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016f0c:	689b      	ldr	r3, [r3, #8]
 8016f0e:	7afa      	ldrb	r2, [r7, #11]
 8016f10:	4610      	mov	r0, r2
 8016f12:	4798      	blx	r3
 8016f14:	4603      	mov	r3, r0
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d008      	beq.n	8016f2c <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016f1a:	7af9      	ldrb	r1, [r7, #11]
 8016f1c:	233a      	movs	r3, #58	; 0x3a
 8016f1e:	2202      	movs	r2, #2
 8016f20:	68f8      	ldr	r0, [r7, #12]
 8016f22:	f7ff fe76 	bl	8016c12 <SCSI_SenseCode>
      return -1;
 8016f26:	f04f 33ff 	mov.w	r3, #4294967295
 8016f2a:	e05e      	b.n	8016fea <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	3302      	adds	r3, #2
 8016f30:	781b      	ldrb	r3, [r3, #0]
 8016f32:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	3303      	adds	r3, #3
 8016f38:	781b      	ldrb	r3, [r3, #0]
 8016f3a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8016f3c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	3304      	adds	r3, #4
 8016f42:	781b      	ldrb	r3, [r3, #0]
 8016f44:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8016f46:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8016f48:	687a      	ldr	r2, [r7, #4]
 8016f4a:	3205      	adds	r2, #5
 8016f4c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8016f4e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8016f50:	697b      	ldr	r3, [r7, #20]
 8016f52:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	3306      	adds	r3, #6
 8016f5a:	781b      	ldrb	r3, [r3, #0]
 8016f5c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	3307      	adds	r3, #7
 8016f62:	781b      	ldrb	r3, [r3, #0]
 8016f64:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8016f66:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	3308      	adds	r3, #8
 8016f6c:	781b      	ldrb	r3, [r3, #0]
 8016f6e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8016f70:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8016f72:	687a      	ldr	r2, [r7, #4]
 8016f74:	3209      	adds	r2, #9
 8016f76:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8016f78:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8016f7a:	697b      	ldr	r3, [r7, #20]
 8016f7c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8016f80:	697b      	ldr	r3, [r7, #20]
 8016f82:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8016f86:	697b      	ldr	r3, [r7, #20]
 8016f88:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8016f8c:	7af9      	ldrb	r1, [r7, #11]
 8016f8e:	68f8      	ldr	r0, [r7, #12]
 8016f90:	f000 f9f0 	bl	8017374 <SCSI_CheckAddressRange>
 8016f94:	4603      	mov	r3, r0
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	da02      	bge.n	8016fa0 <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8016f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8016f9e:	e024      	b.n	8016fea <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8016fa0:	697b      	ldr	r3, [r7, #20]
 8016fa2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8016fa6:	697b      	ldr	r3, [r7, #20]
 8016fa8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8016fac:	6979      	ldr	r1, [r7, #20]
 8016fae:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8016fb2:	fb01 f303 	mul.w	r3, r1, r3
 8016fb6:	429a      	cmp	r2, r3
 8016fb8:	d00a      	beq.n	8016fd0 <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016fba:	697b      	ldr	r3, [r7, #20]
 8016fbc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8016fc0:	2320      	movs	r3, #32
 8016fc2:	2205      	movs	r2, #5
 8016fc4:	68f8      	ldr	r0, [r7, #12]
 8016fc6:	f7ff fe24 	bl	8016c12 <SCSI_SenseCode>
      return -1;
 8016fca:	f04f 33ff 	mov.w	r3, #4294967295
 8016fce:	e00c      	b.n	8016fea <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8016fd0:	697b      	ldr	r3, [r7, #20]
 8016fd2:	2202      	movs	r2, #2
 8016fd4:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8016fd6:	697b      	ldr	r3, [r7, #20]
 8016fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016fdc:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8016fde:	7afb      	ldrb	r3, [r7, #11]
 8016fe0:	4619      	mov	r1, r3
 8016fe2:	68f8      	ldr	r0, [r7, #12]
 8016fe4:	f000 f9e8 	bl	80173b8 <SCSI_ProcessRead>
 8016fe8:	4603      	mov	r3, r0
}
 8016fea:	4618      	mov	r0, r3
 8016fec:	3718      	adds	r7, #24
 8016fee:	46bd      	mov	sp, r7
 8016ff0:	bd80      	pop	{r7, pc}

08016ff2 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016ff2:	b580      	push	{r7, lr}
 8016ff4:	b086      	sub	sp, #24
 8016ff6:	af00      	add	r7, sp, #0
 8016ff8:	60f8      	str	r0, [r7, #12]
 8016ffa:	460b      	mov	r3, r1
 8016ffc:	607a      	str	r2, [r7, #4]
 8016ffe:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017006:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8017008:	697b      	ldr	r3, [r7, #20]
 801700a:	7a1b      	ldrb	r3, [r3, #8]
 801700c:	2b00      	cmp	r3, #0
 801700e:	f040 80a5 	bne.w	801715c <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8017012:	697b      	ldr	r3, [r7, #20]
 8017014:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8017018:	2b00      	cmp	r3, #0
 801701a:	d10a      	bne.n	8017032 <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801701c:	697b      	ldr	r3, [r7, #20]
 801701e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8017022:	2320      	movs	r3, #32
 8017024:	2205      	movs	r2, #5
 8017026:	68f8      	ldr	r0, [r7, #12]
 8017028:	f7ff fdf3 	bl	8016c12 <SCSI_SenseCode>
      return -1;
 801702c:	f04f 33ff 	mov.w	r3, #4294967295
 8017030:	e09a      	b.n	8017168 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8017032:	697b      	ldr	r3, [r7, #20]
 8017034:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8017038:	b25b      	sxtb	r3, r3
 801703a:	2b00      	cmp	r3, #0
 801703c:	da0a      	bge.n	8017054 <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801703e:	697b      	ldr	r3, [r7, #20]
 8017040:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8017044:	2320      	movs	r3, #32
 8017046:	2205      	movs	r2, #5
 8017048:	68f8      	ldr	r0, [r7, #12]
 801704a:	f7ff fde2 	bl	8016c12 <SCSI_SenseCode>
      return -1;
 801704e:	f04f 33ff 	mov.w	r3, #4294967295
 8017052:	e089      	b.n	8017168 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801705a:	689b      	ldr	r3, [r3, #8]
 801705c:	7afa      	ldrb	r2, [r7, #11]
 801705e:	4610      	mov	r0, r2
 8017060:	4798      	blx	r3
 8017062:	4603      	mov	r3, r0
 8017064:	2b00      	cmp	r3, #0
 8017066:	d008      	beq.n	801707a <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8017068:	7af9      	ldrb	r1, [r7, #11]
 801706a:	233a      	movs	r3, #58	; 0x3a
 801706c:	2202      	movs	r2, #2
 801706e:	68f8      	ldr	r0, [r7, #12]
 8017070:	f7ff fdcf 	bl	8016c12 <SCSI_SenseCode>
      return -1;
 8017074:	f04f 33ff 	mov.w	r3, #4294967295
 8017078:	e076      	b.n	8017168 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017080:	68db      	ldr	r3, [r3, #12]
 8017082:	7afa      	ldrb	r2, [r7, #11]
 8017084:	4610      	mov	r0, r2
 8017086:	4798      	blx	r3
 8017088:	4603      	mov	r3, r0
 801708a:	2b00      	cmp	r3, #0
 801708c:	d008      	beq.n	80170a0 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801708e:	7af9      	ldrb	r1, [r7, #11]
 8017090:	2327      	movs	r3, #39	; 0x27
 8017092:	2202      	movs	r2, #2
 8017094:	68f8      	ldr	r0, [r7, #12]
 8017096:	f7ff fdbc 	bl	8016c12 <SCSI_SenseCode>
      return -1;
 801709a:	f04f 33ff 	mov.w	r3, #4294967295
 801709e:	e063      	b.n	8017168 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	3302      	adds	r3, #2
 80170a4:	781b      	ldrb	r3, [r3, #0]
 80170a6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	3303      	adds	r3, #3
 80170ac:	781b      	ldrb	r3, [r3, #0]
 80170ae:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80170b0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	3304      	adds	r3, #4
 80170b6:	781b      	ldrb	r3, [r3, #0]
 80170b8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80170ba:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80170bc:	687a      	ldr	r2, [r7, #4]
 80170be:	3205      	adds	r2, #5
 80170c0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80170c2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80170c4:	697b      	ldr	r3, [r7, #20]
 80170c6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	3307      	adds	r3, #7
 80170ce:	781b      	ldrb	r3, [r3, #0]
 80170d0:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80170d2:	687a      	ldr	r2, [r7, #4]
 80170d4:	3208      	adds	r2, #8
 80170d6:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80170d8:	431a      	orrs	r2, r3
 80170da:	697b      	ldr	r3, [r7, #20]
 80170dc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80170e0:	697b      	ldr	r3, [r7, #20]
 80170e2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80170e6:	697b      	ldr	r3, [r7, #20]
 80170e8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80170ec:	7af9      	ldrb	r1, [r7, #11]
 80170ee:	68f8      	ldr	r0, [r7, #12]
 80170f0:	f000 f940 	bl	8017374 <SCSI_CheckAddressRange>
 80170f4:	4603      	mov	r3, r0
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	da02      	bge.n	8017100 <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80170fa:	f04f 33ff 	mov.w	r3, #4294967295
 80170fe:	e033      	b.n	8017168 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8017100:	697b      	ldr	r3, [r7, #20]
 8017102:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8017106:	697a      	ldr	r2, [r7, #20]
 8017108:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801710c:	fb02 f303 	mul.w	r3, r2, r3
 8017110:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8017112:	697b      	ldr	r3, [r7, #20]
 8017114:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8017118:	693a      	ldr	r2, [r7, #16]
 801711a:	429a      	cmp	r2, r3
 801711c:	d00a      	beq.n	8017134 <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801711e:	697b      	ldr	r3, [r7, #20]
 8017120:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8017124:	2320      	movs	r3, #32
 8017126:	2205      	movs	r2, #5
 8017128:	68f8      	ldr	r0, [r7, #12]
 801712a:	f7ff fd72 	bl	8016c12 <SCSI_SenseCode>
      return -1;
 801712e:	f04f 33ff 	mov.w	r3, #4294967295
 8017132:	e019      	b.n	8017168 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8017134:	693b      	ldr	r3, [r7, #16]
 8017136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801713a:	bf28      	it	cs
 801713c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8017140:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8017142:	697b      	ldr	r3, [r7, #20]
 8017144:	2201      	movs	r2, #1
 8017146:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8017148:	697b      	ldr	r3, [r7, #20]
 801714a:	f103 0210 	add.w	r2, r3, #16
 801714e:	693b      	ldr	r3, [r7, #16]
 8017150:	2101      	movs	r1, #1
 8017152:	68f8      	ldr	r0, [r7, #12]
 8017154:	f005 f81d 	bl	801c192 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8017158:	2300      	movs	r3, #0
 801715a:	e005      	b.n	8017168 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 801715c:	7afb      	ldrb	r3, [r7, #11]
 801715e:	4619      	mov	r1, r3
 8017160:	68f8      	ldr	r0, [r7, #12]
 8017162:	f000 f99c 	bl	801749e <SCSI_ProcessWrite>
 8017166:	4603      	mov	r3, r0
}
 8017168:	4618      	mov	r0, r3
 801716a:	3718      	adds	r7, #24
 801716c:	46bd      	mov	sp, r7
 801716e:	bd80      	pop	{r7, pc}

08017170 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8017170:	b580      	push	{r7, lr}
 8017172:	b086      	sub	sp, #24
 8017174:	af00      	add	r7, sp, #0
 8017176:	60f8      	str	r0, [r7, #12]
 8017178:	460b      	mov	r3, r1
 801717a:	607a      	str	r2, [r7, #4]
 801717c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017184:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8017186:	697b      	ldr	r3, [r7, #20]
 8017188:	7a1b      	ldrb	r3, [r3, #8]
 801718a:	2b00      	cmp	r3, #0
 801718c:	f040 80b5 	bne.w	80172fa <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8017190:	697b      	ldr	r3, [r7, #20]
 8017192:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8017196:	2b00      	cmp	r3, #0
 8017198:	d10a      	bne.n	80171b0 <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801719a:	697b      	ldr	r3, [r7, #20]
 801719c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80171a0:	2320      	movs	r3, #32
 80171a2:	2205      	movs	r2, #5
 80171a4:	68f8      	ldr	r0, [r7, #12]
 80171a6:	f7ff fd34 	bl	8016c12 <SCSI_SenseCode>
      return -1;
 80171aa:	f04f 33ff 	mov.w	r3, #4294967295
 80171ae:	e0aa      	b.n	8017306 <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80171b0:	697b      	ldr	r3, [r7, #20]
 80171b2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80171b6:	b25b      	sxtb	r3, r3
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	da0a      	bge.n	80171d2 <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80171bc:	697b      	ldr	r3, [r7, #20]
 80171be:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80171c2:	2320      	movs	r3, #32
 80171c4:	2205      	movs	r2, #5
 80171c6:	68f8      	ldr	r0, [r7, #12]
 80171c8:	f7ff fd23 	bl	8016c12 <SCSI_SenseCode>
      return -1;
 80171cc:	f04f 33ff 	mov.w	r3, #4294967295
 80171d0:	e099      	b.n	8017306 <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80171d8:	689b      	ldr	r3, [r3, #8]
 80171da:	7afa      	ldrb	r2, [r7, #11]
 80171dc:	4610      	mov	r0, r2
 80171de:	4798      	blx	r3
 80171e0:	4603      	mov	r3, r0
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d00b      	beq.n	80171fe <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80171e6:	7af9      	ldrb	r1, [r7, #11]
 80171e8:	233a      	movs	r3, #58	; 0x3a
 80171ea:	2202      	movs	r2, #2
 80171ec:	68f8      	ldr	r0, [r7, #12]
 80171ee:	f7ff fd10 	bl	8016c12 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80171f2:	697b      	ldr	r3, [r7, #20]
 80171f4:	2205      	movs	r2, #5
 80171f6:	721a      	strb	r2, [r3, #8]
      return -1;
 80171f8:	f04f 33ff 	mov.w	r3, #4294967295
 80171fc:	e083      	b.n	8017306 <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017204:	68db      	ldr	r3, [r3, #12]
 8017206:	7afa      	ldrb	r2, [r7, #11]
 8017208:	4610      	mov	r0, r2
 801720a:	4798      	blx	r3
 801720c:	4603      	mov	r3, r0
 801720e:	2b00      	cmp	r3, #0
 8017210:	d00b      	beq.n	801722a <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8017212:	7af9      	ldrb	r1, [r7, #11]
 8017214:	2327      	movs	r3, #39	; 0x27
 8017216:	2202      	movs	r2, #2
 8017218:	68f8      	ldr	r0, [r7, #12]
 801721a:	f7ff fcfa 	bl	8016c12 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801721e:	697b      	ldr	r3, [r7, #20]
 8017220:	2205      	movs	r2, #5
 8017222:	721a      	strb	r2, [r3, #8]
      return -1;
 8017224:	f04f 33ff 	mov.w	r3, #4294967295
 8017228:	e06d      	b.n	8017306 <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	3302      	adds	r3, #2
 801722e:	781b      	ldrb	r3, [r3, #0]
 8017230:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	3303      	adds	r3, #3
 8017236:	781b      	ldrb	r3, [r3, #0]
 8017238:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801723a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	3304      	adds	r3, #4
 8017240:	781b      	ldrb	r3, [r3, #0]
 8017242:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8017244:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8017246:	687a      	ldr	r2, [r7, #4]
 8017248:	3205      	adds	r2, #5
 801724a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801724c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801724e:	697b      	ldr	r3, [r7, #20]
 8017250:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	3306      	adds	r3, #6
 8017258:	781b      	ldrb	r3, [r3, #0]
 801725a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	3307      	adds	r3, #7
 8017260:	781b      	ldrb	r3, [r3, #0]
 8017262:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8017264:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	3308      	adds	r3, #8
 801726a:	781b      	ldrb	r3, [r3, #0]
 801726c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801726e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8017270:	687a      	ldr	r2, [r7, #4]
 8017272:	3209      	adds	r2, #9
 8017274:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8017276:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8017278:	697b      	ldr	r3, [r7, #20]
 801727a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801727e:	697b      	ldr	r3, [r7, #20]
 8017280:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8017284:	697b      	ldr	r3, [r7, #20]
 8017286:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801728a:	7af9      	ldrb	r1, [r7, #11]
 801728c:	68f8      	ldr	r0, [r7, #12]
 801728e:	f000 f871 	bl	8017374 <SCSI_CheckAddressRange>
 8017292:	4603      	mov	r3, r0
 8017294:	2b00      	cmp	r3, #0
 8017296:	da02      	bge.n	801729e <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8017298:	f04f 33ff 	mov.w	r3, #4294967295
 801729c:	e033      	b.n	8017306 <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801729e:	697b      	ldr	r3, [r7, #20]
 80172a0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80172a4:	697a      	ldr	r2, [r7, #20]
 80172a6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80172aa:	fb02 f303 	mul.w	r3, r2, r3
 80172ae:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80172b0:	697b      	ldr	r3, [r7, #20]
 80172b2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80172b6:	693a      	ldr	r2, [r7, #16]
 80172b8:	429a      	cmp	r2, r3
 80172ba:	d00a      	beq.n	80172d2 <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80172bc:	697b      	ldr	r3, [r7, #20]
 80172be:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80172c2:	2320      	movs	r3, #32
 80172c4:	2205      	movs	r2, #5
 80172c6:	68f8      	ldr	r0, [r7, #12]
 80172c8:	f7ff fca3 	bl	8016c12 <SCSI_SenseCode>
      return -1;
 80172cc:	f04f 33ff 	mov.w	r3, #4294967295
 80172d0:	e019      	b.n	8017306 <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80172d2:	693b      	ldr	r3, [r7, #16]
 80172d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80172d8:	bf28      	it	cs
 80172da:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80172de:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80172e0:	697b      	ldr	r3, [r7, #20]
 80172e2:	2201      	movs	r2, #1
 80172e4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80172e6:	697b      	ldr	r3, [r7, #20]
 80172e8:	f103 0210 	add.w	r2, r3, #16
 80172ec:	693b      	ldr	r3, [r7, #16]
 80172ee:	2101      	movs	r1, #1
 80172f0:	68f8      	ldr	r0, [r7, #12]
 80172f2:	f004 ff4e 	bl	801c192 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80172f6:	2300      	movs	r3, #0
 80172f8:	e005      	b.n	8017306 <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 80172fa:	7afb      	ldrb	r3, [r7, #11]
 80172fc:	4619      	mov	r1, r3
 80172fe:	68f8      	ldr	r0, [r7, #12]
 8017300:	f000 f8cd 	bl	801749e <SCSI_ProcessWrite>
 8017304:	4603      	mov	r3, r0
}
 8017306:	4618      	mov	r0, r3
 8017308:	3718      	adds	r7, #24
 801730a:	46bd      	mov	sp, r7
 801730c:	bd80      	pop	{r7, pc}

0801730e <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801730e:	b580      	push	{r7, lr}
 8017310:	b086      	sub	sp, #24
 8017312:	af00      	add	r7, sp, #0
 8017314:	60f8      	str	r0, [r7, #12]
 8017316:	460b      	mov	r3, r1
 8017318:	607a      	str	r2, [r7, #4]
 801731a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017322:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	3301      	adds	r3, #1
 8017328:	781b      	ldrb	r3, [r3, #0]
 801732a:	f003 0302 	and.w	r3, r3, #2
 801732e:	2b00      	cmp	r3, #0
 8017330:	d008      	beq.n	8017344 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8017332:	7af9      	ldrb	r1, [r7, #11]
 8017334:	2324      	movs	r3, #36	; 0x24
 8017336:	2205      	movs	r2, #5
 8017338:	68f8      	ldr	r0, [r7, #12]
 801733a:	f7ff fc6a 	bl	8016c12 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 801733e:	f04f 33ff 	mov.w	r3, #4294967295
 8017342:	e013      	b.n	801736c <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8017344:	697b      	ldr	r3, [r7, #20]
 8017346:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801734a:	697b      	ldr	r3, [r7, #20]
 801734c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8017350:	7af9      	ldrb	r1, [r7, #11]
 8017352:	68f8      	ldr	r0, [r7, #12]
 8017354:	f000 f80e 	bl	8017374 <SCSI_CheckAddressRange>
 8017358:	4603      	mov	r3, r0
 801735a:	2b00      	cmp	r3, #0
 801735c:	da02      	bge.n	8017364 <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 801735e:	f04f 33ff 	mov.w	r3, #4294967295
 8017362:	e003      	b.n	801736c <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 8017364:	697b      	ldr	r3, [r7, #20]
 8017366:	2200      	movs	r2, #0
 8017368:	60da      	str	r2, [r3, #12]

  return 0;
 801736a:	2300      	movs	r3, #0
}
 801736c:	4618      	mov	r0, r3
 801736e:	3718      	adds	r7, #24
 8017370:	46bd      	mov	sp, r7
 8017372:	bd80      	pop	{r7, pc}

08017374 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8017374:	b580      	push	{r7, lr}
 8017376:	b086      	sub	sp, #24
 8017378:	af00      	add	r7, sp, #0
 801737a:	60f8      	str	r0, [r7, #12]
 801737c:	607a      	str	r2, [r7, #4]
 801737e:	603b      	str	r3, [r7, #0]
 8017380:	460b      	mov	r3, r1
 8017382:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801738a:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 801738c:	687a      	ldr	r2, [r7, #4]
 801738e:	683b      	ldr	r3, [r7, #0]
 8017390:	441a      	add	r2, r3
 8017392:	697b      	ldr	r3, [r7, #20]
 8017394:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8017398:	429a      	cmp	r2, r3
 801739a:	d908      	bls.n	80173ae <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 801739c:	7af9      	ldrb	r1, [r7, #11]
 801739e:	2321      	movs	r3, #33	; 0x21
 80173a0:	2205      	movs	r2, #5
 80173a2:	68f8      	ldr	r0, [r7, #12]
 80173a4:	f7ff fc35 	bl	8016c12 <SCSI_SenseCode>
    return -1;
 80173a8:	f04f 33ff 	mov.w	r3, #4294967295
 80173ac:	e000      	b.n	80173b0 <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 80173ae:	2300      	movs	r3, #0
}
 80173b0:	4618      	mov	r0, r3
 80173b2:	3718      	adds	r7, #24
 80173b4:	46bd      	mov	sp, r7
 80173b6:	bd80      	pop	{r7, pc}

080173b8 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80173b8:	b590      	push	{r4, r7, lr}
 80173ba:	b085      	sub	sp, #20
 80173bc:	af00      	add	r7, sp, #0
 80173be:	6078      	str	r0, [r7, #4]
 80173c0:	460b      	mov	r3, r1
 80173c2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80173ca:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80173d2:	68fa      	ldr	r2, [r7, #12]
 80173d4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80173d8:	fb02 f303 	mul.w	r3, r2, r3
 80173dc:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80173de:	68bb      	ldr	r3, [r7, #8]
 80173e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80173e4:	bf28      	it	cs
 80173e6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80173ea:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80173f2:	691c      	ldr	r4, [r3, #16]
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	f103 0110 	add.w	r1, r3, #16
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8017406:	4618      	mov	r0, r3
 8017408:	68bb      	ldr	r3, [r7, #8]
 801740a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 801740e:	b29b      	uxth	r3, r3
 8017410:	78f8      	ldrb	r0, [r7, #3]
 8017412:	47a0      	blx	r4
 8017414:	4603      	mov	r3, r0
 8017416:	2b00      	cmp	r3, #0
 8017418:	da08      	bge.n	801742c <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 801741a:	78f9      	ldrb	r1, [r7, #3]
 801741c:	2311      	movs	r3, #17
 801741e:	2204      	movs	r2, #4
 8017420:	6878      	ldr	r0, [r7, #4]
 8017422:	f7ff fbf6 	bl	8016c12 <SCSI_SenseCode>
    return -1;
 8017426:	f04f 33ff 	mov.w	r3, #4294967295
 801742a:	e034      	b.n	8017496 <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	f103 0210 	add.w	r2, r3, #16
 8017432:	68bb      	ldr	r3, [r7, #8]
 8017434:	2181      	movs	r1, #129	; 0x81
 8017436:	6878      	ldr	r0, [r7, #4]
 8017438:	f004 fe8a 	bl	801c150 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8017448:	4619      	mov	r1, r3
 801744a:	68bb      	ldr	r3, [r7, #8]
 801744c:	fbb3 f3f1 	udiv	r3, r3, r1
 8017450:	441a      	add	r2, r3
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8017464:	4619      	mov	r1, r3
 8017466:	68bb      	ldr	r3, [r7, #8]
 8017468:	fbb3 f3f1 	udiv	r3, r3, r1
 801746c:	1ad2      	subs	r2, r2, r3
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801747a:	68bb      	ldr	r3, [r7, #8]
 801747c:	1ad2      	subs	r2, r2, r3
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801748a:	2b00      	cmp	r3, #0
 801748c:	d102      	bne.n	8017494 <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	2203      	movs	r2, #3
 8017492:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8017494:	2300      	movs	r3, #0
}
 8017496:	4618      	mov	r0, r3
 8017498:	3714      	adds	r7, #20
 801749a:	46bd      	mov	sp, r7
 801749c:	bd90      	pop	{r4, r7, pc}

0801749e <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801749e:	b590      	push	{r4, r7, lr}
 80174a0:	b085      	sub	sp, #20
 80174a2:	af00      	add	r7, sp, #0
 80174a4:	6078      	str	r0, [r7, #4]
 80174a6:	460b      	mov	r3, r1
 80174a8:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80174b0:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80174b8:	68fa      	ldr	r2, [r7, #12]
 80174ba:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80174be:	fb02 f303 	mul.w	r3, r2, r3
 80174c2:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80174c4:	68bb      	ldr	r3, [r7, #8]
 80174c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80174ca:	bf28      	it	cs
 80174cc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80174d0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80174d8:	695c      	ldr	r4, [r3, #20]
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	f103 0110 	add.w	r1, r3, #16
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80174ec:	4618      	mov	r0, r3
 80174ee:	68bb      	ldr	r3, [r7, #8]
 80174f0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80174f4:	b29b      	uxth	r3, r3
 80174f6:	78f8      	ldrb	r0, [r7, #3]
 80174f8:	47a0      	blx	r4
 80174fa:	4603      	mov	r3, r0
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	da08      	bge.n	8017512 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8017500:	78f9      	ldrb	r1, [r7, #3]
 8017502:	2303      	movs	r3, #3
 8017504:	2204      	movs	r2, #4
 8017506:	6878      	ldr	r0, [r7, #4]
 8017508:	f7ff fb83 	bl	8016c12 <SCSI_SenseCode>
    return -1;
 801750c:	f04f 33ff 	mov.w	r3, #4294967295
 8017510:	e044      	b.n	801759c <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801751e:	4619      	mov	r1, r3
 8017520:	68bb      	ldr	r3, [r7, #8]
 8017522:	fbb3 f3f1 	udiv	r3, r3, r1
 8017526:	441a      	add	r2, r3
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801753a:	4619      	mov	r1, r3
 801753c:	68bb      	ldr	r3, [r7, #8]
 801753e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017542:	1ad2      	subs	r2, r2, r3
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8017550:	68bb      	ldr	r3, [r7, #8]
 8017552:	1ad2      	subs	r2, r2, r3
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8017560:	2b00      	cmp	r3, #0
 8017562:	d104      	bne.n	801756e <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8017564:	2100      	movs	r1, #0
 8017566:	6878      	ldr	r0, [r7, #4]
 8017568:	f7fe fe5c 	bl	8016224 <MSC_BOT_SendCSW>
 801756c:	e015      	b.n	801759a <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8017574:	68fa      	ldr	r2, [r7, #12]
 8017576:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801757a:	fb02 f303 	mul.w	r3, r2, r3
 801757e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017582:	bf28      	it	cs
 8017584:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8017588:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	f103 0210 	add.w	r2, r3, #16
 8017590:	68bb      	ldr	r3, [r7, #8]
 8017592:	2101      	movs	r1, #1
 8017594:	6878      	ldr	r0, [r7, #4]
 8017596:	f004 fdfc 	bl	801c192 <USBD_LL_PrepareReceive>
  }

  return 0;
 801759a:	2300      	movs	r3, #0
}
 801759c:	4618      	mov	r0, r3
 801759e:	3714      	adds	r7, #20
 80175a0:	46bd      	mov	sp, r7
 80175a2:	bd90      	pop	{r4, r7, pc}

080175a4 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80175a4:	b480      	push	{r7}
 80175a6:	b087      	sub	sp, #28
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	60f8      	str	r0, [r7, #12]
 80175ac:	60b9      	str	r1, [r7, #8]
 80175ae:	4613      	mov	r3, r2
 80175b0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80175b2:	88fb      	ldrh	r3, [r7, #6]
 80175b4:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 80175b6:	8afa      	ldrh	r2, [r7, #22]
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80175bc:	e00b      	b.n	80175d6 <SCSI_UpdateBotData+0x32>
  {
    len--;
 80175be:	8afb      	ldrh	r3, [r7, #22]
 80175c0:	3b01      	subs	r3, #1
 80175c2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80175c4:	8afb      	ldrh	r3, [r7, #22]
 80175c6:	68ba      	ldr	r2, [r7, #8]
 80175c8:	441a      	add	r2, r3
 80175ca:	8afb      	ldrh	r3, [r7, #22]
 80175cc:	7811      	ldrb	r1, [r2, #0]
 80175ce:	68fa      	ldr	r2, [r7, #12]
 80175d0:	4413      	add	r3, r2
 80175d2:	460a      	mov	r2, r1
 80175d4:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80175d6:	8afb      	ldrh	r3, [r7, #22]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d1f0      	bne.n	80175be <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 80175dc:	2300      	movs	r3, #0
}
 80175de:	4618      	mov	r0, r3
 80175e0:	371c      	adds	r7, #28
 80175e2:	46bd      	mov	sp, r7
 80175e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e8:	4770      	bx	lr

080175ea <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80175ea:	b580      	push	{r7, lr}
 80175ec:	b086      	sub	sp, #24
 80175ee:	af00      	add	r7, sp, #0
 80175f0:	60f8      	str	r0, [r7, #12]
 80175f2:	60b9      	str	r1, [r7, #8]
 80175f4:	4613      	mov	r3, r2
 80175f6:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d101      	bne.n	8017602 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80175fe:	2303      	movs	r3, #3
 8017600:	e025      	b.n	801764e <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017608:	2b00      	cmp	r3, #0
 801760a:	d003      	beq.n	8017614 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	2200      	movs	r2, #0
 8017610:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 801761a:	2b00      	cmp	r3, #0
 801761c:	d003      	beq.n	8017626 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	2200      	movs	r2, #0
 8017622:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8017626:	68bb      	ldr	r3, [r7, #8]
 8017628:	2b00      	cmp	r3, #0
 801762a:	d003      	beq.n	8017634 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	68ba      	ldr	r2, [r7, #8]
 8017630:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	2201      	movs	r2, #1
 8017638:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	79fa      	ldrb	r2, [r7, #7]
 8017640:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8017642:	68f8      	ldr	r0, [r7, #12]
 8017644:	f004 fc30 	bl	801bea8 <USBD_LL_Init>
 8017648:	4603      	mov	r3, r0
 801764a:	75fb      	strb	r3, [r7, #23]

  return ret;
 801764c:	7dfb      	ldrb	r3, [r7, #23]
}
 801764e:	4618      	mov	r0, r3
 8017650:	3718      	adds	r7, #24
 8017652:	46bd      	mov	sp, r7
 8017654:	bd80      	pop	{r7, pc}

08017656 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8017656:	b580      	push	{r7, lr}
 8017658:	b084      	sub	sp, #16
 801765a:	af00      	add	r7, sp, #0
 801765c:	6078      	str	r0, [r7, #4]
 801765e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017660:	2300      	movs	r3, #0
 8017662:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8017664:	683b      	ldr	r3, [r7, #0]
 8017666:	2b00      	cmp	r3, #0
 8017668:	d101      	bne.n	801766e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801766a:	2303      	movs	r3, #3
 801766c:	e010      	b.n	8017690 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	683a      	ldr	r2, [r7, #0]
 8017672:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801767c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801767e:	f107 020e 	add.w	r2, r7, #14
 8017682:	4610      	mov	r0, r2
 8017684:	4798      	blx	r3
 8017686:	4602      	mov	r2, r0
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 801768e:	2300      	movs	r3, #0
}
 8017690:	4618      	mov	r0, r3
 8017692:	3710      	adds	r7, #16
 8017694:	46bd      	mov	sp, r7
 8017696:	bd80      	pop	{r7, pc}

08017698 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b082      	sub	sp, #8
 801769c:	af00      	add	r7, sp, #0
 801769e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80176a0:	6878      	ldr	r0, [r7, #4]
 80176a2:	f004 fc4d 	bl	801bf40 <USBD_LL_Start>
 80176a6:	4603      	mov	r3, r0
}
 80176a8:	4618      	mov	r0, r3
 80176aa:	3708      	adds	r7, #8
 80176ac:	46bd      	mov	sp, r7
 80176ae:	bd80      	pop	{r7, pc}

080176b0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80176b0:	b480      	push	{r7}
 80176b2:	b083      	sub	sp, #12
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80176b8:	2300      	movs	r3, #0
}
 80176ba:	4618      	mov	r0, r3
 80176bc:	370c      	adds	r7, #12
 80176be:	46bd      	mov	sp, r7
 80176c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c4:	4770      	bx	lr

080176c6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80176c6:	b580      	push	{r7, lr}
 80176c8:	b084      	sub	sp, #16
 80176ca:	af00      	add	r7, sp, #0
 80176cc:	6078      	str	r0, [r7, #4]
 80176ce:	460b      	mov	r3, r1
 80176d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80176d2:	2303      	movs	r3, #3
 80176d4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d009      	beq.n	80176f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	78fa      	ldrb	r2, [r7, #3]
 80176ea:	4611      	mov	r1, r2
 80176ec:	6878      	ldr	r0, [r7, #4]
 80176ee:	4798      	blx	r3
 80176f0:	4603      	mov	r3, r0
 80176f2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80176f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80176f6:	4618      	mov	r0, r3
 80176f8:	3710      	adds	r7, #16
 80176fa:	46bd      	mov	sp, r7
 80176fc:	bd80      	pop	{r7, pc}

080176fe <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80176fe:	b580      	push	{r7, lr}
 8017700:	b082      	sub	sp, #8
 8017702:	af00      	add	r7, sp, #0
 8017704:	6078      	str	r0, [r7, #4]
 8017706:	460b      	mov	r3, r1
 8017708:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017710:	2b00      	cmp	r3, #0
 8017712:	d007      	beq.n	8017724 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801771a:	685b      	ldr	r3, [r3, #4]
 801771c:	78fa      	ldrb	r2, [r7, #3]
 801771e:	4611      	mov	r1, r2
 8017720:	6878      	ldr	r0, [r7, #4]
 8017722:	4798      	blx	r3
  }

  return USBD_OK;
 8017724:	2300      	movs	r3, #0
}
 8017726:	4618      	mov	r0, r3
 8017728:	3708      	adds	r7, #8
 801772a:	46bd      	mov	sp, r7
 801772c:	bd80      	pop	{r7, pc}

0801772e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801772e:	b580      	push	{r7, lr}
 8017730:	b084      	sub	sp, #16
 8017732:	af00      	add	r7, sp, #0
 8017734:	6078      	str	r0, [r7, #4]
 8017736:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801773e:	6839      	ldr	r1, [r7, #0]
 8017740:	4618      	mov	r0, r3
 8017742:	f000 ff64 	bl	801860e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	2201      	movs	r2, #1
 801774a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8017754:	461a      	mov	r2, r3
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8017762:	f003 031f 	and.w	r3, r3, #31
 8017766:	2b02      	cmp	r3, #2
 8017768:	d01a      	beq.n	80177a0 <USBD_LL_SetupStage+0x72>
 801776a:	2b02      	cmp	r3, #2
 801776c:	d822      	bhi.n	80177b4 <USBD_LL_SetupStage+0x86>
 801776e:	2b00      	cmp	r3, #0
 8017770:	d002      	beq.n	8017778 <USBD_LL_SetupStage+0x4a>
 8017772:	2b01      	cmp	r3, #1
 8017774:	d00a      	beq.n	801778c <USBD_LL_SetupStage+0x5e>
 8017776:	e01d      	b.n	80177b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801777e:	4619      	mov	r1, r3
 8017780:	6878      	ldr	r0, [r7, #4]
 8017782:	f000 fa17 	bl	8017bb4 <USBD_StdDevReq>
 8017786:	4603      	mov	r3, r0
 8017788:	73fb      	strb	r3, [r7, #15]
      break;
 801778a:	e020      	b.n	80177ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8017792:	4619      	mov	r1, r3
 8017794:	6878      	ldr	r0, [r7, #4]
 8017796:	f000 fa7b 	bl	8017c90 <USBD_StdItfReq>
 801779a:	4603      	mov	r3, r0
 801779c:	73fb      	strb	r3, [r7, #15]
      break;
 801779e:	e016      	b.n	80177ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80177a6:	4619      	mov	r1, r3
 80177a8:	6878      	ldr	r0, [r7, #4]
 80177aa:	f000 fab9 	bl	8017d20 <USBD_StdEPReq>
 80177ae:	4603      	mov	r3, r0
 80177b0:	73fb      	strb	r3, [r7, #15]
      break;
 80177b2:	e00c      	b.n	80177ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80177ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80177be:	b2db      	uxtb	r3, r3
 80177c0:	4619      	mov	r1, r3
 80177c2:	6878      	ldr	r0, [r7, #4]
 80177c4:	f004 fc3b 	bl	801c03e <USBD_LL_StallEP>
 80177c8:	4603      	mov	r3, r0
 80177ca:	73fb      	strb	r3, [r7, #15]
      break;
 80177cc:	bf00      	nop
  }

  return ret;
 80177ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80177d0:	4618      	mov	r0, r3
 80177d2:	3710      	adds	r7, #16
 80177d4:	46bd      	mov	sp, r7
 80177d6:	bd80      	pop	{r7, pc}

080177d8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80177d8:	b580      	push	{r7, lr}
 80177da:	b086      	sub	sp, #24
 80177dc:	af00      	add	r7, sp, #0
 80177de:	60f8      	str	r0, [r7, #12]
 80177e0:	460b      	mov	r3, r1
 80177e2:	607a      	str	r2, [r7, #4]
 80177e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80177e6:	7afb      	ldrb	r3, [r7, #11]
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d137      	bne.n	801785c <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80177f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80177f4:	68fb      	ldr	r3, [r7, #12]
 80177f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80177fa:	2b03      	cmp	r3, #3
 80177fc:	d14a      	bne.n	8017894 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80177fe:	693b      	ldr	r3, [r7, #16]
 8017800:	689a      	ldr	r2, [r3, #8]
 8017802:	693b      	ldr	r3, [r7, #16]
 8017804:	68db      	ldr	r3, [r3, #12]
 8017806:	429a      	cmp	r2, r3
 8017808:	d913      	bls.n	8017832 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801780a:	693b      	ldr	r3, [r7, #16]
 801780c:	689a      	ldr	r2, [r3, #8]
 801780e:	693b      	ldr	r3, [r7, #16]
 8017810:	68db      	ldr	r3, [r3, #12]
 8017812:	1ad2      	subs	r2, r2, r3
 8017814:	693b      	ldr	r3, [r7, #16]
 8017816:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8017818:	693b      	ldr	r3, [r7, #16]
 801781a:	68da      	ldr	r2, [r3, #12]
 801781c:	693b      	ldr	r3, [r7, #16]
 801781e:	689b      	ldr	r3, [r3, #8]
 8017820:	4293      	cmp	r3, r2
 8017822:	bf28      	it	cs
 8017824:	4613      	movcs	r3, r2
 8017826:	461a      	mov	r2, r3
 8017828:	6879      	ldr	r1, [r7, #4]
 801782a:	68f8      	ldr	r0, [r7, #12]
 801782c:	f000 ffc6 	bl	80187bc <USBD_CtlContinueRx>
 8017830:	e030      	b.n	8017894 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017838:	691b      	ldr	r3, [r3, #16]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d00a      	beq.n	8017854 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8017844:	2b03      	cmp	r3, #3
 8017846:	d105      	bne.n	8017854 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801784e:	691b      	ldr	r3, [r3, #16]
 8017850:	68f8      	ldr	r0, [r7, #12]
 8017852:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8017854:	68f8      	ldr	r0, [r7, #12]
 8017856:	f000 ffc2 	bl	80187de <USBD_CtlSendStatus>
 801785a:	e01b      	b.n	8017894 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017862:	699b      	ldr	r3, [r3, #24]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d013      	beq.n	8017890 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801786e:	2b03      	cmp	r3, #3
 8017870:	d10e      	bne.n	8017890 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017878:	699b      	ldr	r3, [r3, #24]
 801787a:	7afa      	ldrb	r2, [r7, #11]
 801787c:	4611      	mov	r1, r2
 801787e:	68f8      	ldr	r0, [r7, #12]
 8017880:	4798      	blx	r3
 8017882:	4603      	mov	r3, r0
 8017884:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8017886:	7dfb      	ldrb	r3, [r7, #23]
 8017888:	2b00      	cmp	r3, #0
 801788a:	d003      	beq.n	8017894 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 801788c:	7dfb      	ldrb	r3, [r7, #23]
 801788e:	e002      	b.n	8017896 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8017890:	2303      	movs	r3, #3
 8017892:	e000      	b.n	8017896 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8017894:	2300      	movs	r3, #0
}
 8017896:	4618      	mov	r0, r3
 8017898:	3718      	adds	r7, #24
 801789a:	46bd      	mov	sp, r7
 801789c:	bd80      	pop	{r7, pc}

0801789e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801789e:	b580      	push	{r7, lr}
 80178a0:	b086      	sub	sp, #24
 80178a2:	af00      	add	r7, sp, #0
 80178a4:	60f8      	str	r0, [r7, #12]
 80178a6:	460b      	mov	r3, r1
 80178a8:	607a      	str	r2, [r7, #4]
 80178aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80178ac:	7afb      	ldrb	r3, [r7, #11]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d16a      	bne.n	8017988 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	3314      	adds	r3, #20
 80178b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80178be:	2b02      	cmp	r3, #2
 80178c0:	d155      	bne.n	801796e <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80178c2:	693b      	ldr	r3, [r7, #16]
 80178c4:	689a      	ldr	r2, [r3, #8]
 80178c6:	693b      	ldr	r3, [r7, #16]
 80178c8:	68db      	ldr	r3, [r3, #12]
 80178ca:	429a      	cmp	r2, r3
 80178cc:	d914      	bls.n	80178f8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80178ce:	693b      	ldr	r3, [r7, #16]
 80178d0:	689a      	ldr	r2, [r3, #8]
 80178d2:	693b      	ldr	r3, [r7, #16]
 80178d4:	68db      	ldr	r3, [r3, #12]
 80178d6:	1ad2      	subs	r2, r2, r3
 80178d8:	693b      	ldr	r3, [r7, #16]
 80178da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80178dc:	693b      	ldr	r3, [r7, #16]
 80178de:	689b      	ldr	r3, [r3, #8]
 80178e0:	461a      	mov	r2, r3
 80178e2:	6879      	ldr	r1, [r7, #4]
 80178e4:	68f8      	ldr	r0, [r7, #12]
 80178e6:	f000 ff58 	bl	801879a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80178ea:	2300      	movs	r3, #0
 80178ec:	2200      	movs	r2, #0
 80178ee:	2100      	movs	r1, #0
 80178f0:	68f8      	ldr	r0, [r7, #12]
 80178f2:	f004 fc4e 	bl	801c192 <USBD_LL_PrepareReceive>
 80178f6:	e03a      	b.n	801796e <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80178f8:	693b      	ldr	r3, [r7, #16]
 80178fa:	68da      	ldr	r2, [r3, #12]
 80178fc:	693b      	ldr	r3, [r7, #16]
 80178fe:	689b      	ldr	r3, [r3, #8]
 8017900:	429a      	cmp	r2, r3
 8017902:	d11c      	bne.n	801793e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8017904:	693b      	ldr	r3, [r7, #16]
 8017906:	685a      	ldr	r2, [r3, #4]
 8017908:	693b      	ldr	r3, [r7, #16]
 801790a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801790c:	429a      	cmp	r2, r3
 801790e:	d316      	bcc.n	801793e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8017910:	693b      	ldr	r3, [r7, #16]
 8017912:	685a      	ldr	r2, [r3, #4]
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801791a:	429a      	cmp	r2, r3
 801791c:	d20f      	bcs.n	801793e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801791e:	2200      	movs	r2, #0
 8017920:	2100      	movs	r1, #0
 8017922:	68f8      	ldr	r0, [r7, #12]
 8017924:	f000 ff39 	bl	801879a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	2200      	movs	r2, #0
 801792c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017930:	2300      	movs	r3, #0
 8017932:	2200      	movs	r2, #0
 8017934:	2100      	movs	r1, #0
 8017936:	68f8      	ldr	r0, [r7, #12]
 8017938:	f004 fc2b 	bl	801c192 <USBD_LL_PrepareReceive>
 801793c:	e017      	b.n	801796e <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017944:	68db      	ldr	r3, [r3, #12]
 8017946:	2b00      	cmp	r3, #0
 8017948:	d00a      	beq.n	8017960 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8017950:	2b03      	cmp	r3, #3
 8017952:	d105      	bne.n	8017960 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801795a:	68db      	ldr	r3, [r3, #12]
 801795c:	68f8      	ldr	r0, [r7, #12]
 801795e:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8017960:	2180      	movs	r1, #128	; 0x80
 8017962:	68f8      	ldr	r0, [r7, #12]
 8017964:	f004 fb6b 	bl	801c03e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8017968:	68f8      	ldr	r0, [r7, #12]
 801796a:	f000 ff4b 	bl	8018804 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8017974:	2b01      	cmp	r3, #1
 8017976:	d123      	bne.n	80179c0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8017978:	68f8      	ldr	r0, [r7, #12]
 801797a:	f7ff fe99 	bl	80176b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	2200      	movs	r2, #0
 8017982:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8017986:	e01b      	b.n	80179c0 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801798e:	695b      	ldr	r3, [r3, #20]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d013      	beq.n	80179bc <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801799a:	2b03      	cmp	r3, #3
 801799c:	d10e      	bne.n	80179bc <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80179a4:	695b      	ldr	r3, [r3, #20]
 80179a6:	7afa      	ldrb	r2, [r7, #11]
 80179a8:	4611      	mov	r1, r2
 80179aa:	68f8      	ldr	r0, [r7, #12]
 80179ac:	4798      	blx	r3
 80179ae:	4603      	mov	r3, r0
 80179b0:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80179b2:	7dfb      	ldrb	r3, [r7, #23]
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d003      	beq.n	80179c0 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80179b8:	7dfb      	ldrb	r3, [r7, #23]
 80179ba:	e002      	b.n	80179c2 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80179bc:	2303      	movs	r3, #3
 80179be:	e000      	b.n	80179c2 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80179c0:	2300      	movs	r3, #0
}
 80179c2:	4618      	mov	r0, r3
 80179c4:	3718      	adds	r7, #24
 80179c6:	46bd      	mov	sp, r7
 80179c8:	bd80      	pop	{r7, pc}

080179ca <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80179ca:	b580      	push	{r7, lr}
 80179cc:	b082      	sub	sp, #8
 80179ce:	af00      	add	r7, sp, #0
 80179d0:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	2201      	movs	r2, #1
 80179d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	2200      	movs	r2, #0
 80179de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	2200      	movs	r2, #0
 80179e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	2200      	movs	r2, #0
 80179ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d009      	beq.n	8017a0e <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017a00:	685b      	ldr	r3, [r3, #4]
 8017a02:	687a      	ldr	r2, [r7, #4]
 8017a04:	6852      	ldr	r2, [r2, #4]
 8017a06:	b2d2      	uxtb	r2, r2
 8017a08:	4611      	mov	r1, r2
 8017a0a:	6878      	ldr	r0, [r7, #4]
 8017a0c:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017a0e:	2340      	movs	r3, #64	; 0x40
 8017a10:	2200      	movs	r2, #0
 8017a12:	2100      	movs	r1, #0
 8017a14:	6878      	ldr	r0, [r7, #4]
 8017a16:	f004 faae 	bl	801bf76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	2201      	movs	r2, #1
 8017a1e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	2240      	movs	r2, #64	; 0x40
 8017a26:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017a2a:	2340      	movs	r3, #64	; 0x40
 8017a2c:	2200      	movs	r2, #0
 8017a2e:	2180      	movs	r1, #128	; 0x80
 8017a30:	6878      	ldr	r0, [r7, #4]
 8017a32:	f004 faa0 	bl	801bf76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	2201      	movs	r2, #1
 8017a3a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	2240      	movs	r2, #64	; 0x40
 8017a40:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8017a42:	2300      	movs	r3, #0
}
 8017a44:	4618      	mov	r0, r3
 8017a46:	3708      	adds	r7, #8
 8017a48:	46bd      	mov	sp, r7
 8017a4a:	bd80      	pop	{r7, pc}

08017a4c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8017a4c:	b480      	push	{r7}
 8017a4e:	b083      	sub	sp, #12
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	6078      	str	r0, [r7, #4]
 8017a54:	460b      	mov	r3, r1
 8017a56:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	78fa      	ldrb	r2, [r7, #3]
 8017a5c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8017a5e:	2300      	movs	r3, #0
}
 8017a60:	4618      	mov	r0, r3
 8017a62:	370c      	adds	r7, #12
 8017a64:	46bd      	mov	sp, r7
 8017a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a6a:	4770      	bx	lr

08017a6c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8017a6c:	b480      	push	{r7}
 8017a6e:	b083      	sub	sp, #12
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	2204      	movs	r2, #4
 8017a84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8017a88:	2300      	movs	r3, #0
}
 8017a8a:	4618      	mov	r0, r3
 8017a8c:	370c      	adds	r7, #12
 8017a8e:	46bd      	mov	sp, r7
 8017a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a94:	4770      	bx	lr

08017a96 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8017a96:	b480      	push	{r7}
 8017a98:	b083      	sub	sp, #12
 8017a9a:	af00      	add	r7, sp, #0
 8017a9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017aa4:	2b04      	cmp	r3, #4
 8017aa6:	d105      	bne.n	8017ab4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8017ab4:	2300      	movs	r3, #0
}
 8017ab6:	4618      	mov	r0, r3
 8017ab8:	370c      	adds	r7, #12
 8017aba:	46bd      	mov	sp, r7
 8017abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac0:	4770      	bx	lr

08017ac2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8017ac2:	b580      	push	{r7, lr}
 8017ac4:	b082      	sub	sp, #8
 8017ac6:	af00      	add	r7, sp, #0
 8017ac8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017ad0:	2b03      	cmp	r3, #3
 8017ad2:	d10b      	bne.n	8017aec <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017ada:	69db      	ldr	r3, [r3, #28]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d005      	beq.n	8017aec <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017ae6:	69db      	ldr	r3, [r3, #28]
 8017ae8:	6878      	ldr	r0, [r7, #4]
 8017aea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017aec:	2300      	movs	r3, #0
}
 8017aee:	4618      	mov	r0, r3
 8017af0:	3708      	adds	r7, #8
 8017af2:	46bd      	mov	sp, r7
 8017af4:	bd80      	pop	{r7, pc}

08017af6 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8017af6:	b480      	push	{r7}
 8017af8:	b083      	sub	sp, #12
 8017afa:	af00      	add	r7, sp, #0
 8017afc:	6078      	str	r0, [r7, #4]
 8017afe:	460b      	mov	r3, r1
 8017b00:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8017b02:	2300      	movs	r3, #0
}
 8017b04:	4618      	mov	r0, r3
 8017b06:	370c      	adds	r7, #12
 8017b08:	46bd      	mov	sp, r7
 8017b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b0e:	4770      	bx	lr

08017b10 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8017b10:	b480      	push	{r7}
 8017b12:	b083      	sub	sp, #12
 8017b14:	af00      	add	r7, sp, #0
 8017b16:	6078      	str	r0, [r7, #4]
 8017b18:	460b      	mov	r3, r1
 8017b1a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8017b1c:	2300      	movs	r3, #0
}
 8017b1e:	4618      	mov	r0, r3
 8017b20:	370c      	adds	r7, #12
 8017b22:	46bd      	mov	sp, r7
 8017b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b28:	4770      	bx	lr

08017b2a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8017b2a:	b480      	push	{r7}
 8017b2c:	b083      	sub	sp, #12
 8017b2e:	af00      	add	r7, sp, #0
 8017b30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017b32:	2300      	movs	r3, #0
}
 8017b34:	4618      	mov	r0, r3
 8017b36:	370c      	adds	r7, #12
 8017b38:	46bd      	mov	sp, r7
 8017b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b3e:	4770      	bx	lr

08017b40 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8017b40:	b580      	push	{r7, lr}
 8017b42:	b082      	sub	sp, #8
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	2201      	movs	r2, #1
 8017b4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d009      	beq.n	8017b6e <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017b60:	685b      	ldr	r3, [r3, #4]
 8017b62:	687a      	ldr	r2, [r7, #4]
 8017b64:	6852      	ldr	r2, [r2, #4]
 8017b66:	b2d2      	uxtb	r2, r2
 8017b68:	4611      	mov	r1, r2
 8017b6a:	6878      	ldr	r0, [r7, #4]
 8017b6c:	4798      	blx	r3
  }

  return USBD_OK;
 8017b6e:	2300      	movs	r3, #0
}
 8017b70:	4618      	mov	r0, r3
 8017b72:	3708      	adds	r7, #8
 8017b74:	46bd      	mov	sp, r7
 8017b76:	bd80      	pop	{r7, pc}

08017b78 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8017b78:	b480      	push	{r7}
 8017b7a:	b087      	sub	sp, #28
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8017b84:	697b      	ldr	r3, [r7, #20]
 8017b86:	781b      	ldrb	r3, [r3, #0]
 8017b88:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8017b8a:	697b      	ldr	r3, [r7, #20]
 8017b8c:	3301      	adds	r3, #1
 8017b8e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8017b90:	697b      	ldr	r3, [r7, #20]
 8017b92:	781b      	ldrb	r3, [r3, #0]
 8017b94:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8017b96:	8a3b      	ldrh	r3, [r7, #16]
 8017b98:	021b      	lsls	r3, r3, #8
 8017b9a:	b21a      	sxth	r2, r3
 8017b9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017ba0:	4313      	orrs	r3, r2
 8017ba2:	b21b      	sxth	r3, r3
 8017ba4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8017ba6:	89fb      	ldrh	r3, [r7, #14]
}
 8017ba8:	4618      	mov	r0, r3
 8017baa:	371c      	adds	r7, #28
 8017bac:	46bd      	mov	sp, r7
 8017bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bb2:	4770      	bx	lr

08017bb4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017bb4:	b580      	push	{r7, lr}
 8017bb6:	b084      	sub	sp, #16
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	6078      	str	r0, [r7, #4]
 8017bbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017bc2:	683b      	ldr	r3, [r7, #0]
 8017bc4:	781b      	ldrb	r3, [r3, #0]
 8017bc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017bca:	2b40      	cmp	r3, #64	; 0x40
 8017bcc:	d005      	beq.n	8017bda <USBD_StdDevReq+0x26>
 8017bce:	2b40      	cmp	r3, #64	; 0x40
 8017bd0:	d853      	bhi.n	8017c7a <USBD_StdDevReq+0xc6>
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d00b      	beq.n	8017bee <USBD_StdDevReq+0x3a>
 8017bd6:	2b20      	cmp	r3, #32
 8017bd8:	d14f      	bne.n	8017c7a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017be0:	689b      	ldr	r3, [r3, #8]
 8017be2:	6839      	ldr	r1, [r7, #0]
 8017be4:	6878      	ldr	r0, [r7, #4]
 8017be6:	4798      	blx	r3
 8017be8:	4603      	mov	r3, r0
 8017bea:	73fb      	strb	r3, [r7, #15]
    break;
 8017bec:	e04a      	b.n	8017c84 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8017bee:	683b      	ldr	r3, [r7, #0]
 8017bf0:	785b      	ldrb	r3, [r3, #1]
 8017bf2:	2b09      	cmp	r3, #9
 8017bf4:	d83b      	bhi.n	8017c6e <USBD_StdDevReq+0xba>
 8017bf6:	a201      	add	r2, pc, #4	; (adr r2, 8017bfc <USBD_StdDevReq+0x48>)
 8017bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017bfc:	08017c51 	.word	0x08017c51
 8017c00:	08017c65 	.word	0x08017c65
 8017c04:	08017c6f 	.word	0x08017c6f
 8017c08:	08017c5b 	.word	0x08017c5b
 8017c0c:	08017c6f 	.word	0x08017c6f
 8017c10:	08017c2f 	.word	0x08017c2f
 8017c14:	08017c25 	.word	0x08017c25
 8017c18:	08017c6f 	.word	0x08017c6f
 8017c1c:	08017c47 	.word	0x08017c47
 8017c20:	08017c39 	.word	0x08017c39
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8017c24:	6839      	ldr	r1, [r7, #0]
 8017c26:	6878      	ldr	r0, [r7, #4]
 8017c28:	f000 f9d8 	bl	8017fdc <USBD_GetDescriptor>
      break;
 8017c2c:	e024      	b.n	8017c78 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8017c2e:	6839      	ldr	r1, [r7, #0]
 8017c30:	6878      	ldr	r0, [r7, #4]
 8017c32:	f000 fb67 	bl	8018304 <USBD_SetAddress>
      break;
 8017c36:	e01f      	b.n	8017c78 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8017c38:	6839      	ldr	r1, [r7, #0]
 8017c3a:	6878      	ldr	r0, [r7, #4]
 8017c3c:	f000 fba6 	bl	801838c <USBD_SetConfig>
 8017c40:	4603      	mov	r3, r0
 8017c42:	73fb      	strb	r3, [r7, #15]
      break;
 8017c44:	e018      	b.n	8017c78 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8017c46:	6839      	ldr	r1, [r7, #0]
 8017c48:	6878      	ldr	r0, [r7, #4]
 8017c4a:	f000 fc43 	bl	80184d4 <USBD_GetConfig>
      break;
 8017c4e:	e013      	b.n	8017c78 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8017c50:	6839      	ldr	r1, [r7, #0]
 8017c52:	6878      	ldr	r0, [r7, #4]
 8017c54:	f000 fc73 	bl	801853e <USBD_GetStatus>
      break;
 8017c58:	e00e      	b.n	8017c78 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8017c5a:	6839      	ldr	r1, [r7, #0]
 8017c5c:	6878      	ldr	r0, [r7, #4]
 8017c5e:	f000 fca1 	bl	80185a4 <USBD_SetFeature>
      break;
 8017c62:	e009      	b.n	8017c78 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8017c64:	6839      	ldr	r1, [r7, #0]
 8017c66:	6878      	ldr	r0, [r7, #4]
 8017c68:	f000 fcb0 	bl	80185cc <USBD_ClrFeature>
      break;
 8017c6c:	e004      	b.n	8017c78 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8017c6e:	6839      	ldr	r1, [r7, #0]
 8017c70:	6878      	ldr	r0, [r7, #4]
 8017c72:	f000 fd06 	bl	8018682 <USBD_CtlError>
      break;
 8017c76:	bf00      	nop
    }
    break;
 8017c78:	e004      	b.n	8017c84 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8017c7a:	6839      	ldr	r1, [r7, #0]
 8017c7c:	6878      	ldr	r0, [r7, #4]
 8017c7e:	f000 fd00 	bl	8018682 <USBD_CtlError>
    break;
 8017c82:	bf00      	nop
  }

  return ret;
 8017c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c86:	4618      	mov	r0, r3
 8017c88:	3710      	adds	r7, #16
 8017c8a:	46bd      	mov	sp, r7
 8017c8c:	bd80      	pop	{r7, pc}
 8017c8e:	bf00      	nop

08017c90 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017c90:	b580      	push	{r7, lr}
 8017c92:	b084      	sub	sp, #16
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	6078      	str	r0, [r7, #4]
 8017c98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017c9e:	683b      	ldr	r3, [r7, #0]
 8017ca0:	781b      	ldrb	r3, [r3, #0]
 8017ca2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017ca6:	2b40      	cmp	r3, #64	; 0x40
 8017ca8:	d005      	beq.n	8017cb6 <USBD_StdItfReq+0x26>
 8017caa:	2b40      	cmp	r3, #64	; 0x40
 8017cac:	d82e      	bhi.n	8017d0c <USBD_StdItfReq+0x7c>
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d001      	beq.n	8017cb6 <USBD_StdItfReq+0x26>
 8017cb2:	2b20      	cmp	r3, #32
 8017cb4:	d12a      	bne.n	8017d0c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017cbc:	3b01      	subs	r3, #1
 8017cbe:	2b02      	cmp	r3, #2
 8017cc0:	d81d      	bhi.n	8017cfe <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8017cc2:	683b      	ldr	r3, [r7, #0]
 8017cc4:	889b      	ldrh	r3, [r3, #4]
 8017cc6:	b2db      	uxtb	r3, r3
 8017cc8:	2b01      	cmp	r3, #1
 8017cca:	d813      	bhi.n	8017cf4 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017cd2:	689b      	ldr	r3, [r3, #8]
 8017cd4:	6839      	ldr	r1, [r7, #0]
 8017cd6:	6878      	ldr	r0, [r7, #4]
 8017cd8:	4798      	blx	r3
 8017cda:	4603      	mov	r3, r0
 8017cdc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8017cde:	683b      	ldr	r3, [r7, #0]
 8017ce0:	88db      	ldrh	r3, [r3, #6]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d110      	bne.n	8017d08 <USBD_StdItfReq+0x78>
 8017ce6:	7bfb      	ldrb	r3, [r7, #15]
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d10d      	bne.n	8017d08 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8017cec:	6878      	ldr	r0, [r7, #4]
 8017cee:	f000 fd76 	bl	80187de <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8017cf2:	e009      	b.n	8017d08 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8017cf4:	6839      	ldr	r1, [r7, #0]
 8017cf6:	6878      	ldr	r0, [r7, #4]
 8017cf8:	f000 fcc3 	bl	8018682 <USBD_CtlError>
      break;
 8017cfc:	e004      	b.n	8017d08 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8017cfe:	6839      	ldr	r1, [r7, #0]
 8017d00:	6878      	ldr	r0, [r7, #4]
 8017d02:	f000 fcbe 	bl	8018682 <USBD_CtlError>
      break;
 8017d06:	e000      	b.n	8017d0a <USBD_StdItfReq+0x7a>
      break;
 8017d08:	bf00      	nop
    }
    break;
 8017d0a:	e004      	b.n	8017d16 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8017d0c:	6839      	ldr	r1, [r7, #0]
 8017d0e:	6878      	ldr	r0, [r7, #4]
 8017d10:	f000 fcb7 	bl	8018682 <USBD_CtlError>
    break;
 8017d14:	bf00      	nop
  }

  return ret;
 8017d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d18:	4618      	mov	r0, r3
 8017d1a:	3710      	adds	r7, #16
 8017d1c:	46bd      	mov	sp, r7
 8017d1e:	bd80      	pop	{r7, pc}

08017d20 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017d20:	b580      	push	{r7, lr}
 8017d22:	b084      	sub	sp, #16
 8017d24:	af00      	add	r7, sp, #0
 8017d26:	6078      	str	r0, [r7, #4]
 8017d28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8017d2e:	683b      	ldr	r3, [r7, #0]
 8017d30:	889b      	ldrh	r3, [r3, #4]
 8017d32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017d34:	683b      	ldr	r3, [r7, #0]
 8017d36:	781b      	ldrb	r3, [r3, #0]
 8017d38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017d3c:	2b40      	cmp	r3, #64	; 0x40
 8017d3e:	d007      	beq.n	8017d50 <USBD_StdEPReq+0x30>
 8017d40:	2b40      	cmp	r3, #64	; 0x40
 8017d42:	f200 8140 	bhi.w	8017fc6 <USBD_StdEPReq+0x2a6>
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d00c      	beq.n	8017d64 <USBD_StdEPReq+0x44>
 8017d4a:	2b20      	cmp	r3, #32
 8017d4c:	f040 813b 	bne.w	8017fc6 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017d56:	689b      	ldr	r3, [r3, #8]
 8017d58:	6839      	ldr	r1, [r7, #0]
 8017d5a:	6878      	ldr	r0, [r7, #4]
 8017d5c:	4798      	blx	r3
 8017d5e:	4603      	mov	r3, r0
 8017d60:	73fb      	strb	r3, [r7, #15]
    break;
 8017d62:	e135      	b.n	8017fd0 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8017d64:	683b      	ldr	r3, [r7, #0]
 8017d66:	785b      	ldrb	r3, [r3, #1]
 8017d68:	2b03      	cmp	r3, #3
 8017d6a:	d007      	beq.n	8017d7c <USBD_StdEPReq+0x5c>
 8017d6c:	2b03      	cmp	r3, #3
 8017d6e:	f300 8124 	bgt.w	8017fba <USBD_StdEPReq+0x29a>
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d07b      	beq.n	8017e6e <USBD_StdEPReq+0x14e>
 8017d76:	2b01      	cmp	r3, #1
 8017d78:	d03b      	beq.n	8017df2 <USBD_StdEPReq+0xd2>
 8017d7a:	e11e      	b.n	8017fba <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017d82:	2b02      	cmp	r3, #2
 8017d84:	d002      	beq.n	8017d8c <USBD_StdEPReq+0x6c>
 8017d86:	2b03      	cmp	r3, #3
 8017d88:	d016      	beq.n	8017db8 <USBD_StdEPReq+0x98>
 8017d8a:	e02c      	b.n	8017de6 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017d8c:	7bbb      	ldrb	r3, [r7, #14]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d00d      	beq.n	8017dae <USBD_StdEPReq+0x8e>
 8017d92:	7bbb      	ldrb	r3, [r7, #14]
 8017d94:	2b80      	cmp	r3, #128	; 0x80
 8017d96:	d00a      	beq.n	8017dae <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8017d98:	7bbb      	ldrb	r3, [r7, #14]
 8017d9a:	4619      	mov	r1, r3
 8017d9c:	6878      	ldr	r0, [r7, #4]
 8017d9e:	f004 f94e 	bl	801c03e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8017da2:	2180      	movs	r1, #128	; 0x80
 8017da4:	6878      	ldr	r0, [r7, #4]
 8017da6:	f004 f94a 	bl	801c03e <USBD_LL_StallEP>
 8017daa:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8017dac:	e020      	b.n	8017df0 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8017dae:	6839      	ldr	r1, [r7, #0]
 8017db0:	6878      	ldr	r0, [r7, #4]
 8017db2:	f000 fc66 	bl	8018682 <USBD_CtlError>
        break;
 8017db6:	e01b      	b.n	8017df0 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8017db8:	683b      	ldr	r3, [r7, #0]
 8017dba:	885b      	ldrh	r3, [r3, #2]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d10e      	bne.n	8017dde <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8017dc0:	7bbb      	ldrb	r3, [r7, #14]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d00b      	beq.n	8017dde <USBD_StdEPReq+0xbe>
 8017dc6:	7bbb      	ldrb	r3, [r7, #14]
 8017dc8:	2b80      	cmp	r3, #128	; 0x80
 8017dca:	d008      	beq.n	8017dde <USBD_StdEPReq+0xbe>
 8017dcc:	683b      	ldr	r3, [r7, #0]
 8017dce:	88db      	ldrh	r3, [r3, #6]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d104      	bne.n	8017dde <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8017dd4:	7bbb      	ldrb	r3, [r7, #14]
 8017dd6:	4619      	mov	r1, r3
 8017dd8:	6878      	ldr	r0, [r7, #4]
 8017dda:	f004 f930 	bl	801c03e <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8017dde:	6878      	ldr	r0, [r7, #4]
 8017de0:	f000 fcfd 	bl	80187de <USBD_CtlSendStatus>

        break;
 8017de4:	e004      	b.n	8017df0 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8017de6:	6839      	ldr	r1, [r7, #0]
 8017de8:	6878      	ldr	r0, [r7, #4]
 8017dea:	f000 fc4a 	bl	8018682 <USBD_CtlError>
        break;
 8017dee:	bf00      	nop
      }
      break;
 8017df0:	e0e8      	b.n	8017fc4 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017df8:	2b02      	cmp	r3, #2
 8017dfa:	d002      	beq.n	8017e02 <USBD_StdEPReq+0xe2>
 8017dfc:	2b03      	cmp	r3, #3
 8017dfe:	d016      	beq.n	8017e2e <USBD_StdEPReq+0x10e>
 8017e00:	e02e      	b.n	8017e60 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017e02:	7bbb      	ldrb	r3, [r7, #14]
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d00d      	beq.n	8017e24 <USBD_StdEPReq+0x104>
 8017e08:	7bbb      	ldrb	r3, [r7, #14]
 8017e0a:	2b80      	cmp	r3, #128	; 0x80
 8017e0c:	d00a      	beq.n	8017e24 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8017e0e:	7bbb      	ldrb	r3, [r7, #14]
 8017e10:	4619      	mov	r1, r3
 8017e12:	6878      	ldr	r0, [r7, #4]
 8017e14:	f004 f913 	bl	801c03e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8017e18:	2180      	movs	r1, #128	; 0x80
 8017e1a:	6878      	ldr	r0, [r7, #4]
 8017e1c:	f004 f90f 	bl	801c03e <USBD_LL_StallEP>
 8017e20:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8017e22:	e023      	b.n	8017e6c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8017e24:	6839      	ldr	r1, [r7, #0]
 8017e26:	6878      	ldr	r0, [r7, #4]
 8017e28:	f000 fc2b 	bl	8018682 <USBD_CtlError>
        break;
 8017e2c:	e01e      	b.n	8017e6c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8017e2e:	683b      	ldr	r3, [r7, #0]
 8017e30:	885b      	ldrh	r3, [r3, #2]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d119      	bne.n	8017e6a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8017e36:	7bbb      	ldrb	r3, [r7, #14]
 8017e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d004      	beq.n	8017e4a <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8017e40:	7bbb      	ldrb	r3, [r7, #14]
 8017e42:	4619      	mov	r1, r3
 8017e44:	6878      	ldr	r0, [r7, #4]
 8017e46:	f004 f919 	bl	801c07c <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8017e4a:	6878      	ldr	r0, [r7, #4]
 8017e4c:	f000 fcc7 	bl	80187de <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017e56:	689b      	ldr	r3, [r3, #8]
 8017e58:	6839      	ldr	r1, [r7, #0]
 8017e5a:	6878      	ldr	r0, [r7, #4]
 8017e5c:	4798      	blx	r3
        }
        break;
 8017e5e:	e004      	b.n	8017e6a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8017e60:	6839      	ldr	r1, [r7, #0]
 8017e62:	6878      	ldr	r0, [r7, #4]
 8017e64:	f000 fc0d 	bl	8018682 <USBD_CtlError>
        break;
 8017e68:	e000      	b.n	8017e6c <USBD_StdEPReq+0x14c>
        break;
 8017e6a:	bf00      	nop
      }
      break;
 8017e6c:	e0aa      	b.n	8017fc4 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017e74:	2b02      	cmp	r3, #2
 8017e76:	d002      	beq.n	8017e7e <USBD_StdEPReq+0x15e>
 8017e78:	2b03      	cmp	r3, #3
 8017e7a:	d032      	beq.n	8017ee2 <USBD_StdEPReq+0x1c2>
 8017e7c:	e097      	b.n	8017fae <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017e7e:	7bbb      	ldrb	r3, [r7, #14]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d007      	beq.n	8017e94 <USBD_StdEPReq+0x174>
 8017e84:	7bbb      	ldrb	r3, [r7, #14]
 8017e86:	2b80      	cmp	r3, #128	; 0x80
 8017e88:	d004      	beq.n	8017e94 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8017e8a:	6839      	ldr	r1, [r7, #0]
 8017e8c:	6878      	ldr	r0, [r7, #4]
 8017e8e:	f000 fbf8 	bl	8018682 <USBD_CtlError>
          break;
 8017e92:	e091      	b.n	8017fb8 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017e94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	da0b      	bge.n	8017eb4 <USBD_StdEPReq+0x194>
 8017e9c:	7bbb      	ldrb	r3, [r7, #14]
 8017e9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017ea2:	4613      	mov	r3, r2
 8017ea4:	009b      	lsls	r3, r3, #2
 8017ea6:	4413      	add	r3, r2
 8017ea8:	009b      	lsls	r3, r3, #2
 8017eaa:	3310      	adds	r3, #16
 8017eac:	687a      	ldr	r2, [r7, #4]
 8017eae:	4413      	add	r3, r2
 8017eb0:	3304      	adds	r3, #4
 8017eb2:	e00b      	b.n	8017ecc <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8017eb4:	7bbb      	ldrb	r3, [r7, #14]
 8017eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017eba:	4613      	mov	r3, r2
 8017ebc:	009b      	lsls	r3, r3, #2
 8017ebe:	4413      	add	r3, r2
 8017ec0:	009b      	lsls	r3, r3, #2
 8017ec2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8017ec6:	687a      	ldr	r2, [r7, #4]
 8017ec8:	4413      	add	r3, r2
 8017eca:	3304      	adds	r3, #4
 8017ecc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8017ece:	68bb      	ldr	r3, [r7, #8]
 8017ed0:	2200      	movs	r2, #0
 8017ed2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017ed4:	68bb      	ldr	r3, [r7, #8]
 8017ed6:	2202      	movs	r2, #2
 8017ed8:	4619      	mov	r1, r3
 8017eda:	6878      	ldr	r0, [r7, #4]
 8017edc:	f000 fc42 	bl	8018764 <USBD_CtlSendData>
        break;
 8017ee0:	e06a      	b.n	8017fb8 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8017ee2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	da11      	bge.n	8017f0e <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8017eea:	7bbb      	ldrb	r3, [r7, #14]
 8017eec:	f003 020f 	and.w	r2, r3, #15
 8017ef0:	6879      	ldr	r1, [r7, #4]
 8017ef2:	4613      	mov	r3, r2
 8017ef4:	009b      	lsls	r3, r3, #2
 8017ef6:	4413      	add	r3, r2
 8017ef8:	009b      	lsls	r3, r3, #2
 8017efa:	440b      	add	r3, r1
 8017efc:	3324      	adds	r3, #36	; 0x24
 8017efe:	881b      	ldrh	r3, [r3, #0]
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d117      	bne.n	8017f34 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8017f04:	6839      	ldr	r1, [r7, #0]
 8017f06:	6878      	ldr	r0, [r7, #4]
 8017f08:	f000 fbbb 	bl	8018682 <USBD_CtlError>
            break;
 8017f0c:	e054      	b.n	8017fb8 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8017f0e:	7bbb      	ldrb	r3, [r7, #14]
 8017f10:	f003 020f 	and.w	r2, r3, #15
 8017f14:	6879      	ldr	r1, [r7, #4]
 8017f16:	4613      	mov	r3, r2
 8017f18:	009b      	lsls	r3, r3, #2
 8017f1a:	4413      	add	r3, r2
 8017f1c:	009b      	lsls	r3, r3, #2
 8017f1e:	440b      	add	r3, r1
 8017f20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8017f24:	881b      	ldrh	r3, [r3, #0]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d104      	bne.n	8017f34 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8017f2a:	6839      	ldr	r1, [r7, #0]
 8017f2c:	6878      	ldr	r0, [r7, #4]
 8017f2e:	f000 fba8 	bl	8018682 <USBD_CtlError>
            break;
 8017f32:	e041      	b.n	8017fb8 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017f34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	da0b      	bge.n	8017f54 <USBD_StdEPReq+0x234>
 8017f3c:	7bbb      	ldrb	r3, [r7, #14]
 8017f3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017f42:	4613      	mov	r3, r2
 8017f44:	009b      	lsls	r3, r3, #2
 8017f46:	4413      	add	r3, r2
 8017f48:	009b      	lsls	r3, r3, #2
 8017f4a:	3310      	adds	r3, #16
 8017f4c:	687a      	ldr	r2, [r7, #4]
 8017f4e:	4413      	add	r3, r2
 8017f50:	3304      	adds	r3, #4
 8017f52:	e00b      	b.n	8017f6c <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8017f54:	7bbb      	ldrb	r3, [r7, #14]
 8017f56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017f5a:	4613      	mov	r3, r2
 8017f5c:	009b      	lsls	r3, r3, #2
 8017f5e:	4413      	add	r3, r2
 8017f60:	009b      	lsls	r3, r3, #2
 8017f62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8017f66:	687a      	ldr	r2, [r7, #4]
 8017f68:	4413      	add	r3, r2
 8017f6a:	3304      	adds	r3, #4
 8017f6c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017f6e:	7bbb      	ldrb	r3, [r7, #14]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d002      	beq.n	8017f7a <USBD_StdEPReq+0x25a>
 8017f74:	7bbb      	ldrb	r3, [r7, #14]
 8017f76:	2b80      	cmp	r3, #128	; 0x80
 8017f78:	d103      	bne.n	8017f82 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8017f7a:	68bb      	ldr	r3, [r7, #8]
 8017f7c:	2200      	movs	r2, #0
 8017f7e:	601a      	str	r2, [r3, #0]
 8017f80:	e00e      	b.n	8017fa0 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8017f82:	7bbb      	ldrb	r3, [r7, #14]
 8017f84:	4619      	mov	r1, r3
 8017f86:	6878      	ldr	r0, [r7, #4]
 8017f88:	f004 f897 	bl	801c0ba <USBD_LL_IsStallEP>
 8017f8c:	4603      	mov	r3, r0
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d003      	beq.n	8017f9a <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8017f92:	68bb      	ldr	r3, [r7, #8]
 8017f94:	2201      	movs	r2, #1
 8017f96:	601a      	str	r2, [r3, #0]
 8017f98:	e002      	b.n	8017fa0 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8017f9a:	68bb      	ldr	r3, [r7, #8]
 8017f9c:	2200      	movs	r2, #0
 8017f9e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017fa0:	68bb      	ldr	r3, [r7, #8]
 8017fa2:	2202      	movs	r2, #2
 8017fa4:	4619      	mov	r1, r3
 8017fa6:	6878      	ldr	r0, [r7, #4]
 8017fa8:	f000 fbdc 	bl	8018764 <USBD_CtlSendData>
          break;
 8017fac:	e004      	b.n	8017fb8 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8017fae:	6839      	ldr	r1, [r7, #0]
 8017fb0:	6878      	ldr	r0, [r7, #4]
 8017fb2:	f000 fb66 	bl	8018682 <USBD_CtlError>
        break;
 8017fb6:	bf00      	nop
      }
      break;
 8017fb8:	e004      	b.n	8017fc4 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8017fba:	6839      	ldr	r1, [r7, #0]
 8017fbc:	6878      	ldr	r0, [r7, #4]
 8017fbe:	f000 fb60 	bl	8018682 <USBD_CtlError>
      break;
 8017fc2:	bf00      	nop
    }
    break;
 8017fc4:	e004      	b.n	8017fd0 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8017fc6:	6839      	ldr	r1, [r7, #0]
 8017fc8:	6878      	ldr	r0, [r7, #4]
 8017fca:	f000 fb5a 	bl	8018682 <USBD_CtlError>
    break;
 8017fce:	bf00      	nop
  }

  return ret;
 8017fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	3710      	adds	r7, #16
 8017fd6:	46bd      	mov	sp, r7
 8017fd8:	bd80      	pop	{r7, pc}
	...

08017fdc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017fdc:	b580      	push	{r7, lr}
 8017fde:	b084      	sub	sp, #16
 8017fe0:	af00      	add	r7, sp, #0
 8017fe2:	6078      	str	r0, [r7, #4]
 8017fe4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017fe6:	2300      	movs	r3, #0
 8017fe8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8017fea:	2300      	movs	r3, #0
 8017fec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017fee:	2300      	movs	r3, #0
 8017ff0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8017ff2:	683b      	ldr	r3, [r7, #0]
 8017ff4:	885b      	ldrh	r3, [r3, #2]
 8017ff6:	0a1b      	lsrs	r3, r3, #8
 8017ff8:	b29b      	uxth	r3, r3
 8017ffa:	3b01      	subs	r3, #1
 8017ffc:	2b0e      	cmp	r3, #14
 8017ffe:	f200 8152 	bhi.w	80182a6 <USBD_GetDescriptor+0x2ca>
 8018002:	a201      	add	r2, pc, #4	; (adr r2, 8018008 <USBD_GetDescriptor+0x2c>)
 8018004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018008:	08018079 	.word	0x08018079
 801800c:	08018091 	.word	0x08018091
 8018010:	080180d1 	.word	0x080180d1
 8018014:	080182a7 	.word	0x080182a7
 8018018:	080182a7 	.word	0x080182a7
 801801c:	08018247 	.word	0x08018247
 8018020:	08018273 	.word	0x08018273
 8018024:	080182a7 	.word	0x080182a7
 8018028:	080182a7 	.word	0x080182a7
 801802c:	080182a7 	.word	0x080182a7
 8018030:	080182a7 	.word	0x080182a7
 8018034:	080182a7 	.word	0x080182a7
 8018038:	080182a7 	.word	0x080182a7
 801803c:	080182a7 	.word	0x080182a7
 8018040:	08018045 	.word	0x08018045
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801804a:	69db      	ldr	r3, [r3, #28]
 801804c:	2b00      	cmp	r3, #0
 801804e:	d00b      	beq.n	8018068 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018056:	69db      	ldr	r3, [r3, #28]
 8018058:	687a      	ldr	r2, [r7, #4]
 801805a:	7c12      	ldrb	r2, [r2, #16]
 801805c:	f107 0108 	add.w	r1, r7, #8
 8018060:	4610      	mov	r0, r2
 8018062:	4798      	blx	r3
 8018064:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8018066:	e126      	b.n	80182b6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8018068:	6839      	ldr	r1, [r7, #0]
 801806a:	6878      	ldr	r0, [r7, #4]
 801806c:	f000 fb09 	bl	8018682 <USBD_CtlError>
      err++;
 8018070:	7afb      	ldrb	r3, [r7, #11]
 8018072:	3301      	adds	r3, #1
 8018074:	72fb      	strb	r3, [r7, #11]
    break;
 8018076:	e11e      	b.n	80182b6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	687a      	ldr	r2, [r7, #4]
 8018082:	7c12      	ldrb	r2, [r2, #16]
 8018084:	f107 0108 	add.w	r1, r7, #8
 8018088:	4610      	mov	r0, r2
 801808a:	4798      	blx	r3
 801808c:	60f8      	str	r0, [r7, #12]
    break;
 801808e:	e112      	b.n	80182b6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	7c1b      	ldrb	r3, [r3, #16]
 8018094:	2b00      	cmp	r3, #0
 8018096:	d10d      	bne.n	80180b4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801809e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80180a0:	f107 0208 	add.w	r2, r7, #8
 80180a4:	4610      	mov	r0, r2
 80180a6:	4798      	blx	r3
 80180a8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80180aa:	68fb      	ldr	r3, [r7, #12]
 80180ac:	3301      	adds	r3, #1
 80180ae:	2202      	movs	r2, #2
 80180b0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80180b2:	e100      	b.n	80182b6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80180ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180bc:	f107 0208 	add.w	r2, r7, #8
 80180c0:	4610      	mov	r0, r2
 80180c2:	4798      	blx	r3
 80180c4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	3301      	adds	r3, #1
 80180ca:	2202      	movs	r2, #2
 80180cc:	701a      	strb	r2, [r3, #0]
    break;
 80180ce:	e0f2      	b.n	80182b6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80180d0:	683b      	ldr	r3, [r7, #0]
 80180d2:	885b      	ldrh	r3, [r3, #2]
 80180d4:	b2db      	uxtb	r3, r3
 80180d6:	2b05      	cmp	r3, #5
 80180d8:	f200 80ac 	bhi.w	8018234 <USBD_GetDescriptor+0x258>
 80180dc:	a201      	add	r2, pc, #4	; (adr r2, 80180e4 <USBD_GetDescriptor+0x108>)
 80180de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180e2:	bf00      	nop
 80180e4:	080180fd 	.word	0x080180fd
 80180e8:	08018131 	.word	0x08018131
 80180ec:	08018165 	.word	0x08018165
 80180f0:	08018199 	.word	0x08018199
 80180f4:	080181cd 	.word	0x080181cd
 80180f8:	08018201 	.word	0x08018201
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018102:	685b      	ldr	r3, [r3, #4]
 8018104:	2b00      	cmp	r3, #0
 8018106:	d00b      	beq.n	8018120 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801810e:	685b      	ldr	r3, [r3, #4]
 8018110:	687a      	ldr	r2, [r7, #4]
 8018112:	7c12      	ldrb	r2, [r2, #16]
 8018114:	f107 0108 	add.w	r1, r7, #8
 8018118:	4610      	mov	r0, r2
 801811a:	4798      	blx	r3
 801811c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801811e:	e091      	b.n	8018244 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8018120:	6839      	ldr	r1, [r7, #0]
 8018122:	6878      	ldr	r0, [r7, #4]
 8018124:	f000 faad 	bl	8018682 <USBD_CtlError>
        err++;
 8018128:	7afb      	ldrb	r3, [r7, #11]
 801812a:	3301      	adds	r3, #1
 801812c:	72fb      	strb	r3, [r7, #11]
      break;
 801812e:	e089      	b.n	8018244 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018136:	689b      	ldr	r3, [r3, #8]
 8018138:	2b00      	cmp	r3, #0
 801813a:	d00b      	beq.n	8018154 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018142:	689b      	ldr	r3, [r3, #8]
 8018144:	687a      	ldr	r2, [r7, #4]
 8018146:	7c12      	ldrb	r2, [r2, #16]
 8018148:	f107 0108 	add.w	r1, r7, #8
 801814c:	4610      	mov	r0, r2
 801814e:	4798      	blx	r3
 8018150:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018152:	e077      	b.n	8018244 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8018154:	6839      	ldr	r1, [r7, #0]
 8018156:	6878      	ldr	r0, [r7, #4]
 8018158:	f000 fa93 	bl	8018682 <USBD_CtlError>
        err++;
 801815c:	7afb      	ldrb	r3, [r7, #11]
 801815e:	3301      	adds	r3, #1
 8018160:	72fb      	strb	r3, [r7, #11]
      break;
 8018162:	e06f      	b.n	8018244 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801816a:	68db      	ldr	r3, [r3, #12]
 801816c:	2b00      	cmp	r3, #0
 801816e:	d00b      	beq.n	8018188 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018176:	68db      	ldr	r3, [r3, #12]
 8018178:	687a      	ldr	r2, [r7, #4]
 801817a:	7c12      	ldrb	r2, [r2, #16]
 801817c:	f107 0108 	add.w	r1, r7, #8
 8018180:	4610      	mov	r0, r2
 8018182:	4798      	blx	r3
 8018184:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018186:	e05d      	b.n	8018244 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8018188:	6839      	ldr	r1, [r7, #0]
 801818a:	6878      	ldr	r0, [r7, #4]
 801818c:	f000 fa79 	bl	8018682 <USBD_CtlError>
        err++;
 8018190:	7afb      	ldrb	r3, [r7, #11]
 8018192:	3301      	adds	r3, #1
 8018194:	72fb      	strb	r3, [r7, #11]
      break;
 8018196:	e055      	b.n	8018244 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801819e:	691b      	ldr	r3, [r3, #16]
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d00b      	beq.n	80181bc <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80181aa:	691b      	ldr	r3, [r3, #16]
 80181ac:	687a      	ldr	r2, [r7, #4]
 80181ae:	7c12      	ldrb	r2, [r2, #16]
 80181b0:	f107 0108 	add.w	r1, r7, #8
 80181b4:	4610      	mov	r0, r2
 80181b6:	4798      	blx	r3
 80181b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80181ba:	e043      	b.n	8018244 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80181bc:	6839      	ldr	r1, [r7, #0]
 80181be:	6878      	ldr	r0, [r7, #4]
 80181c0:	f000 fa5f 	bl	8018682 <USBD_CtlError>
        err++;
 80181c4:	7afb      	ldrb	r3, [r7, #11]
 80181c6:	3301      	adds	r3, #1
 80181c8:	72fb      	strb	r3, [r7, #11]
      break;
 80181ca:	e03b      	b.n	8018244 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80181d2:	695b      	ldr	r3, [r3, #20]
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d00b      	beq.n	80181f0 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80181de:	695b      	ldr	r3, [r3, #20]
 80181e0:	687a      	ldr	r2, [r7, #4]
 80181e2:	7c12      	ldrb	r2, [r2, #16]
 80181e4:	f107 0108 	add.w	r1, r7, #8
 80181e8:	4610      	mov	r0, r2
 80181ea:	4798      	blx	r3
 80181ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80181ee:	e029      	b.n	8018244 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80181f0:	6839      	ldr	r1, [r7, #0]
 80181f2:	6878      	ldr	r0, [r7, #4]
 80181f4:	f000 fa45 	bl	8018682 <USBD_CtlError>
        err++;
 80181f8:	7afb      	ldrb	r3, [r7, #11]
 80181fa:	3301      	adds	r3, #1
 80181fc:	72fb      	strb	r3, [r7, #11]
      break;
 80181fe:	e021      	b.n	8018244 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018206:	699b      	ldr	r3, [r3, #24]
 8018208:	2b00      	cmp	r3, #0
 801820a:	d00b      	beq.n	8018224 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018212:	699b      	ldr	r3, [r3, #24]
 8018214:	687a      	ldr	r2, [r7, #4]
 8018216:	7c12      	ldrb	r2, [r2, #16]
 8018218:	f107 0108 	add.w	r1, r7, #8
 801821c:	4610      	mov	r0, r2
 801821e:	4798      	blx	r3
 8018220:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018222:	e00f      	b.n	8018244 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8018224:	6839      	ldr	r1, [r7, #0]
 8018226:	6878      	ldr	r0, [r7, #4]
 8018228:	f000 fa2b 	bl	8018682 <USBD_CtlError>
        err++;
 801822c:	7afb      	ldrb	r3, [r7, #11]
 801822e:	3301      	adds	r3, #1
 8018230:	72fb      	strb	r3, [r7, #11]
      break;
 8018232:	e007      	b.n	8018244 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8018234:	6839      	ldr	r1, [r7, #0]
 8018236:	6878      	ldr	r0, [r7, #4]
 8018238:	f000 fa23 	bl	8018682 <USBD_CtlError>
      err++;
 801823c:	7afb      	ldrb	r3, [r7, #11]
 801823e:	3301      	adds	r3, #1
 8018240:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8018242:	bf00      	nop
    }
    break;
 8018244:	e037      	b.n	80182b6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	7c1b      	ldrb	r3, [r3, #16]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d109      	bne.n	8018262 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018256:	f107 0208 	add.w	r2, r7, #8
 801825a:	4610      	mov	r0, r2
 801825c:	4798      	blx	r3
 801825e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8018260:	e029      	b.n	80182b6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8018262:	6839      	ldr	r1, [r7, #0]
 8018264:	6878      	ldr	r0, [r7, #4]
 8018266:	f000 fa0c 	bl	8018682 <USBD_CtlError>
      err++;
 801826a:	7afb      	ldrb	r3, [r7, #11]
 801826c:	3301      	adds	r3, #1
 801826e:	72fb      	strb	r3, [r7, #11]
    break;
 8018270:	e021      	b.n	80182b6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	7c1b      	ldrb	r3, [r3, #16]
 8018276:	2b00      	cmp	r3, #0
 8018278:	d10d      	bne.n	8018296 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018282:	f107 0208 	add.w	r2, r7, #8
 8018286:	4610      	mov	r0, r2
 8018288:	4798      	blx	r3
 801828a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	3301      	adds	r3, #1
 8018290:	2207      	movs	r2, #7
 8018292:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8018294:	e00f      	b.n	80182b6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8018296:	6839      	ldr	r1, [r7, #0]
 8018298:	6878      	ldr	r0, [r7, #4]
 801829a:	f000 f9f2 	bl	8018682 <USBD_CtlError>
      err++;
 801829e:	7afb      	ldrb	r3, [r7, #11]
 80182a0:	3301      	adds	r3, #1
 80182a2:	72fb      	strb	r3, [r7, #11]
    break;
 80182a4:	e007      	b.n	80182b6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 80182a6:	6839      	ldr	r1, [r7, #0]
 80182a8:	6878      	ldr	r0, [r7, #4]
 80182aa:	f000 f9ea 	bl	8018682 <USBD_CtlError>
    err++;
 80182ae:	7afb      	ldrb	r3, [r7, #11]
 80182b0:	3301      	adds	r3, #1
 80182b2:	72fb      	strb	r3, [r7, #11]
    break;
 80182b4:	bf00      	nop
  }

  if (err != 0U)
 80182b6:	7afb      	ldrb	r3, [r7, #11]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d11e      	bne.n	80182fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80182bc:	683b      	ldr	r3, [r7, #0]
 80182be:	88db      	ldrh	r3, [r3, #6]
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d016      	beq.n	80182f2 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 80182c4:	893b      	ldrh	r3, [r7, #8]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d00e      	beq.n	80182e8 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 80182ca:	683b      	ldr	r3, [r7, #0]
 80182cc:	88da      	ldrh	r2, [r3, #6]
 80182ce:	893b      	ldrh	r3, [r7, #8]
 80182d0:	4293      	cmp	r3, r2
 80182d2:	bf28      	it	cs
 80182d4:	4613      	movcs	r3, r2
 80182d6:	b29b      	uxth	r3, r3
 80182d8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80182da:	893b      	ldrh	r3, [r7, #8]
 80182dc:	461a      	mov	r2, r3
 80182de:	68f9      	ldr	r1, [r7, #12]
 80182e0:	6878      	ldr	r0, [r7, #4]
 80182e2:	f000 fa3f 	bl	8018764 <USBD_CtlSendData>
 80182e6:	e009      	b.n	80182fc <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80182e8:	6839      	ldr	r1, [r7, #0]
 80182ea:	6878      	ldr	r0, [r7, #4]
 80182ec:	f000 f9c9 	bl	8018682 <USBD_CtlError>
 80182f0:	e004      	b.n	80182fc <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80182f2:	6878      	ldr	r0, [r7, #4]
 80182f4:	f000 fa73 	bl	80187de <USBD_CtlSendStatus>
 80182f8:	e000      	b.n	80182fc <USBD_GetDescriptor+0x320>
    return;
 80182fa:	bf00      	nop
    }
  }
}
 80182fc:	3710      	adds	r7, #16
 80182fe:	46bd      	mov	sp, r7
 8018300:	bd80      	pop	{r7, pc}
 8018302:	bf00      	nop

08018304 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018304:	b580      	push	{r7, lr}
 8018306:	b084      	sub	sp, #16
 8018308:	af00      	add	r7, sp, #0
 801830a:	6078      	str	r0, [r7, #4]
 801830c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801830e:	683b      	ldr	r3, [r7, #0]
 8018310:	889b      	ldrh	r3, [r3, #4]
 8018312:	2b00      	cmp	r3, #0
 8018314:	d130      	bne.n	8018378 <USBD_SetAddress+0x74>
 8018316:	683b      	ldr	r3, [r7, #0]
 8018318:	88db      	ldrh	r3, [r3, #6]
 801831a:	2b00      	cmp	r3, #0
 801831c:	d12c      	bne.n	8018378 <USBD_SetAddress+0x74>
 801831e:	683b      	ldr	r3, [r7, #0]
 8018320:	885b      	ldrh	r3, [r3, #2]
 8018322:	2b7f      	cmp	r3, #127	; 0x7f
 8018324:	d828      	bhi.n	8018378 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8018326:	683b      	ldr	r3, [r7, #0]
 8018328:	885b      	ldrh	r3, [r3, #2]
 801832a:	b2db      	uxtb	r3, r3
 801832c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018330:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018338:	2b03      	cmp	r3, #3
 801833a:	d104      	bne.n	8018346 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801833c:	6839      	ldr	r1, [r7, #0]
 801833e:	6878      	ldr	r0, [r7, #4]
 8018340:	f000 f99f 	bl	8018682 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018344:	e01d      	b.n	8018382 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	7bfa      	ldrb	r2, [r7, #15]
 801834a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801834e:	7bfb      	ldrb	r3, [r7, #15]
 8018350:	4619      	mov	r1, r3
 8018352:	6878      	ldr	r0, [r7, #4]
 8018354:	f003 fedd 	bl	801c112 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8018358:	6878      	ldr	r0, [r7, #4]
 801835a:	f000 fa40 	bl	80187de <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801835e:	7bfb      	ldrb	r3, [r7, #15]
 8018360:	2b00      	cmp	r3, #0
 8018362:	d004      	beq.n	801836e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	2202      	movs	r2, #2
 8018368:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801836c:	e009      	b.n	8018382 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	2201      	movs	r2, #1
 8018372:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018376:	e004      	b.n	8018382 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8018378:	6839      	ldr	r1, [r7, #0]
 801837a:	6878      	ldr	r0, [r7, #4]
 801837c:	f000 f981 	bl	8018682 <USBD_CtlError>
  }
}
 8018380:	bf00      	nop
 8018382:	bf00      	nop
 8018384:	3710      	adds	r7, #16
 8018386:	46bd      	mov	sp, r7
 8018388:	bd80      	pop	{r7, pc}
	...

0801838c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801838c:	b580      	push	{r7, lr}
 801838e:	b084      	sub	sp, #16
 8018390:	af00      	add	r7, sp, #0
 8018392:	6078      	str	r0, [r7, #4]
 8018394:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018396:	2300      	movs	r3, #0
 8018398:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801839a:	683b      	ldr	r3, [r7, #0]
 801839c:	885b      	ldrh	r3, [r3, #2]
 801839e:	b2da      	uxtb	r2, r3
 80183a0:	4b4b      	ldr	r3, [pc, #300]	; (80184d0 <USBD_SetConfig+0x144>)
 80183a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80183a4:	4b4a      	ldr	r3, [pc, #296]	; (80184d0 <USBD_SetConfig+0x144>)
 80183a6:	781b      	ldrb	r3, [r3, #0]
 80183a8:	2b01      	cmp	r3, #1
 80183aa:	d905      	bls.n	80183b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80183ac:	6839      	ldr	r1, [r7, #0]
 80183ae:	6878      	ldr	r0, [r7, #4]
 80183b0:	f000 f967 	bl	8018682 <USBD_CtlError>
    return USBD_FAIL;
 80183b4:	2303      	movs	r3, #3
 80183b6:	e087      	b.n	80184c8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80183be:	2b02      	cmp	r3, #2
 80183c0:	d002      	beq.n	80183c8 <USBD_SetConfig+0x3c>
 80183c2:	2b03      	cmp	r3, #3
 80183c4:	d025      	beq.n	8018412 <USBD_SetConfig+0x86>
 80183c6:	e071      	b.n	80184ac <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80183c8:	4b41      	ldr	r3, [pc, #260]	; (80184d0 <USBD_SetConfig+0x144>)
 80183ca:	781b      	ldrb	r3, [r3, #0]
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d01c      	beq.n	801840a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80183d0:	4b3f      	ldr	r3, [pc, #252]	; (80184d0 <USBD_SetConfig+0x144>)
 80183d2:	781b      	ldrb	r3, [r3, #0]
 80183d4:	461a      	mov	r2, r3
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80183da:	4b3d      	ldr	r3, [pc, #244]	; (80184d0 <USBD_SetConfig+0x144>)
 80183dc:	781b      	ldrb	r3, [r3, #0]
 80183de:	4619      	mov	r1, r3
 80183e0:	6878      	ldr	r0, [r7, #4]
 80183e2:	f7ff f970 	bl	80176c6 <USBD_SetClassConfig>
 80183e6:	4603      	mov	r3, r0
 80183e8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80183ea:	7bfb      	ldrb	r3, [r7, #15]
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d004      	beq.n	80183fa <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80183f0:	6839      	ldr	r1, [r7, #0]
 80183f2:	6878      	ldr	r0, [r7, #4]
 80183f4:	f000 f945 	bl	8018682 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80183f8:	e065      	b.n	80184c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80183fa:	6878      	ldr	r0, [r7, #4]
 80183fc:	f000 f9ef 	bl	80187de <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	2203      	movs	r2, #3
 8018404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8018408:	e05d      	b.n	80184c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 801840a:	6878      	ldr	r0, [r7, #4]
 801840c:	f000 f9e7 	bl	80187de <USBD_CtlSendStatus>
    break;
 8018410:	e059      	b.n	80184c6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8018412:	4b2f      	ldr	r3, [pc, #188]	; (80184d0 <USBD_SetConfig+0x144>)
 8018414:	781b      	ldrb	r3, [r3, #0]
 8018416:	2b00      	cmp	r3, #0
 8018418:	d112      	bne.n	8018440 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	2202      	movs	r2, #2
 801841e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8018422:	4b2b      	ldr	r3, [pc, #172]	; (80184d0 <USBD_SetConfig+0x144>)
 8018424:	781b      	ldrb	r3, [r3, #0]
 8018426:	461a      	mov	r2, r3
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801842c:	4b28      	ldr	r3, [pc, #160]	; (80184d0 <USBD_SetConfig+0x144>)
 801842e:	781b      	ldrb	r3, [r3, #0]
 8018430:	4619      	mov	r1, r3
 8018432:	6878      	ldr	r0, [r7, #4]
 8018434:	f7ff f963 	bl	80176fe <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8018438:	6878      	ldr	r0, [r7, #4]
 801843a:	f000 f9d0 	bl	80187de <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801843e:	e042      	b.n	80184c6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8018440:	4b23      	ldr	r3, [pc, #140]	; (80184d0 <USBD_SetConfig+0x144>)
 8018442:	781b      	ldrb	r3, [r3, #0]
 8018444:	461a      	mov	r2, r3
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	685b      	ldr	r3, [r3, #4]
 801844a:	429a      	cmp	r2, r3
 801844c:	d02a      	beq.n	80184a4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	685b      	ldr	r3, [r3, #4]
 8018452:	b2db      	uxtb	r3, r3
 8018454:	4619      	mov	r1, r3
 8018456:	6878      	ldr	r0, [r7, #4]
 8018458:	f7ff f951 	bl	80176fe <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 801845c:	4b1c      	ldr	r3, [pc, #112]	; (80184d0 <USBD_SetConfig+0x144>)
 801845e:	781b      	ldrb	r3, [r3, #0]
 8018460:	461a      	mov	r2, r3
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8018466:	4b1a      	ldr	r3, [pc, #104]	; (80184d0 <USBD_SetConfig+0x144>)
 8018468:	781b      	ldrb	r3, [r3, #0]
 801846a:	4619      	mov	r1, r3
 801846c:	6878      	ldr	r0, [r7, #4]
 801846e:	f7ff f92a 	bl	80176c6 <USBD_SetClassConfig>
 8018472:	4603      	mov	r3, r0
 8018474:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8018476:	7bfb      	ldrb	r3, [r7, #15]
 8018478:	2b00      	cmp	r3, #0
 801847a:	d00f      	beq.n	801849c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 801847c:	6839      	ldr	r1, [r7, #0]
 801847e:	6878      	ldr	r0, [r7, #4]
 8018480:	f000 f8ff 	bl	8018682 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	685b      	ldr	r3, [r3, #4]
 8018488:	b2db      	uxtb	r3, r3
 801848a:	4619      	mov	r1, r3
 801848c:	6878      	ldr	r0, [r7, #4]
 801848e:	f7ff f936 	bl	80176fe <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	2202      	movs	r2, #2
 8018496:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801849a:	e014      	b.n	80184c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 801849c:	6878      	ldr	r0, [r7, #4]
 801849e:	f000 f99e 	bl	80187de <USBD_CtlSendStatus>
    break;
 80184a2:	e010      	b.n	80184c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80184a4:	6878      	ldr	r0, [r7, #4]
 80184a6:	f000 f99a 	bl	80187de <USBD_CtlSendStatus>
    break;
 80184aa:	e00c      	b.n	80184c6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80184ac:	6839      	ldr	r1, [r7, #0]
 80184ae:	6878      	ldr	r0, [r7, #4]
 80184b0:	f000 f8e7 	bl	8018682 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80184b4:	4b06      	ldr	r3, [pc, #24]	; (80184d0 <USBD_SetConfig+0x144>)
 80184b6:	781b      	ldrb	r3, [r3, #0]
 80184b8:	4619      	mov	r1, r3
 80184ba:	6878      	ldr	r0, [r7, #4]
 80184bc:	f7ff f91f 	bl	80176fe <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80184c0:	2303      	movs	r3, #3
 80184c2:	73fb      	strb	r3, [r7, #15]
    break;
 80184c4:	bf00      	nop
  }

  return ret;
 80184c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80184c8:	4618      	mov	r0, r3
 80184ca:	3710      	adds	r7, #16
 80184cc:	46bd      	mov	sp, r7
 80184ce:	bd80      	pop	{r7, pc}
 80184d0:	20001b84 	.word	0x20001b84

080184d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80184d4:	b580      	push	{r7, lr}
 80184d6:	b082      	sub	sp, #8
 80184d8:	af00      	add	r7, sp, #0
 80184da:	6078      	str	r0, [r7, #4]
 80184dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80184de:	683b      	ldr	r3, [r7, #0]
 80184e0:	88db      	ldrh	r3, [r3, #6]
 80184e2:	2b01      	cmp	r3, #1
 80184e4:	d004      	beq.n	80184f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80184e6:	6839      	ldr	r1, [r7, #0]
 80184e8:	6878      	ldr	r0, [r7, #4]
 80184ea:	f000 f8ca 	bl	8018682 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80184ee:	e022      	b.n	8018536 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80184f6:	2b02      	cmp	r3, #2
 80184f8:	dc02      	bgt.n	8018500 <USBD_GetConfig+0x2c>
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	dc03      	bgt.n	8018506 <USBD_GetConfig+0x32>
 80184fe:	e015      	b.n	801852c <USBD_GetConfig+0x58>
 8018500:	2b03      	cmp	r3, #3
 8018502:	d00b      	beq.n	801851c <USBD_GetConfig+0x48>
 8018504:	e012      	b.n	801852c <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	2200      	movs	r2, #0
 801850a:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	3308      	adds	r3, #8
 8018510:	2201      	movs	r2, #1
 8018512:	4619      	mov	r1, r3
 8018514:	6878      	ldr	r0, [r7, #4]
 8018516:	f000 f925 	bl	8018764 <USBD_CtlSendData>
      break;
 801851a:	e00c      	b.n	8018536 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	3304      	adds	r3, #4
 8018520:	2201      	movs	r2, #1
 8018522:	4619      	mov	r1, r3
 8018524:	6878      	ldr	r0, [r7, #4]
 8018526:	f000 f91d 	bl	8018764 <USBD_CtlSendData>
      break;
 801852a:	e004      	b.n	8018536 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 801852c:	6839      	ldr	r1, [r7, #0]
 801852e:	6878      	ldr	r0, [r7, #4]
 8018530:	f000 f8a7 	bl	8018682 <USBD_CtlError>
      break;
 8018534:	bf00      	nop
}
 8018536:	bf00      	nop
 8018538:	3708      	adds	r7, #8
 801853a:	46bd      	mov	sp, r7
 801853c:	bd80      	pop	{r7, pc}

0801853e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801853e:	b580      	push	{r7, lr}
 8018540:	b082      	sub	sp, #8
 8018542:	af00      	add	r7, sp, #0
 8018544:	6078      	str	r0, [r7, #4]
 8018546:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801854e:	3b01      	subs	r3, #1
 8018550:	2b02      	cmp	r3, #2
 8018552:	d81e      	bhi.n	8018592 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8018554:	683b      	ldr	r3, [r7, #0]
 8018556:	88db      	ldrh	r3, [r3, #6]
 8018558:	2b02      	cmp	r3, #2
 801855a:	d004      	beq.n	8018566 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801855c:	6839      	ldr	r1, [r7, #0]
 801855e:	6878      	ldr	r0, [r7, #4]
 8018560:	f000 f88f 	bl	8018682 <USBD_CtlError>
      break;
 8018564:	e01a      	b.n	801859c <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	2201      	movs	r2, #1
 801856a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8018572:	2b00      	cmp	r3, #0
 8018574:	d005      	beq.n	8018582 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	68db      	ldr	r3, [r3, #12]
 801857a:	f043 0202 	orr.w	r2, r3, #2
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	330c      	adds	r3, #12
 8018586:	2202      	movs	r2, #2
 8018588:	4619      	mov	r1, r3
 801858a:	6878      	ldr	r0, [r7, #4]
 801858c:	f000 f8ea 	bl	8018764 <USBD_CtlSendData>
    break;
 8018590:	e004      	b.n	801859c <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8018592:	6839      	ldr	r1, [r7, #0]
 8018594:	6878      	ldr	r0, [r7, #4]
 8018596:	f000 f874 	bl	8018682 <USBD_CtlError>
    break;
 801859a:	bf00      	nop
  }
}
 801859c:	bf00      	nop
 801859e:	3708      	adds	r7, #8
 80185a0:	46bd      	mov	sp, r7
 80185a2:	bd80      	pop	{r7, pc}

080185a4 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80185a4:	b580      	push	{r7, lr}
 80185a6:	b082      	sub	sp, #8
 80185a8:	af00      	add	r7, sp, #0
 80185aa:	6078      	str	r0, [r7, #4]
 80185ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80185ae:	683b      	ldr	r3, [r7, #0]
 80185b0:	885b      	ldrh	r3, [r3, #2]
 80185b2:	2b01      	cmp	r3, #1
 80185b4:	d106      	bne.n	80185c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	2201      	movs	r2, #1
 80185ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80185be:	6878      	ldr	r0, [r7, #4]
 80185c0:	f000 f90d 	bl	80187de <USBD_CtlSendStatus>
  }
}
 80185c4:	bf00      	nop
 80185c6:	3708      	adds	r7, #8
 80185c8:	46bd      	mov	sp, r7
 80185ca:	bd80      	pop	{r7, pc}

080185cc <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80185cc:	b580      	push	{r7, lr}
 80185ce:	b082      	sub	sp, #8
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	6078      	str	r0, [r7, #4]
 80185d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80185dc:	3b01      	subs	r3, #1
 80185de:	2b02      	cmp	r3, #2
 80185e0:	d80b      	bhi.n	80185fa <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80185e2:	683b      	ldr	r3, [r7, #0]
 80185e4:	885b      	ldrh	r3, [r3, #2]
 80185e6:	2b01      	cmp	r3, #1
 80185e8:	d10c      	bne.n	8018604 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	2200      	movs	r2, #0
 80185ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80185f2:	6878      	ldr	r0, [r7, #4]
 80185f4:	f000 f8f3 	bl	80187de <USBD_CtlSendStatus>
      }
      break;
 80185f8:	e004      	b.n	8018604 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80185fa:	6839      	ldr	r1, [r7, #0]
 80185fc:	6878      	ldr	r0, [r7, #4]
 80185fe:	f000 f840 	bl	8018682 <USBD_CtlError>
      break;
 8018602:	e000      	b.n	8018606 <USBD_ClrFeature+0x3a>
      break;
 8018604:	bf00      	nop
  }
}
 8018606:	bf00      	nop
 8018608:	3708      	adds	r7, #8
 801860a:	46bd      	mov	sp, r7
 801860c:	bd80      	pop	{r7, pc}

0801860e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801860e:	b580      	push	{r7, lr}
 8018610:	b084      	sub	sp, #16
 8018612:	af00      	add	r7, sp, #0
 8018614:	6078      	str	r0, [r7, #4]
 8018616:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8018618:	683b      	ldr	r3, [r7, #0]
 801861a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	781a      	ldrb	r2, [r3, #0]
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	3301      	adds	r3, #1
 8018628:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	781a      	ldrb	r2, [r3, #0]
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8018632:	68fb      	ldr	r3, [r7, #12]
 8018634:	3301      	adds	r3, #1
 8018636:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8018638:	68f8      	ldr	r0, [r7, #12]
 801863a:	f7ff fa9d 	bl	8017b78 <SWAPBYTE>
 801863e:	4603      	mov	r3, r0
 8018640:	461a      	mov	r2, r3
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8018646:	68fb      	ldr	r3, [r7, #12]
 8018648:	3301      	adds	r3, #1
 801864a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	3301      	adds	r3, #1
 8018650:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8018652:	68f8      	ldr	r0, [r7, #12]
 8018654:	f7ff fa90 	bl	8017b78 <SWAPBYTE>
 8018658:	4603      	mov	r3, r0
 801865a:	461a      	mov	r2, r3
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	3301      	adds	r3, #1
 8018664:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	3301      	adds	r3, #1
 801866a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801866c:	68f8      	ldr	r0, [r7, #12]
 801866e:	f7ff fa83 	bl	8017b78 <SWAPBYTE>
 8018672:	4603      	mov	r3, r0
 8018674:	461a      	mov	r2, r3
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	80da      	strh	r2, [r3, #6]
}
 801867a:	bf00      	nop
 801867c:	3710      	adds	r7, #16
 801867e:	46bd      	mov	sp, r7
 8018680:	bd80      	pop	{r7, pc}

08018682 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018682:	b580      	push	{r7, lr}
 8018684:	b082      	sub	sp, #8
 8018686:	af00      	add	r7, sp, #0
 8018688:	6078      	str	r0, [r7, #4]
 801868a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801868c:	2180      	movs	r1, #128	; 0x80
 801868e:	6878      	ldr	r0, [r7, #4]
 8018690:	f003 fcd5 	bl	801c03e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8018694:	2100      	movs	r1, #0
 8018696:	6878      	ldr	r0, [r7, #4]
 8018698:	f003 fcd1 	bl	801c03e <USBD_LL_StallEP>
}
 801869c:	bf00      	nop
 801869e:	3708      	adds	r7, #8
 80186a0:	46bd      	mov	sp, r7
 80186a2:	bd80      	pop	{r7, pc}

080186a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80186a4:	b580      	push	{r7, lr}
 80186a6:	b086      	sub	sp, #24
 80186a8:	af00      	add	r7, sp, #0
 80186aa:	60f8      	str	r0, [r7, #12]
 80186ac:	60b9      	str	r1, [r7, #8]
 80186ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80186b0:	2300      	movs	r3, #0
 80186b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d036      	beq.n	8018728 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80186be:	6938      	ldr	r0, [r7, #16]
 80186c0:	f000 f836 	bl	8018730 <USBD_GetLen>
 80186c4:	4603      	mov	r3, r0
 80186c6:	3301      	adds	r3, #1
 80186c8:	b29b      	uxth	r3, r3
 80186ca:	005b      	lsls	r3, r3, #1
 80186cc:	b29a      	uxth	r2, r3
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80186d2:	7dfb      	ldrb	r3, [r7, #23]
 80186d4:	68ba      	ldr	r2, [r7, #8]
 80186d6:	4413      	add	r3, r2
 80186d8:	687a      	ldr	r2, [r7, #4]
 80186da:	7812      	ldrb	r2, [r2, #0]
 80186dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80186de:	7dfb      	ldrb	r3, [r7, #23]
 80186e0:	3301      	adds	r3, #1
 80186e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80186e4:	7dfb      	ldrb	r3, [r7, #23]
 80186e6:	68ba      	ldr	r2, [r7, #8]
 80186e8:	4413      	add	r3, r2
 80186ea:	2203      	movs	r2, #3
 80186ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80186ee:	7dfb      	ldrb	r3, [r7, #23]
 80186f0:	3301      	adds	r3, #1
 80186f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80186f4:	e013      	b.n	801871e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80186f6:	7dfb      	ldrb	r3, [r7, #23]
 80186f8:	68ba      	ldr	r2, [r7, #8]
 80186fa:	4413      	add	r3, r2
 80186fc:	693a      	ldr	r2, [r7, #16]
 80186fe:	7812      	ldrb	r2, [r2, #0]
 8018700:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8018702:	693b      	ldr	r3, [r7, #16]
 8018704:	3301      	adds	r3, #1
 8018706:	613b      	str	r3, [r7, #16]
    idx++;
 8018708:	7dfb      	ldrb	r3, [r7, #23]
 801870a:	3301      	adds	r3, #1
 801870c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801870e:	7dfb      	ldrb	r3, [r7, #23]
 8018710:	68ba      	ldr	r2, [r7, #8]
 8018712:	4413      	add	r3, r2
 8018714:	2200      	movs	r2, #0
 8018716:	701a      	strb	r2, [r3, #0]
    idx++;
 8018718:	7dfb      	ldrb	r3, [r7, #23]
 801871a:	3301      	adds	r3, #1
 801871c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801871e:	693b      	ldr	r3, [r7, #16]
 8018720:	781b      	ldrb	r3, [r3, #0]
 8018722:	2b00      	cmp	r3, #0
 8018724:	d1e7      	bne.n	80186f6 <USBD_GetString+0x52>
 8018726:	e000      	b.n	801872a <USBD_GetString+0x86>
    return;
 8018728:	bf00      	nop
  }
}
 801872a:	3718      	adds	r7, #24
 801872c:	46bd      	mov	sp, r7
 801872e:	bd80      	pop	{r7, pc}

08018730 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8018730:	b480      	push	{r7}
 8018732:	b085      	sub	sp, #20
 8018734:	af00      	add	r7, sp, #0
 8018736:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8018738:	2300      	movs	r3, #0
 801873a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8018740:	e005      	b.n	801874e <USBD_GetLen+0x1e>
  {
    len++;
 8018742:	7bfb      	ldrb	r3, [r7, #15]
 8018744:	3301      	adds	r3, #1
 8018746:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8018748:	68bb      	ldr	r3, [r7, #8]
 801874a:	3301      	adds	r3, #1
 801874c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801874e:	68bb      	ldr	r3, [r7, #8]
 8018750:	781b      	ldrb	r3, [r3, #0]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d1f5      	bne.n	8018742 <USBD_GetLen+0x12>
  }

  return len;
 8018756:	7bfb      	ldrb	r3, [r7, #15]
}
 8018758:	4618      	mov	r0, r3
 801875a:	3714      	adds	r7, #20
 801875c:	46bd      	mov	sp, r7
 801875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018762:	4770      	bx	lr

08018764 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8018764:	b580      	push	{r7, lr}
 8018766:	b084      	sub	sp, #16
 8018768:	af00      	add	r7, sp, #0
 801876a:	60f8      	str	r0, [r7, #12]
 801876c:	60b9      	str	r1, [r7, #8]
 801876e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	2202      	movs	r2, #2
 8018774:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	687a      	ldr	r2, [r7, #4]
 801877c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	687a      	ldr	r2, [r7, #4]
 8018782:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	68ba      	ldr	r2, [r7, #8]
 8018788:	2100      	movs	r1, #0
 801878a:	68f8      	ldr	r0, [r7, #12]
 801878c:	f003 fce0 	bl	801c150 <USBD_LL_Transmit>

  return USBD_OK;
 8018790:	2300      	movs	r3, #0
}
 8018792:	4618      	mov	r0, r3
 8018794:	3710      	adds	r7, #16
 8018796:	46bd      	mov	sp, r7
 8018798:	bd80      	pop	{r7, pc}

0801879a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801879a:	b580      	push	{r7, lr}
 801879c:	b084      	sub	sp, #16
 801879e:	af00      	add	r7, sp, #0
 80187a0:	60f8      	str	r0, [r7, #12]
 80187a2:	60b9      	str	r1, [r7, #8]
 80187a4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	68ba      	ldr	r2, [r7, #8]
 80187aa:	2100      	movs	r1, #0
 80187ac:	68f8      	ldr	r0, [r7, #12]
 80187ae:	f003 fccf 	bl	801c150 <USBD_LL_Transmit>

  return USBD_OK;
 80187b2:	2300      	movs	r3, #0
}
 80187b4:	4618      	mov	r0, r3
 80187b6:	3710      	adds	r7, #16
 80187b8:	46bd      	mov	sp, r7
 80187ba:	bd80      	pop	{r7, pc}

080187bc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80187bc:	b580      	push	{r7, lr}
 80187be:	b084      	sub	sp, #16
 80187c0:	af00      	add	r7, sp, #0
 80187c2:	60f8      	str	r0, [r7, #12]
 80187c4:	60b9      	str	r1, [r7, #8]
 80187c6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	68ba      	ldr	r2, [r7, #8]
 80187cc:	2100      	movs	r1, #0
 80187ce:	68f8      	ldr	r0, [r7, #12]
 80187d0:	f003 fcdf 	bl	801c192 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80187d4:	2300      	movs	r3, #0
}
 80187d6:	4618      	mov	r0, r3
 80187d8:	3710      	adds	r7, #16
 80187da:	46bd      	mov	sp, r7
 80187dc:	bd80      	pop	{r7, pc}

080187de <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80187de:	b580      	push	{r7, lr}
 80187e0:	b082      	sub	sp, #8
 80187e2:	af00      	add	r7, sp, #0
 80187e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	2204      	movs	r2, #4
 80187ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80187ee:	2300      	movs	r3, #0
 80187f0:	2200      	movs	r2, #0
 80187f2:	2100      	movs	r1, #0
 80187f4:	6878      	ldr	r0, [r7, #4]
 80187f6:	f003 fcab 	bl	801c150 <USBD_LL_Transmit>

  return USBD_OK;
 80187fa:	2300      	movs	r3, #0
}
 80187fc:	4618      	mov	r0, r3
 80187fe:	3708      	adds	r7, #8
 8018800:	46bd      	mov	sp, r7
 8018802:	bd80      	pop	{r7, pc}

08018804 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8018804:	b580      	push	{r7, lr}
 8018806:	b082      	sub	sp, #8
 8018808:	af00      	add	r7, sp, #0
 801880a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	2205      	movs	r2, #5
 8018810:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018814:	2300      	movs	r3, #0
 8018816:	2200      	movs	r2, #0
 8018818:	2100      	movs	r1, #0
 801881a:	6878      	ldr	r0, [r7, #4]
 801881c:	f003 fcb9 	bl	801c192 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018820:	2300      	movs	r3, #0
}
 8018822:	4618      	mov	r0, r3
 8018824:	3708      	adds	r7, #8
 8018826:	46bd      	mov	sp, r7
 8018828:	bd80      	pop	{r7, pc}
	...

0801882c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801882c:	b580      	push	{r7, lr}
 801882e:	b084      	sub	sp, #16
 8018830:	af00      	add	r7, sp, #0
 8018832:	4603      	mov	r3, r0
 8018834:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8018836:	79fb      	ldrb	r3, [r7, #7]
 8018838:	4a08      	ldr	r2, [pc, #32]	; (801885c <disk_status+0x30>)
 801883a:	009b      	lsls	r3, r3, #2
 801883c:	4413      	add	r3, r2
 801883e:	685b      	ldr	r3, [r3, #4]
 8018840:	685b      	ldr	r3, [r3, #4]
 8018842:	79fa      	ldrb	r2, [r7, #7]
 8018844:	4905      	ldr	r1, [pc, #20]	; (801885c <disk_status+0x30>)
 8018846:	440a      	add	r2, r1
 8018848:	7a12      	ldrb	r2, [r2, #8]
 801884a:	4610      	mov	r0, r2
 801884c:	4798      	blx	r3
 801884e:	4603      	mov	r3, r0
 8018850:	73fb      	strb	r3, [r7, #15]
  return stat;
 8018852:	7bfb      	ldrb	r3, [r7, #15]
}
 8018854:	4618      	mov	r0, r3
 8018856:	3710      	adds	r7, #16
 8018858:	46bd      	mov	sp, r7
 801885a:	bd80      	pop	{r7, pc}
 801885c:	20001bb0 	.word	0x20001bb0

08018860 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8018860:	b580      	push	{r7, lr}
 8018862:	b084      	sub	sp, #16
 8018864:	af00      	add	r7, sp, #0
 8018866:	4603      	mov	r3, r0
 8018868:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801886a:	2300      	movs	r3, #0
 801886c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801886e:	79fb      	ldrb	r3, [r7, #7]
 8018870:	4a0d      	ldr	r2, [pc, #52]	; (80188a8 <disk_initialize+0x48>)
 8018872:	5cd3      	ldrb	r3, [r2, r3]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d111      	bne.n	801889c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8018878:	79fb      	ldrb	r3, [r7, #7]
 801887a:	4a0b      	ldr	r2, [pc, #44]	; (80188a8 <disk_initialize+0x48>)
 801887c:	2101      	movs	r1, #1
 801887e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8018880:	79fb      	ldrb	r3, [r7, #7]
 8018882:	4a09      	ldr	r2, [pc, #36]	; (80188a8 <disk_initialize+0x48>)
 8018884:	009b      	lsls	r3, r3, #2
 8018886:	4413      	add	r3, r2
 8018888:	685b      	ldr	r3, [r3, #4]
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	79fa      	ldrb	r2, [r7, #7]
 801888e:	4906      	ldr	r1, [pc, #24]	; (80188a8 <disk_initialize+0x48>)
 8018890:	440a      	add	r2, r1
 8018892:	7a12      	ldrb	r2, [r2, #8]
 8018894:	4610      	mov	r0, r2
 8018896:	4798      	blx	r3
 8018898:	4603      	mov	r3, r0
 801889a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801889c:	7bfb      	ldrb	r3, [r7, #15]
}
 801889e:	4618      	mov	r0, r3
 80188a0:	3710      	adds	r7, #16
 80188a2:	46bd      	mov	sp, r7
 80188a4:	bd80      	pop	{r7, pc}
 80188a6:	bf00      	nop
 80188a8:	20001bb0 	.word	0x20001bb0

080188ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80188ac:	b590      	push	{r4, r7, lr}
 80188ae:	b087      	sub	sp, #28
 80188b0:	af00      	add	r7, sp, #0
 80188b2:	60b9      	str	r1, [r7, #8]
 80188b4:	607a      	str	r2, [r7, #4]
 80188b6:	603b      	str	r3, [r7, #0]
 80188b8:	4603      	mov	r3, r0
 80188ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80188bc:	7bfb      	ldrb	r3, [r7, #15]
 80188be:	4a0a      	ldr	r2, [pc, #40]	; (80188e8 <disk_read+0x3c>)
 80188c0:	009b      	lsls	r3, r3, #2
 80188c2:	4413      	add	r3, r2
 80188c4:	685b      	ldr	r3, [r3, #4]
 80188c6:	689c      	ldr	r4, [r3, #8]
 80188c8:	7bfb      	ldrb	r3, [r7, #15]
 80188ca:	4a07      	ldr	r2, [pc, #28]	; (80188e8 <disk_read+0x3c>)
 80188cc:	4413      	add	r3, r2
 80188ce:	7a18      	ldrb	r0, [r3, #8]
 80188d0:	683b      	ldr	r3, [r7, #0]
 80188d2:	687a      	ldr	r2, [r7, #4]
 80188d4:	68b9      	ldr	r1, [r7, #8]
 80188d6:	47a0      	blx	r4
 80188d8:	4603      	mov	r3, r0
 80188da:	75fb      	strb	r3, [r7, #23]
  return res;
 80188dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80188de:	4618      	mov	r0, r3
 80188e0:	371c      	adds	r7, #28
 80188e2:	46bd      	mov	sp, r7
 80188e4:	bd90      	pop	{r4, r7, pc}
 80188e6:	bf00      	nop
 80188e8:	20001bb0 	.word	0x20001bb0

080188ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80188ec:	b590      	push	{r4, r7, lr}
 80188ee:	b087      	sub	sp, #28
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	60b9      	str	r1, [r7, #8]
 80188f4:	607a      	str	r2, [r7, #4]
 80188f6:	603b      	str	r3, [r7, #0]
 80188f8:	4603      	mov	r3, r0
 80188fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80188fc:	7bfb      	ldrb	r3, [r7, #15]
 80188fe:	4a0a      	ldr	r2, [pc, #40]	; (8018928 <disk_write+0x3c>)
 8018900:	009b      	lsls	r3, r3, #2
 8018902:	4413      	add	r3, r2
 8018904:	685b      	ldr	r3, [r3, #4]
 8018906:	68dc      	ldr	r4, [r3, #12]
 8018908:	7bfb      	ldrb	r3, [r7, #15]
 801890a:	4a07      	ldr	r2, [pc, #28]	; (8018928 <disk_write+0x3c>)
 801890c:	4413      	add	r3, r2
 801890e:	7a18      	ldrb	r0, [r3, #8]
 8018910:	683b      	ldr	r3, [r7, #0]
 8018912:	687a      	ldr	r2, [r7, #4]
 8018914:	68b9      	ldr	r1, [r7, #8]
 8018916:	47a0      	blx	r4
 8018918:	4603      	mov	r3, r0
 801891a:	75fb      	strb	r3, [r7, #23]
  return res;
 801891c:	7dfb      	ldrb	r3, [r7, #23]
}
 801891e:	4618      	mov	r0, r3
 8018920:	371c      	adds	r7, #28
 8018922:	46bd      	mov	sp, r7
 8018924:	bd90      	pop	{r4, r7, pc}
 8018926:	bf00      	nop
 8018928:	20001bb0 	.word	0x20001bb0

0801892c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801892c:	b580      	push	{r7, lr}
 801892e:	b084      	sub	sp, #16
 8018930:	af00      	add	r7, sp, #0
 8018932:	4603      	mov	r3, r0
 8018934:	603a      	str	r2, [r7, #0]
 8018936:	71fb      	strb	r3, [r7, #7]
 8018938:	460b      	mov	r3, r1
 801893a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801893c:	79fb      	ldrb	r3, [r7, #7]
 801893e:	4a09      	ldr	r2, [pc, #36]	; (8018964 <disk_ioctl+0x38>)
 8018940:	009b      	lsls	r3, r3, #2
 8018942:	4413      	add	r3, r2
 8018944:	685b      	ldr	r3, [r3, #4]
 8018946:	691b      	ldr	r3, [r3, #16]
 8018948:	79fa      	ldrb	r2, [r7, #7]
 801894a:	4906      	ldr	r1, [pc, #24]	; (8018964 <disk_ioctl+0x38>)
 801894c:	440a      	add	r2, r1
 801894e:	7a10      	ldrb	r0, [r2, #8]
 8018950:	79b9      	ldrb	r1, [r7, #6]
 8018952:	683a      	ldr	r2, [r7, #0]
 8018954:	4798      	blx	r3
 8018956:	4603      	mov	r3, r0
 8018958:	73fb      	strb	r3, [r7, #15]
  return res;
 801895a:	7bfb      	ldrb	r3, [r7, #15]
}
 801895c:	4618      	mov	r0, r3
 801895e:	3710      	adds	r7, #16
 8018960:	46bd      	mov	sp, r7
 8018962:	bd80      	pop	{r7, pc}
 8018964:	20001bb0 	.word	0x20001bb0

08018968 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8018968:	b480      	push	{r7}
 801896a:	b085      	sub	sp, #20
 801896c:	af00      	add	r7, sp, #0
 801896e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	3301      	adds	r3, #1
 8018974:	781b      	ldrb	r3, [r3, #0]
 8018976:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8018978:	89fb      	ldrh	r3, [r7, #14]
 801897a:	021b      	lsls	r3, r3, #8
 801897c:	b21a      	sxth	r2, r3
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	781b      	ldrb	r3, [r3, #0]
 8018982:	b21b      	sxth	r3, r3
 8018984:	4313      	orrs	r3, r2
 8018986:	b21b      	sxth	r3, r3
 8018988:	81fb      	strh	r3, [r7, #14]
	return rv;
 801898a:	89fb      	ldrh	r3, [r7, #14]
}
 801898c:	4618      	mov	r0, r3
 801898e:	3714      	adds	r7, #20
 8018990:	46bd      	mov	sp, r7
 8018992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018996:	4770      	bx	lr

08018998 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8018998:	b480      	push	{r7}
 801899a:	b085      	sub	sp, #20
 801899c:	af00      	add	r7, sp, #0
 801899e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	3303      	adds	r3, #3
 80189a4:	781b      	ldrb	r3, [r3, #0]
 80189a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	021b      	lsls	r3, r3, #8
 80189ac:	687a      	ldr	r2, [r7, #4]
 80189ae:	3202      	adds	r2, #2
 80189b0:	7812      	ldrb	r2, [r2, #0]
 80189b2:	4313      	orrs	r3, r2
 80189b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80189b6:	68fb      	ldr	r3, [r7, #12]
 80189b8:	021b      	lsls	r3, r3, #8
 80189ba:	687a      	ldr	r2, [r7, #4]
 80189bc:	3201      	adds	r2, #1
 80189be:	7812      	ldrb	r2, [r2, #0]
 80189c0:	4313      	orrs	r3, r2
 80189c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	021b      	lsls	r3, r3, #8
 80189c8:	687a      	ldr	r2, [r7, #4]
 80189ca:	7812      	ldrb	r2, [r2, #0]
 80189cc:	4313      	orrs	r3, r2
 80189ce:	60fb      	str	r3, [r7, #12]
	return rv;
 80189d0:	68fb      	ldr	r3, [r7, #12]
}
 80189d2:	4618      	mov	r0, r3
 80189d4:	3714      	adds	r7, #20
 80189d6:	46bd      	mov	sp, r7
 80189d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189dc:	4770      	bx	lr

080189de <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80189de:	b480      	push	{r7}
 80189e0:	b083      	sub	sp, #12
 80189e2:	af00      	add	r7, sp, #0
 80189e4:	6078      	str	r0, [r7, #4]
 80189e6:	460b      	mov	r3, r1
 80189e8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	1c5a      	adds	r2, r3, #1
 80189ee:	607a      	str	r2, [r7, #4]
 80189f0:	887a      	ldrh	r2, [r7, #2]
 80189f2:	b2d2      	uxtb	r2, r2
 80189f4:	701a      	strb	r2, [r3, #0]
 80189f6:	887b      	ldrh	r3, [r7, #2]
 80189f8:	0a1b      	lsrs	r3, r3, #8
 80189fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	1c5a      	adds	r2, r3, #1
 8018a00:	607a      	str	r2, [r7, #4]
 8018a02:	887a      	ldrh	r2, [r7, #2]
 8018a04:	b2d2      	uxtb	r2, r2
 8018a06:	701a      	strb	r2, [r3, #0]
}
 8018a08:	bf00      	nop
 8018a0a:	370c      	adds	r7, #12
 8018a0c:	46bd      	mov	sp, r7
 8018a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a12:	4770      	bx	lr

08018a14 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8018a14:	b480      	push	{r7}
 8018a16:	b083      	sub	sp, #12
 8018a18:	af00      	add	r7, sp, #0
 8018a1a:	6078      	str	r0, [r7, #4]
 8018a1c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	1c5a      	adds	r2, r3, #1
 8018a22:	607a      	str	r2, [r7, #4]
 8018a24:	683a      	ldr	r2, [r7, #0]
 8018a26:	b2d2      	uxtb	r2, r2
 8018a28:	701a      	strb	r2, [r3, #0]
 8018a2a:	683b      	ldr	r3, [r7, #0]
 8018a2c:	0a1b      	lsrs	r3, r3, #8
 8018a2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	1c5a      	adds	r2, r3, #1
 8018a34:	607a      	str	r2, [r7, #4]
 8018a36:	683a      	ldr	r2, [r7, #0]
 8018a38:	b2d2      	uxtb	r2, r2
 8018a3a:	701a      	strb	r2, [r3, #0]
 8018a3c:	683b      	ldr	r3, [r7, #0]
 8018a3e:	0a1b      	lsrs	r3, r3, #8
 8018a40:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	1c5a      	adds	r2, r3, #1
 8018a46:	607a      	str	r2, [r7, #4]
 8018a48:	683a      	ldr	r2, [r7, #0]
 8018a4a:	b2d2      	uxtb	r2, r2
 8018a4c:	701a      	strb	r2, [r3, #0]
 8018a4e:	683b      	ldr	r3, [r7, #0]
 8018a50:	0a1b      	lsrs	r3, r3, #8
 8018a52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	1c5a      	adds	r2, r3, #1
 8018a58:	607a      	str	r2, [r7, #4]
 8018a5a:	683a      	ldr	r2, [r7, #0]
 8018a5c:	b2d2      	uxtb	r2, r2
 8018a5e:	701a      	strb	r2, [r3, #0]
}
 8018a60:	bf00      	nop
 8018a62:	370c      	adds	r7, #12
 8018a64:	46bd      	mov	sp, r7
 8018a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a6a:	4770      	bx	lr

08018a6c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8018a6c:	b480      	push	{r7}
 8018a6e:	b087      	sub	sp, #28
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	60f8      	str	r0, [r7, #12]
 8018a74:	60b9      	str	r1, [r7, #8]
 8018a76:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8018a7c:	68bb      	ldr	r3, [r7, #8]
 8018a7e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d00d      	beq.n	8018aa2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8018a86:	693a      	ldr	r2, [r7, #16]
 8018a88:	1c53      	adds	r3, r2, #1
 8018a8a:	613b      	str	r3, [r7, #16]
 8018a8c:	697b      	ldr	r3, [r7, #20]
 8018a8e:	1c59      	adds	r1, r3, #1
 8018a90:	6179      	str	r1, [r7, #20]
 8018a92:	7812      	ldrb	r2, [r2, #0]
 8018a94:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	3b01      	subs	r3, #1
 8018a9a:	607b      	str	r3, [r7, #4]
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d1f1      	bne.n	8018a86 <mem_cpy+0x1a>
	}
}
 8018aa2:	bf00      	nop
 8018aa4:	371c      	adds	r7, #28
 8018aa6:	46bd      	mov	sp, r7
 8018aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aac:	4770      	bx	lr

08018aae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8018aae:	b480      	push	{r7}
 8018ab0:	b087      	sub	sp, #28
 8018ab2:	af00      	add	r7, sp, #0
 8018ab4:	60f8      	str	r0, [r7, #12]
 8018ab6:	60b9      	str	r1, [r7, #8]
 8018ab8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8018aba:	68fb      	ldr	r3, [r7, #12]
 8018abc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8018abe:	697b      	ldr	r3, [r7, #20]
 8018ac0:	1c5a      	adds	r2, r3, #1
 8018ac2:	617a      	str	r2, [r7, #20]
 8018ac4:	68ba      	ldr	r2, [r7, #8]
 8018ac6:	b2d2      	uxtb	r2, r2
 8018ac8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	3b01      	subs	r3, #1
 8018ace:	607b      	str	r3, [r7, #4]
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d1f3      	bne.n	8018abe <mem_set+0x10>
}
 8018ad6:	bf00      	nop
 8018ad8:	bf00      	nop
 8018ada:	371c      	adds	r7, #28
 8018adc:	46bd      	mov	sp, r7
 8018ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae2:	4770      	bx	lr

08018ae4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8018ae4:	b480      	push	{r7}
 8018ae6:	b089      	sub	sp, #36	; 0x24
 8018ae8:	af00      	add	r7, sp, #0
 8018aea:	60f8      	str	r0, [r7, #12]
 8018aec:	60b9      	str	r1, [r7, #8]
 8018aee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8018af0:	68fb      	ldr	r3, [r7, #12]
 8018af2:	61fb      	str	r3, [r7, #28]
 8018af4:	68bb      	ldr	r3, [r7, #8]
 8018af6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8018af8:	2300      	movs	r3, #0
 8018afa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8018afc:	69fb      	ldr	r3, [r7, #28]
 8018afe:	1c5a      	adds	r2, r3, #1
 8018b00:	61fa      	str	r2, [r7, #28]
 8018b02:	781b      	ldrb	r3, [r3, #0]
 8018b04:	4619      	mov	r1, r3
 8018b06:	69bb      	ldr	r3, [r7, #24]
 8018b08:	1c5a      	adds	r2, r3, #1
 8018b0a:	61ba      	str	r2, [r7, #24]
 8018b0c:	781b      	ldrb	r3, [r3, #0]
 8018b0e:	1acb      	subs	r3, r1, r3
 8018b10:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	3b01      	subs	r3, #1
 8018b16:	607b      	str	r3, [r7, #4]
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d002      	beq.n	8018b24 <mem_cmp+0x40>
 8018b1e:	697b      	ldr	r3, [r7, #20]
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d0eb      	beq.n	8018afc <mem_cmp+0x18>

	return r;
 8018b24:	697b      	ldr	r3, [r7, #20]
}
 8018b26:	4618      	mov	r0, r3
 8018b28:	3724      	adds	r7, #36	; 0x24
 8018b2a:	46bd      	mov	sp, r7
 8018b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b30:	4770      	bx	lr

08018b32 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8018b32:	b480      	push	{r7}
 8018b34:	b083      	sub	sp, #12
 8018b36:	af00      	add	r7, sp, #0
 8018b38:	6078      	str	r0, [r7, #4]
 8018b3a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8018b3c:	e002      	b.n	8018b44 <chk_chr+0x12>
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	3301      	adds	r3, #1
 8018b42:	607b      	str	r3, [r7, #4]
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	781b      	ldrb	r3, [r3, #0]
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	d005      	beq.n	8018b58 <chk_chr+0x26>
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	781b      	ldrb	r3, [r3, #0]
 8018b50:	461a      	mov	r2, r3
 8018b52:	683b      	ldr	r3, [r7, #0]
 8018b54:	4293      	cmp	r3, r2
 8018b56:	d1f2      	bne.n	8018b3e <chk_chr+0xc>
	return *str;
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	781b      	ldrb	r3, [r3, #0]
}
 8018b5c:	4618      	mov	r0, r3
 8018b5e:	370c      	adds	r7, #12
 8018b60:	46bd      	mov	sp, r7
 8018b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b66:	4770      	bx	lr

08018b68 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8018b68:	b480      	push	{r7}
 8018b6a:	b085      	sub	sp, #20
 8018b6c:	af00      	add	r7, sp, #0
 8018b6e:	6078      	str	r0, [r7, #4]
 8018b70:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8018b72:	2300      	movs	r3, #0
 8018b74:	60bb      	str	r3, [r7, #8]
 8018b76:	68bb      	ldr	r3, [r7, #8]
 8018b78:	60fb      	str	r3, [r7, #12]
 8018b7a:	e029      	b.n	8018bd0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8018b7c:	4a27      	ldr	r2, [pc, #156]	; (8018c1c <chk_lock+0xb4>)
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	011b      	lsls	r3, r3, #4
 8018b82:	4413      	add	r3, r2
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d01d      	beq.n	8018bc6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8018b8a:	4a24      	ldr	r2, [pc, #144]	; (8018c1c <chk_lock+0xb4>)
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	011b      	lsls	r3, r3, #4
 8018b90:	4413      	add	r3, r2
 8018b92:	681a      	ldr	r2, [r3, #0]
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	429a      	cmp	r2, r3
 8018b9a:	d116      	bne.n	8018bca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8018b9c:	4a1f      	ldr	r2, [pc, #124]	; (8018c1c <chk_lock+0xb4>)
 8018b9e:	68fb      	ldr	r3, [r7, #12]
 8018ba0:	011b      	lsls	r3, r3, #4
 8018ba2:	4413      	add	r3, r2
 8018ba4:	3304      	adds	r3, #4
 8018ba6:	681a      	ldr	r2, [r3, #0]
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8018bac:	429a      	cmp	r2, r3
 8018bae:	d10c      	bne.n	8018bca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8018bb0:	4a1a      	ldr	r2, [pc, #104]	; (8018c1c <chk_lock+0xb4>)
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	011b      	lsls	r3, r3, #4
 8018bb6:	4413      	add	r3, r2
 8018bb8:	3308      	adds	r3, #8
 8018bba:	681a      	ldr	r2, [r3, #0]
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8018bc0:	429a      	cmp	r2, r3
 8018bc2:	d102      	bne.n	8018bca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8018bc4:	e007      	b.n	8018bd6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8018bc6:	2301      	movs	r3, #1
 8018bc8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	3301      	adds	r3, #1
 8018bce:	60fb      	str	r3, [r7, #12]
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	2b01      	cmp	r3, #1
 8018bd4:	d9d2      	bls.n	8018b7c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	2b02      	cmp	r3, #2
 8018bda:	d109      	bne.n	8018bf0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8018bdc:	68bb      	ldr	r3, [r7, #8]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d102      	bne.n	8018be8 <chk_lock+0x80>
 8018be2:	683b      	ldr	r3, [r7, #0]
 8018be4:	2b02      	cmp	r3, #2
 8018be6:	d101      	bne.n	8018bec <chk_lock+0x84>
 8018be8:	2300      	movs	r3, #0
 8018bea:	e010      	b.n	8018c0e <chk_lock+0xa6>
 8018bec:	2312      	movs	r3, #18
 8018bee:	e00e      	b.n	8018c0e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8018bf0:	683b      	ldr	r3, [r7, #0]
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d108      	bne.n	8018c08 <chk_lock+0xa0>
 8018bf6:	4a09      	ldr	r2, [pc, #36]	; (8018c1c <chk_lock+0xb4>)
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	011b      	lsls	r3, r3, #4
 8018bfc:	4413      	add	r3, r2
 8018bfe:	330c      	adds	r3, #12
 8018c00:	881b      	ldrh	r3, [r3, #0]
 8018c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018c06:	d101      	bne.n	8018c0c <chk_lock+0xa4>
 8018c08:	2310      	movs	r3, #16
 8018c0a:	e000      	b.n	8018c0e <chk_lock+0xa6>
 8018c0c:	2300      	movs	r3, #0
}
 8018c0e:	4618      	mov	r0, r3
 8018c10:	3714      	adds	r7, #20
 8018c12:	46bd      	mov	sp, r7
 8018c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c18:	4770      	bx	lr
 8018c1a:	bf00      	nop
 8018c1c:	20001b90 	.word	0x20001b90

08018c20 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8018c20:	b480      	push	{r7}
 8018c22:	b083      	sub	sp, #12
 8018c24:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8018c26:	2300      	movs	r3, #0
 8018c28:	607b      	str	r3, [r7, #4]
 8018c2a:	e002      	b.n	8018c32 <enq_lock+0x12>
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	3301      	adds	r3, #1
 8018c30:	607b      	str	r3, [r7, #4]
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	2b01      	cmp	r3, #1
 8018c36:	d806      	bhi.n	8018c46 <enq_lock+0x26>
 8018c38:	4a09      	ldr	r2, [pc, #36]	; (8018c60 <enq_lock+0x40>)
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	011b      	lsls	r3, r3, #4
 8018c3e:	4413      	add	r3, r2
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d1f2      	bne.n	8018c2c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	2b02      	cmp	r3, #2
 8018c4a:	bf14      	ite	ne
 8018c4c:	2301      	movne	r3, #1
 8018c4e:	2300      	moveq	r3, #0
 8018c50:	b2db      	uxtb	r3, r3
}
 8018c52:	4618      	mov	r0, r3
 8018c54:	370c      	adds	r7, #12
 8018c56:	46bd      	mov	sp, r7
 8018c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c5c:	4770      	bx	lr
 8018c5e:	bf00      	nop
 8018c60:	20001b90 	.word	0x20001b90

08018c64 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8018c64:	b480      	push	{r7}
 8018c66:	b085      	sub	sp, #20
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	6078      	str	r0, [r7, #4]
 8018c6c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8018c6e:	2300      	movs	r3, #0
 8018c70:	60fb      	str	r3, [r7, #12]
 8018c72:	e01f      	b.n	8018cb4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8018c74:	4a41      	ldr	r2, [pc, #260]	; (8018d7c <inc_lock+0x118>)
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	011b      	lsls	r3, r3, #4
 8018c7a:	4413      	add	r3, r2
 8018c7c:	681a      	ldr	r2, [r3, #0]
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	429a      	cmp	r2, r3
 8018c84:	d113      	bne.n	8018cae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8018c86:	4a3d      	ldr	r2, [pc, #244]	; (8018d7c <inc_lock+0x118>)
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	011b      	lsls	r3, r3, #4
 8018c8c:	4413      	add	r3, r2
 8018c8e:	3304      	adds	r3, #4
 8018c90:	681a      	ldr	r2, [r3, #0]
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8018c96:	429a      	cmp	r2, r3
 8018c98:	d109      	bne.n	8018cae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8018c9a:	4a38      	ldr	r2, [pc, #224]	; (8018d7c <inc_lock+0x118>)
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	011b      	lsls	r3, r3, #4
 8018ca0:	4413      	add	r3, r2
 8018ca2:	3308      	adds	r3, #8
 8018ca4:	681a      	ldr	r2, [r3, #0]
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8018caa:	429a      	cmp	r2, r3
 8018cac:	d006      	beq.n	8018cbc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8018cae:	68fb      	ldr	r3, [r7, #12]
 8018cb0:	3301      	adds	r3, #1
 8018cb2:	60fb      	str	r3, [r7, #12]
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	2b01      	cmp	r3, #1
 8018cb8:	d9dc      	bls.n	8018c74 <inc_lock+0x10>
 8018cba:	e000      	b.n	8018cbe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8018cbc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8018cbe:	68fb      	ldr	r3, [r7, #12]
 8018cc0:	2b02      	cmp	r3, #2
 8018cc2:	d132      	bne.n	8018d2a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8018cc4:	2300      	movs	r3, #0
 8018cc6:	60fb      	str	r3, [r7, #12]
 8018cc8:	e002      	b.n	8018cd0 <inc_lock+0x6c>
 8018cca:	68fb      	ldr	r3, [r7, #12]
 8018ccc:	3301      	adds	r3, #1
 8018cce:	60fb      	str	r3, [r7, #12]
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	2b01      	cmp	r3, #1
 8018cd4:	d806      	bhi.n	8018ce4 <inc_lock+0x80>
 8018cd6:	4a29      	ldr	r2, [pc, #164]	; (8018d7c <inc_lock+0x118>)
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	011b      	lsls	r3, r3, #4
 8018cdc:	4413      	add	r3, r2
 8018cde:	681b      	ldr	r3, [r3, #0]
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d1f2      	bne.n	8018cca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8018ce4:	68fb      	ldr	r3, [r7, #12]
 8018ce6:	2b02      	cmp	r3, #2
 8018ce8:	d101      	bne.n	8018cee <inc_lock+0x8a>
 8018cea:	2300      	movs	r3, #0
 8018cec:	e040      	b.n	8018d70 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	681a      	ldr	r2, [r3, #0]
 8018cf2:	4922      	ldr	r1, [pc, #136]	; (8018d7c <inc_lock+0x118>)
 8018cf4:	68fb      	ldr	r3, [r7, #12]
 8018cf6:	011b      	lsls	r3, r3, #4
 8018cf8:	440b      	add	r3, r1
 8018cfa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	689a      	ldr	r2, [r3, #8]
 8018d00:	491e      	ldr	r1, [pc, #120]	; (8018d7c <inc_lock+0x118>)
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	011b      	lsls	r3, r3, #4
 8018d06:	440b      	add	r3, r1
 8018d08:	3304      	adds	r3, #4
 8018d0a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	695a      	ldr	r2, [r3, #20]
 8018d10:	491a      	ldr	r1, [pc, #104]	; (8018d7c <inc_lock+0x118>)
 8018d12:	68fb      	ldr	r3, [r7, #12]
 8018d14:	011b      	lsls	r3, r3, #4
 8018d16:	440b      	add	r3, r1
 8018d18:	3308      	adds	r3, #8
 8018d1a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8018d1c:	4a17      	ldr	r2, [pc, #92]	; (8018d7c <inc_lock+0x118>)
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	011b      	lsls	r3, r3, #4
 8018d22:	4413      	add	r3, r2
 8018d24:	330c      	adds	r3, #12
 8018d26:	2200      	movs	r2, #0
 8018d28:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8018d2a:	683b      	ldr	r3, [r7, #0]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d009      	beq.n	8018d44 <inc_lock+0xe0>
 8018d30:	4a12      	ldr	r2, [pc, #72]	; (8018d7c <inc_lock+0x118>)
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	011b      	lsls	r3, r3, #4
 8018d36:	4413      	add	r3, r2
 8018d38:	330c      	adds	r3, #12
 8018d3a:	881b      	ldrh	r3, [r3, #0]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d001      	beq.n	8018d44 <inc_lock+0xe0>
 8018d40:	2300      	movs	r3, #0
 8018d42:	e015      	b.n	8018d70 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8018d44:	683b      	ldr	r3, [r7, #0]
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d108      	bne.n	8018d5c <inc_lock+0xf8>
 8018d4a:	4a0c      	ldr	r2, [pc, #48]	; (8018d7c <inc_lock+0x118>)
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	011b      	lsls	r3, r3, #4
 8018d50:	4413      	add	r3, r2
 8018d52:	330c      	adds	r3, #12
 8018d54:	881b      	ldrh	r3, [r3, #0]
 8018d56:	3301      	adds	r3, #1
 8018d58:	b29a      	uxth	r2, r3
 8018d5a:	e001      	b.n	8018d60 <inc_lock+0xfc>
 8018d5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018d60:	4906      	ldr	r1, [pc, #24]	; (8018d7c <inc_lock+0x118>)
 8018d62:	68fb      	ldr	r3, [r7, #12]
 8018d64:	011b      	lsls	r3, r3, #4
 8018d66:	440b      	add	r3, r1
 8018d68:	330c      	adds	r3, #12
 8018d6a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	3301      	adds	r3, #1
}
 8018d70:	4618      	mov	r0, r3
 8018d72:	3714      	adds	r7, #20
 8018d74:	46bd      	mov	sp, r7
 8018d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d7a:	4770      	bx	lr
 8018d7c:	20001b90 	.word	0x20001b90

08018d80 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8018d80:	b480      	push	{r7}
 8018d82:	b085      	sub	sp, #20
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	3b01      	subs	r3, #1
 8018d8c:	607b      	str	r3, [r7, #4]
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	2b01      	cmp	r3, #1
 8018d92:	d825      	bhi.n	8018de0 <dec_lock+0x60>
		n = Files[i].ctr;
 8018d94:	4a17      	ldr	r2, [pc, #92]	; (8018df4 <dec_lock+0x74>)
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	011b      	lsls	r3, r3, #4
 8018d9a:	4413      	add	r3, r2
 8018d9c:	330c      	adds	r3, #12
 8018d9e:	881b      	ldrh	r3, [r3, #0]
 8018da0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8018da2:	89fb      	ldrh	r3, [r7, #14]
 8018da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018da8:	d101      	bne.n	8018dae <dec_lock+0x2e>
 8018daa:	2300      	movs	r3, #0
 8018dac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8018dae:	89fb      	ldrh	r3, [r7, #14]
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d002      	beq.n	8018dba <dec_lock+0x3a>
 8018db4:	89fb      	ldrh	r3, [r7, #14]
 8018db6:	3b01      	subs	r3, #1
 8018db8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8018dba:	4a0e      	ldr	r2, [pc, #56]	; (8018df4 <dec_lock+0x74>)
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	011b      	lsls	r3, r3, #4
 8018dc0:	4413      	add	r3, r2
 8018dc2:	330c      	adds	r3, #12
 8018dc4:	89fa      	ldrh	r2, [r7, #14]
 8018dc6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8018dc8:	89fb      	ldrh	r3, [r7, #14]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d105      	bne.n	8018dda <dec_lock+0x5a>
 8018dce:	4a09      	ldr	r2, [pc, #36]	; (8018df4 <dec_lock+0x74>)
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	011b      	lsls	r3, r3, #4
 8018dd4:	4413      	add	r3, r2
 8018dd6:	2200      	movs	r2, #0
 8018dd8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8018dda:	2300      	movs	r3, #0
 8018ddc:	737b      	strb	r3, [r7, #13]
 8018dde:	e001      	b.n	8018de4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8018de0:	2302      	movs	r3, #2
 8018de2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8018de4:	7b7b      	ldrb	r3, [r7, #13]
}
 8018de6:	4618      	mov	r0, r3
 8018de8:	3714      	adds	r7, #20
 8018dea:	46bd      	mov	sp, r7
 8018dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df0:	4770      	bx	lr
 8018df2:	bf00      	nop
 8018df4:	20001b90 	.word	0x20001b90

08018df8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8018df8:	b480      	push	{r7}
 8018dfa:	b085      	sub	sp, #20
 8018dfc:	af00      	add	r7, sp, #0
 8018dfe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8018e00:	2300      	movs	r3, #0
 8018e02:	60fb      	str	r3, [r7, #12]
 8018e04:	e010      	b.n	8018e28 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8018e06:	4a0d      	ldr	r2, [pc, #52]	; (8018e3c <clear_lock+0x44>)
 8018e08:	68fb      	ldr	r3, [r7, #12]
 8018e0a:	011b      	lsls	r3, r3, #4
 8018e0c:	4413      	add	r3, r2
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	687a      	ldr	r2, [r7, #4]
 8018e12:	429a      	cmp	r2, r3
 8018e14:	d105      	bne.n	8018e22 <clear_lock+0x2a>
 8018e16:	4a09      	ldr	r2, [pc, #36]	; (8018e3c <clear_lock+0x44>)
 8018e18:	68fb      	ldr	r3, [r7, #12]
 8018e1a:	011b      	lsls	r3, r3, #4
 8018e1c:	4413      	add	r3, r2
 8018e1e:	2200      	movs	r2, #0
 8018e20:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8018e22:	68fb      	ldr	r3, [r7, #12]
 8018e24:	3301      	adds	r3, #1
 8018e26:	60fb      	str	r3, [r7, #12]
 8018e28:	68fb      	ldr	r3, [r7, #12]
 8018e2a:	2b01      	cmp	r3, #1
 8018e2c:	d9eb      	bls.n	8018e06 <clear_lock+0xe>
	}
}
 8018e2e:	bf00      	nop
 8018e30:	bf00      	nop
 8018e32:	3714      	adds	r7, #20
 8018e34:	46bd      	mov	sp, r7
 8018e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e3a:	4770      	bx	lr
 8018e3c:	20001b90 	.word	0x20001b90

08018e40 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8018e40:	b580      	push	{r7, lr}
 8018e42:	b086      	sub	sp, #24
 8018e44:	af00      	add	r7, sp, #0
 8018e46:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8018e48:	2300      	movs	r3, #0
 8018e4a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	78db      	ldrb	r3, [r3, #3]
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d034      	beq.n	8018ebe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018e58:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	7858      	ldrb	r0, [r3, #1]
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018e64:	2301      	movs	r3, #1
 8018e66:	697a      	ldr	r2, [r7, #20]
 8018e68:	f7ff fd40 	bl	80188ec <disk_write>
 8018e6c:	4603      	mov	r3, r0
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d002      	beq.n	8018e78 <sync_window+0x38>
			res = FR_DISK_ERR;
 8018e72:	2301      	movs	r3, #1
 8018e74:	73fb      	strb	r3, [r7, #15]
 8018e76:	e022      	b.n	8018ebe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	2200      	movs	r2, #0
 8018e7c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e82:	697a      	ldr	r2, [r7, #20]
 8018e84:	1ad2      	subs	r2, r2, r3
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	6a1b      	ldr	r3, [r3, #32]
 8018e8a:	429a      	cmp	r2, r3
 8018e8c:	d217      	bcs.n	8018ebe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	789b      	ldrb	r3, [r3, #2]
 8018e92:	613b      	str	r3, [r7, #16]
 8018e94:	e010      	b.n	8018eb8 <sync_window+0x78>
					wsect += fs->fsize;
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	6a1b      	ldr	r3, [r3, #32]
 8018e9a:	697a      	ldr	r2, [r7, #20]
 8018e9c:	4413      	add	r3, r2
 8018e9e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	7858      	ldrb	r0, [r3, #1]
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018eaa:	2301      	movs	r3, #1
 8018eac:	697a      	ldr	r2, [r7, #20]
 8018eae:	f7ff fd1d 	bl	80188ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018eb2:	693b      	ldr	r3, [r7, #16]
 8018eb4:	3b01      	subs	r3, #1
 8018eb6:	613b      	str	r3, [r7, #16]
 8018eb8:	693b      	ldr	r3, [r7, #16]
 8018eba:	2b01      	cmp	r3, #1
 8018ebc:	d8eb      	bhi.n	8018e96 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8018ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	3718      	adds	r7, #24
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	bd80      	pop	{r7, pc}

08018ec8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	b084      	sub	sp, #16
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	6078      	str	r0, [r7, #4]
 8018ed0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8018ed2:	2300      	movs	r3, #0
 8018ed4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018eda:	683a      	ldr	r2, [r7, #0]
 8018edc:	429a      	cmp	r2, r3
 8018ede:	d01b      	beq.n	8018f18 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8018ee0:	6878      	ldr	r0, [r7, #4]
 8018ee2:	f7ff ffad 	bl	8018e40 <sync_window>
 8018ee6:	4603      	mov	r3, r0
 8018ee8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8018eea:	7bfb      	ldrb	r3, [r7, #15]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d113      	bne.n	8018f18 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	7858      	ldrb	r0, [r3, #1]
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018efa:	2301      	movs	r3, #1
 8018efc:	683a      	ldr	r2, [r7, #0]
 8018efe:	f7ff fcd5 	bl	80188ac <disk_read>
 8018f02:	4603      	mov	r3, r0
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d004      	beq.n	8018f12 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8018f08:	f04f 33ff 	mov.w	r3, #4294967295
 8018f0c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8018f0e:	2301      	movs	r3, #1
 8018f10:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	683a      	ldr	r2, [r7, #0]
 8018f16:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8018f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	3710      	adds	r7, #16
 8018f1e:	46bd      	mov	sp, r7
 8018f20:	bd80      	pop	{r7, pc}
	...

08018f24 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	b084      	sub	sp, #16
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8018f2c:	6878      	ldr	r0, [r7, #4]
 8018f2e:	f7ff ff87 	bl	8018e40 <sync_window>
 8018f32:	4603      	mov	r3, r0
 8018f34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8018f36:	7bfb      	ldrb	r3, [r7, #15]
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d159      	bne.n	8018ff0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	781b      	ldrb	r3, [r3, #0]
 8018f40:	2b03      	cmp	r3, #3
 8018f42:	d149      	bne.n	8018fd8 <sync_fs+0xb4>
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	791b      	ldrb	r3, [r3, #4]
 8018f48:	2b01      	cmp	r3, #1
 8018f4a:	d145      	bne.n	8018fd8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	899b      	ldrh	r3, [r3, #12]
 8018f56:	461a      	mov	r2, r3
 8018f58:	2100      	movs	r1, #0
 8018f5a:	f7ff fda8 	bl	8018aae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	3338      	adds	r3, #56	; 0x38
 8018f62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018f66:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8018f6a:	4618      	mov	r0, r3
 8018f6c:	f7ff fd37 	bl	80189de <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	3338      	adds	r3, #56	; 0x38
 8018f74:	4921      	ldr	r1, [pc, #132]	; (8018ffc <sync_fs+0xd8>)
 8018f76:	4618      	mov	r0, r3
 8018f78:	f7ff fd4c 	bl	8018a14 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	3338      	adds	r3, #56	; 0x38
 8018f80:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8018f84:	491e      	ldr	r1, [pc, #120]	; (8019000 <sync_fs+0xdc>)
 8018f86:	4618      	mov	r0, r3
 8018f88:	f7ff fd44 	bl	8018a14 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	3338      	adds	r3, #56	; 0x38
 8018f90:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	699b      	ldr	r3, [r3, #24]
 8018f98:	4619      	mov	r1, r3
 8018f9a:	4610      	mov	r0, r2
 8018f9c:	f7ff fd3a 	bl	8018a14 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	3338      	adds	r3, #56	; 0x38
 8018fa4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	695b      	ldr	r3, [r3, #20]
 8018fac:	4619      	mov	r1, r3
 8018fae:	4610      	mov	r0, r2
 8018fb0:	f7ff fd30 	bl	8018a14 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fb8:	1c5a      	adds	r2, r3, #1
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	7858      	ldrb	r0, [r3, #1]
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018fcc:	2301      	movs	r3, #1
 8018fce:	f7ff fc8d 	bl	80188ec <disk_write>
			fs->fsi_flag = 0;
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	2200      	movs	r2, #0
 8018fd6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	785b      	ldrb	r3, [r3, #1]
 8018fdc:	2200      	movs	r2, #0
 8018fde:	2100      	movs	r1, #0
 8018fe0:	4618      	mov	r0, r3
 8018fe2:	f7ff fca3 	bl	801892c <disk_ioctl>
 8018fe6:	4603      	mov	r3, r0
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d001      	beq.n	8018ff0 <sync_fs+0xcc>
 8018fec:	2301      	movs	r3, #1
 8018fee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8018ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8018ff2:	4618      	mov	r0, r3
 8018ff4:	3710      	adds	r7, #16
 8018ff6:	46bd      	mov	sp, r7
 8018ff8:	bd80      	pop	{r7, pc}
 8018ffa:	bf00      	nop
 8018ffc:	41615252 	.word	0x41615252
 8019000:	61417272 	.word	0x61417272

08019004 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8019004:	b480      	push	{r7}
 8019006:	b083      	sub	sp, #12
 8019008:	af00      	add	r7, sp, #0
 801900a:	6078      	str	r0, [r7, #4]
 801900c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801900e:	683b      	ldr	r3, [r7, #0]
 8019010:	3b02      	subs	r3, #2
 8019012:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	69db      	ldr	r3, [r3, #28]
 8019018:	3b02      	subs	r3, #2
 801901a:	683a      	ldr	r2, [r7, #0]
 801901c:	429a      	cmp	r2, r3
 801901e:	d301      	bcc.n	8019024 <clust2sect+0x20>
 8019020:	2300      	movs	r3, #0
 8019022:	e008      	b.n	8019036 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	895b      	ldrh	r3, [r3, #10]
 8019028:	461a      	mov	r2, r3
 801902a:	683b      	ldr	r3, [r7, #0]
 801902c:	fb03 f202 	mul.w	r2, r3, r2
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019034:	4413      	add	r3, r2
}
 8019036:	4618      	mov	r0, r3
 8019038:	370c      	adds	r7, #12
 801903a:	46bd      	mov	sp, r7
 801903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019040:	4770      	bx	lr

08019042 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8019042:	b580      	push	{r7, lr}
 8019044:	b086      	sub	sp, #24
 8019046:	af00      	add	r7, sp, #0
 8019048:	6078      	str	r0, [r7, #4]
 801904a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8019052:	683b      	ldr	r3, [r7, #0]
 8019054:	2b01      	cmp	r3, #1
 8019056:	d904      	bls.n	8019062 <get_fat+0x20>
 8019058:	693b      	ldr	r3, [r7, #16]
 801905a:	69db      	ldr	r3, [r3, #28]
 801905c:	683a      	ldr	r2, [r7, #0]
 801905e:	429a      	cmp	r2, r3
 8019060:	d302      	bcc.n	8019068 <get_fat+0x26>
		val = 1;	/* Internal error */
 8019062:	2301      	movs	r3, #1
 8019064:	617b      	str	r3, [r7, #20]
 8019066:	e0bb      	b.n	80191e0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8019068:	f04f 33ff 	mov.w	r3, #4294967295
 801906c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801906e:	693b      	ldr	r3, [r7, #16]
 8019070:	781b      	ldrb	r3, [r3, #0]
 8019072:	2b03      	cmp	r3, #3
 8019074:	f000 8083 	beq.w	801917e <get_fat+0x13c>
 8019078:	2b03      	cmp	r3, #3
 801907a:	f300 80a7 	bgt.w	80191cc <get_fat+0x18a>
 801907e:	2b01      	cmp	r3, #1
 8019080:	d002      	beq.n	8019088 <get_fat+0x46>
 8019082:	2b02      	cmp	r3, #2
 8019084:	d056      	beq.n	8019134 <get_fat+0xf2>
 8019086:	e0a1      	b.n	80191cc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8019088:	683b      	ldr	r3, [r7, #0]
 801908a:	60fb      	str	r3, [r7, #12]
 801908c:	68fb      	ldr	r3, [r7, #12]
 801908e:	085b      	lsrs	r3, r3, #1
 8019090:	68fa      	ldr	r2, [r7, #12]
 8019092:	4413      	add	r3, r2
 8019094:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019096:	693b      	ldr	r3, [r7, #16]
 8019098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801909a:	693b      	ldr	r3, [r7, #16]
 801909c:	899b      	ldrh	r3, [r3, #12]
 801909e:	4619      	mov	r1, r3
 80190a0:	68fb      	ldr	r3, [r7, #12]
 80190a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80190a6:	4413      	add	r3, r2
 80190a8:	4619      	mov	r1, r3
 80190aa:	6938      	ldr	r0, [r7, #16]
 80190ac:	f7ff ff0c 	bl	8018ec8 <move_window>
 80190b0:	4603      	mov	r3, r0
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	f040 808d 	bne.w	80191d2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80190b8:	68fb      	ldr	r3, [r7, #12]
 80190ba:	1c5a      	adds	r2, r3, #1
 80190bc:	60fa      	str	r2, [r7, #12]
 80190be:	693a      	ldr	r2, [r7, #16]
 80190c0:	8992      	ldrh	r2, [r2, #12]
 80190c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80190c6:	fb02 f201 	mul.w	r2, r2, r1
 80190ca:	1a9b      	subs	r3, r3, r2
 80190cc:	693a      	ldr	r2, [r7, #16]
 80190ce:	4413      	add	r3, r2
 80190d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80190d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80190d6:	693b      	ldr	r3, [r7, #16]
 80190d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80190da:	693b      	ldr	r3, [r7, #16]
 80190dc:	899b      	ldrh	r3, [r3, #12]
 80190de:	4619      	mov	r1, r3
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80190e6:	4413      	add	r3, r2
 80190e8:	4619      	mov	r1, r3
 80190ea:	6938      	ldr	r0, [r7, #16]
 80190ec:	f7ff feec 	bl	8018ec8 <move_window>
 80190f0:	4603      	mov	r3, r0
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d16f      	bne.n	80191d6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80190f6:	693b      	ldr	r3, [r7, #16]
 80190f8:	899b      	ldrh	r3, [r3, #12]
 80190fa:	461a      	mov	r2, r3
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8019102:	fb02 f201 	mul.w	r2, r2, r1
 8019106:	1a9b      	subs	r3, r3, r2
 8019108:	693a      	ldr	r2, [r7, #16]
 801910a:	4413      	add	r3, r2
 801910c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019110:	021b      	lsls	r3, r3, #8
 8019112:	461a      	mov	r2, r3
 8019114:	68bb      	ldr	r3, [r7, #8]
 8019116:	4313      	orrs	r3, r2
 8019118:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801911a:	683b      	ldr	r3, [r7, #0]
 801911c:	f003 0301 	and.w	r3, r3, #1
 8019120:	2b00      	cmp	r3, #0
 8019122:	d002      	beq.n	801912a <get_fat+0xe8>
 8019124:	68bb      	ldr	r3, [r7, #8]
 8019126:	091b      	lsrs	r3, r3, #4
 8019128:	e002      	b.n	8019130 <get_fat+0xee>
 801912a:	68bb      	ldr	r3, [r7, #8]
 801912c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019130:	617b      	str	r3, [r7, #20]
			break;
 8019132:	e055      	b.n	80191e0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019134:	693b      	ldr	r3, [r7, #16]
 8019136:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019138:	693b      	ldr	r3, [r7, #16]
 801913a:	899b      	ldrh	r3, [r3, #12]
 801913c:	085b      	lsrs	r3, r3, #1
 801913e:	b29b      	uxth	r3, r3
 8019140:	4619      	mov	r1, r3
 8019142:	683b      	ldr	r3, [r7, #0]
 8019144:	fbb3 f3f1 	udiv	r3, r3, r1
 8019148:	4413      	add	r3, r2
 801914a:	4619      	mov	r1, r3
 801914c:	6938      	ldr	r0, [r7, #16]
 801914e:	f7ff febb 	bl	8018ec8 <move_window>
 8019152:	4603      	mov	r3, r0
 8019154:	2b00      	cmp	r3, #0
 8019156:	d140      	bne.n	80191da <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8019158:	693b      	ldr	r3, [r7, #16]
 801915a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801915e:	683b      	ldr	r3, [r7, #0]
 8019160:	005b      	lsls	r3, r3, #1
 8019162:	693a      	ldr	r2, [r7, #16]
 8019164:	8992      	ldrh	r2, [r2, #12]
 8019166:	fbb3 f0f2 	udiv	r0, r3, r2
 801916a:	fb02 f200 	mul.w	r2, r2, r0
 801916e:	1a9b      	subs	r3, r3, r2
 8019170:	440b      	add	r3, r1
 8019172:	4618      	mov	r0, r3
 8019174:	f7ff fbf8 	bl	8018968 <ld_word>
 8019178:	4603      	mov	r3, r0
 801917a:	617b      	str	r3, [r7, #20]
			break;
 801917c:	e030      	b.n	80191e0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801917e:	693b      	ldr	r3, [r7, #16]
 8019180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019182:	693b      	ldr	r3, [r7, #16]
 8019184:	899b      	ldrh	r3, [r3, #12]
 8019186:	089b      	lsrs	r3, r3, #2
 8019188:	b29b      	uxth	r3, r3
 801918a:	4619      	mov	r1, r3
 801918c:	683b      	ldr	r3, [r7, #0]
 801918e:	fbb3 f3f1 	udiv	r3, r3, r1
 8019192:	4413      	add	r3, r2
 8019194:	4619      	mov	r1, r3
 8019196:	6938      	ldr	r0, [r7, #16]
 8019198:	f7ff fe96 	bl	8018ec8 <move_window>
 801919c:	4603      	mov	r3, r0
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d11d      	bne.n	80191de <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80191a2:	693b      	ldr	r3, [r7, #16]
 80191a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80191a8:	683b      	ldr	r3, [r7, #0]
 80191aa:	009b      	lsls	r3, r3, #2
 80191ac:	693a      	ldr	r2, [r7, #16]
 80191ae:	8992      	ldrh	r2, [r2, #12]
 80191b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80191b4:	fb02 f200 	mul.w	r2, r2, r0
 80191b8:	1a9b      	subs	r3, r3, r2
 80191ba:	440b      	add	r3, r1
 80191bc:	4618      	mov	r0, r3
 80191be:	f7ff fbeb 	bl	8018998 <ld_dword>
 80191c2:	4603      	mov	r3, r0
 80191c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80191c8:	617b      	str	r3, [r7, #20]
			break;
 80191ca:	e009      	b.n	80191e0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80191cc:	2301      	movs	r3, #1
 80191ce:	617b      	str	r3, [r7, #20]
 80191d0:	e006      	b.n	80191e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80191d2:	bf00      	nop
 80191d4:	e004      	b.n	80191e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80191d6:	bf00      	nop
 80191d8:	e002      	b.n	80191e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80191da:	bf00      	nop
 80191dc:	e000      	b.n	80191e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80191de:	bf00      	nop
		}
	}

	return val;
 80191e0:	697b      	ldr	r3, [r7, #20]
}
 80191e2:	4618      	mov	r0, r3
 80191e4:	3718      	adds	r7, #24
 80191e6:	46bd      	mov	sp, r7
 80191e8:	bd80      	pop	{r7, pc}

080191ea <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80191ea:	b590      	push	{r4, r7, lr}
 80191ec:	b089      	sub	sp, #36	; 0x24
 80191ee:	af00      	add	r7, sp, #0
 80191f0:	60f8      	str	r0, [r7, #12]
 80191f2:	60b9      	str	r1, [r7, #8]
 80191f4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80191f6:	2302      	movs	r3, #2
 80191f8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80191fa:	68bb      	ldr	r3, [r7, #8]
 80191fc:	2b01      	cmp	r3, #1
 80191fe:	f240 8102 	bls.w	8019406 <put_fat+0x21c>
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	69db      	ldr	r3, [r3, #28]
 8019206:	68ba      	ldr	r2, [r7, #8]
 8019208:	429a      	cmp	r2, r3
 801920a:	f080 80fc 	bcs.w	8019406 <put_fat+0x21c>
		switch (fs->fs_type) {
 801920e:	68fb      	ldr	r3, [r7, #12]
 8019210:	781b      	ldrb	r3, [r3, #0]
 8019212:	2b03      	cmp	r3, #3
 8019214:	f000 80b6 	beq.w	8019384 <put_fat+0x19a>
 8019218:	2b03      	cmp	r3, #3
 801921a:	f300 80fd 	bgt.w	8019418 <put_fat+0x22e>
 801921e:	2b01      	cmp	r3, #1
 8019220:	d003      	beq.n	801922a <put_fat+0x40>
 8019222:	2b02      	cmp	r3, #2
 8019224:	f000 8083 	beq.w	801932e <put_fat+0x144>
 8019228:	e0f6      	b.n	8019418 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801922a:	68bb      	ldr	r3, [r7, #8]
 801922c:	61bb      	str	r3, [r7, #24]
 801922e:	69bb      	ldr	r3, [r7, #24]
 8019230:	085b      	lsrs	r3, r3, #1
 8019232:	69ba      	ldr	r2, [r7, #24]
 8019234:	4413      	add	r3, r2
 8019236:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019238:	68fb      	ldr	r3, [r7, #12]
 801923a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	899b      	ldrh	r3, [r3, #12]
 8019240:	4619      	mov	r1, r3
 8019242:	69bb      	ldr	r3, [r7, #24]
 8019244:	fbb3 f3f1 	udiv	r3, r3, r1
 8019248:	4413      	add	r3, r2
 801924a:	4619      	mov	r1, r3
 801924c:	68f8      	ldr	r0, [r7, #12]
 801924e:	f7ff fe3b 	bl	8018ec8 <move_window>
 8019252:	4603      	mov	r3, r0
 8019254:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019256:	7ffb      	ldrb	r3, [r7, #31]
 8019258:	2b00      	cmp	r3, #0
 801925a:	f040 80d6 	bne.w	801940a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8019264:	69bb      	ldr	r3, [r7, #24]
 8019266:	1c5a      	adds	r2, r3, #1
 8019268:	61ba      	str	r2, [r7, #24]
 801926a:	68fa      	ldr	r2, [r7, #12]
 801926c:	8992      	ldrh	r2, [r2, #12]
 801926e:	fbb3 f0f2 	udiv	r0, r3, r2
 8019272:	fb02 f200 	mul.w	r2, r2, r0
 8019276:	1a9b      	subs	r3, r3, r2
 8019278:	440b      	add	r3, r1
 801927a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801927c:	68bb      	ldr	r3, [r7, #8]
 801927e:	f003 0301 	and.w	r3, r3, #1
 8019282:	2b00      	cmp	r3, #0
 8019284:	d00d      	beq.n	80192a2 <put_fat+0xb8>
 8019286:	697b      	ldr	r3, [r7, #20]
 8019288:	781b      	ldrb	r3, [r3, #0]
 801928a:	b25b      	sxtb	r3, r3
 801928c:	f003 030f 	and.w	r3, r3, #15
 8019290:	b25a      	sxtb	r2, r3
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	b2db      	uxtb	r3, r3
 8019296:	011b      	lsls	r3, r3, #4
 8019298:	b25b      	sxtb	r3, r3
 801929a:	4313      	orrs	r3, r2
 801929c:	b25b      	sxtb	r3, r3
 801929e:	b2db      	uxtb	r3, r3
 80192a0:	e001      	b.n	80192a6 <put_fat+0xbc>
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	b2db      	uxtb	r3, r3
 80192a6:	697a      	ldr	r2, [r7, #20]
 80192a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80192aa:	68fb      	ldr	r3, [r7, #12]
 80192ac:	2201      	movs	r2, #1
 80192ae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80192b0:	68fb      	ldr	r3, [r7, #12]
 80192b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80192b4:	68fb      	ldr	r3, [r7, #12]
 80192b6:	899b      	ldrh	r3, [r3, #12]
 80192b8:	4619      	mov	r1, r3
 80192ba:	69bb      	ldr	r3, [r7, #24]
 80192bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80192c0:	4413      	add	r3, r2
 80192c2:	4619      	mov	r1, r3
 80192c4:	68f8      	ldr	r0, [r7, #12]
 80192c6:	f7ff fdff 	bl	8018ec8 <move_window>
 80192ca:	4603      	mov	r3, r0
 80192cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80192ce:	7ffb      	ldrb	r3, [r7, #31]
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	f040 809c 	bne.w	801940e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80192d6:	68fb      	ldr	r3, [r7, #12]
 80192d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80192dc:	68fb      	ldr	r3, [r7, #12]
 80192de:	899b      	ldrh	r3, [r3, #12]
 80192e0:	461a      	mov	r2, r3
 80192e2:	69bb      	ldr	r3, [r7, #24]
 80192e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80192e8:	fb02 f200 	mul.w	r2, r2, r0
 80192ec:	1a9b      	subs	r3, r3, r2
 80192ee:	440b      	add	r3, r1
 80192f0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80192f2:	68bb      	ldr	r3, [r7, #8]
 80192f4:	f003 0301 	and.w	r3, r3, #1
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d003      	beq.n	8019304 <put_fat+0x11a>
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	091b      	lsrs	r3, r3, #4
 8019300:	b2db      	uxtb	r3, r3
 8019302:	e00e      	b.n	8019322 <put_fat+0x138>
 8019304:	697b      	ldr	r3, [r7, #20]
 8019306:	781b      	ldrb	r3, [r3, #0]
 8019308:	b25b      	sxtb	r3, r3
 801930a:	f023 030f 	bic.w	r3, r3, #15
 801930e:	b25a      	sxtb	r2, r3
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	0a1b      	lsrs	r3, r3, #8
 8019314:	b25b      	sxtb	r3, r3
 8019316:	f003 030f 	and.w	r3, r3, #15
 801931a:	b25b      	sxtb	r3, r3
 801931c:	4313      	orrs	r3, r2
 801931e:	b25b      	sxtb	r3, r3
 8019320:	b2db      	uxtb	r3, r3
 8019322:	697a      	ldr	r2, [r7, #20]
 8019324:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	2201      	movs	r2, #1
 801932a:	70da      	strb	r2, [r3, #3]
			break;
 801932c:	e074      	b.n	8019418 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801932e:	68fb      	ldr	r3, [r7, #12]
 8019330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	899b      	ldrh	r3, [r3, #12]
 8019336:	085b      	lsrs	r3, r3, #1
 8019338:	b29b      	uxth	r3, r3
 801933a:	4619      	mov	r1, r3
 801933c:	68bb      	ldr	r3, [r7, #8]
 801933e:	fbb3 f3f1 	udiv	r3, r3, r1
 8019342:	4413      	add	r3, r2
 8019344:	4619      	mov	r1, r3
 8019346:	68f8      	ldr	r0, [r7, #12]
 8019348:	f7ff fdbe 	bl	8018ec8 <move_window>
 801934c:	4603      	mov	r3, r0
 801934e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019350:	7ffb      	ldrb	r3, [r7, #31]
 8019352:	2b00      	cmp	r3, #0
 8019354:	d15d      	bne.n	8019412 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8019356:	68fb      	ldr	r3, [r7, #12]
 8019358:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801935c:	68bb      	ldr	r3, [r7, #8]
 801935e:	005b      	lsls	r3, r3, #1
 8019360:	68fa      	ldr	r2, [r7, #12]
 8019362:	8992      	ldrh	r2, [r2, #12]
 8019364:	fbb3 f0f2 	udiv	r0, r3, r2
 8019368:	fb02 f200 	mul.w	r2, r2, r0
 801936c:	1a9b      	subs	r3, r3, r2
 801936e:	440b      	add	r3, r1
 8019370:	687a      	ldr	r2, [r7, #4]
 8019372:	b292      	uxth	r2, r2
 8019374:	4611      	mov	r1, r2
 8019376:	4618      	mov	r0, r3
 8019378:	f7ff fb31 	bl	80189de <st_word>
			fs->wflag = 1;
 801937c:	68fb      	ldr	r3, [r7, #12]
 801937e:	2201      	movs	r2, #1
 8019380:	70da      	strb	r2, [r3, #3]
			break;
 8019382:	e049      	b.n	8019418 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8019384:	68fb      	ldr	r3, [r7, #12]
 8019386:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019388:	68fb      	ldr	r3, [r7, #12]
 801938a:	899b      	ldrh	r3, [r3, #12]
 801938c:	089b      	lsrs	r3, r3, #2
 801938e:	b29b      	uxth	r3, r3
 8019390:	4619      	mov	r1, r3
 8019392:	68bb      	ldr	r3, [r7, #8]
 8019394:	fbb3 f3f1 	udiv	r3, r3, r1
 8019398:	4413      	add	r3, r2
 801939a:	4619      	mov	r1, r3
 801939c:	68f8      	ldr	r0, [r7, #12]
 801939e:	f7ff fd93 	bl	8018ec8 <move_window>
 80193a2:	4603      	mov	r3, r0
 80193a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80193a6:	7ffb      	ldrb	r3, [r7, #31]
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d134      	bne.n	8019416 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80193b8:	68bb      	ldr	r3, [r7, #8]
 80193ba:	009b      	lsls	r3, r3, #2
 80193bc:	68fa      	ldr	r2, [r7, #12]
 80193be:	8992      	ldrh	r2, [r2, #12]
 80193c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80193c4:	fb02 f200 	mul.w	r2, r2, r0
 80193c8:	1a9b      	subs	r3, r3, r2
 80193ca:	440b      	add	r3, r1
 80193cc:	4618      	mov	r0, r3
 80193ce:	f7ff fae3 	bl	8018998 <ld_dword>
 80193d2:	4603      	mov	r3, r0
 80193d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80193d8:	4323      	orrs	r3, r4
 80193da:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80193e2:	68bb      	ldr	r3, [r7, #8]
 80193e4:	009b      	lsls	r3, r3, #2
 80193e6:	68fa      	ldr	r2, [r7, #12]
 80193e8:	8992      	ldrh	r2, [r2, #12]
 80193ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80193ee:	fb02 f200 	mul.w	r2, r2, r0
 80193f2:	1a9b      	subs	r3, r3, r2
 80193f4:	440b      	add	r3, r1
 80193f6:	6879      	ldr	r1, [r7, #4]
 80193f8:	4618      	mov	r0, r3
 80193fa:	f7ff fb0b 	bl	8018a14 <st_dword>
			fs->wflag = 1;
 80193fe:	68fb      	ldr	r3, [r7, #12]
 8019400:	2201      	movs	r2, #1
 8019402:	70da      	strb	r2, [r3, #3]
			break;
 8019404:	e008      	b.n	8019418 <put_fat+0x22e>
		}
	}
 8019406:	bf00      	nop
 8019408:	e006      	b.n	8019418 <put_fat+0x22e>
			if (res != FR_OK) break;
 801940a:	bf00      	nop
 801940c:	e004      	b.n	8019418 <put_fat+0x22e>
			if (res != FR_OK) break;
 801940e:	bf00      	nop
 8019410:	e002      	b.n	8019418 <put_fat+0x22e>
			if (res != FR_OK) break;
 8019412:	bf00      	nop
 8019414:	e000      	b.n	8019418 <put_fat+0x22e>
			if (res != FR_OK) break;
 8019416:	bf00      	nop
	return res;
 8019418:	7ffb      	ldrb	r3, [r7, #31]
}
 801941a:	4618      	mov	r0, r3
 801941c:	3724      	adds	r7, #36	; 0x24
 801941e:	46bd      	mov	sp, r7
 8019420:	bd90      	pop	{r4, r7, pc}

08019422 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8019422:	b580      	push	{r7, lr}
 8019424:	b088      	sub	sp, #32
 8019426:	af00      	add	r7, sp, #0
 8019428:	60f8      	str	r0, [r7, #12]
 801942a:	60b9      	str	r1, [r7, #8]
 801942c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801942e:	2300      	movs	r3, #0
 8019430:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8019432:	68fb      	ldr	r3, [r7, #12]
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8019438:	68bb      	ldr	r3, [r7, #8]
 801943a:	2b01      	cmp	r3, #1
 801943c:	d904      	bls.n	8019448 <remove_chain+0x26>
 801943e:	69bb      	ldr	r3, [r7, #24]
 8019440:	69db      	ldr	r3, [r3, #28]
 8019442:	68ba      	ldr	r2, [r7, #8]
 8019444:	429a      	cmp	r2, r3
 8019446:	d301      	bcc.n	801944c <remove_chain+0x2a>
 8019448:	2302      	movs	r3, #2
 801944a:	e04b      	b.n	80194e4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	2b00      	cmp	r3, #0
 8019450:	d00c      	beq.n	801946c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8019452:	f04f 32ff 	mov.w	r2, #4294967295
 8019456:	6879      	ldr	r1, [r7, #4]
 8019458:	69b8      	ldr	r0, [r7, #24]
 801945a:	f7ff fec6 	bl	80191ea <put_fat>
 801945e:	4603      	mov	r3, r0
 8019460:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8019462:	7ffb      	ldrb	r3, [r7, #31]
 8019464:	2b00      	cmp	r3, #0
 8019466:	d001      	beq.n	801946c <remove_chain+0x4a>
 8019468:	7ffb      	ldrb	r3, [r7, #31]
 801946a:	e03b      	b.n	80194e4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801946c:	68b9      	ldr	r1, [r7, #8]
 801946e:	68f8      	ldr	r0, [r7, #12]
 8019470:	f7ff fde7 	bl	8019042 <get_fat>
 8019474:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8019476:	697b      	ldr	r3, [r7, #20]
 8019478:	2b00      	cmp	r3, #0
 801947a:	d031      	beq.n	80194e0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801947c:	697b      	ldr	r3, [r7, #20]
 801947e:	2b01      	cmp	r3, #1
 8019480:	d101      	bne.n	8019486 <remove_chain+0x64>
 8019482:	2302      	movs	r3, #2
 8019484:	e02e      	b.n	80194e4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8019486:	697b      	ldr	r3, [r7, #20]
 8019488:	f1b3 3fff 	cmp.w	r3, #4294967295
 801948c:	d101      	bne.n	8019492 <remove_chain+0x70>
 801948e:	2301      	movs	r3, #1
 8019490:	e028      	b.n	80194e4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8019492:	2200      	movs	r2, #0
 8019494:	68b9      	ldr	r1, [r7, #8]
 8019496:	69b8      	ldr	r0, [r7, #24]
 8019498:	f7ff fea7 	bl	80191ea <put_fat>
 801949c:	4603      	mov	r3, r0
 801949e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80194a0:	7ffb      	ldrb	r3, [r7, #31]
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d001      	beq.n	80194aa <remove_chain+0x88>
 80194a6:	7ffb      	ldrb	r3, [r7, #31]
 80194a8:	e01c      	b.n	80194e4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80194aa:	69bb      	ldr	r3, [r7, #24]
 80194ac:	699a      	ldr	r2, [r3, #24]
 80194ae:	69bb      	ldr	r3, [r7, #24]
 80194b0:	69db      	ldr	r3, [r3, #28]
 80194b2:	3b02      	subs	r3, #2
 80194b4:	429a      	cmp	r2, r3
 80194b6:	d20b      	bcs.n	80194d0 <remove_chain+0xae>
			fs->free_clst++;
 80194b8:	69bb      	ldr	r3, [r7, #24]
 80194ba:	699b      	ldr	r3, [r3, #24]
 80194bc:	1c5a      	adds	r2, r3, #1
 80194be:	69bb      	ldr	r3, [r7, #24]
 80194c0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80194c2:	69bb      	ldr	r3, [r7, #24]
 80194c4:	791b      	ldrb	r3, [r3, #4]
 80194c6:	f043 0301 	orr.w	r3, r3, #1
 80194ca:	b2da      	uxtb	r2, r3
 80194cc:	69bb      	ldr	r3, [r7, #24]
 80194ce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80194d0:	697b      	ldr	r3, [r7, #20]
 80194d2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80194d4:	69bb      	ldr	r3, [r7, #24]
 80194d6:	69db      	ldr	r3, [r3, #28]
 80194d8:	68ba      	ldr	r2, [r7, #8]
 80194da:	429a      	cmp	r2, r3
 80194dc:	d3c6      	bcc.n	801946c <remove_chain+0x4a>
 80194de:	e000      	b.n	80194e2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80194e0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80194e2:	2300      	movs	r3, #0
}
 80194e4:	4618      	mov	r0, r3
 80194e6:	3720      	adds	r7, #32
 80194e8:	46bd      	mov	sp, r7
 80194ea:	bd80      	pop	{r7, pc}

080194ec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80194ec:	b580      	push	{r7, lr}
 80194ee:	b088      	sub	sp, #32
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	6078      	str	r0, [r7, #4]
 80194f4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80194fc:	683b      	ldr	r3, [r7, #0]
 80194fe:	2b00      	cmp	r3, #0
 8019500:	d10d      	bne.n	801951e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8019502:	693b      	ldr	r3, [r7, #16]
 8019504:	695b      	ldr	r3, [r3, #20]
 8019506:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8019508:	69bb      	ldr	r3, [r7, #24]
 801950a:	2b00      	cmp	r3, #0
 801950c:	d004      	beq.n	8019518 <create_chain+0x2c>
 801950e:	693b      	ldr	r3, [r7, #16]
 8019510:	69db      	ldr	r3, [r3, #28]
 8019512:	69ba      	ldr	r2, [r7, #24]
 8019514:	429a      	cmp	r2, r3
 8019516:	d31b      	bcc.n	8019550 <create_chain+0x64>
 8019518:	2301      	movs	r3, #1
 801951a:	61bb      	str	r3, [r7, #24]
 801951c:	e018      	b.n	8019550 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801951e:	6839      	ldr	r1, [r7, #0]
 8019520:	6878      	ldr	r0, [r7, #4]
 8019522:	f7ff fd8e 	bl	8019042 <get_fat>
 8019526:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8019528:	68fb      	ldr	r3, [r7, #12]
 801952a:	2b01      	cmp	r3, #1
 801952c:	d801      	bhi.n	8019532 <create_chain+0x46>
 801952e:	2301      	movs	r3, #1
 8019530:	e070      	b.n	8019614 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8019532:	68fb      	ldr	r3, [r7, #12]
 8019534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019538:	d101      	bne.n	801953e <create_chain+0x52>
 801953a:	68fb      	ldr	r3, [r7, #12]
 801953c:	e06a      	b.n	8019614 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801953e:	693b      	ldr	r3, [r7, #16]
 8019540:	69db      	ldr	r3, [r3, #28]
 8019542:	68fa      	ldr	r2, [r7, #12]
 8019544:	429a      	cmp	r2, r3
 8019546:	d201      	bcs.n	801954c <create_chain+0x60>
 8019548:	68fb      	ldr	r3, [r7, #12]
 801954a:	e063      	b.n	8019614 <create_chain+0x128>
		scl = clst;
 801954c:	683b      	ldr	r3, [r7, #0]
 801954e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8019550:	69bb      	ldr	r3, [r7, #24]
 8019552:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8019554:	69fb      	ldr	r3, [r7, #28]
 8019556:	3301      	adds	r3, #1
 8019558:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801955a:	693b      	ldr	r3, [r7, #16]
 801955c:	69db      	ldr	r3, [r3, #28]
 801955e:	69fa      	ldr	r2, [r7, #28]
 8019560:	429a      	cmp	r2, r3
 8019562:	d307      	bcc.n	8019574 <create_chain+0x88>
				ncl = 2;
 8019564:	2302      	movs	r3, #2
 8019566:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8019568:	69fa      	ldr	r2, [r7, #28]
 801956a:	69bb      	ldr	r3, [r7, #24]
 801956c:	429a      	cmp	r2, r3
 801956e:	d901      	bls.n	8019574 <create_chain+0x88>
 8019570:	2300      	movs	r3, #0
 8019572:	e04f      	b.n	8019614 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8019574:	69f9      	ldr	r1, [r7, #28]
 8019576:	6878      	ldr	r0, [r7, #4]
 8019578:	f7ff fd63 	bl	8019042 <get_fat>
 801957c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801957e:	68fb      	ldr	r3, [r7, #12]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d00e      	beq.n	80195a2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8019584:	68fb      	ldr	r3, [r7, #12]
 8019586:	2b01      	cmp	r3, #1
 8019588:	d003      	beq.n	8019592 <create_chain+0xa6>
 801958a:	68fb      	ldr	r3, [r7, #12]
 801958c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019590:	d101      	bne.n	8019596 <create_chain+0xaa>
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	e03e      	b.n	8019614 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8019596:	69fa      	ldr	r2, [r7, #28]
 8019598:	69bb      	ldr	r3, [r7, #24]
 801959a:	429a      	cmp	r2, r3
 801959c:	d1da      	bne.n	8019554 <create_chain+0x68>
 801959e:	2300      	movs	r3, #0
 80195a0:	e038      	b.n	8019614 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80195a2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80195a4:	f04f 32ff 	mov.w	r2, #4294967295
 80195a8:	69f9      	ldr	r1, [r7, #28]
 80195aa:	6938      	ldr	r0, [r7, #16]
 80195ac:	f7ff fe1d 	bl	80191ea <put_fat>
 80195b0:	4603      	mov	r3, r0
 80195b2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80195b4:	7dfb      	ldrb	r3, [r7, #23]
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	d109      	bne.n	80195ce <create_chain+0xe2>
 80195ba:	683b      	ldr	r3, [r7, #0]
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d006      	beq.n	80195ce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80195c0:	69fa      	ldr	r2, [r7, #28]
 80195c2:	6839      	ldr	r1, [r7, #0]
 80195c4:	6938      	ldr	r0, [r7, #16]
 80195c6:	f7ff fe10 	bl	80191ea <put_fat>
 80195ca:	4603      	mov	r3, r0
 80195cc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80195ce:	7dfb      	ldrb	r3, [r7, #23]
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d116      	bne.n	8019602 <create_chain+0x116>
		fs->last_clst = ncl;
 80195d4:	693b      	ldr	r3, [r7, #16]
 80195d6:	69fa      	ldr	r2, [r7, #28]
 80195d8:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80195da:	693b      	ldr	r3, [r7, #16]
 80195dc:	699a      	ldr	r2, [r3, #24]
 80195de:	693b      	ldr	r3, [r7, #16]
 80195e0:	69db      	ldr	r3, [r3, #28]
 80195e2:	3b02      	subs	r3, #2
 80195e4:	429a      	cmp	r2, r3
 80195e6:	d804      	bhi.n	80195f2 <create_chain+0x106>
 80195e8:	693b      	ldr	r3, [r7, #16]
 80195ea:	699b      	ldr	r3, [r3, #24]
 80195ec:	1e5a      	subs	r2, r3, #1
 80195ee:	693b      	ldr	r3, [r7, #16]
 80195f0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80195f2:	693b      	ldr	r3, [r7, #16]
 80195f4:	791b      	ldrb	r3, [r3, #4]
 80195f6:	f043 0301 	orr.w	r3, r3, #1
 80195fa:	b2da      	uxtb	r2, r3
 80195fc:	693b      	ldr	r3, [r7, #16]
 80195fe:	711a      	strb	r2, [r3, #4]
 8019600:	e007      	b.n	8019612 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8019602:	7dfb      	ldrb	r3, [r7, #23]
 8019604:	2b01      	cmp	r3, #1
 8019606:	d102      	bne.n	801960e <create_chain+0x122>
 8019608:	f04f 33ff 	mov.w	r3, #4294967295
 801960c:	e000      	b.n	8019610 <create_chain+0x124>
 801960e:	2301      	movs	r3, #1
 8019610:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8019612:	69fb      	ldr	r3, [r7, #28]
}
 8019614:	4618      	mov	r0, r3
 8019616:	3720      	adds	r7, #32
 8019618:	46bd      	mov	sp, r7
 801961a:	bd80      	pop	{r7, pc}

0801961c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801961c:	b480      	push	{r7}
 801961e:	b087      	sub	sp, #28
 8019620:	af00      	add	r7, sp, #0
 8019622:	6078      	str	r0, [r7, #4]
 8019624:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019630:	3304      	adds	r3, #4
 8019632:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8019634:	68fb      	ldr	r3, [r7, #12]
 8019636:	899b      	ldrh	r3, [r3, #12]
 8019638:	461a      	mov	r2, r3
 801963a:	683b      	ldr	r3, [r7, #0]
 801963c:	fbb3 f3f2 	udiv	r3, r3, r2
 8019640:	68fa      	ldr	r2, [r7, #12]
 8019642:	8952      	ldrh	r2, [r2, #10]
 8019644:	fbb3 f3f2 	udiv	r3, r3, r2
 8019648:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801964a:	693b      	ldr	r3, [r7, #16]
 801964c:	1d1a      	adds	r2, r3, #4
 801964e:	613a      	str	r2, [r7, #16]
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8019654:	68bb      	ldr	r3, [r7, #8]
 8019656:	2b00      	cmp	r3, #0
 8019658:	d101      	bne.n	801965e <clmt_clust+0x42>
 801965a:	2300      	movs	r3, #0
 801965c:	e010      	b.n	8019680 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801965e:	697a      	ldr	r2, [r7, #20]
 8019660:	68bb      	ldr	r3, [r7, #8]
 8019662:	429a      	cmp	r2, r3
 8019664:	d307      	bcc.n	8019676 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8019666:	697a      	ldr	r2, [r7, #20]
 8019668:	68bb      	ldr	r3, [r7, #8]
 801966a:	1ad3      	subs	r3, r2, r3
 801966c:	617b      	str	r3, [r7, #20]
 801966e:	693b      	ldr	r3, [r7, #16]
 8019670:	3304      	adds	r3, #4
 8019672:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8019674:	e7e9      	b.n	801964a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8019676:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8019678:	693b      	ldr	r3, [r7, #16]
 801967a:	681a      	ldr	r2, [r3, #0]
 801967c:	697b      	ldr	r3, [r7, #20]
 801967e:	4413      	add	r3, r2
}
 8019680:	4618      	mov	r0, r3
 8019682:	371c      	adds	r7, #28
 8019684:	46bd      	mov	sp, r7
 8019686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801968a:	4770      	bx	lr

0801968c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801968c:	b580      	push	{r7, lr}
 801968e:	b086      	sub	sp, #24
 8019690:	af00      	add	r7, sp, #0
 8019692:	6078      	str	r0, [r7, #4]
 8019694:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801969c:	683b      	ldr	r3, [r7, #0]
 801969e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80196a2:	d204      	bcs.n	80196ae <dir_sdi+0x22>
 80196a4:	683b      	ldr	r3, [r7, #0]
 80196a6:	f003 031f 	and.w	r3, r3, #31
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d001      	beq.n	80196b2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80196ae:	2302      	movs	r3, #2
 80196b0:	e071      	b.n	8019796 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	683a      	ldr	r2, [r7, #0]
 80196b6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	689b      	ldr	r3, [r3, #8]
 80196bc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80196be:	697b      	ldr	r3, [r7, #20]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d106      	bne.n	80196d2 <dir_sdi+0x46>
 80196c4:	693b      	ldr	r3, [r7, #16]
 80196c6:	781b      	ldrb	r3, [r3, #0]
 80196c8:	2b02      	cmp	r3, #2
 80196ca:	d902      	bls.n	80196d2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80196cc:	693b      	ldr	r3, [r7, #16]
 80196ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196d0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80196d2:	697b      	ldr	r3, [r7, #20]
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d10c      	bne.n	80196f2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80196d8:	683b      	ldr	r3, [r7, #0]
 80196da:	095b      	lsrs	r3, r3, #5
 80196dc:	693a      	ldr	r2, [r7, #16]
 80196de:	8912      	ldrh	r2, [r2, #8]
 80196e0:	4293      	cmp	r3, r2
 80196e2:	d301      	bcc.n	80196e8 <dir_sdi+0x5c>
 80196e4:	2302      	movs	r3, #2
 80196e6:	e056      	b.n	8019796 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80196e8:	693b      	ldr	r3, [r7, #16]
 80196ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	61da      	str	r2, [r3, #28]
 80196f0:	e02d      	b.n	801974e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80196f2:	693b      	ldr	r3, [r7, #16]
 80196f4:	895b      	ldrh	r3, [r3, #10]
 80196f6:	461a      	mov	r2, r3
 80196f8:	693b      	ldr	r3, [r7, #16]
 80196fa:	899b      	ldrh	r3, [r3, #12]
 80196fc:	fb03 f302 	mul.w	r3, r3, r2
 8019700:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8019702:	e019      	b.n	8019738 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	6979      	ldr	r1, [r7, #20]
 8019708:	4618      	mov	r0, r3
 801970a:	f7ff fc9a 	bl	8019042 <get_fat>
 801970e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8019710:	697b      	ldr	r3, [r7, #20]
 8019712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019716:	d101      	bne.n	801971c <dir_sdi+0x90>
 8019718:	2301      	movs	r3, #1
 801971a:	e03c      	b.n	8019796 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801971c:	697b      	ldr	r3, [r7, #20]
 801971e:	2b01      	cmp	r3, #1
 8019720:	d904      	bls.n	801972c <dir_sdi+0xa0>
 8019722:	693b      	ldr	r3, [r7, #16]
 8019724:	69db      	ldr	r3, [r3, #28]
 8019726:	697a      	ldr	r2, [r7, #20]
 8019728:	429a      	cmp	r2, r3
 801972a:	d301      	bcc.n	8019730 <dir_sdi+0xa4>
 801972c:	2302      	movs	r3, #2
 801972e:	e032      	b.n	8019796 <dir_sdi+0x10a>
			ofs -= csz;
 8019730:	683a      	ldr	r2, [r7, #0]
 8019732:	68fb      	ldr	r3, [r7, #12]
 8019734:	1ad3      	subs	r3, r2, r3
 8019736:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8019738:	683a      	ldr	r2, [r7, #0]
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	429a      	cmp	r2, r3
 801973e:	d2e1      	bcs.n	8019704 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8019740:	6979      	ldr	r1, [r7, #20]
 8019742:	6938      	ldr	r0, [r7, #16]
 8019744:	f7ff fc5e 	bl	8019004 <clust2sect>
 8019748:	4602      	mov	r2, r0
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	697a      	ldr	r2, [r7, #20]
 8019752:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	69db      	ldr	r3, [r3, #28]
 8019758:	2b00      	cmp	r3, #0
 801975a:	d101      	bne.n	8019760 <dir_sdi+0xd4>
 801975c:	2302      	movs	r3, #2
 801975e:	e01a      	b.n	8019796 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	69da      	ldr	r2, [r3, #28]
 8019764:	693b      	ldr	r3, [r7, #16]
 8019766:	899b      	ldrh	r3, [r3, #12]
 8019768:	4619      	mov	r1, r3
 801976a:	683b      	ldr	r3, [r7, #0]
 801976c:	fbb3 f3f1 	udiv	r3, r3, r1
 8019770:	441a      	add	r2, r3
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8019776:	693b      	ldr	r3, [r7, #16]
 8019778:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801977c:	693b      	ldr	r3, [r7, #16]
 801977e:	899b      	ldrh	r3, [r3, #12]
 8019780:	461a      	mov	r2, r3
 8019782:	683b      	ldr	r3, [r7, #0]
 8019784:	fbb3 f0f2 	udiv	r0, r3, r2
 8019788:	fb02 f200 	mul.w	r2, r2, r0
 801978c:	1a9b      	subs	r3, r3, r2
 801978e:	18ca      	adds	r2, r1, r3
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8019794:	2300      	movs	r3, #0
}
 8019796:	4618      	mov	r0, r3
 8019798:	3718      	adds	r7, #24
 801979a:	46bd      	mov	sp, r7
 801979c:	bd80      	pop	{r7, pc}

0801979e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801979e:	b580      	push	{r7, lr}
 80197a0:	b086      	sub	sp, #24
 80197a2:	af00      	add	r7, sp, #0
 80197a4:	6078      	str	r0, [r7, #4]
 80197a6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	695b      	ldr	r3, [r3, #20]
 80197b2:	3320      	adds	r3, #32
 80197b4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	69db      	ldr	r3, [r3, #28]
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d003      	beq.n	80197c6 <dir_next+0x28>
 80197be:	68bb      	ldr	r3, [r7, #8]
 80197c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80197c4:	d301      	bcc.n	80197ca <dir_next+0x2c>
 80197c6:	2304      	movs	r3, #4
 80197c8:	e0bb      	b.n	8019942 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80197ca:	68fb      	ldr	r3, [r7, #12]
 80197cc:	899b      	ldrh	r3, [r3, #12]
 80197ce:	461a      	mov	r2, r3
 80197d0:	68bb      	ldr	r3, [r7, #8]
 80197d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80197d6:	fb02 f201 	mul.w	r2, r2, r1
 80197da:	1a9b      	subs	r3, r3, r2
 80197dc:	2b00      	cmp	r3, #0
 80197de:	f040 809d 	bne.w	801991c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	69db      	ldr	r3, [r3, #28]
 80197e6:	1c5a      	adds	r2, r3, #1
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	699b      	ldr	r3, [r3, #24]
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d10b      	bne.n	801980c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80197f4:	68bb      	ldr	r3, [r7, #8]
 80197f6:	095b      	lsrs	r3, r3, #5
 80197f8:	68fa      	ldr	r2, [r7, #12]
 80197fa:	8912      	ldrh	r2, [r2, #8]
 80197fc:	4293      	cmp	r3, r2
 80197fe:	f0c0 808d 	bcc.w	801991c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	2200      	movs	r2, #0
 8019806:	61da      	str	r2, [r3, #28]
 8019808:	2304      	movs	r3, #4
 801980a:	e09a      	b.n	8019942 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	899b      	ldrh	r3, [r3, #12]
 8019810:	461a      	mov	r2, r3
 8019812:	68bb      	ldr	r3, [r7, #8]
 8019814:	fbb3 f3f2 	udiv	r3, r3, r2
 8019818:	68fa      	ldr	r2, [r7, #12]
 801981a:	8952      	ldrh	r2, [r2, #10]
 801981c:	3a01      	subs	r2, #1
 801981e:	4013      	ands	r3, r2
 8019820:	2b00      	cmp	r3, #0
 8019822:	d17b      	bne.n	801991c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8019824:	687a      	ldr	r2, [r7, #4]
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	699b      	ldr	r3, [r3, #24]
 801982a:	4619      	mov	r1, r3
 801982c:	4610      	mov	r0, r2
 801982e:	f7ff fc08 	bl	8019042 <get_fat>
 8019832:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8019834:	697b      	ldr	r3, [r7, #20]
 8019836:	2b01      	cmp	r3, #1
 8019838:	d801      	bhi.n	801983e <dir_next+0xa0>
 801983a:	2302      	movs	r3, #2
 801983c:	e081      	b.n	8019942 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801983e:	697b      	ldr	r3, [r7, #20]
 8019840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019844:	d101      	bne.n	801984a <dir_next+0xac>
 8019846:	2301      	movs	r3, #1
 8019848:	e07b      	b.n	8019942 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	69db      	ldr	r3, [r3, #28]
 801984e:	697a      	ldr	r2, [r7, #20]
 8019850:	429a      	cmp	r2, r3
 8019852:	d359      	bcc.n	8019908 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8019854:	683b      	ldr	r3, [r7, #0]
 8019856:	2b00      	cmp	r3, #0
 8019858:	d104      	bne.n	8019864 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	2200      	movs	r2, #0
 801985e:	61da      	str	r2, [r3, #28]
 8019860:	2304      	movs	r3, #4
 8019862:	e06e      	b.n	8019942 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8019864:	687a      	ldr	r2, [r7, #4]
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	699b      	ldr	r3, [r3, #24]
 801986a:	4619      	mov	r1, r3
 801986c:	4610      	mov	r0, r2
 801986e:	f7ff fe3d 	bl	80194ec <create_chain>
 8019872:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8019874:	697b      	ldr	r3, [r7, #20]
 8019876:	2b00      	cmp	r3, #0
 8019878:	d101      	bne.n	801987e <dir_next+0xe0>
 801987a:	2307      	movs	r3, #7
 801987c:	e061      	b.n	8019942 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801987e:	697b      	ldr	r3, [r7, #20]
 8019880:	2b01      	cmp	r3, #1
 8019882:	d101      	bne.n	8019888 <dir_next+0xea>
 8019884:	2302      	movs	r3, #2
 8019886:	e05c      	b.n	8019942 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8019888:	697b      	ldr	r3, [r7, #20]
 801988a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801988e:	d101      	bne.n	8019894 <dir_next+0xf6>
 8019890:	2301      	movs	r3, #1
 8019892:	e056      	b.n	8019942 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8019894:	68f8      	ldr	r0, [r7, #12]
 8019896:	f7ff fad3 	bl	8018e40 <sync_window>
 801989a:	4603      	mov	r3, r0
 801989c:	2b00      	cmp	r3, #0
 801989e:	d001      	beq.n	80198a4 <dir_next+0x106>
 80198a0:	2301      	movs	r3, #1
 80198a2:	e04e      	b.n	8019942 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80198aa:	68fb      	ldr	r3, [r7, #12]
 80198ac:	899b      	ldrh	r3, [r3, #12]
 80198ae:	461a      	mov	r2, r3
 80198b0:	2100      	movs	r1, #0
 80198b2:	f7ff f8fc 	bl	8018aae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80198b6:	2300      	movs	r3, #0
 80198b8:	613b      	str	r3, [r7, #16]
 80198ba:	6979      	ldr	r1, [r7, #20]
 80198bc:	68f8      	ldr	r0, [r7, #12]
 80198be:	f7ff fba1 	bl	8019004 <clust2sect>
 80198c2:	4602      	mov	r2, r0
 80198c4:	68fb      	ldr	r3, [r7, #12]
 80198c6:	635a      	str	r2, [r3, #52]	; 0x34
 80198c8:	e012      	b.n	80198f0 <dir_next+0x152>
						fs->wflag = 1;
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	2201      	movs	r2, #1
 80198ce:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80198d0:	68f8      	ldr	r0, [r7, #12]
 80198d2:	f7ff fab5 	bl	8018e40 <sync_window>
 80198d6:	4603      	mov	r3, r0
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d001      	beq.n	80198e0 <dir_next+0x142>
 80198dc:	2301      	movs	r3, #1
 80198de:	e030      	b.n	8019942 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80198e0:	693b      	ldr	r3, [r7, #16]
 80198e2:	3301      	adds	r3, #1
 80198e4:	613b      	str	r3, [r7, #16]
 80198e6:	68fb      	ldr	r3, [r7, #12]
 80198e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80198ea:	1c5a      	adds	r2, r3, #1
 80198ec:	68fb      	ldr	r3, [r7, #12]
 80198ee:	635a      	str	r2, [r3, #52]	; 0x34
 80198f0:	68fb      	ldr	r3, [r7, #12]
 80198f2:	895b      	ldrh	r3, [r3, #10]
 80198f4:	461a      	mov	r2, r3
 80198f6:	693b      	ldr	r3, [r7, #16]
 80198f8:	4293      	cmp	r3, r2
 80198fa:	d3e6      	bcc.n	80198ca <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80198fc:	68fb      	ldr	r3, [r7, #12]
 80198fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019900:	693b      	ldr	r3, [r7, #16]
 8019902:	1ad2      	subs	r2, r2, r3
 8019904:	68fb      	ldr	r3, [r7, #12]
 8019906:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	697a      	ldr	r2, [r7, #20]
 801990c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801990e:	6979      	ldr	r1, [r7, #20]
 8019910:	68f8      	ldr	r0, [r7, #12]
 8019912:	f7ff fb77 	bl	8019004 <clust2sect>
 8019916:	4602      	mov	r2, r0
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	68ba      	ldr	r2, [r7, #8]
 8019920:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8019922:	68fb      	ldr	r3, [r7, #12]
 8019924:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	899b      	ldrh	r3, [r3, #12]
 801992c:	461a      	mov	r2, r3
 801992e:	68bb      	ldr	r3, [r7, #8]
 8019930:	fbb3 f0f2 	udiv	r0, r3, r2
 8019934:	fb02 f200 	mul.w	r2, r2, r0
 8019938:	1a9b      	subs	r3, r3, r2
 801993a:	18ca      	adds	r2, r1, r3
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8019940:	2300      	movs	r3, #0
}
 8019942:	4618      	mov	r0, r3
 8019944:	3718      	adds	r7, #24
 8019946:	46bd      	mov	sp, r7
 8019948:	bd80      	pop	{r7, pc}

0801994a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801994a:	b580      	push	{r7, lr}
 801994c:	b086      	sub	sp, #24
 801994e:	af00      	add	r7, sp, #0
 8019950:	6078      	str	r0, [r7, #4]
 8019952:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801995a:	2100      	movs	r1, #0
 801995c:	6878      	ldr	r0, [r7, #4]
 801995e:	f7ff fe95 	bl	801968c <dir_sdi>
 8019962:	4603      	mov	r3, r0
 8019964:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019966:	7dfb      	ldrb	r3, [r7, #23]
 8019968:	2b00      	cmp	r3, #0
 801996a:	d12b      	bne.n	80199c4 <dir_alloc+0x7a>
		n = 0;
 801996c:	2300      	movs	r3, #0
 801996e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	69db      	ldr	r3, [r3, #28]
 8019974:	4619      	mov	r1, r3
 8019976:	68f8      	ldr	r0, [r7, #12]
 8019978:	f7ff faa6 	bl	8018ec8 <move_window>
 801997c:	4603      	mov	r3, r0
 801997e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8019980:	7dfb      	ldrb	r3, [r7, #23]
 8019982:	2b00      	cmp	r3, #0
 8019984:	d11d      	bne.n	80199c2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	6a1b      	ldr	r3, [r3, #32]
 801998a:	781b      	ldrb	r3, [r3, #0]
 801998c:	2be5      	cmp	r3, #229	; 0xe5
 801998e:	d004      	beq.n	801999a <dir_alloc+0x50>
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	6a1b      	ldr	r3, [r3, #32]
 8019994:	781b      	ldrb	r3, [r3, #0]
 8019996:	2b00      	cmp	r3, #0
 8019998:	d107      	bne.n	80199aa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801999a:	693b      	ldr	r3, [r7, #16]
 801999c:	3301      	adds	r3, #1
 801999e:	613b      	str	r3, [r7, #16]
 80199a0:	693a      	ldr	r2, [r7, #16]
 80199a2:	683b      	ldr	r3, [r7, #0]
 80199a4:	429a      	cmp	r2, r3
 80199a6:	d102      	bne.n	80199ae <dir_alloc+0x64>
 80199a8:	e00c      	b.n	80199c4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80199aa:	2300      	movs	r3, #0
 80199ac:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80199ae:	2101      	movs	r1, #1
 80199b0:	6878      	ldr	r0, [r7, #4]
 80199b2:	f7ff fef4 	bl	801979e <dir_next>
 80199b6:	4603      	mov	r3, r0
 80199b8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80199ba:	7dfb      	ldrb	r3, [r7, #23]
 80199bc:	2b00      	cmp	r3, #0
 80199be:	d0d7      	beq.n	8019970 <dir_alloc+0x26>
 80199c0:	e000      	b.n	80199c4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80199c2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80199c4:	7dfb      	ldrb	r3, [r7, #23]
 80199c6:	2b04      	cmp	r3, #4
 80199c8:	d101      	bne.n	80199ce <dir_alloc+0x84>
 80199ca:	2307      	movs	r3, #7
 80199cc:	75fb      	strb	r3, [r7, #23]
	return res;
 80199ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80199d0:	4618      	mov	r0, r3
 80199d2:	3718      	adds	r7, #24
 80199d4:	46bd      	mov	sp, r7
 80199d6:	bd80      	pop	{r7, pc}

080199d8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80199d8:	b580      	push	{r7, lr}
 80199da:	b084      	sub	sp, #16
 80199dc:	af00      	add	r7, sp, #0
 80199de:	6078      	str	r0, [r7, #4]
 80199e0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80199e2:	683b      	ldr	r3, [r7, #0]
 80199e4:	331a      	adds	r3, #26
 80199e6:	4618      	mov	r0, r3
 80199e8:	f7fe ffbe 	bl	8018968 <ld_word>
 80199ec:	4603      	mov	r3, r0
 80199ee:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	781b      	ldrb	r3, [r3, #0]
 80199f4:	2b03      	cmp	r3, #3
 80199f6:	d109      	bne.n	8019a0c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80199f8:	683b      	ldr	r3, [r7, #0]
 80199fa:	3314      	adds	r3, #20
 80199fc:	4618      	mov	r0, r3
 80199fe:	f7fe ffb3 	bl	8018968 <ld_word>
 8019a02:	4603      	mov	r3, r0
 8019a04:	041b      	lsls	r3, r3, #16
 8019a06:	68fa      	ldr	r2, [r7, #12]
 8019a08:	4313      	orrs	r3, r2
 8019a0a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8019a0c:	68fb      	ldr	r3, [r7, #12]
}
 8019a0e:	4618      	mov	r0, r3
 8019a10:	3710      	adds	r7, #16
 8019a12:	46bd      	mov	sp, r7
 8019a14:	bd80      	pop	{r7, pc}

08019a16 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8019a16:	b580      	push	{r7, lr}
 8019a18:	b084      	sub	sp, #16
 8019a1a:	af00      	add	r7, sp, #0
 8019a1c:	60f8      	str	r0, [r7, #12]
 8019a1e:	60b9      	str	r1, [r7, #8]
 8019a20:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8019a22:	68bb      	ldr	r3, [r7, #8]
 8019a24:	331a      	adds	r3, #26
 8019a26:	687a      	ldr	r2, [r7, #4]
 8019a28:	b292      	uxth	r2, r2
 8019a2a:	4611      	mov	r1, r2
 8019a2c:	4618      	mov	r0, r3
 8019a2e:	f7fe ffd6 	bl	80189de <st_word>
	if (fs->fs_type == FS_FAT32) {
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	781b      	ldrb	r3, [r3, #0]
 8019a36:	2b03      	cmp	r3, #3
 8019a38:	d109      	bne.n	8019a4e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8019a3a:	68bb      	ldr	r3, [r7, #8]
 8019a3c:	f103 0214 	add.w	r2, r3, #20
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	0c1b      	lsrs	r3, r3, #16
 8019a44:	b29b      	uxth	r3, r3
 8019a46:	4619      	mov	r1, r3
 8019a48:	4610      	mov	r0, r2
 8019a4a:	f7fe ffc8 	bl	80189de <st_word>
	}
}
 8019a4e:	bf00      	nop
 8019a50:	3710      	adds	r7, #16
 8019a52:	46bd      	mov	sp, r7
 8019a54:	bd80      	pop	{r7, pc}
	...

08019a58 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8019a58:	b590      	push	{r4, r7, lr}
 8019a5a:	b087      	sub	sp, #28
 8019a5c:	af00      	add	r7, sp, #0
 8019a5e:	6078      	str	r0, [r7, #4]
 8019a60:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8019a62:	683b      	ldr	r3, [r7, #0]
 8019a64:	331a      	adds	r3, #26
 8019a66:	4618      	mov	r0, r3
 8019a68:	f7fe ff7e 	bl	8018968 <ld_word>
 8019a6c:	4603      	mov	r3, r0
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d001      	beq.n	8019a76 <cmp_lfn+0x1e>
 8019a72:	2300      	movs	r3, #0
 8019a74:	e059      	b.n	8019b2a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8019a76:	683b      	ldr	r3, [r7, #0]
 8019a78:	781b      	ldrb	r3, [r3, #0]
 8019a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019a7e:	1e5a      	subs	r2, r3, #1
 8019a80:	4613      	mov	r3, r2
 8019a82:	005b      	lsls	r3, r3, #1
 8019a84:	4413      	add	r3, r2
 8019a86:	009b      	lsls	r3, r3, #2
 8019a88:	4413      	add	r3, r2
 8019a8a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8019a8c:	2301      	movs	r3, #1
 8019a8e:	81fb      	strh	r3, [r7, #14]
 8019a90:	2300      	movs	r3, #0
 8019a92:	613b      	str	r3, [r7, #16]
 8019a94:	e033      	b.n	8019afe <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8019a96:	4a27      	ldr	r2, [pc, #156]	; (8019b34 <cmp_lfn+0xdc>)
 8019a98:	693b      	ldr	r3, [r7, #16]
 8019a9a:	4413      	add	r3, r2
 8019a9c:	781b      	ldrb	r3, [r3, #0]
 8019a9e:	461a      	mov	r2, r3
 8019aa0:	683b      	ldr	r3, [r7, #0]
 8019aa2:	4413      	add	r3, r2
 8019aa4:	4618      	mov	r0, r3
 8019aa6:	f7fe ff5f 	bl	8018968 <ld_word>
 8019aaa:	4603      	mov	r3, r0
 8019aac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8019aae:	89fb      	ldrh	r3, [r7, #14]
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	d01a      	beq.n	8019aea <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8019ab4:	697b      	ldr	r3, [r7, #20]
 8019ab6:	2bfe      	cmp	r3, #254	; 0xfe
 8019ab8:	d812      	bhi.n	8019ae0 <cmp_lfn+0x88>
 8019aba:	89bb      	ldrh	r3, [r7, #12]
 8019abc:	4618      	mov	r0, r3
 8019abe:	f001 fe05 	bl	801b6cc <ff_wtoupper>
 8019ac2:	4603      	mov	r3, r0
 8019ac4:	461c      	mov	r4, r3
 8019ac6:	697b      	ldr	r3, [r7, #20]
 8019ac8:	1c5a      	adds	r2, r3, #1
 8019aca:	617a      	str	r2, [r7, #20]
 8019acc:	005b      	lsls	r3, r3, #1
 8019ace:	687a      	ldr	r2, [r7, #4]
 8019ad0:	4413      	add	r3, r2
 8019ad2:	881b      	ldrh	r3, [r3, #0]
 8019ad4:	4618      	mov	r0, r3
 8019ad6:	f001 fdf9 	bl	801b6cc <ff_wtoupper>
 8019ada:	4603      	mov	r3, r0
 8019adc:	429c      	cmp	r4, r3
 8019ade:	d001      	beq.n	8019ae4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	e022      	b.n	8019b2a <cmp_lfn+0xd2>
			}
			wc = uc;
 8019ae4:	89bb      	ldrh	r3, [r7, #12]
 8019ae6:	81fb      	strh	r3, [r7, #14]
 8019ae8:	e006      	b.n	8019af8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8019aea:	89bb      	ldrh	r3, [r7, #12]
 8019aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019af0:	4293      	cmp	r3, r2
 8019af2:	d001      	beq.n	8019af8 <cmp_lfn+0xa0>
 8019af4:	2300      	movs	r3, #0
 8019af6:	e018      	b.n	8019b2a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8019af8:	693b      	ldr	r3, [r7, #16]
 8019afa:	3301      	adds	r3, #1
 8019afc:	613b      	str	r3, [r7, #16]
 8019afe:	693b      	ldr	r3, [r7, #16]
 8019b00:	2b0c      	cmp	r3, #12
 8019b02:	d9c8      	bls.n	8019a96 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8019b04:	683b      	ldr	r3, [r7, #0]
 8019b06:	781b      	ldrb	r3, [r3, #0]
 8019b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d00b      	beq.n	8019b28 <cmp_lfn+0xd0>
 8019b10:	89fb      	ldrh	r3, [r7, #14]
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d008      	beq.n	8019b28 <cmp_lfn+0xd0>
 8019b16:	697b      	ldr	r3, [r7, #20]
 8019b18:	005b      	lsls	r3, r3, #1
 8019b1a:	687a      	ldr	r2, [r7, #4]
 8019b1c:	4413      	add	r3, r2
 8019b1e:	881b      	ldrh	r3, [r3, #0]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d001      	beq.n	8019b28 <cmp_lfn+0xd0>
 8019b24:	2300      	movs	r3, #0
 8019b26:	e000      	b.n	8019b2a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8019b28:	2301      	movs	r3, #1
}
 8019b2a:	4618      	mov	r0, r3
 8019b2c:	371c      	adds	r7, #28
 8019b2e:	46bd      	mov	sp, r7
 8019b30:	bd90      	pop	{r4, r7, pc}
 8019b32:	bf00      	nop
 8019b34:	080224b0 	.word	0x080224b0

08019b38 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8019b38:	b580      	push	{r7, lr}
 8019b3a:	b088      	sub	sp, #32
 8019b3c:	af00      	add	r7, sp, #0
 8019b3e:	60f8      	str	r0, [r7, #12]
 8019b40:	60b9      	str	r1, [r7, #8]
 8019b42:	4611      	mov	r1, r2
 8019b44:	461a      	mov	r2, r3
 8019b46:	460b      	mov	r3, r1
 8019b48:	71fb      	strb	r3, [r7, #7]
 8019b4a:	4613      	mov	r3, r2
 8019b4c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8019b4e:	68bb      	ldr	r3, [r7, #8]
 8019b50:	330d      	adds	r3, #13
 8019b52:	79ba      	ldrb	r2, [r7, #6]
 8019b54:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8019b56:	68bb      	ldr	r3, [r7, #8]
 8019b58:	330b      	adds	r3, #11
 8019b5a:	220f      	movs	r2, #15
 8019b5c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8019b5e:	68bb      	ldr	r3, [r7, #8]
 8019b60:	330c      	adds	r3, #12
 8019b62:	2200      	movs	r2, #0
 8019b64:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8019b66:	68bb      	ldr	r3, [r7, #8]
 8019b68:	331a      	adds	r3, #26
 8019b6a:	2100      	movs	r1, #0
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	f7fe ff36 	bl	80189de <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8019b72:	79fb      	ldrb	r3, [r7, #7]
 8019b74:	1e5a      	subs	r2, r3, #1
 8019b76:	4613      	mov	r3, r2
 8019b78:	005b      	lsls	r3, r3, #1
 8019b7a:	4413      	add	r3, r2
 8019b7c:	009b      	lsls	r3, r3, #2
 8019b7e:	4413      	add	r3, r2
 8019b80:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8019b82:	2300      	movs	r3, #0
 8019b84:	82fb      	strh	r3, [r7, #22]
 8019b86:	2300      	movs	r3, #0
 8019b88:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019b8a:	8afb      	ldrh	r3, [r7, #22]
 8019b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019b90:	4293      	cmp	r3, r2
 8019b92:	d007      	beq.n	8019ba4 <put_lfn+0x6c>
 8019b94:	69fb      	ldr	r3, [r7, #28]
 8019b96:	1c5a      	adds	r2, r3, #1
 8019b98:	61fa      	str	r2, [r7, #28]
 8019b9a:	005b      	lsls	r3, r3, #1
 8019b9c:	68fa      	ldr	r2, [r7, #12]
 8019b9e:	4413      	add	r3, r2
 8019ba0:	881b      	ldrh	r3, [r3, #0]
 8019ba2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8019ba4:	4a17      	ldr	r2, [pc, #92]	; (8019c04 <put_lfn+0xcc>)
 8019ba6:	69bb      	ldr	r3, [r7, #24]
 8019ba8:	4413      	add	r3, r2
 8019baa:	781b      	ldrb	r3, [r3, #0]
 8019bac:	461a      	mov	r2, r3
 8019bae:	68bb      	ldr	r3, [r7, #8]
 8019bb0:	4413      	add	r3, r2
 8019bb2:	8afa      	ldrh	r2, [r7, #22]
 8019bb4:	4611      	mov	r1, r2
 8019bb6:	4618      	mov	r0, r3
 8019bb8:	f7fe ff11 	bl	80189de <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019bbc:	8afb      	ldrh	r3, [r7, #22]
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d102      	bne.n	8019bc8 <put_lfn+0x90>
 8019bc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019bc6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8019bc8:	69bb      	ldr	r3, [r7, #24]
 8019bca:	3301      	adds	r3, #1
 8019bcc:	61bb      	str	r3, [r7, #24]
 8019bce:	69bb      	ldr	r3, [r7, #24]
 8019bd0:	2b0c      	cmp	r3, #12
 8019bd2:	d9da      	bls.n	8019b8a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8019bd4:	8afb      	ldrh	r3, [r7, #22]
 8019bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019bda:	4293      	cmp	r3, r2
 8019bdc:	d006      	beq.n	8019bec <put_lfn+0xb4>
 8019bde:	69fb      	ldr	r3, [r7, #28]
 8019be0:	005b      	lsls	r3, r3, #1
 8019be2:	68fa      	ldr	r2, [r7, #12]
 8019be4:	4413      	add	r3, r2
 8019be6:	881b      	ldrh	r3, [r3, #0]
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d103      	bne.n	8019bf4 <put_lfn+0xbc>
 8019bec:	79fb      	ldrb	r3, [r7, #7]
 8019bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019bf2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8019bf4:	68bb      	ldr	r3, [r7, #8]
 8019bf6:	79fa      	ldrb	r2, [r7, #7]
 8019bf8:	701a      	strb	r2, [r3, #0]
}
 8019bfa:	bf00      	nop
 8019bfc:	3720      	adds	r7, #32
 8019bfe:	46bd      	mov	sp, r7
 8019c00:	bd80      	pop	{r7, pc}
 8019c02:	bf00      	nop
 8019c04:	080224b0 	.word	0x080224b0

08019c08 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8019c08:	b580      	push	{r7, lr}
 8019c0a:	b08c      	sub	sp, #48	; 0x30
 8019c0c:	af00      	add	r7, sp, #0
 8019c0e:	60f8      	str	r0, [r7, #12]
 8019c10:	60b9      	str	r1, [r7, #8]
 8019c12:	607a      	str	r2, [r7, #4]
 8019c14:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8019c16:	220b      	movs	r2, #11
 8019c18:	68b9      	ldr	r1, [r7, #8]
 8019c1a:	68f8      	ldr	r0, [r7, #12]
 8019c1c:	f7fe ff26 	bl	8018a6c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8019c20:	683b      	ldr	r3, [r7, #0]
 8019c22:	2b05      	cmp	r3, #5
 8019c24:	d929      	bls.n	8019c7a <gen_numname+0x72>
		sr = seq;
 8019c26:	683b      	ldr	r3, [r7, #0]
 8019c28:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8019c2a:	e020      	b.n	8019c6e <gen_numname+0x66>
			wc = *lfn++;
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	1c9a      	adds	r2, r3, #2
 8019c30:	607a      	str	r2, [r7, #4]
 8019c32:	881b      	ldrh	r3, [r3, #0]
 8019c34:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8019c36:	2300      	movs	r3, #0
 8019c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8019c3a:	e015      	b.n	8019c68 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8019c3c:	69fb      	ldr	r3, [r7, #28]
 8019c3e:	005a      	lsls	r2, r3, #1
 8019c40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019c42:	f003 0301 	and.w	r3, r3, #1
 8019c46:	4413      	add	r3, r2
 8019c48:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8019c4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019c4c:	085b      	lsrs	r3, r3, #1
 8019c4e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8019c50:	69fb      	ldr	r3, [r7, #28]
 8019c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d003      	beq.n	8019c62 <gen_numname+0x5a>
 8019c5a:	69fa      	ldr	r2, [r7, #28]
 8019c5c:	4b31      	ldr	r3, [pc, #196]	; (8019d24 <gen_numname+0x11c>)
 8019c5e:	4053      	eors	r3, r2
 8019c60:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8019c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c64:	3301      	adds	r3, #1
 8019c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8019c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c6a:	2b0f      	cmp	r3, #15
 8019c6c:	d9e6      	bls.n	8019c3c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	881b      	ldrh	r3, [r3, #0]
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d1da      	bne.n	8019c2c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8019c76:	69fb      	ldr	r3, [r7, #28]
 8019c78:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8019c7a:	2307      	movs	r3, #7
 8019c7c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8019c7e:	683b      	ldr	r3, [r7, #0]
 8019c80:	b2db      	uxtb	r3, r3
 8019c82:	f003 030f 	and.w	r3, r3, #15
 8019c86:	b2db      	uxtb	r3, r3
 8019c88:	3330      	adds	r3, #48	; 0x30
 8019c8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8019c8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019c92:	2b39      	cmp	r3, #57	; 0x39
 8019c94:	d904      	bls.n	8019ca0 <gen_numname+0x98>
 8019c96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019c9a:	3307      	adds	r3, #7
 8019c9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8019ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ca2:	1e5a      	subs	r2, r3, #1
 8019ca4:	62ba      	str	r2, [r7, #40]	; 0x28
 8019ca6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8019caa:	4413      	add	r3, r2
 8019cac:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8019cb0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8019cb4:	683b      	ldr	r3, [r7, #0]
 8019cb6:	091b      	lsrs	r3, r3, #4
 8019cb8:	603b      	str	r3, [r7, #0]
	} while (seq);
 8019cba:	683b      	ldr	r3, [r7, #0]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d1de      	bne.n	8019c7e <gen_numname+0x76>
	ns[i] = '~';
 8019cc0:	f107 0214 	add.w	r2, r7, #20
 8019cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cc6:	4413      	add	r3, r2
 8019cc8:	227e      	movs	r2, #126	; 0x7e
 8019cca:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8019ccc:	2300      	movs	r3, #0
 8019cce:	627b      	str	r3, [r7, #36]	; 0x24
 8019cd0:	e002      	b.n	8019cd8 <gen_numname+0xd0>
 8019cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cd4:	3301      	adds	r3, #1
 8019cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8019cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cdc:	429a      	cmp	r2, r3
 8019cde:	d205      	bcs.n	8019cec <gen_numname+0xe4>
 8019ce0:	68fa      	ldr	r2, [r7, #12]
 8019ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ce4:	4413      	add	r3, r2
 8019ce6:	781b      	ldrb	r3, [r3, #0]
 8019ce8:	2b20      	cmp	r3, #32
 8019cea:	d1f2      	bne.n	8019cd2 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cee:	2b07      	cmp	r3, #7
 8019cf0:	d808      	bhi.n	8019d04 <gen_numname+0xfc>
 8019cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cf4:	1c5a      	adds	r2, r3, #1
 8019cf6:	62ba      	str	r2, [r7, #40]	; 0x28
 8019cf8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8019cfc:	4413      	add	r3, r2
 8019cfe:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8019d02:	e000      	b.n	8019d06 <gen_numname+0xfe>
 8019d04:	2120      	movs	r1, #32
 8019d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d08:	1c5a      	adds	r2, r3, #1
 8019d0a:	627a      	str	r2, [r7, #36]	; 0x24
 8019d0c:	68fa      	ldr	r2, [r7, #12]
 8019d0e:	4413      	add	r3, r2
 8019d10:	460a      	mov	r2, r1
 8019d12:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8019d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d16:	2b07      	cmp	r3, #7
 8019d18:	d9e8      	bls.n	8019cec <gen_numname+0xe4>
}
 8019d1a:	bf00      	nop
 8019d1c:	bf00      	nop
 8019d1e:	3730      	adds	r7, #48	; 0x30
 8019d20:	46bd      	mov	sp, r7
 8019d22:	bd80      	pop	{r7, pc}
 8019d24:	00011021 	.word	0x00011021

08019d28 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8019d28:	b480      	push	{r7}
 8019d2a:	b085      	sub	sp, #20
 8019d2c:	af00      	add	r7, sp, #0
 8019d2e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8019d30:	2300      	movs	r3, #0
 8019d32:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8019d34:	230b      	movs	r3, #11
 8019d36:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8019d38:	7bfb      	ldrb	r3, [r7, #15]
 8019d3a:	b2da      	uxtb	r2, r3
 8019d3c:	0852      	lsrs	r2, r2, #1
 8019d3e:	01db      	lsls	r3, r3, #7
 8019d40:	4313      	orrs	r3, r2
 8019d42:	b2da      	uxtb	r2, r3
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	1c59      	adds	r1, r3, #1
 8019d48:	6079      	str	r1, [r7, #4]
 8019d4a:	781b      	ldrb	r3, [r3, #0]
 8019d4c:	4413      	add	r3, r2
 8019d4e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8019d50:	68bb      	ldr	r3, [r7, #8]
 8019d52:	3b01      	subs	r3, #1
 8019d54:	60bb      	str	r3, [r7, #8]
 8019d56:	68bb      	ldr	r3, [r7, #8]
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d1ed      	bne.n	8019d38 <sum_sfn+0x10>
	return sum;
 8019d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8019d5e:	4618      	mov	r0, r3
 8019d60:	3714      	adds	r7, #20
 8019d62:	46bd      	mov	sp, r7
 8019d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d68:	4770      	bx	lr

08019d6a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8019d6a:	b580      	push	{r7, lr}
 8019d6c:	b086      	sub	sp, #24
 8019d6e:	af00      	add	r7, sp, #0
 8019d70:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8019d78:	2100      	movs	r1, #0
 8019d7a:	6878      	ldr	r0, [r7, #4]
 8019d7c:	f7ff fc86 	bl	801968c <dir_sdi>
 8019d80:	4603      	mov	r3, r0
 8019d82:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8019d84:	7dfb      	ldrb	r3, [r7, #23]
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d001      	beq.n	8019d8e <dir_find+0x24>
 8019d8a:	7dfb      	ldrb	r3, [r7, #23]
 8019d8c:	e0a9      	b.n	8019ee2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8019d8e:	23ff      	movs	r3, #255	; 0xff
 8019d90:	753b      	strb	r3, [r7, #20]
 8019d92:	7d3b      	ldrb	r3, [r7, #20]
 8019d94:	757b      	strb	r3, [r7, #21]
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	f04f 32ff 	mov.w	r2, #4294967295
 8019d9c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	69db      	ldr	r3, [r3, #28]
 8019da2:	4619      	mov	r1, r3
 8019da4:	6938      	ldr	r0, [r7, #16]
 8019da6:	f7ff f88f 	bl	8018ec8 <move_window>
 8019daa:	4603      	mov	r3, r0
 8019dac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8019dae:	7dfb      	ldrb	r3, [r7, #23]
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	f040 8090 	bne.w	8019ed6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	6a1b      	ldr	r3, [r3, #32]
 8019dba:	781b      	ldrb	r3, [r3, #0]
 8019dbc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8019dbe:	7dbb      	ldrb	r3, [r7, #22]
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d102      	bne.n	8019dca <dir_find+0x60>
 8019dc4:	2304      	movs	r3, #4
 8019dc6:	75fb      	strb	r3, [r7, #23]
 8019dc8:	e08a      	b.n	8019ee0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	6a1b      	ldr	r3, [r3, #32]
 8019dce:	330b      	adds	r3, #11
 8019dd0:	781b      	ldrb	r3, [r3, #0]
 8019dd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019dd6:	73fb      	strb	r3, [r7, #15]
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	7bfa      	ldrb	r2, [r7, #15]
 8019ddc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8019dde:	7dbb      	ldrb	r3, [r7, #22]
 8019de0:	2be5      	cmp	r3, #229	; 0xe5
 8019de2:	d007      	beq.n	8019df4 <dir_find+0x8a>
 8019de4:	7bfb      	ldrb	r3, [r7, #15]
 8019de6:	f003 0308 	and.w	r3, r3, #8
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d009      	beq.n	8019e02 <dir_find+0x98>
 8019dee:	7bfb      	ldrb	r3, [r7, #15]
 8019df0:	2b0f      	cmp	r3, #15
 8019df2:	d006      	beq.n	8019e02 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8019df4:	23ff      	movs	r3, #255	; 0xff
 8019df6:	757b      	strb	r3, [r7, #21]
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8019dfe:	631a      	str	r2, [r3, #48]	; 0x30
 8019e00:	e05e      	b.n	8019ec0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8019e02:	7bfb      	ldrb	r3, [r7, #15]
 8019e04:	2b0f      	cmp	r3, #15
 8019e06:	d136      	bne.n	8019e76 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8019e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	d154      	bne.n	8019ec0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8019e16:	7dbb      	ldrb	r3, [r7, #22]
 8019e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d00d      	beq.n	8019e3c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	6a1b      	ldr	r3, [r3, #32]
 8019e24:	7b5b      	ldrb	r3, [r3, #13]
 8019e26:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8019e28:	7dbb      	ldrb	r3, [r7, #22]
 8019e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019e2e:	75bb      	strb	r3, [r7, #22]
 8019e30:	7dbb      	ldrb	r3, [r7, #22]
 8019e32:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	695a      	ldr	r2, [r3, #20]
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8019e3c:	7dba      	ldrb	r2, [r7, #22]
 8019e3e:	7d7b      	ldrb	r3, [r7, #21]
 8019e40:	429a      	cmp	r2, r3
 8019e42:	d115      	bne.n	8019e70 <dir_find+0x106>
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	6a1b      	ldr	r3, [r3, #32]
 8019e48:	330d      	adds	r3, #13
 8019e4a:	781b      	ldrb	r3, [r3, #0]
 8019e4c:	7d3a      	ldrb	r2, [r7, #20]
 8019e4e:	429a      	cmp	r2, r3
 8019e50:	d10e      	bne.n	8019e70 <dir_find+0x106>
 8019e52:	693b      	ldr	r3, [r7, #16]
 8019e54:	691a      	ldr	r2, [r3, #16]
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	6a1b      	ldr	r3, [r3, #32]
 8019e5a:	4619      	mov	r1, r3
 8019e5c:	4610      	mov	r0, r2
 8019e5e:	f7ff fdfb 	bl	8019a58 <cmp_lfn>
 8019e62:	4603      	mov	r3, r0
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d003      	beq.n	8019e70 <dir_find+0x106>
 8019e68:	7d7b      	ldrb	r3, [r7, #21]
 8019e6a:	3b01      	subs	r3, #1
 8019e6c:	b2db      	uxtb	r3, r3
 8019e6e:	e000      	b.n	8019e72 <dir_find+0x108>
 8019e70:	23ff      	movs	r3, #255	; 0xff
 8019e72:	757b      	strb	r3, [r7, #21]
 8019e74:	e024      	b.n	8019ec0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8019e76:	7d7b      	ldrb	r3, [r7, #21]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d109      	bne.n	8019e90 <dir_find+0x126>
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	6a1b      	ldr	r3, [r3, #32]
 8019e80:	4618      	mov	r0, r3
 8019e82:	f7ff ff51 	bl	8019d28 <sum_sfn>
 8019e86:	4603      	mov	r3, r0
 8019e88:	461a      	mov	r2, r3
 8019e8a:	7d3b      	ldrb	r3, [r7, #20]
 8019e8c:	4293      	cmp	r3, r2
 8019e8e:	d024      	beq.n	8019eda <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8019e96:	f003 0301 	and.w	r3, r3, #1
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d10a      	bne.n	8019eb4 <dir_find+0x14a>
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	6a18      	ldr	r0, [r3, #32]
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	3324      	adds	r3, #36	; 0x24
 8019ea6:	220b      	movs	r2, #11
 8019ea8:	4619      	mov	r1, r3
 8019eaa:	f7fe fe1b 	bl	8018ae4 <mem_cmp>
 8019eae:	4603      	mov	r3, r0
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d014      	beq.n	8019ede <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8019eb4:	23ff      	movs	r3, #255	; 0xff
 8019eb6:	757b      	strb	r3, [r7, #21]
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	f04f 32ff 	mov.w	r2, #4294967295
 8019ebe:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8019ec0:	2100      	movs	r1, #0
 8019ec2:	6878      	ldr	r0, [r7, #4]
 8019ec4:	f7ff fc6b 	bl	801979e <dir_next>
 8019ec8:	4603      	mov	r3, r0
 8019eca:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8019ecc:	7dfb      	ldrb	r3, [r7, #23]
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	f43f af65 	beq.w	8019d9e <dir_find+0x34>
 8019ed4:	e004      	b.n	8019ee0 <dir_find+0x176>
		if (res != FR_OK) break;
 8019ed6:	bf00      	nop
 8019ed8:	e002      	b.n	8019ee0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8019eda:	bf00      	nop
 8019edc:	e000      	b.n	8019ee0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8019ede:	bf00      	nop

	return res;
 8019ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8019ee2:	4618      	mov	r0, r3
 8019ee4:	3718      	adds	r7, #24
 8019ee6:	46bd      	mov	sp, r7
 8019ee8:	bd80      	pop	{r7, pc}
	...

08019eec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8019eec:	b580      	push	{r7, lr}
 8019eee:	b08c      	sub	sp, #48	; 0x30
 8019ef0:	af00      	add	r7, sp, #0
 8019ef2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	681b      	ldr	r3, [r3, #0]
 8019ef8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8019f00:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d001      	beq.n	8019f0c <dir_register+0x20>
 8019f08:	2306      	movs	r3, #6
 8019f0a:	e0e0      	b.n	801a0ce <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8019f0c:	2300      	movs	r3, #0
 8019f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8019f10:	e002      	b.n	8019f18 <dir_register+0x2c>
 8019f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f14:	3301      	adds	r3, #1
 8019f16:	627b      	str	r3, [r7, #36]	; 0x24
 8019f18:	69fb      	ldr	r3, [r7, #28]
 8019f1a:	691a      	ldr	r2, [r3, #16]
 8019f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f1e:	005b      	lsls	r3, r3, #1
 8019f20:	4413      	add	r3, r2
 8019f22:	881b      	ldrh	r3, [r3, #0]
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d1f4      	bne.n	8019f12 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8019f2e:	f107 030c 	add.w	r3, r7, #12
 8019f32:	220c      	movs	r2, #12
 8019f34:	4618      	mov	r0, r3
 8019f36:	f7fe fd99 	bl	8018a6c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8019f3a:	7dfb      	ldrb	r3, [r7, #23]
 8019f3c:	f003 0301 	and.w	r3, r3, #1
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d032      	beq.n	8019faa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	2240      	movs	r2, #64	; 0x40
 8019f48:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8019f4c:	2301      	movs	r3, #1
 8019f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019f50:	e016      	b.n	8019f80 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8019f58:	69fb      	ldr	r3, [r7, #28]
 8019f5a:	691a      	ldr	r2, [r3, #16]
 8019f5c:	f107 010c 	add.w	r1, r7, #12
 8019f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f62:	f7ff fe51 	bl	8019c08 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8019f66:	6878      	ldr	r0, [r7, #4]
 8019f68:	f7ff feff 	bl	8019d6a <dir_find>
 8019f6c:	4603      	mov	r3, r0
 8019f6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8019f72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	d106      	bne.n	8019f88 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8019f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f7c:	3301      	adds	r3, #1
 8019f7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f82:	2b63      	cmp	r3, #99	; 0x63
 8019f84:	d9e5      	bls.n	8019f52 <dir_register+0x66>
 8019f86:	e000      	b.n	8019f8a <dir_register+0x9e>
			if (res != FR_OK) break;
 8019f88:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8019f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f8c:	2b64      	cmp	r3, #100	; 0x64
 8019f8e:	d101      	bne.n	8019f94 <dir_register+0xa8>
 8019f90:	2307      	movs	r3, #7
 8019f92:	e09c      	b.n	801a0ce <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8019f94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019f98:	2b04      	cmp	r3, #4
 8019f9a:	d002      	beq.n	8019fa2 <dir_register+0xb6>
 8019f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019fa0:	e095      	b.n	801a0ce <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8019fa2:	7dfa      	ldrb	r2, [r7, #23]
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8019faa:	7dfb      	ldrb	r3, [r7, #23]
 8019fac:	f003 0302 	and.w	r3, r3, #2
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d007      	beq.n	8019fc4 <dir_register+0xd8>
 8019fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fb6:	330c      	adds	r3, #12
 8019fb8:	4a47      	ldr	r2, [pc, #284]	; (801a0d8 <dir_register+0x1ec>)
 8019fba:	fba2 2303 	umull	r2, r3, r2, r3
 8019fbe:	089b      	lsrs	r3, r3, #2
 8019fc0:	3301      	adds	r3, #1
 8019fc2:	e000      	b.n	8019fc6 <dir_register+0xda>
 8019fc4:	2301      	movs	r3, #1
 8019fc6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8019fc8:	6a39      	ldr	r1, [r7, #32]
 8019fca:	6878      	ldr	r0, [r7, #4]
 8019fcc:	f7ff fcbd 	bl	801994a <dir_alloc>
 8019fd0:	4603      	mov	r3, r0
 8019fd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8019fd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d148      	bne.n	801a070 <dir_register+0x184>
 8019fde:	6a3b      	ldr	r3, [r7, #32]
 8019fe0:	3b01      	subs	r3, #1
 8019fe2:	623b      	str	r3, [r7, #32]
 8019fe4:	6a3b      	ldr	r3, [r7, #32]
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d042      	beq.n	801a070 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	695a      	ldr	r2, [r3, #20]
 8019fee:	6a3b      	ldr	r3, [r7, #32]
 8019ff0:	015b      	lsls	r3, r3, #5
 8019ff2:	1ad3      	subs	r3, r2, r3
 8019ff4:	4619      	mov	r1, r3
 8019ff6:	6878      	ldr	r0, [r7, #4]
 8019ff8:	f7ff fb48 	bl	801968c <dir_sdi>
 8019ffc:	4603      	mov	r3, r0
 8019ffe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801a002:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a006:	2b00      	cmp	r3, #0
 801a008:	d132      	bne.n	801a070 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	3324      	adds	r3, #36	; 0x24
 801a00e:	4618      	mov	r0, r3
 801a010:	f7ff fe8a 	bl	8019d28 <sum_sfn>
 801a014:	4603      	mov	r3, r0
 801a016:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	69db      	ldr	r3, [r3, #28]
 801a01c:	4619      	mov	r1, r3
 801a01e:	69f8      	ldr	r0, [r7, #28]
 801a020:	f7fe ff52 	bl	8018ec8 <move_window>
 801a024:	4603      	mov	r3, r0
 801a026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801a02a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a02e:	2b00      	cmp	r3, #0
 801a030:	d11d      	bne.n	801a06e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801a032:	69fb      	ldr	r3, [r7, #28]
 801a034:	6918      	ldr	r0, [r3, #16]
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	6a19      	ldr	r1, [r3, #32]
 801a03a:	6a3b      	ldr	r3, [r7, #32]
 801a03c:	b2da      	uxtb	r2, r3
 801a03e:	7efb      	ldrb	r3, [r7, #27]
 801a040:	f7ff fd7a 	bl	8019b38 <put_lfn>
				fs->wflag = 1;
 801a044:	69fb      	ldr	r3, [r7, #28]
 801a046:	2201      	movs	r2, #1
 801a048:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801a04a:	2100      	movs	r1, #0
 801a04c:	6878      	ldr	r0, [r7, #4]
 801a04e:	f7ff fba6 	bl	801979e <dir_next>
 801a052:	4603      	mov	r3, r0
 801a054:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 801a058:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a05c:	2b00      	cmp	r3, #0
 801a05e:	d107      	bne.n	801a070 <dir_register+0x184>
 801a060:	6a3b      	ldr	r3, [r7, #32]
 801a062:	3b01      	subs	r3, #1
 801a064:	623b      	str	r3, [r7, #32]
 801a066:	6a3b      	ldr	r3, [r7, #32]
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d1d5      	bne.n	801a018 <dir_register+0x12c>
 801a06c:	e000      	b.n	801a070 <dir_register+0x184>
				if (res != FR_OK) break;
 801a06e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801a070:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a074:	2b00      	cmp	r3, #0
 801a076:	d128      	bne.n	801a0ca <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	69db      	ldr	r3, [r3, #28]
 801a07c:	4619      	mov	r1, r3
 801a07e:	69f8      	ldr	r0, [r7, #28]
 801a080:	f7fe ff22 	bl	8018ec8 <move_window>
 801a084:	4603      	mov	r3, r0
 801a086:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801a08a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d11b      	bne.n	801a0ca <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	6a1b      	ldr	r3, [r3, #32]
 801a096:	2220      	movs	r2, #32
 801a098:	2100      	movs	r1, #0
 801a09a:	4618      	mov	r0, r3
 801a09c:	f7fe fd07 	bl	8018aae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	6a18      	ldr	r0, [r3, #32]
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	3324      	adds	r3, #36	; 0x24
 801a0a8:	220b      	movs	r2, #11
 801a0aa:	4619      	mov	r1, r3
 801a0ac:	f7fe fcde 	bl	8018a6c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	6a1b      	ldr	r3, [r3, #32]
 801a0ba:	330c      	adds	r3, #12
 801a0bc:	f002 0218 	and.w	r2, r2, #24
 801a0c0:	b2d2      	uxtb	r2, r2
 801a0c2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801a0c4:	69fb      	ldr	r3, [r7, #28]
 801a0c6:	2201      	movs	r2, #1
 801a0c8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801a0ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801a0ce:	4618      	mov	r0, r3
 801a0d0:	3730      	adds	r7, #48	; 0x30
 801a0d2:	46bd      	mov	sp, r7
 801a0d4:	bd80      	pop	{r7, pc}
 801a0d6:	bf00      	nop
 801a0d8:	4ec4ec4f 	.word	0x4ec4ec4f

0801a0dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801a0dc:	b580      	push	{r7, lr}
 801a0de:	b08a      	sub	sp, #40	; 0x28
 801a0e0:	af00      	add	r7, sp, #0
 801a0e2:	6078      	str	r0, [r7, #4]
 801a0e4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801a0e6:	683b      	ldr	r3, [r7, #0]
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	613b      	str	r3, [r7, #16]
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	691b      	ldr	r3, [r3, #16]
 801a0f2:	60fb      	str	r3, [r7, #12]
 801a0f4:	2300      	movs	r3, #0
 801a0f6:	617b      	str	r3, [r7, #20]
 801a0f8:	697b      	ldr	r3, [r7, #20]
 801a0fa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801a0fc:	69bb      	ldr	r3, [r7, #24]
 801a0fe:	1c5a      	adds	r2, r3, #1
 801a100:	61ba      	str	r2, [r7, #24]
 801a102:	693a      	ldr	r2, [r7, #16]
 801a104:	4413      	add	r3, r2
 801a106:	781b      	ldrb	r3, [r3, #0]
 801a108:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801a10a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a10c:	2b1f      	cmp	r3, #31
 801a10e:	d940      	bls.n	801a192 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801a110:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a112:	2b2f      	cmp	r3, #47	; 0x2f
 801a114:	d006      	beq.n	801a124 <create_name+0x48>
 801a116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a118:	2b5c      	cmp	r3, #92	; 0x5c
 801a11a:	d110      	bne.n	801a13e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801a11c:	e002      	b.n	801a124 <create_name+0x48>
 801a11e:	69bb      	ldr	r3, [r7, #24]
 801a120:	3301      	adds	r3, #1
 801a122:	61bb      	str	r3, [r7, #24]
 801a124:	693a      	ldr	r2, [r7, #16]
 801a126:	69bb      	ldr	r3, [r7, #24]
 801a128:	4413      	add	r3, r2
 801a12a:	781b      	ldrb	r3, [r3, #0]
 801a12c:	2b2f      	cmp	r3, #47	; 0x2f
 801a12e:	d0f6      	beq.n	801a11e <create_name+0x42>
 801a130:	693a      	ldr	r2, [r7, #16]
 801a132:	69bb      	ldr	r3, [r7, #24]
 801a134:	4413      	add	r3, r2
 801a136:	781b      	ldrb	r3, [r3, #0]
 801a138:	2b5c      	cmp	r3, #92	; 0x5c
 801a13a:	d0f0      	beq.n	801a11e <create_name+0x42>
			break;
 801a13c:	e02a      	b.n	801a194 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801a13e:	697b      	ldr	r3, [r7, #20]
 801a140:	2bfe      	cmp	r3, #254	; 0xfe
 801a142:	d901      	bls.n	801a148 <create_name+0x6c>
 801a144:	2306      	movs	r3, #6
 801a146:	e177      	b.n	801a438 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 801a148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a14a:	b2db      	uxtb	r3, r3
 801a14c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801a14e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a150:	2101      	movs	r1, #1
 801a152:	4618      	mov	r0, r3
 801a154:	f001 fa7e 	bl	801b654 <ff_convert>
 801a158:	4603      	mov	r3, r0
 801a15a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801a15c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a15e:	2b00      	cmp	r3, #0
 801a160:	d101      	bne.n	801a166 <create_name+0x8a>
 801a162:	2306      	movs	r3, #6
 801a164:	e168      	b.n	801a438 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801a166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a168:	2b7f      	cmp	r3, #127	; 0x7f
 801a16a:	d809      	bhi.n	801a180 <create_name+0xa4>
 801a16c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a16e:	4619      	mov	r1, r3
 801a170:	48b3      	ldr	r0, [pc, #716]	; (801a440 <create_name+0x364>)
 801a172:	f7fe fcde 	bl	8018b32 <chk_chr>
 801a176:	4603      	mov	r3, r0
 801a178:	2b00      	cmp	r3, #0
 801a17a:	d001      	beq.n	801a180 <create_name+0xa4>
 801a17c:	2306      	movs	r3, #6
 801a17e:	e15b      	b.n	801a438 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 801a180:	697b      	ldr	r3, [r7, #20]
 801a182:	1c5a      	adds	r2, r3, #1
 801a184:	617a      	str	r2, [r7, #20]
 801a186:	005b      	lsls	r3, r3, #1
 801a188:	68fa      	ldr	r2, [r7, #12]
 801a18a:	4413      	add	r3, r2
 801a18c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a18e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801a190:	e7b4      	b.n	801a0fc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801a192:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801a194:	693a      	ldr	r2, [r7, #16]
 801a196:	69bb      	ldr	r3, [r7, #24]
 801a198:	441a      	add	r2, r3
 801a19a:	683b      	ldr	r3, [r7, #0]
 801a19c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801a19e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a1a0:	2b1f      	cmp	r3, #31
 801a1a2:	d801      	bhi.n	801a1a8 <create_name+0xcc>
 801a1a4:	2304      	movs	r3, #4
 801a1a6:	e000      	b.n	801a1aa <create_name+0xce>
 801a1a8:	2300      	movs	r3, #0
 801a1aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801a1ae:	e011      	b.n	801a1d4 <create_name+0xf8>
		w = lfn[di - 1];
 801a1b0:	697a      	ldr	r2, [r7, #20]
 801a1b2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801a1b6:	4413      	add	r3, r2
 801a1b8:	005b      	lsls	r3, r3, #1
 801a1ba:	68fa      	ldr	r2, [r7, #12]
 801a1bc:	4413      	add	r3, r2
 801a1be:	881b      	ldrh	r3, [r3, #0]
 801a1c0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801a1c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a1c4:	2b20      	cmp	r3, #32
 801a1c6:	d002      	beq.n	801a1ce <create_name+0xf2>
 801a1c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a1ca:	2b2e      	cmp	r3, #46	; 0x2e
 801a1cc:	d106      	bne.n	801a1dc <create_name+0x100>
		di--;
 801a1ce:	697b      	ldr	r3, [r7, #20]
 801a1d0:	3b01      	subs	r3, #1
 801a1d2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801a1d4:	697b      	ldr	r3, [r7, #20]
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d1ea      	bne.n	801a1b0 <create_name+0xd4>
 801a1da:	e000      	b.n	801a1de <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801a1dc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801a1de:	697b      	ldr	r3, [r7, #20]
 801a1e0:	005b      	lsls	r3, r3, #1
 801a1e2:	68fa      	ldr	r2, [r7, #12]
 801a1e4:	4413      	add	r3, r2
 801a1e6:	2200      	movs	r2, #0
 801a1e8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801a1ea:	697b      	ldr	r3, [r7, #20]
 801a1ec:	2b00      	cmp	r3, #0
 801a1ee:	d101      	bne.n	801a1f4 <create_name+0x118>
 801a1f0:	2306      	movs	r3, #6
 801a1f2:	e121      	b.n	801a438 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	3324      	adds	r3, #36	; 0x24
 801a1f8:	220b      	movs	r2, #11
 801a1fa:	2120      	movs	r1, #32
 801a1fc:	4618      	mov	r0, r3
 801a1fe:	f7fe fc56 	bl	8018aae <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801a202:	2300      	movs	r3, #0
 801a204:	61bb      	str	r3, [r7, #24]
 801a206:	e002      	b.n	801a20e <create_name+0x132>
 801a208:	69bb      	ldr	r3, [r7, #24]
 801a20a:	3301      	adds	r3, #1
 801a20c:	61bb      	str	r3, [r7, #24]
 801a20e:	69bb      	ldr	r3, [r7, #24]
 801a210:	005b      	lsls	r3, r3, #1
 801a212:	68fa      	ldr	r2, [r7, #12]
 801a214:	4413      	add	r3, r2
 801a216:	881b      	ldrh	r3, [r3, #0]
 801a218:	2b20      	cmp	r3, #32
 801a21a:	d0f5      	beq.n	801a208 <create_name+0x12c>
 801a21c:	69bb      	ldr	r3, [r7, #24]
 801a21e:	005b      	lsls	r3, r3, #1
 801a220:	68fa      	ldr	r2, [r7, #12]
 801a222:	4413      	add	r3, r2
 801a224:	881b      	ldrh	r3, [r3, #0]
 801a226:	2b2e      	cmp	r3, #46	; 0x2e
 801a228:	d0ee      	beq.n	801a208 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801a22a:	69bb      	ldr	r3, [r7, #24]
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	d009      	beq.n	801a244 <create_name+0x168>
 801a230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a234:	f043 0303 	orr.w	r3, r3, #3
 801a238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801a23c:	e002      	b.n	801a244 <create_name+0x168>
 801a23e:	697b      	ldr	r3, [r7, #20]
 801a240:	3b01      	subs	r3, #1
 801a242:	617b      	str	r3, [r7, #20]
 801a244:	697b      	ldr	r3, [r7, #20]
 801a246:	2b00      	cmp	r3, #0
 801a248:	d009      	beq.n	801a25e <create_name+0x182>
 801a24a:	697a      	ldr	r2, [r7, #20]
 801a24c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801a250:	4413      	add	r3, r2
 801a252:	005b      	lsls	r3, r3, #1
 801a254:	68fa      	ldr	r2, [r7, #12]
 801a256:	4413      	add	r3, r2
 801a258:	881b      	ldrh	r3, [r3, #0]
 801a25a:	2b2e      	cmp	r3, #46	; 0x2e
 801a25c:	d1ef      	bne.n	801a23e <create_name+0x162>

	i = b = 0; ni = 8;
 801a25e:	2300      	movs	r3, #0
 801a260:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a264:	2300      	movs	r3, #0
 801a266:	623b      	str	r3, [r7, #32]
 801a268:	2308      	movs	r3, #8
 801a26a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801a26c:	69bb      	ldr	r3, [r7, #24]
 801a26e:	1c5a      	adds	r2, r3, #1
 801a270:	61ba      	str	r2, [r7, #24]
 801a272:	005b      	lsls	r3, r3, #1
 801a274:	68fa      	ldr	r2, [r7, #12]
 801a276:	4413      	add	r3, r2
 801a278:	881b      	ldrh	r3, [r3, #0]
 801a27a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801a27c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a27e:	2b00      	cmp	r3, #0
 801a280:	f000 8090 	beq.w	801a3a4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801a284:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a286:	2b20      	cmp	r3, #32
 801a288:	d006      	beq.n	801a298 <create_name+0x1bc>
 801a28a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a28c:	2b2e      	cmp	r3, #46	; 0x2e
 801a28e:	d10a      	bne.n	801a2a6 <create_name+0x1ca>
 801a290:	69ba      	ldr	r2, [r7, #24]
 801a292:	697b      	ldr	r3, [r7, #20]
 801a294:	429a      	cmp	r2, r3
 801a296:	d006      	beq.n	801a2a6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801a298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a29c:	f043 0303 	orr.w	r3, r3, #3
 801a2a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a2a4:	e07d      	b.n	801a3a2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801a2a6:	6a3a      	ldr	r2, [r7, #32]
 801a2a8:	69fb      	ldr	r3, [r7, #28]
 801a2aa:	429a      	cmp	r2, r3
 801a2ac:	d203      	bcs.n	801a2b6 <create_name+0x1da>
 801a2ae:	69ba      	ldr	r2, [r7, #24]
 801a2b0:	697b      	ldr	r3, [r7, #20]
 801a2b2:	429a      	cmp	r2, r3
 801a2b4:	d123      	bne.n	801a2fe <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801a2b6:	69fb      	ldr	r3, [r7, #28]
 801a2b8:	2b0b      	cmp	r3, #11
 801a2ba:	d106      	bne.n	801a2ca <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801a2bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2c0:	f043 0303 	orr.w	r3, r3, #3
 801a2c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a2c8:	e06f      	b.n	801a3aa <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801a2ca:	69ba      	ldr	r2, [r7, #24]
 801a2cc:	697b      	ldr	r3, [r7, #20]
 801a2ce:	429a      	cmp	r2, r3
 801a2d0:	d005      	beq.n	801a2de <create_name+0x202>
 801a2d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2d6:	f043 0303 	orr.w	r3, r3, #3
 801a2da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801a2de:	69ba      	ldr	r2, [r7, #24]
 801a2e0:	697b      	ldr	r3, [r7, #20]
 801a2e2:	429a      	cmp	r2, r3
 801a2e4:	d860      	bhi.n	801a3a8 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801a2e6:	697b      	ldr	r3, [r7, #20]
 801a2e8:	61bb      	str	r3, [r7, #24]
 801a2ea:	2308      	movs	r3, #8
 801a2ec:	623b      	str	r3, [r7, #32]
 801a2ee:	230b      	movs	r3, #11
 801a2f0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801a2f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a2f6:	009b      	lsls	r3, r3, #2
 801a2f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a2fc:	e051      	b.n	801a3a2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801a2fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a300:	2b7f      	cmp	r3, #127	; 0x7f
 801a302:	d914      	bls.n	801a32e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801a304:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a306:	2100      	movs	r1, #0
 801a308:	4618      	mov	r0, r3
 801a30a:	f001 f9a3 	bl	801b654 <ff_convert>
 801a30e:	4603      	mov	r3, r0
 801a310:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801a312:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a314:	2b00      	cmp	r3, #0
 801a316:	d004      	beq.n	801a322 <create_name+0x246>
 801a318:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a31a:	3b80      	subs	r3, #128	; 0x80
 801a31c:	4a49      	ldr	r2, [pc, #292]	; (801a444 <create_name+0x368>)
 801a31e:	5cd3      	ldrb	r3, [r2, r3]
 801a320:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801a322:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a326:	f043 0302 	orr.w	r3, r3, #2
 801a32a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801a32e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a330:	2b00      	cmp	r3, #0
 801a332:	d007      	beq.n	801a344 <create_name+0x268>
 801a334:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a336:	4619      	mov	r1, r3
 801a338:	4843      	ldr	r0, [pc, #268]	; (801a448 <create_name+0x36c>)
 801a33a:	f7fe fbfa 	bl	8018b32 <chk_chr>
 801a33e:	4603      	mov	r3, r0
 801a340:	2b00      	cmp	r3, #0
 801a342:	d008      	beq.n	801a356 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801a344:	235f      	movs	r3, #95	; 0x5f
 801a346:	84bb      	strh	r3, [r7, #36]	; 0x24
 801a348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a34c:	f043 0303 	orr.w	r3, r3, #3
 801a350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a354:	e01b      	b.n	801a38e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801a356:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a358:	2b40      	cmp	r3, #64	; 0x40
 801a35a:	d909      	bls.n	801a370 <create_name+0x294>
 801a35c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a35e:	2b5a      	cmp	r3, #90	; 0x5a
 801a360:	d806      	bhi.n	801a370 <create_name+0x294>
					b |= 2;
 801a362:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a366:	f043 0302 	orr.w	r3, r3, #2
 801a36a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a36e:	e00e      	b.n	801a38e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801a370:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a372:	2b60      	cmp	r3, #96	; 0x60
 801a374:	d90b      	bls.n	801a38e <create_name+0x2b2>
 801a376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a378:	2b7a      	cmp	r3, #122	; 0x7a
 801a37a:	d808      	bhi.n	801a38e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801a37c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a380:	f043 0301 	orr.w	r3, r3, #1
 801a384:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a388:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a38a:	3b20      	subs	r3, #32
 801a38c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801a38e:	6a3b      	ldr	r3, [r7, #32]
 801a390:	1c5a      	adds	r2, r3, #1
 801a392:	623a      	str	r2, [r7, #32]
 801a394:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a396:	b2d1      	uxtb	r1, r2
 801a398:	687a      	ldr	r2, [r7, #4]
 801a39a:	4413      	add	r3, r2
 801a39c:	460a      	mov	r2, r1
 801a39e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801a3a2:	e763      	b.n	801a26c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801a3a4:	bf00      	nop
 801a3a6:	e000      	b.n	801a3aa <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 801a3a8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a3b0:	2be5      	cmp	r3, #229	; 0xe5
 801a3b2:	d103      	bne.n	801a3bc <create_name+0x2e0>
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	2205      	movs	r2, #5
 801a3b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 801a3bc:	69fb      	ldr	r3, [r7, #28]
 801a3be:	2b08      	cmp	r3, #8
 801a3c0:	d104      	bne.n	801a3cc <create_name+0x2f0>
 801a3c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a3c6:	009b      	lsls	r3, r3, #2
 801a3c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801a3cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a3d0:	f003 030c 	and.w	r3, r3, #12
 801a3d4:	2b0c      	cmp	r3, #12
 801a3d6:	d005      	beq.n	801a3e4 <create_name+0x308>
 801a3d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a3dc:	f003 0303 	and.w	r3, r3, #3
 801a3e0:	2b03      	cmp	r3, #3
 801a3e2:	d105      	bne.n	801a3f0 <create_name+0x314>
 801a3e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a3e8:	f043 0302 	orr.w	r3, r3, #2
 801a3ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801a3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a3f4:	f003 0302 	and.w	r3, r3, #2
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d117      	bne.n	801a42c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801a3fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a400:	f003 0303 	and.w	r3, r3, #3
 801a404:	2b01      	cmp	r3, #1
 801a406:	d105      	bne.n	801a414 <create_name+0x338>
 801a408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a40c:	f043 0310 	orr.w	r3, r3, #16
 801a410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801a414:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a418:	f003 030c 	and.w	r3, r3, #12
 801a41c:	2b04      	cmp	r3, #4
 801a41e:	d105      	bne.n	801a42c <create_name+0x350>
 801a420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a424:	f043 0308 	orr.w	r3, r3, #8
 801a428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a432:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801a436:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801a438:	4618      	mov	r0, r3
 801a43a:	3728      	adds	r7, #40	; 0x28
 801a43c:	46bd      	mov	sp, r7
 801a43e:	bd80      	pop	{r7, pc}
 801a440:	08022370 	.word	0x08022370
 801a444:	08022430 	.word	0x08022430
 801a448:	0802237c 	.word	0x0802237c

0801a44c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801a44c:	b580      	push	{r7, lr}
 801a44e:	b086      	sub	sp, #24
 801a450:	af00      	add	r7, sp, #0
 801a452:	6078      	str	r0, [r7, #4]
 801a454:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801a45a:	693b      	ldr	r3, [r7, #16]
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801a460:	e002      	b.n	801a468 <follow_path+0x1c>
 801a462:	683b      	ldr	r3, [r7, #0]
 801a464:	3301      	adds	r3, #1
 801a466:	603b      	str	r3, [r7, #0]
 801a468:	683b      	ldr	r3, [r7, #0]
 801a46a:	781b      	ldrb	r3, [r3, #0]
 801a46c:	2b2f      	cmp	r3, #47	; 0x2f
 801a46e:	d0f8      	beq.n	801a462 <follow_path+0x16>
 801a470:	683b      	ldr	r3, [r7, #0]
 801a472:	781b      	ldrb	r3, [r3, #0]
 801a474:	2b5c      	cmp	r3, #92	; 0x5c
 801a476:	d0f4      	beq.n	801a462 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801a478:	693b      	ldr	r3, [r7, #16]
 801a47a:	2200      	movs	r2, #0
 801a47c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801a47e:	683b      	ldr	r3, [r7, #0]
 801a480:	781b      	ldrb	r3, [r3, #0]
 801a482:	2b1f      	cmp	r3, #31
 801a484:	d80a      	bhi.n	801a49c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	2280      	movs	r2, #128	; 0x80
 801a48a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801a48e:	2100      	movs	r1, #0
 801a490:	6878      	ldr	r0, [r7, #4]
 801a492:	f7ff f8fb 	bl	801968c <dir_sdi>
 801a496:	4603      	mov	r3, r0
 801a498:	75fb      	strb	r3, [r7, #23]
 801a49a:	e048      	b.n	801a52e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801a49c:	463b      	mov	r3, r7
 801a49e:	4619      	mov	r1, r3
 801a4a0:	6878      	ldr	r0, [r7, #4]
 801a4a2:	f7ff fe1b 	bl	801a0dc <create_name>
 801a4a6:	4603      	mov	r3, r0
 801a4a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801a4aa:	7dfb      	ldrb	r3, [r7, #23]
 801a4ac:	2b00      	cmp	r3, #0
 801a4ae:	d139      	bne.n	801a524 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801a4b0:	6878      	ldr	r0, [r7, #4]
 801a4b2:	f7ff fc5a 	bl	8019d6a <dir_find>
 801a4b6:	4603      	mov	r3, r0
 801a4b8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801a4c0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801a4c2:	7dfb      	ldrb	r3, [r7, #23]
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d00a      	beq.n	801a4de <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801a4c8:	7dfb      	ldrb	r3, [r7, #23]
 801a4ca:	2b04      	cmp	r3, #4
 801a4cc:	d12c      	bne.n	801a528 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801a4ce:	7afb      	ldrb	r3, [r7, #11]
 801a4d0:	f003 0304 	and.w	r3, r3, #4
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d127      	bne.n	801a528 <follow_path+0xdc>
 801a4d8:	2305      	movs	r3, #5
 801a4da:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801a4dc:	e024      	b.n	801a528 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801a4de:	7afb      	ldrb	r3, [r7, #11]
 801a4e0:	f003 0304 	and.w	r3, r3, #4
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d121      	bne.n	801a52c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801a4e8:	693b      	ldr	r3, [r7, #16]
 801a4ea:	799b      	ldrb	r3, [r3, #6]
 801a4ec:	f003 0310 	and.w	r3, r3, #16
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	d102      	bne.n	801a4fa <follow_path+0xae>
				res = FR_NO_PATH; break;
 801a4f4:	2305      	movs	r3, #5
 801a4f6:	75fb      	strb	r3, [r7, #23]
 801a4f8:	e019      	b.n	801a52e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801a4fa:	68fb      	ldr	r3, [r7, #12]
 801a4fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	695b      	ldr	r3, [r3, #20]
 801a504:	68fa      	ldr	r2, [r7, #12]
 801a506:	8992      	ldrh	r2, [r2, #12]
 801a508:	fbb3 f0f2 	udiv	r0, r3, r2
 801a50c:	fb02 f200 	mul.w	r2, r2, r0
 801a510:	1a9b      	subs	r3, r3, r2
 801a512:	440b      	add	r3, r1
 801a514:	4619      	mov	r1, r3
 801a516:	68f8      	ldr	r0, [r7, #12]
 801a518:	f7ff fa5e 	bl	80199d8 <ld_clust>
 801a51c:	4602      	mov	r2, r0
 801a51e:	693b      	ldr	r3, [r7, #16]
 801a520:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801a522:	e7bb      	b.n	801a49c <follow_path+0x50>
			if (res != FR_OK) break;
 801a524:	bf00      	nop
 801a526:	e002      	b.n	801a52e <follow_path+0xe2>
				break;
 801a528:	bf00      	nop
 801a52a:	e000      	b.n	801a52e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801a52c:	bf00      	nop
			}
		}
	}

	return res;
 801a52e:	7dfb      	ldrb	r3, [r7, #23]
}
 801a530:	4618      	mov	r0, r3
 801a532:	3718      	adds	r7, #24
 801a534:	46bd      	mov	sp, r7
 801a536:	bd80      	pop	{r7, pc}

0801a538 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801a538:	b480      	push	{r7}
 801a53a:	b087      	sub	sp, #28
 801a53c:	af00      	add	r7, sp, #0
 801a53e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801a540:	f04f 33ff 	mov.w	r3, #4294967295
 801a544:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	681b      	ldr	r3, [r3, #0]
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d031      	beq.n	801a5b2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	681b      	ldr	r3, [r3, #0]
 801a552:	617b      	str	r3, [r7, #20]
 801a554:	e002      	b.n	801a55c <get_ldnumber+0x24>
 801a556:	697b      	ldr	r3, [r7, #20]
 801a558:	3301      	adds	r3, #1
 801a55a:	617b      	str	r3, [r7, #20]
 801a55c:	697b      	ldr	r3, [r7, #20]
 801a55e:	781b      	ldrb	r3, [r3, #0]
 801a560:	2b1f      	cmp	r3, #31
 801a562:	d903      	bls.n	801a56c <get_ldnumber+0x34>
 801a564:	697b      	ldr	r3, [r7, #20]
 801a566:	781b      	ldrb	r3, [r3, #0]
 801a568:	2b3a      	cmp	r3, #58	; 0x3a
 801a56a:	d1f4      	bne.n	801a556 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801a56c:	697b      	ldr	r3, [r7, #20]
 801a56e:	781b      	ldrb	r3, [r3, #0]
 801a570:	2b3a      	cmp	r3, #58	; 0x3a
 801a572:	d11c      	bne.n	801a5ae <get_ldnumber+0x76>
			tp = *path;
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801a57a:	68fb      	ldr	r3, [r7, #12]
 801a57c:	1c5a      	adds	r2, r3, #1
 801a57e:	60fa      	str	r2, [r7, #12]
 801a580:	781b      	ldrb	r3, [r3, #0]
 801a582:	3b30      	subs	r3, #48	; 0x30
 801a584:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801a586:	68bb      	ldr	r3, [r7, #8]
 801a588:	2b09      	cmp	r3, #9
 801a58a:	d80e      	bhi.n	801a5aa <get_ldnumber+0x72>
 801a58c:	68fa      	ldr	r2, [r7, #12]
 801a58e:	697b      	ldr	r3, [r7, #20]
 801a590:	429a      	cmp	r2, r3
 801a592:	d10a      	bne.n	801a5aa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801a594:	68bb      	ldr	r3, [r7, #8]
 801a596:	2b00      	cmp	r3, #0
 801a598:	d107      	bne.n	801a5aa <get_ldnumber+0x72>
					vol = (int)i;
 801a59a:	68bb      	ldr	r3, [r7, #8]
 801a59c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801a59e:	697b      	ldr	r3, [r7, #20]
 801a5a0:	3301      	adds	r3, #1
 801a5a2:	617b      	str	r3, [r7, #20]
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	697a      	ldr	r2, [r7, #20]
 801a5a8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801a5aa:	693b      	ldr	r3, [r7, #16]
 801a5ac:	e002      	b.n	801a5b4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801a5ae:	2300      	movs	r3, #0
 801a5b0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801a5b2:	693b      	ldr	r3, [r7, #16]
}
 801a5b4:	4618      	mov	r0, r3
 801a5b6:	371c      	adds	r7, #28
 801a5b8:	46bd      	mov	sp, r7
 801a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5be:	4770      	bx	lr

0801a5c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801a5c0:	b580      	push	{r7, lr}
 801a5c2:	b082      	sub	sp, #8
 801a5c4:	af00      	add	r7, sp, #0
 801a5c6:	6078      	str	r0, [r7, #4]
 801a5c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	2200      	movs	r2, #0
 801a5ce:	70da      	strb	r2, [r3, #3]
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	f04f 32ff 	mov.w	r2, #4294967295
 801a5d6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801a5d8:	6839      	ldr	r1, [r7, #0]
 801a5da:	6878      	ldr	r0, [r7, #4]
 801a5dc:	f7fe fc74 	bl	8018ec8 <move_window>
 801a5e0:	4603      	mov	r3, r0
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d001      	beq.n	801a5ea <check_fs+0x2a>
 801a5e6:	2304      	movs	r3, #4
 801a5e8:	e038      	b.n	801a65c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	3338      	adds	r3, #56	; 0x38
 801a5ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801a5f2:	4618      	mov	r0, r3
 801a5f4:	f7fe f9b8 	bl	8018968 <ld_word>
 801a5f8:	4603      	mov	r3, r0
 801a5fa:	461a      	mov	r2, r3
 801a5fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801a600:	429a      	cmp	r2, r3
 801a602:	d001      	beq.n	801a608 <check_fs+0x48>
 801a604:	2303      	movs	r3, #3
 801a606:	e029      	b.n	801a65c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a60e:	2be9      	cmp	r3, #233	; 0xe9
 801a610:	d009      	beq.n	801a626 <check_fs+0x66>
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a618:	2beb      	cmp	r3, #235	; 0xeb
 801a61a:	d11e      	bne.n	801a65a <check_fs+0x9a>
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801a622:	2b90      	cmp	r3, #144	; 0x90
 801a624:	d119      	bne.n	801a65a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	3338      	adds	r3, #56	; 0x38
 801a62a:	3336      	adds	r3, #54	; 0x36
 801a62c:	4618      	mov	r0, r3
 801a62e:	f7fe f9b3 	bl	8018998 <ld_dword>
 801a632:	4603      	mov	r3, r0
 801a634:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801a638:	4a0a      	ldr	r2, [pc, #40]	; (801a664 <check_fs+0xa4>)
 801a63a:	4293      	cmp	r3, r2
 801a63c:	d101      	bne.n	801a642 <check_fs+0x82>
 801a63e:	2300      	movs	r3, #0
 801a640:	e00c      	b.n	801a65c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	3338      	adds	r3, #56	; 0x38
 801a646:	3352      	adds	r3, #82	; 0x52
 801a648:	4618      	mov	r0, r3
 801a64a:	f7fe f9a5 	bl	8018998 <ld_dword>
 801a64e:	4603      	mov	r3, r0
 801a650:	4a05      	ldr	r2, [pc, #20]	; (801a668 <check_fs+0xa8>)
 801a652:	4293      	cmp	r3, r2
 801a654:	d101      	bne.n	801a65a <check_fs+0x9a>
 801a656:	2300      	movs	r3, #0
 801a658:	e000      	b.n	801a65c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801a65a:	2302      	movs	r3, #2
}
 801a65c:	4618      	mov	r0, r3
 801a65e:	3708      	adds	r7, #8
 801a660:	46bd      	mov	sp, r7
 801a662:	bd80      	pop	{r7, pc}
 801a664:	00544146 	.word	0x00544146
 801a668:	33544146 	.word	0x33544146

0801a66c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801a66c:	b580      	push	{r7, lr}
 801a66e:	b096      	sub	sp, #88	; 0x58
 801a670:	af00      	add	r7, sp, #0
 801a672:	60f8      	str	r0, [r7, #12]
 801a674:	60b9      	str	r1, [r7, #8]
 801a676:	4613      	mov	r3, r2
 801a678:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801a67a:	68bb      	ldr	r3, [r7, #8]
 801a67c:	2200      	movs	r2, #0
 801a67e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801a680:	68f8      	ldr	r0, [r7, #12]
 801a682:	f7ff ff59 	bl	801a538 <get_ldnumber>
 801a686:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801a688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	da01      	bge.n	801a692 <find_volume+0x26>
 801a68e:	230b      	movs	r3, #11
 801a690:	e265      	b.n	801ab5e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801a692:	4ab0      	ldr	r2, [pc, #704]	; (801a954 <find_volume+0x2e8>)
 801a694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a69a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801a69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	d101      	bne.n	801a6a6 <find_volume+0x3a>
 801a6a2:	230c      	movs	r3, #12
 801a6a4:	e25b      	b.n	801ab5e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801a6a6:	68bb      	ldr	r3, [r7, #8]
 801a6a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a6aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801a6ac:	79fb      	ldrb	r3, [r7, #7]
 801a6ae:	f023 0301 	bic.w	r3, r3, #1
 801a6b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801a6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6b6:	781b      	ldrb	r3, [r3, #0]
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d01a      	beq.n	801a6f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801a6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6be:	785b      	ldrb	r3, [r3, #1]
 801a6c0:	4618      	mov	r0, r3
 801a6c2:	f7fe f8b3 	bl	801882c <disk_status>
 801a6c6:	4603      	mov	r3, r0
 801a6c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801a6cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801a6d0:	f003 0301 	and.w	r3, r3, #1
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	d10c      	bne.n	801a6f2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801a6d8:	79fb      	ldrb	r3, [r7, #7]
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	d007      	beq.n	801a6ee <find_volume+0x82>
 801a6de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801a6e2:	f003 0304 	and.w	r3, r3, #4
 801a6e6:	2b00      	cmp	r3, #0
 801a6e8:	d001      	beq.n	801a6ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801a6ea:	230a      	movs	r3, #10
 801a6ec:	e237      	b.n	801ab5e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801a6ee:	2300      	movs	r3, #0
 801a6f0:	e235      	b.n	801ab5e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801a6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6f4:	2200      	movs	r2, #0
 801a6f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801a6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a6fa:	b2da      	uxtb	r2, r3
 801a6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801a700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a702:	785b      	ldrb	r3, [r3, #1]
 801a704:	4618      	mov	r0, r3
 801a706:	f7fe f8ab 	bl	8018860 <disk_initialize>
 801a70a:	4603      	mov	r3, r0
 801a70c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801a710:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801a714:	f003 0301 	and.w	r3, r3, #1
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d001      	beq.n	801a720 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801a71c:	2303      	movs	r3, #3
 801a71e:	e21e      	b.n	801ab5e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801a720:	79fb      	ldrb	r3, [r7, #7]
 801a722:	2b00      	cmp	r3, #0
 801a724:	d007      	beq.n	801a736 <find_volume+0xca>
 801a726:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801a72a:	f003 0304 	and.w	r3, r3, #4
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d001      	beq.n	801a736 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801a732:	230a      	movs	r3, #10
 801a734:	e213      	b.n	801ab5e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801a736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a738:	7858      	ldrb	r0, [r3, #1]
 801a73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a73c:	330c      	adds	r3, #12
 801a73e:	461a      	mov	r2, r3
 801a740:	2102      	movs	r1, #2
 801a742:	f7fe f8f3 	bl	801892c <disk_ioctl>
 801a746:	4603      	mov	r3, r0
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d001      	beq.n	801a750 <find_volume+0xe4>
 801a74c:	2301      	movs	r3, #1
 801a74e:	e206      	b.n	801ab5e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801a750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a752:	899b      	ldrh	r3, [r3, #12]
 801a754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a758:	d80d      	bhi.n	801a776 <find_volume+0x10a>
 801a75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a75c:	899b      	ldrh	r3, [r3, #12]
 801a75e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a762:	d308      	bcc.n	801a776 <find_volume+0x10a>
 801a764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a766:	899b      	ldrh	r3, [r3, #12]
 801a768:	461a      	mov	r2, r3
 801a76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a76c:	899b      	ldrh	r3, [r3, #12]
 801a76e:	3b01      	subs	r3, #1
 801a770:	4013      	ands	r3, r2
 801a772:	2b00      	cmp	r3, #0
 801a774:	d001      	beq.n	801a77a <find_volume+0x10e>
 801a776:	2301      	movs	r3, #1
 801a778:	e1f1      	b.n	801ab5e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801a77a:	2300      	movs	r3, #0
 801a77c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801a77e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801a780:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a782:	f7ff ff1d 	bl	801a5c0 <check_fs>
 801a786:	4603      	mov	r3, r0
 801a788:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801a78c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801a790:	2b02      	cmp	r3, #2
 801a792:	d14b      	bne.n	801a82c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801a794:	2300      	movs	r3, #0
 801a796:	643b      	str	r3, [r7, #64]	; 0x40
 801a798:	e01f      	b.n	801a7da <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801a79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a79c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801a7a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a7a2:	011b      	lsls	r3, r3, #4
 801a7a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801a7a8:	4413      	add	r3, r2
 801a7aa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801a7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7ae:	3304      	adds	r3, #4
 801a7b0:	781b      	ldrb	r3, [r3, #0]
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	d006      	beq.n	801a7c4 <find_volume+0x158>
 801a7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7b8:	3308      	adds	r3, #8
 801a7ba:	4618      	mov	r0, r3
 801a7bc:	f7fe f8ec 	bl	8018998 <ld_dword>
 801a7c0:	4602      	mov	r2, r0
 801a7c2:	e000      	b.n	801a7c6 <find_volume+0x15a>
 801a7c4:	2200      	movs	r2, #0
 801a7c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a7c8:	009b      	lsls	r3, r3, #2
 801a7ca:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801a7ce:	440b      	add	r3, r1
 801a7d0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801a7d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a7d6:	3301      	adds	r3, #1
 801a7d8:	643b      	str	r3, [r7, #64]	; 0x40
 801a7da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a7dc:	2b03      	cmp	r3, #3
 801a7de:	d9dc      	bls.n	801a79a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801a7e0:	2300      	movs	r3, #0
 801a7e2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801a7e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d002      	beq.n	801a7f0 <find_volume+0x184>
 801a7ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a7ec:	3b01      	subs	r3, #1
 801a7ee:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801a7f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a7f2:	009b      	lsls	r3, r3, #2
 801a7f4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801a7f8:	4413      	add	r3, r2
 801a7fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801a7fe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801a800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a802:	2b00      	cmp	r3, #0
 801a804:	d005      	beq.n	801a812 <find_volume+0x1a6>
 801a806:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801a808:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a80a:	f7ff fed9 	bl	801a5c0 <check_fs>
 801a80e:	4603      	mov	r3, r0
 801a810:	e000      	b.n	801a814 <find_volume+0x1a8>
 801a812:	2303      	movs	r3, #3
 801a814:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801a818:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801a81c:	2b01      	cmp	r3, #1
 801a81e:	d905      	bls.n	801a82c <find_volume+0x1c0>
 801a820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a822:	3301      	adds	r3, #1
 801a824:	643b      	str	r3, [r7, #64]	; 0x40
 801a826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a828:	2b03      	cmp	r3, #3
 801a82a:	d9e1      	bls.n	801a7f0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801a82c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801a830:	2b04      	cmp	r3, #4
 801a832:	d101      	bne.n	801a838 <find_volume+0x1cc>
 801a834:	2301      	movs	r3, #1
 801a836:	e192      	b.n	801ab5e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801a838:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801a83c:	2b01      	cmp	r3, #1
 801a83e:	d901      	bls.n	801a844 <find_volume+0x1d8>
 801a840:	230d      	movs	r3, #13
 801a842:	e18c      	b.n	801ab5e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801a844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a846:	3338      	adds	r3, #56	; 0x38
 801a848:	330b      	adds	r3, #11
 801a84a:	4618      	mov	r0, r3
 801a84c:	f7fe f88c 	bl	8018968 <ld_word>
 801a850:	4603      	mov	r3, r0
 801a852:	461a      	mov	r2, r3
 801a854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a856:	899b      	ldrh	r3, [r3, #12]
 801a858:	429a      	cmp	r2, r3
 801a85a:	d001      	beq.n	801a860 <find_volume+0x1f4>
 801a85c:	230d      	movs	r3, #13
 801a85e:	e17e      	b.n	801ab5e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801a860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a862:	3338      	adds	r3, #56	; 0x38
 801a864:	3316      	adds	r3, #22
 801a866:	4618      	mov	r0, r3
 801a868:	f7fe f87e 	bl	8018968 <ld_word>
 801a86c:	4603      	mov	r3, r0
 801a86e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801a870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a872:	2b00      	cmp	r3, #0
 801a874:	d106      	bne.n	801a884 <find_volume+0x218>
 801a876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a878:	3338      	adds	r3, #56	; 0x38
 801a87a:	3324      	adds	r3, #36	; 0x24
 801a87c:	4618      	mov	r0, r3
 801a87e:	f7fe f88b 	bl	8018998 <ld_dword>
 801a882:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801a884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a886:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a888:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801a88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a88c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801a890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a892:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801a894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a896:	789b      	ldrb	r3, [r3, #2]
 801a898:	2b01      	cmp	r3, #1
 801a89a:	d005      	beq.n	801a8a8 <find_volume+0x23c>
 801a89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a89e:	789b      	ldrb	r3, [r3, #2]
 801a8a0:	2b02      	cmp	r3, #2
 801a8a2:	d001      	beq.n	801a8a8 <find_volume+0x23c>
 801a8a4:	230d      	movs	r3, #13
 801a8a6:	e15a      	b.n	801ab5e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801a8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8aa:	789b      	ldrb	r3, [r3, #2]
 801a8ac:	461a      	mov	r2, r3
 801a8ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a8b0:	fb02 f303 	mul.w	r3, r2, r3
 801a8b4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801a8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a8bc:	b29a      	uxth	r2, r3
 801a8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801a8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8c4:	895b      	ldrh	r3, [r3, #10]
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	d008      	beq.n	801a8dc <find_volume+0x270>
 801a8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8cc:	895b      	ldrh	r3, [r3, #10]
 801a8ce:	461a      	mov	r2, r3
 801a8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8d2:	895b      	ldrh	r3, [r3, #10]
 801a8d4:	3b01      	subs	r3, #1
 801a8d6:	4013      	ands	r3, r2
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	d001      	beq.n	801a8e0 <find_volume+0x274>
 801a8dc:	230d      	movs	r3, #13
 801a8de:	e13e      	b.n	801ab5e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801a8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8e2:	3338      	adds	r3, #56	; 0x38
 801a8e4:	3311      	adds	r3, #17
 801a8e6:	4618      	mov	r0, r3
 801a8e8:	f7fe f83e 	bl	8018968 <ld_word>
 801a8ec:	4603      	mov	r3, r0
 801a8ee:	461a      	mov	r2, r3
 801a8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801a8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8f6:	891b      	ldrh	r3, [r3, #8]
 801a8f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a8fa:	8992      	ldrh	r2, [r2, #12]
 801a8fc:	0952      	lsrs	r2, r2, #5
 801a8fe:	b292      	uxth	r2, r2
 801a900:	fbb3 f1f2 	udiv	r1, r3, r2
 801a904:	fb02 f201 	mul.w	r2, r2, r1
 801a908:	1a9b      	subs	r3, r3, r2
 801a90a:	b29b      	uxth	r3, r3
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	d001      	beq.n	801a914 <find_volume+0x2a8>
 801a910:	230d      	movs	r3, #13
 801a912:	e124      	b.n	801ab5e <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801a914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a916:	3338      	adds	r3, #56	; 0x38
 801a918:	3313      	adds	r3, #19
 801a91a:	4618      	mov	r0, r3
 801a91c:	f7fe f824 	bl	8018968 <ld_word>
 801a920:	4603      	mov	r3, r0
 801a922:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801a924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a926:	2b00      	cmp	r3, #0
 801a928:	d106      	bne.n	801a938 <find_volume+0x2cc>
 801a92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a92c:	3338      	adds	r3, #56	; 0x38
 801a92e:	3320      	adds	r3, #32
 801a930:	4618      	mov	r0, r3
 801a932:	f7fe f831 	bl	8018998 <ld_dword>
 801a936:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801a938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a93a:	3338      	adds	r3, #56	; 0x38
 801a93c:	330e      	adds	r3, #14
 801a93e:	4618      	mov	r0, r3
 801a940:	f7fe f812 	bl	8018968 <ld_word>
 801a944:	4603      	mov	r3, r0
 801a946:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801a948:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d104      	bne.n	801a958 <find_volume+0x2ec>
 801a94e:	230d      	movs	r3, #13
 801a950:	e105      	b.n	801ab5e <find_volume+0x4f2>
 801a952:	bf00      	nop
 801a954:	20001b88 	.word	0x20001b88

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801a958:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801a95a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a95c:	4413      	add	r3, r2
 801a95e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a960:	8911      	ldrh	r1, [r2, #8]
 801a962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a964:	8992      	ldrh	r2, [r2, #12]
 801a966:	0952      	lsrs	r2, r2, #5
 801a968:	b292      	uxth	r2, r2
 801a96a:	fbb1 f2f2 	udiv	r2, r1, r2
 801a96e:	b292      	uxth	r2, r2
 801a970:	4413      	add	r3, r2
 801a972:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801a974:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a978:	429a      	cmp	r2, r3
 801a97a:	d201      	bcs.n	801a980 <find_volume+0x314>
 801a97c:	230d      	movs	r3, #13
 801a97e:	e0ee      	b.n	801ab5e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801a980:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a984:	1ad3      	subs	r3, r2, r3
 801a986:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a988:	8952      	ldrh	r2, [r2, #10]
 801a98a:	fbb3 f3f2 	udiv	r3, r3, r2
 801a98e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801a990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a992:	2b00      	cmp	r3, #0
 801a994:	d101      	bne.n	801a99a <find_volume+0x32e>
 801a996:	230d      	movs	r3, #13
 801a998:	e0e1      	b.n	801ab5e <find_volume+0x4f2>
		fmt = FS_FAT32;
 801a99a:	2303      	movs	r3, #3
 801a99c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801a9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9a2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801a9a6:	4293      	cmp	r3, r2
 801a9a8:	d802      	bhi.n	801a9b0 <find_volume+0x344>
 801a9aa:	2302      	movs	r3, #2
 801a9ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9b2:	f640 72f5 	movw	r2, #4085	; 0xff5
 801a9b6:	4293      	cmp	r3, r2
 801a9b8:	d802      	bhi.n	801a9c0 <find_volume+0x354>
 801a9ba:	2301      	movs	r3, #1
 801a9bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9c2:	1c9a      	adds	r2, r3, #2
 801a9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a9c6:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801a9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a9ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a9cc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801a9ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801a9d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a9d2:	441a      	add	r2, r3
 801a9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a9d6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801a9d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9dc:	441a      	add	r2, r3
 801a9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a9e0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801a9e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801a9e6:	2b03      	cmp	r3, #3
 801a9e8:	d11e      	bne.n	801aa28 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801a9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a9ec:	3338      	adds	r3, #56	; 0x38
 801a9ee:	332a      	adds	r3, #42	; 0x2a
 801a9f0:	4618      	mov	r0, r3
 801a9f2:	f7fd ffb9 	bl	8018968 <ld_word>
 801a9f6:	4603      	mov	r3, r0
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	d001      	beq.n	801aa00 <find_volume+0x394>
 801a9fc:	230d      	movs	r3, #13
 801a9fe:	e0ae      	b.n	801ab5e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801aa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa02:	891b      	ldrh	r3, [r3, #8]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d001      	beq.n	801aa0c <find_volume+0x3a0>
 801aa08:	230d      	movs	r3, #13
 801aa0a:	e0a8      	b.n	801ab5e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801aa0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa0e:	3338      	adds	r3, #56	; 0x38
 801aa10:	332c      	adds	r3, #44	; 0x2c
 801aa12:	4618      	mov	r0, r3
 801aa14:	f7fd ffc0 	bl	8018998 <ld_dword>
 801aa18:	4602      	mov	r2, r0
 801aa1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa1c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801aa1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa20:	69db      	ldr	r3, [r3, #28]
 801aa22:	009b      	lsls	r3, r3, #2
 801aa24:	647b      	str	r3, [r7, #68]	; 0x44
 801aa26:	e01f      	b.n	801aa68 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801aa28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa2a:	891b      	ldrh	r3, [r3, #8]
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	d101      	bne.n	801aa34 <find_volume+0x3c8>
 801aa30:	230d      	movs	r3, #13
 801aa32:	e094      	b.n	801ab5e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801aa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801aa38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aa3a:	441a      	add	r2, r3
 801aa3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa3e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801aa40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801aa44:	2b02      	cmp	r3, #2
 801aa46:	d103      	bne.n	801aa50 <find_volume+0x3e4>
 801aa48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa4a:	69db      	ldr	r3, [r3, #28]
 801aa4c:	005b      	lsls	r3, r3, #1
 801aa4e:	e00a      	b.n	801aa66 <find_volume+0x3fa>
 801aa50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa52:	69da      	ldr	r2, [r3, #28]
 801aa54:	4613      	mov	r3, r2
 801aa56:	005b      	lsls	r3, r3, #1
 801aa58:	4413      	add	r3, r2
 801aa5a:	085a      	lsrs	r2, r3, #1
 801aa5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa5e:	69db      	ldr	r3, [r3, #28]
 801aa60:	f003 0301 	and.w	r3, r3, #1
 801aa64:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801aa66:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801aa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa6a:	6a1a      	ldr	r2, [r3, #32]
 801aa6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa6e:	899b      	ldrh	r3, [r3, #12]
 801aa70:	4619      	mov	r1, r3
 801aa72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa74:	440b      	add	r3, r1
 801aa76:	3b01      	subs	r3, #1
 801aa78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801aa7a:	8989      	ldrh	r1, [r1, #12]
 801aa7c:	fbb3 f3f1 	udiv	r3, r3, r1
 801aa80:	429a      	cmp	r2, r3
 801aa82:	d201      	bcs.n	801aa88 <find_volume+0x41c>
 801aa84:	230d      	movs	r3, #13
 801aa86:	e06a      	b.n	801ab5e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801aa88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa8a:	f04f 32ff 	mov.w	r2, #4294967295
 801aa8e:	619a      	str	r2, [r3, #24]
 801aa90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa92:	699a      	ldr	r2, [r3, #24]
 801aa94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa96:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801aa98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa9a:	2280      	movs	r2, #128	; 0x80
 801aa9c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801aa9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801aaa2:	2b03      	cmp	r3, #3
 801aaa4:	d149      	bne.n	801ab3a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801aaa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aaa8:	3338      	adds	r3, #56	; 0x38
 801aaaa:	3330      	adds	r3, #48	; 0x30
 801aaac:	4618      	mov	r0, r3
 801aaae:	f7fd ff5b 	bl	8018968 <ld_word>
 801aab2:	4603      	mov	r3, r0
 801aab4:	2b01      	cmp	r3, #1
 801aab6:	d140      	bne.n	801ab3a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 801aab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aaba:	3301      	adds	r3, #1
 801aabc:	4619      	mov	r1, r3
 801aabe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801aac0:	f7fe fa02 	bl	8018ec8 <move_window>
 801aac4:	4603      	mov	r3, r0
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d137      	bne.n	801ab3a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 801aaca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aacc:	2200      	movs	r2, #0
 801aace:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801aad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aad2:	3338      	adds	r3, #56	; 0x38
 801aad4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801aad8:	4618      	mov	r0, r3
 801aada:	f7fd ff45 	bl	8018968 <ld_word>
 801aade:	4603      	mov	r3, r0
 801aae0:	461a      	mov	r2, r3
 801aae2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801aae6:	429a      	cmp	r2, r3
 801aae8:	d127      	bne.n	801ab3a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801aaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aaec:	3338      	adds	r3, #56	; 0x38
 801aaee:	4618      	mov	r0, r3
 801aaf0:	f7fd ff52 	bl	8018998 <ld_dword>
 801aaf4:	4603      	mov	r3, r0
 801aaf6:	4a1c      	ldr	r2, [pc, #112]	; (801ab68 <find_volume+0x4fc>)
 801aaf8:	4293      	cmp	r3, r2
 801aafa:	d11e      	bne.n	801ab3a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801aafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aafe:	3338      	adds	r3, #56	; 0x38
 801ab00:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801ab04:	4618      	mov	r0, r3
 801ab06:	f7fd ff47 	bl	8018998 <ld_dword>
 801ab0a:	4603      	mov	r3, r0
 801ab0c:	4a17      	ldr	r2, [pc, #92]	; (801ab6c <find_volume+0x500>)
 801ab0e:	4293      	cmp	r3, r2
 801ab10:	d113      	bne.n	801ab3a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801ab12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ab14:	3338      	adds	r3, #56	; 0x38
 801ab16:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801ab1a:	4618      	mov	r0, r3
 801ab1c:	f7fd ff3c 	bl	8018998 <ld_dword>
 801ab20:	4602      	mov	r2, r0
 801ab22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ab24:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801ab26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ab28:	3338      	adds	r3, #56	; 0x38
 801ab2a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801ab2e:	4618      	mov	r0, r3
 801ab30:	f7fd ff32 	bl	8018998 <ld_dword>
 801ab34:	4602      	mov	r2, r0
 801ab36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ab38:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801ab3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ab3c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801ab40:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801ab42:	4b0b      	ldr	r3, [pc, #44]	; (801ab70 <find_volume+0x504>)
 801ab44:	881b      	ldrh	r3, [r3, #0]
 801ab46:	3301      	adds	r3, #1
 801ab48:	b29a      	uxth	r2, r3
 801ab4a:	4b09      	ldr	r3, [pc, #36]	; (801ab70 <find_volume+0x504>)
 801ab4c:	801a      	strh	r2, [r3, #0]
 801ab4e:	4b08      	ldr	r3, [pc, #32]	; (801ab70 <find_volume+0x504>)
 801ab50:	881a      	ldrh	r2, [r3, #0]
 801ab52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ab54:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801ab56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801ab58:	f7fe f94e 	bl	8018df8 <clear_lock>
#endif
	return FR_OK;
 801ab5c:	2300      	movs	r3, #0
}
 801ab5e:	4618      	mov	r0, r3
 801ab60:	3758      	adds	r7, #88	; 0x58
 801ab62:	46bd      	mov	sp, r7
 801ab64:	bd80      	pop	{r7, pc}
 801ab66:	bf00      	nop
 801ab68:	41615252 	.word	0x41615252
 801ab6c:	61417272 	.word	0x61417272
 801ab70:	20001b8c 	.word	0x20001b8c

0801ab74 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801ab74:	b580      	push	{r7, lr}
 801ab76:	b084      	sub	sp, #16
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	6078      	str	r0, [r7, #4]
 801ab7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801ab7e:	2309      	movs	r3, #9
 801ab80:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	d01c      	beq.n	801abc2 <validate+0x4e>
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	d018      	beq.n	801abc2 <validate+0x4e>
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	781b      	ldrb	r3, [r3, #0]
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	d013      	beq.n	801abc2 <validate+0x4e>
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	889a      	ldrh	r2, [r3, #4]
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	88db      	ldrh	r3, [r3, #6]
 801aba4:	429a      	cmp	r2, r3
 801aba6:	d10c      	bne.n	801abc2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	785b      	ldrb	r3, [r3, #1]
 801abae:	4618      	mov	r0, r3
 801abb0:	f7fd fe3c 	bl	801882c <disk_status>
 801abb4:	4603      	mov	r3, r0
 801abb6:	f003 0301 	and.w	r3, r3, #1
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d101      	bne.n	801abc2 <validate+0x4e>
			res = FR_OK;
 801abbe:	2300      	movs	r3, #0
 801abc0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801abc2:	7bfb      	ldrb	r3, [r7, #15]
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d102      	bne.n	801abce <validate+0x5a>
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	681b      	ldr	r3, [r3, #0]
 801abcc:	e000      	b.n	801abd0 <validate+0x5c>
 801abce:	2300      	movs	r3, #0
 801abd0:	683a      	ldr	r2, [r7, #0]
 801abd2:	6013      	str	r3, [r2, #0]
	return res;
 801abd4:	7bfb      	ldrb	r3, [r7, #15]
}
 801abd6:	4618      	mov	r0, r3
 801abd8:	3710      	adds	r7, #16
 801abda:	46bd      	mov	sp, r7
 801abdc:	bd80      	pop	{r7, pc}
	...

0801abe0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801abe0:	b580      	push	{r7, lr}
 801abe2:	b088      	sub	sp, #32
 801abe4:	af00      	add	r7, sp, #0
 801abe6:	60f8      	str	r0, [r7, #12]
 801abe8:	60b9      	str	r1, [r7, #8]
 801abea:	4613      	mov	r3, r2
 801abec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801abee:	68bb      	ldr	r3, [r7, #8]
 801abf0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801abf2:	f107 0310 	add.w	r3, r7, #16
 801abf6:	4618      	mov	r0, r3
 801abf8:	f7ff fc9e 	bl	801a538 <get_ldnumber>
 801abfc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801abfe:	69fb      	ldr	r3, [r7, #28]
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	da01      	bge.n	801ac08 <f_mount+0x28>
 801ac04:	230b      	movs	r3, #11
 801ac06:	e02b      	b.n	801ac60 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801ac08:	4a17      	ldr	r2, [pc, #92]	; (801ac68 <f_mount+0x88>)
 801ac0a:	69fb      	ldr	r3, [r7, #28]
 801ac0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ac10:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801ac12:	69bb      	ldr	r3, [r7, #24]
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d005      	beq.n	801ac24 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801ac18:	69b8      	ldr	r0, [r7, #24]
 801ac1a:	f7fe f8ed 	bl	8018df8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801ac1e:	69bb      	ldr	r3, [r7, #24]
 801ac20:	2200      	movs	r2, #0
 801ac22:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	d002      	beq.n	801ac30 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801ac2a:	68fb      	ldr	r3, [r7, #12]
 801ac2c:	2200      	movs	r2, #0
 801ac2e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801ac30:	68fa      	ldr	r2, [r7, #12]
 801ac32:	490d      	ldr	r1, [pc, #52]	; (801ac68 <f_mount+0x88>)
 801ac34:	69fb      	ldr	r3, [r7, #28]
 801ac36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801ac3a:	68fb      	ldr	r3, [r7, #12]
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	d002      	beq.n	801ac46 <f_mount+0x66>
 801ac40:	79fb      	ldrb	r3, [r7, #7]
 801ac42:	2b01      	cmp	r3, #1
 801ac44:	d001      	beq.n	801ac4a <f_mount+0x6a>
 801ac46:	2300      	movs	r3, #0
 801ac48:	e00a      	b.n	801ac60 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801ac4a:	f107 010c 	add.w	r1, r7, #12
 801ac4e:	f107 0308 	add.w	r3, r7, #8
 801ac52:	2200      	movs	r2, #0
 801ac54:	4618      	mov	r0, r3
 801ac56:	f7ff fd09 	bl	801a66c <find_volume>
 801ac5a:	4603      	mov	r3, r0
 801ac5c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801ac5e:	7dfb      	ldrb	r3, [r7, #23]
}
 801ac60:	4618      	mov	r0, r3
 801ac62:	3720      	adds	r7, #32
 801ac64:	46bd      	mov	sp, r7
 801ac66:	bd80      	pop	{r7, pc}
 801ac68:	20001b88 	.word	0x20001b88

0801ac6c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801ac6c:	b580      	push	{r7, lr}
 801ac6e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 801ac72:	af00      	add	r7, sp, #0
 801ac74:	f107 030c 	add.w	r3, r7, #12
 801ac78:	6018      	str	r0, [r3, #0]
 801ac7a:	f107 0308 	add.w	r3, r7, #8
 801ac7e:	6019      	str	r1, [r3, #0]
 801ac80:	1dfb      	adds	r3, r7, #7
 801ac82:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801ac84:	f107 030c 	add.w	r3, r7, #12
 801ac88:	681b      	ldr	r3, [r3, #0]
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d101      	bne.n	801ac92 <f_open+0x26>
 801ac8e:	2309      	movs	r3, #9
 801ac90:	e242      	b.n	801b118 <f_open+0x4ac>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801ac92:	1dfb      	adds	r3, r7, #7
 801ac94:	1dfa      	adds	r2, r7, #7
 801ac96:	7812      	ldrb	r2, [r2, #0]
 801ac98:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801ac9c:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 801ac9e:	1dfb      	adds	r3, r7, #7
 801aca0:	781a      	ldrb	r2, [r3, #0]
 801aca2:	f507 7105 	add.w	r1, r7, #532	; 0x214
 801aca6:	f107 0308 	add.w	r3, r7, #8
 801acaa:	4618      	mov	r0, r3
 801acac:	f7ff fcde 	bl	801a66c <find_volume>
 801acb0:	4603      	mov	r3, r0
 801acb2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 801acb6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801acba:	2b00      	cmp	r3, #0
 801acbc:	f040 8221 	bne.w	801b102 <f_open+0x496>
		dj.obj.fs = fs;
 801acc0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801acc4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 801acc8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801accc:	f107 0214 	add.w	r2, r7, #20
 801acd0:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 801acd2:	f107 0308 	add.w	r3, r7, #8
 801acd6:	681a      	ldr	r2, [r3, #0]
 801acd8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801acdc:	4611      	mov	r1, r2
 801acde:	4618      	mov	r0, r3
 801ace0:	f7ff fbb4 	bl	801a44c <follow_path>
 801ace4:	4603      	mov	r3, r0
 801ace6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801acea:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d11b      	bne.n	801ad2a <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801acf2:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 801acf6:	b25b      	sxtb	r3, r3
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	da03      	bge.n	801ad04 <f_open+0x98>
				res = FR_INVALID_NAME;
 801acfc:	2306      	movs	r3, #6
 801acfe:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801ad02:	e012      	b.n	801ad2a <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801ad04:	1dfb      	adds	r3, r7, #7
 801ad06:	781b      	ldrb	r3, [r3, #0]
 801ad08:	f023 0301 	bic.w	r3, r3, #1
 801ad0c:	2b00      	cmp	r3, #0
 801ad0e:	bf14      	ite	ne
 801ad10:	2301      	movne	r3, #1
 801ad12:	2300      	moveq	r3, #0
 801ad14:	b2db      	uxtb	r3, r3
 801ad16:	461a      	mov	r2, r3
 801ad18:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801ad1c:	4611      	mov	r1, r2
 801ad1e:	4618      	mov	r0, r3
 801ad20:	f7fd ff22 	bl	8018b68 <chk_lock>
 801ad24:	4603      	mov	r3, r0
 801ad26:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801ad2a:	1dfb      	adds	r3, r7, #7
 801ad2c:	781b      	ldrb	r3, [r3, #0]
 801ad2e:	f003 031c 	and.w	r3, r3, #28
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	f000 809b 	beq.w	801ae6e <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 801ad38:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d019      	beq.n	801ad74 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801ad40:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801ad44:	2b04      	cmp	r3, #4
 801ad46:	d10e      	bne.n	801ad66 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801ad48:	f7fd ff6a 	bl	8018c20 <enq_lock>
 801ad4c:	4603      	mov	r3, r0
 801ad4e:	2b00      	cmp	r3, #0
 801ad50:	d006      	beq.n	801ad60 <f_open+0xf4>
 801ad52:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801ad56:	4618      	mov	r0, r3
 801ad58:	f7ff f8c8 	bl	8019eec <dir_register>
 801ad5c:	4603      	mov	r3, r0
 801ad5e:	e000      	b.n	801ad62 <f_open+0xf6>
 801ad60:	2312      	movs	r3, #18
 801ad62:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801ad66:	1dfb      	adds	r3, r7, #7
 801ad68:	1dfa      	adds	r2, r7, #7
 801ad6a:	7812      	ldrb	r2, [r2, #0]
 801ad6c:	f042 0208 	orr.w	r2, r2, #8
 801ad70:	701a      	strb	r2, [r3, #0]
 801ad72:	e012      	b.n	801ad9a <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801ad74:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 801ad78:	f003 0311 	and.w	r3, r3, #17
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	d003      	beq.n	801ad88 <f_open+0x11c>
					res = FR_DENIED;
 801ad80:	2307      	movs	r3, #7
 801ad82:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801ad86:	e008      	b.n	801ad9a <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801ad88:	1dfb      	adds	r3, r7, #7
 801ad8a:	781b      	ldrb	r3, [r3, #0]
 801ad8c:	f003 0304 	and.w	r3, r3, #4
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	d002      	beq.n	801ad9a <f_open+0x12e>
 801ad94:	2308      	movs	r3, #8
 801ad96:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801ad9a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	f040 8082 	bne.w	801aea8 <f_open+0x23c>
 801ada4:	1dfb      	adds	r3, r7, #7
 801ada6:	781b      	ldrb	r3, [r3, #0]
 801ada8:	f003 0308 	and.w	r3, r3, #8
 801adac:	2b00      	cmp	r3, #0
 801adae:	d07b      	beq.n	801aea8 <f_open+0x23c>
				dw = GET_FATTIME();
 801adb0:	f7fa fc98 	bl	80156e4 <get_fattime>
 801adb4:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801adb8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801adbc:	330e      	adds	r3, #14
 801adbe:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 801adc2:	4618      	mov	r0, r3
 801adc4:	f7fd fe26 	bl	8018a14 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801adc8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801adcc:	3316      	adds	r3, #22
 801adce:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 801add2:	4618      	mov	r0, r3
 801add4:	f7fd fe1e 	bl	8018a14 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801add8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801addc:	330b      	adds	r3, #11
 801adde:	2220      	movs	r2, #32
 801ade0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801ade2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801ade6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801adea:	4611      	mov	r1, r2
 801adec:	4618      	mov	r0, r3
 801adee:	f7fe fdf3 	bl	80199d8 <ld_clust>
 801adf2:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801adf6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801adfa:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 801adfe:	2200      	movs	r2, #0
 801ae00:	4618      	mov	r0, r3
 801ae02:	f7fe fe08 	bl	8019a16 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801ae06:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801ae0a:	331c      	adds	r3, #28
 801ae0c:	2100      	movs	r1, #0
 801ae0e:	4618      	mov	r0, r3
 801ae10:	f7fd fe00 	bl	8018a14 <st_dword>
					fs->wflag = 1;
 801ae14:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801ae18:	2201      	movs	r2, #1
 801ae1a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801ae1c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d041      	beq.n	801aea8 <f_open+0x23c>
						dw = fs->winsect;
 801ae24:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801ae28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ae2a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 801ae2e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801ae32:	2200      	movs	r2, #0
 801ae34:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 801ae38:	4618      	mov	r0, r3
 801ae3a:	f7fe faf2 	bl	8019422 <remove_chain>
 801ae3e:	4603      	mov	r3, r0
 801ae40:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 801ae44:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	d12d      	bne.n	801aea8 <f_open+0x23c>
							res = move_window(fs, dw);
 801ae4c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801ae50:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 801ae54:	4618      	mov	r0, r3
 801ae56:	f7fe f837 	bl	8018ec8 <move_window>
 801ae5a:	4603      	mov	r3, r0
 801ae5c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801ae60:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801ae64:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801ae68:	3a01      	subs	r2, #1
 801ae6a:	615a      	str	r2, [r3, #20]
 801ae6c:	e01c      	b.n	801aea8 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801ae6e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d118      	bne.n	801aea8 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801ae76:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 801ae7a:	f003 0310 	and.w	r3, r3, #16
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d003      	beq.n	801ae8a <f_open+0x21e>
					res = FR_NO_FILE;
 801ae82:	2304      	movs	r3, #4
 801ae84:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801ae88:	e00e      	b.n	801aea8 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801ae8a:	1dfb      	adds	r3, r7, #7
 801ae8c:	781b      	ldrb	r3, [r3, #0]
 801ae8e:	f003 0302 	and.w	r3, r3, #2
 801ae92:	2b00      	cmp	r3, #0
 801ae94:	d008      	beq.n	801aea8 <f_open+0x23c>
 801ae96:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 801ae9a:	f003 0301 	and.w	r3, r3, #1
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	d002      	beq.n	801aea8 <f_open+0x23c>
						res = FR_DENIED;
 801aea2:	2307      	movs	r3, #7
 801aea4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 801aea8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	d136      	bne.n	801af1e <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801aeb0:	1dfb      	adds	r3, r7, #7
 801aeb2:	781b      	ldrb	r3, [r3, #0]
 801aeb4:	f003 0308 	and.w	r3, r3, #8
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	d005      	beq.n	801aec8 <f_open+0x25c>
				mode |= FA_MODIFIED;
 801aebc:	1dfb      	adds	r3, r7, #7
 801aebe:	1dfa      	adds	r2, r7, #7
 801aec0:	7812      	ldrb	r2, [r2, #0]
 801aec2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801aec6:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801aec8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801aecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801aece:	f107 030c 	add.w	r3, r7, #12
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801aed6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801aeda:	f107 030c 	add.w	r3, r7, #12
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801aee2:	1dfb      	adds	r3, r7, #7
 801aee4:	781b      	ldrb	r3, [r3, #0]
 801aee6:	f023 0301 	bic.w	r3, r3, #1
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	bf14      	ite	ne
 801aeee:	2301      	movne	r3, #1
 801aef0:	2300      	moveq	r3, #0
 801aef2:	b2db      	uxtb	r3, r3
 801aef4:	461a      	mov	r2, r3
 801aef6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801aefa:	4611      	mov	r1, r2
 801aefc:	4618      	mov	r0, r3
 801aefe:	f7fd feb1 	bl	8018c64 <inc_lock>
 801af02:	4602      	mov	r2, r0
 801af04:	f107 030c 	add.w	r3, r7, #12
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801af0c:	f107 030c 	add.w	r3, r7, #12
 801af10:	681b      	ldr	r3, [r3, #0]
 801af12:	691b      	ldr	r3, [r3, #16]
 801af14:	2b00      	cmp	r3, #0
 801af16:	d102      	bne.n	801af1e <f_open+0x2b2>
 801af18:	2302      	movs	r3, #2
 801af1a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 801af1e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801af22:	2b00      	cmp	r3, #0
 801af24:	f040 80ed 	bne.w	801b102 <f_open+0x496>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801af28:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801af2c:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801af30:	4611      	mov	r1, r2
 801af32:	4618      	mov	r0, r3
 801af34:	f7fe fd50 	bl	80199d8 <ld_clust>
 801af38:	4602      	mov	r2, r0
 801af3a:	f107 030c 	add.w	r3, r7, #12
 801af3e:	681b      	ldr	r3, [r3, #0]
 801af40:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801af42:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801af46:	331c      	adds	r3, #28
 801af48:	4618      	mov	r0, r3
 801af4a:	f7fd fd25 	bl	8018998 <ld_dword>
 801af4e:	4602      	mov	r2, r0
 801af50:	f107 030c 	add.w	r3, r7, #12
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801af58:	f107 030c 	add.w	r3, r7, #12
 801af5c:	681b      	ldr	r3, [r3, #0]
 801af5e:	2200      	movs	r2, #0
 801af60:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801af62:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801af66:	f107 030c 	add.w	r3, r7, #12
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801af6e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801af72:	88da      	ldrh	r2, [r3, #6]
 801af74:	f107 030c 	add.w	r3, r7, #12
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801af7c:	f107 030c 	add.w	r3, r7, #12
 801af80:	681b      	ldr	r3, [r3, #0]
 801af82:	1dfa      	adds	r2, r7, #7
 801af84:	7812      	ldrb	r2, [r2, #0]
 801af86:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801af88:	f107 030c 	add.w	r3, r7, #12
 801af8c:	681b      	ldr	r3, [r3, #0]
 801af8e:	2200      	movs	r2, #0
 801af90:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801af92:	f107 030c 	add.w	r3, r7, #12
 801af96:	681b      	ldr	r3, [r3, #0]
 801af98:	2200      	movs	r2, #0
 801af9a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801af9c:	f107 030c 	add.w	r3, r7, #12
 801afa0:	681b      	ldr	r3, [r3, #0]
 801afa2:	2200      	movs	r2, #0
 801afa4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801afa6:	f107 030c 	add.w	r3, r7, #12
 801afaa:	681b      	ldr	r3, [r3, #0]
 801afac:	3330      	adds	r3, #48	; 0x30
 801afae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801afb2:	2100      	movs	r1, #0
 801afb4:	4618      	mov	r0, r3
 801afb6:	f7fd fd7a 	bl	8018aae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801afba:	1dfb      	adds	r3, r7, #7
 801afbc:	781b      	ldrb	r3, [r3, #0]
 801afbe:	f003 0320 	and.w	r3, r3, #32
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	f000 809d 	beq.w	801b102 <f_open+0x496>
 801afc8:	f107 030c 	add.w	r3, r7, #12
 801afcc:	681b      	ldr	r3, [r3, #0]
 801afce:	68db      	ldr	r3, [r3, #12]
 801afd0:	2b00      	cmp	r3, #0
 801afd2:	f000 8096 	beq.w	801b102 <f_open+0x496>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801afd6:	f107 030c 	add.w	r3, r7, #12
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	68da      	ldr	r2, [r3, #12]
 801afde:	f107 030c 	add.w	r3, r7, #12
 801afe2:	681b      	ldr	r3, [r3, #0]
 801afe4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801afe6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801afea:	895b      	ldrh	r3, [r3, #10]
 801afec:	461a      	mov	r2, r3
 801afee:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801aff2:	899b      	ldrh	r3, [r3, #12]
 801aff4:	fb03 f302 	mul.w	r3, r3, r2
 801aff8:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801affc:	f107 030c 	add.w	r3, r7, #12
 801b000:	681b      	ldr	r3, [r3, #0]
 801b002:	689b      	ldr	r3, [r3, #8]
 801b004:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801b008:	f107 030c 	add.w	r3, r7, #12
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	68db      	ldr	r3, [r3, #12]
 801b010:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 801b014:	e01f      	b.n	801b056 <f_open+0x3ea>
					clst = get_fat(&fp->obj, clst);
 801b016:	f107 030c 	add.w	r3, r7, #12
 801b01a:	681b      	ldr	r3, [r3, #0]
 801b01c:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801b020:	4618      	mov	r0, r3
 801b022:	f7fe f80e 	bl	8019042 <get_fat>
 801b026:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 801b02a:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801b02e:	2b01      	cmp	r3, #1
 801b030:	d802      	bhi.n	801b038 <f_open+0x3cc>
 801b032:	2302      	movs	r3, #2
 801b034:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801b038:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801b03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b040:	d102      	bne.n	801b048 <f_open+0x3dc>
 801b042:	2301      	movs	r3, #1
 801b044:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801b048:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801b04c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801b050:	1ad3      	subs	r3, r2, r3
 801b052:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 801b056:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d105      	bne.n	801b06a <f_open+0x3fe>
 801b05e:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801b062:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801b066:	429a      	cmp	r2, r3
 801b068:	d8d5      	bhi.n	801b016 <f_open+0x3aa>
				}
				fp->clust = clst;
 801b06a:	f107 030c 	add.w	r3, r7, #12
 801b06e:	681b      	ldr	r3, [r3, #0]
 801b070:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 801b074:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801b076:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801b07a:	2b00      	cmp	r3, #0
 801b07c:	d141      	bne.n	801b102 <f_open+0x496>
 801b07e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b082:	899b      	ldrh	r3, [r3, #12]
 801b084:	461a      	mov	r2, r3
 801b086:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801b08a:	fbb3 f1f2 	udiv	r1, r3, r2
 801b08e:	fb02 f201 	mul.w	r2, r2, r1
 801b092:	1a9b      	subs	r3, r3, r2
 801b094:	2b00      	cmp	r3, #0
 801b096:	d034      	beq.n	801b102 <f_open+0x496>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801b098:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b09c:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801b0a0:	4618      	mov	r0, r3
 801b0a2:	f7fd ffaf 	bl	8019004 <clust2sect>
 801b0a6:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 801b0aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d103      	bne.n	801b0ba <f_open+0x44e>
						res = FR_INT_ERR;
 801b0b2:	2302      	movs	r3, #2
 801b0b4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801b0b8:	e023      	b.n	801b102 <f_open+0x496>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801b0ba:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b0be:	899b      	ldrh	r3, [r3, #12]
 801b0c0:	461a      	mov	r2, r3
 801b0c2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801b0c6:	fbb3 f2f2 	udiv	r2, r3, r2
 801b0ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b0ce:	441a      	add	r2, r3
 801b0d0:	f107 030c 	add.w	r3, r7, #12
 801b0d4:	681b      	ldr	r3, [r3, #0]
 801b0d6:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801b0d8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b0dc:	7858      	ldrb	r0, [r3, #1]
 801b0de:	f107 030c 	add.w	r3, r7, #12
 801b0e2:	681b      	ldr	r3, [r3, #0]
 801b0e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801b0e8:	f107 030c 	add.w	r3, r7, #12
 801b0ec:	681b      	ldr	r3, [r3, #0]
 801b0ee:	6a1a      	ldr	r2, [r3, #32]
 801b0f0:	2301      	movs	r3, #1
 801b0f2:	f7fd fbdb 	bl	80188ac <disk_read>
 801b0f6:	4603      	mov	r3, r0
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	d002      	beq.n	801b102 <f_open+0x496>
 801b0fc:	2301      	movs	r3, #1
 801b0fe:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801b102:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801b106:	2b00      	cmp	r3, #0
 801b108:	d004      	beq.n	801b114 <f_open+0x4a8>
 801b10a:	f107 030c 	add.w	r3, r7, #12
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	2200      	movs	r2, #0
 801b112:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801b114:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 801b118:	4618      	mov	r0, r3
 801b11a:	f507 771a 	add.w	r7, r7, #616	; 0x268
 801b11e:	46bd      	mov	sp, r7
 801b120:	bd80      	pop	{r7, pc}

0801b122 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801b122:	b580      	push	{r7, lr}
 801b124:	b08c      	sub	sp, #48	; 0x30
 801b126:	af00      	add	r7, sp, #0
 801b128:	60f8      	str	r0, [r7, #12]
 801b12a:	60b9      	str	r1, [r7, #8]
 801b12c:	607a      	str	r2, [r7, #4]
 801b12e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801b130:	68bb      	ldr	r3, [r7, #8]
 801b132:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801b134:	683b      	ldr	r3, [r7, #0]
 801b136:	2200      	movs	r2, #0
 801b138:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801b13a:	68fb      	ldr	r3, [r7, #12]
 801b13c:	f107 0210 	add.w	r2, r7, #16
 801b140:	4611      	mov	r1, r2
 801b142:	4618      	mov	r0, r3
 801b144:	f7ff fd16 	bl	801ab74 <validate>
 801b148:	4603      	mov	r3, r0
 801b14a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801b14e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b152:	2b00      	cmp	r3, #0
 801b154:	d107      	bne.n	801b166 <f_write+0x44>
 801b156:	68fb      	ldr	r3, [r7, #12]
 801b158:	7d5b      	ldrb	r3, [r3, #21]
 801b15a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b15e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b162:	2b00      	cmp	r3, #0
 801b164:	d002      	beq.n	801b16c <f_write+0x4a>
 801b166:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b16a:	e16a      	b.n	801b442 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801b16c:	68fb      	ldr	r3, [r7, #12]
 801b16e:	7d1b      	ldrb	r3, [r3, #20]
 801b170:	f003 0302 	and.w	r3, r3, #2
 801b174:	2b00      	cmp	r3, #0
 801b176:	d101      	bne.n	801b17c <f_write+0x5a>
 801b178:	2307      	movs	r3, #7
 801b17a:	e162      	b.n	801b442 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801b17c:	68fb      	ldr	r3, [r7, #12]
 801b17e:	699a      	ldr	r2, [r3, #24]
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	441a      	add	r2, r3
 801b184:	68fb      	ldr	r3, [r7, #12]
 801b186:	699b      	ldr	r3, [r3, #24]
 801b188:	429a      	cmp	r2, r3
 801b18a:	f080 814c 	bcs.w	801b426 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801b18e:	68fb      	ldr	r3, [r7, #12]
 801b190:	699b      	ldr	r3, [r3, #24]
 801b192:	43db      	mvns	r3, r3
 801b194:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801b196:	e146      	b.n	801b426 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801b198:	68fb      	ldr	r3, [r7, #12]
 801b19a:	699b      	ldr	r3, [r3, #24]
 801b19c:	693a      	ldr	r2, [r7, #16]
 801b19e:	8992      	ldrh	r2, [r2, #12]
 801b1a0:	fbb3 f1f2 	udiv	r1, r3, r2
 801b1a4:	fb02 f201 	mul.w	r2, r2, r1
 801b1a8:	1a9b      	subs	r3, r3, r2
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	f040 80f1 	bne.w	801b392 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801b1b0:	68fb      	ldr	r3, [r7, #12]
 801b1b2:	699b      	ldr	r3, [r3, #24]
 801b1b4:	693a      	ldr	r2, [r7, #16]
 801b1b6:	8992      	ldrh	r2, [r2, #12]
 801b1b8:	fbb3 f3f2 	udiv	r3, r3, r2
 801b1bc:	693a      	ldr	r2, [r7, #16]
 801b1be:	8952      	ldrh	r2, [r2, #10]
 801b1c0:	3a01      	subs	r2, #1
 801b1c2:	4013      	ands	r3, r2
 801b1c4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801b1c6:	69bb      	ldr	r3, [r7, #24]
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	d143      	bne.n	801b254 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801b1cc:	68fb      	ldr	r3, [r7, #12]
 801b1ce:	699b      	ldr	r3, [r3, #24]
 801b1d0:	2b00      	cmp	r3, #0
 801b1d2:	d10c      	bne.n	801b1ee <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801b1d4:	68fb      	ldr	r3, [r7, #12]
 801b1d6:	689b      	ldr	r3, [r3, #8]
 801b1d8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801b1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	d11a      	bne.n	801b216 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801b1e0:	68fb      	ldr	r3, [r7, #12]
 801b1e2:	2100      	movs	r1, #0
 801b1e4:	4618      	mov	r0, r3
 801b1e6:	f7fe f981 	bl	80194ec <create_chain>
 801b1ea:	62b8      	str	r0, [r7, #40]	; 0x28
 801b1ec:	e013      	b.n	801b216 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801b1ee:	68fb      	ldr	r3, [r7, #12]
 801b1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	d007      	beq.n	801b206 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801b1f6:	68fb      	ldr	r3, [r7, #12]
 801b1f8:	699b      	ldr	r3, [r3, #24]
 801b1fa:	4619      	mov	r1, r3
 801b1fc:	68f8      	ldr	r0, [r7, #12]
 801b1fe:	f7fe fa0d 	bl	801961c <clmt_clust>
 801b202:	62b8      	str	r0, [r7, #40]	; 0x28
 801b204:	e007      	b.n	801b216 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801b206:	68fa      	ldr	r2, [r7, #12]
 801b208:	68fb      	ldr	r3, [r7, #12]
 801b20a:	69db      	ldr	r3, [r3, #28]
 801b20c:	4619      	mov	r1, r3
 801b20e:	4610      	mov	r0, r2
 801b210:	f7fe f96c 	bl	80194ec <create_chain>
 801b214:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801b216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b218:	2b00      	cmp	r3, #0
 801b21a:	f000 8109 	beq.w	801b430 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801b21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b220:	2b01      	cmp	r3, #1
 801b222:	d104      	bne.n	801b22e <f_write+0x10c>
 801b224:	68fb      	ldr	r3, [r7, #12]
 801b226:	2202      	movs	r2, #2
 801b228:	755a      	strb	r2, [r3, #21]
 801b22a:	2302      	movs	r3, #2
 801b22c:	e109      	b.n	801b442 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801b22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b230:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b234:	d104      	bne.n	801b240 <f_write+0x11e>
 801b236:	68fb      	ldr	r3, [r7, #12]
 801b238:	2201      	movs	r2, #1
 801b23a:	755a      	strb	r2, [r3, #21]
 801b23c:	2301      	movs	r3, #1
 801b23e:	e100      	b.n	801b442 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801b240:	68fb      	ldr	r3, [r7, #12]
 801b242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b244:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801b246:	68fb      	ldr	r3, [r7, #12]
 801b248:	689b      	ldr	r3, [r3, #8]
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d102      	bne.n	801b254 <f_write+0x132>
 801b24e:	68fb      	ldr	r3, [r7, #12]
 801b250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b252:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801b254:	68fb      	ldr	r3, [r7, #12]
 801b256:	7d1b      	ldrb	r3, [r3, #20]
 801b258:	b25b      	sxtb	r3, r3
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	da18      	bge.n	801b290 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801b25e:	693b      	ldr	r3, [r7, #16]
 801b260:	7858      	ldrb	r0, [r3, #1]
 801b262:	68fb      	ldr	r3, [r7, #12]
 801b264:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801b268:	68fb      	ldr	r3, [r7, #12]
 801b26a:	6a1a      	ldr	r2, [r3, #32]
 801b26c:	2301      	movs	r3, #1
 801b26e:	f7fd fb3d 	bl	80188ec <disk_write>
 801b272:	4603      	mov	r3, r0
 801b274:	2b00      	cmp	r3, #0
 801b276:	d004      	beq.n	801b282 <f_write+0x160>
 801b278:	68fb      	ldr	r3, [r7, #12]
 801b27a:	2201      	movs	r2, #1
 801b27c:	755a      	strb	r2, [r3, #21]
 801b27e:	2301      	movs	r3, #1
 801b280:	e0df      	b.n	801b442 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801b282:	68fb      	ldr	r3, [r7, #12]
 801b284:	7d1b      	ldrb	r3, [r3, #20]
 801b286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b28a:	b2da      	uxtb	r2, r3
 801b28c:	68fb      	ldr	r3, [r7, #12]
 801b28e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801b290:	693a      	ldr	r2, [r7, #16]
 801b292:	68fb      	ldr	r3, [r7, #12]
 801b294:	69db      	ldr	r3, [r3, #28]
 801b296:	4619      	mov	r1, r3
 801b298:	4610      	mov	r0, r2
 801b29a:	f7fd feb3 	bl	8019004 <clust2sect>
 801b29e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801b2a0:	697b      	ldr	r3, [r7, #20]
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	d104      	bne.n	801b2b0 <f_write+0x18e>
 801b2a6:	68fb      	ldr	r3, [r7, #12]
 801b2a8:	2202      	movs	r2, #2
 801b2aa:	755a      	strb	r2, [r3, #21]
 801b2ac:	2302      	movs	r3, #2
 801b2ae:	e0c8      	b.n	801b442 <f_write+0x320>
			sect += csect;
 801b2b0:	697a      	ldr	r2, [r7, #20]
 801b2b2:	69bb      	ldr	r3, [r7, #24]
 801b2b4:	4413      	add	r3, r2
 801b2b6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801b2b8:	693b      	ldr	r3, [r7, #16]
 801b2ba:	899b      	ldrh	r3, [r3, #12]
 801b2bc:	461a      	mov	r2, r3
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	fbb3 f3f2 	udiv	r3, r3, r2
 801b2c4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801b2c6:	6a3b      	ldr	r3, [r7, #32]
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	d043      	beq.n	801b354 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801b2cc:	69ba      	ldr	r2, [r7, #24]
 801b2ce:	6a3b      	ldr	r3, [r7, #32]
 801b2d0:	4413      	add	r3, r2
 801b2d2:	693a      	ldr	r2, [r7, #16]
 801b2d4:	8952      	ldrh	r2, [r2, #10]
 801b2d6:	4293      	cmp	r3, r2
 801b2d8:	d905      	bls.n	801b2e6 <f_write+0x1c4>
					cc = fs->csize - csect;
 801b2da:	693b      	ldr	r3, [r7, #16]
 801b2dc:	895b      	ldrh	r3, [r3, #10]
 801b2de:	461a      	mov	r2, r3
 801b2e0:	69bb      	ldr	r3, [r7, #24]
 801b2e2:	1ad3      	subs	r3, r2, r3
 801b2e4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801b2e6:	693b      	ldr	r3, [r7, #16]
 801b2e8:	7858      	ldrb	r0, [r3, #1]
 801b2ea:	6a3b      	ldr	r3, [r7, #32]
 801b2ec:	697a      	ldr	r2, [r7, #20]
 801b2ee:	69f9      	ldr	r1, [r7, #28]
 801b2f0:	f7fd fafc 	bl	80188ec <disk_write>
 801b2f4:	4603      	mov	r3, r0
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	d004      	beq.n	801b304 <f_write+0x1e2>
 801b2fa:	68fb      	ldr	r3, [r7, #12]
 801b2fc:	2201      	movs	r2, #1
 801b2fe:	755a      	strb	r2, [r3, #21]
 801b300:	2301      	movs	r3, #1
 801b302:	e09e      	b.n	801b442 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801b304:	68fb      	ldr	r3, [r7, #12]
 801b306:	6a1a      	ldr	r2, [r3, #32]
 801b308:	697b      	ldr	r3, [r7, #20]
 801b30a:	1ad3      	subs	r3, r2, r3
 801b30c:	6a3a      	ldr	r2, [r7, #32]
 801b30e:	429a      	cmp	r2, r3
 801b310:	d918      	bls.n	801b344 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801b312:	68fb      	ldr	r3, [r7, #12]
 801b314:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801b318:	68fb      	ldr	r3, [r7, #12]
 801b31a:	6a1a      	ldr	r2, [r3, #32]
 801b31c:	697b      	ldr	r3, [r7, #20]
 801b31e:	1ad3      	subs	r3, r2, r3
 801b320:	693a      	ldr	r2, [r7, #16]
 801b322:	8992      	ldrh	r2, [r2, #12]
 801b324:	fb02 f303 	mul.w	r3, r2, r3
 801b328:	69fa      	ldr	r2, [r7, #28]
 801b32a:	18d1      	adds	r1, r2, r3
 801b32c:	693b      	ldr	r3, [r7, #16]
 801b32e:	899b      	ldrh	r3, [r3, #12]
 801b330:	461a      	mov	r2, r3
 801b332:	f7fd fb9b 	bl	8018a6c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801b336:	68fb      	ldr	r3, [r7, #12]
 801b338:	7d1b      	ldrb	r3, [r3, #20]
 801b33a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b33e:	b2da      	uxtb	r2, r3
 801b340:	68fb      	ldr	r3, [r7, #12]
 801b342:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801b344:	693b      	ldr	r3, [r7, #16]
 801b346:	899b      	ldrh	r3, [r3, #12]
 801b348:	461a      	mov	r2, r3
 801b34a:	6a3b      	ldr	r3, [r7, #32]
 801b34c:	fb02 f303 	mul.w	r3, r2, r3
 801b350:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801b352:	e04b      	b.n	801b3ec <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801b354:	68fb      	ldr	r3, [r7, #12]
 801b356:	6a1b      	ldr	r3, [r3, #32]
 801b358:	697a      	ldr	r2, [r7, #20]
 801b35a:	429a      	cmp	r2, r3
 801b35c:	d016      	beq.n	801b38c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801b35e:	68fb      	ldr	r3, [r7, #12]
 801b360:	699a      	ldr	r2, [r3, #24]
 801b362:	68fb      	ldr	r3, [r7, #12]
 801b364:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801b366:	429a      	cmp	r2, r3
 801b368:	d210      	bcs.n	801b38c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801b36a:	693b      	ldr	r3, [r7, #16]
 801b36c:	7858      	ldrb	r0, [r3, #1]
 801b36e:	68fb      	ldr	r3, [r7, #12]
 801b370:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801b374:	2301      	movs	r3, #1
 801b376:	697a      	ldr	r2, [r7, #20]
 801b378:	f7fd fa98 	bl	80188ac <disk_read>
 801b37c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801b37e:	2b00      	cmp	r3, #0
 801b380:	d004      	beq.n	801b38c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801b382:	68fb      	ldr	r3, [r7, #12]
 801b384:	2201      	movs	r2, #1
 801b386:	755a      	strb	r2, [r3, #21]
 801b388:	2301      	movs	r3, #1
 801b38a:	e05a      	b.n	801b442 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801b38c:	68fb      	ldr	r3, [r7, #12]
 801b38e:	697a      	ldr	r2, [r7, #20]
 801b390:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801b392:	693b      	ldr	r3, [r7, #16]
 801b394:	899b      	ldrh	r3, [r3, #12]
 801b396:	4618      	mov	r0, r3
 801b398:	68fb      	ldr	r3, [r7, #12]
 801b39a:	699b      	ldr	r3, [r3, #24]
 801b39c:	693a      	ldr	r2, [r7, #16]
 801b39e:	8992      	ldrh	r2, [r2, #12]
 801b3a0:	fbb3 f1f2 	udiv	r1, r3, r2
 801b3a4:	fb02 f201 	mul.w	r2, r2, r1
 801b3a8:	1a9b      	subs	r3, r3, r2
 801b3aa:	1ac3      	subs	r3, r0, r3
 801b3ac:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801b3ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	429a      	cmp	r2, r3
 801b3b4:	d901      	bls.n	801b3ba <f_write+0x298>
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801b3ba:	68fb      	ldr	r3, [r7, #12]
 801b3bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801b3c0:	68fb      	ldr	r3, [r7, #12]
 801b3c2:	699b      	ldr	r3, [r3, #24]
 801b3c4:	693a      	ldr	r2, [r7, #16]
 801b3c6:	8992      	ldrh	r2, [r2, #12]
 801b3c8:	fbb3 f0f2 	udiv	r0, r3, r2
 801b3cc:	fb02 f200 	mul.w	r2, r2, r0
 801b3d0:	1a9b      	subs	r3, r3, r2
 801b3d2:	440b      	add	r3, r1
 801b3d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b3d6:	69f9      	ldr	r1, [r7, #28]
 801b3d8:	4618      	mov	r0, r3
 801b3da:	f7fd fb47 	bl	8018a6c <mem_cpy>
		fp->flag |= FA_DIRTY;
 801b3de:	68fb      	ldr	r3, [r7, #12]
 801b3e0:	7d1b      	ldrb	r3, [r3, #20]
 801b3e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b3e6:	b2da      	uxtb	r2, r3
 801b3e8:	68fb      	ldr	r3, [r7, #12]
 801b3ea:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801b3ec:	69fa      	ldr	r2, [r7, #28]
 801b3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3f0:	4413      	add	r3, r2
 801b3f2:	61fb      	str	r3, [r7, #28]
 801b3f4:	68fb      	ldr	r3, [r7, #12]
 801b3f6:	699a      	ldr	r2, [r3, #24]
 801b3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3fa:	441a      	add	r2, r3
 801b3fc:	68fb      	ldr	r3, [r7, #12]
 801b3fe:	619a      	str	r2, [r3, #24]
 801b400:	68fb      	ldr	r3, [r7, #12]
 801b402:	68da      	ldr	r2, [r3, #12]
 801b404:	68fb      	ldr	r3, [r7, #12]
 801b406:	699b      	ldr	r3, [r3, #24]
 801b408:	429a      	cmp	r2, r3
 801b40a:	bf38      	it	cc
 801b40c:	461a      	movcc	r2, r3
 801b40e:	68fb      	ldr	r3, [r7, #12]
 801b410:	60da      	str	r2, [r3, #12]
 801b412:	683b      	ldr	r3, [r7, #0]
 801b414:	681a      	ldr	r2, [r3, #0]
 801b416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b418:	441a      	add	r2, r3
 801b41a:	683b      	ldr	r3, [r7, #0]
 801b41c:	601a      	str	r2, [r3, #0]
 801b41e:	687a      	ldr	r2, [r7, #4]
 801b420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b422:	1ad3      	subs	r3, r2, r3
 801b424:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	2b00      	cmp	r3, #0
 801b42a:	f47f aeb5 	bne.w	801b198 <f_write+0x76>
 801b42e:	e000      	b.n	801b432 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801b430:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801b432:	68fb      	ldr	r3, [r7, #12]
 801b434:	7d1b      	ldrb	r3, [r3, #20]
 801b436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b43a:	b2da      	uxtb	r2, r3
 801b43c:	68fb      	ldr	r3, [r7, #12]
 801b43e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801b440:	2300      	movs	r3, #0
}
 801b442:	4618      	mov	r0, r3
 801b444:	3730      	adds	r7, #48	; 0x30
 801b446:	46bd      	mov	sp, r7
 801b448:	bd80      	pop	{r7, pc}

0801b44a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801b44a:	b580      	push	{r7, lr}
 801b44c:	b086      	sub	sp, #24
 801b44e:	af00      	add	r7, sp, #0
 801b450:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	f107 0208 	add.w	r2, r7, #8
 801b458:	4611      	mov	r1, r2
 801b45a:	4618      	mov	r0, r3
 801b45c:	f7ff fb8a 	bl	801ab74 <validate>
 801b460:	4603      	mov	r3, r0
 801b462:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801b464:	7dfb      	ldrb	r3, [r7, #23]
 801b466:	2b00      	cmp	r3, #0
 801b468:	d168      	bne.n	801b53c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	7d1b      	ldrb	r3, [r3, #20]
 801b46e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b472:	2b00      	cmp	r3, #0
 801b474:	d062      	beq.n	801b53c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	7d1b      	ldrb	r3, [r3, #20]
 801b47a:	b25b      	sxtb	r3, r3
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	da15      	bge.n	801b4ac <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801b480:	68bb      	ldr	r3, [r7, #8]
 801b482:	7858      	ldrb	r0, [r3, #1]
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	6a1a      	ldr	r2, [r3, #32]
 801b48e:	2301      	movs	r3, #1
 801b490:	f7fd fa2c 	bl	80188ec <disk_write>
 801b494:	4603      	mov	r3, r0
 801b496:	2b00      	cmp	r3, #0
 801b498:	d001      	beq.n	801b49e <f_sync+0x54>
 801b49a:	2301      	movs	r3, #1
 801b49c:	e04f      	b.n	801b53e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	7d1b      	ldrb	r3, [r3, #20]
 801b4a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b4a6:	b2da      	uxtb	r2, r3
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801b4ac:	f7fa f91a 	bl	80156e4 <get_fattime>
 801b4b0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801b4b2:	68ba      	ldr	r2, [r7, #8]
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b4b8:	4619      	mov	r1, r3
 801b4ba:	4610      	mov	r0, r2
 801b4bc:	f7fd fd04 	bl	8018ec8 <move_window>
 801b4c0:	4603      	mov	r3, r0
 801b4c2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801b4c4:	7dfb      	ldrb	r3, [r7, #23]
 801b4c6:	2b00      	cmp	r3, #0
 801b4c8:	d138      	bne.n	801b53c <f_sync+0xf2>
					dir = fp->dir_ptr;
 801b4ca:	687b      	ldr	r3, [r7, #4]
 801b4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b4ce:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801b4d0:	68fb      	ldr	r3, [r7, #12]
 801b4d2:	330b      	adds	r3, #11
 801b4d4:	781a      	ldrb	r2, [r3, #0]
 801b4d6:	68fb      	ldr	r3, [r7, #12]
 801b4d8:	330b      	adds	r3, #11
 801b4da:	f042 0220 	orr.w	r2, r2, #32
 801b4de:	b2d2      	uxtb	r2, r2
 801b4e0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	6818      	ldr	r0, [r3, #0]
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	689b      	ldr	r3, [r3, #8]
 801b4ea:	461a      	mov	r2, r3
 801b4ec:	68f9      	ldr	r1, [r7, #12]
 801b4ee:	f7fe fa92 	bl	8019a16 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801b4f2:	68fb      	ldr	r3, [r7, #12]
 801b4f4:	f103 021c 	add.w	r2, r3, #28
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	68db      	ldr	r3, [r3, #12]
 801b4fc:	4619      	mov	r1, r3
 801b4fe:	4610      	mov	r0, r2
 801b500:	f7fd fa88 	bl	8018a14 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801b504:	68fb      	ldr	r3, [r7, #12]
 801b506:	3316      	adds	r3, #22
 801b508:	6939      	ldr	r1, [r7, #16]
 801b50a:	4618      	mov	r0, r3
 801b50c:	f7fd fa82 	bl	8018a14 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	3312      	adds	r3, #18
 801b514:	2100      	movs	r1, #0
 801b516:	4618      	mov	r0, r3
 801b518:	f7fd fa61 	bl	80189de <st_word>
					fs->wflag = 1;
 801b51c:	68bb      	ldr	r3, [r7, #8]
 801b51e:	2201      	movs	r2, #1
 801b520:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801b522:	68bb      	ldr	r3, [r7, #8]
 801b524:	4618      	mov	r0, r3
 801b526:	f7fd fcfd 	bl	8018f24 <sync_fs>
 801b52a:	4603      	mov	r3, r0
 801b52c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	7d1b      	ldrb	r3, [r3, #20]
 801b532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b536:	b2da      	uxtb	r2, r3
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801b53c:	7dfb      	ldrb	r3, [r7, #23]
}
 801b53e:	4618      	mov	r0, r3
 801b540:	3718      	adds	r7, #24
 801b542:	46bd      	mov	sp, r7
 801b544:	bd80      	pop	{r7, pc}

0801b546 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801b546:	b580      	push	{r7, lr}
 801b548:	b084      	sub	sp, #16
 801b54a:	af00      	add	r7, sp, #0
 801b54c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801b54e:	6878      	ldr	r0, [r7, #4]
 801b550:	f7ff ff7b 	bl	801b44a <f_sync>
 801b554:	4603      	mov	r3, r0
 801b556:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801b558:	7bfb      	ldrb	r3, [r7, #15]
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d118      	bne.n	801b590 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	f107 0208 	add.w	r2, r7, #8
 801b564:	4611      	mov	r1, r2
 801b566:	4618      	mov	r0, r3
 801b568:	f7ff fb04 	bl	801ab74 <validate>
 801b56c:	4603      	mov	r3, r0
 801b56e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801b570:	7bfb      	ldrb	r3, [r7, #15]
 801b572:	2b00      	cmp	r3, #0
 801b574:	d10c      	bne.n	801b590 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	691b      	ldr	r3, [r3, #16]
 801b57a:	4618      	mov	r0, r3
 801b57c:	f7fd fc00 	bl	8018d80 <dec_lock>
 801b580:	4603      	mov	r3, r0
 801b582:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801b584:	7bfb      	ldrb	r3, [r7, #15]
 801b586:	2b00      	cmp	r3, #0
 801b588:	d102      	bne.n	801b590 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	2200      	movs	r2, #0
 801b58e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801b590:	7bfb      	ldrb	r3, [r7, #15]
}
 801b592:	4618      	mov	r0, r3
 801b594:	3710      	adds	r7, #16
 801b596:	46bd      	mov	sp, r7
 801b598:	bd80      	pop	{r7, pc}
	...

0801b59c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801b59c:	b480      	push	{r7}
 801b59e:	b087      	sub	sp, #28
 801b5a0:	af00      	add	r7, sp, #0
 801b5a2:	60f8      	str	r0, [r7, #12]
 801b5a4:	60b9      	str	r1, [r7, #8]
 801b5a6:	4613      	mov	r3, r2
 801b5a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801b5aa:	2301      	movs	r3, #1
 801b5ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801b5ae:	2300      	movs	r3, #0
 801b5b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801b5b2:	4b1f      	ldr	r3, [pc, #124]	; (801b630 <FATFS_LinkDriverEx+0x94>)
 801b5b4:	7a5b      	ldrb	r3, [r3, #9]
 801b5b6:	b2db      	uxtb	r3, r3
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d131      	bne.n	801b620 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801b5bc:	4b1c      	ldr	r3, [pc, #112]	; (801b630 <FATFS_LinkDriverEx+0x94>)
 801b5be:	7a5b      	ldrb	r3, [r3, #9]
 801b5c0:	b2db      	uxtb	r3, r3
 801b5c2:	461a      	mov	r2, r3
 801b5c4:	4b1a      	ldr	r3, [pc, #104]	; (801b630 <FATFS_LinkDriverEx+0x94>)
 801b5c6:	2100      	movs	r1, #0
 801b5c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801b5ca:	4b19      	ldr	r3, [pc, #100]	; (801b630 <FATFS_LinkDriverEx+0x94>)
 801b5cc:	7a5b      	ldrb	r3, [r3, #9]
 801b5ce:	b2db      	uxtb	r3, r3
 801b5d0:	4a17      	ldr	r2, [pc, #92]	; (801b630 <FATFS_LinkDriverEx+0x94>)
 801b5d2:	009b      	lsls	r3, r3, #2
 801b5d4:	4413      	add	r3, r2
 801b5d6:	68fa      	ldr	r2, [r7, #12]
 801b5d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801b5da:	4b15      	ldr	r3, [pc, #84]	; (801b630 <FATFS_LinkDriverEx+0x94>)
 801b5dc:	7a5b      	ldrb	r3, [r3, #9]
 801b5de:	b2db      	uxtb	r3, r3
 801b5e0:	461a      	mov	r2, r3
 801b5e2:	4b13      	ldr	r3, [pc, #76]	; (801b630 <FATFS_LinkDriverEx+0x94>)
 801b5e4:	4413      	add	r3, r2
 801b5e6:	79fa      	ldrb	r2, [r7, #7]
 801b5e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801b5ea:	4b11      	ldr	r3, [pc, #68]	; (801b630 <FATFS_LinkDriverEx+0x94>)
 801b5ec:	7a5b      	ldrb	r3, [r3, #9]
 801b5ee:	b2db      	uxtb	r3, r3
 801b5f0:	1c5a      	adds	r2, r3, #1
 801b5f2:	b2d1      	uxtb	r1, r2
 801b5f4:	4a0e      	ldr	r2, [pc, #56]	; (801b630 <FATFS_LinkDriverEx+0x94>)
 801b5f6:	7251      	strb	r1, [r2, #9]
 801b5f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801b5fa:	7dbb      	ldrb	r3, [r7, #22]
 801b5fc:	3330      	adds	r3, #48	; 0x30
 801b5fe:	b2da      	uxtb	r2, r3
 801b600:	68bb      	ldr	r3, [r7, #8]
 801b602:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801b604:	68bb      	ldr	r3, [r7, #8]
 801b606:	3301      	adds	r3, #1
 801b608:	223a      	movs	r2, #58	; 0x3a
 801b60a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801b60c:	68bb      	ldr	r3, [r7, #8]
 801b60e:	3302      	adds	r3, #2
 801b610:	222f      	movs	r2, #47	; 0x2f
 801b612:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801b614:	68bb      	ldr	r3, [r7, #8]
 801b616:	3303      	adds	r3, #3
 801b618:	2200      	movs	r2, #0
 801b61a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801b61c:	2300      	movs	r3, #0
 801b61e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801b620:	7dfb      	ldrb	r3, [r7, #23]
}
 801b622:	4618      	mov	r0, r3
 801b624:	371c      	adds	r7, #28
 801b626:	46bd      	mov	sp, r7
 801b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b62c:	4770      	bx	lr
 801b62e:	bf00      	nop
 801b630:	20001bb0 	.word	0x20001bb0

0801b634 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801b634:	b580      	push	{r7, lr}
 801b636:	b082      	sub	sp, #8
 801b638:	af00      	add	r7, sp, #0
 801b63a:	6078      	str	r0, [r7, #4]
 801b63c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801b63e:	2200      	movs	r2, #0
 801b640:	6839      	ldr	r1, [r7, #0]
 801b642:	6878      	ldr	r0, [r7, #4]
 801b644:	f7ff ffaa 	bl	801b59c <FATFS_LinkDriverEx>
 801b648:	4603      	mov	r3, r0
}
 801b64a:	4618      	mov	r0, r3
 801b64c:	3708      	adds	r7, #8
 801b64e:	46bd      	mov	sp, r7
 801b650:	bd80      	pop	{r7, pc}
	...

0801b654 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801b654:	b480      	push	{r7}
 801b656:	b085      	sub	sp, #20
 801b658:	af00      	add	r7, sp, #0
 801b65a:	4603      	mov	r3, r0
 801b65c:	6039      	str	r1, [r7, #0]
 801b65e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801b660:	88fb      	ldrh	r3, [r7, #6]
 801b662:	2b7f      	cmp	r3, #127	; 0x7f
 801b664:	d802      	bhi.n	801b66c <ff_convert+0x18>
		c = chr;
 801b666:	88fb      	ldrh	r3, [r7, #6]
 801b668:	81fb      	strh	r3, [r7, #14]
 801b66a:	e025      	b.n	801b6b8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801b66c:	683b      	ldr	r3, [r7, #0]
 801b66e:	2b00      	cmp	r3, #0
 801b670:	d00b      	beq.n	801b68a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801b672:	88fb      	ldrh	r3, [r7, #6]
 801b674:	2bff      	cmp	r3, #255	; 0xff
 801b676:	d805      	bhi.n	801b684 <ff_convert+0x30>
 801b678:	88fb      	ldrh	r3, [r7, #6]
 801b67a:	3b80      	subs	r3, #128	; 0x80
 801b67c:	4a12      	ldr	r2, [pc, #72]	; (801b6c8 <ff_convert+0x74>)
 801b67e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801b682:	e000      	b.n	801b686 <ff_convert+0x32>
 801b684:	2300      	movs	r3, #0
 801b686:	81fb      	strh	r3, [r7, #14]
 801b688:	e016      	b.n	801b6b8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801b68a:	2300      	movs	r3, #0
 801b68c:	81fb      	strh	r3, [r7, #14]
 801b68e:	e009      	b.n	801b6a4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801b690:	89fb      	ldrh	r3, [r7, #14]
 801b692:	4a0d      	ldr	r2, [pc, #52]	; (801b6c8 <ff_convert+0x74>)
 801b694:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801b698:	88fa      	ldrh	r2, [r7, #6]
 801b69a:	429a      	cmp	r2, r3
 801b69c:	d006      	beq.n	801b6ac <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801b69e:	89fb      	ldrh	r3, [r7, #14]
 801b6a0:	3301      	adds	r3, #1
 801b6a2:	81fb      	strh	r3, [r7, #14]
 801b6a4:	89fb      	ldrh	r3, [r7, #14]
 801b6a6:	2b7f      	cmp	r3, #127	; 0x7f
 801b6a8:	d9f2      	bls.n	801b690 <ff_convert+0x3c>
 801b6aa:	e000      	b.n	801b6ae <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801b6ac:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801b6ae:	89fb      	ldrh	r3, [r7, #14]
 801b6b0:	3380      	adds	r3, #128	; 0x80
 801b6b2:	b29b      	uxth	r3, r3
 801b6b4:	b2db      	uxtb	r3, r3
 801b6b6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801b6b8:	89fb      	ldrh	r3, [r7, #14]
}
 801b6ba:	4618      	mov	r0, r3
 801b6bc:	3714      	adds	r7, #20
 801b6be:	46bd      	mov	sp, r7
 801b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6c4:	4770      	bx	lr
 801b6c6:	bf00      	nop
 801b6c8:	080224c0 	.word	0x080224c0

0801b6cc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801b6cc:	b480      	push	{r7}
 801b6ce:	b087      	sub	sp, #28
 801b6d0:	af00      	add	r7, sp, #0
 801b6d2:	4603      	mov	r3, r0
 801b6d4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801b6d6:	88fb      	ldrh	r3, [r7, #6]
 801b6d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b6dc:	d201      	bcs.n	801b6e2 <ff_wtoupper+0x16>
 801b6de:	4b3e      	ldr	r3, [pc, #248]	; (801b7d8 <ff_wtoupper+0x10c>)
 801b6e0:	e000      	b.n	801b6e4 <ff_wtoupper+0x18>
 801b6e2:	4b3e      	ldr	r3, [pc, #248]	; (801b7dc <ff_wtoupper+0x110>)
 801b6e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801b6e6:	697b      	ldr	r3, [r7, #20]
 801b6e8:	1c9a      	adds	r2, r3, #2
 801b6ea:	617a      	str	r2, [r7, #20]
 801b6ec:	881b      	ldrh	r3, [r3, #0]
 801b6ee:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801b6f0:	8a7b      	ldrh	r3, [r7, #18]
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d068      	beq.n	801b7c8 <ff_wtoupper+0xfc>
 801b6f6:	88fa      	ldrh	r2, [r7, #6]
 801b6f8:	8a7b      	ldrh	r3, [r7, #18]
 801b6fa:	429a      	cmp	r2, r3
 801b6fc:	d364      	bcc.n	801b7c8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801b6fe:	697b      	ldr	r3, [r7, #20]
 801b700:	1c9a      	adds	r2, r3, #2
 801b702:	617a      	str	r2, [r7, #20]
 801b704:	881b      	ldrh	r3, [r3, #0]
 801b706:	823b      	strh	r3, [r7, #16]
 801b708:	8a3b      	ldrh	r3, [r7, #16]
 801b70a:	0a1b      	lsrs	r3, r3, #8
 801b70c:	81fb      	strh	r3, [r7, #14]
 801b70e:	8a3b      	ldrh	r3, [r7, #16]
 801b710:	b2db      	uxtb	r3, r3
 801b712:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801b714:	88fa      	ldrh	r2, [r7, #6]
 801b716:	8a79      	ldrh	r1, [r7, #18]
 801b718:	8a3b      	ldrh	r3, [r7, #16]
 801b71a:	440b      	add	r3, r1
 801b71c:	429a      	cmp	r2, r3
 801b71e:	da49      	bge.n	801b7b4 <ff_wtoupper+0xe8>
			switch (cmd) {
 801b720:	89fb      	ldrh	r3, [r7, #14]
 801b722:	2b08      	cmp	r3, #8
 801b724:	d84f      	bhi.n	801b7c6 <ff_wtoupper+0xfa>
 801b726:	a201      	add	r2, pc, #4	; (adr r2, 801b72c <ff_wtoupper+0x60>)
 801b728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b72c:	0801b751 	.word	0x0801b751
 801b730:	0801b763 	.word	0x0801b763
 801b734:	0801b779 	.word	0x0801b779
 801b738:	0801b781 	.word	0x0801b781
 801b73c:	0801b789 	.word	0x0801b789
 801b740:	0801b791 	.word	0x0801b791
 801b744:	0801b799 	.word	0x0801b799
 801b748:	0801b7a1 	.word	0x0801b7a1
 801b74c:	0801b7a9 	.word	0x0801b7a9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801b750:	88fa      	ldrh	r2, [r7, #6]
 801b752:	8a7b      	ldrh	r3, [r7, #18]
 801b754:	1ad3      	subs	r3, r2, r3
 801b756:	005b      	lsls	r3, r3, #1
 801b758:	697a      	ldr	r2, [r7, #20]
 801b75a:	4413      	add	r3, r2
 801b75c:	881b      	ldrh	r3, [r3, #0]
 801b75e:	80fb      	strh	r3, [r7, #6]
 801b760:	e027      	b.n	801b7b2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801b762:	88fa      	ldrh	r2, [r7, #6]
 801b764:	8a7b      	ldrh	r3, [r7, #18]
 801b766:	1ad3      	subs	r3, r2, r3
 801b768:	b29b      	uxth	r3, r3
 801b76a:	f003 0301 	and.w	r3, r3, #1
 801b76e:	b29b      	uxth	r3, r3
 801b770:	88fa      	ldrh	r2, [r7, #6]
 801b772:	1ad3      	subs	r3, r2, r3
 801b774:	80fb      	strh	r3, [r7, #6]
 801b776:	e01c      	b.n	801b7b2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801b778:	88fb      	ldrh	r3, [r7, #6]
 801b77a:	3b10      	subs	r3, #16
 801b77c:	80fb      	strh	r3, [r7, #6]
 801b77e:	e018      	b.n	801b7b2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801b780:	88fb      	ldrh	r3, [r7, #6]
 801b782:	3b20      	subs	r3, #32
 801b784:	80fb      	strh	r3, [r7, #6]
 801b786:	e014      	b.n	801b7b2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801b788:	88fb      	ldrh	r3, [r7, #6]
 801b78a:	3b30      	subs	r3, #48	; 0x30
 801b78c:	80fb      	strh	r3, [r7, #6]
 801b78e:	e010      	b.n	801b7b2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801b790:	88fb      	ldrh	r3, [r7, #6]
 801b792:	3b1a      	subs	r3, #26
 801b794:	80fb      	strh	r3, [r7, #6]
 801b796:	e00c      	b.n	801b7b2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801b798:	88fb      	ldrh	r3, [r7, #6]
 801b79a:	3308      	adds	r3, #8
 801b79c:	80fb      	strh	r3, [r7, #6]
 801b79e:	e008      	b.n	801b7b2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801b7a0:	88fb      	ldrh	r3, [r7, #6]
 801b7a2:	3b50      	subs	r3, #80	; 0x50
 801b7a4:	80fb      	strh	r3, [r7, #6]
 801b7a6:	e004      	b.n	801b7b2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801b7a8:	88fb      	ldrh	r3, [r7, #6]
 801b7aa:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801b7ae:	80fb      	strh	r3, [r7, #6]
 801b7b0:	bf00      	nop
			}
			break;
 801b7b2:	e008      	b.n	801b7c6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801b7b4:	89fb      	ldrh	r3, [r7, #14]
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d195      	bne.n	801b6e6 <ff_wtoupper+0x1a>
 801b7ba:	8a3b      	ldrh	r3, [r7, #16]
 801b7bc:	005b      	lsls	r3, r3, #1
 801b7be:	697a      	ldr	r2, [r7, #20]
 801b7c0:	4413      	add	r3, r2
 801b7c2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801b7c4:	e78f      	b.n	801b6e6 <ff_wtoupper+0x1a>
			break;
 801b7c6:	bf00      	nop
	}

	return chr;
 801b7c8:	88fb      	ldrh	r3, [r7, #6]
}
 801b7ca:	4618      	mov	r0, r3
 801b7cc:	371c      	adds	r7, #28
 801b7ce:	46bd      	mov	sp, r7
 801b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7d4:	4770      	bx	lr
 801b7d6:	bf00      	nop
 801b7d8:	080225c0 	.word	0x080225c0
 801b7dc:	080227b4 	.word	0x080227b4

0801b7e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801b7e0:	b580      	push	{r7, lr}
 801b7e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801b7e4:	2200      	movs	r2, #0
 801b7e6:	4912      	ldr	r1, [pc, #72]	; (801b830 <MX_USB_DEVICE_Init+0x50>)
 801b7e8:	4812      	ldr	r0, [pc, #72]	; (801b834 <MX_USB_DEVICE_Init+0x54>)
 801b7ea:	f7fb fefe 	bl	80175ea <USBD_Init>
 801b7ee:	4603      	mov	r3, r0
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	d001      	beq.n	801b7f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801b7f4:	f7ec f9aa 	bl	8007b4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801b7f8:	490f      	ldr	r1, [pc, #60]	; (801b838 <MX_USB_DEVICE_Init+0x58>)
 801b7fa:	480e      	ldr	r0, [pc, #56]	; (801b834 <MX_USB_DEVICE_Init+0x54>)
 801b7fc:	f7fb ff2b 	bl	8017656 <USBD_RegisterClass>
 801b800:	4603      	mov	r3, r0
 801b802:	2b00      	cmp	r3, #0
 801b804:	d001      	beq.n	801b80a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801b806:	f7ec f9a1 	bl	8007b4c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801b80a:	490c      	ldr	r1, [pc, #48]	; (801b83c <MX_USB_DEVICE_Init+0x5c>)
 801b80c:	4809      	ldr	r0, [pc, #36]	; (801b834 <MX_USB_DEVICE_Init+0x54>)
 801b80e:	f7fa fb7d 	bl	8015f0c <USBD_MSC_RegisterStorage>
 801b812:	4603      	mov	r3, r0
 801b814:	2b00      	cmp	r3, #0
 801b816:	d001      	beq.n	801b81c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801b818:	f7ec f998 	bl	8007b4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801b81c:	4805      	ldr	r0, [pc, #20]	; (801b834 <MX_USB_DEVICE_Init+0x54>)
 801b81e:	f7fb ff3b 	bl	8017698 <USBD_Start>
 801b822:	4603      	mov	r3, r0
 801b824:	2b00      	cmp	r3, #0
 801b826:	d001      	beq.n	801b82c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801b828:	f7ec f990 	bl	8007b4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801b82c:	bf00      	nop
 801b82e:	bd80      	pop	{r7, pc}
 801b830:	20000318 	.word	0x20000318
 801b834:	20009634 	.word	0x20009634
 801b838:	20000230 	.word	0x20000230
 801b83c:	20000378 	.word	0x20000378

0801b840 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b840:	b480      	push	{r7}
 801b842:	b083      	sub	sp, #12
 801b844:	af00      	add	r7, sp, #0
 801b846:	4603      	mov	r3, r0
 801b848:	6039      	str	r1, [r7, #0]
 801b84a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801b84c:	683b      	ldr	r3, [r7, #0]
 801b84e:	2212      	movs	r2, #18
 801b850:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801b852:	4b03      	ldr	r3, [pc, #12]	; (801b860 <USBD_FS_DeviceDescriptor+0x20>)
}
 801b854:	4618      	mov	r0, r3
 801b856:	370c      	adds	r7, #12
 801b858:	46bd      	mov	sp, r7
 801b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b85e:	4770      	bx	lr
 801b860:	20000338 	.word	0x20000338

0801b864 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b864:	b480      	push	{r7}
 801b866:	b083      	sub	sp, #12
 801b868:	af00      	add	r7, sp, #0
 801b86a:	4603      	mov	r3, r0
 801b86c:	6039      	str	r1, [r7, #0]
 801b86e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801b870:	683b      	ldr	r3, [r7, #0]
 801b872:	2204      	movs	r2, #4
 801b874:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801b876:	4b03      	ldr	r3, [pc, #12]	; (801b884 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801b878:	4618      	mov	r0, r3
 801b87a:	370c      	adds	r7, #12
 801b87c:	46bd      	mov	sp, r7
 801b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b882:	4770      	bx	lr
 801b884:	20000358 	.word	0x20000358

0801b888 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b888:	b580      	push	{r7, lr}
 801b88a:	b082      	sub	sp, #8
 801b88c:	af00      	add	r7, sp, #0
 801b88e:	4603      	mov	r3, r0
 801b890:	6039      	str	r1, [r7, #0]
 801b892:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b894:	79fb      	ldrb	r3, [r7, #7]
 801b896:	2b00      	cmp	r3, #0
 801b898:	d105      	bne.n	801b8a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b89a:	683a      	ldr	r2, [r7, #0]
 801b89c:	4907      	ldr	r1, [pc, #28]	; (801b8bc <USBD_FS_ProductStrDescriptor+0x34>)
 801b89e:	4808      	ldr	r0, [pc, #32]	; (801b8c0 <USBD_FS_ProductStrDescriptor+0x38>)
 801b8a0:	f7fc ff00 	bl	80186a4 <USBD_GetString>
 801b8a4:	e004      	b.n	801b8b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b8a6:	683a      	ldr	r2, [r7, #0]
 801b8a8:	4904      	ldr	r1, [pc, #16]	; (801b8bc <USBD_FS_ProductStrDescriptor+0x34>)
 801b8aa:	4805      	ldr	r0, [pc, #20]	; (801b8c0 <USBD_FS_ProductStrDescriptor+0x38>)
 801b8ac:	f7fc fefa 	bl	80186a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801b8b0:	4b02      	ldr	r3, [pc, #8]	; (801b8bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 801b8b2:	4618      	mov	r0, r3
 801b8b4:	3708      	adds	r7, #8
 801b8b6:	46bd      	mov	sp, r7
 801b8b8:	bd80      	pop	{r7, pc}
 801b8ba:	bf00      	nop
 801b8bc:	20009904 	.word	0x20009904
 801b8c0:	080223b8 	.word	0x080223b8

0801b8c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b8c4:	b580      	push	{r7, lr}
 801b8c6:	b082      	sub	sp, #8
 801b8c8:	af00      	add	r7, sp, #0
 801b8ca:	4603      	mov	r3, r0
 801b8cc:	6039      	str	r1, [r7, #0]
 801b8ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801b8d0:	683a      	ldr	r2, [r7, #0]
 801b8d2:	4904      	ldr	r1, [pc, #16]	; (801b8e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801b8d4:	4804      	ldr	r0, [pc, #16]	; (801b8e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801b8d6:	f7fc fee5 	bl	80186a4 <USBD_GetString>
  return USBD_StrDesc;
 801b8da:	4b02      	ldr	r3, [pc, #8]	; (801b8e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801b8dc:	4618      	mov	r0, r3
 801b8de:	3708      	adds	r7, #8
 801b8e0:	46bd      	mov	sp, r7
 801b8e2:	bd80      	pop	{r7, pc}
 801b8e4:	20009904 	.word	0x20009904
 801b8e8:	080223cc 	.word	0x080223cc

0801b8ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b8ec:	b580      	push	{r7, lr}
 801b8ee:	b082      	sub	sp, #8
 801b8f0:	af00      	add	r7, sp, #0
 801b8f2:	4603      	mov	r3, r0
 801b8f4:	6039      	str	r1, [r7, #0]
 801b8f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801b8f8:	683b      	ldr	r3, [r7, #0]
 801b8fa:	221a      	movs	r2, #26
 801b8fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801b8fe:	f000 f855 	bl	801b9ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801b902:	4b02      	ldr	r3, [pc, #8]	; (801b90c <USBD_FS_SerialStrDescriptor+0x20>)
}
 801b904:	4618      	mov	r0, r3
 801b906:	3708      	adds	r7, #8
 801b908:	46bd      	mov	sp, r7
 801b90a:	bd80      	pop	{r7, pc}
 801b90c:	2000035c 	.word	0x2000035c

0801b910 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b910:	b580      	push	{r7, lr}
 801b912:	b082      	sub	sp, #8
 801b914:	af00      	add	r7, sp, #0
 801b916:	4603      	mov	r3, r0
 801b918:	6039      	str	r1, [r7, #0]
 801b91a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801b91c:	79fb      	ldrb	r3, [r7, #7]
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d105      	bne.n	801b92e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b922:	683a      	ldr	r2, [r7, #0]
 801b924:	4907      	ldr	r1, [pc, #28]	; (801b944 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b926:	4808      	ldr	r0, [pc, #32]	; (801b948 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b928:	f7fc febc 	bl	80186a4 <USBD_GetString>
 801b92c:	e004      	b.n	801b938 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b92e:	683a      	ldr	r2, [r7, #0]
 801b930:	4904      	ldr	r1, [pc, #16]	; (801b944 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b932:	4805      	ldr	r0, [pc, #20]	; (801b948 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b934:	f7fc feb6 	bl	80186a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801b938:	4b02      	ldr	r3, [pc, #8]	; (801b944 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801b93a:	4618      	mov	r0, r3
 801b93c:	3708      	adds	r7, #8
 801b93e:	46bd      	mov	sp, r7
 801b940:	bd80      	pop	{r7, pc}
 801b942:	bf00      	nop
 801b944:	20009904 	.word	0x20009904
 801b948:	080223e0 	.word	0x080223e0

0801b94c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b94c:	b580      	push	{r7, lr}
 801b94e:	b082      	sub	sp, #8
 801b950:	af00      	add	r7, sp, #0
 801b952:	4603      	mov	r3, r0
 801b954:	6039      	str	r1, [r7, #0]
 801b956:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b958:	79fb      	ldrb	r3, [r7, #7]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d105      	bne.n	801b96a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b95e:	683a      	ldr	r2, [r7, #0]
 801b960:	4907      	ldr	r1, [pc, #28]	; (801b980 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b962:	4808      	ldr	r0, [pc, #32]	; (801b984 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b964:	f7fc fe9e 	bl	80186a4 <USBD_GetString>
 801b968:	e004      	b.n	801b974 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b96a:	683a      	ldr	r2, [r7, #0]
 801b96c:	4904      	ldr	r1, [pc, #16]	; (801b980 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b96e:	4805      	ldr	r0, [pc, #20]	; (801b984 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b970:	f7fc fe98 	bl	80186a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801b974:	4b02      	ldr	r3, [pc, #8]	; (801b980 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801b976:	4618      	mov	r0, r3
 801b978:	3708      	adds	r7, #8
 801b97a:	46bd      	mov	sp, r7
 801b97c:	bd80      	pop	{r7, pc}
 801b97e:	bf00      	nop
 801b980:	20009904 	.word	0x20009904
 801b984:	080223ec 	.word	0x080223ec

0801b988 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b988:	b480      	push	{r7}
 801b98a:	b083      	sub	sp, #12
 801b98c:	af00      	add	r7, sp, #0
 801b98e:	4603      	mov	r3, r0
 801b990:	6039      	str	r1, [r7, #0]
 801b992:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801b994:	683b      	ldr	r3, [r7, #0]
 801b996:	220c      	movs	r2, #12
 801b998:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801b99a:	4b03      	ldr	r3, [pc, #12]	; (801b9a8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801b99c:	4618      	mov	r0, r3
 801b99e:	370c      	adds	r7, #12
 801b9a0:	46bd      	mov	sp, r7
 801b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9a6:	4770      	bx	lr
 801b9a8:	2000034c 	.word	0x2000034c

0801b9ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801b9ac:	b580      	push	{r7, lr}
 801b9ae:	b084      	sub	sp, #16
 801b9b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801b9b2:	4b0f      	ldr	r3, [pc, #60]	; (801b9f0 <Get_SerialNum+0x44>)
 801b9b4:	681b      	ldr	r3, [r3, #0]
 801b9b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801b9b8:	4b0e      	ldr	r3, [pc, #56]	; (801b9f4 <Get_SerialNum+0x48>)
 801b9ba:	681b      	ldr	r3, [r3, #0]
 801b9bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801b9be:	4b0e      	ldr	r3, [pc, #56]	; (801b9f8 <Get_SerialNum+0x4c>)
 801b9c0:	681b      	ldr	r3, [r3, #0]
 801b9c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801b9c4:	68fa      	ldr	r2, [r7, #12]
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	4413      	add	r3, r2
 801b9ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801b9cc:	68fb      	ldr	r3, [r7, #12]
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d009      	beq.n	801b9e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801b9d2:	2208      	movs	r2, #8
 801b9d4:	4909      	ldr	r1, [pc, #36]	; (801b9fc <Get_SerialNum+0x50>)
 801b9d6:	68f8      	ldr	r0, [r7, #12]
 801b9d8:	f000 f814 	bl	801ba04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801b9dc:	2204      	movs	r2, #4
 801b9de:	4908      	ldr	r1, [pc, #32]	; (801ba00 <Get_SerialNum+0x54>)
 801b9e0:	68b8      	ldr	r0, [r7, #8]
 801b9e2:	f000 f80f 	bl	801ba04 <IntToUnicode>
  }
}
 801b9e6:	bf00      	nop
 801b9e8:	3710      	adds	r7, #16
 801b9ea:	46bd      	mov	sp, r7
 801b9ec:	bd80      	pop	{r7, pc}
 801b9ee:	bf00      	nop
 801b9f0:	1ff07a10 	.word	0x1ff07a10
 801b9f4:	1ff07a14 	.word	0x1ff07a14
 801b9f8:	1ff07a18 	.word	0x1ff07a18
 801b9fc:	2000035e 	.word	0x2000035e
 801ba00:	2000036e 	.word	0x2000036e

0801ba04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801ba04:	b480      	push	{r7}
 801ba06:	b087      	sub	sp, #28
 801ba08:	af00      	add	r7, sp, #0
 801ba0a:	60f8      	str	r0, [r7, #12]
 801ba0c:	60b9      	str	r1, [r7, #8]
 801ba0e:	4613      	mov	r3, r2
 801ba10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801ba12:	2300      	movs	r3, #0
 801ba14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801ba16:	2300      	movs	r3, #0
 801ba18:	75fb      	strb	r3, [r7, #23]
 801ba1a:	e027      	b.n	801ba6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801ba1c:	68fb      	ldr	r3, [r7, #12]
 801ba1e:	0f1b      	lsrs	r3, r3, #28
 801ba20:	2b09      	cmp	r3, #9
 801ba22:	d80b      	bhi.n	801ba3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801ba24:	68fb      	ldr	r3, [r7, #12]
 801ba26:	0f1b      	lsrs	r3, r3, #28
 801ba28:	b2da      	uxtb	r2, r3
 801ba2a:	7dfb      	ldrb	r3, [r7, #23]
 801ba2c:	005b      	lsls	r3, r3, #1
 801ba2e:	4619      	mov	r1, r3
 801ba30:	68bb      	ldr	r3, [r7, #8]
 801ba32:	440b      	add	r3, r1
 801ba34:	3230      	adds	r2, #48	; 0x30
 801ba36:	b2d2      	uxtb	r2, r2
 801ba38:	701a      	strb	r2, [r3, #0]
 801ba3a:	e00a      	b.n	801ba52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801ba3c:	68fb      	ldr	r3, [r7, #12]
 801ba3e:	0f1b      	lsrs	r3, r3, #28
 801ba40:	b2da      	uxtb	r2, r3
 801ba42:	7dfb      	ldrb	r3, [r7, #23]
 801ba44:	005b      	lsls	r3, r3, #1
 801ba46:	4619      	mov	r1, r3
 801ba48:	68bb      	ldr	r3, [r7, #8]
 801ba4a:	440b      	add	r3, r1
 801ba4c:	3237      	adds	r2, #55	; 0x37
 801ba4e:	b2d2      	uxtb	r2, r2
 801ba50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801ba52:	68fb      	ldr	r3, [r7, #12]
 801ba54:	011b      	lsls	r3, r3, #4
 801ba56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801ba58:	7dfb      	ldrb	r3, [r7, #23]
 801ba5a:	005b      	lsls	r3, r3, #1
 801ba5c:	3301      	adds	r3, #1
 801ba5e:	68ba      	ldr	r2, [r7, #8]
 801ba60:	4413      	add	r3, r2
 801ba62:	2200      	movs	r2, #0
 801ba64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801ba66:	7dfb      	ldrb	r3, [r7, #23]
 801ba68:	3301      	adds	r3, #1
 801ba6a:	75fb      	strb	r3, [r7, #23]
 801ba6c:	7dfa      	ldrb	r2, [r7, #23]
 801ba6e:	79fb      	ldrb	r3, [r7, #7]
 801ba70:	429a      	cmp	r2, r3
 801ba72:	d3d3      	bcc.n	801ba1c <IntToUnicode+0x18>
  }
}
 801ba74:	bf00      	nop
 801ba76:	bf00      	nop
 801ba78:	371c      	adds	r7, #28
 801ba7a:	46bd      	mov	sp, r7
 801ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba80:	4770      	bx	lr

0801ba82 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801ba82:	b580      	push	{r7, lr}
 801ba84:	b082      	sub	sp, #8
 801ba86:	af00      	add	r7, sp, #0
 801ba88:	4603      	mov	r3, r0
 801ba8a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
   BSP_SD_Init();
 801ba8c:	f7f9 fe32 	bl	80156f4 <BSP_SD_Init>
   return 0;
 801ba90:	2300      	movs	r3, #0

  /* USER CODE END 2 */
}
 801ba92:	4618      	mov	r0, r3
 801ba94:	3708      	adds	r7, #8
 801ba96:	46bd      	mov	sp, r7
 801ba98:	bd80      	pop	{r7, pc}

0801ba9a <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801ba9a:	b580      	push	{r7, lr}
 801ba9c:	b08e      	sub	sp, #56	; 0x38
 801ba9e:	af00      	add	r7, sp, #0
 801baa0:	4603      	mov	r3, r0
 801baa2:	60b9      	str	r1, [r7, #8]
 801baa4:	607a      	str	r2, [r7, #4]
 801baa6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  HAL_SD_CardInfoTypeDef info;
  int8_t ret = -1;  
 801baa8:	23ff      	movs	r3, #255	; 0xff
 801baaa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 801baae:	f7f9 febe 	bl	801582e <BSP_SD_IsDetected>
 801bab2:	4603      	mov	r3, r0
 801bab4:	2b00      	cmp	r3, #0
 801bab6:	d00f      	beq.n	801bad8 <STORAGE_GetCapacity_FS+0x3e>
  {
    BSP_SD_GetCardInfo(&info);
 801bab8:	f107 0314 	add.w	r3, r7, #20
 801babc:	4618      	mov	r0, r3
 801babe:	f7f9 fe83 	bl	80157c8 <BSP_SD_GetCardInfo>
    
    *block_num =  info.LogBlockNbr  - 1;
 801bac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bac4:	1e5a      	subs	r2, r3, #1
 801bac6:	68bb      	ldr	r3, [r7, #8]
 801bac8:	601a      	str	r2, [r3, #0]
    *block_size = info.LogBlockSize;
 801baca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bacc:	b29a      	uxth	r2, r3
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	801a      	strh	r2, [r3, #0]
    ret = 0;
 801bad2:	2300      	movs	r3, #0
 801bad4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  return ret;
 801bad8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 801badc:	4618      	mov	r0, r3
 801bade:	3738      	adds	r7, #56	; 0x38
 801bae0:	46bd      	mov	sp, r7
 801bae2:	bd80      	pop	{r7, pc}

0801bae4 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801bae4:	b580      	push	{r7, lr}
 801bae6:	b084      	sub	sp, #16
 801bae8:	af00      	add	r7, sp, #0
 801baea:	4603      	mov	r3, r0
 801baec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
static int8_t prev_status = 0;
  int8_t ret = -1;
 801baee:	23ff      	movs	r3, #255	; 0xff
 801baf0:	73fb      	strb	r3, [r7, #15]
  
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 801baf2:	f7f9 fe9c 	bl	801582e <BSP_SD_IsDetected>
 801baf6:	4603      	mov	r3, r0
 801baf8:	2b00      	cmp	r3, #0
 801bafa:	d011      	beq.n	801bb20 <STORAGE_IsReady_FS+0x3c>
  {
    if(prev_status < 0)
 801bafc:	4b0f      	ldr	r3, [pc, #60]	; (801bb3c <STORAGE_IsReady_FS+0x58>)
 801bafe:	f993 3000 	ldrsb.w	r3, [r3]
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	da04      	bge.n	801bb10 <STORAGE_IsReady_FS+0x2c>
    {
      BSP_SD_Init();
 801bb06:	f7f9 fdf5 	bl	80156f4 <BSP_SD_Init>
      prev_status = 0;
 801bb0a:	4b0c      	ldr	r3, [pc, #48]	; (801bb3c <STORAGE_IsReady_FS+0x58>)
 801bb0c:	2200      	movs	r2, #0
 801bb0e:	701a      	strb	r2, [r3, #0]
      
    }
    if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801bb10:	f7f9 fe4a 	bl	80157a8 <BSP_SD_GetCardState>
 801bb14:	4603      	mov	r3, r0
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	d10a      	bne.n	801bb30 <STORAGE_IsReady_FS+0x4c>
    {
      ret = 0;
 801bb1a:	2300      	movs	r3, #0
 801bb1c:	73fb      	strb	r3, [r7, #15]
 801bb1e:	e007      	b.n	801bb30 <STORAGE_IsReady_FS+0x4c>
    }
  }
  else if(prev_status == 0)
 801bb20:	4b06      	ldr	r3, [pc, #24]	; (801bb3c <STORAGE_IsReady_FS+0x58>)
 801bb22:	f993 3000 	ldrsb.w	r3, [r3]
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d102      	bne.n	801bb30 <STORAGE_IsReady_FS+0x4c>
  {
    prev_status = -1;
 801bb2a:	4b04      	ldr	r3, [pc, #16]	; (801bb3c <STORAGE_IsReady_FS+0x58>)
 801bb2c:	22ff      	movs	r2, #255	; 0xff
 801bb2e:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801bb30:	f997 300f 	ldrsb.w	r3, [r7, #15]
  /* USER CODE END 4 */
}
 801bb34:	4618      	mov	r0, r3
 801bb36:	3710      	adds	r7, #16
 801bb38:	46bd      	mov	sp, r7
 801bb3a:	bd80      	pop	{r7, pc}
 801bb3c:	20001bbc 	.word	0x20001bbc

0801bb40 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801bb40:	b480      	push	{r7}
 801bb42:	b083      	sub	sp, #12
 801bb44:	af00      	add	r7, sp, #0
 801bb46:	4603      	mov	r3, r0
 801bb48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801bb4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801bb4c:	4618      	mov	r0, r3
 801bb4e:	370c      	adds	r7, #12
 801bb50:	46bd      	mov	sp, r7
 801bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb56:	4770      	bx	lr

0801bb58 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801bb58:	b580      	push	{r7, lr}
 801bb5a:	b086      	sub	sp, #24
 801bb5c:	af00      	add	r7, sp, #0
 801bb5e:	60b9      	str	r1, [r7, #8]
 801bb60:	607a      	str	r2, [r7, #4]
 801bb62:	461a      	mov	r2, r3
 801bb64:	4603      	mov	r3, r0
 801bb66:	73fb      	strb	r3, [r7, #15]
 801bb68:	4613      	mov	r3, r2
 801bb6a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
int8_t ret = -1;  
 801bb6c:	23ff      	movs	r3, #255	; 0xff
 801bb6e:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 801bb70:	f7f9 fe5d 	bl	801582e <BSP_SD_IsDetected>
 801bb74:	4603      	mov	r3, r0
 801bb76:	2b00      	cmp	r3, #0
 801bb78:	d00d      	beq.n	801bb96 <STORAGE_Read_FS+0x3e>
  {  
    BSP_SD_ReadBlocks_DMA((uint32_t *)buf, blk_addr, blk_len);
 801bb7a:	89bb      	ldrh	r3, [r7, #12]
 801bb7c:	461a      	mov	r2, r3
 801bb7e:	6879      	ldr	r1, [r7, #4]
 801bb80:	68b8      	ldr	r0, [r7, #8]
 801bb82:	f7f9 fddd 	bl	8015740 <BSP_SD_ReadBlocks_DMA>
    /* Wait for Rx Transfer completion */
   // while (sdReadStatus == 0){}
   // sdReadStatus = 0;
 
    /* Wait until SD card is ready to use for new operation */
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK){}
 801bb86:	bf00      	nop
 801bb88:	f7f9 fe0e 	bl	80157a8 <BSP_SD_GetCardState>
 801bb8c:	4603      	mov	r3, r0
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	d1fa      	bne.n	801bb88 <STORAGE_Read_FS+0x30>
    ret = 0;
 801bb92:	2300      	movs	r3, #0
 801bb94:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 801bb96:	f997 3017 	ldrsb.w	r3, [r7, #23]

  /* USER CODE END 6 */
}
 801bb9a:	4618      	mov	r0, r3
 801bb9c:	3718      	adds	r7, #24
 801bb9e:	46bd      	mov	sp, r7
 801bba0:	bd80      	pop	{r7, pc}

0801bba2 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801bba2:	b580      	push	{r7, lr}
 801bba4:	b086      	sub	sp, #24
 801bba6:	af00      	add	r7, sp, #0
 801bba8:	60b9      	str	r1, [r7, #8]
 801bbaa:	607a      	str	r2, [r7, #4]
 801bbac:	461a      	mov	r2, r3
 801bbae:	4603      	mov	r3, r0
 801bbb0:	73fb      	strb	r3, [r7, #15]
 801bbb2:	4613      	mov	r3, r2
 801bbb4:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
int8_t ret = -1;  
 801bbb6:	23ff      	movs	r3, #255	; 0xff
 801bbb8:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 801bbba:	f7f9 fe38 	bl	801582e <BSP_SD_IsDetected>
 801bbbe:	4603      	mov	r3, r0
 801bbc0:	2b00      	cmp	r3, #0
 801bbc2:	d00d      	beq.n	801bbe0 <STORAGE_Write_FS+0x3e>
  { 
    BSP_SD_WriteBlocks_DMA((uint32_t *)buf, blk_addr, blk_len);
 801bbc4:	89bb      	ldrh	r3, [r7, #12]
 801bbc6:	461a      	mov	r2, r3
 801bbc8:	6879      	ldr	r1, [r7, #4]
 801bbca:	68b8      	ldr	r0, [r7, #8]
 801bbcc:	f7f9 fdd2 	bl	8015774 <BSP_SD_WriteBlocks_DMA>
    /* Wait for Tx Transfer completion */
    //while (sdWriteStatus == 0){}
    //sdWriteStatus = 0;
    
    /* Wait until SD card is ready to use for new operation */
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK){}
 801bbd0:	bf00      	nop
 801bbd2:	f7f9 fde9 	bl	80157a8 <BSP_SD_GetCardState>
 801bbd6:	4603      	mov	r3, r0
 801bbd8:	2b00      	cmp	r3, #0
 801bbda:	d1fa      	bne.n	801bbd2 <STORAGE_Write_FS+0x30>
    ret = 0;
 801bbdc:	2300      	movs	r3, #0
 801bbde:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 801bbe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801bbe4:	4618      	mov	r0, r3
 801bbe6:	3718      	adds	r7, #24
 801bbe8:	46bd      	mov	sp, r7
 801bbea:	bd80      	pop	{r7, pc}

0801bbec <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801bbec:	b480      	push	{r7}
 801bbee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801bbf0:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801bbf2:	4618      	mov	r0, r3
 801bbf4:	46bd      	mov	sp, r7
 801bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbfa:	4770      	bx	lr

0801bbfc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801bbfc:	b580      	push	{r7, lr}
 801bbfe:	b08a      	sub	sp, #40	; 0x28
 801bc00:	af00      	add	r7, sp, #0
 801bc02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801bc04:	f107 0314 	add.w	r3, r7, #20
 801bc08:	2200      	movs	r2, #0
 801bc0a:	601a      	str	r2, [r3, #0]
 801bc0c:	605a      	str	r2, [r3, #4]
 801bc0e:	609a      	str	r2, [r3, #8]
 801bc10:	60da      	str	r2, [r3, #12]
 801bc12:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	681b      	ldr	r3, [r3, #0]
 801bc18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801bc1c:	d149      	bne.n	801bcb2 <HAL_PCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801bc1e:	4b27      	ldr	r3, [pc, #156]	; (801bcbc <HAL_PCD_MspInit+0xc0>)
 801bc20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc22:	4a26      	ldr	r2, [pc, #152]	; (801bcbc <HAL_PCD_MspInit+0xc0>)
 801bc24:	f043 0301 	orr.w	r3, r3, #1
 801bc28:	6313      	str	r3, [r2, #48]	; 0x30
 801bc2a:	4b24      	ldr	r3, [pc, #144]	; (801bcbc <HAL_PCD_MspInit+0xc0>)
 801bc2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc2e:	f003 0301 	and.w	r3, r3, #1
 801bc32:	613b      	str	r3, [r7, #16]
 801bc34:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 801bc36:	f44f 7300 	mov.w	r3, #512	; 0x200
 801bc3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801bc3c:	2300      	movs	r3, #0
 801bc3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bc40:	2300      	movs	r3, #0
 801bc42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 801bc44:	f107 0314 	add.w	r3, r7, #20
 801bc48:	4619      	mov	r1, r3
 801bc4a:	481d      	ldr	r0, [pc, #116]	; (801bcc0 <HAL_PCD_MspInit+0xc4>)
 801bc4c:	f7ee fd08 	bl	800a660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_D_N_Pin|USB_D_P_Pin;
 801bc50:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801bc54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bc56:	2302      	movs	r3, #2
 801bc58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bc5a:	2300      	movs	r3, #0
 801bc5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bc5e:	2303      	movs	r3, #3
 801bc60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801bc62:	230a      	movs	r3, #10
 801bc64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801bc66:	f107 0314 	add.w	r3, r7, #20
 801bc6a:	4619      	mov	r1, r3
 801bc6c:	4814      	ldr	r0, [pc, #80]	; (801bcc0 <HAL_PCD_MspInit+0xc4>)
 801bc6e:	f7ee fcf7 	bl	800a660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801bc72:	4b12      	ldr	r3, [pc, #72]	; (801bcbc <HAL_PCD_MspInit+0xc0>)
 801bc74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bc76:	4a11      	ldr	r2, [pc, #68]	; (801bcbc <HAL_PCD_MspInit+0xc0>)
 801bc78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bc7c:	6353      	str	r3, [r2, #52]	; 0x34
 801bc7e:	4b0f      	ldr	r3, [pc, #60]	; (801bcbc <HAL_PCD_MspInit+0xc0>)
 801bc80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bc82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bc86:	60fb      	str	r3, [r7, #12]
 801bc88:	68fb      	ldr	r3, [r7, #12]
 801bc8a:	4b0c      	ldr	r3, [pc, #48]	; (801bcbc <HAL_PCD_MspInit+0xc0>)
 801bc8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc8e:	4a0b      	ldr	r2, [pc, #44]	; (801bcbc <HAL_PCD_MspInit+0xc0>)
 801bc90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801bc94:	6453      	str	r3, [r2, #68]	; 0x44
 801bc96:	4b09      	ldr	r3, [pc, #36]	; (801bcbc <HAL_PCD_MspInit+0xc0>)
 801bc98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801bc9e:	60bb      	str	r3, [r7, #8]
 801bca0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801bca2:	2200      	movs	r2, #0
 801bca4:	2105      	movs	r1, #5
 801bca6:	2043      	movs	r0, #67	; 0x43
 801bca8:	f7ed ff97 	bl	8009bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801bcac:	2043      	movs	r0, #67	; 0x43
 801bcae:	f7ed ffb0 	bl	8009c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801bcb2:	bf00      	nop
 801bcb4:	3728      	adds	r7, #40	; 0x28
 801bcb6:	46bd      	mov	sp, r7
 801bcb8:	bd80      	pop	{r7, pc}
 801bcba:	bf00      	nop
 801bcbc:	40023800 	.word	0x40023800
 801bcc0:	40020000 	.word	0x40020000

0801bcc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bcc4:	b580      	push	{r7, lr}
 801bcc6:	b082      	sub	sp, #8
 801bcc8:	af00      	add	r7, sp, #0
 801bcca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801bccc:	687b      	ldr	r3, [r7, #4]
 801bcce:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801bcd8:	4619      	mov	r1, r3
 801bcda:	4610      	mov	r0, r2
 801bcdc:	f7fb fd27 	bl	801772e <USBD_LL_SetupStage>
}
 801bce0:	bf00      	nop
 801bce2:	3708      	adds	r7, #8
 801bce4:	46bd      	mov	sp, r7
 801bce6:	bd80      	pop	{r7, pc}

0801bce8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bce8:	b580      	push	{r7, lr}
 801bcea:	b082      	sub	sp, #8
 801bcec:	af00      	add	r7, sp, #0
 801bcee:	6078      	str	r0, [r7, #4]
 801bcf0:	460b      	mov	r3, r1
 801bcf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 801bcfa:	78fa      	ldrb	r2, [r7, #3]
 801bcfc:	6879      	ldr	r1, [r7, #4]
 801bcfe:	4613      	mov	r3, r2
 801bd00:	00db      	lsls	r3, r3, #3
 801bd02:	1a9b      	subs	r3, r3, r2
 801bd04:	009b      	lsls	r3, r3, #2
 801bd06:	440b      	add	r3, r1
 801bd08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bd0c:	681a      	ldr	r2, [r3, #0]
 801bd0e:	78fb      	ldrb	r3, [r7, #3]
 801bd10:	4619      	mov	r1, r3
 801bd12:	f7fb fd61 	bl	80177d8 <USBD_LL_DataOutStage>
}
 801bd16:	bf00      	nop
 801bd18:	3708      	adds	r7, #8
 801bd1a:	46bd      	mov	sp, r7
 801bd1c:	bd80      	pop	{r7, pc}

0801bd1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bd1e:	b580      	push	{r7, lr}
 801bd20:	b082      	sub	sp, #8
 801bd22:	af00      	add	r7, sp, #0
 801bd24:	6078      	str	r0, [r7, #4]
 801bd26:	460b      	mov	r3, r1
 801bd28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 801bd30:	78fa      	ldrb	r2, [r7, #3]
 801bd32:	6879      	ldr	r1, [r7, #4]
 801bd34:	4613      	mov	r3, r2
 801bd36:	00db      	lsls	r3, r3, #3
 801bd38:	1a9b      	subs	r3, r3, r2
 801bd3a:	009b      	lsls	r3, r3, #2
 801bd3c:	440b      	add	r3, r1
 801bd3e:	3348      	adds	r3, #72	; 0x48
 801bd40:	681a      	ldr	r2, [r3, #0]
 801bd42:	78fb      	ldrb	r3, [r7, #3]
 801bd44:	4619      	mov	r1, r3
 801bd46:	f7fb fdaa 	bl	801789e <USBD_LL_DataInStage>
}
 801bd4a:	bf00      	nop
 801bd4c:	3708      	adds	r7, #8
 801bd4e:	46bd      	mov	sp, r7
 801bd50:	bd80      	pop	{r7, pc}

0801bd52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bd52:	b580      	push	{r7, lr}
 801bd54:	b082      	sub	sp, #8
 801bd56:	af00      	add	r7, sp, #0
 801bd58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801bd60:	4618      	mov	r0, r3
 801bd62:	f7fb feae 	bl	8017ac2 <USBD_LL_SOF>
}
 801bd66:	bf00      	nop
 801bd68:	3708      	adds	r7, #8
 801bd6a:	46bd      	mov	sp, r7
 801bd6c:	bd80      	pop	{r7, pc}

0801bd6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bd6e:	b580      	push	{r7, lr}
 801bd70:	b084      	sub	sp, #16
 801bd72:	af00      	add	r7, sp, #0
 801bd74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801bd76:	2301      	movs	r3, #1
 801bd78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	68db      	ldr	r3, [r3, #12]
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d102      	bne.n	801bd88 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801bd82:	2300      	movs	r3, #0
 801bd84:	73fb      	strb	r3, [r7, #15]
 801bd86:	e008      	b.n	801bd9a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	68db      	ldr	r3, [r3, #12]
 801bd8c:	2b02      	cmp	r3, #2
 801bd8e:	d102      	bne.n	801bd96 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801bd90:	2301      	movs	r3, #1
 801bd92:	73fb      	strb	r3, [r7, #15]
 801bd94:	e001      	b.n	801bd9a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801bd96:	f7eb fed9 	bl	8007b4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801bda0:	7bfa      	ldrb	r2, [r7, #15]
 801bda2:	4611      	mov	r1, r2
 801bda4:	4618      	mov	r0, r3
 801bda6:	f7fb fe51 	bl	8017a4c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801bdaa:	687b      	ldr	r3, [r7, #4]
 801bdac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801bdb0:	4618      	mov	r0, r3
 801bdb2:	f7fb fe0a 	bl	80179ca <USBD_LL_Reset>
}
 801bdb6:	bf00      	nop
 801bdb8:	3710      	adds	r7, #16
 801bdba:	46bd      	mov	sp, r7
 801bdbc:	bd80      	pop	{r7, pc}
	...

0801bdc0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bdc0:	b580      	push	{r7, lr}
 801bdc2:	b082      	sub	sp, #8
 801bdc4:	af00      	add	r7, sp, #0
 801bdc6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801bdce:	4618      	mov	r0, r3
 801bdd0:	f7fb fe4c 	bl	8017a6c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801bddc:	681b      	ldr	r3, [r3, #0]
 801bdde:	687a      	ldr	r2, [r7, #4]
 801bde0:	6812      	ldr	r2, [r2, #0]
 801bde2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801bde6:	f043 0301 	orr.w	r3, r3, #1
 801bdea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	6a1b      	ldr	r3, [r3, #32]
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d005      	beq.n	801be00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801bdf4:	4b04      	ldr	r3, [pc, #16]	; (801be08 <HAL_PCD_SuspendCallback+0x48>)
 801bdf6:	691b      	ldr	r3, [r3, #16]
 801bdf8:	4a03      	ldr	r2, [pc, #12]	; (801be08 <HAL_PCD_SuspendCallback+0x48>)
 801bdfa:	f043 0306 	orr.w	r3, r3, #6
 801bdfe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801be00:	bf00      	nop
 801be02:	3708      	adds	r7, #8
 801be04:	46bd      	mov	sp, r7
 801be06:	bd80      	pop	{r7, pc}
 801be08:	e000ed00 	.word	0xe000ed00

0801be0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801be0c:	b580      	push	{r7, lr}
 801be0e:	b082      	sub	sp, #8
 801be10:	af00      	add	r7, sp, #0
 801be12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801be1a:	4618      	mov	r0, r3
 801be1c:	f7fb fe3b 	bl	8017a96 <USBD_LL_Resume>
}
 801be20:	bf00      	nop
 801be22:	3708      	adds	r7, #8
 801be24:	46bd      	mov	sp, r7
 801be26:	bd80      	pop	{r7, pc}

0801be28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801be28:	b580      	push	{r7, lr}
 801be2a:	b082      	sub	sp, #8
 801be2c:	af00      	add	r7, sp, #0
 801be2e:	6078      	str	r0, [r7, #4]
 801be30:	460b      	mov	r3, r1
 801be32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801be3a:	78fa      	ldrb	r2, [r7, #3]
 801be3c:	4611      	mov	r1, r2
 801be3e:	4618      	mov	r0, r3
 801be40:	f7fb fe66 	bl	8017b10 <USBD_LL_IsoOUTIncomplete>
}
 801be44:	bf00      	nop
 801be46:	3708      	adds	r7, #8
 801be48:	46bd      	mov	sp, r7
 801be4a:	bd80      	pop	{r7, pc}

0801be4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801be4c:	b580      	push	{r7, lr}
 801be4e:	b082      	sub	sp, #8
 801be50:	af00      	add	r7, sp, #0
 801be52:	6078      	str	r0, [r7, #4]
 801be54:	460b      	mov	r3, r1
 801be56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801be5e:	78fa      	ldrb	r2, [r7, #3]
 801be60:	4611      	mov	r1, r2
 801be62:	4618      	mov	r0, r3
 801be64:	f7fb fe47 	bl	8017af6 <USBD_LL_IsoINIncomplete>
}
 801be68:	bf00      	nop
 801be6a:	3708      	adds	r7, #8
 801be6c:	46bd      	mov	sp, r7
 801be6e:	bd80      	pop	{r7, pc}

0801be70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801be70:	b580      	push	{r7, lr}
 801be72:	b082      	sub	sp, #8
 801be74:	af00      	add	r7, sp, #0
 801be76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801be7e:	4618      	mov	r0, r3
 801be80:	f7fb fe53 	bl	8017b2a <USBD_LL_DevConnected>
}
 801be84:	bf00      	nop
 801be86:	3708      	adds	r7, #8
 801be88:	46bd      	mov	sp, r7
 801be8a:	bd80      	pop	{r7, pc}

0801be8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801be8c:	b580      	push	{r7, lr}
 801be8e:	b082      	sub	sp, #8
 801be90:	af00      	add	r7, sp, #0
 801be92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801be9a:	4618      	mov	r0, r3
 801be9c:	f7fb fe50 	bl	8017b40 <USBD_LL_DevDisconnected>
}
 801bea0:	bf00      	nop
 801bea2:	3708      	adds	r7, #8
 801bea4:	46bd      	mov	sp, r7
 801bea6:	bd80      	pop	{r7, pc}

0801bea8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801bea8:	b580      	push	{r7, lr}
 801beaa:	b082      	sub	sp, #8
 801beac:	af00      	add	r7, sp, #0
 801beae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	781b      	ldrb	r3, [r3, #0]
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d13c      	bne.n	801bf32 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801beb8:	4a20      	ldr	r2, [pc, #128]	; (801bf3c <USBD_LL_Init+0x94>)
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	4a1e      	ldr	r2, [pc, #120]	; (801bf3c <USBD_LL_Init+0x94>)
 801bec4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801bec8:	4b1c      	ldr	r3, [pc, #112]	; (801bf3c <USBD_LL_Init+0x94>)
 801beca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801bece:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801bed0:	4b1a      	ldr	r3, [pc, #104]	; (801bf3c <USBD_LL_Init+0x94>)
 801bed2:	2206      	movs	r2, #6
 801bed4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801bed6:	4b19      	ldr	r3, [pc, #100]	; (801bf3c <USBD_LL_Init+0x94>)
 801bed8:	2200      	movs	r2, #0
 801beda:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801bedc:	4b17      	ldr	r3, [pc, #92]	; (801bf3c <USBD_LL_Init+0x94>)
 801bede:	2202      	movs	r2, #2
 801bee0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801bee2:	4b16      	ldr	r3, [pc, #88]	; (801bf3c <USBD_LL_Init+0x94>)
 801bee4:	2200      	movs	r2, #0
 801bee6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801bee8:	4b14      	ldr	r3, [pc, #80]	; (801bf3c <USBD_LL_Init+0x94>)
 801beea:	2200      	movs	r2, #0
 801beec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801beee:	4b13      	ldr	r3, [pc, #76]	; (801bf3c <USBD_LL_Init+0x94>)
 801bef0:	2200      	movs	r2, #0
 801bef2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 801bef4:	4b11      	ldr	r3, [pc, #68]	; (801bf3c <USBD_LL_Init+0x94>)
 801bef6:	2201      	movs	r2, #1
 801bef8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801befa:	4b10      	ldr	r3, [pc, #64]	; (801bf3c <USBD_LL_Init+0x94>)
 801befc:	2201      	movs	r2, #1
 801befe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801bf00:	4b0e      	ldr	r3, [pc, #56]	; (801bf3c <USBD_LL_Init+0x94>)
 801bf02:	2200      	movs	r2, #0
 801bf04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801bf06:	480d      	ldr	r0, [pc, #52]	; (801bf3c <USBD_LL_Init+0x94>)
 801bf08:	f7f0 fd73 	bl	800c9f2 <HAL_PCD_Init>
 801bf0c:	4603      	mov	r3, r0
 801bf0e:	2b00      	cmp	r3, #0
 801bf10:	d001      	beq.n	801bf16 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801bf12:	f7eb fe1b 	bl	8007b4c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801bf16:	2180      	movs	r1, #128	; 0x80
 801bf18:	4808      	ldr	r0, [pc, #32]	; (801bf3c <USBD_LL_Init+0x94>)
 801bf1a:	f7f1 ff20 	bl	800dd5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801bf1e:	2240      	movs	r2, #64	; 0x40
 801bf20:	2100      	movs	r1, #0
 801bf22:	4806      	ldr	r0, [pc, #24]	; (801bf3c <USBD_LL_Init+0x94>)
 801bf24:	f7f1 fed4 	bl	800dcd0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801bf28:	2280      	movs	r2, #128	; 0x80
 801bf2a:	2101      	movs	r1, #1
 801bf2c:	4803      	ldr	r0, [pc, #12]	; (801bf3c <USBD_LL_Init+0x94>)
 801bf2e:	f7f1 fecf 	bl	800dcd0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801bf32:	2300      	movs	r3, #0
}
 801bf34:	4618      	mov	r0, r3
 801bf36:	3708      	adds	r7, #8
 801bf38:	46bd      	mov	sp, r7
 801bf3a:	bd80      	pop	{r7, pc}
 801bf3c:	20009b04 	.word	0x20009b04

0801bf40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801bf40:	b580      	push	{r7, lr}
 801bf42:	b084      	sub	sp, #16
 801bf44:	af00      	add	r7, sp, #0
 801bf46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bf48:	2300      	movs	r3, #0
 801bf4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bf4c:	2300      	movs	r3, #0
 801bf4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801bf56:	4618      	mov	r0, r3
 801bf58:	f7f0 fe6f 	bl	800cc3a <HAL_PCD_Start>
 801bf5c:	4603      	mov	r3, r0
 801bf5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bf60:	7bfb      	ldrb	r3, [r7, #15]
 801bf62:	4618      	mov	r0, r3
 801bf64:	f000 f99e 	bl	801c2a4 <USBD_Get_USB_Status>
 801bf68:	4603      	mov	r3, r0
 801bf6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bf6c:	7bbb      	ldrb	r3, [r7, #14]
}
 801bf6e:	4618      	mov	r0, r3
 801bf70:	3710      	adds	r7, #16
 801bf72:	46bd      	mov	sp, r7
 801bf74:	bd80      	pop	{r7, pc}

0801bf76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801bf76:	b580      	push	{r7, lr}
 801bf78:	b084      	sub	sp, #16
 801bf7a:	af00      	add	r7, sp, #0
 801bf7c:	6078      	str	r0, [r7, #4]
 801bf7e:	4608      	mov	r0, r1
 801bf80:	4611      	mov	r1, r2
 801bf82:	461a      	mov	r2, r3
 801bf84:	4603      	mov	r3, r0
 801bf86:	70fb      	strb	r3, [r7, #3]
 801bf88:	460b      	mov	r3, r1
 801bf8a:	70bb      	strb	r3, [r7, #2]
 801bf8c:	4613      	mov	r3, r2
 801bf8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bf90:	2300      	movs	r3, #0
 801bf92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bf94:	2300      	movs	r3, #0
 801bf96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801bf9e:	78bb      	ldrb	r3, [r7, #2]
 801bfa0:	883a      	ldrh	r2, [r7, #0]
 801bfa2:	78f9      	ldrb	r1, [r7, #3]
 801bfa4:	f7f1 fa6f 	bl	800d486 <HAL_PCD_EP_Open>
 801bfa8:	4603      	mov	r3, r0
 801bfaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bfac:	7bfb      	ldrb	r3, [r7, #15]
 801bfae:	4618      	mov	r0, r3
 801bfb0:	f000 f978 	bl	801c2a4 <USBD_Get_USB_Status>
 801bfb4:	4603      	mov	r3, r0
 801bfb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bfb8:	7bbb      	ldrb	r3, [r7, #14]
}
 801bfba:	4618      	mov	r0, r3
 801bfbc:	3710      	adds	r7, #16
 801bfbe:	46bd      	mov	sp, r7
 801bfc0:	bd80      	pop	{r7, pc}

0801bfc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bfc2:	b580      	push	{r7, lr}
 801bfc4:	b084      	sub	sp, #16
 801bfc6:	af00      	add	r7, sp, #0
 801bfc8:	6078      	str	r0, [r7, #4]
 801bfca:	460b      	mov	r3, r1
 801bfcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bfce:	2300      	movs	r3, #0
 801bfd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bfd2:	2300      	movs	r3, #0
 801bfd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801bfd6:	687b      	ldr	r3, [r7, #4]
 801bfd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801bfdc:	78fa      	ldrb	r2, [r7, #3]
 801bfde:	4611      	mov	r1, r2
 801bfe0:	4618      	mov	r0, r3
 801bfe2:	f7f1 fab8 	bl	800d556 <HAL_PCD_EP_Close>
 801bfe6:	4603      	mov	r3, r0
 801bfe8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bfea:	7bfb      	ldrb	r3, [r7, #15]
 801bfec:	4618      	mov	r0, r3
 801bfee:	f000 f959 	bl	801c2a4 <USBD_Get_USB_Status>
 801bff2:	4603      	mov	r3, r0
 801bff4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bff6:	7bbb      	ldrb	r3, [r7, #14]
}
 801bff8:	4618      	mov	r0, r3
 801bffa:	3710      	adds	r7, #16
 801bffc:	46bd      	mov	sp, r7
 801bffe:	bd80      	pop	{r7, pc}

0801c000 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c000:	b580      	push	{r7, lr}
 801c002:	b084      	sub	sp, #16
 801c004:	af00      	add	r7, sp, #0
 801c006:	6078      	str	r0, [r7, #4]
 801c008:	460b      	mov	r3, r1
 801c00a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c00c:	2300      	movs	r3, #0
 801c00e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c010:	2300      	movs	r3, #0
 801c012:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c01a:	78fa      	ldrb	r2, [r7, #3]
 801c01c:	4611      	mov	r1, r2
 801c01e:	4618      	mov	r0, r3
 801c020:	f7f1 fc4a 	bl	800d8b8 <HAL_PCD_EP_Flush>
 801c024:	4603      	mov	r3, r0
 801c026:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c028:	7bfb      	ldrb	r3, [r7, #15]
 801c02a:	4618      	mov	r0, r3
 801c02c:	f000 f93a 	bl	801c2a4 <USBD_Get_USB_Status>
 801c030:	4603      	mov	r3, r0
 801c032:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c034:	7bbb      	ldrb	r3, [r7, #14]
}
 801c036:	4618      	mov	r0, r3
 801c038:	3710      	adds	r7, #16
 801c03a:	46bd      	mov	sp, r7
 801c03c:	bd80      	pop	{r7, pc}

0801c03e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c03e:	b580      	push	{r7, lr}
 801c040:	b084      	sub	sp, #16
 801c042:	af00      	add	r7, sp, #0
 801c044:	6078      	str	r0, [r7, #4]
 801c046:	460b      	mov	r3, r1
 801c048:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c04a:	2300      	movs	r3, #0
 801c04c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c04e:	2300      	movs	r3, #0
 801c050:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c058:	78fa      	ldrb	r2, [r7, #3]
 801c05a:	4611      	mov	r1, r2
 801c05c:	4618      	mov	r0, r3
 801c05e:	f7f1 fb71 	bl	800d744 <HAL_PCD_EP_SetStall>
 801c062:	4603      	mov	r3, r0
 801c064:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c066:	7bfb      	ldrb	r3, [r7, #15]
 801c068:	4618      	mov	r0, r3
 801c06a:	f000 f91b 	bl	801c2a4 <USBD_Get_USB_Status>
 801c06e:	4603      	mov	r3, r0
 801c070:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c072:	7bbb      	ldrb	r3, [r7, #14]
}
 801c074:	4618      	mov	r0, r3
 801c076:	3710      	adds	r7, #16
 801c078:	46bd      	mov	sp, r7
 801c07a:	bd80      	pop	{r7, pc}

0801c07c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c07c:	b580      	push	{r7, lr}
 801c07e:	b084      	sub	sp, #16
 801c080:	af00      	add	r7, sp, #0
 801c082:	6078      	str	r0, [r7, #4]
 801c084:	460b      	mov	r3, r1
 801c086:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c088:	2300      	movs	r3, #0
 801c08a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c08c:	2300      	movs	r3, #0
 801c08e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c096:	78fa      	ldrb	r2, [r7, #3]
 801c098:	4611      	mov	r1, r2
 801c09a:	4618      	mov	r0, r3
 801c09c:	f7f1 fbb6 	bl	800d80c <HAL_PCD_EP_ClrStall>
 801c0a0:	4603      	mov	r3, r0
 801c0a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c0a4:	7bfb      	ldrb	r3, [r7, #15]
 801c0a6:	4618      	mov	r0, r3
 801c0a8:	f000 f8fc 	bl	801c2a4 <USBD_Get_USB_Status>
 801c0ac:	4603      	mov	r3, r0
 801c0ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c0b0:	7bbb      	ldrb	r3, [r7, #14]
}
 801c0b2:	4618      	mov	r0, r3
 801c0b4:	3710      	adds	r7, #16
 801c0b6:	46bd      	mov	sp, r7
 801c0b8:	bd80      	pop	{r7, pc}

0801c0ba <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c0ba:	b480      	push	{r7}
 801c0bc:	b085      	sub	sp, #20
 801c0be:	af00      	add	r7, sp, #0
 801c0c0:	6078      	str	r0, [r7, #4]
 801c0c2:	460b      	mov	r3, r1
 801c0c4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c0cc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801c0ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	da0b      	bge.n	801c0ee <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801c0d6:	78fb      	ldrb	r3, [r7, #3]
 801c0d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c0dc:	68f9      	ldr	r1, [r7, #12]
 801c0de:	4613      	mov	r3, r2
 801c0e0:	00db      	lsls	r3, r3, #3
 801c0e2:	1a9b      	subs	r3, r3, r2
 801c0e4:	009b      	lsls	r3, r3, #2
 801c0e6:	440b      	add	r3, r1
 801c0e8:	333e      	adds	r3, #62	; 0x3e
 801c0ea:	781b      	ldrb	r3, [r3, #0]
 801c0ec:	e00b      	b.n	801c106 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801c0ee:	78fb      	ldrb	r3, [r7, #3]
 801c0f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c0f4:	68f9      	ldr	r1, [r7, #12]
 801c0f6:	4613      	mov	r3, r2
 801c0f8:	00db      	lsls	r3, r3, #3
 801c0fa:	1a9b      	subs	r3, r3, r2
 801c0fc:	009b      	lsls	r3, r3, #2
 801c0fe:	440b      	add	r3, r1
 801c100:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801c104:	781b      	ldrb	r3, [r3, #0]
  }
}
 801c106:	4618      	mov	r0, r3
 801c108:	3714      	adds	r7, #20
 801c10a:	46bd      	mov	sp, r7
 801c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c110:	4770      	bx	lr

0801c112 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801c112:	b580      	push	{r7, lr}
 801c114:	b084      	sub	sp, #16
 801c116:	af00      	add	r7, sp, #0
 801c118:	6078      	str	r0, [r7, #4]
 801c11a:	460b      	mov	r3, r1
 801c11c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c11e:	2300      	movs	r3, #0
 801c120:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c122:	2300      	movs	r3, #0
 801c124:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c12c:	78fa      	ldrb	r2, [r7, #3]
 801c12e:	4611      	mov	r1, r2
 801c130:	4618      	mov	r0, r3
 801c132:	f7f1 f983 	bl	800d43c <HAL_PCD_SetAddress>
 801c136:	4603      	mov	r3, r0
 801c138:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c13a:	7bfb      	ldrb	r3, [r7, #15]
 801c13c:	4618      	mov	r0, r3
 801c13e:	f000 f8b1 	bl	801c2a4 <USBD_Get_USB_Status>
 801c142:	4603      	mov	r3, r0
 801c144:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c146:	7bbb      	ldrb	r3, [r7, #14]
}
 801c148:	4618      	mov	r0, r3
 801c14a:	3710      	adds	r7, #16
 801c14c:	46bd      	mov	sp, r7
 801c14e:	bd80      	pop	{r7, pc}

0801c150 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801c150:	b580      	push	{r7, lr}
 801c152:	b086      	sub	sp, #24
 801c154:	af00      	add	r7, sp, #0
 801c156:	60f8      	str	r0, [r7, #12]
 801c158:	607a      	str	r2, [r7, #4]
 801c15a:	603b      	str	r3, [r7, #0]
 801c15c:	460b      	mov	r3, r1
 801c15e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c160:	2300      	movs	r3, #0
 801c162:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c164:	2300      	movs	r3, #0
 801c166:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801c16e:	7af9      	ldrb	r1, [r7, #11]
 801c170:	683b      	ldr	r3, [r7, #0]
 801c172:	687a      	ldr	r2, [r7, #4]
 801c174:	f7f1 fa9c 	bl	800d6b0 <HAL_PCD_EP_Transmit>
 801c178:	4603      	mov	r3, r0
 801c17a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c17c:	7dfb      	ldrb	r3, [r7, #23]
 801c17e:	4618      	mov	r0, r3
 801c180:	f000 f890 	bl	801c2a4 <USBD_Get_USB_Status>
 801c184:	4603      	mov	r3, r0
 801c186:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801c188:	7dbb      	ldrb	r3, [r7, #22]
}
 801c18a:	4618      	mov	r0, r3
 801c18c:	3718      	adds	r7, #24
 801c18e:	46bd      	mov	sp, r7
 801c190:	bd80      	pop	{r7, pc}

0801c192 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801c192:	b580      	push	{r7, lr}
 801c194:	b086      	sub	sp, #24
 801c196:	af00      	add	r7, sp, #0
 801c198:	60f8      	str	r0, [r7, #12]
 801c19a:	607a      	str	r2, [r7, #4]
 801c19c:	603b      	str	r3, [r7, #0]
 801c19e:	460b      	mov	r3, r1
 801c1a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c1a2:	2300      	movs	r3, #0
 801c1a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c1a6:	2300      	movs	r3, #0
 801c1a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801c1aa:	68fb      	ldr	r3, [r7, #12]
 801c1ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801c1b0:	7af9      	ldrb	r1, [r7, #11]
 801c1b2:	683b      	ldr	r3, [r7, #0]
 801c1b4:	687a      	ldr	r2, [r7, #4]
 801c1b6:	f7f1 fa18 	bl	800d5ea <HAL_PCD_EP_Receive>
 801c1ba:	4603      	mov	r3, r0
 801c1bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c1be:	7dfb      	ldrb	r3, [r7, #23]
 801c1c0:	4618      	mov	r0, r3
 801c1c2:	f000 f86f 	bl	801c2a4 <USBD_Get_USB_Status>
 801c1c6:	4603      	mov	r3, r0
 801c1c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801c1ca:	7dbb      	ldrb	r3, [r7, #22]
}
 801c1cc:	4618      	mov	r0, r3
 801c1ce:	3718      	adds	r7, #24
 801c1d0:	46bd      	mov	sp, r7
 801c1d2:	bd80      	pop	{r7, pc}

0801c1d4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c1d4:	b580      	push	{r7, lr}
 801c1d6:	b082      	sub	sp, #8
 801c1d8:	af00      	add	r7, sp, #0
 801c1da:	6078      	str	r0, [r7, #4]
 801c1dc:	460b      	mov	r3, r1
 801c1de:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c1e6:	78fa      	ldrb	r2, [r7, #3]
 801c1e8:	4611      	mov	r1, r2
 801c1ea:	4618      	mov	r0, r3
 801c1ec:	f7f1 fa48 	bl	800d680 <HAL_PCD_EP_GetRxCount>
 801c1f0:	4603      	mov	r3, r0
}
 801c1f2:	4618      	mov	r0, r3
 801c1f4:	3708      	adds	r7, #8
 801c1f6:	46bd      	mov	sp, r7
 801c1f8:	bd80      	pop	{r7, pc}
	...

0801c1fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801c1fc:	b580      	push	{r7, lr}
 801c1fe:	b082      	sub	sp, #8
 801c200:	af00      	add	r7, sp, #0
 801c202:	6078      	str	r0, [r7, #4]
 801c204:	460b      	mov	r3, r1
 801c206:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801c208:	78fb      	ldrb	r3, [r7, #3]
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	d002      	beq.n	801c214 <HAL_PCDEx_LPM_Callback+0x18>
 801c20e:	2b01      	cmp	r3, #1
 801c210:	d01f      	beq.n	801c252 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801c212:	e03b      	b.n	801c28c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	6a1b      	ldr	r3, [r3, #32]
 801c218:	2b00      	cmp	r3, #0
 801c21a:	d007      	beq.n	801c22c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801c21c:	f000 f83c 	bl	801c298 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c220:	4b1c      	ldr	r3, [pc, #112]	; (801c294 <HAL_PCDEx_LPM_Callback+0x98>)
 801c222:	691b      	ldr	r3, [r3, #16]
 801c224:	4a1b      	ldr	r2, [pc, #108]	; (801c294 <HAL_PCDEx_LPM_Callback+0x98>)
 801c226:	f023 0306 	bic.w	r3, r3, #6
 801c22a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	681b      	ldr	r3, [r3, #0]
 801c230:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801c234:	681b      	ldr	r3, [r3, #0]
 801c236:	687a      	ldr	r2, [r7, #4]
 801c238:	6812      	ldr	r2, [r2, #0]
 801c23a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801c23e:	f023 0301 	bic.w	r3, r3, #1
 801c242:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801c24a:	4618      	mov	r0, r3
 801c24c:	f7fb fc23 	bl	8017a96 <USBD_LL_Resume>
    break;
 801c250:	e01c      	b.n	801c28c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	681b      	ldr	r3, [r3, #0]
 801c256:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801c25a:	681b      	ldr	r3, [r3, #0]
 801c25c:	687a      	ldr	r2, [r7, #4]
 801c25e:	6812      	ldr	r2, [r2, #0]
 801c260:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801c264:	f043 0301 	orr.w	r3, r3, #1
 801c268:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801c270:	4618      	mov	r0, r3
 801c272:	f7fb fbfb 	bl	8017a6c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801c276:	687b      	ldr	r3, [r7, #4]
 801c278:	6a1b      	ldr	r3, [r3, #32]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d005      	beq.n	801c28a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c27e:	4b05      	ldr	r3, [pc, #20]	; (801c294 <HAL_PCDEx_LPM_Callback+0x98>)
 801c280:	691b      	ldr	r3, [r3, #16]
 801c282:	4a04      	ldr	r2, [pc, #16]	; (801c294 <HAL_PCDEx_LPM_Callback+0x98>)
 801c284:	f043 0306 	orr.w	r3, r3, #6
 801c288:	6113      	str	r3, [r2, #16]
    break;
 801c28a:	bf00      	nop
}
 801c28c:	bf00      	nop
 801c28e:	3708      	adds	r7, #8
 801c290:	46bd      	mov	sp, r7
 801c292:	bd80      	pop	{r7, pc}
 801c294:	e000ed00 	.word	0xe000ed00

0801c298 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801c298:	b580      	push	{r7, lr}
 801c29a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801c29c:	f7ea fb74 	bl	8006988 <SystemClock_Config>
}
 801c2a0:	bf00      	nop
 801c2a2:	bd80      	pop	{r7, pc}

0801c2a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801c2a4:	b480      	push	{r7}
 801c2a6:	b085      	sub	sp, #20
 801c2a8:	af00      	add	r7, sp, #0
 801c2aa:	4603      	mov	r3, r0
 801c2ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c2ae:	2300      	movs	r3, #0
 801c2b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801c2b2:	79fb      	ldrb	r3, [r7, #7]
 801c2b4:	2b03      	cmp	r3, #3
 801c2b6:	d817      	bhi.n	801c2e8 <USBD_Get_USB_Status+0x44>
 801c2b8:	a201      	add	r2, pc, #4	; (adr r2, 801c2c0 <USBD_Get_USB_Status+0x1c>)
 801c2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c2be:	bf00      	nop
 801c2c0:	0801c2d1 	.word	0x0801c2d1
 801c2c4:	0801c2d7 	.word	0x0801c2d7
 801c2c8:	0801c2dd 	.word	0x0801c2dd
 801c2cc:	0801c2e3 	.word	0x0801c2e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801c2d0:	2300      	movs	r3, #0
 801c2d2:	73fb      	strb	r3, [r7, #15]
    break;
 801c2d4:	e00b      	b.n	801c2ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801c2d6:	2303      	movs	r3, #3
 801c2d8:	73fb      	strb	r3, [r7, #15]
    break;
 801c2da:	e008      	b.n	801c2ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801c2dc:	2301      	movs	r3, #1
 801c2de:	73fb      	strb	r3, [r7, #15]
    break;
 801c2e0:	e005      	b.n	801c2ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801c2e2:	2303      	movs	r3, #3
 801c2e4:	73fb      	strb	r3, [r7, #15]
    break;
 801c2e6:	e002      	b.n	801c2ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801c2e8:	2303      	movs	r3, #3
 801c2ea:	73fb      	strb	r3, [r7, #15]
    break;
 801c2ec:	bf00      	nop
  }
  return usb_status;
 801c2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 801c2f0:	4618      	mov	r0, r3
 801c2f2:	3714      	adds	r7, #20
 801c2f4:	46bd      	mov	sp, r7
 801c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2fa:	4770      	bx	lr

0801c2fc <atoi>:
 801c2fc:	220a      	movs	r2, #10
 801c2fe:	2100      	movs	r1, #0
 801c300:	f001 bd0a 	b.w	801dd18 <strtol>

0801c304 <__errno>:
 801c304:	4b01      	ldr	r3, [pc, #4]	; (801c30c <__errno+0x8>)
 801c306:	6818      	ldr	r0, [r3, #0]
 801c308:	4770      	bx	lr
 801c30a:	bf00      	nop
 801c30c:	20000398 	.word	0x20000398

0801c310 <__libc_init_array>:
 801c310:	b570      	push	{r4, r5, r6, lr}
 801c312:	4d0d      	ldr	r5, [pc, #52]	; (801c348 <__libc_init_array+0x38>)
 801c314:	4c0d      	ldr	r4, [pc, #52]	; (801c34c <__libc_init_array+0x3c>)
 801c316:	1b64      	subs	r4, r4, r5
 801c318:	10a4      	asrs	r4, r4, #2
 801c31a:	2600      	movs	r6, #0
 801c31c:	42a6      	cmp	r6, r4
 801c31e:	d109      	bne.n	801c334 <__libc_init_array+0x24>
 801c320:	4d0b      	ldr	r5, [pc, #44]	; (801c350 <__libc_init_array+0x40>)
 801c322:	4c0c      	ldr	r4, [pc, #48]	; (801c354 <__libc_init_array+0x44>)
 801c324:	f004 fb42 	bl	80209ac <_init>
 801c328:	1b64      	subs	r4, r4, r5
 801c32a:	10a4      	asrs	r4, r4, #2
 801c32c:	2600      	movs	r6, #0
 801c32e:	42a6      	cmp	r6, r4
 801c330:	d105      	bne.n	801c33e <__libc_init_array+0x2e>
 801c332:	bd70      	pop	{r4, r5, r6, pc}
 801c334:	f855 3b04 	ldr.w	r3, [r5], #4
 801c338:	4798      	blx	r3
 801c33a:	3601      	adds	r6, #1
 801c33c:	e7ee      	b.n	801c31c <__libc_init_array+0xc>
 801c33e:	f855 3b04 	ldr.w	r3, [r5], #4
 801c342:	4798      	blx	r3
 801c344:	3601      	adds	r6, #1
 801c346:	e7f2      	b.n	801c32e <__libc_init_array+0x1e>
 801c348:	08022d4c 	.word	0x08022d4c
 801c34c:	08022d4c 	.word	0x08022d4c
 801c350:	08022d4c 	.word	0x08022d4c
 801c354:	08022d50 	.word	0x08022d50

0801c358 <malloc>:
 801c358:	4b02      	ldr	r3, [pc, #8]	; (801c364 <malloc+0xc>)
 801c35a:	4601      	mov	r1, r0
 801c35c:	6818      	ldr	r0, [r3, #0]
 801c35e:	f000 b871 	b.w	801c444 <_malloc_r>
 801c362:	bf00      	nop
 801c364:	20000398 	.word	0x20000398

0801c368 <free>:
 801c368:	4b02      	ldr	r3, [pc, #8]	; (801c374 <free+0xc>)
 801c36a:	4601      	mov	r1, r0
 801c36c:	6818      	ldr	r0, [r3, #0]
 801c36e:	f000 b819 	b.w	801c3a4 <_free_r>
 801c372:	bf00      	nop
 801c374:	20000398 	.word	0x20000398

0801c378 <memcpy>:
 801c378:	440a      	add	r2, r1
 801c37a:	4291      	cmp	r1, r2
 801c37c:	f100 33ff 	add.w	r3, r0, #4294967295
 801c380:	d100      	bne.n	801c384 <memcpy+0xc>
 801c382:	4770      	bx	lr
 801c384:	b510      	push	{r4, lr}
 801c386:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c38a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c38e:	4291      	cmp	r1, r2
 801c390:	d1f9      	bne.n	801c386 <memcpy+0xe>
 801c392:	bd10      	pop	{r4, pc}

0801c394 <memset>:
 801c394:	4402      	add	r2, r0
 801c396:	4603      	mov	r3, r0
 801c398:	4293      	cmp	r3, r2
 801c39a:	d100      	bne.n	801c39e <memset+0xa>
 801c39c:	4770      	bx	lr
 801c39e:	f803 1b01 	strb.w	r1, [r3], #1
 801c3a2:	e7f9      	b.n	801c398 <memset+0x4>

0801c3a4 <_free_r>:
 801c3a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c3a6:	2900      	cmp	r1, #0
 801c3a8:	d048      	beq.n	801c43c <_free_r+0x98>
 801c3aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c3ae:	9001      	str	r0, [sp, #4]
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	f1a1 0404 	sub.w	r4, r1, #4
 801c3b6:	bfb8      	it	lt
 801c3b8:	18e4      	addlt	r4, r4, r3
 801c3ba:	f002 feef 	bl	801f19c <__malloc_lock>
 801c3be:	4a20      	ldr	r2, [pc, #128]	; (801c440 <_free_r+0x9c>)
 801c3c0:	9801      	ldr	r0, [sp, #4]
 801c3c2:	6813      	ldr	r3, [r2, #0]
 801c3c4:	4615      	mov	r5, r2
 801c3c6:	b933      	cbnz	r3, 801c3d6 <_free_r+0x32>
 801c3c8:	6063      	str	r3, [r4, #4]
 801c3ca:	6014      	str	r4, [r2, #0]
 801c3cc:	b003      	add	sp, #12
 801c3ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c3d2:	f002 bee9 	b.w	801f1a8 <__malloc_unlock>
 801c3d6:	42a3      	cmp	r3, r4
 801c3d8:	d90b      	bls.n	801c3f2 <_free_r+0x4e>
 801c3da:	6821      	ldr	r1, [r4, #0]
 801c3dc:	1862      	adds	r2, r4, r1
 801c3de:	4293      	cmp	r3, r2
 801c3e0:	bf04      	itt	eq
 801c3e2:	681a      	ldreq	r2, [r3, #0]
 801c3e4:	685b      	ldreq	r3, [r3, #4]
 801c3e6:	6063      	str	r3, [r4, #4]
 801c3e8:	bf04      	itt	eq
 801c3ea:	1852      	addeq	r2, r2, r1
 801c3ec:	6022      	streq	r2, [r4, #0]
 801c3ee:	602c      	str	r4, [r5, #0]
 801c3f0:	e7ec      	b.n	801c3cc <_free_r+0x28>
 801c3f2:	461a      	mov	r2, r3
 801c3f4:	685b      	ldr	r3, [r3, #4]
 801c3f6:	b10b      	cbz	r3, 801c3fc <_free_r+0x58>
 801c3f8:	42a3      	cmp	r3, r4
 801c3fa:	d9fa      	bls.n	801c3f2 <_free_r+0x4e>
 801c3fc:	6811      	ldr	r1, [r2, #0]
 801c3fe:	1855      	adds	r5, r2, r1
 801c400:	42a5      	cmp	r5, r4
 801c402:	d10b      	bne.n	801c41c <_free_r+0x78>
 801c404:	6824      	ldr	r4, [r4, #0]
 801c406:	4421      	add	r1, r4
 801c408:	1854      	adds	r4, r2, r1
 801c40a:	42a3      	cmp	r3, r4
 801c40c:	6011      	str	r1, [r2, #0]
 801c40e:	d1dd      	bne.n	801c3cc <_free_r+0x28>
 801c410:	681c      	ldr	r4, [r3, #0]
 801c412:	685b      	ldr	r3, [r3, #4]
 801c414:	6053      	str	r3, [r2, #4]
 801c416:	4421      	add	r1, r4
 801c418:	6011      	str	r1, [r2, #0]
 801c41a:	e7d7      	b.n	801c3cc <_free_r+0x28>
 801c41c:	d902      	bls.n	801c424 <_free_r+0x80>
 801c41e:	230c      	movs	r3, #12
 801c420:	6003      	str	r3, [r0, #0]
 801c422:	e7d3      	b.n	801c3cc <_free_r+0x28>
 801c424:	6825      	ldr	r5, [r4, #0]
 801c426:	1961      	adds	r1, r4, r5
 801c428:	428b      	cmp	r3, r1
 801c42a:	bf04      	itt	eq
 801c42c:	6819      	ldreq	r1, [r3, #0]
 801c42e:	685b      	ldreq	r3, [r3, #4]
 801c430:	6063      	str	r3, [r4, #4]
 801c432:	bf04      	itt	eq
 801c434:	1949      	addeq	r1, r1, r5
 801c436:	6021      	streq	r1, [r4, #0]
 801c438:	6054      	str	r4, [r2, #4]
 801c43a:	e7c7      	b.n	801c3cc <_free_r+0x28>
 801c43c:	b003      	add	sp, #12
 801c43e:	bd30      	pop	{r4, r5, pc}
 801c440:	20001bc0 	.word	0x20001bc0

0801c444 <_malloc_r>:
 801c444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c446:	1ccd      	adds	r5, r1, #3
 801c448:	f025 0503 	bic.w	r5, r5, #3
 801c44c:	3508      	adds	r5, #8
 801c44e:	2d0c      	cmp	r5, #12
 801c450:	bf38      	it	cc
 801c452:	250c      	movcc	r5, #12
 801c454:	2d00      	cmp	r5, #0
 801c456:	4606      	mov	r6, r0
 801c458:	db01      	blt.n	801c45e <_malloc_r+0x1a>
 801c45a:	42a9      	cmp	r1, r5
 801c45c:	d903      	bls.n	801c466 <_malloc_r+0x22>
 801c45e:	230c      	movs	r3, #12
 801c460:	6033      	str	r3, [r6, #0]
 801c462:	2000      	movs	r0, #0
 801c464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c466:	f002 fe99 	bl	801f19c <__malloc_lock>
 801c46a:	4921      	ldr	r1, [pc, #132]	; (801c4f0 <_malloc_r+0xac>)
 801c46c:	680a      	ldr	r2, [r1, #0]
 801c46e:	4614      	mov	r4, r2
 801c470:	b99c      	cbnz	r4, 801c49a <_malloc_r+0x56>
 801c472:	4f20      	ldr	r7, [pc, #128]	; (801c4f4 <_malloc_r+0xb0>)
 801c474:	683b      	ldr	r3, [r7, #0]
 801c476:	b923      	cbnz	r3, 801c482 <_malloc_r+0x3e>
 801c478:	4621      	mov	r1, r4
 801c47a:	4630      	mov	r0, r6
 801c47c:	f000 fca6 	bl	801cdcc <_sbrk_r>
 801c480:	6038      	str	r0, [r7, #0]
 801c482:	4629      	mov	r1, r5
 801c484:	4630      	mov	r0, r6
 801c486:	f000 fca1 	bl	801cdcc <_sbrk_r>
 801c48a:	1c43      	adds	r3, r0, #1
 801c48c:	d123      	bne.n	801c4d6 <_malloc_r+0x92>
 801c48e:	230c      	movs	r3, #12
 801c490:	6033      	str	r3, [r6, #0]
 801c492:	4630      	mov	r0, r6
 801c494:	f002 fe88 	bl	801f1a8 <__malloc_unlock>
 801c498:	e7e3      	b.n	801c462 <_malloc_r+0x1e>
 801c49a:	6823      	ldr	r3, [r4, #0]
 801c49c:	1b5b      	subs	r3, r3, r5
 801c49e:	d417      	bmi.n	801c4d0 <_malloc_r+0x8c>
 801c4a0:	2b0b      	cmp	r3, #11
 801c4a2:	d903      	bls.n	801c4ac <_malloc_r+0x68>
 801c4a4:	6023      	str	r3, [r4, #0]
 801c4a6:	441c      	add	r4, r3
 801c4a8:	6025      	str	r5, [r4, #0]
 801c4aa:	e004      	b.n	801c4b6 <_malloc_r+0x72>
 801c4ac:	6863      	ldr	r3, [r4, #4]
 801c4ae:	42a2      	cmp	r2, r4
 801c4b0:	bf0c      	ite	eq
 801c4b2:	600b      	streq	r3, [r1, #0]
 801c4b4:	6053      	strne	r3, [r2, #4]
 801c4b6:	4630      	mov	r0, r6
 801c4b8:	f002 fe76 	bl	801f1a8 <__malloc_unlock>
 801c4bc:	f104 000b 	add.w	r0, r4, #11
 801c4c0:	1d23      	adds	r3, r4, #4
 801c4c2:	f020 0007 	bic.w	r0, r0, #7
 801c4c6:	1ac2      	subs	r2, r0, r3
 801c4c8:	d0cc      	beq.n	801c464 <_malloc_r+0x20>
 801c4ca:	1a1b      	subs	r3, r3, r0
 801c4cc:	50a3      	str	r3, [r4, r2]
 801c4ce:	e7c9      	b.n	801c464 <_malloc_r+0x20>
 801c4d0:	4622      	mov	r2, r4
 801c4d2:	6864      	ldr	r4, [r4, #4]
 801c4d4:	e7cc      	b.n	801c470 <_malloc_r+0x2c>
 801c4d6:	1cc4      	adds	r4, r0, #3
 801c4d8:	f024 0403 	bic.w	r4, r4, #3
 801c4dc:	42a0      	cmp	r0, r4
 801c4de:	d0e3      	beq.n	801c4a8 <_malloc_r+0x64>
 801c4e0:	1a21      	subs	r1, r4, r0
 801c4e2:	4630      	mov	r0, r6
 801c4e4:	f000 fc72 	bl	801cdcc <_sbrk_r>
 801c4e8:	3001      	adds	r0, #1
 801c4ea:	d1dd      	bne.n	801c4a8 <_malloc_r+0x64>
 801c4ec:	e7cf      	b.n	801c48e <_malloc_r+0x4a>
 801c4ee:	bf00      	nop
 801c4f0:	20001bc0 	.word	0x20001bc0
 801c4f4:	20001bc4 	.word	0x20001bc4

0801c4f8 <__cvt>:
 801c4f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c4fc:	ec55 4b10 	vmov	r4, r5, d0
 801c500:	2d00      	cmp	r5, #0
 801c502:	460e      	mov	r6, r1
 801c504:	4619      	mov	r1, r3
 801c506:	462b      	mov	r3, r5
 801c508:	bfbb      	ittet	lt
 801c50a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801c50e:	461d      	movlt	r5, r3
 801c510:	2300      	movge	r3, #0
 801c512:	232d      	movlt	r3, #45	; 0x2d
 801c514:	700b      	strb	r3, [r1, #0]
 801c516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c518:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801c51c:	4691      	mov	r9, r2
 801c51e:	f023 0820 	bic.w	r8, r3, #32
 801c522:	bfbc      	itt	lt
 801c524:	4622      	movlt	r2, r4
 801c526:	4614      	movlt	r4, r2
 801c528:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c52c:	d005      	beq.n	801c53a <__cvt+0x42>
 801c52e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801c532:	d100      	bne.n	801c536 <__cvt+0x3e>
 801c534:	3601      	adds	r6, #1
 801c536:	2102      	movs	r1, #2
 801c538:	e000      	b.n	801c53c <__cvt+0x44>
 801c53a:	2103      	movs	r1, #3
 801c53c:	ab03      	add	r3, sp, #12
 801c53e:	9301      	str	r3, [sp, #4]
 801c540:	ab02      	add	r3, sp, #8
 801c542:	9300      	str	r3, [sp, #0]
 801c544:	ec45 4b10 	vmov	d0, r4, r5
 801c548:	4653      	mov	r3, sl
 801c54a:	4632      	mov	r2, r6
 801c54c:	f001 fcb4 	bl	801deb8 <_dtoa_r>
 801c550:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801c554:	4607      	mov	r7, r0
 801c556:	d102      	bne.n	801c55e <__cvt+0x66>
 801c558:	f019 0f01 	tst.w	r9, #1
 801c55c:	d022      	beq.n	801c5a4 <__cvt+0xac>
 801c55e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c562:	eb07 0906 	add.w	r9, r7, r6
 801c566:	d110      	bne.n	801c58a <__cvt+0x92>
 801c568:	783b      	ldrb	r3, [r7, #0]
 801c56a:	2b30      	cmp	r3, #48	; 0x30
 801c56c:	d10a      	bne.n	801c584 <__cvt+0x8c>
 801c56e:	2200      	movs	r2, #0
 801c570:	2300      	movs	r3, #0
 801c572:	4620      	mov	r0, r4
 801c574:	4629      	mov	r1, r5
 801c576:	f7e4 fadf 	bl	8000b38 <__aeabi_dcmpeq>
 801c57a:	b918      	cbnz	r0, 801c584 <__cvt+0x8c>
 801c57c:	f1c6 0601 	rsb	r6, r6, #1
 801c580:	f8ca 6000 	str.w	r6, [sl]
 801c584:	f8da 3000 	ldr.w	r3, [sl]
 801c588:	4499      	add	r9, r3
 801c58a:	2200      	movs	r2, #0
 801c58c:	2300      	movs	r3, #0
 801c58e:	4620      	mov	r0, r4
 801c590:	4629      	mov	r1, r5
 801c592:	f7e4 fad1 	bl	8000b38 <__aeabi_dcmpeq>
 801c596:	b108      	cbz	r0, 801c59c <__cvt+0xa4>
 801c598:	f8cd 900c 	str.w	r9, [sp, #12]
 801c59c:	2230      	movs	r2, #48	; 0x30
 801c59e:	9b03      	ldr	r3, [sp, #12]
 801c5a0:	454b      	cmp	r3, r9
 801c5a2:	d307      	bcc.n	801c5b4 <__cvt+0xbc>
 801c5a4:	9b03      	ldr	r3, [sp, #12]
 801c5a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c5a8:	1bdb      	subs	r3, r3, r7
 801c5aa:	4638      	mov	r0, r7
 801c5ac:	6013      	str	r3, [r2, #0]
 801c5ae:	b004      	add	sp, #16
 801c5b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c5b4:	1c59      	adds	r1, r3, #1
 801c5b6:	9103      	str	r1, [sp, #12]
 801c5b8:	701a      	strb	r2, [r3, #0]
 801c5ba:	e7f0      	b.n	801c59e <__cvt+0xa6>

0801c5bc <__exponent>:
 801c5bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c5be:	4603      	mov	r3, r0
 801c5c0:	2900      	cmp	r1, #0
 801c5c2:	bfb8      	it	lt
 801c5c4:	4249      	neglt	r1, r1
 801c5c6:	f803 2b02 	strb.w	r2, [r3], #2
 801c5ca:	bfb4      	ite	lt
 801c5cc:	222d      	movlt	r2, #45	; 0x2d
 801c5ce:	222b      	movge	r2, #43	; 0x2b
 801c5d0:	2909      	cmp	r1, #9
 801c5d2:	7042      	strb	r2, [r0, #1]
 801c5d4:	dd2a      	ble.n	801c62c <__exponent+0x70>
 801c5d6:	f10d 0407 	add.w	r4, sp, #7
 801c5da:	46a4      	mov	ip, r4
 801c5dc:	270a      	movs	r7, #10
 801c5de:	46a6      	mov	lr, r4
 801c5e0:	460a      	mov	r2, r1
 801c5e2:	fb91 f6f7 	sdiv	r6, r1, r7
 801c5e6:	fb07 1516 	mls	r5, r7, r6, r1
 801c5ea:	3530      	adds	r5, #48	; 0x30
 801c5ec:	2a63      	cmp	r2, #99	; 0x63
 801c5ee:	f104 34ff 	add.w	r4, r4, #4294967295
 801c5f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801c5f6:	4631      	mov	r1, r6
 801c5f8:	dcf1      	bgt.n	801c5de <__exponent+0x22>
 801c5fa:	3130      	adds	r1, #48	; 0x30
 801c5fc:	f1ae 0502 	sub.w	r5, lr, #2
 801c600:	f804 1c01 	strb.w	r1, [r4, #-1]
 801c604:	1c44      	adds	r4, r0, #1
 801c606:	4629      	mov	r1, r5
 801c608:	4561      	cmp	r1, ip
 801c60a:	d30a      	bcc.n	801c622 <__exponent+0x66>
 801c60c:	f10d 0209 	add.w	r2, sp, #9
 801c610:	eba2 020e 	sub.w	r2, r2, lr
 801c614:	4565      	cmp	r5, ip
 801c616:	bf88      	it	hi
 801c618:	2200      	movhi	r2, #0
 801c61a:	4413      	add	r3, r2
 801c61c:	1a18      	subs	r0, r3, r0
 801c61e:	b003      	add	sp, #12
 801c620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c622:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c626:	f804 2f01 	strb.w	r2, [r4, #1]!
 801c62a:	e7ed      	b.n	801c608 <__exponent+0x4c>
 801c62c:	2330      	movs	r3, #48	; 0x30
 801c62e:	3130      	adds	r1, #48	; 0x30
 801c630:	7083      	strb	r3, [r0, #2]
 801c632:	70c1      	strb	r1, [r0, #3]
 801c634:	1d03      	adds	r3, r0, #4
 801c636:	e7f1      	b.n	801c61c <__exponent+0x60>

0801c638 <_printf_float>:
 801c638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c63c:	ed2d 8b02 	vpush	{d8}
 801c640:	b08d      	sub	sp, #52	; 0x34
 801c642:	460c      	mov	r4, r1
 801c644:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801c648:	4616      	mov	r6, r2
 801c64a:	461f      	mov	r7, r3
 801c64c:	4605      	mov	r5, r0
 801c64e:	f002 fd8f 	bl	801f170 <_localeconv_r>
 801c652:	f8d0 a000 	ldr.w	sl, [r0]
 801c656:	4650      	mov	r0, sl
 801c658:	f7e3 fdec 	bl	8000234 <strlen>
 801c65c:	2300      	movs	r3, #0
 801c65e:	930a      	str	r3, [sp, #40]	; 0x28
 801c660:	6823      	ldr	r3, [r4, #0]
 801c662:	9305      	str	r3, [sp, #20]
 801c664:	f8d8 3000 	ldr.w	r3, [r8]
 801c668:	f894 b018 	ldrb.w	fp, [r4, #24]
 801c66c:	3307      	adds	r3, #7
 801c66e:	f023 0307 	bic.w	r3, r3, #7
 801c672:	f103 0208 	add.w	r2, r3, #8
 801c676:	f8c8 2000 	str.w	r2, [r8]
 801c67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c67e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801c682:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801c686:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c68a:	9307      	str	r3, [sp, #28]
 801c68c:	f8cd 8018 	str.w	r8, [sp, #24]
 801c690:	ee08 0a10 	vmov	s16, r0
 801c694:	4b9f      	ldr	r3, [pc, #636]	; (801c914 <_printf_float+0x2dc>)
 801c696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c69a:	f04f 32ff 	mov.w	r2, #4294967295
 801c69e:	f7e4 fa7d 	bl	8000b9c <__aeabi_dcmpun>
 801c6a2:	bb88      	cbnz	r0, 801c708 <_printf_float+0xd0>
 801c6a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c6a8:	4b9a      	ldr	r3, [pc, #616]	; (801c914 <_printf_float+0x2dc>)
 801c6aa:	f04f 32ff 	mov.w	r2, #4294967295
 801c6ae:	f7e4 fa57 	bl	8000b60 <__aeabi_dcmple>
 801c6b2:	bb48      	cbnz	r0, 801c708 <_printf_float+0xd0>
 801c6b4:	2200      	movs	r2, #0
 801c6b6:	2300      	movs	r3, #0
 801c6b8:	4640      	mov	r0, r8
 801c6ba:	4649      	mov	r1, r9
 801c6bc:	f7e4 fa46 	bl	8000b4c <__aeabi_dcmplt>
 801c6c0:	b110      	cbz	r0, 801c6c8 <_printf_float+0x90>
 801c6c2:	232d      	movs	r3, #45	; 0x2d
 801c6c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c6c8:	4b93      	ldr	r3, [pc, #588]	; (801c918 <_printf_float+0x2e0>)
 801c6ca:	4894      	ldr	r0, [pc, #592]	; (801c91c <_printf_float+0x2e4>)
 801c6cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801c6d0:	bf94      	ite	ls
 801c6d2:	4698      	movls	r8, r3
 801c6d4:	4680      	movhi	r8, r0
 801c6d6:	2303      	movs	r3, #3
 801c6d8:	6123      	str	r3, [r4, #16]
 801c6da:	9b05      	ldr	r3, [sp, #20]
 801c6dc:	f023 0204 	bic.w	r2, r3, #4
 801c6e0:	6022      	str	r2, [r4, #0]
 801c6e2:	f04f 0900 	mov.w	r9, #0
 801c6e6:	9700      	str	r7, [sp, #0]
 801c6e8:	4633      	mov	r3, r6
 801c6ea:	aa0b      	add	r2, sp, #44	; 0x2c
 801c6ec:	4621      	mov	r1, r4
 801c6ee:	4628      	mov	r0, r5
 801c6f0:	f000 f9d8 	bl	801caa4 <_printf_common>
 801c6f4:	3001      	adds	r0, #1
 801c6f6:	f040 8090 	bne.w	801c81a <_printf_float+0x1e2>
 801c6fa:	f04f 30ff 	mov.w	r0, #4294967295
 801c6fe:	b00d      	add	sp, #52	; 0x34
 801c700:	ecbd 8b02 	vpop	{d8}
 801c704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c708:	4642      	mov	r2, r8
 801c70a:	464b      	mov	r3, r9
 801c70c:	4640      	mov	r0, r8
 801c70e:	4649      	mov	r1, r9
 801c710:	f7e4 fa44 	bl	8000b9c <__aeabi_dcmpun>
 801c714:	b140      	cbz	r0, 801c728 <_printf_float+0xf0>
 801c716:	464b      	mov	r3, r9
 801c718:	2b00      	cmp	r3, #0
 801c71a:	bfbc      	itt	lt
 801c71c:	232d      	movlt	r3, #45	; 0x2d
 801c71e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801c722:	487f      	ldr	r0, [pc, #508]	; (801c920 <_printf_float+0x2e8>)
 801c724:	4b7f      	ldr	r3, [pc, #508]	; (801c924 <_printf_float+0x2ec>)
 801c726:	e7d1      	b.n	801c6cc <_printf_float+0x94>
 801c728:	6863      	ldr	r3, [r4, #4]
 801c72a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801c72e:	9206      	str	r2, [sp, #24]
 801c730:	1c5a      	adds	r2, r3, #1
 801c732:	d13f      	bne.n	801c7b4 <_printf_float+0x17c>
 801c734:	2306      	movs	r3, #6
 801c736:	6063      	str	r3, [r4, #4]
 801c738:	9b05      	ldr	r3, [sp, #20]
 801c73a:	6861      	ldr	r1, [r4, #4]
 801c73c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801c740:	2300      	movs	r3, #0
 801c742:	9303      	str	r3, [sp, #12]
 801c744:	ab0a      	add	r3, sp, #40	; 0x28
 801c746:	e9cd b301 	strd	fp, r3, [sp, #4]
 801c74a:	ab09      	add	r3, sp, #36	; 0x24
 801c74c:	ec49 8b10 	vmov	d0, r8, r9
 801c750:	9300      	str	r3, [sp, #0]
 801c752:	6022      	str	r2, [r4, #0]
 801c754:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801c758:	4628      	mov	r0, r5
 801c75a:	f7ff fecd 	bl	801c4f8 <__cvt>
 801c75e:	9b06      	ldr	r3, [sp, #24]
 801c760:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c762:	2b47      	cmp	r3, #71	; 0x47
 801c764:	4680      	mov	r8, r0
 801c766:	d108      	bne.n	801c77a <_printf_float+0x142>
 801c768:	1cc8      	adds	r0, r1, #3
 801c76a:	db02      	blt.n	801c772 <_printf_float+0x13a>
 801c76c:	6863      	ldr	r3, [r4, #4]
 801c76e:	4299      	cmp	r1, r3
 801c770:	dd41      	ble.n	801c7f6 <_printf_float+0x1be>
 801c772:	f1ab 0b02 	sub.w	fp, fp, #2
 801c776:	fa5f fb8b 	uxtb.w	fp, fp
 801c77a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801c77e:	d820      	bhi.n	801c7c2 <_printf_float+0x18a>
 801c780:	3901      	subs	r1, #1
 801c782:	465a      	mov	r2, fp
 801c784:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801c788:	9109      	str	r1, [sp, #36]	; 0x24
 801c78a:	f7ff ff17 	bl	801c5bc <__exponent>
 801c78e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c790:	1813      	adds	r3, r2, r0
 801c792:	2a01      	cmp	r2, #1
 801c794:	4681      	mov	r9, r0
 801c796:	6123      	str	r3, [r4, #16]
 801c798:	dc02      	bgt.n	801c7a0 <_printf_float+0x168>
 801c79a:	6822      	ldr	r2, [r4, #0]
 801c79c:	07d2      	lsls	r2, r2, #31
 801c79e:	d501      	bpl.n	801c7a4 <_printf_float+0x16c>
 801c7a0:	3301      	adds	r3, #1
 801c7a2:	6123      	str	r3, [r4, #16]
 801c7a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d09c      	beq.n	801c6e6 <_printf_float+0xae>
 801c7ac:	232d      	movs	r3, #45	; 0x2d
 801c7ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c7b2:	e798      	b.n	801c6e6 <_printf_float+0xae>
 801c7b4:	9a06      	ldr	r2, [sp, #24]
 801c7b6:	2a47      	cmp	r2, #71	; 0x47
 801c7b8:	d1be      	bne.n	801c738 <_printf_float+0x100>
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d1bc      	bne.n	801c738 <_printf_float+0x100>
 801c7be:	2301      	movs	r3, #1
 801c7c0:	e7b9      	b.n	801c736 <_printf_float+0xfe>
 801c7c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801c7c6:	d118      	bne.n	801c7fa <_printf_float+0x1c2>
 801c7c8:	2900      	cmp	r1, #0
 801c7ca:	6863      	ldr	r3, [r4, #4]
 801c7cc:	dd0b      	ble.n	801c7e6 <_printf_float+0x1ae>
 801c7ce:	6121      	str	r1, [r4, #16]
 801c7d0:	b913      	cbnz	r3, 801c7d8 <_printf_float+0x1a0>
 801c7d2:	6822      	ldr	r2, [r4, #0]
 801c7d4:	07d0      	lsls	r0, r2, #31
 801c7d6:	d502      	bpl.n	801c7de <_printf_float+0x1a6>
 801c7d8:	3301      	adds	r3, #1
 801c7da:	440b      	add	r3, r1
 801c7dc:	6123      	str	r3, [r4, #16]
 801c7de:	65a1      	str	r1, [r4, #88]	; 0x58
 801c7e0:	f04f 0900 	mov.w	r9, #0
 801c7e4:	e7de      	b.n	801c7a4 <_printf_float+0x16c>
 801c7e6:	b913      	cbnz	r3, 801c7ee <_printf_float+0x1b6>
 801c7e8:	6822      	ldr	r2, [r4, #0]
 801c7ea:	07d2      	lsls	r2, r2, #31
 801c7ec:	d501      	bpl.n	801c7f2 <_printf_float+0x1ba>
 801c7ee:	3302      	adds	r3, #2
 801c7f0:	e7f4      	b.n	801c7dc <_printf_float+0x1a4>
 801c7f2:	2301      	movs	r3, #1
 801c7f4:	e7f2      	b.n	801c7dc <_printf_float+0x1a4>
 801c7f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801c7fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c7fc:	4299      	cmp	r1, r3
 801c7fe:	db05      	blt.n	801c80c <_printf_float+0x1d4>
 801c800:	6823      	ldr	r3, [r4, #0]
 801c802:	6121      	str	r1, [r4, #16]
 801c804:	07d8      	lsls	r0, r3, #31
 801c806:	d5ea      	bpl.n	801c7de <_printf_float+0x1a6>
 801c808:	1c4b      	adds	r3, r1, #1
 801c80a:	e7e7      	b.n	801c7dc <_printf_float+0x1a4>
 801c80c:	2900      	cmp	r1, #0
 801c80e:	bfd4      	ite	le
 801c810:	f1c1 0202 	rsble	r2, r1, #2
 801c814:	2201      	movgt	r2, #1
 801c816:	4413      	add	r3, r2
 801c818:	e7e0      	b.n	801c7dc <_printf_float+0x1a4>
 801c81a:	6823      	ldr	r3, [r4, #0]
 801c81c:	055a      	lsls	r2, r3, #21
 801c81e:	d407      	bmi.n	801c830 <_printf_float+0x1f8>
 801c820:	6923      	ldr	r3, [r4, #16]
 801c822:	4642      	mov	r2, r8
 801c824:	4631      	mov	r1, r6
 801c826:	4628      	mov	r0, r5
 801c828:	47b8      	blx	r7
 801c82a:	3001      	adds	r0, #1
 801c82c:	d12c      	bne.n	801c888 <_printf_float+0x250>
 801c82e:	e764      	b.n	801c6fa <_printf_float+0xc2>
 801c830:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801c834:	f240 80e0 	bls.w	801c9f8 <_printf_float+0x3c0>
 801c838:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801c83c:	2200      	movs	r2, #0
 801c83e:	2300      	movs	r3, #0
 801c840:	f7e4 f97a 	bl	8000b38 <__aeabi_dcmpeq>
 801c844:	2800      	cmp	r0, #0
 801c846:	d034      	beq.n	801c8b2 <_printf_float+0x27a>
 801c848:	4a37      	ldr	r2, [pc, #220]	; (801c928 <_printf_float+0x2f0>)
 801c84a:	2301      	movs	r3, #1
 801c84c:	4631      	mov	r1, r6
 801c84e:	4628      	mov	r0, r5
 801c850:	47b8      	blx	r7
 801c852:	3001      	adds	r0, #1
 801c854:	f43f af51 	beq.w	801c6fa <_printf_float+0xc2>
 801c858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c85c:	429a      	cmp	r2, r3
 801c85e:	db02      	blt.n	801c866 <_printf_float+0x22e>
 801c860:	6823      	ldr	r3, [r4, #0]
 801c862:	07d8      	lsls	r0, r3, #31
 801c864:	d510      	bpl.n	801c888 <_printf_float+0x250>
 801c866:	ee18 3a10 	vmov	r3, s16
 801c86a:	4652      	mov	r2, sl
 801c86c:	4631      	mov	r1, r6
 801c86e:	4628      	mov	r0, r5
 801c870:	47b8      	blx	r7
 801c872:	3001      	adds	r0, #1
 801c874:	f43f af41 	beq.w	801c6fa <_printf_float+0xc2>
 801c878:	f04f 0800 	mov.w	r8, #0
 801c87c:	f104 091a 	add.w	r9, r4, #26
 801c880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c882:	3b01      	subs	r3, #1
 801c884:	4543      	cmp	r3, r8
 801c886:	dc09      	bgt.n	801c89c <_printf_float+0x264>
 801c888:	6823      	ldr	r3, [r4, #0]
 801c88a:	079b      	lsls	r3, r3, #30
 801c88c:	f100 8105 	bmi.w	801ca9a <_printf_float+0x462>
 801c890:	68e0      	ldr	r0, [r4, #12]
 801c892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c894:	4298      	cmp	r0, r3
 801c896:	bfb8      	it	lt
 801c898:	4618      	movlt	r0, r3
 801c89a:	e730      	b.n	801c6fe <_printf_float+0xc6>
 801c89c:	2301      	movs	r3, #1
 801c89e:	464a      	mov	r2, r9
 801c8a0:	4631      	mov	r1, r6
 801c8a2:	4628      	mov	r0, r5
 801c8a4:	47b8      	blx	r7
 801c8a6:	3001      	adds	r0, #1
 801c8a8:	f43f af27 	beq.w	801c6fa <_printf_float+0xc2>
 801c8ac:	f108 0801 	add.w	r8, r8, #1
 801c8b0:	e7e6      	b.n	801c880 <_printf_float+0x248>
 801c8b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	dc39      	bgt.n	801c92c <_printf_float+0x2f4>
 801c8b8:	4a1b      	ldr	r2, [pc, #108]	; (801c928 <_printf_float+0x2f0>)
 801c8ba:	2301      	movs	r3, #1
 801c8bc:	4631      	mov	r1, r6
 801c8be:	4628      	mov	r0, r5
 801c8c0:	47b8      	blx	r7
 801c8c2:	3001      	adds	r0, #1
 801c8c4:	f43f af19 	beq.w	801c6fa <_printf_float+0xc2>
 801c8c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c8cc:	4313      	orrs	r3, r2
 801c8ce:	d102      	bne.n	801c8d6 <_printf_float+0x29e>
 801c8d0:	6823      	ldr	r3, [r4, #0]
 801c8d2:	07d9      	lsls	r1, r3, #31
 801c8d4:	d5d8      	bpl.n	801c888 <_printf_float+0x250>
 801c8d6:	ee18 3a10 	vmov	r3, s16
 801c8da:	4652      	mov	r2, sl
 801c8dc:	4631      	mov	r1, r6
 801c8de:	4628      	mov	r0, r5
 801c8e0:	47b8      	blx	r7
 801c8e2:	3001      	adds	r0, #1
 801c8e4:	f43f af09 	beq.w	801c6fa <_printf_float+0xc2>
 801c8e8:	f04f 0900 	mov.w	r9, #0
 801c8ec:	f104 0a1a 	add.w	sl, r4, #26
 801c8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8f2:	425b      	negs	r3, r3
 801c8f4:	454b      	cmp	r3, r9
 801c8f6:	dc01      	bgt.n	801c8fc <_printf_float+0x2c4>
 801c8f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c8fa:	e792      	b.n	801c822 <_printf_float+0x1ea>
 801c8fc:	2301      	movs	r3, #1
 801c8fe:	4652      	mov	r2, sl
 801c900:	4631      	mov	r1, r6
 801c902:	4628      	mov	r0, r5
 801c904:	47b8      	blx	r7
 801c906:	3001      	adds	r0, #1
 801c908:	f43f aef7 	beq.w	801c6fa <_printf_float+0xc2>
 801c90c:	f109 0901 	add.w	r9, r9, #1
 801c910:	e7ee      	b.n	801c8f0 <_printf_float+0x2b8>
 801c912:	bf00      	nop
 801c914:	7fefffff 	.word	0x7fefffff
 801c918:	08022898 	.word	0x08022898
 801c91c:	0802289c 	.word	0x0802289c
 801c920:	080228a4 	.word	0x080228a4
 801c924:	080228a0 	.word	0x080228a0
 801c928:	080228a8 	.word	0x080228a8
 801c92c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c92e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c930:	429a      	cmp	r2, r3
 801c932:	bfa8      	it	ge
 801c934:	461a      	movge	r2, r3
 801c936:	2a00      	cmp	r2, #0
 801c938:	4691      	mov	r9, r2
 801c93a:	dc37      	bgt.n	801c9ac <_printf_float+0x374>
 801c93c:	f04f 0b00 	mov.w	fp, #0
 801c940:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c944:	f104 021a 	add.w	r2, r4, #26
 801c948:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c94a:	9305      	str	r3, [sp, #20]
 801c94c:	eba3 0309 	sub.w	r3, r3, r9
 801c950:	455b      	cmp	r3, fp
 801c952:	dc33      	bgt.n	801c9bc <_printf_float+0x384>
 801c954:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c958:	429a      	cmp	r2, r3
 801c95a:	db3b      	blt.n	801c9d4 <_printf_float+0x39c>
 801c95c:	6823      	ldr	r3, [r4, #0]
 801c95e:	07da      	lsls	r2, r3, #31
 801c960:	d438      	bmi.n	801c9d4 <_printf_float+0x39c>
 801c962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c964:	9b05      	ldr	r3, [sp, #20]
 801c966:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c968:	1ad3      	subs	r3, r2, r3
 801c96a:	eba2 0901 	sub.w	r9, r2, r1
 801c96e:	4599      	cmp	r9, r3
 801c970:	bfa8      	it	ge
 801c972:	4699      	movge	r9, r3
 801c974:	f1b9 0f00 	cmp.w	r9, #0
 801c978:	dc35      	bgt.n	801c9e6 <_printf_float+0x3ae>
 801c97a:	f04f 0800 	mov.w	r8, #0
 801c97e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c982:	f104 0a1a 	add.w	sl, r4, #26
 801c986:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c98a:	1a9b      	subs	r3, r3, r2
 801c98c:	eba3 0309 	sub.w	r3, r3, r9
 801c990:	4543      	cmp	r3, r8
 801c992:	f77f af79 	ble.w	801c888 <_printf_float+0x250>
 801c996:	2301      	movs	r3, #1
 801c998:	4652      	mov	r2, sl
 801c99a:	4631      	mov	r1, r6
 801c99c:	4628      	mov	r0, r5
 801c99e:	47b8      	blx	r7
 801c9a0:	3001      	adds	r0, #1
 801c9a2:	f43f aeaa 	beq.w	801c6fa <_printf_float+0xc2>
 801c9a6:	f108 0801 	add.w	r8, r8, #1
 801c9aa:	e7ec      	b.n	801c986 <_printf_float+0x34e>
 801c9ac:	4613      	mov	r3, r2
 801c9ae:	4631      	mov	r1, r6
 801c9b0:	4642      	mov	r2, r8
 801c9b2:	4628      	mov	r0, r5
 801c9b4:	47b8      	blx	r7
 801c9b6:	3001      	adds	r0, #1
 801c9b8:	d1c0      	bne.n	801c93c <_printf_float+0x304>
 801c9ba:	e69e      	b.n	801c6fa <_printf_float+0xc2>
 801c9bc:	2301      	movs	r3, #1
 801c9be:	4631      	mov	r1, r6
 801c9c0:	4628      	mov	r0, r5
 801c9c2:	9205      	str	r2, [sp, #20]
 801c9c4:	47b8      	blx	r7
 801c9c6:	3001      	adds	r0, #1
 801c9c8:	f43f ae97 	beq.w	801c6fa <_printf_float+0xc2>
 801c9cc:	9a05      	ldr	r2, [sp, #20]
 801c9ce:	f10b 0b01 	add.w	fp, fp, #1
 801c9d2:	e7b9      	b.n	801c948 <_printf_float+0x310>
 801c9d4:	ee18 3a10 	vmov	r3, s16
 801c9d8:	4652      	mov	r2, sl
 801c9da:	4631      	mov	r1, r6
 801c9dc:	4628      	mov	r0, r5
 801c9de:	47b8      	blx	r7
 801c9e0:	3001      	adds	r0, #1
 801c9e2:	d1be      	bne.n	801c962 <_printf_float+0x32a>
 801c9e4:	e689      	b.n	801c6fa <_printf_float+0xc2>
 801c9e6:	9a05      	ldr	r2, [sp, #20]
 801c9e8:	464b      	mov	r3, r9
 801c9ea:	4442      	add	r2, r8
 801c9ec:	4631      	mov	r1, r6
 801c9ee:	4628      	mov	r0, r5
 801c9f0:	47b8      	blx	r7
 801c9f2:	3001      	adds	r0, #1
 801c9f4:	d1c1      	bne.n	801c97a <_printf_float+0x342>
 801c9f6:	e680      	b.n	801c6fa <_printf_float+0xc2>
 801c9f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c9fa:	2a01      	cmp	r2, #1
 801c9fc:	dc01      	bgt.n	801ca02 <_printf_float+0x3ca>
 801c9fe:	07db      	lsls	r3, r3, #31
 801ca00:	d538      	bpl.n	801ca74 <_printf_float+0x43c>
 801ca02:	2301      	movs	r3, #1
 801ca04:	4642      	mov	r2, r8
 801ca06:	4631      	mov	r1, r6
 801ca08:	4628      	mov	r0, r5
 801ca0a:	47b8      	blx	r7
 801ca0c:	3001      	adds	r0, #1
 801ca0e:	f43f ae74 	beq.w	801c6fa <_printf_float+0xc2>
 801ca12:	ee18 3a10 	vmov	r3, s16
 801ca16:	4652      	mov	r2, sl
 801ca18:	4631      	mov	r1, r6
 801ca1a:	4628      	mov	r0, r5
 801ca1c:	47b8      	blx	r7
 801ca1e:	3001      	adds	r0, #1
 801ca20:	f43f ae6b 	beq.w	801c6fa <_printf_float+0xc2>
 801ca24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ca28:	2200      	movs	r2, #0
 801ca2a:	2300      	movs	r3, #0
 801ca2c:	f7e4 f884 	bl	8000b38 <__aeabi_dcmpeq>
 801ca30:	b9d8      	cbnz	r0, 801ca6a <_printf_float+0x432>
 801ca32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ca34:	f108 0201 	add.w	r2, r8, #1
 801ca38:	3b01      	subs	r3, #1
 801ca3a:	4631      	mov	r1, r6
 801ca3c:	4628      	mov	r0, r5
 801ca3e:	47b8      	blx	r7
 801ca40:	3001      	adds	r0, #1
 801ca42:	d10e      	bne.n	801ca62 <_printf_float+0x42a>
 801ca44:	e659      	b.n	801c6fa <_printf_float+0xc2>
 801ca46:	2301      	movs	r3, #1
 801ca48:	4652      	mov	r2, sl
 801ca4a:	4631      	mov	r1, r6
 801ca4c:	4628      	mov	r0, r5
 801ca4e:	47b8      	blx	r7
 801ca50:	3001      	adds	r0, #1
 801ca52:	f43f ae52 	beq.w	801c6fa <_printf_float+0xc2>
 801ca56:	f108 0801 	add.w	r8, r8, #1
 801ca5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ca5c:	3b01      	subs	r3, #1
 801ca5e:	4543      	cmp	r3, r8
 801ca60:	dcf1      	bgt.n	801ca46 <_printf_float+0x40e>
 801ca62:	464b      	mov	r3, r9
 801ca64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ca68:	e6dc      	b.n	801c824 <_printf_float+0x1ec>
 801ca6a:	f04f 0800 	mov.w	r8, #0
 801ca6e:	f104 0a1a 	add.w	sl, r4, #26
 801ca72:	e7f2      	b.n	801ca5a <_printf_float+0x422>
 801ca74:	2301      	movs	r3, #1
 801ca76:	4642      	mov	r2, r8
 801ca78:	e7df      	b.n	801ca3a <_printf_float+0x402>
 801ca7a:	2301      	movs	r3, #1
 801ca7c:	464a      	mov	r2, r9
 801ca7e:	4631      	mov	r1, r6
 801ca80:	4628      	mov	r0, r5
 801ca82:	47b8      	blx	r7
 801ca84:	3001      	adds	r0, #1
 801ca86:	f43f ae38 	beq.w	801c6fa <_printf_float+0xc2>
 801ca8a:	f108 0801 	add.w	r8, r8, #1
 801ca8e:	68e3      	ldr	r3, [r4, #12]
 801ca90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ca92:	1a5b      	subs	r3, r3, r1
 801ca94:	4543      	cmp	r3, r8
 801ca96:	dcf0      	bgt.n	801ca7a <_printf_float+0x442>
 801ca98:	e6fa      	b.n	801c890 <_printf_float+0x258>
 801ca9a:	f04f 0800 	mov.w	r8, #0
 801ca9e:	f104 0919 	add.w	r9, r4, #25
 801caa2:	e7f4      	b.n	801ca8e <_printf_float+0x456>

0801caa4 <_printf_common>:
 801caa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801caa8:	4616      	mov	r6, r2
 801caaa:	4699      	mov	r9, r3
 801caac:	688a      	ldr	r2, [r1, #8]
 801caae:	690b      	ldr	r3, [r1, #16]
 801cab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801cab4:	4293      	cmp	r3, r2
 801cab6:	bfb8      	it	lt
 801cab8:	4613      	movlt	r3, r2
 801caba:	6033      	str	r3, [r6, #0]
 801cabc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801cac0:	4607      	mov	r7, r0
 801cac2:	460c      	mov	r4, r1
 801cac4:	b10a      	cbz	r2, 801caca <_printf_common+0x26>
 801cac6:	3301      	adds	r3, #1
 801cac8:	6033      	str	r3, [r6, #0]
 801caca:	6823      	ldr	r3, [r4, #0]
 801cacc:	0699      	lsls	r1, r3, #26
 801cace:	bf42      	ittt	mi
 801cad0:	6833      	ldrmi	r3, [r6, #0]
 801cad2:	3302      	addmi	r3, #2
 801cad4:	6033      	strmi	r3, [r6, #0]
 801cad6:	6825      	ldr	r5, [r4, #0]
 801cad8:	f015 0506 	ands.w	r5, r5, #6
 801cadc:	d106      	bne.n	801caec <_printf_common+0x48>
 801cade:	f104 0a19 	add.w	sl, r4, #25
 801cae2:	68e3      	ldr	r3, [r4, #12]
 801cae4:	6832      	ldr	r2, [r6, #0]
 801cae6:	1a9b      	subs	r3, r3, r2
 801cae8:	42ab      	cmp	r3, r5
 801caea:	dc26      	bgt.n	801cb3a <_printf_common+0x96>
 801caec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801caf0:	1e13      	subs	r3, r2, #0
 801caf2:	6822      	ldr	r2, [r4, #0]
 801caf4:	bf18      	it	ne
 801caf6:	2301      	movne	r3, #1
 801caf8:	0692      	lsls	r2, r2, #26
 801cafa:	d42b      	bmi.n	801cb54 <_printf_common+0xb0>
 801cafc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801cb00:	4649      	mov	r1, r9
 801cb02:	4638      	mov	r0, r7
 801cb04:	47c0      	blx	r8
 801cb06:	3001      	adds	r0, #1
 801cb08:	d01e      	beq.n	801cb48 <_printf_common+0xa4>
 801cb0a:	6823      	ldr	r3, [r4, #0]
 801cb0c:	68e5      	ldr	r5, [r4, #12]
 801cb0e:	6832      	ldr	r2, [r6, #0]
 801cb10:	f003 0306 	and.w	r3, r3, #6
 801cb14:	2b04      	cmp	r3, #4
 801cb16:	bf08      	it	eq
 801cb18:	1aad      	subeq	r5, r5, r2
 801cb1a:	68a3      	ldr	r3, [r4, #8]
 801cb1c:	6922      	ldr	r2, [r4, #16]
 801cb1e:	bf0c      	ite	eq
 801cb20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cb24:	2500      	movne	r5, #0
 801cb26:	4293      	cmp	r3, r2
 801cb28:	bfc4      	itt	gt
 801cb2a:	1a9b      	subgt	r3, r3, r2
 801cb2c:	18ed      	addgt	r5, r5, r3
 801cb2e:	2600      	movs	r6, #0
 801cb30:	341a      	adds	r4, #26
 801cb32:	42b5      	cmp	r5, r6
 801cb34:	d11a      	bne.n	801cb6c <_printf_common+0xc8>
 801cb36:	2000      	movs	r0, #0
 801cb38:	e008      	b.n	801cb4c <_printf_common+0xa8>
 801cb3a:	2301      	movs	r3, #1
 801cb3c:	4652      	mov	r2, sl
 801cb3e:	4649      	mov	r1, r9
 801cb40:	4638      	mov	r0, r7
 801cb42:	47c0      	blx	r8
 801cb44:	3001      	adds	r0, #1
 801cb46:	d103      	bne.n	801cb50 <_printf_common+0xac>
 801cb48:	f04f 30ff 	mov.w	r0, #4294967295
 801cb4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cb50:	3501      	adds	r5, #1
 801cb52:	e7c6      	b.n	801cae2 <_printf_common+0x3e>
 801cb54:	18e1      	adds	r1, r4, r3
 801cb56:	1c5a      	adds	r2, r3, #1
 801cb58:	2030      	movs	r0, #48	; 0x30
 801cb5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801cb5e:	4422      	add	r2, r4
 801cb60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801cb64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801cb68:	3302      	adds	r3, #2
 801cb6a:	e7c7      	b.n	801cafc <_printf_common+0x58>
 801cb6c:	2301      	movs	r3, #1
 801cb6e:	4622      	mov	r2, r4
 801cb70:	4649      	mov	r1, r9
 801cb72:	4638      	mov	r0, r7
 801cb74:	47c0      	blx	r8
 801cb76:	3001      	adds	r0, #1
 801cb78:	d0e6      	beq.n	801cb48 <_printf_common+0xa4>
 801cb7a:	3601      	adds	r6, #1
 801cb7c:	e7d9      	b.n	801cb32 <_printf_common+0x8e>
	...

0801cb80 <_printf_i>:
 801cb80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cb84:	460c      	mov	r4, r1
 801cb86:	4691      	mov	r9, r2
 801cb88:	7e27      	ldrb	r7, [r4, #24]
 801cb8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801cb8c:	2f78      	cmp	r7, #120	; 0x78
 801cb8e:	4680      	mov	r8, r0
 801cb90:	469a      	mov	sl, r3
 801cb92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801cb96:	d807      	bhi.n	801cba8 <_printf_i+0x28>
 801cb98:	2f62      	cmp	r7, #98	; 0x62
 801cb9a:	d80a      	bhi.n	801cbb2 <_printf_i+0x32>
 801cb9c:	2f00      	cmp	r7, #0
 801cb9e:	f000 80d8 	beq.w	801cd52 <_printf_i+0x1d2>
 801cba2:	2f58      	cmp	r7, #88	; 0x58
 801cba4:	f000 80a3 	beq.w	801ccee <_printf_i+0x16e>
 801cba8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801cbac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801cbb0:	e03a      	b.n	801cc28 <_printf_i+0xa8>
 801cbb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801cbb6:	2b15      	cmp	r3, #21
 801cbb8:	d8f6      	bhi.n	801cba8 <_printf_i+0x28>
 801cbba:	a001      	add	r0, pc, #4	; (adr r0, 801cbc0 <_printf_i+0x40>)
 801cbbc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801cbc0:	0801cc19 	.word	0x0801cc19
 801cbc4:	0801cc2d 	.word	0x0801cc2d
 801cbc8:	0801cba9 	.word	0x0801cba9
 801cbcc:	0801cba9 	.word	0x0801cba9
 801cbd0:	0801cba9 	.word	0x0801cba9
 801cbd4:	0801cba9 	.word	0x0801cba9
 801cbd8:	0801cc2d 	.word	0x0801cc2d
 801cbdc:	0801cba9 	.word	0x0801cba9
 801cbe0:	0801cba9 	.word	0x0801cba9
 801cbe4:	0801cba9 	.word	0x0801cba9
 801cbe8:	0801cba9 	.word	0x0801cba9
 801cbec:	0801cd39 	.word	0x0801cd39
 801cbf0:	0801cc5d 	.word	0x0801cc5d
 801cbf4:	0801cd1b 	.word	0x0801cd1b
 801cbf8:	0801cba9 	.word	0x0801cba9
 801cbfc:	0801cba9 	.word	0x0801cba9
 801cc00:	0801cd5b 	.word	0x0801cd5b
 801cc04:	0801cba9 	.word	0x0801cba9
 801cc08:	0801cc5d 	.word	0x0801cc5d
 801cc0c:	0801cba9 	.word	0x0801cba9
 801cc10:	0801cba9 	.word	0x0801cba9
 801cc14:	0801cd23 	.word	0x0801cd23
 801cc18:	680b      	ldr	r3, [r1, #0]
 801cc1a:	1d1a      	adds	r2, r3, #4
 801cc1c:	681b      	ldr	r3, [r3, #0]
 801cc1e:	600a      	str	r2, [r1, #0]
 801cc20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801cc24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801cc28:	2301      	movs	r3, #1
 801cc2a:	e0a3      	b.n	801cd74 <_printf_i+0x1f4>
 801cc2c:	6825      	ldr	r5, [r4, #0]
 801cc2e:	6808      	ldr	r0, [r1, #0]
 801cc30:	062e      	lsls	r6, r5, #24
 801cc32:	f100 0304 	add.w	r3, r0, #4
 801cc36:	d50a      	bpl.n	801cc4e <_printf_i+0xce>
 801cc38:	6805      	ldr	r5, [r0, #0]
 801cc3a:	600b      	str	r3, [r1, #0]
 801cc3c:	2d00      	cmp	r5, #0
 801cc3e:	da03      	bge.n	801cc48 <_printf_i+0xc8>
 801cc40:	232d      	movs	r3, #45	; 0x2d
 801cc42:	426d      	negs	r5, r5
 801cc44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cc48:	485e      	ldr	r0, [pc, #376]	; (801cdc4 <_printf_i+0x244>)
 801cc4a:	230a      	movs	r3, #10
 801cc4c:	e019      	b.n	801cc82 <_printf_i+0x102>
 801cc4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801cc52:	6805      	ldr	r5, [r0, #0]
 801cc54:	600b      	str	r3, [r1, #0]
 801cc56:	bf18      	it	ne
 801cc58:	b22d      	sxthne	r5, r5
 801cc5a:	e7ef      	b.n	801cc3c <_printf_i+0xbc>
 801cc5c:	680b      	ldr	r3, [r1, #0]
 801cc5e:	6825      	ldr	r5, [r4, #0]
 801cc60:	1d18      	adds	r0, r3, #4
 801cc62:	6008      	str	r0, [r1, #0]
 801cc64:	0628      	lsls	r0, r5, #24
 801cc66:	d501      	bpl.n	801cc6c <_printf_i+0xec>
 801cc68:	681d      	ldr	r5, [r3, #0]
 801cc6a:	e002      	b.n	801cc72 <_printf_i+0xf2>
 801cc6c:	0669      	lsls	r1, r5, #25
 801cc6e:	d5fb      	bpl.n	801cc68 <_printf_i+0xe8>
 801cc70:	881d      	ldrh	r5, [r3, #0]
 801cc72:	4854      	ldr	r0, [pc, #336]	; (801cdc4 <_printf_i+0x244>)
 801cc74:	2f6f      	cmp	r7, #111	; 0x6f
 801cc76:	bf0c      	ite	eq
 801cc78:	2308      	moveq	r3, #8
 801cc7a:	230a      	movne	r3, #10
 801cc7c:	2100      	movs	r1, #0
 801cc7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801cc82:	6866      	ldr	r6, [r4, #4]
 801cc84:	60a6      	str	r6, [r4, #8]
 801cc86:	2e00      	cmp	r6, #0
 801cc88:	bfa2      	ittt	ge
 801cc8a:	6821      	ldrge	r1, [r4, #0]
 801cc8c:	f021 0104 	bicge.w	r1, r1, #4
 801cc90:	6021      	strge	r1, [r4, #0]
 801cc92:	b90d      	cbnz	r5, 801cc98 <_printf_i+0x118>
 801cc94:	2e00      	cmp	r6, #0
 801cc96:	d04d      	beq.n	801cd34 <_printf_i+0x1b4>
 801cc98:	4616      	mov	r6, r2
 801cc9a:	fbb5 f1f3 	udiv	r1, r5, r3
 801cc9e:	fb03 5711 	mls	r7, r3, r1, r5
 801cca2:	5dc7      	ldrb	r7, [r0, r7]
 801cca4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801cca8:	462f      	mov	r7, r5
 801ccaa:	42bb      	cmp	r3, r7
 801ccac:	460d      	mov	r5, r1
 801ccae:	d9f4      	bls.n	801cc9a <_printf_i+0x11a>
 801ccb0:	2b08      	cmp	r3, #8
 801ccb2:	d10b      	bne.n	801cccc <_printf_i+0x14c>
 801ccb4:	6823      	ldr	r3, [r4, #0]
 801ccb6:	07df      	lsls	r7, r3, #31
 801ccb8:	d508      	bpl.n	801cccc <_printf_i+0x14c>
 801ccba:	6923      	ldr	r3, [r4, #16]
 801ccbc:	6861      	ldr	r1, [r4, #4]
 801ccbe:	4299      	cmp	r1, r3
 801ccc0:	bfde      	ittt	le
 801ccc2:	2330      	movle	r3, #48	; 0x30
 801ccc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ccc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 801cccc:	1b92      	subs	r2, r2, r6
 801ccce:	6122      	str	r2, [r4, #16]
 801ccd0:	f8cd a000 	str.w	sl, [sp]
 801ccd4:	464b      	mov	r3, r9
 801ccd6:	aa03      	add	r2, sp, #12
 801ccd8:	4621      	mov	r1, r4
 801ccda:	4640      	mov	r0, r8
 801ccdc:	f7ff fee2 	bl	801caa4 <_printf_common>
 801cce0:	3001      	adds	r0, #1
 801cce2:	d14c      	bne.n	801cd7e <_printf_i+0x1fe>
 801cce4:	f04f 30ff 	mov.w	r0, #4294967295
 801cce8:	b004      	add	sp, #16
 801ccea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ccee:	4835      	ldr	r0, [pc, #212]	; (801cdc4 <_printf_i+0x244>)
 801ccf0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ccf4:	6823      	ldr	r3, [r4, #0]
 801ccf6:	680e      	ldr	r6, [r1, #0]
 801ccf8:	061f      	lsls	r7, r3, #24
 801ccfa:	f856 5b04 	ldr.w	r5, [r6], #4
 801ccfe:	600e      	str	r6, [r1, #0]
 801cd00:	d514      	bpl.n	801cd2c <_printf_i+0x1ac>
 801cd02:	07d9      	lsls	r1, r3, #31
 801cd04:	bf44      	itt	mi
 801cd06:	f043 0320 	orrmi.w	r3, r3, #32
 801cd0a:	6023      	strmi	r3, [r4, #0]
 801cd0c:	b91d      	cbnz	r5, 801cd16 <_printf_i+0x196>
 801cd0e:	6823      	ldr	r3, [r4, #0]
 801cd10:	f023 0320 	bic.w	r3, r3, #32
 801cd14:	6023      	str	r3, [r4, #0]
 801cd16:	2310      	movs	r3, #16
 801cd18:	e7b0      	b.n	801cc7c <_printf_i+0xfc>
 801cd1a:	6823      	ldr	r3, [r4, #0]
 801cd1c:	f043 0320 	orr.w	r3, r3, #32
 801cd20:	6023      	str	r3, [r4, #0]
 801cd22:	2378      	movs	r3, #120	; 0x78
 801cd24:	4828      	ldr	r0, [pc, #160]	; (801cdc8 <_printf_i+0x248>)
 801cd26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801cd2a:	e7e3      	b.n	801ccf4 <_printf_i+0x174>
 801cd2c:	065e      	lsls	r6, r3, #25
 801cd2e:	bf48      	it	mi
 801cd30:	b2ad      	uxthmi	r5, r5
 801cd32:	e7e6      	b.n	801cd02 <_printf_i+0x182>
 801cd34:	4616      	mov	r6, r2
 801cd36:	e7bb      	b.n	801ccb0 <_printf_i+0x130>
 801cd38:	680b      	ldr	r3, [r1, #0]
 801cd3a:	6826      	ldr	r6, [r4, #0]
 801cd3c:	6960      	ldr	r0, [r4, #20]
 801cd3e:	1d1d      	adds	r5, r3, #4
 801cd40:	600d      	str	r5, [r1, #0]
 801cd42:	0635      	lsls	r5, r6, #24
 801cd44:	681b      	ldr	r3, [r3, #0]
 801cd46:	d501      	bpl.n	801cd4c <_printf_i+0x1cc>
 801cd48:	6018      	str	r0, [r3, #0]
 801cd4a:	e002      	b.n	801cd52 <_printf_i+0x1d2>
 801cd4c:	0671      	lsls	r1, r6, #25
 801cd4e:	d5fb      	bpl.n	801cd48 <_printf_i+0x1c8>
 801cd50:	8018      	strh	r0, [r3, #0]
 801cd52:	2300      	movs	r3, #0
 801cd54:	6123      	str	r3, [r4, #16]
 801cd56:	4616      	mov	r6, r2
 801cd58:	e7ba      	b.n	801ccd0 <_printf_i+0x150>
 801cd5a:	680b      	ldr	r3, [r1, #0]
 801cd5c:	1d1a      	adds	r2, r3, #4
 801cd5e:	600a      	str	r2, [r1, #0]
 801cd60:	681e      	ldr	r6, [r3, #0]
 801cd62:	6862      	ldr	r2, [r4, #4]
 801cd64:	2100      	movs	r1, #0
 801cd66:	4630      	mov	r0, r6
 801cd68:	f7e3 fa72 	bl	8000250 <memchr>
 801cd6c:	b108      	cbz	r0, 801cd72 <_printf_i+0x1f2>
 801cd6e:	1b80      	subs	r0, r0, r6
 801cd70:	6060      	str	r0, [r4, #4]
 801cd72:	6863      	ldr	r3, [r4, #4]
 801cd74:	6123      	str	r3, [r4, #16]
 801cd76:	2300      	movs	r3, #0
 801cd78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cd7c:	e7a8      	b.n	801ccd0 <_printf_i+0x150>
 801cd7e:	6923      	ldr	r3, [r4, #16]
 801cd80:	4632      	mov	r2, r6
 801cd82:	4649      	mov	r1, r9
 801cd84:	4640      	mov	r0, r8
 801cd86:	47d0      	blx	sl
 801cd88:	3001      	adds	r0, #1
 801cd8a:	d0ab      	beq.n	801cce4 <_printf_i+0x164>
 801cd8c:	6823      	ldr	r3, [r4, #0]
 801cd8e:	079b      	lsls	r3, r3, #30
 801cd90:	d413      	bmi.n	801cdba <_printf_i+0x23a>
 801cd92:	68e0      	ldr	r0, [r4, #12]
 801cd94:	9b03      	ldr	r3, [sp, #12]
 801cd96:	4298      	cmp	r0, r3
 801cd98:	bfb8      	it	lt
 801cd9a:	4618      	movlt	r0, r3
 801cd9c:	e7a4      	b.n	801cce8 <_printf_i+0x168>
 801cd9e:	2301      	movs	r3, #1
 801cda0:	4632      	mov	r2, r6
 801cda2:	4649      	mov	r1, r9
 801cda4:	4640      	mov	r0, r8
 801cda6:	47d0      	blx	sl
 801cda8:	3001      	adds	r0, #1
 801cdaa:	d09b      	beq.n	801cce4 <_printf_i+0x164>
 801cdac:	3501      	adds	r5, #1
 801cdae:	68e3      	ldr	r3, [r4, #12]
 801cdb0:	9903      	ldr	r1, [sp, #12]
 801cdb2:	1a5b      	subs	r3, r3, r1
 801cdb4:	42ab      	cmp	r3, r5
 801cdb6:	dcf2      	bgt.n	801cd9e <_printf_i+0x21e>
 801cdb8:	e7eb      	b.n	801cd92 <_printf_i+0x212>
 801cdba:	2500      	movs	r5, #0
 801cdbc:	f104 0619 	add.w	r6, r4, #25
 801cdc0:	e7f5      	b.n	801cdae <_printf_i+0x22e>
 801cdc2:	bf00      	nop
 801cdc4:	080228aa 	.word	0x080228aa
 801cdc8:	080228bb 	.word	0x080228bb

0801cdcc <_sbrk_r>:
 801cdcc:	b538      	push	{r3, r4, r5, lr}
 801cdce:	4d06      	ldr	r5, [pc, #24]	; (801cde8 <_sbrk_r+0x1c>)
 801cdd0:	2300      	movs	r3, #0
 801cdd2:	4604      	mov	r4, r0
 801cdd4:	4608      	mov	r0, r1
 801cdd6:	602b      	str	r3, [r5, #0]
 801cdd8:	f7eb ff92 	bl	8008d00 <_sbrk>
 801cddc:	1c43      	adds	r3, r0, #1
 801cdde:	d102      	bne.n	801cde6 <_sbrk_r+0x1a>
 801cde0:	682b      	ldr	r3, [r5, #0]
 801cde2:	b103      	cbz	r3, 801cde6 <_sbrk_r+0x1a>
 801cde4:	6023      	str	r3, [r4, #0]
 801cde6:	bd38      	pop	{r3, r4, r5, pc}
 801cde8:	20009f08 	.word	0x20009f08

0801cdec <sniprintf>:
 801cdec:	b40c      	push	{r2, r3}
 801cdee:	b530      	push	{r4, r5, lr}
 801cdf0:	4b17      	ldr	r3, [pc, #92]	; (801ce50 <sniprintf+0x64>)
 801cdf2:	1e0c      	subs	r4, r1, #0
 801cdf4:	681d      	ldr	r5, [r3, #0]
 801cdf6:	b09d      	sub	sp, #116	; 0x74
 801cdf8:	da08      	bge.n	801ce0c <sniprintf+0x20>
 801cdfa:	238b      	movs	r3, #139	; 0x8b
 801cdfc:	602b      	str	r3, [r5, #0]
 801cdfe:	f04f 30ff 	mov.w	r0, #4294967295
 801ce02:	b01d      	add	sp, #116	; 0x74
 801ce04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ce08:	b002      	add	sp, #8
 801ce0a:	4770      	bx	lr
 801ce0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801ce10:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ce14:	bf14      	ite	ne
 801ce16:	f104 33ff 	addne.w	r3, r4, #4294967295
 801ce1a:	4623      	moveq	r3, r4
 801ce1c:	9304      	str	r3, [sp, #16]
 801ce1e:	9307      	str	r3, [sp, #28]
 801ce20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ce24:	9002      	str	r0, [sp, #8]
 801ce26:	9006      	str	r0, [sp, #24]
 801ce28:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ce2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ce2e:	ab21      	add	r3, sp, #132	; 0x84
 801ce30:	a902      	add	r1, sp, #8
 801ce32:	4628      	mov	r0, r5
 801ce34:	9301      	str	r3, [sp, #4]
 801ce36:	f002 fee3 	bl	801fc00 <_svfiprintf_r>
 801ce3a:	1c43      	adds	r3, r0, #1
 801ce3c:	bfbc      	itt	lt
 801ce3e:	238b      	movlt	r3, #139	; 0x8b
 801ce40:	602b      	strlt	r3, [r5, #0]
 801ce42:	2c00      	cmp	r4, #0
 801ce44:	d0dd      	beq.n	801ce02 <sniprintf+0x16>
 801ce46:	9b02      	ldr	r3, [sp, #8]
 801ce48:	2200      	movs	r2, #0
 801ce4a:	701a      	strb	r2, [r3, #0]
 801ce4c:	e7d9      	b.n	801ce02 <sniprintf+0x16>
 801ce4e:	bf00      	nop
 801ce50:	20000398 	.word	0x20000398

0801ce54 <siprintf>:
 801ce54:	b40e      	push	{r1, r2, r3}
 801ce56:	b500      	push	{lr}
 801ce58:	b09c      	sub	sp, #112	; 0x70
 801ce5a:	ab1d      	add	r3, sp, #116	; 0x74
 801ce5c:	9002      	str	r0, [sp, #8]
 801ce5e:	9006      	str	r0, [sp, #24]
 801ce60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ce64:	4809      	ldr	r0, [pc, #36]	; (801ce8c <siprintf+0x38>)
 801ce66:	9107      	str	r1, [sp, #28]
 801ce68:	9104      	str	r1, [sp, #16]
 801ce6a:	4909      	ldr	r1, [pc, #36]	; (801ce90 <siprintf+0x3c>)
 801ce6c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ce70:	9105      	str	r1, [sp, #20]
 801ce72:	6800      	ldr	r0, [r0, #0]
 801ce74:	9301      	str	r3, [sp, #4]
 801ce76:	a902      	add	r1, sp, #8
 801ce78:	f002 fec2 	bl	801fc00 <_svfiprintf_r>
 801ce7c:	9b02      	ldr	r3, [sp, #8]
 801ce7e:	2200      	movs	r2, #0
 801ce80:	701a      	strb	r2, [r3, #0]
 801ce82:	b01c      	add	sp, #112	; 0x70
 801ce84:	f85d eb04 	ldr.w	lr, [sp], #4
 801ce88:	b003      	add	sp, #12
 801ce8a:	4770      	bx	lr
 801ce8c:	20000398 	.word	0x20000398
 801ce90:	ffff0208 	.word	0xffff0208

0801ce94 <strchr>:
 801ce94:	b2c9      	uxtb	r1, r1
 801ce96:	4603      	mov	r3, r0
 801ce98:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ce9c:	b11a      	cbz	r2, 801cea6 <strchr+0x12>
 801ce9e:	428a      	cmp	r2, r1
 801cea0:	d1f9      	bne.n	801ce96 <strchr+0x2>
 801cea2:	4618      	mov	r0, r3
 801cea4:	4770      	bx	lr
 801cea6:	2900      	cmp	r1, #0
 801cea8:	bf18      	it	ne
 801ceaa:	2300      	movne	r3, #0
 801ceac:	e7f9      	b.n	801cea2 <strchr+0xe>

0801ceae <strcpy>:
 801ceae:	4603      	mov	r3, r0
 801ceb0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ceb4:	f803 2b01 	strb.w	r2, [r3], #1
 801ceb8:	2a00      	cmp	r2, #0
 801ceba:	d1f9      	bne.n	801ceb0 <strcpy+0x2>
 801cebc:	4770      	bx	lr

0801cebe <strncat>:
 801cebe:	b530      	push	{r4, r5, lr}
 801cec0:	4604      	mov	r4, r0
 801cec2:	7825      	ldrb	r5, [r4, #0]
 801cec4:	4623      	mov	r3, r4
 801cec6:	3401      	adds	r4, #1
 801cec8:	2d00      	cmp	r5, #0
 801ceca:	d1fa      	bne.n	801cec2 <strncat+0x4>
 801cecc:	3a01      	subs	r2, #1
 801cece:	d304      	bcc.n	801ceda <strncat+0x1c>
 801ced0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ced4:	f803 4b01 	strb.w	r4, [r3], #1
 801ced8:	b904      	cbnz	r4, 801cedc <strncat+0x1e>
 801ceda:	bd30      	pop	{r4, r5, pc}
 801cedc:	2a00      	cmp	r2, #0
 801cede:	d1f5      	bne.n	801cecc <strncat+0xe>
 801cee0:	701a      	strb	r2, [r3, #0]
 801cee2:	e7f3      	b.n	801cecc <strncat+0xe>

0801cee4 <strncpy>:
 801cee4:	b510      	push	{r4, lr}
 801cee6:	3901      	subs	r1, #1
 801cee8:	4603      	mov	r3, r0
 801ceea:	b132      	cbz	r2, 801cefa <strncpy+0x16>
 801ceec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801cef0:	f803 4b01 	strb.w	r4, [r3], #1
 801cef4:	3a01      	subs	r2, #1
 801cef6:	2c00      	cmp	r4, #0
 801cef8:	d1f7      	bne.n	801ceea <strncpy+0x6>
 801cefa:	441a      	add	r2, r3
 801cefc:	2100      	movs	r1, #0
 801cefe:	4293      	cmp	r3, r2
 801cf00:	d100      	bne.n	801cf04 <strncpy+0x20>
 801cf02:	bd10      	pop	{r4, pc}
 801cf04:	f803 1b01 	strb.w	r1, [r3], #1
 801cf08:	e7f9      	b.n	801cefe <strncpy+0x1a>

0801cf0a <sulp>:
 801cf0a:	b570      	push	{r4, r5, r6, lr}
 801cf0c:	4604      	mov	r4, r0
 801cf0e:	460d      	mov	r5, r1
 801cf10:	ec45 4b10 	vmov	d0, r4, r5
 801cf14:	4616      	mov	r6, r2
 801cf16:	f002 fcb9 	bl	801f88c <__ulp>
 801cf1a:	ec51 0b10 	vmov	r0, r1, d0
 801cf1e:	b17e      	cbz	r6, 801cf40 <sulp+0x36>
 801cf20:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801cf24:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	dd09      	ble.n	801cf40 <sulp+0x36>
 801cf2c:	051b      	lsls	r3, r3, #20
 801cf2e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801cf32:	2400      	movs	r4, #0
 801cf34:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801cf38:	4622      	mov	r2, r4
 801cf3a:	462b      	mov	r3, r5
 801cf3c:	f7e3 fb94 	bl	8000668 <__aeabi_dmul>
 801cf40:	bd70      	pop	{r4, r5, r6, pc}
 801cf42:	0000      	movs	r0, r0
 801cf44:	0000      	movs	r0, r0
	...

0801cf48 <_strtod_l>:
 801cf48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf4c:	b0a3      	sub	sp, #140	; 0x8c
 801cf4e:	461f      	mov	r7, r3
 801cf50:	2300      	movs	r3, #0
 801cf52:	931e      	str	r3, [sp, #120]	; 0x78
 801cf54:	4ba4      	ldr	r3, [pc, #656]	; (801d1e8 <_strtod_l+0x2a0>)
 801cf56:	9219      	str	r2, [sp, #100]	; 0x64
 801cf58:	681b      	ldr	r3, [r3, #0]
 801cf5a:	9307      	str	r3, [sp, #28]
 801cf5c:	4604      	mov	r4, r0
 801cf5e:	4618      	mov	r0, r3
 801cf60:	4688      	mov	r8, r1
 801cf62:	f7e3 f967 	bl	8000234 <strlen>
 801cf66:	f04f 0a00 	mov.w	sl, #0
 801cf6a:	4605      	mov	r5, r0
 801cf6c:	f04f 0b00 	mov.w	fp, #0
 801cf70:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801cf74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cf76:	781a      	ldrb	r2, [r3, #0]
 801cf78:	2a2b      	cmp	r2, #43	; 0x2b
 801cf7a:	d04c      	beq.n	801d016 <_strtod_l+0xce>
 801cf7c:	d839      	bhi.n	801cff2 <_strtod_l+0xaa>
 801cf7e:	2a0d      	cmp	r2, #13
 801cf80:	d832      	bhi.n	801cfe8 <_strtod_l+0xa0>
 801cf82:	2a08      	cmp	r2, #8
 801cf84:	d832      	bhi.n	801cfec <_strtod_l+0xa4>
 801cf86:	2a00      	cmp	r2, #0
 801cf88:	d03c      	beq.n	801d004 <_strtod_l+0xbc>
 801cf8a:	2300      	movs	r3, #0
 801cf8c:	930e      	str	r3, [sp, #56]	; 0x38
 801cf8e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801cf90:	7833      	ldrb	r3, [r6, #0]
 801cf92:	2b30      	cmp	r3, #48	; 0x30
 801cf94:	f040 80b4 	bne.w	801d100 <_strtod_l+0x1b8>
 801cf98:	7873      	ldrb	r3, [r6, #1]
 801cf9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801cf9e:	2b58      	cmp	r3, #88	; 0x58
 801cfa0:	d16c      	bne.n	801d07c <_strtod_l+0x134>
 801cfa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cfa4:	9301      	str	r3, [sp, #4]
 801cfa6:	ab1e      	add	r3, sp, #120	; 0x78
 801cfa8:	9702      	str	r7, [sp, #8]
 801cfaa:	9300      	str	r3, [sp, #0]
 801cfac:	4a8f      	ldr	r2, [pc, #572]	; (801d1ec <_strtod_l+0x2a4>)
 801cfae:	ab1f      	add	r3, sp, #124	; 0x7c
 801cfb0:	a91d      	add	r1, sp, #116	; 0x74
 801cfb2:	4620      	mov	r0, r4
 801cfb4:	f001 fdd4 	bl	801eb60 <__gethex>
 801cfb8:	f010 0707 	ands.w	r7, r0, #7
 801cfbc:	4605      	mov	r5, r0
 801cfbe:	d005      	beq.n	801cfcc <_strtod_l+0x84>
 801cfc0:	2f06      	cmp	r7, #6
 801cfc2:	d12a      	bne.n	801d01a <_strtod_l+0xd2>
 801cfc4:	3601      	adds	r6, #1
 801cfc6:	2300      	movs	r3, #0
 801cfc8:	961d      	str	r6, [sp, #116]	; 0x74
 801cfca:	930e      	str	r3, [sp, #56]	; 0x38
 801cfcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	f040 8596 	bne.w	801db00 <_strtod_l+0xbb8>
 801cfd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cfd6:	b1db      	cbz	r3, 801d010 <_strtod_l+0xc8>
 801cfd8:	4652      	mov	r2, sl
 801cfda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801cfde:	ec43 2b10 	vmov	d0, r2, r3
 801cfe2:	b023      	add	sp, #140	; 0x8c
 801cfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfe8:	2a20      	cmp	r2, #32
 801cfea:	d1ce      	bne.n	801cf8a <_strtod_l+0x42>
 801cfec:	3301      	adds	r3, #1
 801cfee:	931d      	str	r3, [sp, #116]	; 0x74
 801cff0:	e7c0      	b.n	801cf74 <_strtod_l+0x2c>
 801cff2:	2a2d      	cmp	r2, #45	; 0x2d
 801cff4:	d1c9      	bne.n	801cf8a <_strtod_l+0x42>
 801cff6:	2201      	movs	r2, #1
 801cff8:	920e      	str	r2, [sp, #56]	; 0x38
 801cffa:	1c5a      	adds	r2, r3, #1
 801cffc:	921d      	str	r2, [sp, #116]	; 0x74
 801cffe:	785b      	ldrb	r3, [r3, #1]
 801d000:	2b00      	cmp	r3, #0
 801d002:	d1c4      	bne.n	801cf8e <_strtod_l+0x46>
 801d004:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d006:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	f040 8576 	bne.w	801dafc <_strtod_l+0xbb4>
 801d010:	4652      	mov	r2, sl
 801d012:	465b      	mov	r3, fp
 801d014:	e7e3      	b.n	801cfde <_strtod_l+0x96>
 801d016:	2200      	movs	r2, #0
 801d018:	e7ee      	b.n	801cff8 <_strtod_l+0xb0>
 801d01a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801d01c:	b13a      	cbz	r2, 801d02e <_strtod_l+0xe6>
 801d01e:	2135      	movs	r1, #53	; 0x35
 801d020:	a820      	add	r0, sp, #128	; 0x80
 801d022:	f002 fd3e 	bl	801faa2 <__copybits>
 801d026:	991e      	ldr	r1, [sp, #120]	; 0x78
 801d028:	4620      	mov	r0, r4
 801d02a:	f002 f903 	bl	801f234 <_Bfree>
 801d02e:	3f01      	subs	r7, #1
 801d030:	2f05      	cmp	r7, #5
 801d032:	d807      	bhi.n	801d044 <_strtod_l+0xfc>
 801d034:	e8df f007 	tbb	[pc, r7]
 801d038:	1d180b0e 	.word	0x1d180b0e
 801d03c:	030e      	.short	0x030e
 801d03e:	f04f 0b00 	mov.w	fp, #0
 801d042:	46da      	mov	sl, fp
 801d044:	0728      	lsls	r0, r5, #28
 801d046:	d5c1      	bpl.n	801cfcc <_strtod_l+0x84>
 801d048:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801d04c:	e7be      	b.n	801cfcc <_strtod_l+0x84>
 801d04e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801d052:	e7f7      	b.n	801d044 <_strtod_l+0xfc>
 801d054:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801d058:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801d05a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801d05e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801d062:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801d066:	e7ed      	b.n	801d044 <_strtod_l+0xfc>
 801d068:	f8df b184 	ldr.w	fp, [pc, #388]	; 801d1f0 <_strtod_l+0x2a8>
 801d06c:	f04f 0a00 	mov.w	sl, #0
 801d070:	e7e8      	b.n	801d044 <_strtod_l+0xfc>
 801d072:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801d076:	f04f 3aff 	mov.w	sl, #4294967295
 801d07a:	e7e3      	b.n	801d044 <_strtod_l+0xfc>
 801d07c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d07e:	1c5a      	adds	r2, r3, #1
 801d080:	921d      	str	r2, [sp, #116]	; 0x74
 801d082:	785b      	ldrb	r3, [r3, #1]
 801d084:	2b30      	cmp	r3, #48	; 0x30
 801d086:	d0f9      	beq.n	801d07c <_strtod_l+0x134>
 801d088:	2b00      	cmp	r3, #0
 801d08a:	d09f      	beq.n	801cfcc <_strtod_l+0x84>
 801d08c:	2301      	movs	r3, #1
 801d08e:	f04f 0900 	mov.w	r9, #0
 801d092:	9304      	str	r3, [sp, #16]
 801d094:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d096:	930a      	str	r3, [sp, #40]	; 0x28
 801d098:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801d09c:	464f      	mov	r7, r9
 801d09e:	220a      	movs	r2, #10
 801d0a0:	981d      	ldr	r0, [sp, #116]	; 0x74
 801d0a2:	7806      	ldrb	r6, [r0, #0]
 801d0a4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801d0a8:	b2d9      	uxtb	r1, r3
 801d0aa:	2909      	cmp	r1, #9
 801d0ac:	d92a      	bls.n	801d104 <_strtod_l+0x1bc>
 801d0ae:	9907      	ldr	r1, [sp, #28]
 801d0b0:	462a      	mov	r2, r5
 801d0b2:	f002 feb3 	bl	801fe1c <strncmp>
 801d0b6:	b398      	cbz	r0, 801d120 <_strtod_l+0x1d8>
 801d0b8:	2000      	movs	r0, #0
 801d0ba:	4633      	mov	r3, r6
 801d0bc:	463d      	mov	r5, r7
 801d0be:	9007      	str	r0, [sp, #28]
 801d0c0:	4602      	mov	r2, r0
 801d0c2:	2b65      	cmp	r3, #101	; 0x65
 801d0c4:	d001      	beq.n	801d0ca <_strtod_l+0x182>
 801d0c6:	2b45      	cmp	r3, #69	; 0x45
 801d0c8:	d118      	bne.n	801d0fc <_strtod_l+0x1b4>
 801d0ca:	b91d      	cbnz	r5, 801d0d4 <_strtod_l+0x18c>
 801d0cc:	9b04      	ldr	r3, [sp, #16]
 801d0ce:	4303      	orrs	r3, r0
 801d0d0:	d098      	beq.n	801d004 <_strtod_l+0xbc>
 801d0d2:	2500      	movs	r5, #0
 801d0d4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801d0d8:	f108 0301 	add.w	r3, r8, #1
 801d0dc:	931d      	str	r3, [sp, #116]	; 0x74
 801d0de:	f898 3001 	ldrb.w	r3, [r8, #1]
 801d0e2:	2b2b      	cmp	r3, #43	; 0x2b
 801d0e4:	d075      	beq.n	801d1d2 <_strtod_l+0x28a>
 801d0e6:	2b2d      	cmp	r3, #45	; 0x2d
 801d0e8:	d07b      	beq.n	801d1e2 <_strtod_l+0x29a>
 801d0ea:	f04f 0c00 	mov.w	ip, #0
 801d0ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801d0f2:	2909      	cmp	r1, #9
 801d0f4:	f240 8082 	bls.w	801d1fc <_strtod_l+0x2b4>
 801d0f8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801d0fc:	2600      	movs	r6, #0
 801d0fe:	e09d      	b.n	801d23c <_strtod_l+0x2f4>
 801d100:	2300      	movs	r3, #0
 801d102:	e7c4      	b.n	801d08e <_strtod_l+0x146>
 801d104:	2f08      	cmp	r7, #8
 801d106:	bfd8      	it	le
 801d108:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801d10a:	f100 0001 	add.w	r0, r0, #1
 801d10e:	bfda      	itte	le
 801d110:	fb02 3301 	mlale	r3, r2, r1, r3
 801d114:	9309      	strle	r3, [sp, #36]	; 0x24
 801d116:	fb02 3909 	mlagt	r9, r2, r9, r3
 801d11a:	3701      	adds	r7, #1
 801d11c:	901d      	str	r0, [sp, #116]	; 0x74
 801d11e:	e7bf      	b.n	801d0a0 <_strtod_l+0x158>
 801d120:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d122:	195a      	adds	r2, r3, r5
 801d124:	921d      	str	r2, [sp, #116]	; 0x74
 801d126:	5d5b      	ldrb	r3, [r3, r5]
 801d128:	2f00      	cmp	r7, #0
 801d12a:	d037      	beq.n	801d19c <_strtod_l+0x254>
 801d12c:	9007      	str	r0, [sp, #28]
 801d12e:	463d      	mov	r5, r7
 801d130:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801d134:	2a09      	cmp	r2, #9
 801d136:	d912      	bls.n	801d15e <_strtod_l+0x216>
 801d138:	2201      	movs	r2, #1
 801d13a:	e7c2      	b.n	801d0c2 <_strtod_l+0x17a>
 801d13c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d13e:	1c5a      	adds	r2, r3, #1
 801d140:	921d      	str	r2, [sp, #116]	; 0x74
 801d142:	785b      	ldrb	r3, [r3, #1]
 801d144:	3001      	adds	r0, #1
 801d146:	2b30      	cmp	r3, #48	; 0x30
 801d148:	d0f8      	beq.n	801d13c <_strtod_l+0x1f4>
 801d14a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801d14e:	2a08      	cmp	r2, #8
 801d150:	f200 84db 	bhi.w	801db0a <_strtod_l+0xbc2>
 801d154:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801d156:	9007      	str	r0, [sp, #28]
 801d158:	2000      	movs	r0, #0
 801d15a:	920a      	str	r2, [sp, #40]	; 0x28
 801d15c:	4605      	mov	r5, r0
 801d15e:	3b30      	subs	r3, #48	; 0x30
 801d160:	f100 0201 	add.w	r2, r0, #1
 801d164:	d014      	beq.n	801d190 <_strtod_l+0x248>
 801d166:	9907      	ldr	r1, [sp, #28]
 801d168:	4411      	add	r1, r2
 801d16a:	9107      	str	r1, [sp, #28]
 801d16c:	462a      	mov	r2, r5
 801d16e:	eb00 0e05 	add.w	lr, r0, r5
 801d172:	210a      	movs	r1, #10
 801d174:	4572      	cmp	r2, lr
 801d176:	d113      	bne.n	801d1a0 <_strtod_l+0x258>
 801d178:	182a      	adds	r2, r5, r0
 801d17a:	2a08      	cmp	r2, #8
 801d17c:	f105 0501 	add.w	r5, r5, #1
 801d180:	4405      	add	r5, r0
 801d182:	dc1c      	bgt.n	801d1be <_strtod_l+0x276>
 801d184:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d186:	220a      	movs	r2, #10
 801d188:	fb02 3301 	mla	r3, r2, r1, r3
 801d18c:	9309      	str	r3, [sp, #36]	; 0x24
 801d18e:	2200      	movs	r2, #0
 801d190:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d192:	1c59      	adds	r1, r3, #1
 801d194:	911d      	str	r1, [sp, #116]	; 0x74
 801d196:	785b      	ldrb	r3, [r3, #1]
 801d198:	4610      	mov	r0, r2
 801d19a:	e7c9      	b.n	801d130 <_strtod_l+0x1e8>
 801d19c:	4638      	mov	r0, r7
 801d19e:	e7d2      	b.n	801d146 <_strtod_l+0x1fe>
 801d1a0:	2a08      	cmp	r2, #8
 801d1a2:	dc04      	bgt.n	801d1ae <_strtod_l+0x266>
 801d1a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801d1a6:	434e      	muls	r6, r1
 801d1a8:	9609      	str	r6, [sp, #36]	; 0x24
 801d1aa:	3201      	adds	r2, #1
 801d1ac:	e7e2      	b.n	801d174 <_strtod_l+0x22c>
 801d1ae:	f102 0c01 	add.w	ip, r2, #1
 801d1b2:	f1bc 0f10 	cmp.w	ip, #16
 801d1b6:	bfd8      	it	le
 801d1b8:	fb01 f909 	mulle.w	r9, r1, r9
 801d1bc:	e7f5      	b.n	801d1aa <_strtod_l+0x262>
 801d1be:	2d10      	cmp	r5, #16
 801d1c0:	bfdc      	itt	le
 801d1c2:	220a      	movle	r2, #10
 801d1c4:	fb02 3909 	mlale	r9, r2, r9, r3
 801d1c8:	e7e1      	b.n	801d18e <_strtod_l+0x246>
 801d1ca:	2300      	movs	r3, #0
 801d1cc:	9307      	str	r3, [sp, #28]
 801d1ce:	2201      	movs	r2, #1
 801d1d0:	e77c      	b.n	801d0cc <_strtod_l+0x184>
 801d1d2:	f04f 0c00 	mov.w	ip, #0
 801d1d6:	f108 0302 	add.w	r3, r8, #2
 801d1da:	931d      	str	r3, [sp, #116]	; 0x74
 801d1dc:	f898 3002 	ldrb.w	r3, [r8, #2]
 801d1e0:	e785      	b.n	801d0ee <_strtod_l+0x1a6>
 801d1e2:	f04f 0c01 	mov.w	ip, #1
 801d1e6:	e7f6      	b.n	801d1d6 <_strtod_l+0x28e>
 801d1e8:	08022b20 	.word	0x08022b20
 801d1ec:	080228cc 	.word	0x080228cc
 801d1f0:	7ff00000 	.word	0x7ff00000
 801d1f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d1f6:	1c59      	adds	r1, r3, #1
 801d1f8:	911d      	str	r1, [sp, #116]	; 0x74
 801d1fa:	785b      	ldrb	r3, [r3, #1]
 801d1fc:	2b30      	cmp	r3, #48	; 0x30
 801d1fe:	d0f9      	beq.n	801d1f4 <_strtod_l+0x2ac>
 801d200:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801d204:	2908      	cmp	r1, #8
 801d206:	f63f af79 	bhi.w	801d0fc <_strtod_l+0x1b4>
 801d20a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801d20e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d210:	9308      	str	r3, [sp, #32]
 801d212:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d214:	1c59      	adds	r1, r3, #1
 801d216:	911d      	str	r1, [sp, #116]	; 0x74
 801d218:	785b      	ldrb	r3, [r3, #1]
 801d21a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801d21e:	2e09      	cmp	r6, #9
 801d220:	d937      	bls.n	801d292 <_strtod_l+0x34a>
 801d222:	9e08      	ldr	r6, [sp, #32]
 801d224:	1b89      	subs	r1, r1, r6
 801d226:	2908      	cmp	r1, #8
 801d228:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801d22c:	dc02      	bgt.n	801d234 <_strtod_l+0x2ec>
 801d22e:	4576      	cmp	r6, lr
 801d230:	bfa8      	it	ge
 801d232:	4676      	movge	r6, lr
 801d234:	f1bc 0f00 	cmp.w	ip, #0
 801d238:	d000      	beq.n	801d23c <_strtod_l+0x2f4>
 801d23a:	4276      	negs	r6, r6
 801d23c:	2d00      	cmp	r5, #0
 801d23e:	d14f      	bne.n	801d2e0 <_strtod_l+0x398>
 801d240:	9904      	ldr	r1, [sp, #16]
 801d242:	4301      	orrs	r1, r0
 801d244:	f47f aec2 	bne.w	801cfcc <_strtod_l+0x84>
 801d248:	2a00      	cmp	r2, #0
 801d24a:	f47f aedb 	bne.w	801d004 <_strtod_l+0xbc>
 801d24e:	2b69      	cmp	r3, #105	; 0x69
 801d250:	d027      	beq.n	801d2a2 <_strtod_l+0x35a>
 801d252:	dc24      	bgt.n	801d29e <_strtod_l+0x356>
 801d254:	2b49      	cmp	r3, #73	; 0x49
 801d256:	d024      	beq.n	801d2a2 <_strtod_l+0x35a>
 801d258:	2b4e      	cmp	r3, #78	; 0x4e
 801d25a:	f47f aed3 	bne.w	801d004 <_strtod_l+0xbc>
 801d25e:	499e      	ldr	r1, [pc, #632]	; (801d4d8 <_strtod_l+0x590>)
 801d260:	a81d      	add	r0, sp, #116	; 0x74
 801d262:	f001 fed5 	bl	801f010 <__match>
 801d266:	2800      	cmp	r0, #0
 801d268:	f43f aecc 	beq.w	801d004 <_strtod_l+0xbc>
 801d26c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d26e:	781b      	ldrb	r3, [r3, #0]
 801d270:	2b28      	cmp	r3, #40	; 0x28
 801d272:	d12d      	bne.n	801d2d0 <_strtod_l+0x388>
 801d274:	4999      	ldr	r1, [pc, #612]	; (801d4dc <_strtod_l+0x594>)
 801d276:	aa20      	add	r2, sp, #128	; 0x80
 801d278:	a81d      	add	r0, sp, #116	; 0x74
 801d27a:	f001 fedd 	bl	801f038 <__hexnan>
 801d27e:	2805      	cmp	r0, #5
 801d280:	d126      	bne.n	801d2d0 <_strtod_l+0x388>
 801d282:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d284:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801d288:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801d28c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801d290:	e69c      	b.n	801cfcc <_strtod_l+0x84>
 801d292:	210a      	movs	r1, #10
 801d294:	fb01 3e0e 	mla	lr, r1, lr, r3
 801d298:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801d29c:	e7b9      	b.n	801d212 <_strtod_l+0x2ca>
 801d29e:	2b6e      	cmp	r3, #110	; 0x6e
 801d2a0:	e7db      	b.n	801d25a <_strtod_l+0x312>
 801d2a2:	498f      	ldr	r1, [pc, #572]	; (801d4e0 <_strtod_l+0x598>)
 801d2a4:	a81d      	add	r0, sp, #116	; 0x74
 801d2a6:	f001 feb3 	bl	801f010 <__match>
 801d2aa:	2800      	cmp	r0, #0
 801d2ac:	f43f aeaa 	beq.w	801d004 <_strtod_l+0xbc>
 801d2b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d2b2:	498c      	ldr	r1, [pc, #560]	; (801d4e4 <_strtod_l+0x59c>)
 801d2b4:	3b01      	subs	r3, #1
 801d2b6:	a81d      	add	r0, sp, #116	; 0x74
 801d2b8:	931d      	str	r3, [sp, #116]	; 0x74
 801d2ba:	f001 fea9 	bl	801f010 <__match>
 801d2be:	b910      	cbnz	r0, 801d2c6 <_strtod_l+0x37e>
 801d2c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d2c2:	3301      	adds	r3, #1
 801d2c4:	931d      	str	r3, [sp, #116]	; 0x74
 801d2c6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801d4f4 <_strtod_l+0x5ac>
 801d2ca:	f04f 0a00 	mov.w	sl, #0
 801d2ce:	e67d      	b.n	801cfcc <_strtod_l+0x84>
 801d2d0:	4885      	ldr	r0, [pc, #532]	; (801d4e8 <_strtod_l+0x5a0>)
 801d2d2:	f002 fd95 	bl	801fe00 <nan>
 801d2d6:	ed8d 0b04 	vstr	d0, [sp, #16]
 801d2da:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801d2de:	e675      	b.n	801cfcc <_strtod_l+0x84>
 801d2e0:	9b07      	ldr	r3, [sp, #28]
 801d2e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d2e4:	1af3      	subs	r3, r6, r3
 801d2e6:	2f00      	cmp	r7, #0
 801d2e8:	bf08      	it	eq
 801d2ea:	462f      	moveq	r7, r5
 801d2ec:	2d10      	cmp	r5, #16
 801d2ee:	9308      	str	r3, [sp, #32]
 801d2f0:	46a8      	mov	r8, r5
 801d2f2:	bfa8      	it	ge
 801d2f4:	f04f 0810 	movge.w	r8, #16
 801d2f8:	f7e3 f93c 	bl	8000574 <__aeabi_ui2d>
 801d2fc:	2d09      	cmp	r5, #9
 801d2fe:	4682      	mov	sl, r0
 801d300:	468b      	mov	fp, r1
 801d302:	dd13      	ble.n	801d32c <_strtod_l+0x3e4>
 801d304:	4b79      	ldr	r3, [pc, #484]	; (801d4ec <_strtod_l+0x5a4>)
 801d306:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801d30a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801d30e:	f7e3 f9ab 	bl	8000668 <__aeabi_dmul>
 801d312:	4682      	mov	sl, r0
 801d314:	4648      	mov	r0, r9
 801d316:	468b      	mov	fp, r1
 801d318:	f7e3 f92c 	bl	8000574 <__aeabi_ui2d>
 801d31c:	4602      	mov	r2, r0
 801d31e:	460b      	mov	r3, r1
 801d320:	4650      	mov	r0, sl
 801d322:	4659      	mov	r1, fp
 801d324:	f7e2 ffea 	bl	80002fc <__adddf3>
 801d328:	4682      	mov	sl, r0
 801d32a:	468b      	mov	fp, r1
 801d32c:	2d0f      	cmp	r5, #15
 801d32e:	dc38      	bgt.n	801d3a2 <_strtod_l+0x45a>
 801d330:	9b08      	ldr	r3, [sp, #32]
 801d332:	2b00      	cmp	r3, #0
 801d334:	f43f ae4a 	beq.w	801cfcc <_strtod_l+0x84>
 801d338:	dd24      	ble.n	801d384 <_strtod_l+0x43c>
 801d33a:	2b16      	cmp	r3, #22
 801d33c:	dc0b      	bgt.n	801d356 <_strtod_l+0x40e>
 801d33e:	4d6b      	ldr	r5, [pc, #428]	; (801d4ec <_strtod_l+0x5a4>)
 801d340:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801d344:	e9d5 0100 	ldrd	r0, r1, [r5]
 801d348:	4652      	mov	r2, sl
 801d34a:	465b      	mov	r3, fp
 801d34c:	f7e3 f98c 	bl	8000668 <__aeabi_dmul>
 801d350:	4682      	mov	sl, r0
 801d352:	468b      	mov	fp, r1
 801d354:	e63a      	b.n	801cfcc <_strtod_l+0x84>
 801d356:	9a08      	ldr	r2, [sp, #32]
 801d358:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801d35c:	4293      	cmp	r3, r2
 801d35e:	db20      	blt.n	801d3a2 <_strtod_l+0x45a>
 801d360:	4c62      	ldr	r4, [pc, #392]	; (801d4ec <_strtod_l+0x5a4>)
 801d362:	f1c5 050f 	rsb	r5, r5, #15
 801d366:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801d36a:	4652      	mov	r2, sl
 801d36c:	465b      	mov	r3, fp
 801d36e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d372:	f7e3 f979 	bl	8000668 <__aeabi_dmul>
 801d376:	9b08      	ldr	r3, [sp, #32]
 801d378:	1b5d      	subs	r5, r3, r5
 801d37a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801d37e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d382:	e7e3      	b.n	801d34c <_strtod_l+0x404>
 801d384:	9b08      	ldr	r3, [sp, #32]
 801d386:	3316      	adds	r3, #22
 801d388:	db0b      	blt.n	801d3a2 <_strtod_l+0x45a>
 801d38a:	9b07      	ldr	r3, [sp, #28]
 801d38c:	4a57      	ldr	r2, [pc, #348]	; (801d4ec <_strtod_l+0x5a4>)
 801d38e:	1b9e      	subs	r6, r3, r6
 801d390:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801d394:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d398:	4650      	mov	r0, sl
 801d39a:	4659      	mov	r1, fp
 801d39c:	f7e3 fa8e 	bl	80008bc <__aeabi_ddiv>
 801d3a0:	e7d6      	b.n	801d350 <_strtod_l+0x408>
 801d3a2:	9b08      	ldr	r3, [sp, #32]
 801d3a4:	eba5 0808 	sub.w	r8, r5, r8
 801d3a8:	4498      	add	r8, r3
 801d3aa:	f1b8 0f00 	cmp.w	r8, #0
 801d3ae:	dd71      	ble.n	801d494 <_strtod_l+0x54c>
 801d3b0:	f018 030f 	ands.w	r3, r8, #15
 801d3b4:	d00a      	beq.n	801d3cc <_strtod_l+0x484>
 801d3b6:	494d      	ldr	r1, [pc, #308]	; (801d4ec <_strtod_l+0x5a4>)
 801d3b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d3bc:	4652      	mov	r2, sl
 801d3be:	465b      	mov	r3, fp
 801d3c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d3c4:	f7e3 f950 	bl	8000668 <__aeabi_dmul>
 801d3c8:	4682      	mov	sl, r0
 801d3ca:	468b      	mov	fp, r1
 801d3cc:	f038 080f 	bics.w	r8, r8, #15
 801d3d0:	d04d      	beq.n	801d46e <_strtod_l+0x526>
 801d3d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801d3d6:	dd22      	ble.n	801d41e <_strtod_l+0x4d6>
 801d3d8:	2500      	movs	r5, #0
 801d3da:	462e      	mov	r6, r5
 801d3dc:	9509      	str	r5, [sp, #36]	; 0x24
 801d3de:	9507      	str	r5, [sp, #28]
 801d3e0:	2322      	movs	r3, #34	; 0x22
 801d3e2:	f8df b110 	ldr.w	fp, [pc, #272]	; 801d4f4 <_strtod_l+0x5ac>
 801d3e6:	6023      	str	r3, [r4, #0]
 801d3e8:	f04f 0a00 	mov.w	sl, #0
 801d3ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d3ee:	2b00      	cmp	r3, #0
 801d3f0:	f43f adec 	beq.w	801cfcc <_strtod_l+0x84>
 801d3f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801d3f6:	4620      	mov	r0, r4
 801d3f8:	f001 ff1c 	bl	801f234 <_Bfree>
 801d3fc:	9907      	ldr	r1, [sp, #28]
 801d3fe:	4620      	mov	r0, r4
 801d400:	f001 ff18 	bl	801f234 <_Bfree>
 801d404:	4631      	mov	r1, r6
 801d406:	4620      	mov	r0, r4
 801d408:	f001 ff14 	bl	801f234 <_Bfree>
 801d40c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d40e:	4620      	mov	r0, r4
 801d410:	f001 ff10 	bl	801f234 <_Bfree>
 801d414:	4629      	mov	r1, r5
 801d416:	4620      	mov	r0, r4
 801d418:	f001 ff0c 	bl	801f234 <_Bfree>
 801d41c:	e5d6      	b.n	801cfcc <_strtod_l+0x84>
 801d41e:	2300      	movs	r3, #0
 801d420:	ea4f 1828 	mov.w	r8, r8, asr #4
 801d424:	4650      	mov	r0, sl
 801d426:	4659      	mov	r1, fp
 801d428:	4699      	mov	r9, r3
 801d42a:	f1b8 0f01 	cmp.w	r8, #1
 801d42e:	dc21      	bgt.n	801d474 <_strtod_l+0x52c>
 801d430:	b10b      	cbz	r3, 801d436 <_strtod_l+0x4ee>
 801d432:	4682      	mov	sl, r0
 801d434:	468b      	mov	fp, r1
 801d436:	4b2e      	ldr	r3, [pc, #184]	; (801d4f0 <_strtod_l+0x5a8>)
 801d438:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801d43c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801d440:	4652      	mov	r2, sl
 801d442:	465b      	mov	r3, fp
 801d444:	e9d9 0100 	ldrd	r0, r1, [r9]
 801d448:	f7e3 f90e 	bl	8000668 <__aeabi_dmul>
 801d44c:	4b29      	ldr	r3, [pc, #164]	; (801d4f4 <_strtod_l+0x5ac>)
 801d44e:	460a      	mov	r2, r1
 801d450:	400b      	ands	r3, r1
 801d452:	4929      	ldr	r1, [pc, #164]	; (801d4f8 <_strtod_l+0x5b0>)
 801d454:	428b      	cmp	r3, r1
 801d456:	4682      	mov	sl, r0
 801d458:	d8be      	bhi.n	801d3d8 <_strtod_l+0x490>
 801d45a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801d45e:	428b      	cmp	r3, r1
 801d460:	bf86      	itte	hi
 801d462:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801d4fc <_strtod_l+0x5b4>
 801d466:	f04f 3aff 	movhi.w	sl, #4294967295
 801d46a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801d46e:	2300      	movs	r3, #0
 801d470:	9304      	str	r3, [sp, #16]
 801d472:	e081      	b.n	801d578 <_strtod_l+0x630>
 801d474:	f018 0f01 	tst.w	r8, #1
 801d478:	d007      	beq.n	801d48a <_strtod_l+0x542>
 801d47a:	4b1d      	ldr	r3, [pc, #116]	; (801d4f0 <_strtod_l+0x5a8>)
 801d47c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801d480:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d484:	f7e3 f8f0 	bl	8000668 <__aeabi_dmul>
 801d488:	2301      	movs	r3, #1
 801d48a:	f109 0901 	add.w	r9, r9, #1
 801d48e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801d492:	e7ca      	b.n	801d42a <_strtod_l+0x4e2>
 801d494:	d0eb      	beq.n	801d46e <_strtod_l+0x526>
 801d496:	f1c8 0800 	rsb	r8, r8, #0
 801d49a:	f018 020f 	ands.w	r2, r8, #15
 801d49e:	d00a      	beq.n	801d4b6 <_strtod_l+0x56e>
 801d4a0:	4b12      	ldr	r3, [pc, #72]	; (801d4ec <_strtod_l+0x5a4>)
 801d4a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d4a6:	4650      	mov	r0, sl
 801d4a8:	4659      	mov	r1, fp
 801d4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4ae:	f7e3 fa05 	bl	80008bc <__aeabi_ddiv>
 801d4b2:	4682      	mov	sl, r0
 801d4b4:	468b      	mov	fp, r1
 801d4b6:	ea5f 1828 	movs.w	r8, r8, asr #4
 801d4ba:	d0d8      	beq.n	801d46e <_strtod_l+0x526>
 801d4bc:	f1b8 0f1f 	cmp.w	r8, #31
 801d4c0:	dd1e      	ble.n	801d500 <_strtod_l+0x5b8>
 801d4c2:	2500      	movs	r5, #0
 801d4c4:	462e      	mov	r6, r5
 801d4c6:	9509      	str	r5, [sp, #36]	; 0x24
 801d4c8:	9507      	str	r5, [sp, #28]
 801d4ca:	2322      	movs	r3, #34	; 0x22
 801d4cc:	f04f 0a00 	mov.w	sl, #0
 801d4d0:	f04f 0b00 	mov.w	fp, #0
 801d4d4:	6023      	str	r3, [r4, #0]
 801d4d6:	e789      	b.n	801d3ec <_strtod_l+0x4a4>
 801d4d8:	080228a5 	.word	0x080228a5
 801d4dc:	080228e0 	.word	0x080228e0
 801d4e0:	0802289d 	.word	0x0802289d
 801d4e4:	08022a24 	.word	0x08022a24
 801d4e8:	08022ce0 	.word	0x08022ce0
 801d4ec:	08022bc0 	.word	0x08022bc0
 801d4f0:	08022b98 	.word	0x08022b98
 801d4f4:	7ff00000 	.word	0x7ff00000
 801d4f8:	7ca00000 	.word	0x7ca00000
 801d4fc:	7fefffff 	.word	0x7fefffff
 801d500:	f018 0310 	ands.w	r3, r8, #16
 801d504:	bf18      	it	ne
 801d506:	236a      	movne	r3, #106	; 0x6a
 801d508:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801d8c0 <_strtod_l+0x978>
 801d50c:	9304      	str	r3, [sp, #16]
 801d50e:	4650      	mov	r0, sl
 801d510:	4659      	mov	r1, fp
 801d512:	2300      	movs	r3, #0
 801d514:	f018 0f01 	tst.w	r8, #1
 801d518:	d004      	beq.n	801d524 <_strtod_l+0x5dc>
 801d51a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801d51e:	f7e3 f8a3 	bl	8000668 <__aeabi_dmul>
 801d522:	2301      	movs	r3, #1
 801d524:	ea5f 0868 	movs.w	r8, r8, asr #1
 801d528:	f109 0908 	add.w	r9, r9, #8
 801d52c:	d1f2      	bne.n	801d514 <_strtod_l+0x5cc>
 801d52e:	b10b      	cbz	r3, 801d534 <_strtod_l+0x5ec>
 801d530:	4682      	mov	sl, r0
 801d532:	468b      	mov	fp, r1
 801d534:	9b04      	ldr	r3, [sp, #16]
 801d536:	b1bb      	cbz	r3, 801d568 <_strtod_l+0x620>
 801d538:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801d53c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d540:	2b00      	cmp	r3, #0
 801d542:	4659      	mov	r1, fp
 801d544:	dd10      	ble.n	801d568 <_strtod_l+0x620>
 801d546:	2b1f      	cmp	r3, #31
 801d548:	f340 8128 	ble.w	801d79c <_strtod_l+0x854>
 801d54c:	2b34      	cmp	r3, #52	; 0x34
 801d54e:	bfde      	ittt	le
 801d550:	3b20      	suble	r3, #32
 801d552:	f04f 32ff 	movle.w	r2, #4294967295
 801d556:	fa02 f303 	lslle.w	r3, r2, r3
 801d55a:	f04f 0a00 	mov.w	sl, #0
 801d55e:	bfcc      	ite	gt
 801d560:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801d564:	ea03 0b01 	andle.w	fp, r3, r1
 801d568:	2200      	movs	r2, #0
 801d56a:	2300      	movs	r3, #0
 801d56c:	4650      	mov	r0, sl
 801d56e:	4659      	mov	r1, fp
 801d570:	f7e3 fae2 	bl	8000b38 <__aeabi_dcmpeq>
 801d574:	2800      	cmp	r0, #0
 801d576:	d1a4      	bne.n	801d4c2 <_strtod_l+0x57a>
 801d578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d57a:	9300      	str	r3, [sp, #0]
 801d57c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801d57e:	462b      	mov	r3, r5
 801d580:	463a      	mov	r2, r7
 801d582:	4620      	mov	r0, r4
 801d584:	f001 fec2 	bl	801f30c <__s2b>
 801d588:	9009      	str	r0, [sp, #36]	; 0x24
 801d58a:	2800      	cmp	r0, #0
 801d58c:	f43f af24 	beq.w	801d3d8 <_strtod_l+0x490>
 801d590:	9b07      	ldr	r3, [sp, #28]
 801d592:	1b9e      	subs	r6, r3, r6
 801d594:	9b08      	ldr	r3, [sp, #32]
 801d596:	2b00      	cmp	r3, #0
 801d598:	bfb4      	ite	lt
 801d59a:	4633      	movlt	r3, r6
 801d59c:	2300      	movge	r3, #0
 801d59e:	9310      	str	r3, [sp, #64]	; 0x40
 801d5a0:	9b08      	ldr	r3, [sp, #32]
 801d5a2:	2500      	movs	r5, #0
 801d5a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d5a8:	9318      	str	r3, [sp, #96]	; 0x60
 801d5aa:	462e      	mov	r6, r5
 801d5ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d5ae:	4620      	mov	r0, r4
 801d5b0:	6859      	ldr	r1, [r3, #4]
 801d5b2:	f001 fdff 	bl	801f1b4 <_Balloc>
 801d5b6:	9007      	str	r0, [sp, #28]
 801d5b8:	2800      	cmp	r0, #0
 801d5ba:	f43f af11 	beq.w	801d3e0 <_strtod_l+0x498>
 801d5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d5c0:	691a      	ldr	r2, [r3, #16]
 801d5c2:	3202      	adds	r2, #2
 801d5c4:	f103 010c 	add.w	r1, r3, #12
 801d5c8:	0092      	lsls	r2, r2, #2
 801d5ca:	300c      	adds	r0, #12
 801d5cc:	f7fe fed4 	bl	801c378 <memcpy>
 801d5d0:	ec4b ab10 	vmov	d0, sl, fp
 801d5d4:	aa20      	add	r2, sp, #128	; 0x80
 801d5d6:	a91f      	add	r1, sp, #124	; 0x7c
 801d5d8:	4620      	mov	r0, r4
 801d5da:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801d5de:	f002 f9d1 	bl	801f984 <__d2b>
 801d5e2:	901e      	str	r0, [sp, #120]	; 0x78
 801d5e4:	2800      	cmp	r0, #0
 801d5e6:	f43f aefb 	beq.w	801d3e0 <_strtod_l+0x498>
 801d5ea:	2101      	movs	r1, #1
 801d5ec:	4620      	mov	r0, r4
 801d5ee:	f001 ff27 	bl	801f440 <__i2b>
 801d5f2:	4606      	mov	r6, r0
 801d5f4:	2800      	cmp	r0, #0
 801d5f6:	f43f aef3 	beq.w	801d3e0 <_strtod_l+0x498>
 801d5fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d5fc:	9904      	ldr	r1, [sp, #16]
 801d5fe:	2b00      	cmp	r3, #0
 801d600:	bfab      	itete	ge
 801d602:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801d604:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801d606:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801d608:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801d60c:	bfac      	ite	ge
 801d60e:	eb03 0902 	addge.w	r9, r3, r2
 801d612:	1ad7      	sublt	r7, r2, r3
 801d614:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d616:	eba3 0801 	sub.w	r8, r3, r1
 801d61a:	4490      	add	r8, r2
 801d61c:	4ba3      	ldr	r3, [pc, #652]	; (801d8ac <_strtod_l+0x964>)
 801d61e:	f108 38ff 	add.w	r8, r8, #4294967295
 801d622:	4598      	cmp	r8, r3
 801d624:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801d628:	f280 80cc 	bge.w	801d7c4 <_strtod_l+0x87c>
 801d62c:	eba3 0308 	sub.w	r3, r3, r8
 801d630:	2b1f      	cmp	r3, #31
 801d632:	eba2 0203 	sub.w	r2, r2, r3
 801d636:	f04f 0101 	mov.w	r1, #1
 801d63a:	f300 80b6 	bgt.w	801d7aa <_strtod_l+0x862>
 801d63e:	fa01 f303 	lsl.w	r3, r1, r3
 801d642:	9311      	str	r3, [sp, #68]	; 0x44
 801d644:	2300      	movs	r3, #0
 801d646:	930c      	str	r3, [sp, #48]	; 0x30
 801d648:	eb09 0802 	add.w	r8, r9, r2
 801d64c:	9b04      	ldr	r3, [sp, #16]
 801d64e:	45c1      	cmp	r9, r8
 801d650:	4417      	add	r7, r2
 801d652:	441f      	add	r7, r3
 801d654:	464b      	mov	r3, r9
 801d656:	bfa8      	it	ge
 801d658:	4643      	movge	r3, r8
 801d65a:	42bb      	cmp	r3, r7
 801d65c:	bfa8      	it	ge
 801d65e:	463b      	movge	r3, r7
 801d660:	2b00      	cmp	r3, #0
 801d662:	bfc2      	ittt	gt
 801d664:	eba8 0803 	subgt.w	r8, r8, r3
 801d668:	1aff      	subgt	r7, r7, r3
 801d66a:	eba9 0903 	subgt.w	r9, r9, r3
 801d66e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d670:	2b00      	cmp	r3, #0
 801d672:	dd17      	ble.n	801d6a4 <_strtod_l+0x75c>
 801d674:	4631      	mov	r1, r6
 801d676:	461a      	mov	r2, r3
 801d678:	4620      	mov	r0, r4
 801d67a:	f001 ff9d 	bl	801f5b8 <__pow5mult>
 801d67e:	4606      	mov	r6, r0
 801d680:	2800      	cmp	r0, #0
 801d682:	f43f aead 	beq.w	801d3e0 <_strtod_l+0x498>
 801d686:	4601      	mov	r1, r0
 801d688:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801d68a:	4620      	mov	r0, r4
 801d68c:	f001 feee 	bl	801f46c <__multiply>
 801d690:	900f      	str	r0, [sp, #60]	; 0x3c
 801d692:	2800      	cmp	r0, #0
 801d694:	f43f aea4 	beq.w	801d3e0 <_strtod_l+0x498>
 801d698:	991e      	ldr	r1, [sp, #120]	; 0x78
 801d69a:	4620      	mov	r0, r4
 801d69c:	f001 fdca 	bl	801f234 <_Bfree>
 801d6a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d6a2:	931e      	str	r3, [sp, #120]	; 0x78
 801d6a4:	f1b8 0f00 	cmp.w	r8, #0
 801d6a8:	f300 8091 	bgt.w	801d7ce <_strtod_l+0x886>
 801d6ac:	9b08      	ldr	r3, [sp, #32]
 801d6ae:	2b00      	cmp	r3, #0
 801d6b0:	dd08      	ble.n	801d6c4 <_strtod_l+0x77c>
 801d6b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d6b4:	9907      	ldr	r1, [sp, #28]
 801d6b6:	4620      	mov	r0, r4
 801d6b8:	f001 ff7e 	bl	801f5b8 <__pow5mult>
 801d6bc:	9007      	str	r0, [sp, #28]
 801d6be:	2800      	cmp	r0, #0
 801d6c0:	f43f ae8e 	beq.w	801d3e0 <_strtod_l+0x498>
 801d6c4:	2f00      	cmp	r7, #0
 801d6c6:	dd08      	ble.n	801d6da <_strtod_l+0x792>
 801d6c8:	9907      	ldr	r1, [sp, #28]
 801d6ca:	463a      	mov	r2, r7
 801d6cc:	4620      	mov	r0, r4
 801d6ce:	f001 ffcd 	bl	801f66c <__lshift>
 801d6d2:	9007      	str	r0, [sp, #28]
 801d6d4:	2800      	cmp	r0, #0
 801d6d6:	f43f ae83 	beq.w	801d3e0 <_strtod_l+0x498>
 801d6da:	f1b9 0f00 	cmp.w	r9, #0
 801d6de:	dd08      	ble.n	801d6f2 <_strtod_l+0x7aa>
 801d6e0:	4631      	mov	r1, r6
 801d6e2:	464a      	mov	r2, r9
 801d6e4:	4620      	mov	r0, r4
 801d6e6:	f001 ffc1 	bl	801f66c <__lshift>
 801d6ea:	4606      	mov	r6, r0
 801d6ec:	2800      	cmp	r0, #0
 801d6ee:	f43f ae77 	beq.w	801d3e0 <_strtod_l+0x498>
 801d6f2:	9a07      	ldr	r2, [sp, #28]
 801d6f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801d6f6:	4620      	mov	r0, r4
 801d6f8:	f002 f840 	bl	801f77c <__mdiff>
 801d6fc:	4605      	mov	r5, r0
 801d6fe:	2800      	cmp	r0, #0
 801d700:	f43f ae6e 	beq.w	801d3e0 <_strtod_l+0x498>
 801d704:	68c3      	ldr	r3, [r0, #12]
 801d706:	930f      	str	r3, [sp, #60]	; 0x3c
 801d708:	2300      	movs	r3, #0
 801d70a:	60c3      	str	r3, [r0, #12]
 801d70c:	4631      	mov	r1, r6
 801d70e:	f002 f819 	bl	801f744 <__mcmp>
 801d712:	2800      	cmp	r0, #0
 801d714:	da65      	bge.n	801d7e2 <_strtod_l+0x89a>
 801d716:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d718:	ea53 030a 	orrs.w	r3, r3, sl
 801d71c:	f040 8087 	bne.w	801d82e <_strtod_l+0x8e6>
 801d720:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d724:	2b00      	cmp	r3, #0
 801d726:	f040 8082 	bne.w	801d82e <_strtod_l+0x8e6>
 801d72a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d72e:	0d1b      	lsrs	r3, r3, #20
 801d730:	051b      	lsls	r3, r3, #20
 801d732:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801d736:	d97a      	bls.n	801d82e <_strtod_l+0x8e6>
 801d738:	696b      	ldr	r3, [r5, #20]
 801d73a:	b913      	cbnz	r3, 801d742 <_strtod_l+0x7fa>
 801d73c:	692b      	ldr	r3, [r5, #16]
 801d73e:	2b01      	cmp	r3, #1
 801d740:	dd75      	ble.n	801d82e <_strtod_l+0x8e6>
 801d742:	4629      	mov	r1, r5
 801d744:	2201      	movs	r2, #1
 801d746:	4620      	mov	r0, r4
 801d748:	f001 ff90 	bl	801f66c <__lshift>
 801d74c:	4631      	mov	r1, r6
 801d74e:	4605      	mov	r5, r0
 801d750:	f001 fff8 	bl	801f744 <__mcmp>
 801d754:	2800      	cmp	r0, #0
 801d756:	dd6a      	ble.n	801d82e <_strtod_l+0x8e6>
 801d758:	9904      	ldr	r1, [sp, #16]
 801d75a:	4a55      	ldr	r2, [pc, #340]	; (801d8b0 <_strtod_l+0x968>)
 801d75c:	465b      	mov	r3, fp
 801d75e:	2900      	cmp	r1, #0
 801d760:	f000 8085 	beq.w	801d86e <_strtod_l+0x926>
 801d764:	ea02 010b 	and.w	r1, r2, fp
 801d768:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801d76c:	dc7f      	bgt.n	801d86e <_strtod_l+0x926>
 801d76e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801d772:	f77f aeaa 	ble.w	801d4ca <_strtod_l+0x582>
 801d776:	4a4f      	ldr	r2, [pc, #316]	; (801d8b4 <_strtod_l+0x96c>)
 801d778:	2300      	movs	r3, #0
 801d77a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801d77e:	4650      	mov	r0, sl
 801d780:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801d784:	4659      	mov	r1, fp
 801d786:	f7e2 ff6f 	bl	8000668 <__aeabi_dmul>
 801d78a:	460b      	mov	r3, r1
 801d78c:	4303      	orrs	r3, r0
 801d78e:	bf08      	it	eq
 801d790:	2322      	moveq	r3, #34	; 0x22
 801d792:	4682      	mov	sl, r0
 801d794:	468b      	mov	fp, r1
 801d796:	bf08      	it	eq
 801d798:	6023      	streq	r3, [r4, #0]
 801d79a:	e62b      	b.n	801d3f4 <_strtod_l+0x4ac>
 801d79c:	f04f 32ff 	mov.w	r2, #4294967295
 801d7a0:	fa02 f303 	lsl.w	r3, r2, r3
 801d7a4:	ea03 0a0a 	and.w	sl, r3, sl
 801d7a8:	e6de      	b.n	801d568 <_strtod_l+0x620>
 801d7aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801d7ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801d7b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801d7b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801d7ba:	fa01 f308 	lsl.w	r3, r1, r8
 801d7be:	930c      	str	r3, [sp, #48]	; 0x30
 801d7c0:	9111      	str	r1, [sp, #68]	; 0x44
 801d7c2:	e741      	b.n	801d648 <_strtod_l+0x700>
 801d7c4:	2300      	movs	r3, #0
 801d7c6:	930c      	str	r3, [sp, #48]	; 0x30
 801d7c8:	2301      	movs	r3, #1
 801d7ca:	9311      	str	r3, [sp, #68]	; 0x44
 801d7cc:	e73c      	b.n	801d648 <_strtod_l+0x700>
 801d7ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 801d7d0:	4642      	mov	r2, r8
 801d7d2:	4620      	mov	r0, r4
 801d7d4:	f001 ff4a 	bl	801f66c <__lshift>
 801d7d8:	901e      	str	r0, [sp, #120]	; 0x78
 801d7da:	2800      	cmp	r0, #0
 801d7dc:	f47f af66 	bne.w	801d6ac <_strtod_l+0x764>
 801d7e0:	e5fe      	b.n	801d3e0 <_strtod_l+0x498>
 801d7e2:	465f      	mov	r7, fp
 801d7e4:	d16e      	bne.n	801d8c4 <_strtod_l+0x97c>
 801d7e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d7e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d7ec:	b342      	cbz	r2, 801d840 <_strtod_l+0x8f8>
 801d7ee:	4a32      	ldr	r2, [pc, #200]	; (801d8b8 <_strtod_l+0x970>)
 801d7f0:	4293      	cmp	r3, r2
 801d7f2:	d128      	bne.n	801d846 <_strtod_l+0x8fe>
 801d7f4:	9b04      	ldr	r3, [sp, #16]
 801d7f6:	4650      	mov	r0, sl
 801d7f8:	b1eb      	cbz	r3, 801d836 <_strtod_l+0x8ee>
 801d7fa:	4a2d      	ldr	r2, [pc, #180]	; (801d8b0 <_strtod_l+0x968>)
 801d7fc:	403a      	ands	r2, r7
 801d7fe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801d802:	f04f 31ff 	mov.w	r1, #4294967295
 801d806:	d819      	bhi.n	801d83c <_strtod_l+0x8f4>
 801d808:	0d12      	lsrs	r2, r2, #20
 801d80a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801d80e:	fa01 f303 	lsl.w	r3, r1, r3
 801d812:	4298      	cmp	r0, r3
 801d814:	d117      	bne.n	801d846 <_strtod_l+0x8fe>
 801d816:	4b29      	ldr	r3, [pc, #164]	; (801d8bc <_strtod_l+0x974>)
 801d818:	429f      	cmp	r7, r3
 801d81a:	d102      	bne.n	801d822 <_strtod_l+0x8da>
 801d81c:	3001      	adds	r0, #1
 801d81e:	f43f addf 	beq.w	801d3e0 <_strtod_l+0x498>
 801d822:	4b23      	ldr	r3, [pc, #140]	; (801d8b0 <_strtod_l+0x968>)
 801d824:	403b      	ands	r3, r7
 801d826:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801d82a:	f04f 0a00 	mov.w	sl, #0
 801d82e:	9b04      	ldr	r3, [sp, #16]
 801d830:	2b00      	cmp	r3, #0
 801d832:	d1a0      	bne.n	801d776 <_strtod_l+0x82e>
 801d834:	e5de      	b.n	801d3f4 <_strtod_l+0x4ac>
 801d836:	f04f 33ff 	mov.w	r3, #4294967295
 801d83a:	e7ea      	b.n	801d812 <_strtod_l+0x8ca>
 801d83c:	460b      	mov	r3, r1
 801d83e:	e7e8      	b.n	801d812 <_strtod_l+0x8ca>
 801d840:	ea53 030a 	orrs.w	r3, r3, sl
 801d844:	d088      	beq.n	801d758 <_strtod_l+0x810>
 801d846:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d848:	b1db      	cbz	r3, 801d882 <_strtod_l+0x93a>
 801d84a:	423b      	tst	r3, r7
 801d84c:	d0ef      	beq.n	801d82e <_strtod_l+0x8e6>
 801d84e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d850:	9a04      	ldr	r2, [sp, #16]
 801d852:	4650      	mov	r0, sl
 801d854:	4659      	mov	r1, fp
 801d856:	b1c3      	cbz	r3, 801d88a <_strtod_l+0x942>
 801d858:	f7ff fb57 	bl	801cf0a <sulp>
 801d85c:	4602      	mov	r2, r0
 801d85e:	460b      	mov	r3, r1
 801d860:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801d864:	f7e2 fd4a 	bl	80002fc <__adddf3>
 801d868:	4682      	mov	sl, r0
 801d86a:	468b      	mov	fp, r1
 801d86c:	e7df      	b.n	801d82e <_strtod_l+0x8e6>
 801d86e:	4013      	ands	r3, r2
 801d870:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801d874:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801d878:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801d87c:	f04f 3aff 	mov.w	sl, #4294967295
 801d880:	e7d5      	b.n	801d82e <_strtod_l+0x8e6>
 801d882:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d884:	ea13 0f0a 	tst.w	r3, sl
 801d888:	e7e0      	b.n	801d84c <_strtod_l+0x904>
 801d88a:	f7ff fb3e 	bl	801cf0a <sulp>
 801d88e:	4602      	mov	r2, r0
 801d890:	460b      	mov	r3, r1
 801d892:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801d896:	f7e2 fd2f 	bl	80002f8 <__aeabi_dsub>
 801d89a:	2200      	movs	r2, #0
 801d89c:	2300      	movs	r3, #0
 801d89e:	4682      	mov	sl, r0
 801d8a0:	468b      	mov	fp, r1
 801d8a2:	f7e3 f949 	bl	8000b38 <__aeabi_dcmpeq>
 801d8a6:	2800      	cmp	r0, #0
 801d8a8:	d0c1      	beq.n	801d82e <_strtod_l+0x8e6>
 801d8aa:	e60e      	b.n	801d4ca <_strtod_l+0x582>
 801d8ac:	fffffc02 	.word	0xfffffc02
 801d8b0:	7ff00000 	.word	0x7ff00000
 801d8b4:	39500000 	.word	0x39500000
 801d8b8:	000fffff 	.word	0x000fffff
 801d8bc:	7fefffff 	.word	0x7fefffff
 801d8c0:	080228f8 	.word	0x080228f8
 801d8c4:	4631      	mov	r1, r6
 801d8c6:	4628      	mov	r0, r5
 801d8c8:	f002 f8b8 	bl	801fa3c <__ratio>
 801d8cc:	ec59 8b10 	vmov	r8, r9, d0
 801d8d0:	ee10 0a10 	vmov	r0, s0
 801d8d4:	2200      	movs	r2, #0
 801d8d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d8da:	4649      	mov	r1, r9
 801d8dc:	f7e3 f940 	bl	8000b60 <__aeabi_dcmple>
 801d8e0:	2800      	cmp	r0, #0
 801d8e2:	d07c      	beq.n	801d9de <_strtod_l+0xa96>
 801d8e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	d04c      	beq.n	801d984 <_strtod_l+0xa3c>
 801d8ea:	4b95      	ldr	r3, [pc, #596]	; (801db40 <_strtod_l+0xbf8>)
 801d8ec:	2200      	movs	r2, #0
 801d8ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801d8f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801db40 <_strtod_l+0xbf8>
 801d8f6:	f04f 0800 	mov.w	r8, #0
 801d8fa:	4b92      	ldr	r3, [pc, #584]	; (801db44 <_strtod_l+0xbfc>)
 801d8fc:	403b      	ands	r3, r7
 801d8fe:	9311      	str	r3, [sp, #68]	; 0x44
 801d900:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d902:	4b91      	ldr	r3, [pc, #580]	; (801db48 <_strtod_l+0xc00>)
 801d904:	429a      	cmp	r2, r3
 801d906:	f040 80b2 	bne.w	801da6e <_strtod_l+0xb26>
 801d90a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801d90e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d912:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801d916:	ec4b ab10 	vmov	d0, sl, fp
 801d91a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801d91e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801d922:	f001 ffb3 	bl	801f88c <__ulp>
 801d926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d92a:	ec53 2b10 	vmov	r2, r3, d0
 801d92e:	f7e2 fe9b 	bl	8000668 <__aeabi_dmul>
 801d932:	4652      	mov	r2, sl
 801d934:	465b      	mov	r3, fp
 801d936:	f7e2 fce1 	bl	80002fc <__adddf3>
 801d93a:	460b      	mov	r3, r1
 801d93c:	4981      	ldr	r1, [pc, #516]	; (801db44 <_strtod_l+0xbfc>)
 801d93e:	4a83      	ldr	r2, [pc, #524]	; (801db4c <_strtod_l+0xc04>)
 801d940:	4019      	ands	r1, r3
 801d942:	4291      	cmp	r1, r2
 801d944:	4682      	mov	sl, r0
 801d946:	d95e      	bls.n	801da06 <_strtod_l+0xabe>
 801d948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d94a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801d94e:	4293      	cmp	r3, r2
 801d950:	d103      	bne.n	801d95a <_strtod_l+0xa12>
 801d952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d954:	3301      	adds	r3, #1
 801d956:	f43f ad43 	beq.w	801d3e0 <_strtod_l+0x498>
 801d95a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801db58 <_strtod_l+0xc10>
 801d95e:	f04f 3aff 	mov.w	sl, #4294967295
 801d962:	991e      	ldr	r1, [sp, #120]	; 0x78
 801d964:	4620      	mov	r0, r4
 801d966:	f001 fc65 	bl	801f234 <_Bfree>
 801d96a:	9907      	ldr	r1, [sp, #28]
 801d96c:	4620      	mov	r0, r4
 801d96e:	f001 fc61 	bl	801f234 <_Bfree>
 801d972:	4631      	mov	r1, r6
 801d974:	4620      	mov	r0, r4
 801d976:	f001 fc5d 	bl	801f234 <_Bfree>
 801d97a:	4629      	mov	r1, r5
 801d97c:	4620      	mov	r0, r4
 801d97e:	f001 fc59 	bl	801f234 <_Bfree>
 801d982:	e613      	b.n	801d5ac <_strtod_l+0x664>
 801d984:	f1ba 0f00 	cmp.w	sl, #0
 801d988:	d11b      	bne.n	801d9c2 <_strtod_l+0xa7a>
 801d98a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d98e:	b9f3      	cbnz	r3, 801d9ce <_strtod_l+0xa86>
 801d990:	4b6b      	ldr	r3, [pc, #428]	; (801db40 <_strtod_l+0xbf8>)
 801d992:	2200      	movs	r2, #0
 801d994:	4640      	mov	r0, r8
 801d996:	4649      	mov	r1, r9
 801d998:	f7e3 f8d8 	bl	8000b4c <__aeabi_dcmplt>
 801d99c:	b9d0      	cbnz	r0, 801d9d4 <_strtod_l+0xa8c>
 801d99e:	4640      	mov	r0, r8
 801d9a0:	4649      	mov	r1, r9
 801d9a2:	4b6b      	ldr	r3, [pc, #428]	; (801db50 <_strtod_l+0xc08>)
 801d9a4:	2200      	movs	r2, #0
 801d9a6:	f7e2 fe5f 	bl	8000668 <__aeabi_dmul>
 801d9aa:	4680      	mov	r8, r0
 801d9ac:	4689      	mov	r9, r1
 801d9ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801d9b2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801d9b6:	931b      	str	r3, [sp, #108]	; 0x6c
 801d9b8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801d9bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801d9c0:	e79b      	b.n	801d8fa <_strtod_l+0x9b2>
 801d9c2:	f1ba 0f01 	cmp.w	sl, #1
 801d9c6:	d102      	bne.n	801d9ce <_strtod_l+0xa86>
 801d9c8:	2f00      	cmp	r7, #0
 801d9ca:	f43f ad7e 	beq.w	801d4ca <_strtod_l+0x582>
 801d9ce:	4b61      	ldr	r3, [pc, #388]	; (801db54 <_strtod_l+0xc0c>)
 801d9d0:	2200      	movs	r2, #0
 801d9d2:	e78c      	b.n	801d8ee <_strtod_l+0x9a6>
 801d9d4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801db50 <_strtod_l+0xc08>
 801d9d8:	f04f 0800 	mov.w	r8, #0
 801d9dc:	e7e7      	b.n	801d9ae <_strtod_l+0xa66>
 801d9de:	4b5c      	ldr	r3, [pc, #368]	; (801db50 <_strtod_l+0xc08>)
 801d9e0:	4640      	mov	r0, r8
 801d9e2:	4649      	mov	r1, r9
 801d9e4:	2200      	movs	r2, #0
 801d9e6:	f7e2 fe3f 	bl	8000668 <__aeabi_dmul>
 801d9ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d9ec:	4680      	mov	r8, r0
 801d9ee:	4689      	mov	r9, r1
 801d9f0:	b933      	cbnz	r3, 801da00 <_strtod_l+0xab8>
 801d9f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d9f6:	9012      	str	r0, [sp, #72]	; 0x48
 801d9f8:	9313      	str	r3, [sp, #76]	; 0x4c
 801d9fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801d9fe:	e7dd      	b.n	801d9bc <_strtod_l+0xa74>
 801da00:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801da04:	e7f9      	b.n	801d9fa <_strtod_l+0xab2>
 801da06:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801da0a:	9b04      	ldr	r3, [sp, #16]
 801da0c:	2b00      	cmp	r3, #0
 801da0e:	d1a8      	bne.n	801d962 <_strtod_l+0xa1a>
 801da10:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801da14:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801da16:	0d1b      	lsrs	r3, r3, #20
 801da18:	051b      	lsls	r3, r3, #20
 801da1a:	429a      	cmp	r2, r3
 801da1c:	d1a1      	bne.n	801d962 <_strtod_l+0xa1a>
 801da1e:	4640      	mov	r0, r8
 801da20:	4649      	mov	r1, r9
 801da22:	f7e3 f981 	bl	8000d28 <__aeabi_d2lz>
 801da26:	f7e2 fdf1 	bl	800060c <__aeabi_l2d>
 801da2a:	4602      	mov	r2, r0
 801da2c:	460b      	mov	r3, r1
 801da2e:	4640      	mov	r0, r8
 801da30:	4649      	mov	r1, r9
 801da32:	f7e2 fc61 	bl	80002f8 <__aeabi_dsub>
 801da36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801da38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801da3c:	ea43 030a 	orr.w	r3, r3, sl
 801da40:	4313      	orrs	r3, r2
 801da42:	4680      	mov	r8, r0
 801da44:	4689      	mov	r9, r1
 801da46:	d053      	beq.n	801daf0 <_strtod_l+0xba8>
 801da48:	a335      	add	r3, pc, #212	; (adr r3, 801db20 <_strtod_l+0xbd8>)
 801da4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da4e:	f7e3 f87d 	bl	8000b4c <__aeabi_dcmplt>
 801da52:	2800      	cmp	r0, #0
 801da54:	f47f acce 	bne.w	801d3f4 <_strtod_l+0x4ac>
 801da58:	a333      	add	r3, pc, #204	; (adr r3, 801db28 <_strtod_l+0xbe0>)
 801da5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da5e:	4640      	mov	r0, r8
 801da60:	4649      	mov	r1, r9
 801da62:	f7e3 f891 	bl	8000b88 <__aeabi_dcmpgt>
 801da66:	2800      	cmp	r0, #0
 801da68:	f43f af7b 	beq.w	801d962 <_strtod_l+0xa1a>
 801da6c:	e4c2      	b.n	801d3f4 <_strtod_l+0x4ac>
 801da6e:	9b04      	ldr	r3, [sp, #16]
 801da70:	b333      	cbz	r3, 801dac0 <_strtod_l+0xb78>
 801da72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801da74:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801da78:	d822      	bhi.n	801dac0 <_strtod_l+0xb78>
 801da7a:	a32d      	add	r3, pc, #180	; (adr r3, 801db30 <_strtod_l+0xbe8>)
 801da7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da80:	4640      	mov	r0, r8
 801da82:	4649      	mov	r1, r9
 801da84:	f7e3 f86c 	bl	8000b60 <__aeabi_dcmple>
 801da88:	b1a0      	cbz	r0, 801dab4 <_strtod_l+0xb6c>
 801da8a:	4649      	mov	r1, r9
 801da8c:	4640      	mov	r0, r8
 801da8e:	f7e3 f8c3 	bl	8000c18 <__aeabi_d2uiz>
 801da92:	2801      	cmp	r0, #1
 801da94:	bf38      	it	cc
 801da96:	2001      	movcc	r0, #1
 801da98:	f7e2 fd6c 	bl	8000574 <__aeabi_ui2d>
 801da9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801da9e:	4680      	mov	r8, r0
 801daa0:	4689      	mov	r9, r1
 801daa2:	bb13      	cbnz	r3, 801daea <_strtod_l+0xba2>
 801daa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801daa8:	9014      	str	r0, [sp, #80]	; 0x50
 801daaa:	9315      	str	r3, [sp, #84]	; 0x54
 801daac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801dab0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801dab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dab6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dab8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801dabc:	1a9b      	subs	r3, r3, r2
 801dabe:	930d      	str	r3, [sp, #52]	; 0x34
 801dac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801dac4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801dac8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801dacc:	f001 fede 	bl	801f88c <__ulp>
 801dad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801dad4:	ec53 2b10 	vmov	r2, r3, d0
 801dad8:	f7e2 fdc6 	bl	8000668 <__aeabi_dmul>
 801dadc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801dae0:	f7e2 fc0c 	bl	80002fc <__adddf3>
 801dae4:	4682      	mov	sl, r0
 801dae6:	468b      	mov	fp, r1
 801dae8:	e78f      	b.n	801da0a <_strtod_l+0xac2>
 801daea:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801daee:	e7dd      	b.n	801daac <_strtod_l+0xb64>
 801daf0:	a311      	add	r3, pc, #68	; (adr r3, 801db38 <_strtod_l+0xbf0>)
 801daf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801daf6:	f7e3 f829 	bl	8000b4c <__aeabi_dcmplt>
 801dafa:	e7b4      	b.n	801da66 <_strtod_l+0xb1e>
 801dafc:	2300      	movs	r3, #0
 801dafe:	930e      	str	r3, [sp, #56]	; 0x38
 801db00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801db02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801db04:	6013      	str	r3, [r2, #0]
 801db06:	f7ff ba65 	b.w	801cfd4 <_strtod_l+0x8c>
 801db0a:	2b65      	cmp	r3, #101	; 0x65
 801db0c:	f43f ab5d 	beq.w	801d1ca <_strtod_l+0x282>
 801db10:	2b45      	cmp	r3, #69	; 0x45
 801db12:	f43f ab5a 	beq.w	801d1ca <_strtod_l+0x282>
 801db16:	2201      	movs	r2, #1
 801db18:	f7ff bb92 	b.w	801d240 <_strtod_l+0x2f8>
 801db1c:	f3af 8000 	nop.w
 801db20:	94a03595 	.word	0x94a03595
 801db24:	3fdfffff 	.word	0x3fdfffff
 801db28:	35afe535 	.word	0x35afe535
 801db2c:	3fe00000 	.word	0x3fe00000
 801db30:	ffc00000 	.word	0xffc00000
 801db34:	41dfffff 	.word	0x41dfffff
 801db38:	94a03595 	.word	0x94a03595
 801db3c:	3fcfffff 	.word	0x3fcfffff
 801db40:	3ff00000 	.word	0x3ff00000
 801db44:	7ff00000 	.word	0x7ff00000
 801db48:	7fe00000 	.word	0x7fe00000
 801db4c:	7c9fffff 	.word	0x7c9fffff
 801db50:	3fe00000 	.word	0x3fe00000
 801db54:	bff00000 	.word	0xbff00000
 801db58:	7fefffff 	.word	0x7fefffff

0801db5c <strtof>:
 801db5c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 801db60:	4e26      	ldr	r6, [pc, #152]	; (801dbfc <strtof+0xa0>)
 801db62:	4b27      	ldr	r3, [pc, #156]	; (801dc00 <strtof+0xa4>)
 801db64:	460a      	mov	r2, r1
 801db66:	ed2d 8b02 	vpush	{d8}
 801db6a:	4601      	mov	r1, r0
 801db6c:	6830      	ldr	r0, [r6, #0]
 801db6e:	f7ff f9eb 	bl	801cf48 <_strtod_l>
 801db72:	ec55 4b10 	vmov	r4, r5, d0
 801db76:	ee10 2a10 	vmov	r2, s0
 801db7a:	ee10 0a10 	vmov	r0, s0
 801db7e:	462b      	mov	r3, r5
 801db80:	4629      	mov	r1, r5
 801db82:	f7e3 f80b 	bl	8000b9c <__aeabi_dcmpun>
 801db86:	b190      	cbz	r0, 801dbae <strtof+0x52>
 801db88:	2d00      	cmp	r5, #0
 801db8a:	481e      	ldr	r0, [pc, #120]	; (801dc04 <strtof+0xa8>)
 801db8c:	da09      	bge.n	801dba2 <strtof+0x46>
 801db8e:	f002 f93f 	bl	801fe10 <nanf>
 801db92:	eeb1 8a40 	vneg.f32	s16, s0
 801db96:	eeb0 0a48 	vmov.f32	s0, s16
 801db9a:	ecbd 8b02 	vpop	{d8}
 801db9e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801dba2:	ecbd 8b02 	vpop	{d8}
 801dba6:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 801dbaa:	f002 b931 	b.w	801fe10 <nanf>
 801dbae:	4620      	mov	r0, r4
 801dbb0:	4629      	mov	r1, r5
 801dbb2:	f7e3 f851 	bl	8000c58 <__aeabi_d2f>
 801dbb6:	ee08 0a10 	vmov	s16, r0
 801dbba:	eddf 7a13 	vldr	s15, [pc, #76]	; 801dc08 <strtof+0xac>
 801dbbe:	eeb0 7ac8 	vabs.f32	s14, s16
 801dbc2:	eeb4 7a67 	vcmp.f32	s14, s15
 801dbc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dbca:	dde4      	ble.n	801db96 <strtof+0x3a>
 801dbcc:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 801dbd0:	4b0e      	ldr	r3, [pc, #56]	; (801dc0c <strtof+0xb0>)
 801dbd2:	f04f 32ff 	mov.w	r2, #4294967295
 801dbd6:	4620      	mov	r0, r4
 801dbd8:	4649      	mov	r1, r9
 801dbda:	f7e2 ffdf 	bl	8000b9c <__aeabi_dcmpun>
 801dbde:	b940      	cbnz	r0, 801dbf2 <strtof+0x96>
 801dbe0:	4b0a      	ldr	r3, [pc, #40]	; (801dc0c <strtof+0xb0>)
 801dbe2:	f04f 32ff 	mov.w	r2, #4294967295
 801dbe6:	4620      	mov	r0, r4
 801dbe8:	4649      	mov	r1, r9
 801dbea:	f7e2 ffb9 	bl	8000b60 <__aeabi_dcmple>
 801dbee:	2800      	cmp	r0, #0
 801dbf0:	d0d1      	beq.n	801db96 <strtof+0x3a>
 801dbf2:	6833      	ldr	r3, [r6, #0]
 801dbf4:	2222      	movs	r2, #34	; 0x22
 801dbf6:	601a      	str	r2, [r3, #0]
 801dbf8:	e7cd      	b.n	801db96 <strtof+0x3a>
 801dbfa:	bf00      	nop
 801dbfc:	20000398 	.word	0x20000398
 801dc00:	20000400 	.word	0x20000400
 801dc04:	08022ce0 	.word	0x08022ce0
 801dc08:	7f7fffff 	.word	0x7f7fffff
 801dc0c:	7fefffff 	.word	0x7fefffff

0801dc10 <_strtol_l.isra.0>:
 801dc10:	2b01      	cmp	r3, #1
 801dc12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dc16:	d001      	beq.n	801dc1c <_strtol_l.isra.0+0xc>
 801dc18:	2b24      	cmp	r3, #36	; 0x24
 801dc1a:	d906      	bls.n	801dc2a <_strtol_l.isra.0+0x1a>
 801dc1c:	f7fe fb72 	bl	801c304 <__errno>
 801dc20:	2316      	movs	r3, #22
 801dc22:	6003      	str	r3, [r0, #0]
 801dc24:	2000      	movs	r0, #0
 801dc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc2a:	4f3a      	ldr	r7, [pc, #232]	; (801dd14 <_strtol_l.isra.0+0x104>)
 801dc2c:	468e      	mov	lr, r1
 801dc2e:	4676      	mov	r6, lr
 801dc30:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801dc34:	5de5      	ldrb	r5, [r4, r7]
 801dc36:	f015 0508 	ands.w	r5, r5, #8
 801dc3a:	d1f8      	bne.n	801dc2e <_strtol_l.isra.0+0x1e>
 801dc3c:	2c2d      	cmp	r4, #45	; 0x2d
 801dc3e:	d134      	bne.n	801dcaa <_strtol_l.isra.0+0x9a>
 801dc40:	f89e 4000 	ldrb.w	r4, [lr]
 801dc44:	f04f 0801 	mov.w	r8, #1
 801dc48:	f106 0e02 	add.w	lr, r6, #2
 801dc4c:	2b00      	cmp	r3, #0
 801dc4e:	d05c      	beq.n	801dd0a <_strtol_l.isra.0+0xfa>
 801dc50:	2b10      	cmp	r3, #16
 801dc52:	d10c      	bne.n	801dc6e <_strtol_l.isra.0+0x5e>
 801dc54:	2c30      	cmp	r4, #48	; 0x30
 801dc56:	d10a      	bne.n	801dc6e <_strtol_l.isra.0+0x5e>
 801dc58:	f89e 4000 	ldrb.w	r4, [lr]
 801dc5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801dc60:	2c58      	cmp	r4, #88	; 0x58
 801dc62:	d14d      	bne.n	801dd00 <_strtol_l.isra.0+0xf0>
 801dc64:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801dc68:	2310      	movs	r3, #16
 801dc6a:	f10e 0e02 	add.w	lr, lr, #2
 801dc6e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801dc72:	f10c 3cff 	add.w	ip, ip, #4294967295
 801dc76:	2600      	movs	r6, #0
 801dc78:	fbbc f9f3 	udiv	r9, ip, r3
 801dc7c:	4635      	mov	r5, r6
 801dc7e:	fb03 ca19 	mls	sl, r3, r9, ip
 801dc82:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801dc86:	2f09      	cmp	r7, #9
 801dc88:	d818      	bhi.n	801dcbc <_strtol_l.isra.0+0xac>
 801dc8a:	463c      	mov	r4, r7
 801dc8c:	42a3      	cmp	r3, r4
 801dc8e:	dd24      	ble.n	801dcda <_strtol_l.isra.0+0xca>
 801dc90:	2e00      	cmp	r6, #0
 801dc92:	db1f      	blt.n	801dcd4 <_strtol_l.isra.0+0xc4>
 801dc94:	45a9      	cmp	r9, r5
 801dc96:	d31d      	bcc.n	801dcd4 <_strtol_l.isra.0+0xc4>
 801dc98:	d101      	bne.n	801dc9e <_strtol_l.isra.0+0x8e>
 801dc9a:	45a2      	cmp	sl, r4
 801dc9c:	db1a      	blt.n	801dcd4 <_strtol_l.isra.0+0xc4>
 801dc9e:	fb05 4503 	mla	r5, r5, r3, r4
 801dca2:	2601      	movs	r6, #1
 801dca4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801dca8:	e7eb      	b.n	801dc82 <_strtol_l.isra.0+0x72>
 801dcaa:	2c2b      	cmp	r4, #43	; 0x2b
 801dcac:	bf08      	it	eq
 801dcae:	f89e 4000 	ldrbeq.w	r4, [lr]
 801dcb2:	46a8      	mov	r8, r5
 801dcb4:	bf08      	it	eq
 801dcb6:	f106 0e02 	addeq.w	lr, r6, #2
 801dcba:	e7c7      	b.n	801dc4c <_strtol_l.isra.0+0x3c>
 801dcbc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801dcc0:	2f19      	cmp	r7, #25
 801dcc2:	d801      	bhi.n	801dcc8 <_strtol_l.isra.0+0xb8>
 801dcc4:	3c37      	subs	r4, #55	; 0x37
 801dcc6:	e7e1      	b.n	801dc8c <_strtol_l.isra.0+0x7c>
 801dcc8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801dccc:	2f19      	cmp	r7, #25
 801dcce:	d804      	bhi.n	801dcda <_strtol_l.isra.0+0xca>
 801dcd0:	3c57      	subs	r4, #87	; 0x57
 801dcd2:	e7db      	b.n	801dc8c <_strtol_l.isra.0+0x7c>
 801dcd4:	f04f 36ff 	mov.w	r6, #4294967295
 801dcd8:	e7e4      	b.n	801dca4 <_strtol_l.isra.0+0x94>
 801dcda:	2e00      	cmp	r6, #0
 801dcdc:	da05      	bge.n	801dcea <_strtol_l.isra.0+0xda>
 801dcde:	2322      	movs	r3, #34	; 0x22
 801dce0:	6003      	str	r3, [r0, #0]
 801dce2:	4665      	mov	r5, ip
 801dce4:	b942      	cbnz	r2, 801dcf8 <_strtol_l.isra.0+0xe8>
 801dce6:	4628      	mov	r0, r5
 801dce8:	e79d      	b.n	801dc26 <_strtol_l.isra.0+0x16>
 801dcea:	f1b8 0f00 	cmp.w	r8, #0
 801dcee:	d000      	beq.n	801dcf2 <_strtol_l.isra.0+0xe2>
 801dcf0:	426d      	negs	r5, r5
 801dcf2:	2a00      	cmp	r2, #0
 801dcf4:	d0f7      	beq.n	801dce6 <_strtol_l.isra.0+0xd6>
 801dcf6:	b10e      	cbz	r6, 801dcfc <_strtol_l.isra.0+0xec>
 801dcf8:	f10e 31ff 	add.w	r1, lr, #4294967295
 801dcfc:	6011      	str	r1, [r2, #0]
 801dcfe:	e7f2      	b.n	801dce6 <_strtol_l.isra.0+0xd6>
 801dd00:	2430      	movs	r4, #48	; 0x30
 801dd02:	2b00      	cmp	r3, #0
 801dd04:	d1b3      	bne.n	801dc6e <_strtol_l.isra.0+0x5e>
 801dd06:	2308      	movs	r3, #8
 801dd08:	e7b1      	b.n	801dc6e <_strtol_l.isra.0+0x5e>
 801dd0a:	2c30      	cmp	r4, #48	; 0x30
 801dd0c:	d0a4      	beq.n	801dc58 <_strtol_l.isra.0+0x48>
 801dd0e:	230a      	movs	r3, #10
 801dd10:	e7ad      	b.n	801dc6e <_strtol_l.isra.0+0x5e>
 801dd12:	bf00      	nop
 801dd14:	08022921 	.word	0x08022921

0801dd18 <strtol>:
 801dd18:	4613      	mov	r3, r2
 801dd1a:	460a      	mov	r2, r1
 801dd1c:	4601      	mov	r1, r0
 801dd1e:	4802      	ldr	r0, [pc, #8]	; (801dd28 <strtol+0x10>)
 801dd20:	6800      	ldr	r0, [r0, #0]
 801dd22:	f7ff bf75 	b.w	801dc10 <_strtol_l.isra.0>
 801dd26:	bf00      	nop
 801dd28:	20000398 	.word	0x20000398

0801dd2c <_vsniprintf_r>:
 801dd2c:	b530      	push	{r4, r5, lr}
 801dd2e:	1e14      	subs	r4, r2, #0
 801dd30:	4605      	mov	r5, r0
 801dd32:	b09b      	sub	sp, #108	; 0x6c
 801dd34:	4618      	mov	r0, r3
 801dd36:	da05      	bge.n	801dd44 <_vsniprintf_r+0x18>
 801dd38:	238b      	movs	r3, #139	; 0x8b
 801dd3a:	602b      	str	r3, [r5, #0]
 801dd3c:	f04f 30ff 	mov.w	r0, #4294967295
 801dd40:	b01b      	add	sp, #108	; 0x6c
 801dd42:	bd30      	pop	{r4, r5, pc}
 801dd44:	f44f 7302 	mov.w	r3, #520	; 0x208
 801dd48:	f8ad 300c 	strh.w	r3, [sp, #12]
 801dd4c:	bf14      	ite	ne
 801dd4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801dd52:	4623      	moveq	r3, r4
 801dd54:	9302      	str	r3, [sp, #8]
 801dd56:	9305      	str	r3, [sp, #20]
 801dd58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dd5c:	9100      	str	r1, [sp, #0]
 801dd5e:	9104      	str	r1, [sp, #16]
 801dd60:	f8ad 300e 	strh.w	r3, [sp, #14]
 801dd64:	4602      	mov	r2, r0
 801dd66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801dd68:	4669      	mov	r1, sp
 801dd6a:	4628      	mov	r0, r5
 801dd6c:	f001 ff48 	bl	801fc00 <_svfiprintf_r>
 801dd70:	1c43      	adds	r3, r0, #1
 801dd72:	bfbc      	itt	lt
 801dd74:	238b      	movlt	r3, #139	; 0x8b
 801dd76:	602b      	strlt	r3, [r5, #0]
 801dd78:	2c00      	cmp	r4, #0
 801dd7a:	d0e1      	beq.n	801dd40 <_vsniprintf_r+0x14>
 801dd7c:	9b00      	ldr	r3, [sp, #0]
 801dd7e:	2200      	movs	r2, #0
 801dd80:	701a      	strb	r2, [r3, #0]
 801dd82:	e7dd      	b.n	801dd40 <_vsniprintf_r+0x14>

0801dd84 <vsniprintf>:
 801dd84:	b507      	push	{r0, r1, r2, lr}
 801dd86:	9300      	str	r3, [sp, #0]
 801dd88:	4613      	mov	r3, r2
 801dd8a:	460a      	mov	r2, r1
 801dd8c:	4601      	mov	r1, r0
 801dd8e:	4803      	ldr	r0, [pc, #12]	; (801dd9c <vsniprintf+0x18>)
 801dd90:	6800      	ldr	r0, [r0, #0]
 801dd92:	f7ff ffcb 	bl	801dd2c <_vsniprintf_r>
 801dd96:	b003      	add	sp, #12
 801dd98:	f85d fb04 	ldr.w	pc, [sp], #4
 801dd9c:	20000398 	.word	0x20000398

0801dda0 <quorem>:
 801dda0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dda4:	6903      	ldr	r3, [r0, #16]
 801dda6:	690c      	ldr	r4, [r1, #16]
 801dda8:	42a3      	cmp	r3, r4
 801ddaa:	4607      	mov	r7, r0
 801ddac:	f2c0 8081 	blt.w	801deb2 <quorem+0x112>
 801ddb0:	3c01      	subs	r4, #1
 801ddb2:	f101 0814 	add.w	r8, r1, #20
 801ddb6:	f100 0514 	add.w	r5, r0, #20
 801ddba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ddbe:	9301      	str	r3, [sp, #4]
 801ddc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ddc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ddc8:	3301      	adds	r3, #1
 801ddca:	429a      	cmp	r2, r3
 801ddcc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801ddd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ddd4:	fbb2 f6f3 	udiv	r6, r2, r3
 801ddd8:	d331      	bcc.n	801de3e <quorem+0x9e>
 801ddda:	f04f 0e00 	mov.w	lr, #0
 801ddde:	4640      	mov	r0, r8
 801dde0:	46ac      	mov	ip, r5
 801dde2:	46f2      	mov	sl, lr
 801dde4:	f850 2b04 	ldr.w	r2, [r0], #4
 801dde8:	b293      	uxth	r3, r2
 801ddea:	fb06 e303 	mla	r3, r6, r3, lr
 801ddee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801ddf2:	b29b      	uxth	r3, r3
 801ddf4:	ebaa 0303 	sub.w	r3, sl, r3
 801ddf8:	0c12      	lsrs	r2, r2, #16
 801ddfa:	f8dc a000 	ldr.w	sl, [ip]
 801ddfe:	fb06 e202 	mla	r2, r6, r2, lr
 801de02:	fa13 f38a 	uxtah	r3, r3, sl
 801de06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801de0a:	fa1f fa82 	uxth.w	sl, r2
 801de0e:	f8dc 2000 	ldr.w	r2, [ip]
 801de12:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801de16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801de1a:	b29b      	uxth	r3, r3
 801de1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801de20:	4581      	cmp	r9, r0
 801de22:	f84c 3b04 	str.w	r3, [ip], #4
 801de26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801de2a:	d2db      	bcs.n	801dde4 <quorem+0x44>
 801de2c:	f855 300b 	ldr.w	r3, [r5, fp]
 801de30:	b92b      	cbnz	r3, 801de3e <quorem+0x9e>
 801de32:	9b01      	ldr	r3, [sp, #4]
 801de34:	3b04      	subs	r3, #4
 801de36:	429d      	cmp	r5, r3
 801de38:	461a      	mov	r2, r3
 801de3a:	d32e      	bcc.n	801de9a <quorem+0xfa>
 801de3c:	613c      	str	r4, [r7, #16]
 801de3e:	4638      	mov	r0, r7
 801de40:	f001 fc80 	bl	801f744 <__mcmp>
 801de44:	2800      	cmp	r0, #0
 801de46:	db24      	blt.n	801de92 <quorem+0xf2>
 801de48:	3601      	adds	r6, #1
 801de4a:	4628      	mov	r0, r5
 801de4c:	f04f 0c00 	mov.w	ip, #0
 801de50:	f858 2b04 	ldr.w	r2, [r8], #4
 801de54:	f8d0 e000 	ldr.w	lr, [r0]
 801de58:	b293      	uxth	r3, r2
 801de5a:	ebac 0303 	sub.w	r3, ip, r3
 801de5e:	0c12      	lsrs	r2, r2, #16
 801de60:	fa13 f38e 	uxtah	r3, r3, lr
 801de64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801de68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801de6c:	b29b      	uxth	r3, r3
 801de6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801de72:	45c1      	cmp	r9, r8
 801de74:	f840 3b04 	str.w	r3, [r0], #4
 801de78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801de7c:	d2e8      	bcs.n	801de50 <quorem+0xb0>
 801de7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801de82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801de86:	b922      	cbnz	r2, 801de92 <quorem+0xf2>
 801de88:	3b04      	subs	r3, #4
 801de8a:	429d      	cmp	r5, r3
 801de8c:	461a      	mov	r2, r3
 801de8e:	d30a      	bcc.n	801dea6 <quorem+0x106>
 801de90:	613c      	str	r4, [r7, #16]
 801de92:	4630      	mov	r0, r6
 801de94:	b003      	add	sp, #12
 801de96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de9a:	6812      	ldr	r2, [r2, #0]
 801de9c:	3b04      	subs	r3, #4
 801de9e:	2a00      	cmp	r2, #0
 801dea0:	d1cc      	bne.n	801de3c <quorem+0x9c>
 801dea2:	3c01      	subs	r4, #1
 801dea4:	e7c7      	b.n	801de36 <quorem+0x96>
 801dea6:	6812      	ldr	r2, [r2, #0]
 801dea8:	3b04      	subs	r3, #4
 801deaa:	2a00      	cmp	r2, #0
 801deac:	d1f0      	bne.n	801de90 <quorem+0xf0>
 801deae:	3c01      	subs	r4, #1
 801deb0:	e7eb      	b.n	801de8a <quorem+0xea>
 801deb2:	2000      	movs	r0, #0
 801deb4:	e7ee      	b.n	801de94 <quorem+0xf4>
	...

0801deb8 <_dtoa_r>:
 801deb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801debc:	ed2d 8b02 	vpush	{d8}
 801dec0:	ec57 6b10 	vmov	r6, r7, d0
 801dec4:	b095      	sub	sp, #84	; 0x54
 801dec6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801dec8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801decc:	9105      	str	r1, [sp, #20]
 801dece:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801ded2:	4604      	mov	r4, r0
 801ded4:	9209      	str	r2, [sp, #36]	; 0x24
 801ded6:	930f      	str	r3, [sp, #60]	; 0x3c
 801ded8:	b975      	cbnz	r5, 801def8 <_dtoa_r+0x40>
 801deda:	2010      	movs	r0, #16
 801dedc:	f7fe fa3c 	bl	801c358 <malloc>
 801dee0:	4602      	mov	r2, r0
 801dee2:	6260      	str	r0, [r4, #36]	; 0x24
 801dee4:	b920      	cbnz	r0, 801def0 <_dtoa_r+0x38>
 801dee6:	4bb2      	ldr	r3, [pc, #712]	; (801e1b0 <_dtoa_r+0x2f8>)
 801dee8:	21ea      	movs	r1, #234	; 0xea
 801deea:	48b2      	ldr	r0, [pc, #712]	; (801e1b4 <_dtoa_r+0x2fc>)
 801deec:	f001 ffb6 	bl	801fe5c <__assert_func>
 801def0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801def4:	6005      	str	r5, [r0, #0]
 801def6:	60c5      	str	r5, [r0, #12]
 801def8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801defa:	6819      	ldr	r1, [r3, #0]
 801defc:	b151      	cbz	r1, 801df14 <_dtoa_r+0x5c>
 801defe:	685a      	ldr	r2, [r3, #4]
 801df00:	604a      	str	r2, [r1, #4]
 801df02:	2301      	movs	r3, #1
 801df04:	4093      	lsls	r3, r2
 801df06:	608b      	str	r3, [r1, #8]
 801df08:	4620      	mov	r0, r4
 801df0a:	f001 f993 	bl	801f234 <_Bfree>
 801df0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801df10:	2200      	movs	r2, #0
 801df12:	601a      	str	r2, [r3, #0]
 801df14:	1e3b      	subs	r3, r7, #0
 801df16:	bfb9      	ittee	lt
 801df18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801df1c:	9303      	strlt	r3, [sp, #12]
 801df1e:	2300      	movge	r3, #0
 801df20:	f8c8 3000 	strge.w	r3, [r8]
 801df24:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801df28:	4ba3      	ldr	r3, [pc, #652]	; (801e1b8 <_dtoa_r+0x300>)
 801df2a:	bfbc      	itt	lt
 801df2c:	2201      	movlt	r2, #1
 801df2e:	f8c8 2000 	strlt.w	r2, [r8]
 801df32:	ea33 0309 	bics.w	r3, r3, r9
 801df36:	d11b      	bne.n	801df70 <_dtoa_r+0xb8>
 801df38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801df3a:	f242 730f 	movw	r3, #9999	; 0x270f
 801df3e:	6013      	str	r3, [r2, #0]
 801df40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801df44:	4333      	orrs	r3, r6
 801df46:	f000 857a 	beq.w	801ea3e <_dtoa_r+0xb86>
 801df4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801df4c:	b963      	cbnz	r3, 801df68 <_dtoa_r+0xb0>
 801df4e:	4b9b      	ldr	r3, [pc, #620]	; (801e1bc <_dtoa_r+0x304>)
 801df50:	e024      	b.n	801df9c <_dtoa_r+0xe4>
 801df52:	4b9b      	ldr	r3, [pc, #620]	; (801e1c0 <_dtoa_r+0x308>)
 801df54:	9300      	str	r3, [sp, #0]
 801df56:	3308      	adds	r3, #8
 801df58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801df5a:	6013      	str	r3, [r2, #0]
 801df5c:	9800      	ldr	r0, [sp, #0]
 801df5e:	b015      	add	sp, #84	; 0x54
 801df60:	ecbd 8b02 	vpop	{d8}
 801df64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df68:	4b94      	ldr	r3, [pc, #592]	; (801e1bc <_dtoa_r+0x304>)
 801df6a:	9300      	str	r3, [sp, #0]
 801df6c:	3303      	adds	r3, #3
 801df6e:	e7f3      	b.n	801df58 <_dtoa_r+0xa0>
 801df70:	ed9d 7b02 	vldr	d7, [sp, #8]
 801df74:	2200      	movs	r2, #0
 801df76:	ec51 0b17 	vmov	r0, r1, d7
 801df7a:	2300      	movs	r3, #0
 801df7c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801df80:	f7e2 fdda 	bl	8000b38 <__aeabi_dcmpeq>
 801df84:	4680      	mov	r8, r0
 801df86:	b158      	cbz	r0, 801dfa0 <_dtoa_r+0xe8>
 801df88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801df8a:	2301      	movs	r3, #1
 801df8c:	6013      	str	r3, [r2, #0]
 801df8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801df90:	2b00      	cmp	r3, #0
 801df92:	f000 8551 	beq.w	801ea38 <_dtoa_r+0xb80>
 801df96:	488b      	ldr	r0, [pc, #556]	; (801e1c4 <_dtoa_r+0x30c>)
 801df98:	6018      	str	r0, [r3, #0]
 801df9a:	1e43      	subs	r3, r0, #1
 801df9c:	9300      	str	r3, [sp, #0]
 801df9e:	e7dd      	b.n	801df5c <_dtoa_r+0xa4>
 801dfa0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801dfa4:	aa12      	add	r2, sp, #72	; 0x48
 801dfa6:	a913      	add	r1, sp, #76	; 0x4c
 801dfa8:	4620      	mov	r0, r4
 801dfaa:	f001 fceb 	bl	801f984 <__d2b>
 801dfae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801dfb2:	4683      	mov	fp, r0
 801dfb4:	2d00      	cmp	r5, #0
 801dfb6:	d07c      	beq.n	801e0b2 <_dtoa_r+0x1fa>
 801dfb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dfba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801dfbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801dfc2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801dfc6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801dfca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801dfce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801dfd2:	4b7d      	ldr	r3, [pc, #500]	; (801e1c8 <_dtoa_r+0x310>)
 801dfd4:	2200      	movs	r2, #0
 801dfd6:	4630      	mov	r0, r6
 801dfd8:	4639      	mov	r1, r7
 801dfda:	f7e2 f98d 	bl	80002f8 <__aeabi_dsub>
 801dfde:	a36e      	add	r3, pc, #440	; (adr r3, 801e198 <_dtoa_r+0x2e0>)
 801dfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfe4:	f7e2 fb40 	bl	8000668 <__aeabi_dmul>
 801dfe8:	a36d      	add	r3, pc, #436	; (adr r3, 801e1a0 <_dtoa_r+0x2e8>)
 801dfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfee:	f7e2 f985 	bl	80002fc <__adddf3>
 801dff2:	4606      	mov	r6, r0
 801dff4:	4628      	mov	r0, r5
 801dff6:	460f      	mov	r7, r1
 801dff8:	f7e2 facc 	bl	8000594 <__aeabi_i2d>
 801dffc:	a36a      	add	r3, pc, #424	; (adr r3, 801e1a8 <_dtoa_r+0x2f0>)
 801dffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e002:	f7e2 fb31 	bl	8000668 <__aeabi_dmul>
 801e006:	4602      	mov	r2, r0
 801e008:	460b      	mov	r3, r1
 801e00a:	4630      	mov	r0, r6
 801e00c:	4639      	mov	r1, r7
 801e00e:	f7e2 f975 	bl	80002fc <__adddf3>
 801e012:	4606      	mov	r6, r0
 801e014:	460f      	mov	r7, r1
 801e016:	f7e2 fdd7 	bl	8000bc8 <__aeabi_d2iz>
 801e01a:	2200      	movs	r2, #0
 801e01c:	4682      	mov	sl, r0
 801e01e:	2300      	movs	r3, #0
 801e020:	4630      	mov	r0, r6
 801e022:	4639      	mov	r1, r7
 801e024:	f7e2 fd92 	bl	8000b4c <__aeabi_dcmplt>
 801e028:	b148      	cbz	r0, 801e03e <_dtoa_r+0x186>
 801e02a:	4650      	mov	r0, sl
 801e02c:	f7e2 fab2 	bl	8000594 <__aeabi_i2d>
 801e030:	4632      	mov	r2, r6
 801e032:	463b      	mov	r3, r7
 801e034:	f7e2 fd80 	bl	8000b38 <__aeabi_dcmpeq>
 801e038:	b908      	cbnz	r0, 801e03e <_dtoa_r+0x186>
 801e03a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e03e:	f1ba 0f16 	cmp.w	sl, #22
 801e042:	d854      	bhi.n	801e0ee <_dtoa_r+0x236>
 801e044:	4b61      	ldr	r3, [pc, #388]	; (801e1cc <_dtoa_r+0x314>)
 801e046:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801e04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e04e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e052:	f7e2 fd7b 	bl	8000b4c <__aeabi_dcmplt>
 801e056:	2800      	cmp	r0, #0
 801e058:	d04b      	beq.n	801e0f2 <_dtoa_r+0x23a>
 801e05a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e05e:	2300      	movs	r3, #0
 801e060:	930e      	str	r3, [sp, #56]	; 0x38
 801e062:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e064:	1b5d      	subs	r5, r3, r5
 801e066:	1e6b      	subs	r3, r5, #1
 801e068:	9304      	str	r3, [sp, #16]
 801e06a:	bf43      	ittte	mi
 801e06c:	2300      	movmi	r3, #0
 801e06e:	f1c5 0801 	rsbmi	r8, r5, #1
 801e072:	9304      	strmi	r3, [sp, #16]
 801e074:	f04f 0800 	movpl.w	r8, #0
 801e078:	f1ba 0f00 	cmp.w	sl, #0
 801e07c:	db3b      	blt.n	801e0f6 <_dtoa_r+0x23e>
 801e07e:	9b04      	ldr	r3, [sp, #16]
 801e080:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801e084:	4453      	add	r3, sl
 801e086:	9304      	str	r3, [sp, #16]
 801e088:	2300      	movs	r3, #0
 801e08a:	9306      	str	r3, [sp, #24]
 801e08c:	9b05      	ldr	r3, [sp, #20]
 801e08e:	2b09      	cmp	r3, #9
 801e090:	d869      	bhi.n	801e166 <_dtoa_r+0x2ae>
 801e092:	2b05      	cmp	r3, #5
 801e094:	bfc4      	itt	gt
 801e096:	3b04      	subgt	r3, #4
 801e098:	9305      	strgt	r3, [sp, #20]
 801e09a:	9b05      	ldr	r3, [sp, #20]
 801e09c:	f1a3 0302 	sub.w	r3, r3, #2
 801e0a0:	bfcc      	ite	gt
 801e0a2:	2500      	movgt	r5, #0
 801e0a4:	2501      	movle	r5, #1
 801e0a6:	2b03      	cmp	r3, #3
 801e0a8:	d869      	bhi.n	801e17e <_dtoa_r+0x2c6>
 801e0aa:	e8df f003 	tbb	[pc, r3]
 801e0ae:	4e2c      	.short	0x4e2c
 801e0b0:	5a4c      	.short	0x5a4c
 801e0b2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801e0b6:	441d      	add	r5, r3
 801e0b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801e0bc:	2b20      	cmp	r3, #32
 801e0be:	bfc1      	itttt	gt
 801e0c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801e0c4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801e0c8:	fa09 f303 	lslgt.w	r3, r9, r3
 801e0cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 801e0d0:	bfda      	itte	le
 801e0d2:	f1c3 0320 	rsble	r3, r3, #32
 801e0d6:	fa06 f003 	lslle.w	r0, r6, r3
 801e0da:	4318      	orrgt	r0, r3
 801e0dc:	f7e2 fa4a 	bl	8000574 <__aeabi_ui2d>
 801e0e0:	2301      	movs	r3, #1
 801e0e2:	4606      	mov	r6, r0
 801e0e4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801e0e8:	3d01      	subs	r5, #1
 801e0ea:	9310      	str	r3, [sp, #64]	; 0x40
 801e0ec:	e771      	b.n	801dfd2 <_dtoa_r+0x11a>
 801e0ee:	2301      	movs	r3, #1
 801e0f0:	e7b6      	b.n	801e060 <_dtoa_r+0x1a8>
 801e0f2:	900e      	str	r0, [sp, #56]	; 0x38
 801e0f4:	e7b5      	b.n	801e062 <_dtoa_r+0x1aa>
 801e0f6:	f1ca 0300 	rsb	r3, sl, #0
 801e0fa:	9306      	str	r3, [sp, #24]
 801e0fc:	2300      	movs	r3, #0
 801e0fe:	eba8 080a 	sub.w	r8, r8, sl
 801e102:	930d      	str	r3, [sp, #52]	; 0x34
 801e104:	e7c2      	b.n	801e08c <_dtoa_r+0x1d4>
 801e106:	2300      	movs	r3, #0
 801e108:	9308      	str	r3, [sp, #32]
 801e10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e10c:	2b00      	cmp	r3, #0
 801e10e:	dc39      	bgt.n	801e184 <_dtoa_r+0x2cc>
 801e110:	f04f 0901 	mov.w	r9, #1
 801e114:	f8cd 9004 	str.w	r9, [sp, #4]
 801e118:	464b      	mov	r3, r9
 801e11a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801e11e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801e120:	2200      	movs	r2, #0
 801e122:	6042      	str	r2, [r0, #4]
 801e124:	2204      	movs	r2, #4
 801e126:	f102 0614 	add.w	r6, r2, #20
 801e12a:	429e      	cmp	r6, r3
 801e12c:	6841      	ldr	r1, [r0, #4]
 801e12e:	d92f      	bls.n	801e190 <_dtoa_r+0x2d8>
 801e130:	4620      	mov	r0, r4
 801e132:	f001 f83f 	bl	801f1b4 <_Balloc>
 801e136:	9000      	str	r0, [sp, #0]
 801e138:	2800      	cmp	r0, #0
 801e13a:	d14b      	bne.n	801e1d4 <_dtoa_r+0x31c>
 801e13c:	4b24      	ldr	r3, [pc, #144]	; (801e1d0 <_dtoa_r+0x318>)
 801e13e:	4602      	mov	r2, r0
 801e140:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801e144:	e6d1      	b.n	801deea <_dtoa_r+0x32>
 801e146:	2301      	movs	r3, #1
 801e148:	e7de      	b.n	801e108 <_dtoa_r+0x250>
 801e14a:	2300      	movs	r3, #0
 801e14c:	9308      	str	r3, [sp, #32]
 801e14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e150:	eb0a 0903 	add.w	r9, sl, r3
 801e154:	f109 0301 	add.w	r3, r9, #1
 801e158:	2b01      	cmp	r3, #1
 801e15a:	9301      	str	r3, [sp, #4]
 801e15c:	bfb8      	it	lt
 801e15e:	2301      	movlt	r3, #1
 801e160:	e7dd      	b.n	801e11e <_dtoa_r+0x266>
 801e162:	2301      	movs	r3, #1
 801e164:	e7f2      	b.n	801e14c <_dtoa_r+0x294>
 801e166:	2501      	movs	r5, #1
 801e168:	2300      	movs	r3, #0
 801e16a:	9305      	str	r3, [sp, #20]
 801e16c:	9508      	str	r5, [sp, #32]
 801e16e:	f04f 39ff 	mov.w	r9, #4294967295
 801e172:	2200      	movs	r2, #0
 801e174:	f8cd 9004 	str.w	r9, [sp, #4]
 801e178:	2312      	movs	r3, #18
 801e17a:	9209      	str	r2, [sp, #36]	; 0x24
 801e17c:	e7cf      	b.n	801e11e <_dtoa_r+0x266>
 801e17e:	2301      	movs	r3, #1
 801e180:	9308      	str	r3, [sp, #32]
 801e182:	e7f4      	b.n	801e16e <_dtoa_r+0x2b6>
 801e184:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801e188:	f8cd 9004 	str.w	r9, [sp, #4]
 801e18c:	464b      	mov	r3, r9
 801e18e:	e7c6      	b.n	801e11e <_dtoa_r+0x266>
 801e190:	3101      	adds	r1, #1
 801e192:	6041      	str	r1, [r0, #4]
 801e194:	0052      	lsls	r2, r2, #1
 801e196:	e7c6      	b.n	801e126 <_dtoa_r+0x26e>
 801e198:	636f4361 	.word	0x636f4361
 801e19c:	3fd287a7 	.word	0x3fd287a7
 801e1a0:	8b60c8b3 	.word	0x8b60c8b3
 801e1a4:	3fc68a28 	.word	0x3fc68a28
 801e1a8:	509f79fb 	.word	0x509f79fb
 801e1ac:	3fd34413 	.word	0x3fd34413
 801e1b0:	08022a2e 	.word	0x08022a2e
 801e1b4:	08022a45 	.word	0x08022a45
 801e1b8:	7ff00000 	.word	0x7ff00000
 801e1bc:	08022a2a 	.word	0x08022a2a
 801e1c0:	08022a21 	.word	0x08022a21
 801e1c4:	080228a9 	.word	0x080228a9
 801e1c8:	3ff80000 	.word	0x3ff80000
 801e1cc:	08022bc0 	.word	0x08022bc0
 801e1d0:	08022aa4 	.word	0x08022aa4
 801e1d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e1d6:	9a00      	ldr	r2, [sp, #0]
 801e1d8:	601a      	str	r2, [r3, #0]
 801e1da:	9b01      	ldr	r3, [sp, #4]
 801e1dc:	2b0e      	cmp	r3, #14
 801e1de:	f200 80ad 	bhi.w	801e33c <_dtoa_r+0x484>
 801e1e2:	2d00      	cmp	r5, #0
 801e1e4:	f000 80aa 	beq.w	801e33c <_dtoa_r+0x484>
 801e1e8:	f1ba 0f00 	cmp.w	sl, #0
 801e1ec:	dd36      	ble.n	801e25c <_dtoa_r+0x3a4>
 801e1ee:	4ac3      	ldr	r2, [pc, #780]	; (801e4fc <_dtoa_r+0x644>)
 801e1f0:	f00a 030f 	and.w	r3, sl, #15
 801e1f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801e1f8:	ed93 7b00 	vldr	d7, [r3]
 801e1fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801e200:	ea4f 172a 	mov.w	r7, sl, asr #4
 801e204:	eeb0 8a47 	vmov.f32	s16, s14
 801e208:	eef0 8a67 	vmov.f32	s17, s15
 801e20c:	d016      	beq.n	801e23c <_dtoa_r+0x384>
 801e20e:	4bbc      	ldr	r3, [pc, #752]	; (801e500 <_dtoa_r+0x648>)
 801e210:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e214:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e218:	f7e2 fb50 	bl	80008bc <__aeabi_ddiv>
 801e21c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e220:	f007 070f 	and.w	r7, r7, #15
 801e224:	2503      	movs	r5, #3
 801e226:	4eb6      	ldr	r6, [pc, #728]	; (801e500 <_dtoa_r+0x648>)
 801e228:	b957      	cbnz	r7, 801e240 <_dtoa_r+0x388>
 801e22a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e22e:	ec53 2b18 	vmov	r2, r3, d8
 801e232:	f7e2 fb43 	bl	80008bc <__aeabi_ddiv>
 801e236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e23a:	e029      	b.n	801e290 <_dtoa_r+0x3d8>
 801e23c:	2502      	movs	r5, #2
 801e23e:	e7f2      	b.n	801e226 <_dtoa_r+0x36e>
 801e240:	07f9      	lsls	r1, r7, #31
 801e242:	d508      	bpl.n	801e256 <_dtoa_r+0x39e>
 801e244:	ec51 0b18 	vmov	r0, r1, d8
 801e248:	e9d6 2300 	ldrd	r2, r3, [r6]
 801e24c:	f7e2 fa0c 	bl	8000668 <__aeabi_dmul>
 801e250:	ec41 0b18 	vmov	d8, r0, r1
 801e254:	3501      	adds	r5, #1
 801e256:	107f      	asrs	r7, r7, #1
 801e258:	3608      	adds	r6, #8
 801e25a:	e7e5      	b.n	801e228 <_dtoa_r+0x370>
 801e25c:	f000 80a6 	beq.w	801e3ac <_dtoa_r+0x4f4>
 801e260:	f1ca 0600 	rsb	r6, sl, #0
 801e264:	4ba5      	ldr	r3, [pc, #660]	; (801e4fc <_dtoa_r+0x644>)
 801e266:	4fa6      	ldr	r7, [pc, #664]	; (801e500 <_dtoa_r+0x648>)
 801e268:	f006 020f 	and.w	r2, r6, #15
 801e26c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e270:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e274:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e278:	f7e2 f9f6 	bl	8000668 <__aeabi_dmul>
 801e27c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e280:	1136      	asrs	r6, r6, #4
 801e282:	2300      	movs	r3, #0
 801e284:	2502      	movs	r5, #2
 801e286:	2e00      	cmp	r6, #0
 801e288:	f040 8085 	bne.w	801e396 <_dtoa_r+0x4de>
 801e28c:	2b00      	cmp	r3, #0
 801e28e:	d1d2      	bne.n	801e236 <_dtoa_r+0x37e>
 801e290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e292:	2b00      	cmp	r3, #0
 801e294:	f000 808c 	beq.w	801e3b0 <_dtoa_r+0x4f8>
 801e298:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e29c:	4b99      	ldr	r3, [pc, #612]	; (801e504 <_dtoa_r+0x64c>)
 801e29e:	2200      	movs	r2, #0
 801e2a0:	4630      	mov	r0, r6
 801e2a2:	4639      	mov	r1, r7
 801e2a4:	f7e2 fc52 	bl	8000b4c <__aeabi_dcmplt>
 801e2a8:	2800      	cmp	r0, #0
 801e2aa:	f000 8081 	beq.w	801e3b0 <_dtoa_r+0x4f8>
 801e2ae:	9b01      	ldr	r3, [sp, #4]
 801e2b0:	2b00      	cmp	r3, #0
 801e2b2:	d07d      	beq.n	801e3b0 <_dtoa_r+0x4f8>
 801e2b4:	f1b9 0f00 	cmp.w	r9, #0
 801e2b8:	dd3c      	ble.n	801e334 <_dtoa_r+0x47c>
 801e2ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 801e2be:	9307      	str	r3, [sp, #28]
 801e2c0:	2200      	movs	r2, #0
 801e2c2:	4b91      	ldr	r3, [pc, #580]	; (801e508 <_dtoa_r+0x650>)
 801e2c4:	4630      	mov	r0, r6
 801e2c6:	4639      	mov	r1, r7
 801e2c8:	f7e2 f9ce 	bl	8000668 <__aeabi_dmul>
 801e2cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e2d0:	3501      	adds	r5, #1
 801e2d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801e2d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e2da:	4628      	mov	r0, r5
 801e2dc:	f7e2 f95a 	bl	8000594 <__aeabi_i2d>
 801e2e0:	4632      	mov	r2, r6
 801e2e2:	463b      	mov	r3, r7
 801e2e4:	f7e2 f9c0 	bl	8000668 <__aeabi_dmul>
 801e2e8:	4b88      	ldr	r3, [pc, #544]	; (801e50c <_dtoa_r+0x654>)
 801e2ea:	2200      	movs	r2, #0
 801e2ec:	f7e2 f806 	bl	80002fc <__adddf3>
 801e2f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801e2f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e2f8:	9303      	str	r3, [sp, #12]
 801e2fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	d15c      	bne.n	801e3ba <_dtoa_r+0x502>
 801e300:	4b83      	ldr	r3, [pc, #524]	; (801e510 <_dtoa_r+0x658>)
 801e302:	2200      	movs	r2, #0
 801e304:	4630      	mov	r0, r6
 801e306:	4639      	mov	r1, r7
 801e308:	f7e1 fff6 	bl	80002f8 <__aeabi_dsub>
 801e30c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e310:	4606      	mov	r6, r0
 801e312:	460f      	mov	r7, r1
 801e314:	f7e2 fc38 	bl	8000b88 <__aeabi_dcmpgt>
 801e318:	2800      	cmp	r0, #0
 801e31a:	f040 8296 	bne.w	801e84a <_dtoa_r+0x992>
 801e31e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801e322:	4630      	mov	r0, r6
 801e324:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e328:	4639      	mov	r1, r7
 801e32a:	f7e2 fc0f 	bl	8000b4c <__aeabi_dcmplt>
 801e32e:	2800      	cmp	r0, #0
 801e330:	f040 8288 	bne.w	801e844 <_dtoa_r+0x98c>
 801e334:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801e338:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e33c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e33e:	2b00      	cmp	r3, #0
 801e340:	f2c0 8158 	blt.w	801e5f4 <_dtoa_r+0x73c>
 801e344:	f1ba 0f0e 	cmp.w	sl, #14
 801e348:	f300 8154 	bgt.w	801e5f4 <_dtoa_r+0x73c>
 801e34c:	4b6b      	ldr	r3, [pc, #428]	; (801e4fc <_dtoa_r+0x644>)
 801e34e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801e352:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e358:	2b00      	cmp	r3, #0
 801e35a:	f280 80e3 	bge.w	801e524 <_dtoa_r+0x66c>
 801e35e:	9b01      	ldr	r3, [sp, #4]
 801e360:	2b00      	cmp	r3, #0
 801e362:	f300 80df 	bgt.w	801e524 <_dtoa_r+0x66c>
 801e366:	f040 826d 	bne.w	801e844 <_dtoa_r+0x98c>
 801e36a:	4b69      	ldr	r3, [pc, #420]	; (801e510 <_dtoa_r+0x658>)
 801e36c:	2200      	movs	r2, #0
 801e36e:	4640      	mov	r0, r8
 801e370:	4649      	mov	r1, r9
 801e372:	f7e2 f979 	bl	8000668 <__aeabi_dmul>
 801e376:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e37a:	f7e2 fbfb 	bl	8000b74 <__aeabi_dcmpge>
 801e37e:	9e01      	ldr	r6, [sp, #4]
 801e380:	4637      	mov	r7, r6
 801e382:	2800      	cmp	r0, #0
 801e384:	f040 8243 	bne.w	801e80e <_dtoa_r+0x956>
 801e388:	9d00      	ldr	r5, [sp, #0]
 801e38a:	2331      	movs	r3, #49	; 0x31
 801e38c:	f805 3b01 	strb.w	r3, [r5], #1
 801e390:	f10a 0a01 	add.w	sl, sl, #1
 801e394:	e23f      	b.n	801e816 <_dtoa_r+0x95e>
 801e396:	07f2      	lsls	r2, r6, #31
 801e398:	d505      	bpl.n	801e3a6 <_dtoa_r+0x4ee>
 801e39a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e39e:	f7e2 f963 	bl	8000668 <__aeabi_dmul>
 801e3a2:	3501      	adds	r5, #1
 801e3a4:	2301      	movs	r3, #1
 801e3a6:	1076      	asrs	r6, r6, #1
 801e3a8:	3708      	adds	r7, #8
 801e3aa:	e76c      	b.n	801e286 <_dtoa_r+0x3ce>
 801e3ac:	2502      	movs	r5, #2
 801e3ae:	e76f      	b.n	801e290 <_dtoa_r+0x3d8>
 801e3b0:	9b01      	ldr	r3, [sp, #4]
 801e3b2:	f8cd a01c 	str.w	sl, [sp, #28]
 801e3b6:	930c      	str	r3, [sp, #48]	; 0x30
 801e3b8:	e78d      	b.n	801e2d6 <_dtoa_r+0x41e>
 801e3ba:	9900      	ldr	r1, [sp, #0]
 801e3bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e3be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e3c0:	4b4e      	ldr	r3, [pc, #312]	; (801e4fc <_dtoa_r+0x644>)
 801e3c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e3c6:	4401      	add	r1, r0
 801e3c8:	9102      	str	r1, [sp, #8]
 801e3ca:	9908      	ldr	r1, [sp, #32]
 801e3cc:	eeb0 8a47 	vmov.f32	s16, s14
 801e3d0:	eef0 8a67 	vmov.f32	s17, s15
 801e3d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e3d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801e3dc:	2900      	cmp	r1, #0
 801e3de:	d045      	beq.n	801e46c <_dtoa_r+0x5b4>
 801e3e0:	494c      	ldr	r1, [pc, #304]	; (801e514 <_dtoa_r+0x65c>)
 801e3e2:	2000      	movs	r0, #0
 801e3e4:	f7e2 fa6a 	bl	80008bc <__aeabi_ddiv>
 801e3e8:	ec53 2b18 	vmov	r2, r3, d8
 801e3ec:	f7e1 ff84 	bl	80002f8 <__aeabi_dsub>
 801e3f0:	9d00      	ldr	r5, [sp, #0]
 801e3f2:	ec41 0b18 	vmov	d8, r0, r1
 801e3f6:	4639      	mov	r1, r7
 801e3f8:	4630      	mov	r0, r6
 801e3fa:	f7e2 fbe5 	bl	8000bc8 <__aeabi_d2iz>
 801e3fe:	900c      	str	r0, [sp, #48]	; 0x30
 801e400:	f7e2 f8c8 	bl	8000594 <__aeabi_i2d>
 801e404:	4602      	mov	r2, r0
 801e406:	460b      	mov	r3, r1
 801e408:	4630      	mov	r0, r6
 801e40a:	4639      	mov	r1, r7
 801e40c:	f7e1 ff74 	bl	80002f8 <__aeabi_dsub>
 801e410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e412:	3330      	adds	r3, #48	; 0x30
 801e414:	f805 3b01 	strb.w	r3, [r5], #1
 801e418:	ec53 2b18 	vmov	r2, r3, d8
 801e41c:	4606      	mov	r6, r0
 801e41e:	460f      	mov	r7, r1
 801e420:	f7e2 fb94 	bl	8000b4c <__aeabi_dcmplt>
 801e424:	2800      	cmp	r0, #0
 801e426:	d165      	bne.n	801e4f4 <_dtoa_r+0x63c>
 801e428:	4632      	mov	r2, r6
 801e42a:	463b      	mov	r3, r7
 801e42c:	4935      	ldr	r1, [pc, #212]	; (801e504 <_dtoa_r+0x64c>)
 801e42e:	2000      	movs	r0, #0
 801e430:	f7e1 ff62 	bl	80002f8 <__aeabi_dsub>
 801e434:	ec53 2b18 	vmov	r2, r3, d8
 801e438:	f7e2 fb88 	bl	8000b4c <__aeabi_dcmplt>
 801e43c:	2800      	cmp	r0, #0
 801e43e:	f040 80b9 	bne.w	801e5b4 <_dtoa_r+0x6fc>
 801e442:	9b02      	ldr	r3, [sp, #8]
 801e444:	429d      	cmp	r5, r3
 801e446:	f43f af75 	beq.w	801e334 <_dtoa_r+0x47c>
 801e44a:	4b2f      	ldr	r3, [pc, #188]	; (801e508 <_dtoa_r+0x650>)
 801e44c:	ec51 0b18 	vmov	r0, r1, d8
 801e450:	2200      	movs	r2, #0
 801e452:	f7e2 f909 	bl	8000668 <__aeabi_dmul>
 801e456:	4b2c      	ldr	r3, [pc, #176]	; (801e508 <_dtoa_r+0x650>)
 801e458:	ec41 0b18 	vmov	d8, r0, r1
 801e45c:	2200      	movs	r2, #0
 801e45e:	4630      	mov	r0, r6
 801e460:	4639      	mov	r1, r7
 801e462:	f7e2 f901 	bl	8000668 <__aeabi_dmul>
 801e466:	4606      	mov	r6, r0
 801e468:	460f      	mov	r7, r1
 801e46a:	e7c4      	b.n	801e3f6 <_dtoa_r+0x53e>
 801e46c:	ec51 0b17 	vmov	r0, r1, d7
 801e470:	f7e2 f8fa 	bl	8000668 <__aeabi_dmul>
 801e474:	9b02      	ldr	r3, [sp, #8]
 801e476:	9d00      	ldr	r5, [sp, #0]
 801e478:	930c      	str	r3, [sp, #48]	; 0x30
 801e47a:	ec41 0b18 	vmov	d8, r0, r1
 801e47e:	4639      	mov	r1, r7
 801e480:	4630      	mov	r0, r6
 801e482:	f7e2 fba1 	bl	8000bc8 <__aeabi_d2iz>
 801e486:	9011      	str	r0, [sp, #68]	; 0x44
 801e488:	f7e2 f884 	bl	8000594 <__aeabi_i2d>
 801e48c:	4602      	mov	r2, r0
 801e48e:	460b      	mov	r3, r1
 801e490:	4630      	mov	r0, r6
 801e492:	4639      	mov	r1, r7
 801e494:	f7e1 ff30 	bl	80002f8 <__aeabi_dsub>
 801e498:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e49a:	3330      	adds	r3, #48	; 0x30
 801e49c:	f805 3b01 	strb.w	r3, [r5], #1
 801e4a0:	9b02      	ldr	r3, [sp, #8]
 801e4a2:	429d      	cmp	r5, r3
 801e4a4:	4606      	mov	r6, r0
 801e4a6:	460f      	mov	r7, r1
 801e4a8:	f04f 0200 	mov.w	r2, #0
 801e4ac:	d134      	bne.n	801e518 <_dtoa_r+0x660>
 801e4ae:	4b19      	ldr	r3, [pc, #100]	; (801e514 <_dtoa_r+0x65c>)
 801e4b0:	ec51 0b18 	vmov	r0, r1, d8
 801e4b4:	f7e1 ff22 	bl	80002fc <__adddf3>
 801e4b8:	4602      	mov	r2, r0
 801e4ba:	460b      	mov	r3, r1
 801e4bc:	4630      	mov	r0, r6
 801e4be:	4639      	mov	r1, r7
 801e4c0:	f7e2 fb62 	bl	8000b88 <__aeabi_dcmpgt>
 801e4c4:	2800      	cmp	r0, #0
 801e4c6:	d175      	bne.n	801e5b4 <_dtoa_r+0x6fc>
 801e4c8:	ec53 2b18 	vmov	r2, r3, d8
 801e4cc:	4911      	ldr	r1, [pc, #68]	; (801e514 <_dtoa_r+0x65c>)
 801e4ce:	2000      	movs	r0, #0
 801e4d0:	f7e1 ff12 	bl	80002f8 <__aeabi_dsub>
 801e4d4:	4602      	mov	r2, r0
 801e4d6:	460b      	mov	r3, r1
 801e4d8:	4630      	mov	r0, r6
 801e4da:	4639      	mov	r1, r7
 801e4dc:	f7e2 fb36 	bl	8000b4c <__aeabi_dcmplt>
 801e4e0:	2800      	cmp	r0, #0
 801e4e2:	f43f af27 	beq.w	801e334 <_dtoa_r+0x47c>
 801e4e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e4e8:	1e6b      	subs	r3, r5, #1
 801e4ea:	930c      	str	r3, [sp, #48]	; 0x30
 801e4ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801e4f0:	2b30      	cmp	r3, #48	; 0x30
 801e4f2:	d0f8      	beq.n	801e4e6 <_dtoa_r+0x62e>
 801e4f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801e4f8:	e04a      	b.n	801e590 <_dtoa_r+0x6d8>
 801e4fa:	bf00      	nop
 801e4fc:	08022bc0 	.word	0x08022bc0
 801e500:	08022b98 	.word	0x08022b98
 801e504:	3ff00000 	.word	0x3ff00000
 801e508:	40240000 	.word	0x40240000
 801e50c:	401c0000 	.word	0x401c0000
 801e510:	40140000 	.word	0x40140000
 801e514:	3fe00000 	.word	0x3fe00000
 801e518:	4baf      	ldr	r3, [pc, #700]	; (801e7d8 <_dtoa_r+0x920>)
 801e51a:	f7e2 f8a5 	bl	8000668 <__aeabi_dmul>
 801e51e:	4606      	mov	r6, r0
 801e520:	460f      	mov	r7, r1
 801e522:	e7ac      	b.n	801e47e <_dtoa_r+0x5c6>
 801e524:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e528:	9d00      	ldr	r5, [sp, #0]
 801e52a:	4642      	mov	r2, r8
 801e52c:	464b      	mov	r3, r9
 801e52e:	4630      	mov	r0, r6
 801e530:	4639      	mov	r1, r7
 801e532:	f7e2 f9c3 	bl	80008bc <__aeabi_ddiv>
 801e536:	f7e2 fb47 	bl	8000bc8 <__aeabi_d2iz>
 801e53a:	9002      	str	r0, [sp, #8]
 801e53c:	f7e2 f82a 	bl	8000594 <__aeabi_i2d>
 801e540:	4642      	mov	r2, r8
 801e542:	464b      	mov	r3, r9
 801e544:	f7e2 f890 	bl	8000668 <__aeabi_dmul>
 801e548:	4602      	mov	r2, r0
 801e54a:	460b      	mov	r3, r1
 801e54c:	4630      	mov	r0, r6
 801e54e:	4639      	mov	r1, r7
 801e550:	f7e1 fed2 	bl	80002f8 <__aeabi_dsub>
 801e554:	9e02      	ldr	r6, [sp, #8]
 801e556:	9f01      	ldr	r7, [sp, #4]
 801e558:	3630      	adds	r6, #48	; 0x30
 801e55a:	f805 6b01 	strb.w	r6, [r5], #1
 801e55e:	9e00      	ldr	r6, [sp, #0]
 801e560:	1bae      	subs	r6, r5, r6
 801e562:	42b7      	cmp	r7, r6
 801e564:	4602      	mov	r2, r0
 801e566:	460b      	mov	r3, r1
 801e568:	d137      	bne.n	801e5da <_dtoa_r+0x722>
 801e56a:	f7e1 fec7 	bl	80002fc <__adddf3>
 801e56e:	4642      	mov	r2, r8
 801e570:	464b      	mov	r3, r9
 801e572:	4606      	mov	r6, r0
 801e574:	460f      	mov	r7, r1
 801e576:	f7e2 fb07 	bl	8000b88 <__aeabi_dcmpgt>
 801e57a:	b9c8      	cbnz	r0, 801e5b0 <_dtoa_r+0x6f8>
 801e57c:	4642      	mov	r2, r8
 801e57e:	464b      	mov	r3, r9
 801e580:	4630      	mov	r0, r6
 801e582:	4639      	mov	r1, r7
 801e584:	f7e2 fad8 	bl	8000b38 <__aeabi_dcmpeq>
 801e588:	b110      	cbz	r0, 801e590 <_dtoa_r+0x6d8>
 801e58a:	9b02      	ldr	r3, [sp, #8]
 801e58c:	07d9      	lsls	r1, r3, #31
 801e58e:	d40f      	bmi.n	801e5b0 <_dtoa_r+0x6f8>
 801e590:	4620      	mov	r0, r4
 801e592:	4659      	mov	r1, fp
 801e594:	f000 fe4e 	bl	801f234 <_Bfree>
 801e598:	2300      	movs	r3, #0
 801e59a:	702b      	strb	r3, [r5, #0]
 801e59c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e59e:	f10a 0001 	add.w	r0, sl, #1
 801e5a2:	6018      	str	r0, [r3, #0]
 801e5a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e5a6:	2b00      	cmp	r3, #0
 801e5a8:	f43f acd8 	beq.w	801df5c <_dtoa_r+0xa4>
 801e5ac:	601d      	str	r5, [r3, #0]
 801e5ae:	e4d5      	b.n	801df5c <_dtoa_r+0xa4>
 801e5b0:	f8cd a01c 	str.w	sl, [sp, #28]
 801e5b4:	462b      	mov	r3, r5
 801e5b6:	461d      	mov	r5, r3
 801e5b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e5bc:	2a39      	cmp	r2, #57	; 0x39
 801e5be:	d108      	bne.n	801e5d2 <_dtoa_r+0x71a>
 801e5c0:	9a00      	ldr	r2, [sp, #0]
 801e5c2:	429a      	cmp	r2, r3
 801e5c4:	d1f7      	bne.n	801e5b6 <_dtoa_r+0x6fe>
 801e5c6:	9a07      	ldr	r2, [sp, #28]
 801e5c8:	9900      	ldr	r1, [sp, #0]
 801e5ca:	3201      	adds	r2, #1
 801e5cc:	9207      	str	r2, [sp, #28]
 801e5ce:	2230      	movs	r2, #48	; 0x30
 801e5d0:	700a      	strb	r2, [r1, #0]
 801e5d2:	781a      	ldrb	r2, [r3, #0]
 801e5d4:	3201      	adds	r2, #1
 801e5d6:	701a      	strb	r2, [r3, #0]
 801e5d8:	e78c      	b.n	801e4f4 <_dtoa_r+0x63c>
 801e5da:	4b7f      	ldr	r3, [pc, #508]	; (801e7d8 <_dtoa_r+0x920>)
 801e5dc:	2200      	movs	r2, #0
 801e5de:	f7e2 f843 	bl	8000668 <__aeabi_dmul>
 801e5e2:	2200      	movs	r2, #0
 801e5e4:	2300      	movs	r3, #0
 801e5e6:	4606      	mov	r6, r0
 801e5e8:	460f      	mov	r7, r1
 801e5ea:	f7e2 faa5 	bl	8000b38 <__aeabi_dcmpeq>
 801e5ee:	2800      	cmp	r0, #0
 801e5f0:	d09b      	beq.n	801e52a <_dtoa_r+0x672>
 801e5f2:	e7cd      	b.n	801e590 <_dtoa_r+0x6d8>
 801e5f4:	9a08      	ldr	r2, [sp, #32]
 801e5f6:	2a00      	cmp	r2, #0
 801e5f8:	f000 80c4 	beq.w	801e784 <_dtoa_r+0x8cc>
 801e5fc:	9a05      	ldr	r2, [sp, #20]
 801e5fe:	2a01      	cmp	r2, #1
 801e600:	f300 80a8 	bgt.w	801e754 <_dtoa_r+0x89c>
 801e604:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e606:	2a00      	cmp	r2, #0
 801e608:	f000 80a0 	beq.w	801e74c <_dtoa_r+0x894>
 801e60c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801e610:	9e06      	ldr	r6, [sp, #24]
 801e612:	4645      	mov	r5, r8
 801e614:	9a04      	ldr	r2, [sp, #16]
 801e616:	2101      	movs	r1, #1
 801e618:	441a      	add	r2, r3
 801e61a:	4620      	mov	r0, r4
 801e61c:	4498      	add	r8, r3
 801e61e:	9204      	str	r2, [sp, #16]
 801e620:	f000 ff0e 	bl	801f440 <__i2b>
 801e624:	4607      	mov	r7, r0
 801e626:	2d00      	cmp	r5, #0
 801e628:	dd0b      	ble.n	801e642 <_dtoa_r+0x78a>
 801e62a:	9b04      	ldr	r3, [sp, #16]
 801e62c:	2b00      	cmp	r3, #0
 801e62e:	dd08      	ble.n	801e642 <_dtoa_r+0x78a>
 801e630:	42ab      	cmp	r3, r5
 801e632:	9a04      	ldr	r2, [sp, #16]
 801e634:	bfa8      	it	ge
 801e636:	462b      	movge	r3, r5
 801e638:	eba8 0803 	sub.w	r8, r8, r3
 801e63c:	1aed      	subs	r5, r5, r3
 801e63e:	1ad3      	subs	r3, r2, r3
 801e640:	9304      	str	r3, [sp, #16]
 801e642:	9b06      	ldr	r3, [sp, #24]
 801e644:	b1fb      	cbz	r3, 801e686 <_dtoa_r+0x7ce>
 801e646:	9b08      	ldr	r3, [sp, #32]
 801e648:	2b00      	cmp	r3, #0
 801e64a:	f000 809f 	beq.w	801e78c <_dtoa_r+0x8d4>
 801e64e:	2e00      	cmp	r6, #0
 801e650:	dd11      	ble.n	801e676 <_dtoa_r+0x7be>
 801e652:	4639      	mov	r1, r7
 801e654:	4632      	mov	r2, r6
 801e656:	4620      	mov	r0, r4
 801e658:	f000 ffae 	bl	801f5b8 <__pow5mult>
 801e65c:	465a      	mov	r2, fp
 801e65e:	4601      	mov	r1, r0
 801e660:	4607      	mov	r7, r0
 801e662:	4620      	mov	r0, r4
 801e664:	f000 ff02 	bl	801f46c <__multiply>
 801e668:	4659      	mov	r1, fp
 801e66a:	9007      	str	r0, [sp, #28]
 801e66c:	4620      	mov	r0, r4
 801e66e:	f000 fde1 	bl	801f234 <_Bfree>
 801e672:	9b07      	ldr	r3, [sp, #28]
 801e674:	469b      	mov	fp, r3
 801e676:	9b06      	ldr	r3, [sp, #24]
 801e678:	1b9a      	subs	r2, r3, r6
 801e67a:	d004      	beq.n	801e686 <_dtoa_r+0x7ce>
 801e67c:	4659      	mov	r1, fp
 801e67e:	4620      	mov	r0, r4
 801e680:	f000 ff9a 	bl	801f5b8 <__pow5mult>
 801e684:	4683      	mov	fp, r0
 801e686:	2101      	movs	r1, #1
 801e688:	4620      	mov	r0, r4
 801e68a:	f000 fed9 	bl	801f440 <__i2b>
 801e68e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e690:	2b00      	cmp	r3, #0
 801e692:	4606      	mov	r6, r0
 801e694:	dd7c      	ble.n	801e790 <_dtoa_r+0x8d8>
 801e696:	461a      	mov	r2, r3
 801e698:	4601      	mov	r1, r0
 801e69a:	4620      	mov	r0, r4
 801e69c:	f000 ff8c 	bl	801f5b8 <__pow5mult>
 801e6a0:	9b05      	ldr	r3, [sp, #20]
 801e6a2:	2b01      	cmp	r3, #1
 801e6a4:	4606      	mov	r6, r0
 801e6a6:	dd76      	ble.n	801e796 <_dtoa_r+0x8de>
 801e6a8:	2300      	movs	r3, #0
 801e6aa:	9306      	str	r3, [sp, #24]
 801e6ac:	6933      	ldr	r3, [r6, #16]
 801e6ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801e6b2:	6918      	ldr	r0, [r3, #16]
 801e6b4:	f000 fe74 	bl	801f3a0 <__hi0bits>
 801e6b8:	f1c0 0020 	rsb	r0, r0, #32
 801e6bc:	9b04      	ldr	r3, [sp, #16]
 801e6be:	4418      	add	r0, r3
 801e6c0:	f010 001f 	ands.w	r0, r0, #31
 801e6c4:	f000 8086 	beq.w	801e7d4 <_dtoa_r+0x91c>
 801e6c8:	f1c0 0320 	rsb	r3, r0, #32
 801e6cc:	2b04      	cmp	r3, #4
 801e6ce:	dd7f      	ble.n	801e7d0 <_dtoa_r+0x918>
 801e6d0:	f1c0 001c 	rsb	r0, r0, #28
 801e6d4:	9b04      	ldr	r3, [sp, #16]
 801e6d6:	4403      	add	r3, r0
 801e6d8:	4480      	add	r8, r0
 801e6da:	4405      	add	r5, r0
 801e6dc:	9304      	str	r3, [sp, #16]
 801e6de:	f1b8 0f00 	cmp.w	r8, #0
 801e6e2:	dd05      	ble.n	801e6f0 <_dtoa_r+0x838>
 801e6e4:	4659      	mov	r1, fp
 801e6e6:	4642      	mov	r2, r8
 801e6e8:	4620      	mov	r0, r4
 801e6ea:	f000 ffbf 	bl	801f66c <__lshift>
 801e6ee:	4683      	mov	fp, r0
 801e6f0:	9b04      	ldr	r3, [sp, #16]
 801e6f2:	2b00      	cmp	r3, #0
 801e6f4:	dd05      	ble.n	801e702 <_dtoa_r+0x84a>
 801e6f6:	4631      	mov	r1, r6
 801e6f8:	461a      	mov	r2, r3
 801e6fa:	4620      	mov	r0, r4
 801e6fc:	f000 ffb6 	bl	801f66c <__lshift>
 801e700:	4606      	mov	r6, r0
 801e702:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e704:	2b00      	cmp	r3, #0
 801e706:	d069      	beq.n	801e7dc <_dtoa_r+0x924>
 801e708:	4631      	mov	r1, r6
 801e70a:	4658      	mov	r0, fp
 801e70c:	f001 f81a 	bl	801f744 <__mcmp>
 801e710:	2800      	cmp	r0, #0
 801e712:	da63      	bge.n	801e7dc <_dtoa_r+0x924>
 801e714:	2300      	movs	r3, #0
 801e716:	4659      	mov	r1, fp
 801e718:	220a      	movs	r2, #10
 801e71a:	4620      	mov	r0, r4
 801e71c:	f000 fdac 	bl	801f278 <__multadd>
 801e720:	9b08      	ldr	r3, [sp, #32]
 801e722:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e726:	4683      	mov	fp, r0
 801e728:	2b00      	cmp	r3, #0
 801e72a:	f000 818f 	beq.w	801ea4c <_dtoa_r+0xb94>
 801e72e:	4639      	mov	r1, r7
 801e730:	2300      	movs	r3, #0
 801e732:	220a      	movs	r2, #10
 801e734:	4620      	mov	r0, r4
 801e736:	f000 fd9f 	bl	801f278 <__multadd>
 801e73a:	f1b9 0f00 	cmp.w	r9, #0
 801e73e:	4607      	mov	r7, r0
 801e740:	f300 808e 	bgt.w	801e860 <_dtoa_r+0x9a8>
 801e744:	9b05      	ldr	r3, [sp, #20]
 801e746:	2b02      	cmp	r3, #2
 801e748:	dc50      	bgt.n	801e7ec <_dtoa_r+0x934>
 801e74a:	e089      	b.n	801e860 <_dtoa_r+0x9a8>
 801e74c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e74e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801e752:	e75d      	b.n	801e610 <_dtoa_r+0x758>
 801e754:	9b01      	ldr	r3, [sp, #4]
 801e756:	1e5e      	subs	r6, r3, #1
 801e758:	9b06      	ldr	r3, [sp, #24]
 801e75a:	42b3      	cmp	r3, r6
 801e75c:	bfbf      	itttt	lt
 801e75e:	9b06      	ldrlt	r3, [sp, #24]
 801e760:	9606      	strlt	r6, [sp, #24]
 801e762:	1af2      	sublt	r2, r6, r3
 801e764:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801e766:	bfb6      	itet	lt
 801e768:	189b      	addlt	r3, r3, r2
 801e76a:	1b9e      	subge	r6, r3, r6
 801e76c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801e76e:	9b01      	ldr	r3, [sp, #4]
 801e770:	bfb8      	it	lt
 801e772:	2600      	movlt	r6, #0
 801e774:	2b00      	cmp	r3, #0
 801e776:	bfb5      	itete	lt
 801e778:	eba8 0503 	sublt.w	r5, r8, r3
 801e77c:	9b01      	ldrge	r3, [sp, #4]
 801e77e:	2300      	movlt	r3, #0
 801e780:	4645      	movge	r5, r8
 801e782:	e747      	b.n	801e614 <_dtoa_r+0x75c>
 801e784:	9e06      	ldr	r6, [sp, #24]
 801e786:	9f08      	ldr	r7, [sp, #32]
 801e788:	4645      	mov	r5, r8
 801e78a:	e74c      	b.n	801e626 <_dtoa_r+0x76e>
 801e78c:	9a06      	ldr	r2, [sp, #24]
 801e78e:	e775      	b.n	801e67c <_dtoa_r+0x7c4>
 801e790:	9b05      	ldr	r3, [sp, #20]
 801e792:	2b01      	cmp	r3, #1
 801e794:	dc18      	bgt.n	801e7c8 <_dtoa_r+0x910>
 801e796:	9b02      	ldr	r3, [sp, #8]
 801e798:	b9b3      	cbnz	r3, 801e7c8 <_dtoa_r+0x910>
 801e79a:	9b03      	ldr	r3, [sp, #12]
 801e79c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e7a0:	b9a3      	cbnz	r3, 801e7cc <_dtoa_r+0x914>
 801e7a2:	9b03      	ldr	r3, [sp, #12]
 801e7a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e7a8:	0d1b      	lsrs	r3, r3, #20
 801e7aa:	051b      	lsls	r3, r3, #20
 801e7ac:	b12b      	cbz	r3, 801e7ba <_dtoa_r+0x902>
 801e7ae:	9b04      	ldr	r3, [sp, #16]
 801e7b0:	3301      	adds	r3, #1
 801e7b2:	9304      	str	r3, [sp, #16]
 801e7b4:	f108 0801 	add.w	r8, r8, #1
 801e7b8:	2301      	movs	r3, #1
 801e7ba:	9306      	str	r3, [sp, #24]
 801e7bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e7be:	2b00      	cmp	r3, #0
 801e7c0:	f47f af74 	bne.w	801e6ac <_dtoa_r+0x7f4>
 801e7c4:	2001      	movs	r0, #1
 801e7c6:	e779      	b.n	801e6bc <_dtoa_r+0x804>
 801e7c8:	2300      	movs	r3, #0
 801e7ca:	e7f6      	b.n	801e7ba <_dtoa_r+0x902>
 801e7cc:	9b02      	ldr	r3, [sp, #8]
 801e7ce:	e7f4      	b.n	801e7ba <_dtoa_r+0x902>
 801e7d0:	d085      	beq.n	801e6de <_dtoa_r+0x826>
 801e7d2:	4618      	mov	r0, r3
 801e7d4:	301c      	adds	r0, #28
 801e7d6:	e77d      	b.n	801e6d4 <_dtoa_r+0x81c>
 801e7d8:	40240000 	.word	0x40240000
 801e7dc:	9b01      	ldr	r3, [sp, #4]
 801e7de:	2b00      	cmp	r3, #0
 801e7e0:	dc38      	bgt.n	801e854 <_dtoa_r+0x99c>
 801e7e2:	9b05      	ldr	r3, [sp, #20]
 801e7e4:	2b02      	cmp	r3, #2
 801e7e6:	dd35      	ble.n	801e854 <_dtoa_r+0x99c>
 801e7e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801e7ec:	f1b9 0f00 	cmp.w	r9, #0
 801e7f0:	d10d      	bne.n	801e80e <_dtoa_r+0x956>
 801e7f2:	4631      	mov	r1, r6
 801e7f4:	464b      	mov	r3, r9
 801e7f6:	2205      	movs	r2, #5
 801e7f8:	4620      	mov	r0, r4
 801e7fa:	f000 fd3d 	bl	801f278 <__multadd>
 801e7fe:	4601      	mov	r1, r0
 801e800:	4606      	mov	r6, r0
 801e802:	4658      	mov	r0, fp
 801e804:	f000 ff9e 	bl	801f744 <__mcmp>
 801e808:	2800      	cmp	r0, #0
 801e80a:	f73f adbd 	bgt.w	801e388 <_dtoa_r+0x4d0>
 801e80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e810:	9d00      	ldr	r5, [sp, #0]
 801e812:	ea6f 0a03 	mvn.w	sl, r3
 801e816:	f04f 0800 	mov.w	r8, #0
 801e81a:	4631      	mov	r1, r6
 801e81c:	4620      	mov	r0, r4
 801e81e:	f000 fd09 	bl	801f234 <_Bfree>
 801e822:	2f00      	cmp	r7, #0
 801e824:	f43f aeb4 	beq.w	801e590 <_dtoa_r+0x6d8>
 801e828:	f1b8 0f00 	cmp.w	r8, #0
 801e82c:	d005      	beq.n	801e83a <_dtoa_r+0x982>
 801e82e:	45b8      	cmp	r8, r7
 801e830:	d003      	beq.n	801e83a <_dtoa_r+0x982>
 801e832:	4641      	mov	r1, r8
 801e834:	4620      	mov	r0, r4
 801e836:	f000 fcfd 	bl	801f234 <_Bfree>
 801e83a:	4639      	mov	r1, r7
 801e83c:	4620      	mov	r0, r4
 801e83e:	f000 fcf9 	bl	801f234 <_Bfree>
 801e842:	e6a5      	b.n	801e590 <_dtoa_r+0x6d8>
 801e844:	2600      	movs	r6, #0
 801e846:	4637      	mov	r7, r6
 801e848:	e7e1      	b.n	801e80e <_dtoa_r+0x956>
 801e84a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e84c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801e850:	4637      	mov	r7, r6
 801e852:	e599      	b.n	801e388 <_dtoa_r+0x4d0>
 801e854:	9b08      	ldr	r3, [sp, #32]
 801e856:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801e85a:	2b00      	cmp	r3, #0
 801e85c:	f000 80fd 	beq.w	801ea5a <_dtoa_r+0xba2>
 801e860:	2d00      	cmp	r5, #0
 801e862:	dd05      	ble.n	801e870 <_dtoa_r+0x9b8>
 801e864:	4639      	mov	r1, r7
 801e866:	462a      	mov	r2, r5
 801e868:	4620      	mov	r0, r4
 801e86a:	f000 feff 	bl	801f66c <__lshift>
 801e86e:	4607      	mov	r7, r0
 801e870:	9b06      	ldr	r3, [sp, #24]
 801e872:	2b00      	cmp	r3, #0
 801e874:	d05c      	beq.n	801e930 <_dtoa_r+0xa78>
 801e876:	6879      	ldr	r1, [r7, #4]
 801e878:	4620      	mov	r0, r4
 801e87a:	f000 fc9b 	bl	801f1b4 <_Balloc>
 801e87e:	4605      	mov	r5, r0
 801e880:	b928      	cbnz	r0, 801e88e <_dtoa_r+0x9d6>
 801e882:	4b80      	ldr	r3, [pc, #512]	; (801ea84 <_dtoa_r+0xbcc>)
 801e884:	4602      	mov	r2, r0
 801e886:	f240 21ea 	movw	r1, #746	; 0x2ea
 801e88a:	f7ff bb2e 	b.w	801deea <_dtoa_r+0x32>
 801e88e:	693a      	ldr	r2, [r7, #16]
 801e890:	3202      	adds	r2, #2
 801e892:	0092      	lsls	r2, r2, #2
 801e894:	f107 010c 	add.w	r1, r7, #12
 801e898:	300c      	adds	r0, #12
 801e89a:	f7fd fd6d 	bl	801c378 <memcpy>
 801e89e:	2201      	movs	r2, #1
 801e8a0:	4629      	mov	r1, r5
 801e8a2:	4620      	mov	r0, r4
 801e8a4:	f000 fee2 	bl	801f66c <__lshift>
 801e8a8:	9b00      	ldr	r3, [sp, #0]
 801e8aa:	3301      	adds	r3, #1
 801e8ac:	9301      	str	r3, [sp, #4]
 801e8ae:	9b00      	ldr	r3, [sp, #0]
 801e8b0:	444b      	add	r3, r9
 801e8b2:	9307      	str	r3, [sp, #28]
 801e8b4:	9b02      	ldr	r3, [sp, #8]
 801e8b6:	f003 0301 	and.w	r3, r3, #1
 801e8ba:	46b8      	mov	r8, r7
 801e8bc:	9306      	str	r3, [sp, #24]
 801e8be:	4607      	mov	r7, r0
 801e8c0:	9b01      	ldr	r3, [sp, #4]
 801e8c2:	4631      	mov	r1, r6
 801e8c4:	3b01      	subs	r3, #1
 801e8c6:	4658      	mov	r0, fp
 801e8c8:	9302      	str	r3, [sp, #8]
 801e8ca:	f7ff fa69 	bl	801dda0 <quorem>
 801e8ce:	4603      	mov	r3, r0
 801e8d0:	3330      	adds	r3, #48	; 0x30
 801e8d2:	9004      	str	r0, [sp, #16]
 801e8d4:	4641      	mov	r1, r8
 801e8d6:	4658      	mov	r0, fp
 801e8d8:	9308      	str	r3, [sp, #32]
 801e8da:	f000 ff33 	bl	801f744 <__mcmp>
 801e8de:	463a      	mov	r2, r7
 801e8e0:	4681      	mov	r9, r0
 801e8e2:	4631      	mov	r1, r6
 801e8e4:	4620      	mov	r0, r4
 801e8e6:	f000 ff49 	bl	801f77c <__mdiff>
 801e8ea:	68c2      	ldr	r2, [r0, #12]
 801e8ec:	9b08      	ldr	r3, [sp, #32]
 801e8ee:	4605      	mov	r5, r0
 801e8f0:	bb02      	cbnz	r2, 801e934 <_dtoa_r+0xa7c>
 801e8f2:	4601      	mov	r1, r0
 801e8f4:	4658      	mov	r0, fp
 801e8f6:	f000 ff25 	bl	801f744 <__mcmp>
 801e8fa:	9b08      	ldr	r3, [sp, #32]
 801e8fc:	4602      	mov	r2, r0
 801e8fe:	4629      	mov	r1, r5
 801e900:	4620      	mov	r0, r4
 801e902:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801e906:	f000 fc95 	bl	801f234 <_Bfree>
 801e90a:	9b05      	ldr	r3, [sp, #20]
 801e90c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e90e:	9d01      	ldr	r5, [sp, #4]
 801e910:	ea43 0102 	orr.w	r1, r3, r2
 801e914:	9b06      	ldr	r3, [sp, #24]
 801e916:	430b      	orrs	r3, r1
 801e918:	9b08      	ldr	r3, [sp, #32]
 801e91a:	d10d      	bne.n	801e938 <_dtoa_r+0xa80>
 801e91c:	2b39      	cmp	r3, #57	; 0x39
 801e91e:	d029      	beq.n	801e974 <_dtoa_r+0xabc>
 801e920:	f1b9 0f00 	cmp.w	r9, #0
 801e924:	dd01      	ble.n	801e92a <_dtoa_r+0xa72>
 801e926:	9b04      	ldr	r3, [sp, #16]
 801e928:	3331      	adds	r3, #49	; 0x31
 801e92a:	9a02      	ldr	r2, [sp, #8]
 801e92c:	7013      	strb	r3, [r2, #0]
 801e92e:	e774      	b.n	801e81a <_dtoa_r+0x962>
 801e930:	4638      	mov	r0, r7
 801e932:	e7b9      	b.n	801e8a8 <_dtoa_r+0x9f0>
 801e934:	2201      	movs	r2, #1
 801e936:	e7e2      	b.n	801e8fe <_dtoa_r+0xa46>
 801e938:	f1b9 0f00 	cmp.w	r9, #0
 801e93c:	db06      	blt.n	801e94c <_dtoa_r+0xa94>
 801e93e:	9905      	ldr	r1, [sp, #20]
 801e940:	ea41 0909 	orr.w	r9, r1, r9
 801e944:	9906      	ldr	r1, [sp, #24]
 801e946:	ea59 0101 	orrs.w	r1, r9, r1
 801e94a:	d120      	bne.n	801e98e <_dtoa_r+0xad6>
 801e94c:	2a00      	cmp	r2, #0
 801e94e:	ddec      	ble.n	801e92a <_dtoa_r+0xa72>
 801e950:	4659      	mov	r1, fp
 801e952:	2201      	movs	r2, #1
 801e954:	4620      	mov	r0, r4
 801e956:	9301      	str	r3, [sp, #4]
 801e958:	f000 fe88 	bl	801f66c <__lshift>
 801e95c:	4631      	mov	r1, r6
 801e95e:	4683      	mov	fp, r0
 801e960:	f000 fef0 	bl	801f744 <__mcmp>
 801e964:	2800      	cmp	r0, #0
 801e966:	9b01      	ldr	r3, [sp, #4]
 801e968:	dc02      	bgt.n	801e970 <_dtoa_r+0xab8>
 801e96a:	d1de      	bne.n	801e92a <_dtoa_r+0xa72>
 801e96c:	07da      	lsls	r2, r3, #31
 801e96e:	d5dc      	bpl.n	801e92a <_dtoa_r+0xa72>
 801e970:	2b39      	cmp	r3, #57	; 0x39
 801e972:	d1d8      	bne.n	801e926 <_dtoa_r+0xa6e>
 801e974:	9a02      	ldr	r2, [sp, #8]
 801e976:	2339      	movs	r3, #57	; 0x39
 801e978:	7013      	strb	r3, [r2, #0]
 801e97a:	462b      	mov	r3, r5
 801e97c:	461d      	mov	r5, r3
 801e97e:	3b01      	subs	r3, #1
 801e980:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801e984:	2a39      	cmp	r2, #57	; 0x39
 801e986:	d050      	beq.n	801ea2a <_dtoa_r+0xb72>
 801e988:	3201      	adds	r2, #1
 801e98a:	701a      	strb	r2, [r3, #0]
 801e98c:	e745      	b.n	801e81a <_dtoa_r+0x962>
 801e98e:	2a00      	cmp	r2, #0
 801e990:	dd03      	ble.n	801e99a <_dtoa_r+0xae2>
 801e992:	2b39      	cmp	r3, #57	; 0x39
 801e994:	d0ee      	beq.n	801e974 <_dtoa_r+0xabc>
 801e996:	3301      	adds	r3, #1
 801e998:	e7c7      	b.n	801e92a <_dtoa_r+0xa72>
 801e99a:	9a01      	ldr	r2, [sp, #4]
 801e99c:	9907      	ldr	r1, [sp, #28]
 801e99e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e9a2:	428a      	cmp	r2, r1
 801e9a4:	d02a      	beq.n	801e9fc <_dtoa_r+0xb44>
 801e9a6:	4659      	mov	r1, fp
 801e9a8:	2300      	movs	r3, #0
 801e9aa:	220a      	movs	r2, #10
 801e9ac:	4620      	mov	r0, r4
 801e9ae:	f000 fc63 	bl	801f278 <__multadd>
 801e9b2:	45b8      	cmp	r8, r7
 801e9b4:	4683      	mov	fp, r0
 801e9b6:	f04f 0300 	mov.w	r3, #0
 801e9ba:	f04f 020a 	mov.w	r2, #10
 801e9be:	4641      	mov	r1, r8
 801e9c0:	4620      	mov	r0, r4
 801e9c2:	d107      	bne.n	801e9d4 <_dtoa_r+0xb1c>
 801e9c4:	f000 fc58 	bl	801f278 <__multadd>
 801e9c8:	4680      	mov	r8, r0
 801e9ca:	4607      	mov	r7, r0
 801e9cc:	9b01      	ldr	r3, [sp, #4]
 801e9ce:	3301      	adds	r3, #1
 801e9d0:	9301      	str	r3, [sp, #4]
 801e9d2:	e775      	b.n	801e8c0 <_dtoa_r+0xa08>
 801e9d4:	f000 fc50 	bl	801f278 <__multadd>
 801e9d8:	4639      	mov	r1, r7
 801e9da:	4680      	mov	r8, r0
 801e9dc:	2300      	movs	r3, #0
 801e9de:	220a      	movs	r2, #10
 801e9e0:	4620      	mov	r0, r4
 801e9e2:	f000 fc49 	bl	801f278 <__multadd>
 801e9e6:	4607      	mov	r7, r0
 801e9e8:	e7f0      	b.n	801e9cc <_dtoa_r+0xb14>
 801e9ea:	f1b9 0f00 	cmp.w	r9, #0
 801e9ee:	9a00      	ldr	r2, [sp, #0]
 801e9f0:	bfcc      	ite	gt
 801e9f2:	464d      	movgt	r5, r9
 801e9f4:	2501      	movle	r5, #1
 801e9f6:	4415      	add	r5, r2
 801e9f8:	f04f 0800 	mov.w	r8, #0
 801e9fc:	4659      	mov	r1, fp
 801e9fe:	2201      	movs	r2, #1
 801ea00:	4620      	mov	r0, r4
 801ea02:	9301      	str	r3, [sp, #4]
 801ea04:	f000 fe32 	bl	801f66c <__lshift>
 801ea08:	4631      	mov	r1, r6
 801ea0a:	4683      	mov	fp, r0
 801ea0c:	f000 fe9a 	bl	801f744 <__mcmp>
 801ea10:	2800      	cmp	r0, #0
 801ea12:	dcb2      	bgt.n	801e97a <_dtoa_r+0xac2>
 801ea14:	d102      	bne.n	801ea1c <_dtoa_r+0xb64>
 801ea16:	9b01      	ldr	r3, [sp, #4]
 801ea18:	07db      	lsls	r3, r3, #31
 801ea1a:	d4ae      	bmi.n	801e97a <_dtoa_r+0xac2>
 801ea1c:	462b      	mov	r3, r5
 801ea1e:	461d      	mov	r5, r3
 801ea20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ea24:	2a30      	cmp	r2, #48	; 0x30
 801ea26:	d0fa      	beq.n	801ea1e <_dtoa_r+0xb66>
 801ea28:	e6f7      	b.n	801e81a <_dtoa_r+0x962>
 801ea2a:	9a00      	ldr	r2, [sp, #0]
 801ea2c:	429a      	cmp	r2, r3
 801ea2e:	d1a5      	bne.n	801e97c <_dtoa_r+0xac4>
 801ea30:	f10a 0a01 	add.w	sl, sl, #1
 801ea34:	2331      	movs	r3, #49	; 0x31
 801ea36:	e779      	b.n	801e92c <_dtoa_r+0xa74>
 801ea38:	4b13      	ldr	r3, [pc, #76]	; (801ea88 <_dtoa_r+0xbd0>)
 801ea3a:	f7ff baaf 	b.w	801df9c <_dtoa_r+0xe4>
 801ea3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ea40:	2b00      	cmp	r3, #0
 801ea42:	f47f aa86 	bne.w	801df52 <_dtoa_r+0x9a>
 801ea46:	4b11      	ldr	r3, [pc, #68]	; (801ea8c <_dtoa_r+0xbd4>)
 801ea48:	f7ff baa8 	b.w	801df9c <_dtoa_r+0xe4>
 801ea4c:	f1b9 0f00 	cmp.w	r9, #0
 801ea50:	dc03      	bgt.n	801ea5a <_dtoa_r+0xba2>
 801ea52:	9b05      	ldr	r3, [sp, #20]
 801ea54:	2b02      	cmp	r3, #2
 801ea56:	f73f aec9 	bgt.w	801e7ec <_dtoa_r+0x934>
 801ea5a:	9d00      	ldr	r5, [sp, #0]
 801ea5c:	4631      	mov	r1, r6
 801ea5e:	4658      	mov	r0, fp
 801ea60:	f7ff f99e 	bl	801dda0 <quorem>
 801ea64:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801ea68:	f805 3b01 	strb.w	r3, [r5], #1
 801ea6c:	9a00      	ldr	r2, [sp, #0]
 801ea6e:	1aaa      	subs	r2, r5, r2
 801ea70:	4591      	cmp	r9, r2
 801ea72:	ddba      	ble.n	801e9ea <_dtoa_r+0xb32>
 801ea74:	4659      	mov	r1, fp
 801ea76:	2300      	movs	r3, #0
 801ea78:	220a      	movs	r2, #10
 801ea7a:	4620      	mov	r0, r4
 801ea7c:	f000 fbfc 	bl	801f278 <__multadd>
 801ea80:	4683      	mov	fp, r0
 801ea82:	e7eb      	b.n	801ea5c <_dtoa_r+0xba4>
 801ea84:	08022aa4 	.word	0x08022aa4
 801ea88:	080228a8 	.word	0x080228a8
 801ea8c:	08022a21 	.word	0x08022a21

0801ea90 <rshift>:
 801ea90:	6903      	ldr	r3, [r0, #16]
 801ea92:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ea96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ea9a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ea9e:	f100 0414 	add.w	r4, r0, #20
 801eaa2:	dd45      	ble.n	801eb30 <rshift+0xa0>
 801eaa4:	f011 011f 	ands.w	r1, r1, #31
 801eaa8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801eaac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801eab0:	d10c      	bne.n	801eacc <rshift+0x3c>
 801eab2:	f100 0710 	add.w	r7, r0, #16
 801eab6:	4629      	mov	r1, r5
 801eab8:	42b1      	cmp	r1, r6
 801eaba:	d334      	bcc.n	801eb26 <rshift+0x96>
 801eabc:	1a9b      	subs	r3, r3, r2
 801eabe:	009b      	lsls	r3, r3, #2
 801eac0:	1eea      	subs	r2, r5, #3
 801eac2:	4296      	cmp	r6, r2
 801eac4:	bf38      	it	cc
 801eac6:	2300      	movcc	r3, #0
 801eac8:	4423      	add	r3, r4
 801eaca:	e015      	b.n	801eaf8 <rshift+0x68>
 801eacc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ead0:	f1c1 0820 	rsb	r8, r1, #32
 801ead4:	40cf      	lsrs	r7, r1
 801ead6:	f105 0e04 	add.w	lr, r5, #4
 801eada:	46a1      	mov	r9, r4
 801eadc:	4576      	cmp	r6, lr
 801eade:	46f4      	mov	ip, lr
 801eae0:	d815      	bhi.n	801eb0e <rshift+0x7e>
 801eae2:	1a9b      	subs	r3, r3, r2
 801eae4:	009a      	lsls	r2, r3, #2
 801eae6:	3a04      	subs	r2, #4
 801eae8:	3501      	adds	r5, #1
 801eaea:	42ae      	cmp	r6, r5
 801eaec:	bf38      	it	cc
 801eaee:	2200      	movcc	r2, #0
 801eaf0:	18a3      	adds	r3, r4, r2
 801eaf2:	50a7      	str	r7, [r4, r2]
 801eaf4:	b107      	cbz	r7, 801eaf8 <rshift+0x68>
 801eaf6:	3304      	adds	r3, #4
 801eaf8:	1b1a      	subs	r2, r3, r4
 801eafa:	42a3      	cmp	r3, r4
 801eafc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801eb00:	bf08      	it	eq
 801eb02:	2300      	moveq	r3, #0
 801eb04:	6102      	str	r2, [r0, #16]
 801eb06:	bf08      	it	eq
 801eb08:	6143      	streq	r3, [r0, #20]
 801eb0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb0e:	f8dc c000 	ldr.w	ip, [ip]
 801eb12:	fa0c fc08 	lsl.w	ip, ip, r8
 801eb16:	ea4c 0707 	orr.w	r7, ip, r7
 801eb1a:	f849 7b04 	str.w	r7, [r9], #4
 801eb1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801eb22:	40cf      	lsrs	r7, r1
 801eb24:	e7da      	b.n	801eadc <rshift+0x4c>
 801eb26:	f851 cb04 	ldr.w	ip, [r1], #4
 801eb2a:	f847 cf04 	str.w	ip, [r7, #4]!
 801eb2e:	e7c3      	b.n	801eab8 <rshift+0x28>
 801eb30:	4623      	mov	r3, r4
 801eb32:	e7e1      	b.n	801eaf8 <rshift+0x68>

0801eb34 <__hexdig_fun>:
 801eb34:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801eb38:	2b09      	cmp	r3, #9
 801eb3a:	d802      	bhi.n	801eb42 <__hexdig_fun+0xe>
 801eb3c:	3820      	subs	r0, #32
 801eb3e:	b2c0      	uxtb	r0, r0
 801eb40:	4770      	bx	lr
 801eb42:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801eb46:	2b05      	cmp	r3, #5
 801eb48:	d801      	bhi.n	801eb4e <__hexdig_fun+0x1a>
 801eb4a:	3847      	subs	r0, #71	; 0x47
 801eb4c:	e7f7      	b.n	801eb3e <__hexdig_fun+0xa>
 801eb4e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801eb52:	2b05      	cmp	r3, #5
 801eb54:	d801      	bhi.n	801eb5a <__hexdig_fun+0x26>
 801eb56:	3827      	subs	r0, #39	; 0x27
 801eb58:	e7f1      	b.n	801eb3e <__hexdig_fun+0xa>
 801eb5a:	2000      	movs	r0, #0
 801eb5c:	4770      	bx	lr
	...

0801eb60 <__gethex>:
 801eb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb64:	ed2d 8b02 	vpush	{d8}
 801eb68:	b089      	sub	sp, #36	; 0x24
 801eb6a:	ee08 0a10 	vmov	s16, r0
 801eb6e:	9304      	str	r3, [sp, #16]
 801eb70:	4bbc      	ldr	r3, [pc, #752]	; (801ee64 <__gethex+0x304>)
 801eb72:	681b      	ldr	r3, [r3, #0]
 801eb74:	9301      	str	r3, [sp, #4]
 801eb76:	4618      	mov	r0, r3
 801eb78:	468b      	mov	fp, r1
 801eb7a:	4690      	mov	r8, r2
 801eb7c:	f7e1 fb5a 	bl	8000234 <strlen>
 801eb80:	9b01      	ldr	r3, [sp, #4]
 801eb82:	f8db 2000 	ldr.w	r2, [fp]
 801eb86:	4403      	add	r3, r0
 801eb88:	4682      	mov	sl, r0
 801eb8a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801eb8e:	9305      	str	r3, [sp, #20]
 801eb90:	1c93      	adds	r3, r2, #2
 801eb92:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801eb96:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801eb9a:	32fe      	adds	r2, #254	; 0xfe
 801eb9c:	18d1      	adds	r1, r2, r3
 801eb9e:	461f      	mov	r7, r3
 801eba0:	f813 0b01 	ldrb.w	r0, [r3], #1
 801eba4:	9100      	str	r1, [sp, #0]
 801eba6:	2830      	cmp	r0, #48	; 0x30
 801eba8:	d0f8      	beq.n	801eb9c <__gethex+0x3c>
 801ebaa:	f7ff ffc3 	bl	801eb34 <__hexdig_fun>
 801ebae:	4604      	mov	r4, r0
 801ebb0:	2800      	cmp	r0, #0
 801ebb2:	d13a      	bne.n	801ec2a <__gethex+0xca>
 801ebb4:	9901      	ldr	r1, [sp, #4]
 801ebb6:	4652      	mov	r2, sl
 801ebb8:	4638      	mov	r0, r7
 801ebba:	f001 f92f 	bl	801fe1c <strncmp>
 801ebbe:	4605      	mov	r5, r0
 801ebc0:	2800      	cmp	r0, #0
 801ebc2:	d168      	bne.n	801ec96 <__gethex+0x136>
 801ebc4:	f817 000a 	ldrb.w	r0, [r7, sl]
 801ebc8:	eb07 060a 	add.w	r6, r7, sl
 801ebcc:	f7ff ffb2 	bl	801eb34 <__hexdig_fun>
 801ebd0:	2800      	cmp	r0, #0
 801ebd2:	d062      	beq.n	801ec9a <__gethex+0x13a>
 801ebd4:	4633      	mov	r3, r6
 801ebd6:	7818      	ldrb	r0, [r3, #0]
 801ebd8:	2830      	cmp	r0, #48	; 0x30
 801ebda:	461f      	mov	r7, r3
 801ebdc:	f103 0301 	add.w	r3, r3, #1
 801ebe0:	d0f9      	beq.n	801ebd6 <__gethex+0x76>
 801ebe2:	f7ff ffa7 	bl	801eb34 <__hexdig_fun>
 801ebe6:	2301      	movs	r3, #1
 801ebe8:	fab0 f480 	clz	r4, r0
 801ebec:	0964      	lsrs	r4, r4, #5
 801ebee:	4635      	mov	r5, r6
 801ebf0:	9300      	str	r3, [sp, #0]
 801ebf2:	463a      	mov	r2, r7
 801ebf4:	4616      	mov	r6, r2
 801ebf6:	3201      	adds	r2, #1
 801ebf8:	7830      	ldrb	r0, [r6, #0]
 801ebfa:	f7ff ff9b 	bl	801eb34 <__hexdig_fun>
 801ebfe:	2800      	cmp	r0, #0
 801ec00:	d1f8      	bne.n	801ebf4 <__gethex+0x94>
 801ec02:	9901      	ldr	r1, [sp, #4]
 801ec04:	4652      	mov	r2, sl
 801ec06:	4630      	mov	r0, r6
 801ec08:	f001 f908 	bl	801fe1c <strncmp>
 801ec0c:	b980      	cbnz	r0, 801ec30 <__gethex+0xd0>
 801ec0e:	b94d      	cbnz	r5, 801ec24 <__gethex+0xc4>
 801ec10:	eb06 050a 	add.w	r5, r6, sl
 801ec14:	462a      	mov	r2, r5
 801ec16:	4616      	mov	r6, r2
 801ec18:	3201      	adds	r2, #1
 801ec1a:	7830      	ldrb	r0, [r6, #0]
 801ec1c:	f7ff ff8a 	bl	801eb34 <__hexdig_fun>
 801ec20:	2800      	cmp	r0, #0
 801ec22:	d1f8      	bne.n	801ec16 <__gethex+0xb6>
 801ec24:	1bad      	subs	r5, r5, r6
 801ec26:	00ad      	lsls	r5, r5, #2
 801ec28:	e004      	b.n	801ec34 <__gethex+0xd4>
 801ec2a:	2400      	movs	r4, #0
 801ec2c:	4625      	mov	r5, r4
 801ec2e:	e7e0      	b.n	801ebf2 <__gethex+0x92>
 801ec30:	2d00      	cmp	r5, #0
 801ec32:	d1f7      	bne.n	801ec24 <__gethex+0xc4>
 801ec34:	7833      	ldrb	r3, [r6, #0]
 801ec36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ec3a:	2b50      	cmp	r3, #80	; 0x50
 801ec3c:	d13b      	bne.n	801ecb6 <__gethex+0x156>
 801ec3e:	7873      	ldrb	r3, [r6, #1]
 801ec40:	2b2b      	cmp	r3, #43	; 0x2b
 801ec42:	d02c      	beq.n	801ec9e <__gethex+0x13e>
 801ec44:	2b2d      	cmp	r3, #45	; 0x2d
 801ec46:	d02e      	beq.n	801eca6 <__gethex+0x146>
 801ec48:	1c71      	adds	r1, r6, #1
 801ec4a:	f04f 0900 	mov.w	r9, #0
 801ec4e:	7808      	ldrb	r0, [r1, #0]
 801ec50:	f7ff ff70 	bl	801eb34 <__hexdig_fun>
 801ec54:	1e43      	subs	r3, r0, #1
 801ec56:	b2db      	uxtb	r3, r3
 801ec58:	2b18      	cmp	r3, #24
 801ec5a:	d82c      	bhi.n	801ecb6 <__gethex+0x156>
 801ec5c:	f1a0 0210 	sub.w	r2, r0, #16
 801ec60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801ec64:	f7ff ff66 	bl	801eb34 <__hexdig_fun>
 801ec68:	1e43      	subs	r3, r0, #1
 801ec6a:	b2db      	uxtb	r3, r3
 801ec6c:	2b18      	cmp	r3, #24
 801ec6e:	d91d      	bls.n	801ecac <__gethex+0x14c>
 801ec70:	f1b9 0f00 	cmp.w	r9, #0
 801ec74:	d000      	beq.n	801ec78 <__gethex+0x118>
 801ec76:	4252      	negs	r2, r2
 801ec78:	4415      	add	r5, r2
 801ec7a:	f8cb 1000 	str.w	r1, [fp]
 801ec7e:	b1e4      	cbz	r4, 801ecba <__gethex+0x15a>
 801ec80:	9b00      	ldr	r3, [sp, #0]
 801ec82:	2b00      	cmp	r3, #0
 801ec84:	bf14      	ite	ne
 801ec86:	2700      	movne	r7, #0
 801ec88:	2706      	moveq	r7, #6
 801ec8a:	4638      	mov	r0, r7
 801ec8c:	b009      	add	sp, #36	; 0x24
 801ec8e:	ecbd 8b02 	vpop	{d8}
 801ec92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec96:	463e      	mov	r6, r7
 801ec98:	4625      	mov	r5, r4
 801ec9a:	2401      	movs	r4, #1
 801ec9c:	e7ca      	b.n	801ec34 <__gethex+0xd4>
 801ec9e:	f04f 0900 	mov.w	r9, #0
 801eca2:	1cb1      	adds	r1, r6, #2
 801eca4:	e7d3      	b.n	801ec4e <__gethex+0xee>
 801eca6:	f04f 0901 	mov.w	r9, #1
 801ecaa:	e7fa      	b.n	801eca2 <__gethex+0x142>
 801ecac:	230a      	movs	r3, #10
 801ecae:	fb03 0202 	mla	r2, r3, r2, r0
 801ecb2:	3a10      	subs	r2, #16
 801ecb4:	e7d4      	b.n	801ec60 <__gethex+0x100>
 801ecb6:	4631      	mov	r1, r6
 801ecb8:	e7df      	b.n	801ec7a <__gethex+0x11a>
 801ecba:	1bf3      	subs	r3, r6, r7
 801ecbc:	3b01      	subs	r3, #1
 801ecbe:	4621      	mov	r1, r4
 801ecc0:	2b07      	cmp	r3, #7
 801ecc2:	dc0b      	bgt.n	801ecdc <__gethex+0x17c>
 801ecc4:	ee18 0a10 	vmov	r0, s16
 801ecc8:	f000 fa74 	bl	801f1b4 <_Balloc>
 801eccc:	4604      	mov	r4, r0
 801ecce:	b940      	cbnz	r0, 801ece2 <__gethex+0x182>
 801ecd0:	4b65      	ldr	r3, [pc, #404]	; (801ee68 <__gethex+0x308>)
 801ecd2:	4602      	mov	r2, r0
 801ecd4:	21de      	movs	r1, #222	; 0xde
 801ecd6:	4865      	ldr	r0, [pc, #404]	; (801ee6c <__gethex+0x30c>)
 801ecd8:	f001 f8c0 	bl	801fe5c <__assert_func>
 801ecdc:	3101      	adds	r1, #1
 801ecde:	105b      	asrs	r3, r3, #1
 801ece0:	e7ee      	b.n	801ecc0 <__gethex+0x160>
 801ece2:	f100 0914 	add.w	r9, r0, #20
 801ece6:	f04f 0b00 	mov.w	fp, #0
 801ecea:	f1ca 0301 	rsb	r3, sl, #1
 801ecee:	f8cd 9008 	str.w	r9, [sp, #8]
 801ecf2:	f8cd b000 	str.w	fp, [sp]
 801ecf6:	9306      	str	r3, [sp, #24]
 801ecf8:	42b7      	cmp	r7, r6
 801ecfa:	d340      	bcc.n	801ed7e <__gethex+0x21e>
 801ecfc:	9802      	ldr	r0, [sp, #8]
 801ecfe:	9b00      	ldr	r3, [sp, #0]
 801ed00:	f840 3b04 	str.w	r3, [r0], #4
 801ed04:	eba0 0009 	sub.w	r0, r0, r9
 801ed08:	1080      	asrs	r0, r0, #2
 801ed0a:	0146      	lsls	r6, r0, #5
 801ed0c:	6120      	str	r0, [r4, #16]
 801ed0e:	4618      	mov	r0, r3
 801ed10:	f000 fb46 	bl	801f3a0 <__hi0bits>
 801ed14:	1a30      	subs	r0, r6, r0
 801ed16:	f8d8 6000 	ldr.w	r6, [r8]
 801ed1a:	42b0      	cmp	r0, r6
 801ed1c:	dd63      	ble.n	801ede6 <__gethex+0x286>
 801ed1e:	1b87      	subs	r7, r0, r6
 801ed20:	4639      	mov	r1, r7
 801ed22:	4620      	mov	r0, r4
 801ed24:	f000 fee0 	bl	801fae8 <__any_on>
 801ed28:	4682      	mov	sl, r0
 801ed2a:	b1a8      	cbz	r0, 801ed58 <__gethex+0x1f8>
 801ed2c:	1e7b      	subs	r3, r7, #1
 801ed2e:	1159      	asrs	r1, r3, #5
 801ed30:	f003 021f 	and.w	r2, r3, #31
 801ed34:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801ed38:	f04f 0a01 	mov.w	sl, #1
 801ed3c:	fa0a f202 	lsl.w	r2, sl, r2
 801ed40:	420a      	tst	r2, r1
 801ed42:	d009      	beq.n	801ed58 <__gethex+0x1f8>
 801ed44:	4553      	cmp	r3, sl
 801ed46:	dd05      	ble.n	801ed54 <__gethex+0x1f4>
 801ed48:	1eb9      	subs	r1, r7, #2
 801ed4a:	4620      	mov	r0, r4
 801ed4c:	f000 fecc 	bl	801fae8 <__any_on>
 801ed50:	2800      	cmp	r0, #0
 801ed52:	d145      	bne.n	801ede0 <__gethex+0x280>
 801ed54:	f04f 0a02 	mov.w	sl, #2
 801ed58:	4639      	mov	r1, r7
 801ed5a:	4620      	mov	r0, r4
 801ed5c:	f7ff fe98 	bl	801ea90 <rshift>
 801ed60:	443d      	add	r5, r7
 801ed62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ed66:	42ab      	cmp	r3, r5
 801ed68:	da4c      	bge.n	801ee04 <__gethex+0x2a4>
 801ed6a:	ee18 0a10 	vmov	r0, s16
 801ed6e:	4621      	mov	r1, r4
 801ed70:	f000 fa60 	bl	801f234 <_Bfree>
 801ed74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ed76:	2300      	movs	r3, #0
 801ed78:	6013      	str	r3, [r2, #0]
 801ed7a:	27a3      	movs	r7, #163	; 0xa3
 801ed7c:	e785      	b.n	801ec8a <__gethex+0x12a>
 801ed7e:	1e73      	subs	r3, r6, #1
 801ed80:	9a05      	ldr	r2, [sp, #20]
 801ed82:	9303      	str	r3, [sp, #12]
 801ed84:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ed88:	4293      	cmp	r3, r2
 801ed8a:	d019      	beq.n	801edc0 <__gethex+0x260>
 801ed8c:	f1bb 0f20 	cmp.w	fp, #32
 801ed90:	d107      	bne.n	801eda2 <__gethex+0x242>
 801ed92:	9b02      	ldr	r3, [sp, #8]
 801ed94:	9a00      	ldr	r2, [sp, #0]
 801ed96:	f843 2b04 	str.w	r2, [r3], #4
 801ed9a:	9302      	str	r3, [sp, #8]
 801ed9c:	2300      	movs	r3, #0
 801ed9e:	9300      	str	r3, [sp, #0]
 801eda0:	469b      	mov	fp, r3
 801eda2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801eda6:	f7ff fec5 	bl	801eb34 <__hexdig_fun>
 801edaa:	9b00      	ldr	r3, [sp, #0]
 801edac:	f000 000f 	and.w	r0, r0, #15
 801edb0:	fa00 f00b 	lsl.w	r0, r0, fp
 801edb4:	4303      	orrs	r3, r0
 801edb6:	9300      	str	r3, [sp, #0]
 801edb8:	f10b 0b04 	add.w	fp, fp, #4
 801edbc:	9b03      	ldr	r3, [sp, #12]
 801edbe:	e00d      	b.n	801eddc <__gethex+0x27c>
 801edc0:	9b03      	ldr	r3, [sp, #12]
 801edc2:	9a06      	ldr	r2, [sp, #24]
 801edc4:	4413      	add	r3, r2
 801edc6:	42bb      	cmp	r3, r7
 801edc8:	d3e0      	bcc.n	801ed8c <__gethex+0x22c>
 801edca:	4618      	mov	r0, r3
 801edcc:	9901      	ldr	r1, [sp, #4]
 801edce:	9307      	str	r3, [sp, #28]
 801edd0:	4652      	mov	r2, sl
 801edd2:	f001 f823 	bl	801fe1c <strncmp>
 801edd6:	9b07      	ldr	r3, [sp, #28]
 801edd8:	2800      	cmp	r0, #0
 801edda:	d1d7      	bne.n	801ed8c <__gethex+0x22c>
 801eddc:	461e      	mov	r6, r3
 801edde:	e78b      	b.n	801ecf8 <__gethex+0x198>
 801ede0:	f04f 0a03 	mov.w	sl, #3
 801ede4:	e7b8      	b.n	801ed58 <__gethex+0x1f8>
 801ede6:	da0a      	bge.n	801edfe <__gethex+0x29e>
 801ede8:	1a37      	subs	r7, r6, r0
 801edea:	4621      	mov	r1, r4
 801edec:	ee18 0a10 	vmov	r0, s16
 801edf0:	463a      	mov	r2, r7
 801edf2:	f000 fc3b 	bl	801f66c <__lshift>
 801edf6:	1bed      	subs	r5, r5, r7
 801edf8:	4604      	mov	r4, r0
 801edfa:	f100 0914 	add.w	r9, r0, #20
 801edfe:	f04f 0a00 	mov.w	sl, #0
 801ee02:	e7ae      	b.n	801ed62 <__gethex+0x202>
 801ee04:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801ee08:	42a8      	cmp	r0, r5
 801ee0a:	dd72      	ble.n	801eef2 <__gethex+0x392>
 801ee0c:	1b45      	subs	r5, r0, r5
 801ee0e:	42ae      	cmp	r6, r5
 801ee10:	dc36      	bgt.n	801ee80 <__gethex+0x320>
 801ee12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ee16:	2b02      	cmp	r3, #2
 801ee18:	d02a      	beq.n	801ee70 <__gethex+0x310>
 801ee1a:	2b03      	cmp	r3, #3
 801ee1c:	d02c      	beq.n	801ee78 <__gethex+0x318>
 801ee1e:	2b01      	cmp	r3, #1
 801ee20:	d115      	bne.n	801ee4e <__gethex+0x2ee>
 801ee22:	42ae      	cmp	r6, r5
 801ee24:	d113      	bne.n	801ee4e <__gethex+0x2ee>
 801ee26:	2e01      	cmp	r6, #1
 801ee28:	d10b      	bne.n	801ee42 <__gethex+0x2e2>
 801ee2a:	9a04      	ldr	r2, [sp, #16]
 801ee2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ee30:	6013      	str	r3, [r2, #0]
 801ee32:	2301      	movs	r3, #1
 801ee34:	6123      	str	r3, [r4, #16]
 801ee36:	f8c9 3000 	str.w	r3, [r9]
 801ee3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ee3c:	2762      	movs	r7, #98	; 0x62
 801ee3e:	601c      	str	r4, [r3, #0]
 801ee40:	e723      	b.n	801ec8a <__gethex+0x12a>
 801ee42:	1e71      	subs	r1, r6, #1
 801ee44:	4620      	mov	r0, r4
 801ee46:	f000 fe4f 	bl	801fae8 <__any_on>
 801ee4a:	2800      	cmp	r0, #0
 801ee4c:	d1ed      	bne.n	801ee2a <__gethex+0x2ca>
 801ee4e:	ee18 0a10 	vmov	r0, s16
 801ee52:	4621      	mov	r1, r4
 801ee54:	f000 f9ee 	bl	801f234 <_Bfree>
 801ee58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ee5a:	2300      	movs	r3, #0
 801ee5c:	6013      	str	r3, [r2, #0]
 801ee5e:	2750      	movs	r7, #80	; 0x50
 801ee60:	e713      	b.n	801ec8a <__gethex+0x12a>
 801ee62:	bf00      	nop
 801ee64:	08022b20 	.word	0x08022b20
 801ee68:	08022aa4 	.word	0x08022aa4
 801ee6c:	08022ab5 	.word	0x08022ab5
 801ee70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ee72:	2b00      	cmp	r3, #0
 801ee74:	d1eb      	bne.n	801ee4e <__gethex+0x2ee>
 801ee76:	e7d8      	b.n	801ee2a <__gethex+0x2ca>
 801ee78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ee7a:	2b00      	cmp	r3, #0
 801ee7c:	d1d5      	bne.n	801ee2a <__gethex+0x2ca>
 801ee7e:	e7e6      	b.n	801ee4e <__gethex+0x2ee>
 801ee80:	1e6f      	subs	r7, r5, #1
 801ee82:	f1ba 0f00 	cmp.w	sl, #0
 801ee86:	d131      	bne.n	801eeec <__gethex+0x38c>
 801ee88:	b127      	cbz	r7, 801ee94 <__gethex+0x334>
 801ee8a:	4639      	mov	r1, r7
 801ee8c:	4620      	mov	r0, r4
 801ee8e:	f000 fe2b 	bl	801fae8 <__any_on>
 801ee92:	4682      	mov	sl, r0
 801ee94:	117b      	asrs	r3, r7, #5
 801ee96:	2101      	movs	r1, #1
 801ee98:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801ee9c:	f007 071f 	and.w	r7, r7, #31
 801eea0:	fa01 f707 	lsl.w	r7, r1, r7
 801eea4:	421f      	tst	r7, r3
 801eea6:	4629      	mov	r1, r5
 801eea8:	4620      	mov	r0, r4
 801eeaa:	bf18      	it	ne
 801eeac:	f04a 0a02 	orrne.w	sl, sl, #2
 801eeb0:	1b76      	subs	r6, r6, r5
 801eeb2:	f7ff fded 	bl	801ea90 <rshift>
 801eeb6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801eeba:	2702      	movs	r7, #2
 801eebc:	f1ba 0f00 	cmp.w	sl, #0
 801eec0:	d048      	beq.n	801ef54 <__gethex+0x3f4>
 801eec2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801eec6:	2b02      	cmp	r3, #2
 801eec8:	d015      	beq.n	801eef6 <__gethex+0x396>
 801eeca:	2b03      	cmp	r3, #3
 801eecc:	d017      	beq.n	801eefe <__gethex+0x39e>
 801eece:	2b01      	cmp	r3, #1
 801eed0:	d109      	bne.n	801eee6 <__gethex+0x386>
 801eed2:	f01a 0f02 	tst.w	sl, #2
 801eed6:	d006      	beq.n	801eee6 <__gethex+0x386>
 801eed8:	f8d9 0000 	ldr.w	r0, [r9]
 801eedc:	ea4a 0a00 	orr.w	sl, sl, r0
 801eee0:	f01a 0f01 	tst.w	sl, #1
 801eee4:	d10e      	bne.n	801ef04 <__gethex+0x3a4>
 801eee6:	f047 0710 	orr.w	r7, r7, #16
 801eeea:	e033      	b.n	801ef54 <__gethex+0x3f4>
 801eeec:	f04f 0a01 	mov.w	sl, #1
 801eef0:	e7d0      	b.n	801ee94 <__gethex+0x334>
 801eef2:	2701      	movs	r7, #1
 801eef4:	e7e2      	b.n	801eebc <__gethex+0x35c>
 801eef6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801eef8:	f1c3 0301 	rsb	r3, r3, #1
 801eefc:	9315      	str	r3, [sp, #84]	; 0x54
 801eefe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ef00:	2b00      	cmp	r3, #0
 801ef02:	d0f0      	beq.n	801eee6 <__gethex+0x386>
 801ef04:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ef08:	f104 0314 	add.w	r3, r4, #20
 801ef0c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801ef10:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801ef14:	f04f 0c00 	mov.w	ip, #0
 801ef18:	4618      	mov	r0, r3
 801ef1a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ef1e:	f1b2 3fff 	cmp.w	r2, #4294967295
 801ef22:	d01c      	beq.n	801ef5e <__gethex+0x3fe>
 801ef24:	3201      	adds	r2, #1
 801ef26:	6002      	str	r2, [r0, #0]
 801ef28:	2f02      	cmp	r7, #2
 801ef2a:	f104 0314 	add.w	r3, r4, #20
 801ef2e:	d13f      	bne.n	801efb0 <__gethex+0x450>
 801ef30:	f8d8 2000 	ldr.w	r2, [r8]
 801ef34:	3a01      	subs	r2, #1
 801ef36:	42b2      	cmp	r2, r6
 801ef38:	d10a      	bne.n	801ef50 <__gethex+0x3f0>
 801ef3a:	1171      	asrs	r1, r6, #5
 801ef3c:	2201      	movs	r2, #1
 801ef3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ef42:	f006 061f 	and.w	r6, r6, #31
 801ef46:	fa02 f606 	lsl.w	r6, r2, r6
 801ef4a:	421e      	tst	r6, r3
 801ef4c:	bf18      	it	ne
 801ef4e:	4617      	movne	r7, r2
 801ef50:	f047 0720 	orr.w	r7, r7, #32
 801ef54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ef56:	601c      	str	r4, [r3, #0]
 801ef58:	9b04      	ldr	r3, [sp, #16]
 801ef5a:	601d      	str	r5, [r3, #0]
 801ef5c:	e695      	b.n	801ec8a <__gethex+0x12a>
 801ef5e:	4299      	cmp	r1, r3
 801ef60:	f843 cc04 	str.w	ip, [r3, #-4]
 801ef64:	d8d8      	bhi.n	801ef18 <__gethex+0x3b8>
 801ef66:	68a3      	ldr	r3, [r4, #8]
 801ef68:	459b      	cmp	fp, r3
 801ef6a:	db19      	blt.n	801efa0 <__gethex+0x440>
 801ef6c:	6861      	ldr	r1, [r4, #4]
 801ef6e:	ee18 0a10 	vmov	r0, s16
 801ef72:	3101      	adds	r1, #1
 801ef74:	f000 f91e 	bl	801f1b4 <_Balloc>
 801ef78:	4681      	mov	r9, r0
 801ef7a:	b918      	cbnz	r0, 801ef84 <__gethex+0x424>
 801ef7c:	4b1a      	ldr	r3, [pc, #104]	; (801efe8 <__gethex+0x488>)
 801ef7e:	4602      	mov	r2, r0
 801ef80:	2184      	movs	r1, #132	; 0x84
 801ef82:	e6a8      	b.n	801ecd6 <__gethex+0x176>
 801ef84:	6922      	ldr	r2, [r4, #16]
 801ef86:	3202      	adds	r2, #2
 801ef88:	f104 010c 	add.w	r1, r4, #12
 801ef8c:	0092      	lsls	r2, r2, #2
 801ef8e:	300c      	adds	r0, #12
 801ef90:	f7fd f9f2 	bl	801c378 <memcpy>
 801ef94:	4621      	mov	r1, r4
 801ef96:	ee18 0a10 	vmov	r0, s16
 801ef9a:	f000 f94b 	bl	801f234 <_Bfree>
 801ef9e:	464c      	mov	r4, r9
 801efa0:	6923      	ldr	r3, [r4, #16]
 801efa2:	1c5a      	adds	r2, r3, #1
 801efa4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801efa8:	6122      	str	r2, [r4, #16]
 801efaa:	2201      	movs	r2, #1
 801efac:	615a      	str	r2, [r3, #20]
 801efae:	e7bb      	b.n	801ef28 <__gethex+0x3c8>
 801efb0:	6922      	ldr	r2, [r4, #16]
 801efb2:	455a      	cmp	r2, fp
 801efb4:	dd0b      	ble.n	801efce <__gethex+0x46e>
 801efb6:	2101      	movs	r1, #1
 801efb8:	4620      	mov	r0, r4
 801efba:	f7ff fd69 	bl	801ea90 <rshift>
 801efbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801efc2:	3501      	adds	r5, #1
 801efc4:	42ab      	cmp	r3, r5
 801efc6:	f6ff aed0 	blt.w	801ed6a <__gethex+0x20a>
 801efca:	2701      	movs	r7, #1
 801efcc:	e7c0      	b.n	801ef50 <__gethex+0x3f0>
 801efce:	f016 061f 	ands.w	r6, r6, #31
 801efd2:	d0fa      	beq.n	801efca <__gethex+0x46a>
 801efd4:	449a      	add	sl, r3
 801efd6:	f1c6 0620 	rsb	r6, r6, #32
 801efda:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801efde:	f000 f9df 	bl	801f3a0 <__hi0bits>
 801efe2:	42b0      	cmp	r0, r6
 801efe4:	dbe7      	blt.n	801efb6 <__gethex+0x456>
 801efe6:	e7f0      	b.n	801efca <__gethex+0x46a>
 801efe8:	08022aa4 	.word	0x08022aa4

0801efec <L_shift>:
 801efec:	f1c2 0208 	rsb	r2, r2, #8
 801eff0:	0092      	lsls	r2, r2, #2
 801eff2:	b570      	push	{r4, r5, r6, lr}
 801eff4:	f1c2 0620 	rsb	r6, r2, #32
 801eff8:	6843      	ldr	r3, [r0, #4]
 801effa:	6804      	ldr	r4, [r0, #0]
 801effc:	fa03 f506 	lsl.w	r5, r3, r6
 801f000:	432c      	orrs	r4, r5
 801f002:	40d3      	lsrs	r3, r2
 801f004:	6004      	str	r4, [r0, #0]
 801f006:	f840 3f04 	str.w	r3, [r0, #4]!
 801f00a:	4288      	cmp	r0, r1
 801f00c:	d3f4      	bcc.n	801eff8 <L_shift+0xc>
 801f00e:	bd70      	pop	{r4, r5, r6, pc}

0801f010 <__match>:
 801f010:	b530      	push	{r4, r5, lr}
 801f012:	6803      	ldr	r3, [r0, #0]
 801f014:	3301      	adds	r3, #1
 801f016:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f01a:	b914      	cbnz	r4, 801f022 <__match+0x12>
 801f01c:	6003      	str	r3, [r0, #0]
 801f01e:	2001      	movs	r0, #1
 801f020:	bd30      	pop	{r4, r5, pc}
 801f022:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f026:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801f02a:	2d19      	cmp	r5, #25
 801f02c:	bf98      	it	ls
 801f02e:	3220      	addls	r2, #32
 801f030:	42a2      	cmp	r2, r4
 801f032:	d0f0      	beq.n	801f016 <__match+0x6>
 801f034:	2000      	movs	r0, #0
 801f036:	e7f3      	b.n	801f020 <__match+0x10>

0801f038 <__hexnan>:
 801f038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f03c:	680b      	ldr	r3, [r1, #0]
 801f03e:	6801      	ldr	r1, [r0, #0]
 801f040:	115e      	asrs	r6, r3, #5
 801f042:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801f046:	f013 031f 	ands.w	r3, r3, #31
 801f04a:	b087      	sub	sp, #28
 801f04c:	bf18      	it	ne
 801f04e:	3604      	addne	r6, #4
 801f050:	2500      	movs	r5, #0
 801f052:	1f37      	subs	r7, r6, #4
 801f054:	4682      	mov	sl, r0
 801f056:	4690      	mov	r8, r2
 801f058:	9301      	str	r3, [sp, #4]
 801f05a:	f846 5c04 	str.w	r5, [r6, #-4]
 801f05e:	46b9      	mov	r9, r7
 801f060:	463c      	mov	r4, r7
 801f062:	9502      	str	r5, [sp, #8]
 801f064:	46ab      	mov	fp, r5
 801f066:	784a      	ldrb	r2, [r1, #1]
 801f068:	1c4b      	adds	r3, r1, #1
 801f06a:	9303      	str	r3, [sp, #12]
 801f06c:	b342      	cbz	r2, 801f0c0 <__hexnan+0x88>
 801f06e:	4610      	mov	r0, r2
 801f070:	9105      	str	r1, [sp, #20]
 801f072:	9204      	str	r2, [sp, #16]
 801f074:	f7ff fd5e 	bl	801eb34 <__hexdig_fun>
 801f078:	2800      	cmp	r0, #0
 801f07a:	d14f      	bne.n	801f11c <__hexnan+0xe4>
 801f07c:	9a04      	ldr	r2, [sp, #16]
 801f07e:	9905      	ldr	r1, [sp, #20]
 801f080:	2a20      	cmp	r2, #32
 801f082:	d818      	bhi.n	801f0b6 <__hexnan+0x7e>
 801f084:	9b02      	ldr	r3, [sp, #8]
 801f086:	459b      	cmp	fp, r3
 801f088:	dd13      	ble.n	801f0b2 <__hexnan+0x7a>
 801f08a:	454c      	cmp	r4, r9
 801f08c:	d206      	bcs.n	801f09c <__hexnan+0x64>
 801f08e:	2d07      	cmp	r5, #7
 801f090:	dc04      	bgt.n	801f09c <__hexnan+0x64>
 801f092:	462a      	mov	r2, r5
 801f094:	4649      	mov	r1, r9
 801f096:	4620      	mov	r0, r4
 801f098:	f7ff ffa8 	bl	801efec <L_shift>
 801f09c:	4544      	cmp	r4, r8
 801f09e:	d950      	bls.n	801f142 <__hexnan+0x10a>
 801f0a0:	2300      	movs	r3, #0
 801f0a2:	f1a4 0904 	sub.w	r9, r4, #4
 801f0a6:	f844 3c04 	str.w	r3, [r4, #-4]
 801f0aa:	f8cd b008 	str.w	fp, [sp, #8]
 801f0ae:	464c      	mov	r4, r9
 801f0b0:	461d      	mov	r5, r3
 801f0b2:	9903      	ldr	r1, [sp, #12]
 801f0b4:	e7d7      	b.n	801f066 <__hexnan+0x2e>
 801f0b6:	2a29      	cmp	r2, #41	; 0x29
 801f0b8:	d156      	bne.n	801f168 <__hexnan+0x130>
 801f0ba:	3102      	adds	r1, #2
 801f0bc:	f8ca 1000 	str.w	r1, [sl]
 801f0c0:	f1bb 0f00 	cmp.w	fp, #0
 801f0c4:	d050      	beq.n	801f168 <__hexnan+0x130>
 801f0c6:	454c      	cmp	r4, r9
 801f0c8:	d206      	bcs.n	801f0d8 <__hexnan+0xa0>
 801f0ca:	2d07      	cmp	r5, #7
 801f0cc:	dc04      	bgt.n	801f0d8 <__hexnan+0xa0>
 801f0ce:	462a      	mov	r2, r5
 801f0d0:	4649      	mov	r1, r9
 801f0d2:	4620      	mov	r0, r4
 801f0d4:	f7ff ff8a 	bl	801efec <L_shift>
 801f0d8:	4544      	cmp	r4, r8
 801f0da:	d934      	bls.n	801f146 <__hexnan+0x10e>
 801f0dc:	f1a8 0204 	sub.w	r2, r8, #4
 801f0e0:	4623      	mov	r3, r4
 801f0e2:	f853 1b04 	ldr.w	r1, [r3], #4
 801f0e6:	f842 1f04 	str.w	r1, [r2, #4]!
 801f0ea:	429f      	cmp	r7, r3
 801f0ec:	d2f9      	bcs.n	801f0e2 <__hexnan+0xaa>
 801f0ee:	1b3b      	subs	r3, r7, r4
 801f0f0:	f023 0303 	bic.w	r3, r3, #3
 801f0f4:	3304      	adds	r3, #4
 801f0f6:	3401      	adds	r4, #1
 801f0f8:	3e03      	subs	r6, #3
 801f0fa:	42b4      	cmp	r4, r6
 801f0fc:	bf88      	it	hi
 801f0fe:	2304      	movhi	r3, #4
 801f100:	4443      	add	r3, r8
 801f102:	2200      	movs	r2, #0
 801f104:	f843 2b04 	str.w	r2, [r3], #4
 801f108:	429f      	cmp	r7, r3
 801f10a:	d2fb      	bcs.n	801f104 <__hexnan+0xcc>
 801f10c:	683b      	ldr	r3, [r7, #0]
 801f10e:	b91b      	cbnz	r3, 801f118 <__hexnan+0xe0>
 801f110:	4547      	cmp	r7, r8
 801f112:	d127      	bne.n	801f164 <__hexnan+0x12c>
 801f114:	2301      	movs	r3, #1
 801f116:	603b      	str	r3, [r7, #0]
 801f118:	2005      	movs	r0, #5
 801f11a:	e026      	b.n	801f16a <__hexnan+0x132>
 801f11c:	3501      	adds	r5, #1
 801f11e:	2d08      	cmp	r5, #8
 801f120:	f10b 0b01 	add.w	fp, fp, #1
 801f124:	dd06      	ble.n	801f134 <__hexnan+0xfc>
 801f126:	4544      	cmp	r4, r8
 801f128:	d9c3      	bls.n	801f0b2 <__hexnan+0x7a>
 801f12a:	2300      	movs	r3, #0
 801f12c:	f844 3c04 	str.w	r3, [r4, #-4]
 801f130:	2501      	movs	r5, #1
 801f132:	3c04      	subs	r4, #4
 801f134:	6822      	ldr	r2, [r4, #0]
 801f136:	f000 000f 	and.w	r0, r0, #15
 801f13a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801f13e:	6022      	str	r2, [r4, #0]
 801f140:	e7b7      	b.n	801f0b2 <__hexnan+0x7a>
 801f142:	2508      	movs	r5, #8
 801f144:	e7b5      	b.n	801f0b2 <__hexnan+0x7a>
 801f146:	9b01      	ldr	r3, [sp, #4]
 801f148:	2b00      	cmp	r3, #0
 801f14a:	d0df      	beq.n	801f10c <__hexnan+0xd4>
 801f14c:	f04f 32ff 	mov.w	r2, #4294967295
 801f150:	f1c3 0320 	rsb	r3, r3, #32
 801f154:	fa22 f303 	lsr.w	r3, r2, r3
 801f158:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801f15c:	401a      	ands	r2, r3
 801f15e:	f846 2c04 	str.w	r2, [r6, #-4]
 801f162:	e7d3      	b.n	801f10c <__hexnan+0xd4>
 801f164:	3f04      	subs	r7, #4
 801f166:	e7d1      	b.n	801f10c <__hexnan+0xd4>
 801f168:	2004      	movs	r0, #4
 801f16a:	b007      	add	sp, #28
 801f16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f170 <_localeconv_r>:
 801f170:	4800      	ldr	r0, [pc, #0]	; (801f174 <_localeconv_r+0x4>)
 801f172:	4770      	bx	lr
 801f174:	200004f0 	.word	0x200004f0

0801f178 <__ascii_mbtowc>:
 801f178:	b082      	sub	sp, #8
 801f17a:	b901      	cbnz	r1, 801f17e <__ascii_mbtowc+0x6>
 801f17c:	a901      	add	r1, sp, #4
 801f17e:	b142      	cbz	r2, 801f192 <__ascii_mbtowc+0x1a>
 801f180:	b14b      	cbz	r3, 801f196 <__ascii_mbtowc+0x1e>
 801f182:	7813      	ldrb	r3, [r2, #0]
 801f184:	600b      	str	r3, [r1, #0]
 801f186:	7812      	ldrb	r2, [r2, #0]
 801f188:	1e10      	subs	r0, r2, #0
 801f18a:	bf18      	it	ne
 801f18c:	2001      	movne	r0, #1
 801f18e:	b002      	add	sp, #8
 801f190:	4770      	bx	lr
 801f192:	4610      	mov	r0, r2
 801f194:	e7fb      	b.n	801f18e <__ascii_mbtowc+0x16>
 801f196:	f06f 0001 	mvn.w	r0, #1
 801f19a:	e7f8      	b.n	801f18e <__ascii_mbtowc+0x16>

0801f19c <__malloc_lock>:
 801f19c:	4801      	ldr	r0, [pc, #4]	; (801f1a4 <__malloc_lock+0x8>)
 801f19e:	f000 be8e 	b.w	801febe <__retarget_lock_acquire_recursive>
 801f1a2:	bf00      	nop
 801f1a4:	20009f10 	.word	0x20009f10

0801f1a8 <__malloc_unlock>:
 801f1a8:	4801      	ldr	r0, [pc, #4]	; (801f1b0 <__malloc_unlock+0x8>)
 801f1aa:	f000 be89 	b.w	801fec0 <__retarget_lock_release_recursive>
 801f1ae:	bf00      	nop
 801f1b0:	20009f10 	.word	0x20009f10

0801f1b4 <_Balloc>:
 801f1b4:	b570      	push	{r4, r5, r6, lr}
 801f1b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801f1b8:	4604      	mov	r4, r0
 801f1ba:	460d      	mov	r5, r1
 801f1bc:	b976      	cbnz	r6, 801f1dc <_Balloc+0x28>
 801f1be:	2010      	movs	r0, #16
 801f1c0:	f7fd f8ca 	bl	801c358 <malloc>
 801f1c4:	4602      	mov	r2, r0
 801f1c6:	6260      	str	r0, [r4, #36]	; 0x24
 801f1c8:	b920      	cbnz	r0, 801f1d4 <_Balloc+0x20>
 801f1ca:	4b18      	ldr	r3, [pc, #96]	; (801f22c <_Balloc+0x78>)
 801f1cc:	4818      	ldr	r0, [pc, #96]	; (801f230 <_Balloc+0x7c>)
 801f1ce:	2166      	movs	r1, #102	; 0x66
 801f1d0:	f000 fe44 	bl	801fe5c <__assert_func>
 801f1d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f1d8:	6006      	str	r6, [r0, #0]
 801f1da:	60c6      	str	r6, [r0, #12]
 801f1dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801f1de:	68f3      	ldr	r3, [r6, #12]
 801f1e0:	b183      	cbz	r3, 801f204 <_Balloc+0x50>
 801f1e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f1e4:	68db      	ldr	r3, [r3, #12]
 801f1e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f1ea:	b9b8      	cbnz	r0, 801f21c <_Balloc+0x68>
 801f1ec:	2101      	movs	r1, #1
 801f1ee:	fa01 f605 	lsl.w	r6, r1, r5
 801f1f2:	1d72      	adds	r2, r6, #5
 801f1f4:	0092      	lsls	r2, r2, #2
 801f1f6:	4620      	mov	r0, r4
 801f1f8:	f000 fc97 	bl	801fb2a <_calloc_r>
 801f1fc:	b160      	cbz	r0, 801f218 <_Balloc+0x64>
 801f1fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801f202:	e00e      	b.n	801f222 <_Balloc+0x6e>
 801f204:	2221      	movs	r2, #33	; 0x21
 801f206:	2104      	movs	r1, #4
 801f208:	4620      	mov	r0, r4
 801f20a:	f000 fc8e 	bl	801fb2a <_calloc_r>
 801f20e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f210:	60f0      	str	r0, [r6, #12]
 801f212:	68db      	ldr	r3, [r3, #12]
 801f214:	2b00      	cmp	r3, #0
 801f216:	d1e4      	bne.n	801f1e2 <_Balloc+0x2e>
 801f218:	2000      	movs	r0, #0
 801f21a:	bd70      	pop	{r4, r5, r6, pc}
 801f21c:	6802      	ldr	r2, [r0, #0]
 801f21e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f222:	2300      	movs	r3, #0
 801f224:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f228:	e7f7      	b.n	801f21a <_Balloc+0x66>
 801f22a:	bf00      	nop
 801f22c:	08022a2e 	.word	0x08022a2e
 801f230:	08022b34 	.word	0x08022b34

0801f234 <_Bfree>:
 801f234:	b570      	push	{r4, r5, r6, lr}
 801f236:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801f238:	4605      	mov	r5, r0
 801f23a:	460c      	mov	r4, r1
 801f23c:	b976      	cbnz	r6, 801f25c <_Bfree+0x28>
 801f23e:	2010      	movs	r0, #16
 801f240:	f7fd f88a 	bl	801c358 <malloc>
 801f244:	4602      	mov	r2, r0
 801f246:	6268      	str	r0, [r5, #36]	; 0x24
 801f248:	b920      	cbnz	r0, 801f254 <_Bfree+0x20>
 801f24a:	4b09      	ldr	r3, [pc, #36]	; (801f270 <_Bfree+0x3c>)
 801f24c:	4809      	ldr	r0, [pc, #36]	; (801f274 <_Bfree+0x40>)
 801f24e:	218a      	movs	r1, #138	; 0x8a
 801f250:	f000 fe04 	bl	801fe5c <__assert_func>
 801f254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f258:	6006      	str	r6, [r0, #0]
 801f25a:	60c6      	str	r6, [r0, #12]
 801f25c:	b13c      	cbz	r4, 801f26e <_Bfree+0x3a>
 801f25e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801f260:	6862      	ldr	r2, [r4, #4]
 801f262:	68db      	ldr	r3, [r3, #12]
 801f264:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f268:	6021      	str	r1, [r4, #0]
 801f26a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f26e:	bd70      	pop	{r4, r5, r6, pc}
 801f270:	08022a2e 	.word	0x08022a2e
 801f274:	08022b34 	.word	0x08022b34

0801f278 <__multadd>:
 801f278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f27c:	690e      	ldr	r6, [r1, #16]
 801f27e:	4607      	mov	r7, r0
 801f280:	4698      	mov	r8, r3
 801f282:	460c      	mov	r4, r1
 801f284:	f101 0014 	add.w	r0, r1, #20
 801f288:	2300      	movs	r3, #0
 801f28a:	6805      	ldr	r5, [r0, #0]
 801f28c:	b2a9      	uxth	r1, r5
 801f28e:	fb02 8101 	mla	r1, r2, r1, r8
 801f292:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801f296:	0c2d      	lsrs	r5, r5, #16
 801f298:	fb02 c505 	mla	r5, r2, r5, ip
 801f29c:	b289      	uxth	r1, r1
 801f29e:	3301      	adds	r3, #1
 801f2a0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801f2a4:	429e      	cmp	r6, r3
 801f2a6:	f840 1b04 	str.w	r1, [r0], #4
 801f2aa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801f2ae:	dcec      	bgt.n	801f28a <__multadd+0x12>
 801f2b0:	f1b8 0f00 	cmp.w	r8, #0
 801f2b4:	d022      	beq.n	801f2fc <__multadd+0x84>
 801f2b6:	68a3      	ldr	r3, [r4, #8]
 801f2b8:	42b3      	cmp	r3, r6
 801f2ba:	dc19      	bgt.n	801f2f0 <__multadd+0x78>
 801f2bc:	6861      	ldr	r1, [r4, #4]
 801f2be:	4638      	mov	r0, r7
 801f2c0:	3101      	adds	r1, #1
 801f2c2:	f7ff ff77 	bl	801f1b4 <_Balloc>
 801f2c6:	4605      	mov	r5, r0
 801f2c8:	b928      	cbnz	r0, 801f2d6 <__multadd+0x5e>
 801f2ca:	4602      	mov	r2, r0
 801f2cc:	4b0d      	ldr	r3, [pc, #52]	; (801f304 <__multadd+0x8c>)
 801f2ce:	480e      	ldr	r0, [pc, #56]	; (801f308 <__multadd+0x90>)
 801f2d0:	21b5      	movs	r1, #181	; 0xb5
 801f2d2:	f000 fdc3 	bl	801fe5c <__assert_func>
 801f2d6:	6922      	ldr	r2, [r4, #16]
 801f2d8:	3202      	adds	r2, #2
 801f2da:	f104 010c 	add.w	r1, r4, #12
 801f2de:	0092      	lsls	r2, r2, #2
 801f2e0:	300c      	adds	r0, #12
 801f2e2:	f7fd f849 	bl	801c378 <memcpy>
 801f2e6:	4621      	mov	r1, r4
 801f2e8:	4638      	mov	r0, r7
 801f2ea:	f7ff ffa3 	bl	801f234 <_Bfree>
 801f2ee:	462c      	mov	r4, r5
 801f2f0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801f2f4:	3601      	adds	r6, #1
 801f2f6:	f8c3 8014 	str.w	r8, [r3, #20]
 801f2fa:	6126      	str	r6, [r4, #16]
 801f2fc:	4620      	mov	r0, r4
 801f2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f302:	bf00      	nop
 801f304:	08022aa4 	.word	0x08022aa4
 801f308:	08022b34 	.word	0x08022b34

0801f30c <__s2b>:
 801f30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f310:	460c      	mov	r4, r1
 801f312:	4615      	mov	r5, r2
 801f314:	461f      	mov	r7, r3
 801f316:	2209      	movs	r2, #9
 801f318:	3308      	adds	r3, #8
 801f31a:	4606      	mov	r6, r0
 801f31c:	fb93 f3f2 	sdiv	r3, r3, r2
 801f320:	2100      	movs	r1, #0
 801f322:	2201      	movs	r2, #1
 801f324:	429a      	cmp	r2, r3
 801f326:	db09      	blt.n	801f33c <__s2b+0x30>
 801f328:	4630      	mov	r0, r6
 801f32a:	f7ff ff43 	bl	801f1b4 <_Balloc>
 801f32e:	b940      	cbnz	r0, 801f342 <__s2b+0x36>
 801f330:	4602      	mov	r2, r0
 801f332:	4b19      	ldr	r3, [pc, #100]	; (801f398 <__s2b+0x8c>)
 801f334:	4819      	ldr	r0, [pc, #100]	; (801f39c <__s2b+0x90>)
 801f336:	21ce      	movs	r1, #206	; 0xce
 801f338:	f000 fd90 	bl	801fe5c <__assert_func>
 801f33c:	0052      	lsls	r2, r2, #1
 801f33e:	3101      	adds	r1, #1
 801f340:	e7f0      	b.n	801f324 <__s2b+0x18>
 801f342:	9b08      	ldr	r3, [sp, #32]
 801f344:	6143      	str	r3, [r0, #20]
 801f346:	2d09      	cmp	r5, #9
 801f348:	f04f 0301 	mov.w	r3, #1
 801f34c:	6103      	str	r3, [r0, #16]
 801f34e:	dd16      	ble.n	801f37e <__s2b+0x72>
 801f350:	f104 0909 	add.w	r9, r4, #9
 801f354:	46c8      	mov	r8, r9
 801f356:	442c      	add	r4, r5
 801f358:	f818 3b01 	ldrb.w	r3, [r8], #1
 801f35c:	4601      	mov	r1, r0
 801f35e:	3b30      	subs	r3, #48	; 0x30
 801f360:	220a      	movs	r2, #10
 801f362:	4630      	mov	r0, r6
 801f364:	f7ff ff88 	bl	801f278 <__multadd>
 801f368:	45a0      	cmp	r8, r4
 801f36a:	d1f5      	bne.n	801f358 <__s2b+0x4c>
 801f36c:	f1a5 0408 	sub.w	r4, r5, #8
 801f370:	444c      	add	r4, r9
 801f372:	1b2d      	subs	r5, r5, r4
 801f374:	1963      	adds	r3, r4, r5
 801f376:	42bb      	cmp	r3, r7
 801f378:	db04      	blt.n	801f384 <__s2b+0x78>
 801f37a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f37e:	340a      	adds	r4, #10
 801f380:	2509      	movs	r5, #9
 801f382:	e7f6      	b.n	801f372 <__s2b+0x66>
 801f384:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f388:	4601      	mov	r1, r0
 801f38a:	3b30      	subs	r3, #48	; 0x30
 801f38c:	220a      	movs	r2, #10
 801f38e:	4630      	mov	r0, r6
 801f390:	f7ff ff72 	bl	801f278 <__multadd>
 801f394:	e7ee      	b.n	801f374 <__s2b+0x68>
 801f396:	bf00      	nop
 801f398:	08022aa4 	.word	0x08022aa4
 801f39c:	08022b34 	.word	0x08022b34

0801f3a0 <__hi0bits>:
 801f3a0:	0c03      	lsrs	r3, r0, #16
 801f3a2:	041b      	lsls	r3, r3, #16
 801f3a4:	b9d3      	cbnz	r3, 801f3dc <__hi0bits+0x3c>
 801f3a6:	0400      	lsls	r0, r0, #16
 801f3a8:	2310      	movs	r3, #16
 801f3aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801f3ae:	bf04      	itt	eq
 801f3b0:	0200      	lsleq	r0, r0, #8
 801f3b2:	3308      	addeq	r3, #8
 801f3b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801f3b8:	bf04      	itt	eq
 801f3ba:	0100      	lsleq	r0, r0, #4
 801f3bc:	3304      	addeq	r3, #4
 801f3be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801f3c2:	bf04      	itt	eq
 801f3c4:	0080      	lsleq	r0, r0, #2
 801f3c6:	3302      	addeq	r3, #2
 801f3c8:	2800      	cmp	r0, #0
 801f3ca:	db05      	blt.n	801f3d8 <__hi0bits+0x38>
 801f3cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801f3d0:	f103 0301 	add.w	r3, r3, #1
 801f3d4:	bf08      	it	eq
 801f3d6:	2320      	moveq	r3, #32
 801f3d8:	4618      	mov	r0, r3
 801f3da:	4770      	bx	lr
 801f3dc:	2300      	movs	r3, #0
 801f3de:	e7e4      	b.n	801f3aa <__hi0bits+0xa>

0801f3e0 <__lo0bits>:
 801f3e0:	6803      	ldr	r3, [r0, #0]
 801f3e2:	f013 0207 	ands.w	r2, r3, #7
 801f3e6:	4601      	mov	r1, r0
 801f3e8:	d00b      	beq.n	801f402 <__lo0bits+0x22>
 801f3ea:	07da      	lsls	r2, r3, #31
 801f3ec:	d424      	bmi.n	801f438 <__lo0bits+0x58>
 801f3ee:	0798      	lsls	r0, r3, #30
 801f3f0:	bf49      	itett	mi
 801f3f2:	085b      	lsrmi	r3, r3, #1
 801f3f4:	089b      	lsrpl	r3, r3, #2
 801f3f6:	2001      	movmi	r0, #1
 801f3f8:	600b      	strmi	r3, [r1, #0]
 801f3fa:	bf5c      	itt	pl
 801f3fc:	600b      	strpl	r3, [r1, #0]
 801f3fe:	2002      	movpl	r0, #2
 801f400:	4770      	bx	lr
 801f402:	b298      	uxth	r0, r3
 801f404:	b9b0      	cbnz	r0, 801f434 <__lo0bits+0x54>
 801f406:	0c1b      	lsrs	r3, r3, #16
 801f408:	2010      	movs	r0, #16
 801f40a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801f40e:	bf04      	itt	eq
 801f410:	0a1b      	lsreq	r3, r3, #8
 801f412:	3008      	addeq	r0, #8
 801f414:	071a      	lsls	r2, r3, #28
 801f416:	bf04      	itt	eq
 801f418:	091b      	lsreq	r3, r3, #4
 801f41a:	3004      	addeq	r0, #4
 801f41c:	079a      	lsls	r2, r3, #30
 801f41e:	bf04      	itt	eq
 801f420:	089b      	lsreq	r3, r3, #2
 801f422:	3002      	addeq	r0, #2
 801f424:	07da      	lsls	r2, r3, #31
 801f426:	d403      	bmi.n	801f430 <__lo0bits+0x50>
 801f428:	085b      	lsrs	r3, r3, #1
 801f42a:	f100 0001 	add.w	r0, r0, #1
 801f42e:	d005      	beq.n	801f43c <__lo0bits+0x5c>
 801f430:	600b      	str	r3, [r1, #0]
 801f432:	4770      	bx	lr
 801f434:	4610      	mov	r0, r2
 801f436:	e7e8      	b.n	801f40a <__lo0bits+0x2a>
 801f438:	2000      	movs	r0, #0
 801f43a:	4770      	bx	lr
 801f43c:	2020      	movs	r0, #32
 801f43e:	4770      	bx	lr

0801f440 <__i2b>:
 801f440:	b510      	push	{r4, lr}
 801f442:	460c      	mov	r4, r1
 801f444:	2101      	movs	r1, #1
 801f446:	f7ff feb5 	bl	801f1b4 <_Balloc>
 801f44a:	4602      	mov	r2, r0
 801f44c:	b928      	cbnz	r0, 801f45a <__i2b+0x1a>
 801f44e:	4b05      	ldr	r3, [pc, #20]	; (801f464 <__i2b+0x24>)
 801f450:	4805      	ldr	r0, [pc, #20]	; (801f468 <__i2b+0x28>)
 801f452:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801f456:	f000 fd01 	bl	801fe5c <__assert_func>
 801f45a:	2301      	movs	r3, #1
 801f45c:	6144      	str	r4, [r0, #20]
 801f45e:	6103      	str	r3, [r0, #16]
 801f460:	bd10      	pop	{r4, pc}
 801f462:	bf00      	nop
 801f464:	08022aa4 	.word	0x08022aa4
 801f468:	08022b34 	.word	0x08022b34

0801f46c <__multiply>:
 801f46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f470:	4614      	mov	r4, r2
 801f472:	690a      	ldr	r2, [r1, #16]
 801f474:	6923      	ldr	r3, [r4, #16]
 801f476:	429a      	cmp	r2, r3
 801f478:	bfb8      	it	lt
 801f47a:	460b      	movlt	r3, r1
 801f47c:	460d      	mov	r5, r1
 801f47e:	bfbc      	itt	lt
 801f480:	4625      	movlt	r5, r4
 801f482:	461c      	movlt	r4, r3
 801f484:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801f488:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801f48c:	68ab      	ldr	r3, [r5, #8]
 801f48e:	6869      	ldr	r1, [r5, #4]
 801f490:	eb0a 0709 	add.w	r7, sl, r9
 801f494:	42bb      	cmp	r3, r7
 801f496:	b085      	sub	sp, #20
 801f498:	bfb8      	it	lt
 801f49a:	3101      	addlt	r1, #1
 801f49c:	f7ff fe8a 	bl	801f1b4 <_Balloc>
 801f4a0:	b930      	cbnz	r0, 801f4b0 <__multiply+0x44>
 801f4a2:	4602      	mov	r2, r0
 801f4a4:	4b42      	ldr	r3, [pc, #264]	; (801f5b0 <__multiply+0x144>)
 801f4a6:	4843      	ldr	r0, [pc, #268]	; (801f5b4 <__multiply+0x148>)
 801f4a8:	f240 115d 	movw	r1, #349	; 0x15d
 801f4ac:	f000 fcd6 	bl	801fe5c <__assert_func>
 801f4b0:	f100 0614 	add.w	r6, r0, #20
 801f4b4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801f4b8:	4633      	mov	r3, r6
 801f4ba:	2200      	movs	r2, #0
 801f4bc:	4543      	cmp	r3, r8
 801f4be:	d31e      	bcc.n	801f4fe <__multiply+0x92>
 801f4c0:	f105 0c14 	add.w	ip, r5, #20
 801f4c4:	f104 0314 	add.w	r3, r4, #20
 801f4c8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801f4cc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801f4d0:	9202      	str	r2, [sp, #8]
 801f4d2:	ebac 0205 	sub.w	r2, ip, r5
 801f4d6:	3a15      	subs	r2, #21
 801f4d8:	f022 0203 	bic.w	r2, r2, #3
 801f4dc:	3204      	adds	r2, #4
 801f4de:	f105 0115 	add.w	r1, r5, #21
 801f4e2:	458c      	cmp	ip, r1
 801f4e4:	bf38      	it	cc
 801f4e6:	2204      	movcc	r2, #4
 801f4e8:	9201      	str	r2, [sp, #4]
 801f4ea:	9a02      	ldr	r2, [sp, #8]
 801f4ec:	9303      	str	r3, [sp, #12]
 801f4ee:	429a      	cmp	r2, r3
 801f4f0:	d808      	bhi.n	801f504 <__multiply+0x98>
 801f4f2:	2f00      	cmp	r7, #0
 801f4f4:	dc55      	bgt.n	801f5a2 <__multiply+0x136>
 801f4f6:	6107      	str	r7, [r0, #16]
 801f4f8:	b005      	add	sp, #20
 801f4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4fe:	f843 2b04 	str.w	r2, [r3], #4
 801f502:	e7db      	b.n	801f4bc <__multiply+0x50>
 801f504:	f8b3 a000 	ldrh.w	sl, [r3]
 801f508:	f1ba 0f00 	cmp.w	sl, #0
 801f50c:	d020      	beq.n	801f550 <__multiply+0xe4>
 801f50e:	f105 0e14 	add.w	lr, r5, #20
 801f512:	46b1      	mov	r9, r6
 801f514:	2200      	movs	r2, #0
 801f516:	f85e 4b04 	ldr.w	r4, [lr], #4
 801f51a:	f8d9 b000 	ldr.w	fp, [r9]
 801f51e:	b2a1      	uxth	r1, r4
 801f520:	fa1f fb8b 	uxth.w	fp, fp
 801f524:	fb0a b101 	mla	r1, sl, r1, fp
 801f528:	4411      	add	r1, r2
 801f52a:	f8d9 2000 	ldr.w	r2, [r9]
 801f52e:	0c24      	lsrs	r4, r4, #16
 801f530:	0c12      	lsrs	r2, r2, #16
 801f532:	fb0a 2404 	mla	r4, sl, r4, r2
 801f536:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801f53a:	b289      	uxth	r1, r1
 801f53c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801f540:	45f4      	cmp	ip, lr
 801f542:	f849 1b04 	str.w	r1, [r9], #4
 801f546:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801f54a:	d8e4      	bhi.n	801f516 <__multiply+0xaa>
 801f54c:	9901      	ldr	r1, [sp, #4]
 801f54e:	5072      	str	r2, [r6, r1]
 801f550:	9a03      	ldr	r2, [sp, #12]
 801f552:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801f556:	3304      	adds	r3, #4
 801f558:	f1b9 0f00 	cmp.w	r9, #0
 801f55c:	d01f      	beq.n	801f59e <__multiply+0x132>
 801f55e:	6834      	ldr	r4, [r6, #0]
 801f560:	f105 0114 	add.w	r1, r5, #20
 801f564:	46b6      	mov	lr, r6
 801f566:	f04f 0a00 	mov.w	sl, #0
 801f56a:	880a      	ldrh	r2, [r1, #0]
 801f56c:	f8be b002 	ldrh.w	fp, [lr, #2]
 801f570:	fb09 b202 	mla	r2, r9, r2, fp
 801f574:	4492      	add	sl, r2
 801f576:	b2a4      	uxth	r4, r4
 801f578:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801f57c:	f84e 4b04 	str.w	r4, [lr], #4
 801f580:	f851 4b04 	ldr.w	r4, [r1], #4
 801f584:	f8be 2000 	ldrh.w	r2, [lr]
 801f588:	0c24      	lsrs	r4, r4, #16
 801f58a:	fb09 2404 	mla	r4, r9, r4, r2
 801f58e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801f592:	458c      	cmp	ip, r1
 801f594:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801f598:	d8e7      	bhi.n	801f56a <__multiply+0xfe>
 801f59a:	9a01      	ldr	r2, [sp, #4]
 801f59c:	50b4      	str	r4, [r6, r2]
 801f59e:	3604      	adds	r6, #4
 801f5a0:	e7a3      	b.n	801f4ea <__multiply+0x7e>
 801f5a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f5a6:	2b00      	cmp	r3, #0
 801f5a8:	d1a5      	bne.n	801f4f6 <__multiply+0x8a>
 801f5aa:	3f01      	subs	r7, #1
 801f5ac:	e7a1      	b.n	801f4f2 <__multiply+0x86>
 801f5ae:	bf00      	nop
 801f5b0:	08022aa4 	.word	0x08022aa4
 801f5b4:	08022b34 	.word	0x08022b34

0801f5b8 <__pow5mult>:
 801f5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f5bc:	4615      	mov	r5, r2
 801f5be:	f012 0203 	ands.w	r2, r2, #3
 801f5c2:	4606      	mov	r6, r0
 801f5c4:	460f      	mov	r7, r1
 801f5c6:	d007      	beq.n	801f5d8 <__pow5mult+0x20>
 801f5c8:	4c25      	ldr	r4, [pc, #148]	; (801f660 <__pow5mult+0xa8>)
 801f5ca:	3a01      	subs	r2, #1
 801f5cc:	2300      	movs	r3, #0
 801f5ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f5d2:	f7ff fe51 	bl	801f278 <__multadd>
 801f5d6:	4607      	mov	r7, r0
 801f5d8:	10ad      	asrs	r5, r5, #2
 801f5da:	d03d      	beq.n	801f658 <__pow5mult+0xa0>
 801f5dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801f5de:	b97c      	cbnz	r4, 801f600 <__pow5mult+0x48>
 801f5e0:	2010      	movs	r0, #16
 801f5e2:	f7fc feb9 	bl	801c358 <malloc>
 801f5e6:	4602      	mov	r2, r0
 801f5e8:	6270      	str	r0, [r6, #36]	; 0x24
 801f5ea:	b928      	cbnz	r0, 801f5f8 <__pow5mult+0x40>
 801f5ec:	4b1d      	ldr	r3, [pc, #116]	; (801f664 <__pow5mult+0xac>)
 801f5ee:	481e      	ldr	r0, [pc, #120]	; (801f668 <__pow5mult+0xb0>)
 801f5f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801f5f4:	f000 fc32 	bl	801fe5c <__assert_func>
 801f5f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f5fc:	6004      	str	r4, [r0, #0]
 801f5fe:	60c4      	str	r4, [r0, #12]
 801f600:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801f604:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f608:	b94c      	cbnz	r4, 801f61e <__pow5mult+0x66>
 801f60a:	f240 2171 	movw	r1, #625	; 0x271
 801f60e:	4630      	mov	r0, r6
 801f610:	f7ff ff16 	bl	801f440 <__i2b>
 801f614:	2300      	movs	r3, #0
 801f616:	f8c8 0008 	str.w	r0, [r8, #8]
 801f61a:	4604      	mov	r4, r0
 801f61c:	6003      	str	r3, [r0, #0]
 801f61e:	f04f 0900 	mov.w	r9, #0
 801f622:	07eb      	lsls	r3, r5, #31
 801f624:	d50a      	bpl.n	801f63c <__pow5mult+0x84>
 801f626:	4639      	mov	r1, r7
 801f628:	4622      	mov	r2, r4
 801f62a:	4630      	mov	r0, r6
 801f62c:	f7ff ff1e 	bl	801f46c <__multiply>
 801f630:	4639      	mov	r1, r7
 801f632:	4680      	mov	r8, r0
 801f634:	4630      	mov	r0, r6
 801f636:	f7ff fdfd 	bl	801f234 <_Bfree>
 801f63a:	4647      	mov	r7, r8
 801f63c:	106d      	asrs	r5, r5, #1
 801f63e:	d00b      	beq.n	801f658 <__pow5mult+0xa0>
 801f640:	6820      	ldr	r0, [r4, #0]
 801f642:	b938      	cbnz	r0, 801f654 <__pow5mult+0x9c>
 801f644:	4622      	mov	r2, r4
 801f646:	4621      	mov	r1, r4
 801f648:	4630      	mov	r0, r6
 801f64a:	f7ff ff0f 	bl	801f46c <__multiply>
 801f64e:	6020      	str	r0, [r4, #0]
 801f650:	f8c0 9000 	str.w	r9, [r0]
 801f654:	4604      	mov	r4, r0
 801f656:	e7e4      	b.n	801f622 <__pow5mult+0x6a>
 801f658:	4638      	mov	r0, r7
 801f65a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f65e:	bf00      	nop
 801f660:	08022c88 	.word	0x08022c88
 801f664:	08022a2e 	.word	0x08022a2e
 801f668:	08022b34 	.word	0x08022b34

0801f66c <__lshift>:
 801f66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f670:	460c      	mov	r4, r1
 801f672:	6849      	ldr	r1, [r1, #4]
 801f674:	6923      	ldr	r3, [r4, #16]
 801f676:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f67a:	68a3      	ldr	r3, [r4, #8]
 801f67c:	4607      	mov	r7, r0
 801f67e:	4691      	mov	r9, r2
 801f680:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f684:	f108 0601 	add.w	r6, r8, #1
 801f688:	42b3      	cmp	r3, r6
 801f68a:	db0b      	blt.n	801f6a4 <__lshift+0x38>
 801f68c:	4638      	mov	r0, r7
 801f68e:	f7ff fd91 	bl	801f1b4 <_Balloc>
 801f692:	4605      	mov	r5, r0
 801f694:	b948      	cbnz	r0, 801f6aa <__lshift+0x3e>
 801f696:	4602      	mov	r2, r0
 801f698:	4b28      	ldr	r3, [pc, #160]	; (801f73c <__lshift+0xd0>)
 801f69a:	4829      	ldr	r0, [pc, #164]	; (801f740 <__lshift+0xd4>)
 801f69c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801f6a0:	f000 fbdc 	bl	801fe5c <__assert_func>
 801f6a4:	3101      	adds	r1, #1
 801f6a6:	005b      	lsls	r3, r3, #1
 801f6a8:	e7ee      	b.n	801f688 <__lshift+0x1c>
 801f6aa:	2300      	movs	r3, #0
 801f6ac:	f100 0114 	add.w	r1, r0, #20
 801f6b0:	f100 0210 	add.w	r2, r0, #16
 801f6b4:	4618      	mov	r0, r3
 801f6b6:	4553      	cmp	r3, sl
 801f6b8:	db33      	blt.n	801f722 <__lshift+0xb6>
 801f6ba:	6920      	ldr	r0, [r4, #16]
 801f6bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f6c0:	f104 0314 	add.w	r3, r4, #20
 801f6c4:	f019 091f 	ands.w	r9, r9, #31
 801f6c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f6cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f6d0:	d02b      	beq.n	801f72a <__lshift+0xbe>
 801f6d2:	f1c9 0e20 	rsb	lr, r9, #32
 801f6d6:	468a      	mov	sl, r1
 801f6d8:	2200      	movs	r2, #0
 801f6da:	6818      	ldr	r0, [r3, #0]
 801f6dc:	fa00 f009 	lsl.w	r0, r0, r9
 801f6e0:	4302      	orrs	r2, r0
 801f6e2:	f84a 2b04 	str.w	r2, [sl], #4
 801f6e6:	f853 2b04 	ldr.w	r2, [r3], #4
 801f6ea:	459c      	cmp	ip, r3
 801f6ec:	fa22 f20e 	lsr.w	r2, r2, lr
 801f6f0:	d8f3      	bhi.n	801f6da <__lshift+0x6e>
 801f6f2:	ebac 0304 	sub.w	r3, ip, r4
 801f6f6:	3b15      	subs	r3, #21
 801f6f8:	f023 0303 	bic.w	r3, r3, #3
 801f6fc:	3304      	adds	r3, #4
 801f6fe:	f104 0015 	add.w	r0, r4, #21
 801f702:	4584      	cmp	ip, r0
 801f704:	bf38      	it	cc
 801f706:	2304      	movcc	r3, #4
 801f708:	50ca      	str	r2, [r1, r3]
 801f70a:	b10a      	cbz	r2, 801f710 <__lshift+0xa4>
 801f70c:	f108 0602 	add.w	r6, r8, #2
 801f710:	3e01      	subs	r6, #1
 801f712:	4638      	mov	r0, r7
 801f714:	612e      	str	r6, [r5, #16]
 801f716:	4621      	mov	r1, r4
 801f718:	f7ff fd8c 	bl	801f234 <_Bfree>
 801f71c:	4628      	mov	r0, r5
 801f71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f722:	f842 0f04 	str.w	r0, [r2, #4]!
 801f726:	3301      	adds	r3, #1
 801f728:	e7c5      	b.n	801f6b6 <__lshift+0x4a>
 801f72a:	3904      	subs	r1, #4
 801f72c:	f853 2b04 	ldr.w	r2, [r3], #4
 801f730:	f841 2f04 	str.w	r2, [r1, #4]!
 801f734:	459c      	cmp	ip, r3
 801f736:	d8f9      	bhi.n	801f72c <__lshift+0xc0>
 801f738:	e7ea      	b.n	801f710 <__lshift+0xa4>
 801f73a:	bf00      	nop
 801f73c:	08022aa4 	.word	0x08022aa4
 801f740:	08022b34 	.word	0x08022b34

0801f744 <__mcmp>:
 801f744:	b530      	push	{r4, r5, lr}
 801f746:	6902      	ldr	r2, [r0, #16]
 801f748:	690c      	ldr	r4, [r1, #16]
 801f74a:	1b12      	subs	r2, r2, r4
 801f74c:	d10e      	bne.n	801f76c <__mcmp+0x28>
 801f74e:	f100 0314 	add.w	r3, r0, #20
 801f752:	3114      	adds	r1, #20
 801f754:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801f758:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801f75c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801f760:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801f764:	42a5      	cmp	r5, r4
 801f766:	d003      	beq.n	801f770 <__mcmp+0x2c>
 801f768:	d305      	bcc.n	801f776 <__mcmp+0x32>
 801f76a:	2201      	movs	r2, #1
 801f76c:	4610      	mov	r0, r2
 801f76e:	bd30      	pop	{r4, r5, pc}
 801f770:	4283      	cmp	r3, r0
 801f772:	d3f3      	bcc.n	801f75c <__mcmp+0x18>
 801f774:	e7fa      	b.n	801f76c <__mcmp+0x28>
 801f776:	f04f 32ff 	mov.w	r2, #4294967295
 801f77a:	e7f7      	b.n	801f76c <__mcmp+0x28>

0801f77c <__mdiff>:
 801f77c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f780:	460c      	mov	r4, r1
 801f782:	4606      	mov	r6, r0
 801f784:	4611      	mov	r1, r2
 801f786:	4620      	mov	r0, r4
 801f788:	4617      	mov	r7, r2
 801f78a:	f7ff ffdb 	bl	801f744 <__mcmp>
 801f78e:	1e05      	subs	r5, r0, #0
 801f790:	d110      	bne.n	801f7b4 <__mdiff+0x38>
 801f792:	4629      	mov	r1, r5
 801f794:	4630      	mov	r0, r6
 801f796:	f7ff fd0d 	bl	801f1b4 <_Balloc>
 801f79a:	b930      	cbnz	r0, 801f7aa <__mdiff+0x2e>
 801f79c:	4b39      	ldr	r3, [pc, #228]	; (801f884 <__mdiff+0x108>)
 801f79e:	4602      	mov	r2, r0
 801f7a0:	f240 2132 	movw	r1, #562	; 0x232
 801f7a4:	4838      	ldr	r0, [pc, #224]	; (801f888 <__mdiff+0x10c>)
 801f7a6:	f000 fb59 	bl	801fe5c <__assert_func>
 801f7aa:	2301      	movs	r3, #1
 801f7ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f7b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7b4:	bfa4      	itt	ge
 801f7b6:	463b      	movge	r3, r7
 801f7b8:	4627      	movge	r7, r4
 801f7ba:	4630      	mov	r0, r6
 801f7bc:	6879      	ldr	r1, [r7, #4]
 801f7be:	bfa6      	itte	ge
 801f7c0:	461c      	movge	r4, r3
 801f7c2:	2500      	movge	r5, #0
 801f7c4:	2501      	movlt	r5, #1
 801f7c6:	f7ff fcf5 	bl	801f1b4 <_Balloc>
 801f7ca:	b920      	cbnz	r0, 801f7d6 <__mdiff+0x5a>
 801f7cc:	4b2d      	ldr	r3, [pc, #180]	; (801f884 <__mdiff+0x108>)
 801f7ce:	4602      	mov	r2, r0
 801f7d0:	f44f 7110 	mov.w	r1, #576	; 0x240
 801f7d4:	e7e6      	b.n	801f7a4 <__mdiff+0x28>
 801f7d6:	693e      	ldr	r6, [r7, #16]
 801f7d8:	60c5      	str	r5, [r0, #12]
 801f7da:	6925      	ldr	r5, [r4, #16]
 801f7dc:	f107 0114 	add.w	r1, r7, #20
 801f7e0:	f104 0914 	add.w	r9, r4, #20
 801f7e4:	f100 0e14 	add.w	lr, r0, #20
 801f7e8:	f107 0210 	add.w	r2, r7, #16
 801f7ec:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801f7f0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801f7f4:	46f2      	mov	sl, lr
 801f7f6:	2700      	movs	r7, #0
 801f7f8:	f859 3b04 	ldr.w	r3, [r9], #4
 801f7fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801f800:	fa1f f883 	uxth.w	r8, r3
 801f804:	fa17 f78b 	uxtah	r7, r7, fp
 801f808:	0c1b      	lsrs	r3, r3, #16
 801f80a:	eba7 0808 	sub.w	r8, r7, r8
 801f80e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801f812:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801f816:	fa1f f888 	uxth.w	r8, r8
 801f81a:	141f      	asrs	r7, r3, #16
 801f81c:	454d      	cmp	r5, r9
 801f81e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801f822:	f84a 3b04 	str.w	r3, [sl], #4
 801f826:	d8e7      	bhi.n	801f7f8 <__mdiff+0x7c>
 801f828:	1b2b      	subs	r3, r5, r4
 801f82a:	3b15      	subs	r3, #21
 801f82c:	f023 0303 	bic.w	r3, r3, #3
 801f830:	3304      	adds	r3, #4
 801f832:	3415      	adds	r4, #21
 801f834:	42a5      	cmp	r5, r4
 801f836:	bf38      	it	cc
 801f838:	2304      	movcc	r3, #4
 801f83a:	4419      	add	r1, r3
 801f83c:	4473      	add	r3, lr
 801f83e:	469e      	mov	lr, r3
 801f840:	460d      	mov	r5, r1
 801f842:	4565      	cmp	r5, ip
 801f844:	d30e      	bcc.n	801f864 <__mdiff+0xe8>
 801f846:	f10c 0203 	add.w	r2, ip, #3
 801f84a:	1a52      	subs	r2, r2, r1
 801f84c:	f022 0203 	bic.w	r2, r2, #3
 801f850:	3903      	subs	r1, #3
 801f852:	458c      	cmp	ip, r1
 801f854:	bf38      	it	cc
 801f856:	2200      	movcc	r2, #0
 801f858:	441a      	add	r2, r3
 801f85a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801f85e:	b17b      	cbz	r3, 801f880 <__mdiff+0x104>
 801f860:	6106      	str	r6, [r0, #16]
 801f862:	e7a5      	b.n	801f7b0 <__mdiff+0x34>
 801f864:	f855 8b04 	ldr.w	r8, [r5], #4
 801f868:	fa17 f488 	uxtah	r4, r7, r8
 801f86c:	1422      	asrs	r2, r4, #16
 801f86e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801f872:	b2a4      	uxth	r4, r4
 801f874:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801f878:	f84e 4b04 	str.w	r4, [lr], #4
 801f87c:	1417      	asrs	r7, r2, #16
 801f87e:	e7e0      	b.n	801f842 <__mdiff+0xc6>
 801f880:	3e01      	subs	r6, #1
 801f882:	e7ea      	b.n	801f85a <__mdiff+0xde>
 801f884:	08022aa4 	.word	0x08022aa4
 801f888:	08022b34 	.word	0x08022b34

0801f88c <__ulp>:
 801f88c:	b082      	sub	sp, #8
 801f88e:	ed8d 0b00 	vstr	d0, [sp]
 801f892:	9b01      	ldr	r3, [sp, #4]
 801f894:	4912      	ldr	r1, [pc, #72]	; (801f8e0 <__ulp+0x54>)
 801f896:	4019      	ands	r1, r3
 801f898:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801f89c:	2900      	cmp	r1, #0
 801f89e:	dd05      	ble.n	801f8ac <__ulp+0x20>
 801f8a0:	2200      	movs	r2, #0
 801f8a2:	460b      	mov	r3, r1
 801f8a4:	ec43 2b10 	vmov	d0, r2, r3
 801f8a8:	b002      	add	sp, #8
 801f8aa:	4770      	bx	lr
 801f8ac:	4249      	negs	r1, r1
 801f8ae:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801f8b2:	ea4f 5021 	mov.w	r0, r1, asr #20
 801f8b6:	f04f 0200 	mov.w	r2, #0
 801f8ba:	f04f 0300 	mov.w	r3, #0
 801f8be:	da04      	bge.n	801f8ca <__ulp+0x3e>
 801f8c0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801f8c4:	fa41 f300 	asr.w	r3, r1, r0
 801f8c8:	e7ec      	b.n	801f8a4 <__ulp+0x18>
 801f8ca:	f1a0 0114 	sub.w	r1, r0, #20
 801f8ce:	291e      	cmp	r1, #30
 801f8d0:	bfda      	itte	le
 801f8d2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801f8d6:	fa20 f101 	lsrle.w	r1, r0, r1
 801f8da:	2101      	movgt	r1, #1
 801f8dc:	460a      	mov	r2, r1
 801f8de:	e7e1      	b.n	801f8a4 <__ulp+0x18>
 801f8e0:	7ff00000 	.word	0x7ff00000

0801f8e4 <__b2d>:
 801f8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f8e6:	6905      	ldr	r5, [r0, #16]
 801f8e8:	f100 0714 	add.w	r7, r0, #20
 801f8ec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801f8f0:	1f2e      	subs	r6, r5, #4
 801f8f2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801f8f6:	4620      	mov	r0, r4
 801f8f8:	f7ff fd52 	bl	801f3a0 <__hi0bits>
 801f8fc:	f1c0 0320 	rsb	r3, r0, #32
 801f900:	280a      	cmp	r0, #10
 801f902:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801f980 <__b2d+0x9c>
 801f906:	600b      	str	r3, [r1, #0]
 801f908:	dc14      	bgt.n	801f934 <__b2d+0x50>
 801f90a:	f1c0 0e0b 	rsb	lr, r0, #11
 801f90e:	fa24 f10e 	lsr.w	r1, r4, lr
 801f912:	42b7      	cmp	r7, r6
 801f914:	ea41 030c 	orr.w	r3, r1, ip
 801f918:	bf34      	ite	cc
 801f91a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f91e:	2100      	movcs	r1, #0
 801f920:	3015      	adds	r0, #21
 801f922:	fa04 f000 	lsl.w	r0, r4, r0
 801f926:	fa21 f10e 	lsr.w	r1, r1, lr
 801f92a:	ea40 0201 	orr.w	r2, r0, r1
 801f92e:	ec43 2b10 	vmov	d0, r2, r3
 801f932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f934:	42b7      	cmp	r7, r6
 801f936:	bf3a      	itte	cc
 801f938:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f93c:	f1a5 0608 	subcc.w	r6, r5, #8
 801f940:	2100      	movcs	r1, #0
 801f942:	380b      	subs	r0, #11
 801f944:	d017      	beq.n	801f976 <__b2d+0x92>
 801f946:	f1c0 0c20 	rsb	ip, r0, #32
 801f94a:	fa04 f500 	lsl.w	r5, r4, r0
 801f94e:	42be      	cmp	r6, r7
 801f950:	fa21 f40c 	lsr.w	r4, r1, ip
 801f954:	ea45 0504 	orr.w	r5, r5, r4
 801f958:	bf8c      	ite	hi
 801f95a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801f95e:	2400      	movls	r4, #0
 801f960:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801f964:	fa01 f000 	lsl.w	r0, r1, r0
 801f968:	fa24 f40c 	lsr.w	r4, r4, ip
 801f96c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801f970:	ea40 0204 	orr.w	r2, r0, r4
 801f974:	e7db      	b.n	801f92e <__b2d+0x4a>
 801f976:	ea44 030c 	orr.w	r3, r4, ip
 801f97a:	460a      	mov	r2, r1
 801f97c:	e7d7      	b.n	801f92e <__b2d+0x4a>
 801f97e:	bf00      	nop
 801f980:	3ff00000 	.word	0x3ff00000

0801f984 <__d2b>:
 801f984:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f988:	4689      	mov	r9, r1
 801f98a:	2101      	movs	r1, #1
 801f98c:	ec57 6b10 	vmov	r6, r7, d0
 801f990:	4690      	mov	r8, r2
 801f992:	f7ff fc0f 	bl	801f1b4 <_Balloc>
 801f996:	4604      	mov	r4, r0
 801f998:	b930      	cbnz	r0, 801f9a8 <__d2b+0x24>
 801f99a:	4602      	mov	r2, r0
 801f99c:	4b25      	ldr	r3, [pc, #148]	; (801fa34 <__d2b+0xb0>)
 801f99e:	4826      	ldr	r0, [pc, #152]	; (801fa38 <__d2b+0xb4>)
 801f9a0:	f240 310a 	movw	r1, #778	; 0x30a
 801f9a4:	f000 fa5a 	bl	801fe5c <__assert_func>
 801f9a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801f9ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f9b0:	bb35      	cbnz	r5, 801fa00 <__d2b+0x7c>
 801f9b2:	2e00      	cmp	r6, #0
 801f9b4:	9301      	str	r3, [sp, #4]
 801f9b6:	d028      	beq.n	801fa0a <__d2b+0x86>
 801f9b8:	4668      	mov	r0, sp
 801f9ba:	9600      	str	r6, [sp, #0]
 801f9bc:	f7ff fd10 	bl	801f3e0 <__lo0bits>
 801f9c0:	9900      	ldr	r1, [sp, #0]
 801f9c2:	b300      	cbz	r0, 801fa06 <__d2b+0x82>
 801f9c4:	9a01      	ldr	r2, [sp, #4]
 801f9c6:	f1c0 0320 	rsb	r3, r0, #32
 801f9ca:	fa02 f303 	lsl.w	r3, r2, r3
 801f9ce:	430b      	orrs	r3, r1
 801f9d0:	40c2      	lsrs	r2, r0
 801f9d2:	6163      	str	r3, [r4, #20]
 801f9d4:	9201      	str	r2, [sp, #4]
 801f9d6:	9b01      	ldr	r3, [sp, #4]
 801f9d8:	61a3      	str	r3, [r4, #24]
 801f9da:	2b00      	cmp	r3, #0
 801f9dc:	bf14      	ite	ne
 801f9de:	2202      	movne	r2, #2
 801f9e0:	2201      	moveq	r2, #1
 801f9e2:	6122      	str	r2, [r4, #16]
 801f9e4:	b1d5      	cbz	r5, 801fa1c <__d2b+0x98>
 801f9e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801f9ea:	4405      	add	r5, r0
 801f9ec:	f8c9 5000 	str.w	r5, [r9]
 801f9f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f9f4:	f8c8 0000 	str.w	r0, [r8]
 801f9f8:	4620      	mov	r0, r4
 801f9fa:	b003      	add	sp, #12
 801f9fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fa00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801fa04:	e7d5      	b.n	801f9b2 <__d2b+0x2e>
 801fa06:	6161      	str	r1, [r4, #20]
 801fa08:	e7e5      	b.n	801f9d6 <__d2b+0x52>
 801fa0a:	a801      	add	r0, sp, #4
 801fa0c:	f7ff fce8 	bl	801f3e0 <__lo0bits>
 801fa10:	9b01      	ldr	r3, [sp, #4]
 801fa12:	6163      	str	r3, [r4, #20]
 801fa14:	2201      	movs	r2, #1
 801fa16:	6122      	str	r2, [r4, #16]
 801fa18:	3020      	adds	r0, #32
 801fa1a:	e7e3      	b.n	801f9e4 <__d2b+0x60>
 801fa1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801fa20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801fa24:	f8c9 0000 	str.w	r0, [r9]
 801fa28:	6918      	ldr	r0, [r3, #16]
 801fa2a:	f7ff fcb9 	bl	801f3a0 <__hi0bits>
 801fa2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801fa32:	e7df      	b.n	801f9f4 <__d2b+0x70>
 801fa34:	08022aa4 	.word	0x08022aa4
 801fa38:	08022b34 	.word	0x08022b34

0801fa3c <__ratio>:
 801fa3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa40:	4688      	mov	r8, r1
 801fa42:	4669      	mov	r1, sp
 801fa44:	4681      	mov	r9, r0
 801fa46:	f7ff ff4d 	bl	801f8e4 <__b2d>
 801fa4a:	a901      	add	r1, sp, #4
 801fa4c:	4640      	mov	r0, r8
 801fa4e:	ec55 4b10 	vmov	r4, r5, d0
 801fa52:	f7ff ff47 	bl	801f8e4 <__b2d>
 801fa56:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801fa5a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801fa5e:	eba3 0c02 	sub.w	ip, r3, r2
 801fa62:	e9dd 3200 	ldrd	r3, r2, [sp]
 801fa66:	1a9b      	subs	r3, r3, r2
 801fa68:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801fa6c:	ec51 0b10 	vmov	r0, r1, d0
 801fa70:	2b00      	cmp	r3, #0
 801fa72:	bfd6      	itet	le
 801fa74:	460a      	movle	r2, r1
 801fa76:	462a      	movgt	r2, r5
 801fa78:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801fa7c:	468b      	mov	fp, r1
 801fa7e:	462f      	mov	r7, r5
 801fa80:	bfd4      	ite	le
 801fa82:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801fa86:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801fa8a:	4620      	mov	r0, r4
 801fa8c:	ee10 2a10 	vmov	r2, s0
 801fa90:	465b      	mov	r3, fp
 801fa92:	4639      	mov	r1, r7
 801fa94:	f7e0 ff12 	bl	80008bc <__aeabi_ddiv>
 801fa98:	ec41 0b10 	vmov	d0, r0, r1
 801fa9c:	b003      	add	sp, #12
 801fa9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801faa2 <__copybits>:
 801faa2:	3901      	subs	r1, #1
 801faa4:	b570      	push	{r4, r5, r6, lr}
 801faa6:	1149      	asrs	r1, r1, #5
 801faa8:	6914      	ldr	r4, [r2, #16]
 801faaa:	3101      	adds	r1, #1
 801faac:	f102 0314 	add.w	r3, r2, #20
 801fab0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801fab4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801fab8:	1f05      	subs	r5, r0, #4
 801faba:	42a3      	cmp	r3, r4
 801fabc:	d30c      	bcc.n	801fad8 <__copybits+0x36>
 801fabe:	1aa3      	subs	r3, r4, r2
 801fac0:	3b11      	subs	r3, #17
 801fac2:	f023 0303 	bic.w	r3, r3, #3
 801fac6:	3211      	adds	r2, #17
 801fac8:	42a2      	cmp	r2, r4
 801faca:	bf88      	it	hi
 801facc:	2300      	movhi	r3, #0
 801face:	4418      	add	r0, r3
 801fad0:	2300      	movs	r3, #0
 801fad2:	4288      	cmp	r0, r1
 801fad4:	d305      	bcc.n	801fae2 <__copybits+0x40>
 801fad6:	bd70      	pop	{r4, r5, r6, pc}
 801fad8:	f853 6b04 	ldr.w	r6, [r3], #4
 801fadc:	f845 6f04 	str.w	r6, [r5, #4]!
 801fae0:	e7eb      	b.n	801faba <__copybits+0x18>
 801fae2:	f840 3b04 	str.w	r3, [r0], #4
 801fae6:	e7f4      	b.n	801fad2 <__copybits+0x30>

0801fae8 <__any_on>:
 801fae8:	f100 0214 	add.w	r2, r0, #20
 801faec:	6900      	ldr	r0, [r0, #16]
 801faee:	114b      	asrs	r3, r1, #5
 801faf0:	4298      	cmp	r0, r3
 801faf2:	b510      	push	{r4, lr}
 801faf4:	db11      	blt.n	801fb1a <__any_on+0x32>
 801faf6:	dd0a      	ble.n	801fb0e <__any_on+0x26>
 801faf8:	f011 011f 	ands.w	r1, r1, #31
 801fafc:	d007      	beq.n	801fb0e <__any_on+0x26>
 801fafe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801fb02:	fa24 f001 	lsr.w	r0, r4, r1
 801fb06:	fa00 f101 	lsl.w	r1, r0, r1
 801fb0a:	428c      	cmp	r4, r1
 801fb0c:	d10b      	bne.n	801fb26 <__any_on+0x3e>
 801fb0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801fb12:	4293      	cmp	r3, r2
 801fb14:	d803      	bhi.n	801fb1e <__any_on+0x36>
 801fb16:	2000      	movs	r0, #0
 801fb18:	bd10      	pop	{r4, pc}
 801fb1a:	4603      	mov	r3, r0
 801fb1c:	e7f7      	b.n	801fb0e <__any_on+0x26>
 801fb1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801fb22:	2900      	cmp	r1, #0
 801fb24:	d0f5      	beq.n	801fb12 <__any_on+0x2a>
 801fb26:	2001      	movs	r0, #1
 801fb28:	e7f6      	b.n	801fb18 <__any_on+0x30>

0801fb2a <_calloc_r>:
 801fb2a:	b513      	push	{r0, r1, r4, lr}
 801fb2c:	434a      	muls	r2, r1
 801fb2e:	4611      	mov	r1, r2
 801fb30:	9201      	str	r2, [sp, #4]
 801fb32:	f7fc fc87 	bl	801c444 <_malloc_r>
 801fb36:	4604      	mov	r4, r0
 801fb38:	b118      	cbz	r0, 801fb42 <_calloc_r+0x18>
 801fb3a:	9a01      	ldr	r2, [sp, #4]
 801fb3c:	2100      	movs	r1, #0
 801fb3e:	f7fc fc29 	bl	801c394 <memset>
 801fb42:	4620      	mov	r0, r4
 801fb44:	b002      	add	sp, #8
 801fb46:	bd10      	pop	{r4, pc}

0801fb48 <__ssputs_r>:
 801fb48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fb4c:	688e      	ldr	r6, [r1, #8]
 801fb4e:	429e      	cmp	r6, r3
 801fb50:	4682      	mov	sl, r0
 801fb52:	460c      	mov	r4, r1
 801fb54:	4690      	mov	r8, r2
 801fb56:	461f      	mov	r7, r3
 801fb58:	d838      	bhi.n	801fbcc <__ssputs_r+0x84>
 801fb5a:	898a      	ldrh	r2, [r1, #12]
 801fb5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801fb60:	d032      	beq.n	801fbc8 <__ssputs_r+0x80>
 801fb62:	6825      	ldr	r5, [r4, #0]
 801fb64:	6909      	ldr	r1, [r1, #16]
 801fb66:	eba5 0901 	sub.w	r9, r5, r1
 801fb6a:	6965      	ldr	r5, [r4, #20]
 801fb6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fb70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801fb74:	3301      	adds	r3, #1
 801fb76:	444b      	add	r3, r9
 801fb78:	106d      	asrs	r5, r5, #1
 801fb7a:	429d      	cmp	r5, r3
 801fb7c:	bf38      	it	cc
 801fb7e:	461d      	movcc	r5, r3
 801fb80:	0553      	lsls	r3, r2, #21
 801fb82:	d531      	bpl.n	801fbe8 <__ssputs_r+0xa0>
 801fb84:	4629      	mov	r1, r5
 801fb86:	f7fc fc5d 	bl	801c444 <_malloc_r>
 801fb8a:	4606      	mov	r6, r0
 801fb8c:	b950      	cbnz	r0, 801fba4 <__ssputs_r+0x5c>
 801fb8e:	230c      	movs	r3, #12
 801fb90:	f8ca 3000 	str.w	r3, [sl]
 801fb94:	89a3      	ldrh	r3, [r4, #12]
 801fb96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fb9a:	81a3      	strh	r3, [r4, #12]
 801fb9c:	f04f 30ff 	mov.w	r0, #4294967295
 801fba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fba4:	6921      	ldr	r1, [r4, #16]
 801fba6:	464a      	mov	r2, r9
 801fba8:	f7fc fbe6 	bl	801c378 <memcpy>
 801fbac:	89a3      	ldrh	r3, [r4, #12]
 801fbae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801fbb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fbb6:	81a3      	strh	r3, [r4, #12]
 801fbb8:	6126      	str	r6, [r4, #16]
 801fbba:	6165      	str	r5, [r4, #20]
 801fbbc:	444e      	add	r6, r9
 801fbbe:	eba5 0509 	sub.w	r5, r5, r9
 801fbc2:	6026      	str	r6, [r4, #0]
 801fbc4:	60a5      	str	r5, [r4, #8]
 801fbc6:	463e      	mov	r6, r7
 801fbc8:	42be      	cmp	r6, r7
 801fbca:	d900      	bls.n	801fbce <__ssputs_r+0x86>
 801fbcc:	463e      	mov	r6, r7
 801fbce:	4632      	mov	r2, r6
 801fbd0:	6820      	ldr	r0, [r4, #0]
 801fbd2:	4641      	mov	r1, r8
 801fbd4:	f000 f975 	bl	801fec2 <memmove>
 801fbd8:	68a3      	ldr	r3, [r4, #8]
 801fbda:	6822      	ldr	r2, [r4, #0]
 801fbdc:	1b9b      	subs	r3, r3, r6
 801fbde:	4432      	add	r2, r6
 801fbe0:	60a3      	str	r3, [r4, #8]
 801fbe2:	6022      	str	r2, [r4, #0]
 801fbe4:	2000      	movs	r0, #0
 801fbe6:	e7db      	b.n	801fba0 <__ssputs_r+0x58>
 801fbe8:	462a      	mov	r2, r5
 801fbea:	f000 f984 	bl	801fef6 <_realloc_r>
 801fbee:	4606      	mov	r6, r0
 801fbf0:	2800      	cmp	r0, #0
 801fbf2:	d1e1      	bne.n	801fbb8 <__ssputs_r+0x70>
 801fbf4:	6921      	ldr	r1, [r4, #16]
 801fbf6:	4650      	mov	r0, sl
 801fbf8:	f7fc fbd4 	bl	801c3a4 <_free_r>
 801fbfc:	e7c7      	b.n	801fb8e <__ssputs_r+0x46>
	...

0801fc00 <_svfiprintf_r>:
 801fc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc04:	4698      	mov	r8, r3
 801fc06:	898b      	ldrh	r3, [r1, #12]
 801fc08:	061b      	lsls	r3, r3, #24
 801fc0a:	b09d      	sub	sp, #116	; 0x74
 801fc0c:	4607      	mov	r7, r0
 801fc0e:	460d      	mov	r5, r1
 801fc10:	4614      	mov	r4, r2
 801fc12:	d50e      	bpl.n	801fc32 <_svfiprintf_r+0x32>
 801fc14:	690b      	ldr	r3, [r1, #16]
 801fc16:	b963      	cbnz	r3, 801fc32 <_svfiprintf_r+0x32>
 801fc18:	2140      	movs	r1, #64	; 0x40
 801fc1a:	f7fc fc13 	bl	801c444 <_malloc_r>
 801fc1e:	6028      	str	r0, [r5, #0]
 801fc20:	6128      	str	r0, [r5, #16]
 801fc22:	b920      	cbnz	r0, 801fc2e <_svfiprintf_r+0x2e>
 801fc24:	230c      	movs	r3, #12
 801fc26:	603b      	str	r3, [r7, #0]
 801fc28:	f04f 30ff 	mov.w	r0, #4294967295
 801fc2c:	e0d1      	b.n	801fdd2 <_svfiprintf_r+0x1d2>
 801fc2e:	2340      	movs	r3, #64	; 0x40
 801fc30:	616b      	str	r3, [r5, #20]
 801fc32:	2300      	movs	r3, #0
 801fc34:	9309      	str	r3, [sp, #36]	; 0x24
 801fc36:	2320      	movs	r3, #32
 801fc38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fc3c:	f8cd 800c 	str.w	r8, [sp, #12]
 801fc40:	2330      	movs	r3, #48	; 0x30
 801fc42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801fdec <_svfiprintf_r+0x1ec>
 801fc46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fc4a:	f04f 0901 	mov.w	r9, #1
 801fc4e:	4623      	mov	r3, r4
 801fc50:	469a      	mov	sl, r3
 801fc52:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fc56:	b10a      	cbz	r2, 801fc5c <_svfiprintf_r+0x5c>
 801fc58:	2a25      	cmp	r2, #37	; 0x25
 801fc5a:	d1f9      	bne.n	801fc50 <_svfiprintf_r+0x50>
 801fc5c:	ebba 0b04 	subs.w	fp, sl, r4
 801fc60:	d00b      	beq.n	801fc7a <_svfiprintf_r+0x7a>
 801fc62:	465b      	mov	r3, fp
 801fc64:	4622      	mov	r2, r4
 801fc66:	4629      	mov	r1, r5
 801fc68:	4638      	mov	r0, r7
 801fc6a:	f7ff ff6d 	bl	801fb48 <__ssputs_r>
 801fc6e:	3001      	adds	r0, #1
 801fc70:	f000 80aa 	beq.w	801fdc8 <_svfiprintf_r+0x1c8>
 801fc74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fc76:	445a      	add	r2, fp
 801fc78:	9209      	str	r2, [sp, #36]	; 0x24
 801fc7a:	f89a 3000 	ldrb.w	r3, [sl]
 801fc7e:	2b00      	cmp	r3, #0
 801fc80:	f000 80a2 	beq.w	801fdc8 <_svfiprintf_r+0x1c8>
 801fc84:	2300      	movs	r3, #0
 801fc86:	f04f 32ff 	mov.w	r2, #4294967295
 801fc8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fc8e:	f10a 0a01 	add.w	sl, sl, #1
 801fc92:	9304      	str	r3, [sp, #16]
 801fc94:	9307      	str	r3, [sp, #28]
 801fc96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fc9a:	931a      	str	r3, [sp, #104]	; 0x68
 801fc9c:	4654      	mov	r4, sl
 801fc9e:	2205      	movs	r2, #5
 801fca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fca4:	4851      	ldr	r0, [pc, #324]	; (801fdec <_svfiprintf_r+0x1ec>)
 801fca6:	f7e0 fad3 	bl	8000250 <memchr>
 801fcaa:	9a04      	ldr	r2, [sp, #16]
 801fcac:	b9d8      	cbnz	r0, 801fce6 <_svfiprintf_r+0xe6>
 801fcae:	06d0      	lsls	r0, r2, #27
 801fcb0:	bf44      	itt	mi
 801fcb2:	2320      	movmi	r3, #32
 801fcb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fcb8:	0711      	lsls	r1, r2, #28
 801fcba:	bf44      	itt	mi
 801fcbc:	232b      	movmi	r3, #43	; 0x2b
 801fcbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fcc2:	f89a 3000 	ldrb.w	r3, [sl]
 801fcc6:	2b2a      	cmp	r3, #42	; 0x2a
 801fcc8:	d015      	beq.n	801fcf6 <_svfiprintf_r+0xf6>
 801fcca:	9a07      	ldr	r2, [sp, #28]
 801fccc:	4654      	mov	r4, sl
 801fcce:	2000      	movs	r0, #0
 801fcd0:	f04f 0c0a 	mov.w	ip, #10
 801fcd4:	4621      	mov	r1, r4
 801fcd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fcda:	3b30      	subs	r3, #48	; 0x30
 801fcdc:	2b09      	cmp	r3, #9
 801fcde:	d94e      	bls.n	801fd7e <_svfiprintf_r+0x17e>
 801fce0:	b1b0      	cbz	r0, 801fd10 <_svfiprintf_r+0x110>
 801fce2:	9207      	str	r2, [sp, #28]
 801fce4:	e014      	b.n	801fd10 <_svfiprintf_r+0x110>
 801fce6:	eba0 0308 	sub.w	r3, r0, r8
 801fcea:	fa09 f303 	lsl.w	r3, r9, r3
 801fcee:	4313      	orrs	r3, r2
 801fcf0:	9304      	str	r3, [sp, #16]
 801fcf2:	46a2      	mov	sl, r4
 801fcf4:	e7d2      	b.n	801fc9c <_svfiprintf_r+0x9c>
 801fcf6:	9b03      	ldr	r3, [sp, #12]
 801fcf8:	1d19      	adds	r1, r3, #4
 801fcfa:	681b      	ldr	r3, [r3, #0]
 801fcfc:	9103      	str	r1, [sp, #12]
 801fcfe:	2b00      	cmp	r3, #0
 801fd00:	bfbb      	ittet	lt
 801fd02:	425b      	neglt	r3, r3
 801fd04:	f042 0202 	orrlt.w	r2, r2, #2
 801fd08:	9307      	strge	r3, [sp, #28]
 801fd0a:	9307      	strlt	r3, [sp, #28]
 801fd0c:	bfb8      	it	lt
 801fd0e:	9204      	strlt	r2, [sp, #16]
 801fd10:	7823      	ldrb	r3, [r4, #0]
 801fd12:	2b2e      	cmp	r3, #46	; 0x2e
 801fd14:	d10c      	bne.n	801fd30 <_svfiprintf_r+0x130>
 801fd16:	7863      	ldrb	r3, [r4, #1]
 801fd18:	2b2a      	cmp	r3, #42	; 0x2a
 801fd1a:	d135      	bne.n	801fd88 <_svfiprintf_r+0x188>
 801fd1c:	9b03      	ldr	r3, [sp, #12]
 801fd1e:	1d1a      	adds	r2, r3, #4
 801fd20:	681b      	ldr	r3, [r3, #0]
 801fd22:	9203      	str	r2, [sp, #12]
 801fd24:	2b00      	cmp	r3, #0
 801fd26:	bfb8      	it	lt
 801fd28:	f04f 33ff 	movlt.w	r3, #4294967295
 801fd2c:	3402      	adds	r4, #2
 801fd2e:	9305      	str	r3, [sp, #20]
 801fd30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801fdfc <_svfiprintf_r+0x1fc>
 801fd34:	7821      	ldrb	r1, [r4, #0]
 801fd36:	2203      	movs	r2, #3
 801fd38:	4650      	mov	r0, sl
 801fd3a:	f7e0 fa89 	bl	8000250 <memchr>
 801fd3e:	b140      	cbz	r0, 801fd52 <_svfiprintf_r+0x152>
 801fd40:	2340      	movs	r3, #64	; 0x40
 801fd42:	eba0 000a 	sub.w	r0, r0, sl
 801fd46:	fa03 f000 	lsl.w	r0, r3, r0
 801fd4a:	9b04      	ldr	r3, [sp, #16]
 801fd4c:	4303      	orrs	r3, r0
 801fd4e:	3401      	adds	r4, #1
 801fd50:	9304      	str	r3, [sp, #16]
 801fd52:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fd56:	4826      	ldr	r0, [pc, #152]	; (801fdf0 <_svfiprintf_r+0x1f0>)
 801fd58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fd5c:	2206      	movs	r2, #6
 801fd5e:	f7e0 fa77 	bl	8000250 <memchr>
 801fd62:	2800      	cmp	r0, #0
 801fd64:	d038      	beq.n	801fdd8 <_svfiprintf_r+0x1d8>
 801fd66:	4b23      	ldr	r3, [pc, #140]	; (801fdf4 <_svfiprintf_r+0x1f4>)
 801fd68:	bb1b      	cbnz	r3, 801fdb2 <_svfiprintf_r+0x1b2>
 801fd6a:	9b03      	ldr	r3, [sp, #12]
 801fd6c:	3307      	adds	r3, #7
 801fd6e:	f023 0307 	bic.w	r3, r3, #7
 801fd72:	3308      	adds	r3, #8
 801fd74:	9303      	str	r3, [sp, #12]
 801fd76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd78:	4433      	add	r3, r6
 801fd7a:	9309      	str	r3, [sp, #36]	; 0x24
 801fd7c:	e767      	b.n	801fc4e <_svfiprintf_r+0x4e>
 801fd7e:	fb0c 3202 	mla	r2, ip, r2, r3
 801fd82:	460c      	mov	r4, r1
 801fd84:	2001      	movs	r0, #1
 801fd86:	e7a5      	b.n	801fcd4 <_svfiprintf_r+0xd4>
 801fd88:	2300      	movs	r3, #0
 801fd8a:	3401      	adds	r4, #1
 801fd8c:	9305      	str	r3, [sp, #20]
 801fd8e:	4619      	mov	r1, r3
 801fd90:	f04f 0c0a 	mov.w	ip, #10
 801fd94:	4620      	mov	r0, r4
 801fd96:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fd9a:	3a30      	subs	r2, #48	; 0x30
 801fd9c:	2a09      	cmp	r2, #9
 801fd9e:	d903      	bls.n	801fda8 <_svfiprintf_r+0x1a8>
 801fda0:	2b00      	cmp	r3, #0
 801fda2:	d0c5      	beq.n	801fd30 <_svfiprintf_r+0x130>
 801fda4:	9105      	str	r1, [sp, #20]
 801fda6:	e7c3      	b.n	801fd30 <_svfiprintf_r+0x130>
 801fda8:	fb0c 2101 	mla	r1, ip, r1, r2
 801fdac:	4604      	mov	r4, r0
 801fdae:	2301      	movs	r3, #1
 801fdb0:	e7f0      	b.n	801fd94 <_svfiprintf_r+0x194>
 801fdb2:	ab03      	add	r3, sp, #12
 801fdb4:	9300      	str	r3, [sp, #0]
 801fdb6:	462a      	mov	r2, r5
 801fdb8:	4b0f      	ldr	r3, [pc, #60]	; (801fdf8 <_svfiprintf_r+0x1f8>)
 801fdba:	a904      	add	r1, sp, #16
 801fdbc:	4638      	mov	r0, r7
 801fdbe:	f7fc fc3b 	bl	801c638 <_printf_float>
 801fdc2:	1c42      	adds	r2, r0, #1
 801fdc4:	4606      	mov	r6, r0
 801fdc6:	d1d6      	bne.n	801fd76 <_svfiprintf_r+0x176>
 801fdc8:	89ab      	ldrh	r3, [r5, #12]
 801fdca:	065b      	lsls	r3, r3, #25
 801fdcc:	f53f af2c 	bmi.w	801fc28 <_svfiprintf_r+0x28>
 801fdd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fdd2:	b01d      	add	sp, #116	; 0x74
 801fdd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdd8:	ab03      	add	r3, sp, #12
 801fdda:	9300      	str	r3, [sp, #0]
 801fddc:	462a      	mov	r2, r5
 801fdde:	4b06      	ldr	r3, [pc, #24]	; (801fdf8 <_svfiprintf_r+0x1f8>)
 801fde0:	a904      	add	r1, sp, #16
 801fde2:	4638      	mov	r0, r7
 801fde4:	f7fc fecc 	bl	801cb80 <_printf_i>
 801fde8:	e7eb      	b.n	801fdc2 <_svfiprintf_r+0x1c2>
 801fdea:	bf00      	nop
 801fdec:	08022c94 	.word	0x08022c94
 801fdf0:	08022c9e 	.word	0x08022c9e
 801fdf4:	0801c639 	.word	0x0801c639
 801fdf8:	0801fb49 	.word	0x0801fb49
 801fdfc:	08022c9a 	.word	0x08022c9a

0801fe00 <nan>:
 801fe00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801fe08 <nan+0x8>
 801fe04:	4770      	bx	lr
 801fe06:	bf00      	nop
 801fe08:	00000000 	.word	0x00000000
 801fe0c:	7ff80000 	.word	0x7ff80000

0801fe10 <nanf>:
 801fe10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801fe18 <nanf+0x8>
 801fe14:	4770      	bx	lr
 801fe16:	bf00      	nop
 801fe18:	7fc00000 	.word	0x7fc00000

0801fe1c <strncmp>:
 801fe1c:	b510      	push	{r4, lr}
 801fe1e:	b16a      	cbz	r2, 801fe3c <strncmp+0x20>
 801fe20:	3901      	subs	r1, #1
 801fe22:	1884      	adds	r4, r0, r2
 801fe24:	f810 3b01 	ldrb.w	r3, [r0], #1
 801fe28:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801fe2c:	4293      	cmp	r3, r2
 801fe2e:	d103      	bne.n	801fe38 <strncmp+0x1c>
 801fe30:	42a0      	cmp	r0, r4
 801fe32:	d001      	beq.n	801fe38 <strncmp+0x1c>
 801fe34:	2b00      	cmp	r3, #0
 801fe36:	d1f5      	bne.n	801fe24 <strncmp+0x8>
 801fe38:	1a98      	subs	r0, r3, r2
 801fe3a:	bd10      	pop	{r4, pc}
 801fe3c:	4610      	mov	r0, r2
 801fe3e:	e7fc      	b.n	801fe3a <strncmp+0x1e>

0801fe40 <__ascii_wctomb>:
 801fe40:	b149      	cbz	r1, 801fe56 <__ascii_wctomb+0x16>
 801fe42:	2aff      	cmp	r2, #255	; 0xff
 801fe44:	bf85      	ittet	hi
 801fe46:	238a      	movhi	r3, #138	; 0x8a
 801fe48:	6003      	strhi	r3, [r0, #0]
 801fe4a:	700a      	strbls	r2, [r1, #0]
 801fe4c:	f04f 30ff 	movhi.w	r0, #4294967295
 801fe50:	bf98      	it	ls
 801fe52:	2001      	movls	r0, #1
 801fe54:	4770      	bx	lr
 801fe56:	4608      	mov	r0, r1
 801fe58:	4770      	bx	lr
	...

0801fe5c <__assert_func>:
 801fe5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fe5e:	4614      	mov	r4, r2
 801fe60:	461a      	mov	r2, r3
 801fe62:	4b09      	ldr	r3, [pc, #36]	; (801fe88 <__assert_func+0x2c>)
 801fe64:	681b      	ldr	r3, [r3, #0]
 801fe66:	4605      	mov	r5, r0
 801fe68:	68d8      	ldr	r0, [r3, #12]
 801fe6a:	b14c      	cbz	r4, 801fe80 <__assert_func+0x24>
 801fe6c:	4b07      	ldr	r3, [pc, #28]	; (801fe8c <__assert_func+0x30>)
 801fe6e:	9100      	str	r1, [sp, #0]
 801fe70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fe74:	4906      	ldr	r1, [pc, #24]	; (801fe90 <__assert_func+0x34>)
 801fe76:	462b      	mov	r3, r5
 801fe78:	f000 f80e 	bl	801fe98 <fiprintf>
 801fe7c:	f000 fa7a 	bl	8020374 <abort>
 801fe80:	4b04      	ldr	r3, [pc, #16]	; (801fe94 <__assert_func+0x38>)
 801fe82:	461c      	mov	r4, r3
 801fe84:	e7f3      	b.n	801fe6e <__assert_func+0x12>
 801fe86:	bf00      	nop
 801fe88:	20000398 	.word	0x20000398
 801fe8c:	08022ca5 	.word	0x08022ca5
 801fe90:	08022cb2 	.word	0x08022cb2
 801fe94:	08022ce0 	.word	0x08022ce0

0801fe98 <fiprintf>:
 801fe98:	b40e      	push	{r1, r2, r3}
 801fe9a:	b503      	push	{r0, r1, lr}
 801fe9c:	4601      	mov	r1, r0
 801fe9e:	ab03      	add	r3, sp, #12
 801fea0:	4805      	ldr	r0, [pc, #20]	; (801feb8 <fiprintf+0x20>)
 801fea2:	f853 2b04 	ldr.w	r2, [r3], #4
 801fea6:	6800      	ldr	r0, [r0, #0]
 801fea8:	9301      	str	r3, [sp, #4]
 801feaa:	f000 f873 	bl	801ff94 <_vfiprintf_r>
 801feae:	b002      	add	sp, #8
 801feb0:	f85d eb04 	ldr.w	lr, [sp], #4
 801feb4:	b003      	add	sp, #12
 801feb6:	4770      	bx	lr
 801feb8:	20000398 	.word	0x20000398

0801febc <__retarget_lock_init_recursive>:
 801febc:	4770      	bx	lr

0801febe <__retarget_lock_acquire_recursive>:
 801febe:	4770      	bx	lr

0801fec0 <__retarget_lock_release_recursive>:
 801fec0:	4770      	bx	lr

0801fec2 <memmove>:
 801fec2:	4288      	cmp	r0, r1
 801fec4:	b510      	push	{r4, lr}
 801fec6:	eb01 0402 	add.w	r4, r1, r2
 801feca:	d902      	bls.n	801fed2 <memmove+0x10>
 801fecc:	4284      	cmp	r4, r0
 801fece:	4623      	mov	r3, r4
 801fed0:	d807      	bhi.n	801fee2 <memmove+0x20>
 801fed2:	1e43      	subs	r3, r0, #1
 801fed4:	42a1      	cmp	r1, r4
 801fed6:	d008      	beq.n	801feea <memmove+0x28>
 801fed8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fedc:	f803 2f01 	strb.w	r2, [r3, #1]!
 801fee0:	e7f8      	b.n	801fed4 <memmove+0x12>
 801fee2:	4402      	add	r2, r0
 801fee4:	4601      	mov	r1, r0
 801fee6:	428a      	cmp	r2, r1
 801fee8:	d100      	bne.n	801feec <memmove+0x2a>
 801feea:	bd10      	pop	{r4, pc}
 801feec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801fef0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801fef4:	e7f7      	b.n	801fee6 <memmove+0x24>

0801fef6 <_realloc_r>:
 801fef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fef8:	4607      	mov	r7, r0
 801fefa:	4614      	mov	r4, r2
 801fefc:	460e      	mov	r6, r1
 801fefe:	b921      	cbnz	r1, 801ff0a <_realloc_r+0x14>
 801ff00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ff04:	4611      	mov	r1, r2
 801ff06:	f7fc ba9d 	b.w	801c444 <_malloc_r>
 801ff0a:	b922      	cbnz	r2, 801ff16 <_realloc_r+0x20>
 801ff0c:	f7fc fa4a 	bl	801c3a4 <_free_r>
 801ff10:	4625      	mov	r5, r4
 801ff12:	4628      	mov	r0, r5
 801ff14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ff16:	f000 fc51 	bl	80207bc <_malloc_usable_size_r>
 801ff1a:	42a0      	cmp	r0, r4
 801ff1c:	d20f      	bcs.n	801ff3e <_realloc_r+0x48>
 801ff1e:	4621      	mov	r1, r4
 801ff20:	4638      	mov	r0, r7
 801ff22:	f7fc fa8f 	bl	801c444 <_malloc_r>
 801ff26:	4605      	mov	r5, r0
 801ff28:	2800      	cmp	r0, #0
 801ff2a:	d0f2      	beq.n	801ff12 <_realloc_r+0x1c>
 801ff2c:	4631      	mov	r1, r6
 801ff2e:	4622      	mov	r2, r4
 801ff30:	f7fc fa22 	bl	801c378 <memcpy>
 801ff34:	4631      	mov	r1, r6
 801ff36:	4638      	mov	r0, r7
 801ff38:	f7fc fa34 	bl	801c3a4 <_free_r>
 801ff3c:	e7e9      	b.n	801ff12 <_realloc_r+0x1c>
 801ff3e:	4635      	mov	r5, r6
 801ff40:	e7e7      	b.n	801ff12 <_realloc_r+0x1c>

0801ff42 <__sfputc_r>:
 801ff42:	6893      	ldr	r3, [r2, #8]
 801ff44:	3b01      	subs	r3, #1
 801ff46:	2b00      	cmp	r3, #0
 801ff48:	b410      	push	{r4}
 801ff4a:	6093      	str	r3, [r2, #8]
 801ff4c:	da08      	bge.n	801ff60 <__sfputc_r+0x1e>
 801ff4e:	6994      	ldr	r4, [r2, #24]
 801ff50:	42a3      	cmp	r3, r4
 801ff52:	db01      	blt.n	801ff58 <__sfputc_r+0x16>
 801ff54:	290a      	cmp	r1, #10
 801ff56:	d103      	bne.n	801ff60 <__sfputc_r+0x1e>
 801ff58:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ff5c:	f000 b94a 	b.w	80201f4 <__swbuf_r>
 801ff60:	6813      	ldr	r3, [r2, #0]
 801ff62:	1c58      	adds	r0, r3, #1
 801ff64:	6010      	str	r0, [r2, #0]
 801ff66:	7019      	strb	r1, [r3, #0]
 801ff68:	4608      	mov	r0, r1
 801ff6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ff6e:	4770      	bx	lr

0801ff70 <__sfputs_r>:
 801ff70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff72:	4606      	mov	r6, r0
 801ff74:	460f      	mov	r7, r1
 801ff76:	4614      	mov	r4, r2
 801ff78:	18d5      	adds	r5, r2, r3
 801ff7a:	42ac      	cmp	r4, r5
 801ff7c:	d101      	bne.n	801ff82 <__sfputs_r+0x12>
 801ff7e:	2000      	movs	r0, #0
 801ff80:	e007      	b.n	801ff92 <__sfputs_r+0x22>
 801ff82:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ff86:	463a      	mov	r2, r7
 801ff88:	4630      	mov	r0, r6
 801ff8a:	f7ff ffda 	bl	801ff42 <__sfputc_r>
 801ff8e:	1c43      	adds	r3, r0, #1
 801ff90:	d1f3      	bne.n	801ff7a <__sfputs_r+0xa>
 801ff92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ff94 <_vfiprintf_r>:
 801ff94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff98:	460d      	mov	r5, r1
 801ff9a:	b09d      	sub	sp, #116	; 0x74
 801ff9c:	4614      	mov	r4, r2
 801ff9e:	4698      	mov	r8, r3
 801ffa0:	4606      	mov	r6, r0
 801ffa2:	b118      	cbz	r0, 801ffac <_vfiprintf_r+0x18>
 801ffa4:	6983      	ldr	r3, [r0, #24]
 801ffa6:	b90b      	cbnz	r3, 801ffac <_vfiprintf_r+0x18>
 801ffa8:	f000 fb06 	bl	80205b8 <__sinit>
 801ffac:	4b89      	ldr	r3, [pc, #548]	; (80201d4 <_vfiprintf_r+0x240>)
 801ffae:	429d      	cmp	r5, r3
 801ffb0:	d11b      	bne.n	801ffea <_vfiprintf_r+0x56>
 801ffb2:	6875      	ldr	r5, [r6, #4]
 801ffb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ffb6:	07d9      	lsls	r1, r3, #31
 801ffb8:	d405      	bmi.n	801ffc6 <_vfiprintf_r+0x32>
 801ffba:	89ab      	ldrh	r3, [r5, #12]
 801ffbc:	059a      	lsls	r2, r3, #22
 801ffbe:	d402      	bmi.n	801ffc6 <_vfiprintf_r+0x32>
 801ffc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ffc2:	f7ff ff7c 	bl	801febe <__retarget_lock_acquire_recursive>
 801ffc6:	89ab      	ldrh	r3, [r5, #12]
 801ffc8:	071b      	lsls	r3, r3, #28
 801ffca:	d501      	bpl.n	801ffd0 <_vfiprintf_r+0x3c>
 801ffcc:	692b      	ldr	r3, [r5, #16]
 801ffce:	b9eb      	cbnz	r3, 802000c <_vfiprintf_r+0x78>
 801ffd0:	4629      	mov	r1, r5
 801ffd2:	4630      	mov	r0, r6
 801ffd4:	f000 f960 	bl	8020298 <__swsetup_r>
 801ffd8:	b1c0      	cbz	r0, 802000c <_vfiprintf_r+0x78>
 801ffda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ffdc:	07dc      	lsls	r4, r3, #31
 801ffde:	d50e      	bpl.n	801fffe <_vfiprintf_r+0x6a>
 801ffe0:	f04f 30ff 	mov.w	r0, #4294967295
 801ffe4:	b01d      	add	sp, #116	; 0x74
 801ffe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffea:	4b7b      	ldr	r3, [pc, #492]	; (80201d8 <_vfiprintf_r+0x244>)
 801ffec:	429d      	cmp	r5, r3
 801ffee:	d101      	bne.n	801fff4 <_vfiprintf_r+0x60>
 801fff0:	68b5      	ldr	r5, [r6, #8]
 801fff2:	e7df      	b.n	801ffb4 <_vfiprintf_r+0x20>
 801fff4:	4b79      	ldr	r3, [pc, #484]	; (80201dc <_vfiprintf_r+0x248>)
 801fff6:	429d      	cmp	r5, r3
 801fff8:	bf08      	it	eq
 801fffa:	68f5      	ldreq	r5, [r6, #12]
 801fffc:	e7da      	b.n	801ffb4 <_vfiprintf_r+0x20>
 801fffe:	89ab      	ldrh	r3, [r5, #12]
 8020000:	0598      	lsls	r0, r3, #22
 8020002:	d4ed      	bmi.n	801ffe0 <_vfiprintf_r+0x4c>
 8020004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020006:	f7ff ff5b 	bl	801fec0 <__retarget_lock_release_recursive>
 802000a:	e7e9      	b.n	801ffe0 <_vfiprintf_r+0x4c>
 802000c:	2300      	movs	r3, #0
 802000e:	9309      	str	r3, [sp, #36]	; 0x24
 8020010:	2320      	movs	r3, #32
 8020012:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020016:	f8cd 800c 	str.w	r8, [sp, #12]
 802001a:	2330      	movs	r3, #48	; 0x30
 802001c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80201e0 <_vfiprintf_r+0x24c>
 8020020:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020024:	f04f 0901 	mov.w	r9, #1
 8020028:	4623      	mov	r3, r4
 802002a:	469a      	mov	sl, r3
 802002c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020030:	b10a      	cbz	r2, 8020036 <_vfiprintf_r+0xa2>
 8020032:	2a25      	cmp	r2, #37	; 0x25
 8020034:	d1f9      	bne.n	802002a <_vfiprintf_r+0x96>
 8020036:	ebba 0b04 	subs.w	fp, sl, r4
 802003a:	d00b      	beq.n	8020054 <_vfiprintf_r+0xc0>
 802003c:	465b      	mov	r3, fp
 802003e:	4622      	mov	r2, r4
 8020040:	4629      	mov	r1, r5
 8020042:	4630      	mov	r0, r6
 8020044:	f7ff ff94 	bl	801ff70 <__sfputs_r>
 8020048:	3001      	adds	r0, #1
 802004a:	f000 80aa 	beq.w	80201a2 <_vfiprintf_r+0x20e>
 802004e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020050:	445a      	add	r2, fp
 8020052:	9209      	str	r2, [sp, #36]	; 0x24
 8020054:	f89a 3000 	ldrb.w	r3, [sl]
 8020058:	2b00      	cmp	r3, #0
 802005a:	f000 80a2 	beq.w	80201a2 <_vfiprintf_r+0x20e>
 802005e:	2300      	movs	r3, #0
 8020060:	f04f 32ff 	mov.w	r2, #4294967295
 8020064:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020068:	f10a 0a01 	add.w	sl, sl, #1
 802006c:	9304      	str	r3, [sp, #16]
 802006e:	9307      	str	r3, [sp, #28]
 8020070:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020074:	931a      	str	r3, [sp, #104]	; 0x68
 8020076:	4654      	mov	r4, sl
 8020078:	2205      	movs	r2, #5
 802007a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802007e:	4858      	ldr	r0, [pc, #352]	; (80201e0 <_vfiprintf_r+0x24c>)
 8020080:	f7e0 f8e6 	bl	8000250 <memchr>
 8020084:	9a04      	ldr	r2, [sp, #16]
 8020086:	b9d8      	cbnz	r0, 80200c0 <_vfiprintf_r+0x12c>
 8020088:	06d1      	lsls	r1, r2, #27
 802008a:	bf44      	itt	mi
 802008c:	2320      	movmi	r3, #32
 802008e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020092:	0713      	lsls	r3, r2, #28
 8020094:	bf44      	itt	mi
 8020096:	232b      	movmi	r3, #43	; 0x2b
 8020098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802009c:	f89a 3000 	ldrb.w	r3, [sl]
 80200a0:	2b2a      	cmp	r3, #42	; 0x2a
 80200a2:	d015      	beq.n	80200d0 <_vfiprintf_r+0x13c>
 80200a4:	9a07      	ldr	r2, [sp, #28]
 80200a6:	4654      	mov	r4, sl
 80200a8:	2000      	movs	r0, #0
 80200aa:	f04f 0c0a 	mov.w	ip, #10
 80200ae:	4621      	mov	r1, r4
 80200b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80200b4:	3b30      	subs	r3, #48	; 0x30
 80200b6:	2b09      	cmp	r3, #9
 80200b8:	d94e      	bls.n	8020158 <_vfiprintf_r+0x1c4>
 80200ba:	b1b0      	cbz	r0, 80200ea <_vfiprintf_r+0x156>
 80200bc:	9207      	str	r2, [sp, #28]
 80200be:	e014      	b.n	80200ea <_vfiprintf_r+0x156>
 80200c0:	eba0 0308 	sub.w	r3, r0, r8
 80200c4:	fa09 f303 	lsl.w	r3, r9, r3
 80200c8:	4313      	orrs	r3, r2
 80200ca:	9304      	str	r3, [sp, #16]
 80200cc:	46a2      	mov	sl, r4
 80200ce:	e7d2      	b.n	8020076 <_vfiprintf_r+0xe2>
 80200d0:	9b03      	ldr	r3, [sp, #12]
 80200d2:	1d19      	adds	r1, r3, #4
 80200d4:	681b      	ldr	r3, [r3, #0]
 80200d6:	9103      	str	r1, [sp, #12]
 80200d8:	2b00      	cmp	r3, #0
 80200da:	bfbb      	ittet	lt
 80200dc:	425b      	neglt	r3, r3
 80200de:	f042 0202 	orrlt.w	r2, r2, #2
 80200e2:	9307      	strge	r3, [sp, #28]
 80200e4:	9307      	strlt	r3, [sp, #28]
 80200e6:	bfb8      	it	lt
 80200e8:	9204      	strlt	r2, [sp, #16]
 80200ea:	7823      	ldrb	r3, [r4, #0]
 80200ec:	2b2e      	cmp	r3, #46	; 0x2e
 80200ee:	d10c      	bne.n	802010a <_vfiprintf_r+0x176>
 80200f0:	7863      	ldrb	r3, [r4, #1]
 80200f2:	2b2a      	cmp	r3, #42	; 0x2a
 80200f4:	d135      	bne.n	8020162 <_vfiprintf_r+0x1ce>
 80200f6:	9b03      	ldr	r3, [sp, #12]
 80200f8:	1d1a      	adds	r2, r3, #4
 80200fa:	681b      	ldr	r3, [r3, #0]
 80200fc:	9203      	str	r2, [sp, #12]
 80200fe:	2b00      	cmp	r3, #0
 8020100:	bfb8      	it	lt
 8020102:	f04f 33ff 	movlt.w	r3, #4294967295
 8020106:	3402      	adds	r4, #2
 8020108:	9305      	str	r3, [sp, #20]
 802010a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80201f0 <_vfiprintf_r+0x25c>
 802010e:	7821      	ldrb	r1, [r4, #0]
 8020110:	2203      	movs	r2, #3
 8020112:	4650      	mov	r0, sl
 8020114:	f7e0 f89c 	bl	8000250 <memchr>
 8020118:	b140      	cbz	r0, 802012c <_vfiprintf_r+0x198>
 802011a:	2340      	movs	r3, #64	; 0x40
 802011c:	eba0 000a 	sub.w	r0, r0, sl
 8020120:	fa03 f000 	lsl.w	r0, r3, r0
 8020124:	9b04      	ldr	r3, [sp, #16]
 8020126:	4303      	orrs	r3, r0
 8020128:	3401      	adds	r4, #1
 802012a:	9304      	str	r3, [sp, #16]
 802012c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020130:	482c      	ldr	r0, [pc, #176]	; (80201e4 <_vfiprintf_r+0x250>)
 8020132:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020136:	2206      	movs	r2, #6
 8020138:	f7e0 f88a 	bl	8000250 <memchr>
 802013c:	2800      	cmp	r0, #0
 802013e:	d03f      	beq.n	80201c0 <_vfiprintf_r+0x22c>
 8020140:	4b29      	ldr	r3, [pc, #164]	; (80201e8 <_vfiprintf_r+0x254>)
 8020142:	bb1b      	cbnz	r3, 802018c <_vfiprintf_r+0x1f8>
 8020144:	9b03      	ldr	r3, [sp, #12]
 8020146:	3307      	adds	r3, #7
 8020148:	f023 0307 	bic.w	r3, r3, #7
 802014c:	3308      	adds	r3, #8
 802014e:	9303      	str	r3, [sp, #12]
 8020150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020152:	443b      	add	r3, r7
 8020154:	9309      	str	r3, [sp, #36]	; 0x24
 8020156:	e767      	b.n	8020028 <_vfiprintf_r+0x94>
 8020158:	fb0c 3202 	mla	r2, ip, r2, r3
 802015c:	460c      	mov	r4, r1
 802015e:	2001      	movs	r0, #1
 8020160:	e7a5      	b.n	80200ae <_vfiprintf_r+0x11a>
 8020162:	2300      	movs	r3, #0
 8020164:	3401      	adds	r4, #1
 8020166:	9305      	str	r3, [sp, #20]
 8020168:	4619      	mov	r1, r3
 802016a:	f04f 0c0a 	mov.w	ip, #10
 802016e:	4620      	mov	r0, r4
 8020170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020174:	3a30      	subs	r2, #48	; 0x30
 8020176:	2a09      	cmp	r2, #9
 8020178:	d903      	bls.n	8020182 <_vfiprintf_r+0x1ee>
 802017a:	2b00      	cmp	r3, #0
 802017c:	d0c5      	beq.n	802010a <_vfiprintf_r+0x176>
 802017e:	9105      	str	r1, [sp, #20]
 8020180:	e7c3      	b.n	802010a <_vfiprintf_r+0x176>
 8020182:	fb0c 2101 	mla	r1, ip, r1, r2
 8020186:	4604      	mov	r4, r0
 8020188:	2301      	movs	r3, #1
 802018a:	e7f0      	b.n	802016e <_vfiprintf_r+0x1da>
 802018c:	ab03      	add	r3, sp, #12
 802018e:	9300      	str	r3, [sp, #0]
 8020190:	462a      	mov	r2, r5
 8020192:	4b16      	ldr	r3, [pc, #88]	; (80201ec <_vfiprintf_r+0x258>)
 8020194:	a904      	add	r1, sp, #16
 8020196:	4630      	mov	r0, r6
 8020198:	f7fc fa4e 	bl	801c638 <_printf_float>
 802019c:	4607      	mov	r7, r0
 802019e:	1c78      	adds	r0, r7, #1
 80201a0:	d1d6      	bne.n	8020150 <_vfiprintf_r+0x1bc>
 80201a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80201a4:	07d9      	lsls	r1, r3, #31
 80201a6:	d405      	bmi.n	80201b4 <_vfiprintf_r+0x220>
 80201a8:	89ab      	ldrh	r3, [r5, #12]
 80201aa:	059a      	lsls	r2, r3, #22
 80201ac:	d402      	bmi.n	80201b4 <_vfiprintf_r+0x220>
 80201ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80201b0:	f7ff fe86 	bl	801fec0 <__retarget_lock_release_recursive>
 80201b4:	89ab      	ldrh	r3, [r5, #12]
 80201b6:	065b      	lsls	r3, r3, #25
 80201b8:	f53f af12 	bmi.w	801ffe0 <_vfiprintf_r+0x4c>
 80201bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80201be:	e711      	b.n	801ffe4 <_vfiprintf_r+0x50>
 80201c0:	ab03      	add	r3, sp, #12
 80201c2:	9300      	str	r3, [sp, #0]
 80201c4:	462a      	mov	r2, r5
 80201c6:	4b09      	ldr	r3, [pc, #36]	; (80201ec <_vfiprintf_r+0x258>)
 80201c8:	a904      	add	r1, sp, #16
 80201ca:	4630      	mov	r0, r6
 80201cc:	f7fc fcd8 	bl	801cb80 <_printf_i>
 80201d0:	e7e4      	b.n	802019c <_vfiprintf_r+0x208>
 80201d2:	bf00      	nop
 80201d4:	08022d04 	.word	0x08022d04
 80201d8:	08022d24 	.word	0x08022d24
 80201dc:	08022ce4 	.word	0x08022ce4
 80201e0:	08022c94 	.word	0x08022c94
 80201e4:	08022c9e 	.word	0x08022c9e
 80201e8:	0801c639 	.word	0x0801c639
 80201ec:	0801ff71 	.word	0x0801ff71
 80201f0:	08022c9a 	.word	0x08022c9a

080201f4 <__swbuf_r>:
 80201f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80201f6:	460e      	mov	r6, r1
 80201f8:	4614      	mov	r4, r2
 80201fa:	4605      	mov	r5, r0
 80201fc:	b118      	cbz	r0, 8020206 <__swbuf_r+0x12>
 80201fe:	6983      	ldr	r3, [r0, #24]
 8020200:	b90b      	cbnz	r3, 8020206 <__swbuf_r+0x12>
 8020202:	f000 f9d9 	bl	80205b8 <__sinit>
 8020206:	4b21      	ldr	r3, [pc, #132]	; (802028c <__swbuf_r+0x98>)
 8020208:	429c      	cmp	r4, r3
 802020a:	d12b      	bne.n	8020264 <__swbuf_r+0x70>
 802020c:	686c      	ldr	r4, [r5, #4]
 802020e:	69a3      	ldr	r3, [r4, #24]
 8020210:	60a3      	str	r3, [r4, #8]
 8020212:	89a3      	ldrh	r3, [r4, #12]
 8020214:	071a      	lsls	r2, r3, #28
 8020216:	d52f      	bpl.n	8020278 <__swbuf_r+0x84>
 8020218:	6923      	ldr	r3, [r4, #16]
 802021a:	b36b      	cbz	r3, 8020278 <__swbuf_r+0x84>
 802021c:	6923      	ldr	r3, [r4, #16]
 802021e:	6820      	ldr	r0, [r4, #0]
 8020220:	1ac0      	subs	r0, r0, r3
 8020222:	6963      	ldr	r3, [r4, #20]
 8020224:	b2f6      	uxtb	r6, r6
 8020226:	4283      	cmp	r3, r0
 8020228:	4637      	mov	r7, r6
 802022a:	dc04      	bgt.n	8020236 <__swbuf_r+0x42>
 802022c:	4621      	mov	r1, r4
 802022e:	4628      	mov	r0, r5
 8020230:	f000 f92e 	bl	8020490 <_fflush_r>
 8020234:	bb30      	cbnz	r0, 8020284 <__swbuf_r+0x90>
 8020236:	68a3      	ldr	r3, [r4, #8]
 8020238:	3b01      	subs	r3, #1
 802023a:	60a3      	str	r3, [r4, #8]
 802023c:	6823      	ldr	r3, [r4, #0]
 802023e:	1c5a      	adds	r2, r3, #1
 8020240:	6022      	str	r2, [r4, #0]
 8020242:	701e      	strb	r6, [r3, #0]
 8020244:	6963      	ldr	r3, [r4, #20]
 8020246:	3001      	adds	r0, #1
 8020248:	4283      	cmp	r3, r0
 802024a:	d004      	beq.n	8020256 <__swbuf_r+0x62>
 802024c:	89a3      	ldrh	r3, [r4, #12]
 802024e:	07db      	lsls	r3, r3, #31
 8020250:	d506      	bpl.n	8020260 <__swbuf_r+0x6c>
 8020252:	2e0a      	cmp	r6, #10
 8020254:	d104      	bne.n	8020260 <__swbuf_r+0x6c>
 8020256:	4621      	mov	r1, r4
 8020258:	4628      	mov	r0, r5
 802025a:	f000 f919 	bl	8020490 <_fflush_r>
 802025e:	b988      	cbnz	r0, 8020284 <__swbuf_r+0x90>
 8020260:	4638      	mov	r0, r7
 8020262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020264:	4b0a      	ldr	r3, [pc, #40]	; (8020290 <__swbuf_r+0x9c>)
 8020266:	429c      	cmp	r4, r3
 8020268:	d101      	bne.n	802026e <__swbuf_r+0x7a>
 802026a:	68ac      	ldr	r4, [r5, #8]
 802026c:	e7cf      	b.n	802020e <__swbuf_r+0x1a>
 802026e:	4b09      	ldr	r3, [pc, #36]	; (8020294 <__swbuf_r+0xa0>)
 8020270:	429c      	cmp	r4, r3
 8020272:	bf08      	it	eq
 8020274:	68ec      	ldreq	r4, [r5, #12]
 8020276:	e7ca      	b.n	802020e <__swbuf_r+0x1a>
 8020278:	4621      	mov	r1, r4
 802027a:	4628      	mov	r0, r5
 802027c:	f000 f80c 	bl	8020298 <__swsetup_r>
 8020280:	2800      	cmp	r0, #0
 8020282:	d0cb      	beq.n	802021c <__swbuf_r+0x28>
 8020284:	f04f 37ff 	mov.w	r7, #4294967295
 8020288:	e7ea      	b.n	8020260 <__swbuf_r+0x6c>
 802028a:	bf00      	nop
 802028c:	08022d04 	.word	0x08022d04
 8020290:	08022d24 	.word	0x08022d24
 8020294:	08022ce4 	.word	0x08022ce4

08020298 <__swsetup_r>:
 8020298:	4b32      	ldr	r3, [pc, #200]	; (8020364 <__swsetup_r+0xcc>)
 802029a:	b570      	push	{r4, r5, r6, lr}
 802029c:	681d      	ldr	r5, [r3, #0]
 802029e:	4606      	mov	r6, r0
 80202a0:	460c      	mov	r4, r1
 80202a2:	b125      	cbz	r5, 80202ae <__swsetup_r+0x16>
 80202a4:	69ab      	ldr	r3, [r5, #24]
 80202a6:	b913      	cbnz	r3, 80202ae <__swsetup_r+0x16>
 80202a8:	4628      	mov	r0, r5
 80202aa:	f000 f985 	bl	80205b8 <__sinit>
 80202ae:	4b2e      	ldr	r3, [pc, #184]	; (8020368 <__swsetup_r+0xd0>)
 80202b0:	429c      	cmp	r4, r3
 80202b2:	d10f      	bne.n	80202d4 <__swsetup_r+0x3c>
 80202b4:	686c      	ldr	r4, [r5, #4]
 80202b6:	89a3      	ldrh	r3, [r4, #12]
 80202b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80202bc:	0719      	lsls	r1, r3, #28
 80202be:	d42c      	bmi.n	802031a <__swsetup_r+0x82>
 80202c0:	06dd      	lsls	r5, r3, #27
 80202c2:	d411      	bmi.n	80202e8 <__swsetup_r+0x50>
 80202c4:	2309      	movs	r3, #9
 80202c6:	6033      	str	r3, [r6, #0]
 80202c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80202cc:	81a3      	strh	r3, [r4, #12]
 80202ce:	f04f 30ff 	mov.w	r0, #4294967295
 80202d2:	e03e      	b.n	8020352 <__swsetup_r+0xba>
 80202d4:	4b25      	ldr	r3, [pc, #148]	; (802036c <__swsetup_r+0xd4>)
 80202d6:	429c      	cmp	r4, r3
 80202d8:	d101      	bne.n	80202de <__swsetup_r+0x46>
 80202da:	68ac      	ldr	r4, [r5, #8]
 80202dc:	e7eb      	b.n	80202b6 <__swsetup_r+0x1e>
 80202de:	4b24      	ldr	r3, [pc, #144]	; (8020370 <__swsetup_r+0xd8>)
 80202e0:	429c      	cmp	r4, r3
 80202e2:	bf08      	it	eq
 80202e4:	68ec      	ldreq	r4, [r5, #12]
 80202e6:	e7e6      	b.n	80202b6 <__swsetup_r+0x1e>
 80202e8:	0758      	lsls	r0, r3, #29
 80202ea:	d512      	bpl.n	8020312 <__swsetup_r+0x7a>
 80202ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80202ee:	b141      	cbz	r1, 8020302 <__swsetup_r+0x6a>
 80202f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80202f4:	4299      	cmp	r1, r3
 80202f6:	d002      	beq.n	80202fe <__swsetup_r+0x66>
 80202f8:	4630      	mov	r0, r6
 80202fa:	f7fc f853 	bl	801c3a4 <_free_r>
 80202fe:	2300      	movs	r3, #0
 8020300:	6363      	str	r3, [r4, #52]	; 0x34
 8020302:	89a3      	ldrh	r3, [r4, #12]
 8020304:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020308:	81a3      	strh	r3, [r4, #12]
 802030a:	2300      	movs	r3, #0
 802030c:	6063      	str	r3, [r4, #4]
 802030e:	6923      	ldr	r3, [r4, #16]
 8020310:	6023      	str	r3, [r4, #0]
 8020312:	89a3      	ldrh	r3, [r4, #12]
 8020314:	f043 0308 	orr.w	r3, r3, #8
 8020318:	81a3      	strh	r3, [r4, #12]
 802031a:	6923      	ldr	r3, [r4, #16]
 802031c:	b94b      	cbnz	r3, 8020332 <__swsetup_r+0x9a>
 802031e:	89a3      	ldrh	r3, [r4, #12]
 8020320:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020328:	d003      	beq.n	8020332 <__swsetup_r+0x9a>
 802032a:	4621      	mov	r1, r4
 802032c:	4630      	mov	r0, r6
 802032e:	f000 fa05 	bl	802073c <__smakebuf_r>
 8020332:	89a0      	ldrh	r0, [r4, #12]
 8020334:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020338:	f010 0301 	ands.w	r3, r0, #1
 802033c:	d00a      	beq.n	8020354 <__swsetup_r+0xbc>
 802033e:	2300      	movs	r3, #0
 8020340:	60a3      	str	r3, [r4, #8]
 8020342:	6963      	ldr	r3, [r4, #20]
 8020344:	425b      	negs	r3, r3
 8020346:	61a3      	str	r3, [r4, #24]
 8020348:	6923      	ldr	r3, [r4, #16]
 802034a:	b943      	cbnz	r3, 802035e <__swsetup_r+0xc6>
 802034c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020350:	d1ba      	bne.n	80202c8 <__swsetup_r+0x30>
 8020352:	bd70      	pop	{r4, r5, r6, pc}
 8020354:	0781      	lsls	r1, r0, #30
 8020356:	bf58      	it	pl
 8020358:	6963      	ldrpl	r3, [r4, #20]
 802035a:	60a3      	str	r3, [r4, #8]
 802035c:	e7f4      	b.n	8020348 <__swsetup_r+0xb0>
 802035e:	2000      	movs	r0, #0
 8020360:	e7f7      	b.n	8020352 <__swsetup_r+0xba>
 8020362:	bf00      	nop
 8020364:	20000398 	.word	0x20000398
 8020368:	08022d04 	.word	0x08022d04
 802036c:	08022d24 	.word	0x08022d24
 8020370:	08022ce4 	.word	0x08022ce4

08020374 <abort>:
 8020374:	b508      	push	{r3, lr}
 8020376:	2006      	movs	r0, #6
 8020378:	f000 fa50 	bl	802081c <raise>
 802037c:	2001      	movs	r0, #1
 802037e:	f7e8 fc47 	bl	8008c10 <_exit>
	...

08020384 <__sflush_r>:
 8020384:	898a      	ldrh	r2, [r1, #12]
 8020386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802038a:	4605      	mov	r5, r0
 802038c:	0710      	lsls	r0, r2, #28
 802038e:	460c      	mov	r4, r1
 8020390:	d458      	bmi.n	8020444 <__sflush_r+0xc0>
 8020392:	684b      	ldr	r3, [r1, #4]
 8020394:	2b00      	cmp	r3, #0
 8020396:	dc05      	bgt.n	80203a4 <__sflush_r+0x20>
 8020398:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802039a:	2b00      	cmp	r3, #0
 802039c:	dc02      	bgt.n	80203a4 <__sflush_r+0x20>
 802039e:	2000      	movs	r0, #0
 80203a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80203a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80203a6:	2e00      	cmp	r6, #0
 80203a8:	d0f9      	beq.n	802039e <__sflush_r+0x1a>
 80203aa:	2300      	movs	r3, #0
 80203ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80203b0:	682f      	ldr	r7, [r5, #0]
 80203b2:	602b      	str	r3, [r5, #0]
 80203b4:	d032      	beq.n	802041c <__sflush_r+0x98>
 80203b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80203b8:	89a3      	ldrh	r3, [r4, #12]
 80203ba:	075a      	lsls	r2, r3, #29
 80203bc:	d505      	bpl.n	80203ca <__sflush_r+0x46>
 80203be:	6863      	ldr	r3, [r4, #4]
 80203c0:	1ac0      	subs	r0, r0, r3
 80203c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80203c4:	b10b      	cbz	r3, 80203ca <__sflush_r+0x46>
 80203c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80203c8:	1ac0      	subs	r0, r0, r3
 80203ca:	2300      	movs	r3, #0
 80203cc:	4602      	mov	r2, r0
 80203ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80203d0:	6a21      	ldr	r1, [r4, #32]
 80203d2:	4628      	mov	r0, r5
 80203d4:	47b0      	blx	r6
 80203d6:	1c43      	adds	r3, r0, #1
 80203d8:	89a3      	ldrh	r3, [r4, #12]
 80203da:	d106      	bne.n	80203ea <__sflush_r+0x66>
 80203dc:	6829      	ldr	r1, [r5, #0]
 80203de:	291d      	cmp	r1, #29
 80203e0:	d82c      	bhi.n	802043c <__sflush_r+0xb8>
 80203e2:	4a2a      	ldr	r2, [pc, #168]	; (802048c <__sflush_r+0x108>)
 80203e4:	40ca      	lsrs	r2, r1
 80203e6:	07d6      	lsls	r6, r2, #31
 80203e8:	d528      	bpl.n	802043c <__sflush_r+0xb8>
 80203ea:	2200      	movs	r2, #0
 80203ec:	6062      	str	r2, [r4, #4]
 80203ee:	04d9      	lsls	r1, r3, #19
 80203f0:	6922      	ldr	r2, [r4, #16]
 80203f2:	6022      	str	r2, [r4, #0]
 80203f4:	d504      	bpl.n	8020400 <__sflush_r+0x7c>
 80203f6:	1c42      	adds	r2, r0, #1
 80203f8:	d101      	bne.n	80203fe <__sflush_r+0x7a>
 80203fa:	682b      	ldr	r3, [r5, #0]
 80203fc:	b903      	cbnz	r3, 8020400 <__sflush_r+0x7c>
 80203fe:	6560      	str	r0, [r4, #84]	; 0x54
 8020400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020402:	602f      	str	r7, [r5, #0]
 8020404:	2900      	cmp	r1, #0
 8020406:	d0ca      	beq.n	802039e <__sflush_r+0x1a>
 8020408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802040c:	4299      	cmp	r1, r3
 802040e:	d002      	beq.n	8020416 <__sflush_r+0x92>
 8020410:	4628      	mov	r0, r5
 8020412:	f7fb ffc7 	bl	801c3a4 <_free_r>
 8020416:	2000      	movs	r0, #0
 8020418:	6360      	str	r0, [r4, #52]	; 0x34
 802041a:	e7c1      	b.n	80203a0 <__sflush_r+0x1c>
 802041c:	6a21      	ldr	r1, [r4, #32]
 802041e:	2301      	movs	r3, #1
 8020420:	4628      	mov	r0, r5
 8020422:	47b0      	blx	r6
 8020424:	1c41      	adds	r1, r0, #1
 8020426:	d1c7      	bne.n	80203b8 <__sflush_r+0x34>
 8020428:	682b      	ldr	r3, [r5, #0]
 802042a:	2b00      	cmp	r3, #0
 802042c:	d0c4      	beq.n	80203b8 <__sflush_r+0x34>
 802042e:	2b1d      	cmp	r3, #29
 8020430:	d001      	beq.n	8020436 <__sflush_r+0xb2>
 8020432:	2b16      	cmp	r3, #22
 8020434:	d101      	bne.n	802043a <__sflush_r+0xb6>
 8020436:	602f      	str	r7, [r5, #0]
 8020438:	e7b1      	b.n	802039e <__sflush_r+0x1a>
 802043a:	89a3      	ldrh	r3, [r4, #12]
 802043c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020440:	81a3      	strh	r3, [r4, #12]
 8020442:	e7ad      	b.n	80203a0 <__sflush_r+0x1c>
 8020444:	690f      	ldr	r7, [r1, #16]
 8020446:	2f00      	cmp	r7, #0
 8020448:	d0a9      	beq.n	802039e <__sflush_r+0x1a>
 802044a:	0793      	lsls	r3, r2, #30
 802044c:	680e      	ldr	r6, [r1, #0]
 802044e:	bf08      	it	eq
 8020450:	694b      	ldreq	r3, [r1, #20]
 8020452:	600f      	str	r7, [r1, #0]
 8020454:	bf18      	it	ne
 8020456:	2300      	movne	r3, #0
 8020458:	eba6 0807 	sub.w	r8, r6, r7
 802045c:	608b      	str	r3, [r1, #8]
 802045e:	f1b8 0f00 	cmp.w	r8, #0
 8020462:	dd9c      	ble.n	802039e <__sflush_r+0x1a>
 8020464:	6a21      	ldr	r1, [r4, #32]
 8020466:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020468:	4643      	mov	r3, r8
 802046a:	463a      	mov	r2, r7
 802046c:	4628      	mov	r0, r5
 802046e:	47b0      	blx	r6
 8020470:	2800      	cmp	r0, #0
 8020472:	dc06      	bgt.n	8020482 <__sflush_r+0xfe>
 8020474:	89a3      	ldrh	r3, [r4, #12]
 8020476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802047a:	81a3      	strh	r3, [r4, #12]
 802047c:	f04f 30ff 	mov.w	r0, #4294967295
 8020480:	e78e      	b.n	80203a0 <__sflush_r+0x1c>
 8020482:	4407      	add	r7, r0
 8020484:	eba8 0800 	sub.w	r8, r8, r0
 8020488:	e7e9      	b.n	802045e <__sflush_r+0xda>
 802048a:	bf00      	nop
 802048c:	20400001 	.word	0x20400001

08020490 <_fflush_r>:
 8020490:	b538      	push	{r3, r4, r5, lr}
 8020492:	690b      	ldr	r3, [r1, #16]
 8020494:	4605      	mov	r5, r0
 8020496:	460c      	mov	r4, r1
 8020498:	b913      	cbnz	r3, 80204a0 <_fflush_r+0x10>
 802049a:	2500      	movs	r5, #0
 802049c:	4628      	mov	r0, r5
 802049e:	bd38      	pop	{r3, r4, r5, pc}
 80204a0:	b118      	cbz	r0, 80204aa <_fflush_r+0x1a>
 80204a2:	6983      	ldr	r3, [r0, #24]
 80204a4:	b90b      	cbnz	r3, 80204aa <_fflush_r+0x1a>
 80204a6:	f000 f887 	bl	80205b8 <__sinit>
 80204aa:	4b14      	ldr	r3, [pc, #80]	; (80204fc <_fflush_r+0x6c>)
 80204ac:	429c      	cmp	r4, r3
 80204ae:	d11b      	bne.n	80204e8 <_fflush_r+0x58>
 80204b0:	686c      	ldr	r4, [r5, #4]
 80204b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80204b6:	2b00      	cmp	r3, #0
 80204b8:	d0ef      	beq.n	802049a <_fflush_r+0xa>
 80204ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80204bc:	07d0      	lsls	r0, r2, #31
 80204be:	d404      	bmi.n	80204ca <_fflush_r+0x3a>
 80204c0:	0599      	lsls	r1, r3, #22
 80204c2:	d402      	bmi.n	80204ca <_fflush_r+0x3a>
 80204c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80204c6:	f7ff fcfa 	bl	801febe <__retarget_lock_acquire_recursive>
 80204ca:	4628      	mov	r0, r5
 80204cc:	4621      	mov	r1, r4
 80204ce:	f7ff ff59 	bl	8020384 <__sflush_r>
 80204d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80204d4:	07da      	lsls	r2, r3, #31
 80204d6:	4605      	mov	r5, r0
 80204d8:	d4e0      	bmi.n	802049c <_fflush_r+0xc>
 80204da:	89a3      	ldrh	r3, [r4, #12]
 80204dc:	059b      	lsls	r3, r3, #22
 80204de:	d4dd      	bmi.n	802049c <_fflush_r+0xc>
 80204e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80204e2:	f7ff fced 	bl	801fec0 <__retarget_lock_release_recursive>
 80204e6:	e7d9      	b.n	802049c <_fflush_r+0xc>
 80204e8:	4b05      	ldr	r3, [pc, #20]	; (8020500 <_fflush_r+0x70>)
 80204ea:	429c      	cmp	r4, r3
 80204ec:	d101      	bne.n	80204f2 <_fflush_r+0x62>
 80204ee:	68ac      	ldr	r4, [r5, #8]
 80204f0:	e7df      	b.n	80204b2 <_fflush_r+0x22>
 80204f2:	4b04      	ldr	r3, [pc, #16]	; (8020504 <_fflush_r+0x74>)
 80204f4:	429c      	cmp	r4, r3
 80204f6:	bf08      	it	eq
 80204f8:	68ec      	ldreq	r4, [r5, #12]
 80204fa:	e7da      	b.n	80204b2 <_fflush_r+0x22>
 80204fc:	08022d04 	.word	0x08022d04
 8020500:	08022d24 	.word	0x08022d24
 8020504:	08022ce4 	.word	0x08022ce4

08020508 <std>:
 8020508:	2300      	movs	r3, #0
 802050a:	b510      	push	{r4, lr}
 802050c:	4604      	mov	r4, r0
 802050e:	e9c0 3300 	strd	r3, r3, [r0]
 8020512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020516:	6083      	str	r3, [r0, #8]
 8020518:	8181      	strh	r1, [r0, #12]
 802051a:	6643      	str	r3, [r0, #100]	; 0x64
 802051c:	81c2      	strh	r2, [r0, #14]
 802051e:	6183      	str	r3, [r0, #24]
 8020520:	4619      	mov	r1, r3
 8020522:	2208      	movs	r2, #8
 8020524:	305c      	adds	r0, #92	; 0x5c
 8020526:	f7fb ff35 	bl	801c394 <memset>
 802052a:	4b05      	ldr	r3, [pc, #20]	; (8020540 <std+0x38>)
 802052c:	6263      	str	r3, [r4, #36]	; 0x24
 802052e:	4b05      	ldr	r3, [pc, #20]	; (8020544 <std+0x3c>)
 8020530:	62a3      	str	r3, [r4, #40]	; 0x28
 8020532:	4b05      	ldr	r3, [pc, #20]	; (8020548 <std+0x40>)
 8020534:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020536:	4b05      	ldr	r3, [pc, #20]	; (802054c <std+0x44>)
 8020538:	6224      	str	r4, [r4, #32]
 802053a:	6323      	str	r3, [r4, #48]	; 0x30
 802053c:	bd10      	pop	{r4, pc}
 802053e:	bf00      	nop
 8020540:	08020855 	.word	0x08020855
 8020544:	08020877 	.word	0x08020877
 8020548:	080208af 	.word	0x080208af
 802054c:	080208d3 	.word	0x080208d3

08020550 <_cleanup_r>:
 8020550:	4901      	ldr	r1, [pc, #4]	; (8020558 <_cleanup_r+0x8>)
 8020552:	f000 b8af 	b.w	80206b4 <_fwalk_reent>
 8020556:	bf00      	nop
 8020558:	08020491 	.word	0x08020491

0802055c <__sfmoreglue>:
 802055c:	b570      	push	{r4, r5, r6, lr}
 802055e:	1e4a      	subs	r2, r1, #1
 8020560:	2568      	movs	r5, #104	; 0x68
 8020562:	4355      	muls	r5, r2
 8020564:	460e      	mov	r6, r1
 8020566:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802056a:	f7fb ff6b 	bl	801c444 <_malloc_r>
 802056e:	4604      	mov	r4, r0
 8020570:	b140      	cbz	r0, 8020584 <__sfmoreglue+0x28>
 8020572:	2100      	movs	r1, #0
 8020574:	e9c0 1600 	strd	r1, r6, [r0]
 8020578:	300c      	adds	r0, #12
 802057a:	60a0      	str	r0, [r4, #8]
 802057c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020580:	f7fb ff08 	bl	801c394 <memset>
 8020584:	4620      	mov	r0, r4
 8020586:	bd70      	pop	{r4, r5, r6, pc}

08020588 <__sfp_lock_acquire>:
 8020588:	4801      	ldr	r0, [pc, #4]	; (8020590 <__sfp_lock_acquire+0x8>)
 802058a:	f7ff bc98 	b.w	801febe <__retarget_lock_acquire_recursive>
 802058e:	bf00      	nop
 8020590:	20009f14 	.word	0x20009f14

08020594 <__sfp_lock_release>:
 8020594:	4801      	ldr	r0, [pc, #4]	; (802059c <__sfp_lock_release+0x8>)
 8020596:	f7ff bc93 	b.w	801fec0 <__retarget_lock_release_recursive>
 802059a:	bf00      	nop
 802059c:	20009f14 	.word	0x20009f14

080205a0 <__sinit_lock_acquire>:
 80205a0:	4801      	ldr	r0, [pc, #4]	; (80205a8 <__sinit_lock_acquire+0x8>)
 80205a2:	f7ff bc8c 	b.w	801febe <__retarget_lock_acquire_recursive>
 80205a6:	bf00      	nop
 80205a8:	20009f0f 	.word	0x20009f0f

080205ac <__sinit_lock_release>:
 80205ac:	4801      	ldr	r0, [pc, #4]	; (80205b4 <__sinit_lock_release+0x8>)
 80205ae:	f7ff bc87 	b.w	801fec0 <__retarget_lock_release_recursive>
 80205b2:	bf00      	nop
 80205b4:	20009f0f 	.word	0x20009f0f

080205b8 <__sinit>:
 80205b8:	b510      	push	{r4, lr}
 80205ba:	4604      	mov	r4, r0
 80205bc:	f7ff fff0 	bl	80205a0 <__sinit_lock_acquire>
 80205c0:	69a3      	ldr	r3, [r4, #24]
 80205c2:	b11b      	cbz	r3, 80205cc <__sinit+0x14>
 80205c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80205c8:	f7ff bff0 	b.w	80205ac <__sinit_lock_release>
 80205cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80205d0:	6523      	str	r3, [r4, #80]	; 0x50
 80205d2:	4b13      	ldr	r3, [pc, #76]	; (8020620 <__sinit+0x68>)
 80205d4:	4a13      	ldr	r2, [pc, #76]	; (8020624 <__sinit+0x6c>)
 80205d6:	681b      	ldr	r3, [r3, #0]
 80205d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80205da:	42a3      	cmp	r3, r4
 80205dc:	bf04      	itt	eq
 80205de:	2301      	moveq	r3, #1
 80205e0:	61a3      	streq	r3, [r4, #24]
 80205e2:	4620      	mov	r0, r4
 80205e4:	f000 f820 	bl	8020628 <__sfp>
 80205e8:	6060      	str	r0, [r4, #4]
 80205ea:	4620      	mov	r0, r4
 80205ec:	f000 f81c 	bl	8020628 <__sfp>
 80205f0:	60a0      	str	r0, [r4, #8]
 80205f2:	4620      	mov	r0, r4
 80205f4:	f000 f818 	bl	8020628 <__sfp>
 80205f8:	2200      	movs	r2, #0
 80205fa:	60e0      	str	r0, [r4, #12]
 80205fc:	2104      	movs	r1, #4
 80205fe:	6860      	ldr	r0, [r4, #4]
 8020600:	f7ff ff82 	bl	8020508 <std>
 8020604:	68a0      	ldr	r0, [r4, #8]
 8020606:	2201      	movs	r2, #1
 8020608:	2109      	movs	r1, #9
 802060a:	f7ff ff7d 	bl	8020508 <std>
 802060e:	68e0      	ldr	r0, [r4, #12]
 8020610:	2202      	movs	r2, #2
 8020612:	2112      	movs	r1, #18
 8020614:	f7ff ff78 	bl	8020508 <std>
 8020618:	2301      	movs	r3, #1
 802061a:	61a3      	str	r3, [r4, #24]
 802061c:	e7d2      	b.n	80205c4 <__sinit+0xc>
 802061e:	bf00      	nop
 8020620:	08022894 	.word	0x08022894
 8020624:	08020551 	.word	0x08020551

08020628 <__sfp>:
 8020628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802062a:	4607      	mov	r7, r0
 802062c:	f7ff ffac 	bl	8020588 <__sfp_lock_acquire>
 8020630:	4b1e      	ldr	r3, [pc, #120]	; (80206ac <__sfp+0x84>)
 8020632:	681e      	ldr	r6, [r3, #0]
 8020634:	69b3      	ldr	r3, [r6, #24]
 8020636:	b913      	cbnz	r3, 802063e <__sfp+0x16>
 8020638:	4630      	mov	r0, r6
 802063a:	f7ff ffbd 	bl	80205b8 <__sinit>
 802063e:	3648      	adds	r6, #72	; 0x48
 8020640:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020644:	3b01      	subs	r3, #1
 8020646:	d503      	bpl.n	8020650 <__sfp+0x28>
 8020648:	6833      	ldr	r3, [r6, #0]
 802064a:	b30b      	cbz	r3, 8020690 <__sfp+0x68>
 802064c:	6836      	ldr	r6, [r6, #0]
 802064e:	e7f7      	b.n	8020640 <__sfp+0x18>
 8020650:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020654:	b9d5      	cbnz	r5, 802068c <__sfp+0x64>
 8020656:	4b16      	ldr	r3, [pc, #88]	; (80206b0 <__sfp+0x88>)
 8020658:	60e3      	str	r3, [r4, #12]
 802065a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802065e:	6665      	str	r5, [r4, #100]	; 0x64
 8020660:	f7ff fc2c 	bl	801febc <__retarget_lock_init_recursive>
 8020664:	f7ff ff96 	bl	8020594 <__sfp_lock_release>
 8020668:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802066c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8020670:	6025      	str	r5, [r4, #0]
 8020672:	61a5      	str	r5, [r4, #24]
 8020674:	2208      	movs	r2, #8
 8020676:	4629      	mov	r1, r5
 8020678:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802067c:	f7fb fe8a 	bl	801c394 <memset>
 8020680:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020684:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020688:	4620      	mov	r0, r4
 802068a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802068c:	3468      	adds	r4, #104	; 0x68
 802068e:	e7d9      	b.n	8020644 <__sfp+0x1c>
 8020690:	2104      	movs	r1, #4
 8020692:	4638      	mov	r0, r7
 8020694:	f7ff ff62 	bl	802055c <__sfmoreglue>
 8020698:	4604      	mov	r4, r0
 802069a:	6030      	str	r0, [r6, #0]
 802069c:	2800      	cmp	r0, #0
 802069e:	d1d5      	bne.n	802064c <__sfp+0x24>
 80206a0:	f7ff ff78 	bl	8020594 <__sfp_lock_release>
 80206a4:	230c      	movs	r3, #12
 80206a6:	603b      	str	r3, [r7, #0]
 80206a8:	e7ee      	b.n	8020688 <__sfp+0x60>
 80206aa:	bf00      	nop
 80206ac:	08022894 	.word	0x08022894
 80206b0:	ffff0001 	.word	0xffff0001

080206b4 <_fwalk_reent>:
 80206b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80206b8:	4606      	mov	r6, r0
 80206ba:	4688      	mov	r8, r1
 80206bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80206c0:	2700      	movs	r7, #0
 80206c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80206c6:	f1b9 0901 	subs.w	r9, r9, #1
 80206ca:	d505      	bpl.n	80206d8 <_fwalk_reent+0x24>
 80206cc:	6824      	ldr	r4, [r4, #0]
 80206ce:	2c00      	cmp	r4, #0
 80206d0:	d1f7      	bne.n	80206c2 <_fwalk_reent+0xe>
 80206d2:	4638      	mov	r0, r7
 80206d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80206d8:	89ab      	ldrh	r3, [r5, #12]
 80206da:	2b01      	cmp	r3, #1
 80206dc:	d907      	bls.n	80206ee <_fwalk_reent+0x3a>
 80206de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80206e2:	3301      	adds	r3, #1
 80206e4:	d003      	beq.n	80206ee <_fwalk_reent+0x3a>
 80206e6:	4629      	mov	r1, r5
 80206e8:	4630      	mov	r0, r6
 80206ea:	47c0      	blx	r8
 80206ec:	4307      	orrs	r7, r0
 80206ee:	3568      	adds	r5, #104	; 0x68
 80206f0:	e7e9      	b.n	80206c6 <_fwalk_reent+0x12>

080206f2 <__swhatbuf_r>:
 80206f2:	b570      	push	{r4, r5, r6, lr}
 80206f4:	460e      	mov	r6, r1
 80206f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80206fa:	2900      	cmp	r1, #0
 80206fc:	b096      	sub	sp, #88	; 0x58
 80206fe:	4614      	mov	r4, r2
 8020700:	461d      	mov	r5, r3
 8020702:	da07      	bge.n	8020714 <__swhatbuf_r+0x22>
 8020704:	2300      	movs	r3, #0
 8020706:	602b      	str	r3, [r5, #0]
 8020708:	89b3      	ldrh	r3, [r6, #12]
 802070a:	061a      	lsls	r2, r3, #24
 802070c:	d410      	bmi.n	8020730 <__swhatbuf_r+0x3e>
 802070e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020712:	e00e      	b.n	8020732 <__swhatbuf_r+0x40>
 8020714:	466a      	mov	r2, sp
 8020716:	f000 f903 	bl	8020920 <_fstat_r>
 802071a:	2800      	cmp	r0, #0
 802071c:	dbf2      	blt.n	8020704 <__swhatbuf_r+0x12>
 802071e:	9a01      	ldr	r2, [sp, #4]
 8020720:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020724:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020728:	425a      	negs	r2, r3
 802072a:	415a      	adcs	r2, r3
 802072c:	602a      	str	r2, [r5, #0]
 802072e:	e7ee      	b.n	802070e <__swhatbuf_r+0x1c>
 8020730:	2340      	movs	r3, #64	; 0x40
 8020732:	2000      	movs	r0, #0
 8020734:	6023      	str	r3, [r4, #0]
 8020736:	b016      	add	sp, #88	; 0x58
 8020738:	bd70      	pop	{r4, r5, r6, pc}
	...

0802073c <__smakebuf_r>:
 802073c:	898b      	ldrh	r3, [r1, #12]
 802073e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020740:	079d      	lsls	r5, r3, #30
 8020742:	4606      	mov	r6, r0
 8020744:	460c      	mov	r4, r1
 8020746:	d507      	bpl.n	8020758 <__smakebuf_r+0x1c>
 8020748:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802074c:	6023      	str	r3, [r4, #0]
 802074e:	6123      	str	r3, [r4, #16]
 8020750:	2301      	movs	r3, #1
 8020752:	6163      	str	r3, [r4, #20]
 8020754:	b002      	add	sp, #8
 8020756:	bd70      	pop	{r4, r5, r6, pc}
 8020758:	ab01      	add	r3, sp, #4
 802075a:	466a      	mov	r2, sp
 802075c:	f7ff ffc9 	bl	80206f2 <__swhatbuf_r>
 8020760:	9900      	ldr	r1, [sp, #0]
 8020762:	4605      	mov	r5, r0
 8020764:	4630      	mov	r0, r6
 8020766:	f7fb fe6d 	bl	801c444 <_malloc_r>
 802076a:	b948      	cbnz	r0, 8020780 <__smakebuf_r+0x44>
 802076c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020770:	059a      	lsls	r2, r3, #22
 8020772:	d4ef      	bmi.n	8020754 <__smakebuf_r+0x18>
 8020774:	f023 0303 	bic.w	r3, r3, #3
 8020778:	f043 0302 	orr.w	r3, r3, #2
 802077c:	81a3      	strh	r3, [r4, #12]
 802077e:	e7e3      	b.n	8020748 <__smakebuf_r+0xc>
 8020780:	4b0d      	ldr	r3, [pc, #52]	; (80207b8 <__smakebuf_r+0x7c>)
 8020782:	62b3      	str	r3, [r6, #40]	; 0x28
 8020784:	89a3      	ldrh	r3, [r4, #12]
 8020786:	6020      	str	r0, [r4, #0]
 8020788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802078c:	81a3      	strh	r3, [r4, #12]
 802078e:	9b00      	ldr	r3, [sp, #0]
 8020790:	6163      	str	r3, [r4, #20]
 8020792:	9b01      	ldr	r3, [sp, #4]
 8020794:	6120      	str	r0, [r4, #16]
 8020796:	b15b      	cbz	r3, 80207b0 <__smakebuf_r+0x74>
 8020798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802079c:	4630      	mov	r0, r6
 802079e:	f000 f8d1 	bl	8020944 <_isatty_r>
 80207a2:	b128      	cbz	r0, 80207b0 <__smakebuf_r+0x74>
 80207a4:	89a3      	ldrh	r3, [r4, #12]
 80207a6:	f023 0303 	bic.w	r3, r3, #3
 80207aa:	f043 0301 	orr.w	r3, r3, #1
 80207ae:	81a3      	strh	r3, [r4, #12]
 80207b0:	89a0      	ldrh	r0, [r4, #12]
 80207b2:	4305      	orrs	r5, r0
 80207b4:	81a5      	strh	r5, [r4, #12]
 80207b6:	e7cd      	b.n	8020754 <__smakebuf_r+0x18>
 80207b8:	08020551 	.word	0x08020551

080207bc <_malloc_usable_size_r>:
 80207bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80207c0:	1f18      	subs	r0, r3, #4
 80207c2:	2b00      	cmp	r3, #0
 80207c4:	bfbc      	itt	lt
 80207c6:	580b      	ldrlt	r3, [r1, r0]
 80207c8:	18c0      	addlt	r0, r0, r3
 80207ca:	4770      	bx	lr

080207cc <_raise_r>:
 80207cc:	291f      	cmp	r1, #31
 80207ce:	b538      	push	{r3, r4, r5, lr}
 80207d0:	4604      	mov	r4, r0
 80207d2:	460d      	mov	r5, r1
 80207d4:	d904      	bls.n	80207e0 <_raise_r+0x14>
 80207d6:	2316      	movs	r3, #22
 80207d8:	6003      	str	r3, [r0, #0]
 80207da:	f04f 30ff 	mov.w	r0, #4294967295
 80207de:	bd38      	pop	{r3, r4, r5, pc}
 80207e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80207e2:	b112      	cbz	r2, 80207ea <_raise_r+0x1e>
 80207e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80207e8:	b94b      	cbnz	r3, 80207fe <_raise_r+0x32>
 80207ea:	4620      	mov	r0, r4
 80207ec:	f000 f830 	bl	8020850 <_getpid_r>
 80207f0:	462a      	mov	r2, r5
 80207f2:	4601      	mov	r1, r0
 80207f4:	4620      	mov	r0, r4
 80207f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80207fa:	f000 b817 	b.w	802082c <_kill_r>
 80207fe:	2b01      	cmp	r3, #1
 8020800:	d00a      	beq.n	8020818 <_raise_r+0x4c>
 8020802:	1c59      	adds	r1, r3, #1
 8020804:	d103      	bne.n	802080e <_raise_r+0x42>
 8020806:	2316      	movs	r3, #22
 8020808:	6003      	str	r3, [r0, #0]
 802080a:	2001      	movs	r0, #1
 802080c:	e7e7      	b.n	80207de <_raise_r+0x12>
 802080e:	2400      	movs	r4, #0
 8020810:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020814:	4628      	mov	r0, r5
 8020816:	4798      	blx	r3
 8020818:	2000      	movs	r0, #0
 802081a:	e7e0      	b.n	80207de <_raise_r+0x12>

0802081c <raise>:
 802081c:	4b02      	ldr	r3, [pc, #8]	; (8020828 <raise+0xc>)
 802081e:	4601      	mov	r1, r0
 8020820:	6818      	ldr	r0, [r3, #0]
 8020822:	f7ff bfd3 	b.w	80207cc <_raise_r>
 8020826:	bf00      	nop
 8020828:	20000398 	.word	0x20000398

0802082c <_kill_r>:
 802082c:	b538      	push	{r3, r4, r5, lr}
 802082e:	4d07      	ldr	r5, [pc, #28]	; (802084c <_kill_r+0x20>)
 8020830:	2300      	movs	r3, #0
 8020832:	4604      	mov	r4, r0
 8020834:	4608      	mov	r0, r1
 8020836:	4611      	mov	r1, r2
 8020838:	602b      	str	r3, [r5, #0]
 802083a:	f7e8 f9d9 	bl	8008bf0 <_kill>
 802083e:	1c43      	adds	r3, r0, #1
 8020840:	d102      	bne.n	8020848 <_kill_r+0x1c>
 8020842:	682b      	ldr	r3, [r5, #0]
 8020844:	b103      	cbz	r3, 8020848 <_kill_r+0x1c>
 8020846:	6023      	str	r3, [r4, #0]
 8020848:	bd38      	pop	{r3, r4, r5, pc}
 802084a:	bf00      	nop
 802084c:	20009f08 	.word	0x20009f08

08020850 <_getpid_r>:
 8020850:	f7e8 b9c6 	b.w	8008be0 <_getpid>

08020854 <__sread>:
 8020854:	b510      	push	{r4, lr}
 8020856:	460c      	mov	r4, r1
 8020858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802085c:	f000 f894 	bl	8020988 <_read_r>
 8020860:	2800      	cmp	r0, #0
 8020862:	bfab      	itete	ge
 8020864:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020866:	89a3      	ldrhlt	r3, [r4, #12]
 8020868:	181b      	addge	r3, r3, r0
 802086a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802086e:	bfac      	ite	ge
 8020870:	6563      	strge	r3, [r4, #84]	; 0x54
 8020872:	81a3      	strhlt	r3, [r4, #12]
 8020874:	bd10      	pop	{r4, pc}

08020876 <__swrite>:
 8020876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802087a:	461f      	mov	r7, r3
 802087c:	898b      	ldrh	r3, [r1, #12]
 802087e:	05db      	lsls	r3, r3, #23
 8020880:	4605      	mov	r5, r0
 8020882:	460c      	mov	r4, r1
 8020884:	4616      	mov	r6, r2
 8020886:	d505      	bpl.n	8020894 <__swrite+0x1e>
 8020888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802088c:	2302      	movs	r3, #2
 802088e:	2200      	movs	r2, #0
 8020890:	f000 f868 	bl	8020964 <_lseek_r>
 8020894:	89a3      	ldrh	r3, [r4, #12]
 8020896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802089a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802089e:	81a3      	strh	r3, [r4, #12]
 80208a0:	4632      	mov	r2, r6
 80208a2:	463b      	mov	r3, r7
 80208a4:	4628      	mov	r0, r5
 80208a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80208aa:	f000 b817 	b.w	80208dc <_write_r>

080208ae <__sseek>:
 80208ae:	b510      	push	{r4, lr}
 80208b0:	460c      	mov	r4, r1
 80208b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80208b6:	f000 f855 	bl	8020964 <_lseek_r>
 80208ba:	1c43      	adds	r3, r0, #1
 80208bc:	89a3      	ldrh	r3, [r4, #12]
 80208be:	bf15      	itete	ne
 80208c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80208c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80208c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80208ca:	81a3      	strheq	r3, [r4, #12]
 80208cc:	bf18      	it	ne
 80208ce:	81a3      	strhne	r3, [r4, #12]
 80208d0:	bd10      	pop	{r4, pc}

080208d2 <__sclose>:
 80208d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80208d6:	f000 b813 	b.w	8020900 <_close_r>
	...

080208dc <_write_r>:
 80208dc:	b538      	push	{r3, r4, r5, lr}
 80208de:	4d07      	ldr	r5, [pc, #28]	; (80208fc <_write_r+0x20>)
 80208e0:	4604      	mov	r4, r0
 80208e2:	4608      	mov	r0, r1
 80208e4:	4611      	mov	r1, r2
 80208e6:	2200      	movs	r2, #0
 80208e8:	602a      	str	r2, [r5, #0]
 80208ea:	461a      	mov	r2, r3
 80208ec:	f7e8 f9b7 	bl	8008c5e <_write>
 80208f0:	1c43      	adds	r3, r0, #1
 80208f2:	d102      	bne.n	80208fa <_write_r+0x1e>
 80208f4:	682b      	ldr	r3, [r5, #0]
 80208f6:	b103      	cbz	r3, 80208fa <_write_r+0x1e>
 80208f8:	6023      	str	r3, [r4, #0]
 80208fa:	bd38      	pop	{r3, r4, r5, pc}
 80208fc:	20009f08 	.word	0x20009f08

08020900 <_close_r>:
 8020900:	b538      	push	{r3, r4, r5, lr}
 8020902:	4d06      	ldr	r5, [pc, #24]	; (802091c <_close_r+0x1c>)
 8020904:	2300      	movs	r3, #0
 8020906:	4604      	mov	r4, r0
 8020908:	4608      	mov	r0, r1
 802090a:	602b      	str	r3, [r5, #0]
 802090c:	f7e8 f9c3 	bl	8008c96 <_close>
 8020910:	1c43      	adds	r3, r0, #1
 8020912:	d102      	bne.n	802091a <_close_r+0x1a>
 8020914:	682b      	ldr	r3, [r5, #0]
 8020916:	b103      	cbz	r3, 802091a <_close_r+0x1a>
 8020918:	6023      	str	r3, [r4, #0]
 802091a:	bd38      	pop	{r3, r4, r5, pc}
 802091c:	20009f08 	.word	0x20009f08

08020920 <_fstat_r>:
 8020920:	b538      	push	{r3, r4, r5, lr}
 8020922:	4d07      	ldr	r5, [pc, #28]	; (8020940 <_fstat_r+0x20>)
 8020924:	2300      	movs	r3, #0
 8020926:	4604      	mov	r4, r0
 8020928:	4608      	mov	r0, r1
 802092a:	4611      	mov	r1, r2
 802092c:	602b      	str	r3, [r5, #0]
 802092e:	f7e8 f9be 	bl	8008cae <_fstat>
 8020932:	1c43      	adds	r3, r0, #1
 8020934:	d102      	bne.n	802093c <_fstat_r+0x1c>
 8020936:	682b      	ldr	r3, [r5, #0]
 8020938:	b103      	cbz	r3, 802093c <_fstat_r+0x1c>
 802093a:	6023      	str	r3, [r4, #0]
 802093c:	bd38      	pop	{r3, r4, r5, pc}
 802093e:	bf00      	nop
 8020940:	20009f08 	.word	0x20009f08

08020944 <_isatty_r>:
 8020944:	b538      	push	{r3, r4, r5, lr}
 8020946:	4d06      	ldr	r5, [pc, #24]	; (8020960 <_isatty_r+0x1c>)
 8020948:	2300      	movs	r3, #0
 802094a:	4604      	mov	r4, r0
 802094c:	4608      	mov	r0, r1
 802094e:	602b      	str	r3, [r5, #0]
 8020950:	f7e8 f9bd 	bl	8008cce <_isatty>
 8020954:	1c43      	adds	r3, r0, #1
 8020956:	d102      	bne.n	802095e <_isatty_r+0x1a>
 8020958:	682b      	ldr	r3, [r5, #0]
 802095a:	b103      	cbz	r3, 802095e <_isatty_r+0x1a>
 802095c:	6023      	str	r3, [r4, #0]
 802095e:	bd38      	pop	{r3, r4, r5, pc}
 8020960:	20009f08 	.word	0x20009f08

08020964 <_lseek_r>:
 8020964:	b538      	push	{r3, r4, r5, lr}
 8020966:	4d07      	ldr	r5, [pc, #28]	; (8020984 <_lseek_r+0x20>)
 8020968:	4604      	mov	r4, r0
 802096a:	4608      	mov	r0, r1
 802096c:	4611      	mov	r1, r2
 802096e:	2200      	movs	r2, #0
 8020970:	602a      	str	r2, [r5, #0]
 8020972:	461a      	mov	r2, r3
 8020974:	f7e8 f9b6 	bl	8008ce4 <_lseek>
 8020978:	1c43      	adds	r3, r0, #1
 802097a:	d102      	bne.n	8020982 <_lseek_r+0x1e>
 802097c:	682b      	ldr	r3, [r5, #0]
 802097e:	b103      	cbz	r3, 8020982 <_lseek_r+0x1e>
 8020980:	6023      	str	r3, [r4, #0]
 8020982:	bd38      	pop	{r3, r4, r5, pc}
 8020984:	20009f08 	.word	0x20009f08

08020988 <_read_r>:
 8020988:	b538      	push	{r3, r4, r5, lr}
 802098a:	4d07      	ldr	r5, [pc, #28]	; (80209a8 <_read_r+0x20>)
 802098c:	4604      	mov	r4, r0
 802098e:	4608      	mov	r0, r1
 8020990:	4611      	mov	r1, r2
 8020992:	2200      	movs	r2, #0
 8020994:	602a      	str	r2, [r5, #0]
 8020996:	461a      	mov	r2, r3
 8020998:	f7e8 f944 	bl	8008c24 <_read>
 802099c:	1c43      	adds	r3, r0, #1
 802099e:	d102      	bne.n	80209a6 <_read_r+0x1e>
 80209a0:	682b      	ldr	r3, [r5, #0]
 80209a2:	b103      	cbz	r3, 80209a6 <_read_r+0x1e>
 80209a4:	6023      	str	r3, [r4, #0]
 80209a6:	bd38      	pop	{r3, r4, r5, pc}
 80209a8:	20009f08 	.word	0x20009f08

080209ac <_init>:
 80209ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80209ae:	bf00      	nop
 80209b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80209b2:	bc08      	pop	{r3}
 80209b4:	469e      	mov	lr, r3
 80209b6:	4770      	bx	lr

080209b8 <_fini>:
 80209b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80209ba:	bf00      	nop
 80209bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80209be:	bc08      	pop	{r3}
 80209c0:	469e      	mov	lr, r3
 80209c2:	4770      	bx	lr
