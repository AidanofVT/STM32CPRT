
CPRT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020ca4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000236c  08020e88  08020e88  00030e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080231f4  080231f4  00040578  2**0
                  CONTENTS
  4 .ARM          00000008  080231f4  080231f4  000331f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080231fc  080231fc  00040578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080231fc  080231fc  000331fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023200  08023200  00033200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000578  20000000  08023204  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000078fc  20000578  0802377c  00040578  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  20007e74  0802377c  00047e74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040578  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003758f  00000000  00000000  000405a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008233  00000000  00000000  00077b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000031c8  00000000  00000000  0007fd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002e40  00000000  00000000  00082f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031f38  00000000  00000000  00085d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004134b  00000000  00000000  000b7cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdb24  00000000  00000000  000f8ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f6b1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e620  00000000  00000000  001f6b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000578 	.word	0x20000578
 80001fc:	00000000 	.word	0x00000000
 8000200:	08020e6c 	.word	0x08020e6c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000057c 	.word	0x2000057c
 800021c:	08020e6c 	.word	0x08020e6c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d0c:	f000 b9aa 	b.w	8001064 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	468e      	mov	lr, r1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d14d      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da2:	428a      	cmp	r2, r1
 8000da4:	4694      	mov	ip, r2
 8000da6:	d969      	bls.n	8000e7c <__udivmoddi4+0xe8>
 8000da8:	fab2 f282 	clz	r2, r2
 8000dac:	b152      	cbz	r2, 8000dc4 <__udivmoddi4+0x30>
 8000dae:	fa01 f302 	lsl.w	r3, r1, r2
 8000db2:	f1c2 0120 	rsb	r1, r2, #32
 8000db6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000dc2:	4094      	lsls	r4, r2
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	0c21      	lsrs	r1, r4, #16
 8000dca:	fbbe f6f8 	udiv	r6, lr, r8
 8000dce:	fa1f f78c 	uxth.w	r7, ip
 8000dd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dda:	fb06 f107 	mul.w	r1, r6, r7
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dea:	f080 811f 	bcs.w	800102c <__udivmoddi4+0x298>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 811c 	bls.w	800102c <__udivmoddi4+0x298>
 8000df4:	3e02      	subs	r6, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3310 	mls	r3, r8, r0, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb00 f707 	mul.w	r7, r0, r7
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	d90a      	bls.n	8000e26 <__udivmoddi4+0x92>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e18:	f080 810a 	bcs.w	8001030 <__udivmoddi4+0x29c>
 8000e1c:	42a7      	cmp	r7, r4
 8000e1e:	f240 8107 	bls.w	8001030 <__udivmoddi4+0x29c>
 8000e22:	4464      	add	r4, ip
 8000e24:	3802      	subs	r0, #2
 8000e26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2a:	1be4      	subs	r4, r4, r7
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	b11d      	cbz	r5, 8000e38 <__udivmoddi4+0xa4>
 8000e30:	40d4      	lsrs	r4, r2
 8000e32:	2300      	movs	r3, #0
 8000e34:	e9c5 4300 	strd	r4, r3, [r5]
 8000e38:	4631      	mov	r1, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0xc2>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80ef 	beq.w	8001026 <__udivmoddi4+0x292>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x160>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0xd4>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80f9 	bhi.w	800105a <__udivmoddi4+0x2c6>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	469e      	mov	lr, r3
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0e0      	beq.n	8000e38 <__udivmoddi4+0xa4>
 8000e76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e7a:	e7dd      	b.n	8000e38 <__udivmoddi4+0xa4>
 8000e7c:	b902      	cbnz	r2, 8000e80 <__udivmoddi4+0xec>
 8000e7e:	deff      	udf	#255	; 0xff
 8000e80:	fab2 f282 	clz	r2, r2
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	f040 8092 	bne.w	8000fae <__udivmoddi4+0x21a>
 8000e8a:	eba1 010c 	sub.w	r1, r1, ip
 8000e8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	2601      	movs	r6, #1
 8000e98:	0c20      	lsrs	r0, r4, #16
 8000e9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000ea2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea6:	fb0e f003 	mul.w	r0, lr, r3
 8000eaa:	4288      	cmp	r0, r1
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x12c>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x12a>
 8000eb8:	4288      	cmp	r0, r1
 8000eba:	f200 80cb 	bhi.w	8001054 <__udivmoddi4+0x2c0>
 8000ebe:	4643      	mov	r3, r8
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ecc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ed0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed4:	45a6      	cmp	lr, r4
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x156>
 8000ed8:	eb1c 0404 	adds.w	r4, ip, r4
 8000edc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ee0:	d202      	bcs.n	8000ee8 <__udivmoddi4+0x154>
 8000ee2:	45a6      	cmp	lr, r4
 8000ee4:	f200 80bb 	bhi.w	800105e <__udivmoddi4+0x2ca>
 8000ee8:	4608      	mov	r0, r1
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ef2:	e79c      	b.n	8000e2e <__udivmoddi4+0x9a>
 8000ef4:	f1c6 0720 	rsb	r7, r6, #32
 8000ef8:	40b3      	lsls	r3, r6
 8000efa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f02:	fa20 f407 	lsr.w	r4, r0, r7
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	431c      	orrs	r4, r3
 8000f0c:	40f9      	lsrs	r1, r7
 8000f0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f12:	fa00 f306 	lsl.w	r3, r0, r6
 8000f16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f1a:	0c20      	lsrs	r0, r4, #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fb09 1118 	mls	r1, r9, r8, r1
 8000f24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f28:	fb08 f00e 	mul.w	r0, r8, lr
 8000f2c:	4288      	cmp	r0, r1
 8000f2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f32:	d90b      	bls.n	8000f4c <__udivmoddi4+0x1b8>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f3c:	f080 8088 	bcs.w	8001050 <__udivmoddi4+0x2bc>
 8000f40:	4288      	cmp	r0, r1
 8000f42:	f240 8085 	bls.w	8001050 <__udivmoddi4+0x2bc>
 8000f46:	f1a8 0802 	sub.w	r8, r8, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1a09      	subs	r1, r1, r0
 8000f4e:	b2a4      	uxth	r4, r4
 8000f50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f54:	fb09 1110 	mls	r1, r9, r0, r1
 8000f58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f60:	458e      	cmp	lr, r1
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x1e2>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f6c:	d26c      	bcs.n	8001048 <__udivmoddi4+0x2b4>
 8000f6e:	458e      	cmp	lr, r1
 8000f70:	d96a      	bls.n	8001048 <__udivmoddi4+0x2b4>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4461      	add	r1, ip
 8000f76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f7e:	eba1 010e 	sub.w	r1, r1, lr
 8000f82:	42a1      	cmp	r1, r4
 8000f84:	46c8      	mov	r8, r9
 8000f86:	46a6      	mov	lr, r4
 8000f88:	d356      	bcc.n	8001038 <__udivmoddi4+0x2a4>
 8000f8a:	d053      	beq.n	8001034 <__udivmoddi4+0x2a0>
 8000f8c:	b15d      	cbz	r5, 8000fa6 <__udivmoddi4+0x212>
 8000f8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f92:	eb61 010e 	sbc.w	r1, r1, lr
 8000f96:	fa01 f707 	lsl.w	r7, r1, r7
 8000f9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f9e:	40f1      	lsrs	r1, r6
 8000fa0:	431f      	orrs	r7, r3
 8000fa2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	4631      	mov	r1, r6
 8000faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fae:	f1c2 0320 	rsb	r3, r2, #32
 8000fb2:	40d8      	lsrs	r0, r3
 8000fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fbc:	4091      	lsls	r1, r2
 8000fbe:	4301      	orrs	r1, r0
 8000fc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc4:	fa1f fe8c 	uxth.w	lr, ip
 8000fc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fcc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fd0:	0c0b      	lsrs	r3, r1, #16
 8000fd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fd6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fda:	429e      	cmp	r6, r3
 8000fdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe0:	d908      	bls.n	8000ff4 <__udivmoddi4+0x260>
 8000fe2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fea:	d22f      	bcs.n	800104c <__udivmoddi4+0x2b8>
 8000fec:	429e      	cmp	r6, r3
 8000fee:	d92d      	bls.n	800104c <__udivmoddi4+0x2b8>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1b9b      	subs	r3, r3, r6
 8000ff6:	b289      	uxth	r1, r1
 8000ff8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ffc:	fb07 3316 	mls	r3, r7, r6, r3
 8001000:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001004:	fb06 f30e 	mul.w	r3, r6, lr
 8001008:	428b      	cmp	r3, r1
 800100a:	d908      	bls.n	800101e <__udivmoddi4+0x28a>
 800100c:	eb1c 0101 	adds.w	r1, ip, r1
 8001010:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001014:	d216      	bcs.n	8001044 <__udivmoddi4+0x2b0>
 8001016:	428b      	cmp	r3, r1
 8001018:	d914      	bls.n	8001044 <__udivmoddi4+0x2b0>
 800101a:	3e02      	subs	r6, #2
 800101c:	4461      	add	r1, ip
 800101e:	1ac9      	subs	r1, r1, r3
 8001020:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001024:	e738      	b.n	8000e98 <__udivmoddi4+0x104>
 8001026:	462e      	mov	r6, r5
 8001028:	4628      	mov	r0, r5
 800102a:	e705      	b.n	8000e38 <__udivmoddi4+0xa4>
 800102c:	4606      	mov	r6, r0
 800102e:	e6e3      	b.n	8000df8 <__udivmoddi4+0x64>
 8001030:	4618      	mov	r0, r3
 8001032:	e6f8      	b.n	8000e26 <__udivmoddi4+0x92>
 8001034:	454b      	cmp	r3, r9
 8001036:	d2a9      	bcs.n	8000f8c <__udivmoddi4+0x1f8>
 8001038:	ebb9 0802 	subs.w	r8, r9, r2
 800103c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001040:	3801      	subs	r0, #1
 8001042:	e7a3      	b.n	8000f8c <__udivmoddi4+0x1f8>
 8001044:	4646      	mov	r6, r8
 8001046:	e7ea      	b.n	800101e <__udivmoddi4+0x28a>
 8001048:	4620      	mov	r0, r4
 800104a:	e794      	b.n	8000f76 <__udivmoddi4+0x1e2>
 800104c:	4640      	mov	r0, r8
 800104e:	e7d1      	b.n	8000ff4 <__udivmoddi4+0x260>
 8001050:	46d0      	mov	r8, sl
 8001052:	e77b      	b.n	8000f4c <__udivmoddi4+0x1b8>
 8001054:	3b02      	subs	r3, #2
 8001056:	4461      	add	r1, ip
 8001058:	e732      	b.n	8000ec0 <__udivmoddi4+0x12c>
 800105a:	4630      	mov	r0, r6
 800105c:	e709      	b.n	8000e72 <__udivmoddi4+0xde>
 800105e:	4464      	add	r4, ip
 8001060:	3802      	subs	r0, #2
 8001062:	e742      	b.n	8000eea <__udivmoddi4+0x156>

08001064 <__aeabi_idiv0>:
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <Adc1Init>:
static bool startupAdc3 = true;

/* ADC1 Channels */

void Adc1Init( )
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	startupAdc1 = true;
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <Adc1Init+0x18>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, adc1Values, NUM_ADC1_CHANNELS);
 8001072:	2207      	movs	r2, #7
 8001074:	4903      	ldr	r1, [pc, #12]	; (8001084 <Adc1Init+0x1c>)
 8001076:	4804      	ldr	r0, [pc, #16]	; (8001088 <Adc1Init+0x20>)
 8001078:	f008 f9c8 	bl	800940c <HAL_ADC_Start_DMA>
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000008 	.word	0x20000008
 8001084:	20000598 	.word	0x20000598
 8001088:	20004100 	.word	0x20004100

0800108c <SetAdc1CompleteFlag>:
	SetAdc1CompleteFlag( false );
	HAL_ADC_Start_DMA(&hadc1, adc1Values, NUM_ADC1_CHANNELS);
}

void SetAdc1CompleteFlag( bool complete )
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	adc1DmaComplete = complete;
 8001096:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <SetAdc1CompleteFlag+0x1c>)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	7013      	strb	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	20000594 	.word	0x20000594

080010ac <GetPressureSensor3Value>:


/* ADC1 Channels Values*/

float GetPressureSensor3Value()
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
	return adc1Values[ADC1_CHANNEL_PressureSensor3] * Adc3_3VIndexToMiliVolts;
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <GetPressureSensor3Value+0x24>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	ee07 3a90 	vmov	s15, r3
 80010b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010bc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80010d4 <GetPressureSensor3Value+0x28>
 80010c0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80010c4:	eeb0 0a67 	vmov.f32	s0, s15
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	20000598 	.word	0x20000598
 80010d4:	3f4e4000 	.word	0x3f4e4000

080010d8 <GetPressureSensor1Value>:

float GetPressureSensor1Value()
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
	return adc1Values[ADC1_CHANNEL_PressureSensor1] * Adc3_3VIndexToMiliVolts;
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <GetPressureSensor1Value+0x24>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	ee07 3a90 	vmov	s15, r3
 80010e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010e8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001100 <GetPressureSensor1Value+0x28>
 80010ec:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80010f0:	eeb0 0a67 	vmov.f32	s0, s15
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	20000598 	.word	0x20000598
 8001100:	3f4e4000 	.word	0x3f4e4000

08001104 <GetPressureSensor2Value>:

float GetPressureSensor2Value()
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
	return adc1Values[ADC1_CHANNEL_PressureSensor2] * Adc3_3VIndexToMiliVolts;
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <GetPressureSensor2Value+0x24>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	ee07 3a90 	vmov	s15, r3
 8001110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001114:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800112c <GetPressureSensor2Value+0x28>
 8001118:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800111c:	eeb0 0a67 	vmov.f32	s0, s15
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	20000598 	.word	0x20000598
 800112c:	3f4e4000 	.word	0x3f4e4000

08001130 <GetPressureSensor4Value>:

float GetPressureSensor4Value()
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
	return adc1Values[ADC1_CHANNEL_PressureSensor4] * Adc3_3VIndexToMiliVolts;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <GetPressureSensor4Value+0x24>)
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001140:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001158 <GetPressureSensor4Value+0x28>
 8001144:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001148:	eeb0 0a67 	vmov.f32	s0, s15
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	20000598 	.word	0x20000598
 8001158:	3f4e4000 	.word	0x3f4e4000
 800115c:	00000000 	.word	0x00000000

08001160 <GetCalcMmhgSensorPressure2>:
 * Pressure(psi) = (Vout – 0.5) /0.8;
 * Pressure(mmHg) = (Vout - 0.5) /0.8 * 51.7149
 */

float GetCalcMmhgSensorPressure2( )
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
    return 	((GetPressureSensor2Value() / 1000.0) - 0.5) / 0.8 * 51.7149;
 8001164:	f7ff ffce 	bl	8001104 <GetPressureSensor2Value>
 8001168:	ee10 3a10 	vmov	r3, s0
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fa23 	bl	80005b8 <__aeabi_f2d>
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <GetCalcMmhgSensorPressure2+0x80>)
 8001178:	f7ff fba0 	bl	80008bc <__aeabi_ddiv>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <GetCalcMmhgSensorPressure2+0x84>)
 800118a:	f7ff f8b5 	bl	80002f8 <__aeabi_dsub>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4610      	mov	r0, r2
 8001194:	4619      	mov	r1, r3
 8001196:	a30e      	add	r3, pc, #56	; (adr r3, 80011d0 <GetCalcMmhgSensorPressure2+0x70>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fb8e 	bl	80008bc <__aeabi_ddiv>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	a30b      	add	r3, pc, #44	; (adr r3, 80011d8 <GetCalcMmhgSensorPressure2+0x78>)
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7ff fa5b 	bl	8000668 <__aeabi_dmul>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f7ff fd4d 	bl	8000c58 <__aeabi_d2f>
 80011be:	4603      	mov	r3, r0
 80011c0:	ee07 3a90 	vmov	s15, r3
}
 80011c4:	eeb0 0a67 	vmov.f32	s0, s15
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	f3af 8000 	nop.w
 80011d0:	9999999a 	.word	0x9999999a
 80011d4:	3fe99999 	.word	0x3fe99999
 80011d8:	d7dbf488 	.word	0xd7dbf488
 80011dc:	4049db81 	.word	0x4049db81
 80011e0:	408f4000 	.word	0x408f4000
 80011e4:	3fe00000 	.word	0x3fe00000

080011e8 <GetCalcMmhgSensorPressure3>:

float GetCalcMmhgSensorPressure3( )
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
    return 	((GetPressureSensor3Value() / 1000.0) - 0.5) / 0.8 * 51.7149;
 80011ec:	f7ff ff5e 	bl	80010ac <GetPressureSensor3Value>
 80011f0:	ee10 3a10 	vmov	r3, s0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f9df 	bl	80005b8 <__aeabi_f2d>
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <GetCalcMmhgSensorPressure3+0x80>)
 8001200:	f7ff fb5c 	bl	80008bc <__aeabi_ddiv>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <GetCalcMmhgSensorPressure3+0x84>)
 8001212:	f7ff f871 	bl	80002f8 <__aeabi_dsub>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	a30e      	add	r3, pc, #56	; (adr r3, 8001258 <GetCalcMmhgSensorPressure3+0x70>)
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	f7ff fb4a 	bl	80008bc <__aeabi_ddiv>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4610      	mov	r0, r2
 800122e:	4619      	mov	r1, r3
 8001230:	a30b      	add	r3, pc, #44	; (adr r3, 8001260 <GetCalcMmhgSensorPressure3+0x78>)
 8001232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001236:	f7ff fa17 	bl	8000668 <__aeabi_dmul>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4610      	mov	r0, r2
 8001240:	4619      	mov	r1, r3
 8001242:	f7ff fd09 	bl	8000c58 <__aeabi_d2f>
 8001246:	4603      	mov	r3, r0
 8001248:	ee07 3a90 	vmov	s15, r3
}
 800124c:	eeb0 0a67 	vmov.f32	s0, s15
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	f3af 8000 	nop.w
 8001258:	9999999a 	.word	0x9999999a
 800125c:	3fe99999 	.word	0x3fe99999
 8001260:	d7dbf488 	.word	0xd7dbf488
 8001264:	4049db81 	.word	0x4049db81
 8001268:	408f4000 	.word	0x408f4000
 800126c:	3fe00000 	.word	0x3fe00000

08001270 <GetCalcMmhgSensorPressure4>:

float GetCalcMmhgSensorPressure4( )
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
    return 	((GetPressureSensor4Value() / 1000.0) - 0.5) / 0.8 * 51.7149;
 8001274:	f7ff ff5c 	bl	8001130 <GetPressureSensor4Value>
 8001278:	ee10 3a10 	vmov	r3, s0
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f99b 	bl	80005b8 <__aeabi_f2d>
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <GetCalcMmhgSensorPressure4+0x80>)
 8001288:	f7ff fb18 	bl	80008bc <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <GetCalcMmhgSensorPressure4+0x84>)
 800129a:	f7ff f82d 	bl	80002f8 <__aeabi_dsub>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	a30e      	add	r3, pc, #56	; (adr r3, 80012e0 <GetCalcMmhgSensorPressure4+0x70>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff fb06 	bl	80008bc <__aeabi_ddiv>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	a30b      	add	r3, pc, #44	; (adr r3, 80012e8 <GetCalcMmhgSensorPressure4+0x78>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f7ff f9d3 	bl	8000668 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fcc5 	bl	8000c58 <__aeabi_d2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	ee07 3a90 	vmov	s15, r3
}
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	f3af 8000 	nop.w
 80012e0:	9999999a 	.word	0x9999999a
 80012e4:	3fe99999 	.word	0x3fe99999
 80012e8:	d7dbf488 	.word	0xd7dbf488
 80012ec:	4049db81 	.word	0x4049db81
 80012f0:	408f4000 	.word	0x408f4000
 80012f4:	3fe00000 	.word	0x3fe00000

080012f8 <GetCalcMmhgSensorPressure1>:

float GetCalcMmhgSensorPressure1( )
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
	uint16_t pAdcRaw = adc1Values[ADC1_CHANNEL_PressureSensor1];
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <GetCalcMmhgSensorPressure1+0x68>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	80fb      	strh	r3, [r7, #6]

	return ((pAdcRaw - pAdcZero) * pConversionFactor) * 1.0197162f * CMH2O_TO_MMHG;
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	4a17      	ldr	r2, [pc, #92]	; (8001364 <GetCalcMmhgSensorPressure1+0x6c>)
 8001308:	8812      	ldrh	r2, [r2, #0]
 800130a:	1a9b      	subs	r3, r3, r2
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <GetCalcMmhgSensorPressure1+0x70>)
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800136c <GetCalcMmhgSensorPressure1+0x74>
 8001322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001326:	ee17 0a90 	vmov	r0, s15
 800132a:	f7ff f945 	bl	80005b8 <__aeabi_f2d>
 800132e:	a30a      	add	r3, pc, #40	; (adr r3, 8001358 <GetCalcMmhgSensorPressure1+0x60>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	f7ff f998 	bl	8000668 <__aeabi_dmul>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f7ff fc8a 	bl	8000c58 <__aeabi_d2f>
 8001344:	4603      	mov	r3, r0
 8001346:	ee07 3a90 	vmov	s15, r3
}
 800134a:	eeb0 0a67 	vmov.f32	s0, s15
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	f3af 8000 	nop.w
 8001358:	0728e92d 	.word	0x0728e92d
 800135c:	3fe789b3 	.word	0x3fe789b3
 8001360:	20000598 	.word	0x20000598
 8001364:	20000000 	.word	0x20000000
 8001368:	20000004 	.word	0x20000004
 800136c:	3f82860f 	.word	0x3f82860f

08001370 <Get12vValue>:


float Get12vValue()
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
	return adc1Values[ADC1_CHANNEL_12V] * Adc3_3VIndexToMiliVolts;
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <Get12vValue+0x24>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	ee07 3a90 	vmov	s15, r3
 800137c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001380:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001398 <Get12vValue+0x28>
 8001384:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001388:	eeb0 0a67 	vmov.f32	s0, s15
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	20000598 	.word	0x20000598
 8001398:	3f4e4000 	.word	0x3f4e4000

0800139c <Get5VRefValue>:

float Get5VRefValue()
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
	return adc1Values[ADC1_CHANNEL_5VREF] * Adc3_3VIndexToMiliVolts;
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <Get5VRefValue+0x24>)
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ac:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80013c4 <Get5VRefValue+0x28>
 80013b0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80013b4:	eeb0 0a67 	vmov.f32	s0, s15
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20000598 	.word	0x20000598
 80013c4:	3f4e4000 	.word	0x3f4e4000

080013c8 <GetCabTempValue>:

float GetCabTempValue()
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
	return adc1Values[ADC1_CHANNEL_CabTemp] * Adc3_3VIndexToMiliVolts;
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <GetCabTempValue+0x24>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	ee07 3a90 	vmov	s15, r3
 80013d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013d8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80013f0 <GetCabTempValue+0x28>
 80013dc:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80013e0:	eeb0 0a67 	vmov.f32	s0, s15
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	20000598 	.word	0x20000598
 80013f0:	3f4e4000 	.word	0x3f4e4000

080013f4 <SetAdc3CompleteFlag>:
	SetAdc3CompleteFlag( false );
	HAL_ADC_Start_DMA(&hadc3, adc3Values, NUM_ADC3_CHANNELS);
}

void SetAdc3CompleteFlag( bool complete )
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
	adc3DmaComplete = complete;
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <SetAdc3CompleteFlag+0x1c>)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	7013      	strb	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	20000595 	.word	0x20000595

08001414 <GetPfcCurrentMonRawAdc>:
{
	return adc3Values[ADC3_CHANNEL_ADC_5V];
}

uint32_t GetPfcCurrentMonRawAdc()
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
	return adc3Values[ADC3_CHANNEL_PFCCurrMon];
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <GetPfcCurrentMonRawAdc+0x14>)
 800141a:	691b      	ldr	r3, [r3, #16]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	200005b4 	.word	0x200005b4

0800142c <GetPfcVOutRawAdc>:
{
	return adc3Values[ADC3_CHANNEL_BUZ_ADC];
}

uint32_t GetPfcVOutRawAdc()
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
	return adc3Values[ADC3_CHANNEL_ADC_PFCVOMon];
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <GetPfcVOutRawAdc+0x14>)
 8001432:	699b      	ldr	r3, [r3, #24]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	200005b4 	.word	0x200005b4

08001444 <GetPfcTempMonRawAdc>:

uint32_t GetPfcTempMonRawAdc()
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
	return adc3Values[ADC3_CHANNEL_PFCTempMon];
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <GetPfcTempMonRawAdc+0x14>)
 800144a:	69db      	ldr	r3, [r3, #28]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	200005b4 	.word	0x200005b4

0800145c <GetMainPcbaCurrentValue>:

/* ADC3 Channels Values*/

float GetMainPcbaCurrentValue()
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
	return adc3Values[ADC3_CHANNEL_MainPcba_Current] * Adc3_3VIndexToMiliVolts;
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <GetMainPcbaCurrentValue+0x24>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	ee07 3a90 	vmov	s15, r3
 8001468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800146c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001484 <GetMainPcbaCurrentValue+0x28>
 8001470:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001474:	eeb0 0a67 	vmov.f32	s0, s15
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	200005b4 	.word	0x200005b4
 8001484:	3f4e4000 	.word	0x3f4e4000

08001488 <GetPower24VoltageValue>:

float GetPower24VoltageValue()
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
	return adc3Values[ADC3_CHANNEL_Power_Voltage] * Power24VIndexToVolts;
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <GetPower24VoltageValue+0x24>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	ee07 3a90 	vmov	s15, r3
 8001494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001498:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014b0 <GetPower24VoltageValue+0x28>
 800149c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	200005b4 	.word	0x200005b4
 80014b0:	3bdded30 	.word	0x3bdded30

080014b4 <Get3V3Value>:

float Get3V3Value()
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
	return adc3Values[ADC3_CHANNEL_ADC_3V3] * Adc3V3IndexToVolts;
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <Get3V3Value+0x24>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014c4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014dc <Get3V3Value+0x28>
 80014c8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80014cc:	eeb0 0a67 	vmov.f32	s0, s15
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	200005b4 	.word	0x200005b4
 80014dc:	3a68c6fe 	.word	0x3a68c6fe

080014e0 <Get5VoltValue>:

float Get5VoltValue()
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
	return adc3Values[ADC3_CHANNEL_ADC_5V] * Adc5VIndexToVolts;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <Get5VoltValue+0x24>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001508 <Get5VoltValue+0x28>
 80014f4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80014f8:	eeb0 0a67 	vmov.f32	s0, s15
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	200005b4 	.word	0x200005b4
 8001508:	3ab00afe 	.word	0x3ab00afe

0800150c <GetPfcCurrentMonValue>:

float GetPfcCurrentMonValue()
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	return (adc3Values[ADC3_CHANNEL_PFCCurrMon] * PfcCurrMonIndexToAmps);
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <GetPfcCurrentMonValue+0x24>)
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	ee07 3a90 	vmov	s15, r3
 8001518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800151c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001534 <GetPfcCurrentMonValue+0x28>
 8001520:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001524:	eeb0 0a67 	vmov.f32	s0, s15
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	200005b4 	.word	0x200005b4
 8001534:	3ad3406a 	.word	0x3ad3406a

08001538 <GetBuzzerValue>:

float GetBuzzerValue()
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
	return adc3Values[ADC3_CHANNEL_BUZ_ADC] * Adc3_3VIndexToMiliVolts;
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <GetBuzzerValue+0x24>)
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	ee07 3a90 	vmov	s15, r3
 8001544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001548:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001560 <GetBuzzerValue+0x28>
 800154c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001550:	eeb0 0a67 	vmov.f32	s0, s15
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	200005b4 	.word	0x200005b4
 8001560:	3f4e4000 	.word	0x3f4e4000

08001564 <GetPfcVOutValue>:

float GetPfcVOutValue()
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
	return adc3Values[ADC3_CHANNEL_ADC_PFCVOMon] * PfcVOutIndexToVolts;
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <GetPfcVOutValue+0x24>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	ee07 3a90 	vmov	s15, r3
 8001570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001574:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800158c <GetPfcVOutValue+0x28>
 8001578:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800157c:	eeb0 0a67 	vmov.f32	s0, s15
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	200005b4 	.word	0x200005b4
 800158c:	3e18d06d 	.word	0x3e18d06d

08001590 <GetPfcTempMonValue>:

float GetPfcTempMonValue()
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
	return adc3Values[ADC3_CHANNEL_PFCTempMon] * PfcTempMonIndexToCentig;  //Modified GG 10/5/21
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <GetPfcTempMonValue+0x24>)
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80015b8 <GetPfcTempMonValue+0x28>
 80015a4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80015a8:	eeb0 0a67 	vmov.f32	s0, s15
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	200005b4 	.word	0x200005b4
 80015b8:	3df78f7d 	.word	0x3df78f7d

080015bc <ReadAdc1Channels>:

void ReadAdc1Channels()
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
	// Get fresh ADC values for print out
	HAL_ADC_Stop_DMA(&hadc1);
 80015c2:	4812      	ldr	r0, [pc, #72]	; (800160c <ReadAdc1Channels+0x50>)
 80015c4:	f008 f81c 	bl	8009600 <HAL_ADC_Stop_DMA>

	adc1DmaComplete = false;
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <ReadAdc1Channels+0x54>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, adc1Values, NUM_ADC1_CHANNELS);
 80015ce:	2207      	movs	r2, #7
 80015d0:	4910      	ldr	r1, [pc, #64]	; (8001614 <ReadAdc1Channels+0x58>)
 80015d2:	480e      	ldr	r0, [pc, #56]	; (800160c <ReadAdc1Channels+0x50>)
 80015d4:	f007 ff1a 	bl	800940c <HAL_ADC_Start_DMA>

	// Ensure that DMA is complete before reading ADC 1 values
	uint32_t startWaitTime = HAL_GetTick();
 80015d8:	f007 fdd6 	bl	8009188 <HAL_GetTick>
 80015dc:	6078      	str	r0, [r7, #4]

	while(adc1DmaComplete == false)
 80015de:	e00a      	b.n	80015f6 <ReadAdc1Channels+0x3a>
	{
		if ( (HAL_GetTick() - startWaitTime) > 3 ) // 3 ms
 80015e0:	f007 fdd2 	bl	8009188 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d903      	bls.n	80015f6 <ReadAdc1Channels+0x3a>
		{
			UartPrintf("ADC1 DMA not complete for 3 ms\n");
 80015ee:	480a      	ldr	r0, [pc, #40]	; (8001618 <ReadAdc1Channels+0x5c>)
 80015f0:	f004 fb96 	bl	8005d20 <UartPrintf>
			return; // Wait too long for ADC1 DMA to complete
 80015f4:	e006      	b.n	8001604 <ReadAdc1Channels+0x48>
	while(adc1DmaComplete == false)
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <ReadAdc1Channels+0x54>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	f083 0301 	eor.w	r3, r3, #1
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1ed      	bne.n	80015e0 <ReadAdc1Channels+0x24>
		}
	}
}
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20004100 	.word	0x20004100
 8001610:	20000594 	.word	0x20000594
 8001614:	20000598 	.word	0x20000598
 8001618:	08020e88 	.word	0x08020e88

0800161c <PrintAdc1Channels>:

void PrintAdc1Channels( )
{
 800161c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001620:	b09a      	sub	sp, #104	; 0x68
 8001622:	af0c      	add	r7, sp, #48	; 0x30
	// Get fresh ADC values for print out
	HAL_ADC_Stop_DMA(&hadc1);
 8001624:	4841      	ldr	r0, [pc, #260]	; (800172c <PrintAdc1Channels+0x110>)
 8001626:	f007 ffeb 	bl	8009600 <HAL_ADC_Stop_DMA>

	adc1DmaComplete = false;
 800162a:	4b41      	ldr	r3, [pc, #260]	; (8001730 <PrintAdc1Channels+0x114>)
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, adc1Values, NUM_ADC1_CHANNELS);
 8001630:	2207      	movs	r2, #7
 8001632:	4940      	ldr	r1, [pc, #256]	; (8001734 <PrintAdc1Channels+0x118>)
 8001634:	483d      	ldr	r0, [pc, #244]	; (800172c <PrintAdc1Channels+0x110>)
 8001636:	f007 fee9 	bl	800940c <HAL_ADC_Start_DMA>

	// Ensure that DMA is complete before reading ADC 1 values
	uint32_t startWaitTime = HAL_GetTick();
 800163a:	f007 fda5 	bl	8009188 <HAL_GetTick>
 800163e:	6378      	str	r0, [r7, #52]	; 0x34

	while(adc1DmaComplete == false)
 8001640:	e00a      	b.n	8001658 <PrintAdc1Channels+0x3c>
	{
		if ( (HAL_GetTick() - startWaitTime) > 3 ) // 3 ms
 8001642:	f007 fda1 	bl	8009188 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b03      	cmp	r3, #3
 800164e:	d903      	bls.n	8001658 <PrintAdc1Channels+0x3c>
		{
			UartPrintf("ADC1 DMA not complete for 3 ms\n");
 8001650:	4839      	ldr	r0, [pc, #228]	; (8001738 <PrintAdc1Channels+0x11c>)
 8001652:	f004 fb65 	bl	8005d20 <UartPrintf>
			return; // Wait too long for ADC1 DMA to complete
 8001656:	e065      	b.n	8001724 <PrintAdc1Channels+0x108>
	while(adc1DmaComplete == false)
 8001658:	4b35      	ldr	r3, [pc, #212]	; (8001730 <PrintAdc1Channels+0x114>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	f083 0301 	eor.w	r3, r3, #1
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1ed      	bne.n	8001642 <PrintAdc1Channels+0x26>
		}
	}

	HAL_ADC_Stop_DMA(&hadc1);
 8001666:	4831      	ldr	r0, [pc, #196]	; (800172c <PrintAdc1Channels+0x110>)
 8001668:	f007 ffca 	bl	8009600 <HAL_ADC_Stop_DMA>
	//UartPrintf("%d  %d  %d  %d  %d  %d  %d\n",
	//			GetPressureSensor1RawAdc(), GetPressureSensor2RawAdc(), GetPressureSensor3RawAdc(), GetPressureSensor4RawAdc(),
	//		    Get12VRawAdc(), Get5VRefRawAdc(), GetCabTempRawAdc());

	// Read ADC1 values for pressure sensors
	float pressureSensor3Print = GetPressureSensor3Value();
 800166c:	f7ff fd1e 	bl	80010ac <GetPressureSensor3Value>
 8001670:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	float pressureSensor1Print = GetPressureSensor1Value();
 8001674:	f7ff fd30 	bl	80010d8 <GetPressureSensor1Value>
 8001678:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float pressureSensor2Print = GetPressureSensor2Value();
 800167c:	f7ff fd42 	bl	8001104 <GetPressureSensor2Value>
 8001680:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	float twelveVoltPrint      = Get12vValue();
 8001684:	f7ff fe74 	bl	8001370 <Get12vValue>
 8001688:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float fiveVoltRefPrint     = Get5VRefValue();
 800168c:	f7ff fe86 	bl	800139c <Get5VRefValue>
 8001690:	ed87 0a08 	vstr	s0, [r7, #32]
	float pressureSensor4Print = GetPressureSensor4Value();
 8001694:	f7ff fd4c 	bl	8001130 <GetPressureSensor4Value>
 8001698:	ed87 0a07 	vstr	s0, [r7, #28]
	float cabTempPrint         = GetCabTempValue();
 800169c:	f7ff fe94 	bl	80013c8 <GetCabTempValue>
 80016a0:	ed87 0a06 	vstr	s0, [r7, #24]

	UartPrintf("\nPSensor1:  %4.3f mV\n"
 80016a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016a6:	f7fe ff87 	bl	80005b8 <__aeabi_f2d>
 80016aa:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80016ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016b0:	f7fe ff82 	bl	80005b8 <__aeabi_f2d>
 80016b4:	4680      	mov	r8, r0
 80016b6:	4689      	mov	r9, r1
 80016b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016ba:	f7fe ff7d 	bl	80005b8 <__aeabi_f2d>
 80016be:	4682      	mov	sl, r0
 80016c0:	468b      	mov	fp, r1
 80016c2:	69f8      	ldr	r0, [r7, #28]
 80016c4:	f7fe ff78 	bl	80005b8 <__aeabi_f2d>
 80016c8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80016cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016ce:	f7fe ff73 	bl	80005b8 <__aeabi_f2d>
 80016d2:	e9c7 0100 	strd	r0, r1, [r7]
 80016d6:	6a38      	ldr	r0, [r7, #32]
 80016d8:	f7fe ff6e 	bl	80005b8 <__aeabi_f2d>
 80016dc:	4604      	mov	r4, r0
 80016de:	460d      	mov	r5, r1
 80016e0:	69b8      	ldr	r0, [r7, #24]
 80016e2:	f7fe ff69 	bl	80005b8 <__aeabi_f2d>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80016ee:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80016f2:	ed97 7b00 	vldr	d7, [r7]
 80016f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80016fa:	ed97 7b02 	vldr	d7, [r7, #8]
 80016fe:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001702:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001706:	e9cd 8900 	strd	r8, r9, [sp]
 800170a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800170e:	480b      	ldr	r0, [pc, #44]	; (800173c <PrintAdc1Channels+0x120>)
 8001710:	f004 fb06 	bl	8005d20 <UartPrintf>
			   "5V Ref:    %4.3f mV\n"
			   "CabTemp:   %4.3f mV\n",
			   pressureSensor1Print, pressureSensor2Print, pressureSensor3Print, pressureSensor4Print,
			   twelveVoltPrint, fiveVoltRefPrint, cabTempPrint);

	adc1DmaComplete = false;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <PrintAdc1Channels+0x114>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, adc1Values, NUM_ADC1_CHANNELS);
 800171a:	2207      	movs	r2, #7
 800171c:	4905      	ldr	r1, [pc, #20]	; (8001734 <PrintAdc1Channels+0x118>)
 800171e:	4803      	ldr	r0, [pc, #12]	; (800172c <PrintAdc1Channels+0x110>)
 8001720:	f007 fe74 	bl	800940c <HAL_ADC_Start_DMA>
}
 8001724:	3738      	adds	r7, #56	; 0x38
 8001726:	46bd      	mov	sp, r7
 8001728:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800172c:	20004100 	.word	0x20004100
 8001730:	20000594 	.word	0x20000594
 8001734:	20000598 	.word	0x20000598
 8001738:	08020e88 	.word	0x08020e88
 800173c:	08020ea8 	.word	0x08020ea8

08001740 <PrintAdc1ChannelsSpecifiedNumberOfTimes>:

void PrintAdc1ChannelsSpecifiedNumberOfTimes( uint16_t numReads )
{
 8001740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001744:	b09e      	sub	sp, #120	; 0x78
 8001746:	af0c      	add	r7, sp, #48	; 0x30
 8001748:	4603      	mov	r3, r0
 800174a:	83fb      	strh	r3, [r7, #30]
	// Get fresh ADC values for print out
	HAL_ADC_Stop_DMA(&hadc1);
 800174c:	484b      	ldr	r0, [pc, #300]	; (800187c <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x13c>)
 800174e:	f007 ff57 	bl	8009600 <HAL_ADC_Stop_DMA>

	adc1DmaComplete = false;
 8001752:	4b4b      	ldr	r3, [pc, #300]	; (8001880 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x140>)
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, adc1Values, NUM_ADC1_CHANNELS);
 8001758:	2207      	movs	r2, #7
 800175a:	494a      	ldr	r1, [pc, #296]	; (8001884 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x144>)
 800175c:	4847      	ldr	r0, [pc, #284]	; (800187c <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x13c>)
 800175e:	f007 fe55 	bl	800940c <HAL_ADC_Start_DMA>

	UartPrintfWithoutPrompt("  PSensor1  PSensor2  PSensor3  PSensor4  12Volts  5VoltsRef  CabTemp\n");
 8001762:	4849      	ldr	r0, [pc, #292]	; (8001888 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x148>)
 8001764:	f004 fb22 	bl	8005dac <UartPrintfWithoutPrompt>

	for( int i = 0; i<numReads; i++ )
 8001768:	2300      	movs	r3, #0
 800176a:	647b      	str	r3, [r7, #68]	; 0x44
 800176c:	e07a      	b.n	8001864 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x124>
	{
		// Ensure that DMA is complete before reading ADC 1 values
		uint32_t startWaitTime = HAL_GetTick();
 800176e:	f007 fd0b 	bl	8009188 <HAL_GetTick>
 8001772:	6438      	str	r0, [r7, #64]	; 0x40

		while(adc1DmaComplete == false)
 8001774:	e00a      	b.n	800178c <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x4c>
		{
			if ( (HAL_GetTick() - startWaitTime) > 3 ) // 3 ms
 8001776:	f007 fd07 	bl	8009188 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b03      	cmp	r3, #3
 8001782:	d903      	bls.n	800178c <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x4c>
			{
				UartPrintf("ADC1 DMA not complete for 3 ms\n");
 8001784:	4841      	ldr	r0, [pc, #260]	; (800188c <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x14c>)
 8001786:	f004 facb 	bl	8005d20 <UartPrintf>
				return; // Wait too long for ADC1 DMA to complete
 800178a:	e072      	b.n	8001872 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x132>
		while(adc1DmaComplete == false)
 800178c:	4b3c      	ldr	r3, [pc, #240]	; (8001880 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x140>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	f083 0301 	eor.w	r3, r3, #1
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1ed      	bne.n	8001776 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x36>
			}
		}

		HAL_ADC_Stop_DMA(&hadc1);
 800179a:	4838      	ldr	r0, [pc, #224]	; (800187c <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x13c>)
 800179c:	f007 ff30 	bl	8009600 <HAL_ADC_Stop_DMA>

		// Read ADC1 values for pressure sensors
		float pressureSensor3Print = GetPressureSensor3Value();
 80017a0:	f7ff fc84 	bl	80010ac <GetPressureSensor3Value>
 80017a4:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		float pressureSensor1Print = GetPressureSensor1Value();
 80017a8:	f7ff fc96 	bl	80010d8 <GetPressureSensor1Value>
 80017ac:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
		float pressureSensor2Print = GetPressureSensor2Value();
 80017b0:	f7ff fca8 	bl	8001104 <GetPressureSensor2Value>
 80017b4:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
		float twelveVoltPrint      = Get12vValue();
 80017b8:	f7ff fdda 	bl	8001370 <Get12vValue>
 80017bc:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
		float fiveVoltRefPrint     = Get5VRefValue();
 80017c0:	f7ff fdec 	bl	800139c <Get5VRefValue>
 80017c4:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
		float pressureSensor4Print = GetPressureSensor4Value();
 80017c8:	f7ff fcb2 	bl	8001130 <GetPressureSensor4Value>
 80017cc:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
		float cabTempPrint         = GetCabTempValue();
 80017d0:	f7ff fdfa 	bl	80013c8 <GetCabTempValue>
 80017d4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

		adc1DmaComplete = false;
 80017d8:	4b29      	ldr	r3, [pc, #164]	; (8001880 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x140>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]

		HAL_ADC_Start_DMA(&hadc1, adc1Values, NUM_ADC1_CHANNELS);
 80017de:	2207      	movs	r2, #7
 80017e0:	4928      	ldr	r1, [pc, #160]	; (8001884 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x144>)
 80017e2:	4826      	ldr	r0, [pc, #152]	; (800187c <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x13c>)
 80017e4:	f007 fe12 	bl	800940c <HAL_ADC_Start_DMA>

		UartPrintfWithoutPrompt("%4.3f   %4.3f   %4.3f   %4.3f   %4.3f   %4.3f   %4.3f\n",
 80017e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80017ea:	f7fe fee5 	bl	80005b8 <__aeabi_f2d>
 80017ee:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80017f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017f4:	f7fe fee0 	bl	80005b8 <__aeabi_f2d>
 80017f8:	4680      	mov	r8, r0
 80017fa:	4689      	mov	r9, r1
 80017fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80017fe:	f7fe fedb 	bl	80005b8 <__aeabi_f2d>
 8001802:	4682      	mov	sl, r0
 8001804:	468b      	mov	fp, r1
 8001806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001808:	f7fe fed6 	bl	80005b8 <__aeabi_f2d>
 800180c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001810:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001812:	f7fe fed1 	bl	80005b8 <__aeabi_f2d>
 8001816:	e9c7 0100 	strd	r0, r1, [r7]
 800181a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800181c:	f7fe fecc 	bl	80005b8 <__aeabi_f2d>
 8001820:	4604      	mov	r4, r0
 8001822:	460d      	mov	r5, r1
 8001824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001826:	f7fe fec7 	bl	80005b8 <__aeabi_f2d>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001832:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001836:	ed97 7b00 	vldr	d7, [r7]
 800183a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800183e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001842:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001846:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800184a:	e9cd 8900 	strd	r8, r9, [sp]
 800184e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001852:	480f      	ldr	r0, [pc, #60]	; (8001890 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x150>)
 8001854:	f004 faaa 	bl	8005dac <UartPrintfWithoutPrompt>
				               pressureSensor1Print, pressureSensor2Print, pressureSensor3Print, pressureSensor4Print,
							   twelveVoltPrint, fiveVoltRefPrint, cabTempPrint);

		HAL_Delay(5);
 8001858:	2005      	movs	r0, #5
 800185a:	f007 fca1 	bl	80091a0 <HAL_Delay>
	for( int i = 0; i<numReads; i++ )
 800185e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001860:	3301      	adds	r3, #1
 8001862:	647b      	str	r3, [r7, #68]	; 0x44
 8001864:	8bfb      	ldrh	r3, [r7, #30]
 8001866:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001868:	429a      	cmp	r2, r3
 800186a:	db80      	blt.n	800176e <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x2e>
	}

	UartPrintf("");
 800186c:	4809      	ldr	r0, [pc, #36]	; (8001894 <PrintAdc1ChannelsSpecifiedNumberOfTimes+0x154>)
 800186e:	f004 fa57 	bl	8005d20 <UartPrintf>
}
 8001872:	3748      	adds	r7, #72	; 0x48
 8001874:	46bd      	mov	sp, r7
 8001876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800187a:	bf00      	nop
 800187c:	20004100 	.word	0x20004100
 8001880:	20000594 	.word	0x20000594
 8001884:	20000598 	.word	0x20000598
 8001888:	08020f38 	.word	0x08020f38
 800188c:	08020e88 	.word	0x08020e88
 8001890:	08020f80 	.word	0x08020f80
 8001894:	08020fb8 	.word	0x08020fb8

08001898 <ReadAdc3Channels>:

void ReadAdc3Channels()
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
	// Get fresh ADC values for print out
	HAL_ADC_Stop_DMA(&hadc3);
 800189e:	4812      	ldr	r0, [pc, #72]	; (80018e8 <ReadAdc3Channels+0x50>)
 80018a0:	f007 feae 	bl	8009600 <HAL_ADC_Stop_DMA>

	adc3DmaComplete = false;
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <ReadAdc3Channels+0x54>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc3, adc3Values, NUM_ADC3_CHANNELS);
 80018aa:	2208      	movs	r2, #8
 80018ac:	4910      	ldr	r1, [pc, #64]	; (80018f0 <ReadAdc3Channels+0x58>)
 80018ae:	480e      	ldr	r0, [pc, #56]	; (80018e8 <ReadAdc3Channels+0x50>)
 80018b0:	f007 fdac 	bl	800940c <HAL_ADC_Start_DMA>

	// Ensure that DMA is complete before reading ADC 1 values
	uint32_t startWaitTime = HAL_GetTick();
 80018b4:	f007 fc68 	bl	8009188 <HAL_GetTick>
 80018b8:	6078      	str	r0, [r7, #4]

	while(adc3DmaComplete == false)
 80018ba:	e00a      	b.n	80018d2 <ReadAdc3Channels+0x3a>
	{
		if ( (HAL_GetTick() - startWaitTime) > 3 ) // 3 ms
 80018bc:	f007 fc64 	bl	8009188 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d903      	bls.n	80018d2 <ReadAdc3Channels+0x3a>
		{
			UartPrintf("ADC3 DMA not complete for 3 ms\n");
 80018ca:	480a      	ldr	r0, [pc, #40]	; (80018f4 <ReadAdc3Channels+0x5c>)
 80018cc:	f004 fa28 	bl	8005d20 <UartPrintf>
			return; // Wait too long for ADC1 DMA to complete
 80018d0:	e006      	b.n	80018e0 <ReadAdc3Channels+0x48>
	while(adc3DmaComplete == false)
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <ReadAdc3Channels+0x54>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	f083 0301 	eor.w	r3, r3, #1
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1ed      	bne.n	80018bc <ReadAdc3Channels+0x24>
		}
	}
}
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20004148 	.word	0x20004148
 80018ec:	20000595 	.word	0x20000595
 80018f0:	200005b4 	.word	0x200005b4
 80018f4:	08020fbc 	.word	0x08020fbc

080018f8 <PrintAdc3Channels>:

void PrintAdc3Channels( )
{
 80018f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018fc:	b0a0      	sub	sp, #128	; 0x80
 80018fe:	af0e      	add	r7, sp, #56	; 0x38
	// Get fresh ADC values for print out
	HAL_ADC_Stop_DMA(&hadc3);
 8001900:	4848      	ldr	r0, [pc, #288]	; (8001a24 <PrintAdc3Channels+0x12c>)
 8001902:	f007 fe7d 	bl	8009600 <HAL_ADC_Stop_DMA>

	adc3DmaComplete = false;
 8001906:	4b48      	ldr	r3, [pc, #288]	; (8001a28 <PrintAdc3Channels+0x130>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc3, adc3Values, NUM_ADC3_CHANNELS);
 800190c:	2208      	movs	r2, #8
 800190e:	4947      	ldr	r1, [pc, #284]	; (8001a2c <PrintAdc3Channels+0x134>)
 8001910:	4844      	ldr	r0, [pc, #272]	; (8001a24 <PrintAdc3Channels+0x12c>)
 8001912:	f007 fd7b 	bl	800940c <HAL_ADC_Start_DMA>

	// Ensure that DMA is complete before reading ADC 1 values
	uint32_t startWaitTime = HAL_GetTick();
 8001916:	f007 fc37 	bl	8009188 <HAL_GetTick>
 800191a:	6478      	str	r0, [r7, #68]	; 0x44

	while(adc3DmaComplete == false)
 800191c:	e00a      	b.n	8001934 <PrintAdc3Channels+0x3c>
	{
		if ( (HAL_GetTick() - startWaitTime) > 3 ) // 3 ms
 800191e:	f007 fc33 	bl	8009188 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b03      	cmp	r3, #3
 800192a:	d903      	bls.n	8001934 <PrintAdc3Channels+0x3c>
		{
			UartPrintf("ADC3 DMA not complete for 3 ms\n");
 800192c:	4840      	ldr	r0, [pc, #256]	; (8001a30 <PrintAdc3Channels+0x138>)
 800192e:	f004 f9f7 	bl	8005d20 <UartPrintf>
			return; // Wait too long for ADC3 DMA to complete
 8001932:	e072      	b.n	8001a1a <PrintAdc3Channels+0x122>
	while(adc3DmaComplete == false)
 8001934:	4b3c      	ldr	r3, [pc, #240]	; (8001a28 <PrintAdc3Channels+0x130>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	f083 0301 	eor.w	r3, r3, #1
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1ed      	bne.n	800191e <PrintAdc3Channels+0x26>
		}
	}

	HAL_ADC_Stop_DMA(&hadc3);
 8001942:	4838      	ldr	r0, [pc, #224]	; (8001a24 <PrintAdc3Channels+0x12c>)
 8001944:	f007 fe5c 	bl	8009600 <HAL_ADC_Stop_DMA>

	// Read ADC3 values
	float mainPcbaCurrentPrint = GetMainPcbaCurrentValue();
 8001948:	f7ff fd88 	bl	800145c <GetMainPcbaCurrentValue>
 800194c:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
	float power24VPrint        = GetPower24VoltageValue();
 8001950:	f7ff fd9a 	bl	8001488 <GetPower24VoltageValue>
 8001954:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	float threethreeVoltsPrint = Get3V3Value();
 8001958:	f7ff fdac 	bl	80014b4 <Get3V3Value>
 800195c:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
	float fiveVoltsPrint       = Get5VoltValue();
 8001960:	f7ff fdbe 	bl	80014e0 <Get5VoltValue>
 8001964:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float pfcCurrentMonPrint   = GetPfcCurrentMonValue();
 8001968:	f7ff fdd0 	bl	800150c <GetPfcCurrentMonValue>
 800196c:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	float buzzerPrint          = GetBuzzerValue();
 8001970:	f7ff fde2 	bl	8001538 <GetBuzzerValue>
 8001974:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float pfcVoutPrint         = GetPfcVOutValue();
 8001978:	f7ff fdf4 	bl	8001564 <GetPfcVOutValue>
 800197c:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    float pfcTempMonPrint      = GetPfcTempMonValue();
 8001980:	f7ff fe06 	bl	8001590 <GetPfcTempMonValue>
 8001984:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	UartPrintf("\nMain Current:  %4.3f mA\n"
 8001988:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800198a:	f7fe fe15 	bl	80005b8 <__aeabi_f2d>
 800198e:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001992:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001994:	f7fe fe10 	bl	80005b8 <__aeabi_f2d>
 8001998:	4682      	mov	sl, r0
 800199a:	468b      	mov	fp, r1
 800199c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800199e:	f7fe fe0b 	bl	80005b8 <__aeabi_f2d>
 80019a2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80019a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019a8:	f7fe fe06 	bl	80005b8 <__aeabi_f2d>
 80019ac:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80019b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019b2:	f7fe fe01 	bl	80005b8 <__aeabi_f2d>
 80019b6:	e9c7 0100 	strd	r0, r1, [r7]
 80019ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019bc:	f7fe fdfc 	bl	80005b8 <__aeabi_f2d>
 80019c0:	4680      	mov	r8, r0
 80019c2:	4689      	mov	r9, r1
 80019c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019c6:	f7fe fdf7 	bl	80005b8 <__aeabi_f2d>
 80019ca:	4604      	mov	r4, r0
 80019cc:	460d      	mov	r5, r1
 80019ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019d0:	f7fe fdf2 	bl	80005b8 <__aeabi_f2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80019dc:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80019e0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80019e4:	ed97 7b00 	vldr	d7, [r7]
 80019e8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80019ec:	ed97 7b02 	vldr	d7, [r7, #8]
 80019f0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80019f4:	ed97 7b04 	vldr	d7, [r7, #16]
 80019f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80019fc:	e9cd ab00 	strd	sl, fp, [sp]
 8001a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a04:	480b      	ldr	r0, [pc, #44]	; (8001a34 <PrintAdc3Channels+0x13c>)
 8001a06:	f004 f98b 	bl	8005d20 <UartPrintf>
			   "PFC Vout:     %4.3f V\n"
			   "PFC Temp:     %4.3f mV\n",
			   mainPcbaCurrentPrint, power24VPrint, threethreeVoltsPrint, fiveVoltsPrint,
			   pfcCurrentMonPrint, buzzerPrint, pfcVoutPrint, pfcTempMonPrint);

	adc3DmaComplete = false;
 8001a0a:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <PrintAdc3Channels+0x130>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc3, adc3Values, NUM_ADC3_CHANNELS);
 8001a10:	2208      	movs	r2, #8
 8001a12:	4906      	ldr	r1, [pc, #24]	; (8001a2c <PrintAdc3Channels+0x134>)
 8001a14:	4803      	ldr	r0, [pc, #12]	; (8001a24 <PrintAdc3Channels+0x12c>)
 8001a16:	f007 fcf9 	bl	800940c <HAL_ADC_Start_DMA>
}
 8001a1a:	3748      	adds	r7, #72	; 0x48
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a22:	bf00      	nop
 8001a24:	20004148 	.word	0x20004148
 8001a28:	20000595 	.word	0x20000595
 8001a2c:	200005b4 	.word	0x200005b4
 8001a30:	08020fbc 	.word	0x08020fbc
 8001a34:	08020fdc 	.word	0x08020fdc

08001a38 <PrintAdc3ChannelsSpecifiedNumberOfTimes>:

void PrintAdc3ChannelsSpecifiedNumberOfTimes( uint16_t numReads )
{
 8001a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a3c:	b0a2      	sub	sp, #136	; 0x88
 8001a3e:	af0e      	add	r7, sp, #56	; 0x38
 8001a40:	4603      	mov	r3, r0
 8001a42:	84fb      	strh	r3, [r7, #38]	; 0x26
	// Get fresh ADC values for print out
	HAL_ADC_Stop_DMA(&hadc3);
 8001a44:	4852      	ldr	r0, [pc, #328]	; (8001b90 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x158>)
 8001a46:	f007 fddb 	bl	8009600 <HAL_ADC_Stop_DMA>

	adc3DmaComplete = false;
 8001a4a:	4b52      	ldr	r3, [pc, #328]	; (8001b94 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x15c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc3, adc3Values, NUM_ADC3_CHANNELS);
 8001a50:	2208      	movs	r2, #8
 8001a52:	4951      	ldr	r1, [pc, #324]	; (8001b98 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x160>)
 8001a54:	484e      	ldr	r0, [pc, #312]	; (8001b90 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x158>)
 8001a56:	f007 fcd9 	bl	800940c <HAL_ADC_Start_DMA>

	UartPrintfWithoutPrompt("  MainCurrent    Power24V    3.3V    5V    PFCCurrent    Buzzer    PFCVout    PFCTemp\n");
 8001a5a:	4850      	ldr	r0, [pc, #320]	; (8001b9c <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x164>)
 8001a5c:	f004 f9a6 	bl	8005dac <UartPrintfWithoutPrompt>

	for( int i = 0; i<numReads; i++ )
 8001a60:	2300      	movs	r3, #0
 8001a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a64:	e087      	b.n	8001b76 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x13e>
	{
		// Ensure that DMA is complete before reading ADC 1 values
		uint32_t startWaitTime = HAL_GetTick();
 8001a66:	f007 fb8f 	bl	8009188 <HAL_GetTick>
 8001a6a:	64b8      	str	r0, [r7, #72]	; 0x48

		while(adc3DmaComplete == false)
 8001a6c:	e00a      	b.n	8001a84 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x4c>
		{
			if ( (HAL_GetTick() - startWaitTime) > 3 ) // 3 ms
 8001a6e:	f007 fb8b 	bl	8009188 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d903      	bls.n	8001a84 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x4c>
			{
				UartPrintf("ADC3 DMA not complete for 3 ms\n");
 8001a7c:	4848      	ldr	r0, [pc, #288]	; (8001ba0 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x168>)
 8001a7e:	f004 f94f 	bl	8005d20 <UartPrintf>
				return; // Wait too long for ADC1 DMA to complete
 8001a82:	e080      	b.n	8001b86 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x14e>
		while(adc3DmaComplete == false)
 8001a84:	4b43      	ldr	r3, [pc, #268]	; (8001b94 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x15c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	f083 0301 	eor.w	r3, r3, #1
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1ed      	bne.n	8001a6e <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x36>
			}
		}

		HAL_ADC_Stop_DMA(&hadc3);
 8001a92:	483f      	ldr	r0, [pc, #252]	; (8001b90 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x158>)
 8001a94:	f007 fdb4 	bl	8009600 <HAL_ADC_Stop_DMA>

		// Read ADC3 values
		float mainPcbaCurrentPrint = GetMainPcbaCurrentValue();
 8001a98:	f7ff fce0 	bl	800145c <GetMainPcbaCurrentValue>
 8001a9c:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
		float power24VPrint        = GetPower24VoltageValue();
 8001aa0:	f7ff fcf2 	bl	8001488 <GetPower24VoltageValue>
 8001aa4:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
		float threethreeVoltsPrint = Get3V3Value();
 8001aa8:	f7ff fd04 	bl	80014b4 <Get3V3Value>
 8001aac:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		float fiveVoltsPrint       = Get5VoltValue();
 8001ab0:	f7ff fd16 	bl	80014e0 <Get5VoltValue>
 8001ab4:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
		float pfcCurrentMonPrint   = GetPfcCurrentMonValue();
 8001ab8:	f7ff fd28 	bl	800150c <GetPfcCurrentMonValue>
 8001abc:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
		float buzzerPrint          = GetBuzzerValue();
 8001ac0:	f7ff fd3a 	bl	8001538 <GetBuzzerValue>
 8001ac4:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
		float pfcVoutPrint         = GetPfcVOutValue();
 8001ac8:	f7ff fd4c 	bl	8001564 <GetPfcVOutValue>
 8001acc:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	    float pfcTempMonPrint      = GetPfcTempMonValue();
 8001ad0:	f7ff fd5e 	bl	8001590 <GetPfcTempMonValue>
 8001ad4:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28


		adc3DmaComplete = false;
 8001ad8:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x15c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]

		HAL_ADC_Start_DMA(&hadc3, adc3Values, NUM_ADC3_CHANNELS);
 8001ade:	2208      	movs	r2, #8
 8001ae0:	492d      	ldr	r1, [pc, #180]	; (8001b98 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x160>)
 8001ae2:	482b      	ldr	r0, [pc, #172]	; (8001b90 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x158>)
 8001ae4:	f007 fc92 	bl	800940c <HAL_ADC_Start_DMA>

		UartPrintfWithoutPrompt("%4.3f    %4.3f    %4.3f    %4.3f    %4.3f    %4.3f   %4.3f    %4.3f\n",
 8001ae8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001aea:	f7fe fd65 	bl	80005b8 <__aeabi_f2d>
 8001aee:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001af2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001af4:	f7fe fd60 	bl	80005b8 <__aeabi_f2d>
 8001af8:	4682      	mov	sl, r0
 8001afa:	468b      	mov	fp, r1
 8001afc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001afe:	f7fe fd5b 	bl	80005b8 <__aeabi_f2d>
 8001b02:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001b06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b08:	f7fe fd56 	bl	80005b8 <__aeabi_f2d>
 8001b0c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b12:	f7fe fd51 	bl	80005b8 <__aeabi_f2d>
 8001b16:	e9c7 0100 	strd	r0, r1, [r7]
 8001b1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b1c:	f7fe fd4c 	bl	80005b8 <__aeabi_f2d>
 8001b20:	4680      	mov	r8, r0
 8001b22:	4689      	mov	r9, r1
 8001b24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b26:	f7fe fd47 	bl	80005b8 <__aeabi_f2d>
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	460d      	mov	r5, r1
 8001b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b30:	f7fe fd42 	bl	80005b8 <__aeabi_f2d>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001b3c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8001b40:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001b44:	ed97 7b00 	vldr	d7, [r7]
 8001b48:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001b4c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001b50:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001b54:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001b5c:	e9cd ab00 	strd	sl, fp, [sp]
 8001b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b64:	480f      	ldr	r0, [pc, #60]	; (8001ba4 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x16c>)
 8001b66:	f004 f921 	bl	8005dac <UartPrintfWithoutPrompt>
				                mainPcbaCurrentPrint, power24VPrint, threethreeVoltsPrint, fiveVoltsPrint,
							    pfcCurrentMonPrint, buzzerPrint, pfcVoutPrint, pfcTempMonPrint);

		HAL_Delay(5);
 8001b6a:	2005      	movs	r0, #5
 8001b6c:	f007 fb18 	bl	80091a0 <HAL_Delay>
	for( int i = 0; i<numReads; i++ )
 8001b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b72:	3301      	adds	r3, #1
 8001b74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	f6ff af73 	blt.w	8001a66 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x2e>
	}

	UartPrintf("");
 8001b80:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <PrintAdc3ChannelsSpecifiedNumberOfTimes+0x170>)
 8001b82:	f004 f8cd 	bl	8005d20 <UartPrintf>
}
 8001b86:	3750      	adds	r7, #80	; 0x50
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b8e:	bf00      	nop
 8001b90:	20004148 	.word	0x20004148
 8001b94:	20000595 	.word	0x20000595
 8001b98:	200005b4 	.word	0x200005b4
 8001b9c:	08021094 	.word	0x08021094
 8001ba0:	08020fbc 	.word	0x08020fbc
 8001ba4:	080210ec 	.word	0x080210ec
 8001ba8:	08020fb8 	.word	0x08020fb8

08001bac <BUZZER_Request>:
 * wWaitNextSequenceMs time wait for next sequence start
 */

void BUZZER_Request(BUZZER_TONE_TYPE eBuzzerType, uint16_t wOnTimeMs, uint16_t wOffTimeMs,
		            uint16_t wWaitBetweenBeepMs, uint16_t wWaitNextSequenceMs)
{
 8001bac:	b490      	push	{r4, r7}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	4608      	mov	r0, r1
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4623      	mov	r3, r4
 8001bbc:	71fb      	strb	r3, [r7, #7]
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	80bb      	strh	r3, [r7, #4]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	807b      	strh	r3, [r7, #2]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	803b      	strh	r3, [r7, #0]
	gstBuzzer->wOnDuration5MsCounts               = (wOnTimeMs / BUZZER_RUN_TIMER_PERIOD_MS);
 8001bca:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <BUZZER_Request+0xec>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	88ba      	ldrh	r2, [r7, #4]
 8001bd0:	4932      	ldr	r1, [pc, #200]	; (8001c9c <BUZZER_Request+0xf0>)
 8001bd2:	fba1 1202 	umull	r1, r2, r1, r2
 8001bd6:	0892      	lsrs	r2, r2, #2
 8001bd8:	b292      	uxth	r2, r2
 8001bda:	809a      	strh	r2, [r3, #4]
	gstBuzzer->wOffDuration5MsCounts              = (wOffTimeMs / BUZZER_RUN_TIMER_PERIOD_MS);
 8001bdc:	4b2e      	ldr	r3, [pc, #184]	; (8001c98 <BUZZER_Request+0xec>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	887a      	ldrh	r2, [r7, #2]
 8001be2:	492e      	ldr	r1, [pc, #184]	; (8001c9c <BUZZER_Request+0xf0>)
 8001be4:	fba1 1202 	umull	r1, r2, r1, r2
 8001be8:	0892      	lsrs	r2, r2, #2
 8001bea:	b292      	uxth	r2, r2
 8001bec:	80da      	strh	r2, [r3, #6]
	gstBuzzer->wWaitBetweenBeepDuration5MsCounts  = (wWaitBetweenBeepMs / BUZZER_RUN_TIMER_PERIOD_MS);
 8001bee:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <BUZZER_Request+0xec>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	883a      	ldrh	r2, [r7, #0]
 8001bf4:	4929      	ldr	r1, [pc, #164]	; (8001c9c <BUZZER_Request+0xf0>)
 8001bf6:	fba1 1202 	umull	r1, r2, r1, r2
 8001bfa:	0892      	lsrs	r2, r2, #2
 8001bfc:	b292      	uxth	r2, r2
 8001bfe:	811a      	strh	r2, [r3, #8]
	gstBuzzer->wWaitNextSequenceDuration5MsCounts = (wWaitNextSequenceMs / BUZZER_RUN_TIMER_PERIOD_MS);
 8001c00:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <BUZZER_Request+0xec>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	8a3a      	ldrh	r2, [r7, #16]
 8001c06:	4925      	ldr	r1, [pc, #148]	; (8001c9c <BUZZER_Request+0xf0>)
 8001c08:	fba1 1202 	umull	r1, r2, r1, r2
 8001c0c:	0892      	lsrs	r2, r2, #2
 8001c0e:	b292      	uxth	r2, r2
 8001c10:	815a      	strh	r2, [r3, #10]
	gstBuzzer->eBuzzerType                        = eBuzzerType;
 8001c12:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <BUZZER_Request+0xec>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	79fa      	ldrb	r2, [r7, #7]
 8001c18:	705a      	strb	r2, [r3, #1]

	switch(eBuzzerType)
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d024      	beq.n	8001c6a <BUZZER_Request+0xbe>
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	dc2f      	bgt.n	8001c84 <BUZZER_Request+0xd8>
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <BUZZER_Request+0x82>
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d011      	beq.n	8001c50 <BUZZER_Request+0xa4>
 8001c2c:	e02a      	b.n	8001c84 <BUZZER_Request+0xd8>
	{
	    case BUZZER_TONE_OFF:
	    {
	    	gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <BUZZER_Request+0xec>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
	    	htim2.Instance->CCR4   = 0;
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <BUZZER_Request+0xf4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40
	    	gstBuzzer->wNumBeeps1   = 0;
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <BUZZER_Request+0xec>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2200      	movs	r2, #0
 8001c44:	709a      	strb	r2, [r3, #2]
	    	gstBuzzer->wNumBeeps2   = 0;
 8001c46:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <BUZZER_Request+0xec>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	70da      	strb	r2, [r3, #3]
	    }
		break;
 8001c4e:	e01e      	b.n	8001c8e <BUZZER_Request+0xe2>

	    case BUZZER_TONE_MED:
	    {
	    	gstBuzzer->eBuzzerState = eBuzzerState_Initiate;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <BUZZER_Request+0xec>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
	    	gstBuzzer->wNumBeeps1   = 3;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <BUZZER_Request+0xec>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	709a      	strb	r2, [r3, #2]
	    	gstBuzzer->wNumBeeps2   = 0;
 8001c60:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <BUZZER_Request+0xec>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2200      	movs	r2, #0
 8001c66:	70da      	strb	r2, [r3, #3]
	    }
		break;
 8001c68:	e011      	b.n	8001c8e <BUZZER_Request+0xe2>

	    case BUZZER_TONE_HIGH:
	    {
	    	gstBuzzer->eBuzzerState = eBuzzerState_Initiate;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <BUZZER_Request+0xec>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
	    	gstBuzzer->wNumBeeps1   = 3;
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <BUZZER_Request+0xec>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2203      	movs	r2, #3
 8001c78:	709a      	strb	r2, [r3, #2]
	    	gstBuzzer->wNumBeeps2   = 2;
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <BUZZER_Request+0xec>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	70da      	strb	r2, [r3, #3]
	    }
	    break;
 8001c82:	e004      	b.n	8001c8e <BUZZER_Request+0xe2>

	    default:
	    	gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <BUZZER_Request+0xec>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
		break;
 8001c8c:	bf00      	nop
	}
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc90      	pop	{r4, r7}
 8001c96:	4770      	bx	lr
 8001c98:	200005e0 	.word	0x200005e0
 8001c9c:	cccccccd 	.word	0xcccccccd
 8001ca0:	20004528 	.word	0x20004528

08001ca4 <BUZZER_Run>:


void BUZZER_Run(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
	static uint16_t wWaitCounts = 0;
	static uint8_t  wBeepCounts = 0;

	switch(gstBuzzer->eBuzzerState)
 8001ca8:	4b95      	ldr	r3, [pc, #596]	; (8001f00 <BUZZER_Run+0x25c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b07      	cmp	r3, #7
 8001cb0:	f200 811f 	bhi.w	8001ef2 <BUZZER_Run+0x24e>
 8001cb4:	a201      	add	r2, pc, #4	; (adr r2, 8001cbc <BUZZER_Run+0x18>)
 8001cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cba:	bf00      	nop
 8001cbc:	08001efd 	.word	0x08001efd
 8001cc0:	08001cdd 	.word	0x08001cdd
 8001cc4:	08001d1f 	.word	0x08001d1f
 8001cc8:	08001d6f 	.word	0x08001d6f
 8001ccc:	08001ddf 	.word	0x08001ddf
 8001cd0:	08001e37 	.word	0x08001e37
 8001cd4:	08001e85 	.word	0x08001e85
 8001cd8:	08001ed5 	.word	0x08001ed5
		break;

		//Set up timer for buzzer on then go to next
		//state to wait for the on time expire
		case eBuzzerState_Initiate:
			if( gstBuzzer->wNumBeeps1 && gstBuzzer->wOnDuration5MsCounts )
 8001cdc:	4b88      	ldr	r3, [pc, #544]	; (8001f00 <BUZZER_Run+0x25c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	789b      	ldrb	r3, [r3, #2]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d016      	beq.n	8001d14 <BUZZER_Run+0x70>
 8001ce6:	4b86      	ldr	r3, [pc, #536]	; (8001f00 <BUZZER_Run+0x25c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	889b      	ldrh	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d011      	beq.n	8001d14 <BUZZER_Run+0x70>
			{
				//get the time Buzzer need to be ON
				wWaitCounts             = gstBuzzer->wOnDuration5MsCounts;
 8001cf0:	4b83      	ldr	r3, [pc, #524]	; (8001f00 <BUZZER_Run+0x25c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	889a      	ldrh	r2, [r3, #4]
 8001cf6:	4b83      	ldr	r3, [pc, #524]	; (8001f04 <BUZZER_Run+0x260>)
 8001cf8:	801a      	strh	r2, [r3, #0]
				wBeepCounts             = gstBuzzer->wNumBeeps1;
 8001cfa:	4b81      	ldr	r3, [pc, #516]	; (8001f00 <BUZZER_Run+0x25c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	789a      	ldrb	r2, [r3, #2]
 8001d00:	4b81      	ldr	r3, [pc, #516]	; (8001f08 <BUZZER_Run+0x264>)
 8001d02:	701a      	strb	r2, [r3, #0]
				gstBuzzer->eBuzzerState = eBuzzerState_BeepOn;
 8001d04:	4b7e      	ldr	r3, [pc, #504]	; (8001f00 <BUZZER_Run+0x25c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	701a      	strb	r2, [r3, #0]
				BUZZER_EnableSound( true );
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f000 f91d 	bl	8001f4c <BUZZER_EnableSound>
			}
			else {
				gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
			}
		break;
 8001d12:	e106      	b.n	8001f22 <BUZZER_Run+0x27e>
				gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
 8001d14:	4b7a      	ldr	r3, [pc, #488]	; (8001f00 <BUZZER_Run+0x25c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
		break;
 8001d1c:	e101      	b.n	8001f22 <BUZZER_Run+0x27e>

		case eBuzzerState_BeepOn:
			if( --wWaitCounts == 0 )
 8001d1e:	4b79      	ldr	r3, [pc, #484]	; (8001f04 <BUZZER_Run+0x260>)
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	4b77      	ldr	r3, [pc, #476]	; (8001f04 <BUZZER_Run+0x260>)
 8001d28:	801a      	strh	r2, [r3, #0]
 8001d2a:	4b76      	ldr	r3, [pc, #472]	; (8001f04 <BUZZER_Run+0x260>)
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 80ec 	bne.w	8001f0c <BUZZER_Run+0x268>
			{

				BUZZER_EnableSound( false );
 8001d34:	2000      	movs	r0, #0
 8001d36:	f000 f909 	bl	8001f4c <BUZZER_EnableSound>
				wBeepCounts--;
 8001d3a:	4b73      	ldr	r3, [pc, #460]	; (8001f08 <BUZZER_Run+0x264>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4b71      	ldr	r3, [pc, #452]	; (8001f08 <BUZZER_Run+0x264>)
 8001d44:	701a      	strb	r2, [r3, #0]

				if( gstBuzzer->wOffDuration5MsCounts ) {
 8001d46:	4b6e      	ldr	r3, [pc, #440]	; (8001f00 <BUZZER_Run+0x25c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	88db      	ldrh	r3, [r3, #6]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d009      	beq.n	8001d64 <BUZZER_Run+0xc0>
					gstBuzzer->eBuzzerState = eBuzzerState_BeepOff;
 8001d50:	4b6b      	ldr	r3, [pc, #428]	; (8001f00 <BUZZER_Run+0x25c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2203      	movs	r2, #3
 8001d56:	701a      	strb	r2, [r3, #0]
					wWaitCounts = gstBuzzer->wOffDuration5MsCounts;
 8001d58:	4b69      	ldr	r3, [pc, #420]	; (8001f00 <BUZZER_Run+0x25c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	88da      	ldrh	r2, [r3, #6]
 8001d5e:	4b69      	ldr	r3, [pc, #420]	; (8001f04 <BUZZER_Run+0x260>)
 8001d60:	801a      	strh	r2, [r3, #0]
				} else {
					gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
				}
			}
		break;
 8001d62:	e0d3      	b.n	8001f0c <BUZZER_Run+0x268>
					gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
 8001d64:	4b66      	ldr	r3, [pc, #408]	; (8001f00 <BUZZER_Run+0x25c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
		break;
 8001d6c:	e0ce      	b.n	8001f0c <BUZZER_Run+0x268>

		case eBuzzerState_BeepOff:
			if( --wWaitCounts == 0 )
 8001d6e:	4b65      	ldr	r3, [pc, #404]	; (8001f04 <BUZZER_Run+0x260>)
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	4b63      	ldr	r3, [pc, #396]	; (8001f04 <BUZZER_Run+0x260>)
 8001d78:	801a      	strh	r2, [r3, #0]
 8001d7a:	4b62      	ldr	r3, [pc, #392]	; (8001f04 <BUZZER_Run+0x260>)
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f040 80c6 	bne.w	8001f10 <BUZZER_Run+0x26c>
			{
				if( wBeepCounts == 0 )
 8001d84:	4b60      	ldr	r3, [pc, #384]	; (8001f08 <BUZZER_Run+0x264>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d11b      	bne.n	8001dc4 <BUZZER_Run+0x120>
				{
					BUZZER_EnableSound( false );
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f000 f8dd 	bl	8001f4c <BUZZER_EnableSound>
					// No more beeps to do, from 1st sequence
					if(gstBuzzer->eBuzzerType == BUZZER_TONE_MED)
 8001d92:	4b5b      	ldr	r3, [pc, #364]	; (8001f00 <BUZZER_Run+0x25c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	785b      	ldrb	r3, [r3, #1]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d109      	bne.n	8001db0 <BUZZER_Run+0x10c>
					{
						//If Med Prior only 3 bbb is needed, go to wait for next cycle
						gstBuzzer->eBuzzerState = eBuzzerState_PauseBetweenBuzzer;
 8001d9c:	4b58      	ldr	r3, [pc, #352]	; (8001f00 <BUZZER_Run+0x25c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2207      	movs	r2, #7
 8001da2:	701a      	strb	r2, [r3, #0]
						wWaitCounts = gstBuzzer->wWaitNextSequenceDuration5MsCounts;
 8001da4:	4b56      	ldr	r3, [pc, #344]	; (8001f00 <BUZZER_Run+0x25c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	895a      	ldrh	r2, [r3, #10]
 8001daa:	4b56      	ldr	r3, [pc, #344]	; (8001f04 <BUZZER_Run+0x260>)
 8001dac:	801a      	strh	r2, [r3, #0]
					gstBuzzer->eBuzzerState = eBuzzerState_BeepOn;
					wWaitCounts = gstBuzzer->wOffDuration5MsCounts;
				    BUZZER_EnableSound( true );
				}
			}
		break;
 8001dae:	e0af      	b.n	8001f10 <BUZZER_Run+0x26c>
						gstBuzzer->eBuzzerState = eBuzzerState_BeepSpace;
 8001db0:	4b53      	ldr	r3, [pc, #332]	; (8001f00 <BUZZER_Run+0x25c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2204      	movs	r2, #4
 8001db6:	701a      	strb	r2, [r3, #0]
						wWaitCounts = gstBuzzer->wWaitBetweenBeepDuration5MsCounts;
 8001db8:	4b51      	ldr	r3, [pc, #324]	; (8001f00 <BUZZER_Run+0x25c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	891a      	ldrh	r2, [r3, #8]
 8001dbe:	4b51      	ldr	r3, [pc, #324]	; (8001f04 <BUZZER_Run+0x260>)
 8001dc0:	801a      	strh	r2, [r3, #0]
		break;
 8001dc2:	e0a5      	b.n	8001f10 <BUZZER_Run+0x26c>
					gstBuzzer->eBuzzerState = eBuzzerState_BeepOn;
 8001dc4:	4b4e      	ldr	r3, [pc, #312]	; (8001f00 <BUZZER_Run+0x25c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	701a      	strb	r2, [r3, #0]
					wWaitCounts = gstBuzzer->wOffDuration5MsCounts;
 8001dcc:	4b4c      	ldr	r3, [pc, #304]	; (8001f00 <BUZZER_Run+0x25c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	88da      	ldrh	r2, [r3, #6]
 8001dd2:	4b4c      	ldr	r3, [pc, #304]	; (8001f04 <BUZZER_Run+0x260>)
 8001dd4:	801a      	strh	r2, [r3, #0]
				    BUZZER_EnableSound( true );
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	f000 f8b8 	bl	8001f4c <BUZZER_EnableSound>
		break;
 8001ddc:	e098      	b.n	8001f10 <BUZZER_Run+0x26c>

		case eBuzzerState_BeepSpace:
			if( --wWaitCounts == 0 )
 8001dde:	4b49      	ldr	r3, [pc, #292]	; (8001f04 <BUZZER_Run+0x260>)
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <BUZZER_Run+0x260>)
 8001de8:	801a      	strh	r2, [r3, #0]
 8001dea:	4b46      	ldr	r3, [pc, #280]	; (8001f04 <BUZZER_Run+0x260>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 8090 	bne.w	8001f14 <BUZZER_Run+0x270>
			{
				if( gstBuzzer->wNumBeeps2 && gstBuzzer->wOnDuration5MsCounts )
 8001df4:	4b42      	ldr	r3, [pc, #264]	; (8001f00 <BUZZER_Run+0x25c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	78db      	ldrb	r3, [r3, #3]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d016      	beq.n	8001e2c <BUZZER_Run+0x188>
 8001dfe:	4b40      	ldr	r3, [pc, #256]	; (8001f00 <BUZZER_Run+0x25c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	889b      	ldrh	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d011      	beq.n	8001e2c <BUZZER_Run+0x188>
				{
					//get the time Buzzer need to be ON
					wWaitCounts             = gstBuzzer->wOnDuration5MsCounts;
 8001e08:	4b3d      	ldr	r3, [pc, #244]	; (8001f00 <BUZZER_Run+0x25c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	889a      	ldrh	r2, [r3, #4]
 8001e0e:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <BUZZER_Run+0x260>)
 8001e10:	801a      	strh	r2, [r3, #0]
					wBeepCounts             = gstBuzzer->wNumBeeps2;
 8001e12:	4b3b      	ldr	r3, [pc, #236]	; (8001f00 <BUZZER_Run+0x25c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	78da      	ldrb	r2, [r3, #3]
 8001e18:	4b3b      	ldr	r3, [pc, #236]	; (8001f08 <BUZZER_Run+0x264>)
 8001e1a:	701a      	strb	r2, [r3, #0]
					gstBuzzer->eBuzzerState = eBuzzerState_BeepOn2;
 8001e1c:	4b38      	ldr	r3, [pc, #224]	; (8001f00 <BUZZER_Run+0x25c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2205      	movs	r2, #5
 8001e22:	701a      	strb	r2, [r3, #0]
					BUZZER_EnableSound( true );
 8001e24:	2001      	movs	r0, #1
 8001e26:	f000 f891 	bl	8001f4c <BUZZER_EnableSound>
				else
				{
					gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
				}
			}
		break;
 8001e2a:	e073      	b.n	8001f14 <BUZZER_Run+0x270>
					gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
 8001e2c:	4b34      	ldr	r3, [pc, #208]	; (8001f00 <BUZZER_Run+0x25c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
		break;
 8001e34:	e06e      	b.n	8001f14 <BUZZER_Run+0x270>

		case eBuzzerState_BeepOn2:
			if( --wWaitCounts == 0 )
 8001e36:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <BUZZER_Run+0x260>)
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	4b31      	ldr	r3, [pc, #196]	; (8001f04 <BUZZER_Run+0x260>)
 8001e40:	801a      	strh	r2, [r3, #0]
 8001e42:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <BUZZER_Run+0x260>)
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d166      	bne.n	8001f18 <BUZZER_Run+0x274>
			{
				BUZZER_EnableSound( false );
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f000 f87e 	bl	8001f4c <BUZZER_EnableSound>
				wBeepCounts--;
 8001e50:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <BUZZER_Run+0x264>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	4b2b      	ldr	r3, [pc, #172]	; (8001f08 <BUZZER_Run+0x264>)
 8001e5a:	701a      	strb	r2, [r3, #0]

				if( gstBuzzer->wOffDuration5MsCounts ) {
 8001e5c:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <BUZZER_Run+0x25c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	88db      	ldrh	r3, [r3, #6]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d009      	beq.n	8001e7a <BUZZER_Run+0x1d6>
					gstBuzzer->eBuzzerState = eBuzzerState_BeepOff2;
 8001e66:	4b26      	ldr	r3, [pc, #152]	; (8001f00 <BUZZER_Run+0x25c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2206      	movs	r2, #6
 8001e6c:	701a      	strb	r2, [r3, #0]
					wWaitCounts = gstBuzzer->wOffDuration5MsCounts;
 8001e6e:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <BUZZER_Run+0x25c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	88da      	ldrh	r2, [r3, #6]
 8001e74:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <BUZZER_Run+0x260>)
 8001e76:	801a      	strh	r2, [r3, #0]
				} else {
					gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
				}
			}
		break;
 8001e78:	e04e      	b.n	8001f18 <BUZZER_Run+0x274>
					gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
 8001e7a:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <BUZZER_Run+0x25c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
		break;
 8001e82:	e049      	b.n	8001f18 <BUZZER_Run+0x274>

		case eBuzzerState_BeepOff2:
			if( --wWaitCounts == 0 )
 8001e84:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <BUZZER_Run+0x260>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <BUZZER_Run+0x260>)
 8001e8e:	801a      	strh	r2, [r3, #0]
 8001e90:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <BUZZER_Run+0x260>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d141      	bne.n	8001f1c <BUZZER_Run+0x278>
			{
				if( wBeepCounts == 0 )
 8001e98:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <BUZZER_Run+0x264>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10c      	bne.n	8001eba <BUZZER_Run+0x216>
				{
					BUZZER_EnableSound( false );
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f000 f853 	bl	8001f4c <BUZZER_EnableSound>
					// No more beeps to do, from 2 sequence.  Go to wait for next cycle
					gstBuzzer->eBuzzerState = eBuzzerState_PauseBetweenBuzzer;
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <BUZZER_Run+0x25c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2207      	movs	r2, #7
 8001eac:	701a      	strb	r2, [r3, #0]
					wWaitCounts = gstBuzzer->wWaitNextSequenceDuration5MsCounts;
 8001eae:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <BUZZER_Run+0x25c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	895a      	ldrh	r2, [r3, #10]
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <BUZZER_Run+0x260>)
 8001eb6:	801a      	strh	r2, [r3, #0]
					gstBuzzer->eBuzzerState = eBuzzerState_BeepOn2;
					wWaitCounts = gstBuzzer->wOffDuration5MsCounts;
					BUZZER_EnableSound( true );
				}
			}
		break;
 8001eb8:	e030      	b.n	8001f1c <BUZZER_Run+0x278>
					gstBuzzer->eBuzzerState = eBuzzerState_BeepOn2;
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <BUZZER_Run+0x25c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2205      	movs	r2, #5
 8001ec0:	701a      	strb	r2, [r3, #0]
					wWaitCounts = gstBuzzer->wOffDuration5MsCounts;
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <BUZZER_Run+0x25c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	88da      	ldrh	r2, [r3, #6]
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <BUZZER_Run+0x260>)
 8001eca:	801a      	strh	r2, [r3, #0]
					BUZZER_EnableSound( true );
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f000 f83d 	bl	8001f4c <BUZZER_EnableSound>
		break;
 8001ed2:	e023      	b.n	8001f1c <BUZZER_Run+0x278>

		case eBuzzerState_PauseBetweenBuzzer:
			if( --wWaitCounts == 0 )
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <BUZZER_Run+0x260>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <BUZZER_Run+0x260>)
 8001ede:	801a      	strh	r2, [r3, #0]
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <BUZZER_Run+0x260>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d11b      	bne.n	8001f20 <BUZZER_Run+0x27c>
			{
				//Wait for next cycle kick in
				gstBuzzer->eBuzzerState = eBuzzerState_Initiate;
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <BUZZER_Run+0x25c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001ef0:	e016      	b.n	8001f20 <BUZZER_Run+0x27c>

		default:
			gstBuzzer->eBuzzerState = eBuzzerState_Inactive;
 8001ef2:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <BUZZER_Run+0x25c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
		break;
 8001efa:	e012      	b.n	8001f22 <BUZZER_Run+0x27e>
		break;
 8001efc:	bf00      	nop
 8001efe:	e010      	b.n	8001f22 <BUZZER_Run+0x27e>
 8001f00:	200005e0 	.word	0x200005e0
 8001f04:	200005e4 	.word	0x200005e4
 8001f08:	200005e6 	.word	0x200005e6
		break;
 8001f0c:	bf00      	nop
 8001f0e:	e008      	b.n	8001f22 <BUZZER_Run+0x27e>
		break;
 8001f10:	bf00      	nop
 8001f12:	e006      	b.n	8001f22 <BUZZER_Run+0x27e>
		break;
 8001f14:	bf00      	nop
 8001f16:	e004      	b.n	8001f22 <BUZZER_Run+0x27e>
		break;
 8001f18:	bf00      	nop
 8001f1a:	e002      	b.n	8001f22 <BUZZER_Run+0x27e>
		break;
 8001f1c:	bf00      	nop
 8001f1e:	e000      	b.n	8001f22 <BUZZER_Run+0x27e>
		break;
 8001f20:	bf00      	nop
	}
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop

08001f28 <BUZZER_Init>:

void BUZZER_Init(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
	c.eBuzzerState = eBuzzerState_Inactive;
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <BUZZER_Init+0x1c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
	gstBuzzer = &c;
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <BUZZER_Init+0x20>)
 8001f34:	4a03      	ldr	r2, [pc, #12]	; (8001f44 <BUZZER_Init+0x1c>)
 8001f36:	601a      	str	r2, [r3, #0]
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	200005d4 	.word	0x200005d4
 8001f48:	200005e0 	.word	0x200005e0

08001f4c <BUZZER_EnableSound>:

void BUZZER_EnableSound(bool bOnOff)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
	if(bOnOff)
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d004      	beq.n	8001f66 <BUZZER_EnableSound+0x1a>
	{
		//255 = 100%, 0 = 0%, should not set to 100% since it is all high
		htim2.Instance->CCR4 = BUZZER_50_DUTY;
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <BUZZER_EnableSound+0x30>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	227d      	movs	r2, #125	; 0x7d
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		//0 is buzzer off value
		htim2.Instance->CCR4 = 0;
	}
}
 8001f64:	e003      	b.n	8001f6e <BUZZER_EnableSound+0x22>
		htim2.Instance->CCR4 = 0;
 8001f66:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <BUZZER_EnableSound+0x30>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20004528 	.word	0x20004528

08001f80 <SetSystemState>:

static CONTEXT c;
static CONTEXT* gstDisplayManager;

void SetSystemState( SYSTEM_STATE state )
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
	systemState = state;
 8001f8a:	4a06      	ldr	r2, [pc, #24]	; (8001fa4 <SetSystemState+0x24>)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	7013      	strb	r3, [r2, #0]
	UartPrintf("System State: %d\n", state);
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	4619      	mov	r1, r3
 8001f94:	4804      	ldr	r0, [pc, #16]	; (8001fa8 <SetSystemState+0x28>)
 8001f96:	f003 fec3 	bl	8005d20 <UartPrintf>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000009 	.word	0x20000009
 8001fa8:	08021134 	.word	0x08021134

08001fac <Display_Init>:

void Display_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
	//Init switches
	Switches_Init();
 8001fb0:	f002 f9b2 	bl	8004318 <Switches_Init>

    //Init LCD
	LCD_Init();
 8001fb4:	f001 fd7c 	bl	8003ab0 <LCD_Init>

	//Init buzzer
	BUZZER_Init();
 8001fb8:	f7ff ffb6 	bl	8001f28 <BUZZER_Init>

	c.bSettingMonitorDisplay = false;  //using for toggle Idle displays
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <Display_Init+0x40>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	711a      	strb	r2, [r3, #4]
    c.TimeLastSwitchPress    = 0;
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <Display_Init+0x40>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
    c.TimeLastPageToggle     = 0;
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <Display_Init+0x40>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
    c.eDisplayState          = DISPLAY_STATE_IDLE;
 8001fce:	4b07      	ldr	r3, [pc, #28]	; (8001fec <Display_Init+0x40>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	731a      	strb	r2, [r3, #12]

    SetSystemState( SYSTEM_STATE_INITIALIZE ); //To allow ATtiny alarm check
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f7ff ffd3 	bl	8001f80 <SetSystemState>
    //standbyStartTimeMinute = GetMinuteCount();
    //previousMinuteCount = standbyStartTimeMinute;
    //previousMinuteCountSysTick = Get_SysTick();
    prevDisplayId = DISPLAY_ID_STANDBY;
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <Display_Init+0x44>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	701a      	strb	r2, [r3, #0]

    gstDisplayManager = &c;
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <Display_Init+0x48>)
 8001fe2:	4a02      	ldr	r2, [pc, #8]	; (8001fec <Display_Init+0x40>)
 8001fe4:	601a      	str	r2, [r3, #0]

}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200005ec 	.word	0x200005ec
 8001ff0:	200005e7 	.word	0x200005e7
 8001ff4:	200005fc 	.word	0x200005fc

08001ff8 <Display_Manager>:
{
    return systemState;
}

void Display_Manager(void)
{
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
	if( Switches_Scan() == true)
 8001ffe:	f002 f9c1 	bl	8004384 <Switches_Scan>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d050      	beq.n	80020aa <Display_Manager+0xb2>
	{
		// Switch Press
		gstDisplayManager->TimeLastSwitchPress = Get_SysTick();
 8002008:	4b3f      	ldr	r3, [pc, #252]	; (8002108 <Display_Manager+0x110>)
 800200a:	681c      	ldr	r4, [r3, #0]
 800200c:	f003 ffbc 	bl	8005f88 <Get_SysTick>
 8002010:	4603      	mov	r3, r0
 8002012:	6023      	str	r3, [r4, #0]

		SWITCH_ID eSwitchId;
		KEY_STATUS eKeyStatus;
		DISPLAY_ID displayId;

		Switches_Get_Status(&eSwitchId, &eKeyStatus);
 8002014:	1d7a      	adds	r2, r7, #5
 8002016:	1dbb      	adds	r3, r7, #6
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f002 fa78 	bl	8004510 <Switches_Get_Status>

		switch(eSwitchId)
 8002020:	79bb      	ldrb	r3, [r7, #6]
 8002022:	3b01      	subs	r3, #1
 8002024:	2b08      	cmp	r3, #8
 8002026:	d838      	bhi.n	800209a <Display_Manager+0xa2>
 8002028:	a201      	add	r2, pc, #4	; (adr r2, 8002030 <Display_Manager+0x38>)
 800202a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202e:	bf00      	nop
 8002030:	08002055 	.word	0x08002055
 8002034:	0800205b 	.word	0x0800205b
 8002038:	08002065 	.word	0x08002065
 800203c:	0800206b 	.word	0x0800206b
 8002040:	08002075 	.word	0x08002075
 8002044:	0800207b 	.word	0x0800207b
 8002048:	08002081 	.word	0x08002081
 800204c:	08002087 	.word	0x08002087
 8002050:	08002095 	.word	0x08002095
		{
		    case SWITCH_ID_MUTE:
		    	displayId = DISPLAY_ID_MUTE;
 8002054:	2302      	movs	r3, #2
 8002056:	71fb      	strb	r3, [r7, #7]
			break;
 8002058:	e020      	b.n	800209c <Display_Manager+0xa4>

			case SWITCH_ID_START:
			{
				displayId = DISPLAY_ID_START;
 800205a:	2303      	movs	r3, #3
 800205c:	71fb      	strb	r3, [r7, #7]
				LED_Start_On();
 800205e:	f002 fa8b 	bl	8004578 <LED_Start_On>
			}
			break;
 8002062:	e01b      	b.n	800209c <Display_Manager+0xa4>

			case SWITCH_ID_MENU:
				displayId = DISPLAY_ID_MENU;
 8002064:	2304      	movs	r3, #4
 8002066:	71fb      	strb	r3, [r7, #7]
			break;
 8002068:	e018      	b.n	800209c <Display_Manager+0xa4>

			case SWITCH_ID_PAUSE:
			{
				displayId = DISPLAY_ID_PAUSE;
 800206a:	2305      	movs	r3, #5
 800206c:	71fb      	strb	r3, [r7, #7]
				LED_Pause_On();
 800206e:	f002 fab7 	bl	80045e0 <LED_Pause_On>
			}
			break;
 8002072:	e013      	b.n	800209c <Display_Manager+0xa4>

			case SWITCH_ID_LEFT:
				displayId = DISPLAY_ID_LEFT;
 8002074:	2306      	movs	r3, #6
 8002076:	71fb      	strb	r3, [r7, #7]
			break;
 8002078:	e010      	b.n	800209c <Display_Manager+0xa4>

			case SWITCH_ID_UP:
				displayId = DISPLAY_ID_UP;
 800207a:	2307      	movs	r3, #7
 800207c:	71fb      	strb	r3, [r7, #7]
			break;
 800207e:	e00d      	b.n	800209c <Display_Manager+0xa4>

			case SWITCH_ID_DOWN:
				displayId = DISPLAY_ID_DOWN;
 8002080:	2308      	movs	r3, #8
 8002082:	71fb      	strb	r3, [r7, #7]
			break;
 8002084:	e00a      	b.n	800209c <Display_Manager+0xa4>

			case SWITCH_ID_SEL:
			{
				displayId = DISPLAY_ID_SEL;
 8002086:	2309      	movs	r3, #9
 8002088:	71fb      	strb	r3, [r7, #7]
				LED_Pause_Off();
 800208a:	f002 fac3 	bl	8004614 <LED_Pause_Off>
				LED_Start_Off();
 800208e:	f002 fa8d 	bl	80045ac <LED_Start_Off>
			}
			break;
 8002092:	e003      	b.n	800209c <Display_Manager+0xa4>

			case SWITCH_ID_RIGHT:
				displayId = DISPLAY_ID_RIGHT;
 8002094:	230a      	movs	r3, #10
 8002096:	71fb      	strb	r3, [r7, #7]
			break;
 8002098:	e000      	b.n	800209c <Display_Manager+0xa4>

			case SWITCH_ID_NONE:
			case SWITCH_ID_COUNT:
			default:
				break;
 800209a:	bf00      	nop
		}

		Display_Page(displayId);
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f964 	bl	800236c <Display_Page>
		prevDisplayId = displayId;
 80020a4:	4a19      	ldr	r2, [pc, #100]	; (800210c <Display_Manager+0x114>)
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	7013      	strb	r3, [r2, #0]
	}


	// If screen timeout occurred, go to display idle state
	if( gstDisplayManager->TimeLastSwitchPress &&
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <Display_Manager+0x110>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d014      	beq.n	80020de <Display_Manager+0xe6>
		((Get_SysTick() - gstDisplayManager->TimeLastSwitchPress) >= screenUpdateWaitTimeSeconds) )
 80020b4:	f003 ff68 	bl	8005f88 <Get_SysTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <Display_Manager+0x110>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	1ad2      	subs	r2, r2, r3
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <Display_Manager+0x118>)
 80020c4:	681b      	ldr	r3, [r3, #0]
	if( gstDisplayManager->TimeLastSwitchPress &&
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d309      	bcc.n	80020de <Display_Manager+0xe6>
	{
		gstDisplayManager->TimeLastSwitchPress = 0;
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <Display_Manager+0x110>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
		Display_Page(DISPLAY_ID_STANDBY);
 80020d2:	2001      	movs	r0, #1
 80020d4:	f000 f94a 	bl	800236c <Display_Page>
		prevDisplayId = DISPLAY_ID_STANDBY;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <Display_Manager+0x114>)
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
	}

    //Running LED
    LED_Run();
 80020de:	f001 fe7f 	bl	8003de0 <LED_Run>

    //Running Buzzer
    BUZZER_Run();
 80020e2:	f7ff fddf 	bl	8001ca4 <BUZZER_Run>

    //Refresh Display after LCD toggle
    if(bRequestDisplayRefresh == true)
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <Display_Manager+0x11c>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <Display_Manager+0x106>
    {
    	bRequestDisplayRefresh = false;
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <Display_Manager+0x11c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
    	Display_Page( prevDisplayId );
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <Display_Manager+0x114>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 f937 	bl	800236c <Display_Page>
    }

}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	bd90      	pop	{r4, r7, pc}
 8002106:	bf00      	nop
 8002108:	200005fc 	.word	0x200005fc
 800210c:	200005e7 	.word	0x200005e7
 8002110:	2000000c 	.word	0x2000000c
 8002114:	200005e8 	.word	0x200005e8

08002118 <Display_Standby_Page>:

static void Display_Standby_Page(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08c      	sub	sp, #48	; 0x30
 800211c:	af02      	add	r7, sp, #8
	char msg[32];
	int len;

	// Line 1
	LCD_Write(true,   LCD_LINE_1, 0, "   CPRT IDLE PAGE   ", 20);
 800211e:	2314      	movs	r3, #20
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <Display_Standby_Page+0x6c>)
 8002124:	2200      	movs	r2, #0
 8002126:	2100      	movs	r1, #0
 8002128:	2001      	movs	r0, #1
 800212a:	f001 fc9f 	bl	8003a6c <LCD_Write>

	// Line 2
	len = snprintf(msg, sizeof(msg), "  SW REV: %s", GetSwVersionString( CURRENT_SW_VERSION_ID));
 800212e:	200b      	movs	r0, #11
 8002130:	f005 fe22 	bl	8007d78 <GetSwVersionString>
 8002134:	4603      	mov	r3, r0
 8002136:	1d38      	adds	r0, r7, #4
 8002138:	4a13      	ldr	r2, [pc, #76]	; (8002188 <Display_Standby_Page+0x70>)
 800213a:	2120      	movs	r1, #32
 800213c:	f01b f89e 	bl	801d27c <sniprintf>
 8002140:	6278      	str	r0, [r7, #36]	; 0x24
	LCD_Write(false, LCD_LINE_2, 0, msg, len );
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	b2db      	uxtb	r3, r3
 8002146:	1d3a      	adds	r2, r7, #4
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	4613      	mov	r3, r2
 800214c:	2200      	movs	r2, #0
 800214e:	2101      	movs	r1, #1
 8002150:	2000      	movs	r0, #0
 8002152:	f001 fc8b 	bl	8003a6c <LCD_Write>

	len = snprintf(msg, sizeof(msg), "%s %s", gstModel.adate,  gstModel.atime);
 8002156:	1d38      	adds	r0, r7, #4
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <Display_Standby_Page+0x74>)
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <Display_Standby_Page+0x78>)
 800215e:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <Display_Standby_Page+0x7c>)
 8002160:	2120      	movs	r1, #32
 8002162:	f01b f88b 	bl	801d27c <sniprintf>
 8002166:	6278      	str	r0, [r7, #36]	; 0x24

	// Line 4 Display Date and Time from RTC
	LCD_Write(false, LCD_LINE_4, 0, msg, len );
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	b2db      	uxtb	r3, r3
 800216c:	1d3a      	adds	r2, r7, #4
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	4613      	mov	r3, r2
 8002172:	2200      	movs	r2, #0
 8002174:	2103      	movs	r1, #3
 8002176:	2000      	movs	r0, #0
 8002178:	f001 fc78 	bl	8003a6c <LCD_Write>

}
 800217c:	bf00      	nop
 800217e:	3728      	adds	r7, #40	; 0x28
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	08021148 	.word	0x08021148
 8002188:	08021160 	.word	0x08021160
 800218c:	20000c6b 	.word	0x20000c6b
 8002190:	20000c75 	.word	0x20000c75
 8002194:	08021170 	.word	0x08021170

08002198 <Display_Mute_Page>:

static void Display_Mute_Page(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af02      	add	r7, sp, #8
	// Line 1
	LCD_Write(true,   LCD_LINE_1, 0, "     BUTTON ACTIVE  ", 20);
 800219e:	2314      	movs	r3, #20
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <Display_Mute_Page+0x2c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	2100      	movs	r1, #0
 80021a8:	2001      	movs	r0, #1
 80021aa:	f001 fc5f 	bl	8003a6c <LCD_Write>

	// Line 2
	LCD_Write(false, LCD_LINE_2, 0,  "BUTTON MUTE PRESSED ", 20);
 80021ae:	2314      	movs	r3, #20
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <Display_Mute_Page+0x30>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	2101      	movs	r1, #1
 80021b8:	2000      	movs	r0, #0
 80021ba:	f001 fc57 	bl	8003a6c <LCD_Write>
}
 80021be:	bf00      	nop
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	08021178 	.word	0x08021178
 80021c8:	08021190 	.word	0x08021190

080021cc <Display_Start_Page>:

static void Display_Start_Page(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af02      	add	r7, sp, #8
	// Line 1
	LCD_Write(true,   LCD_LINE_1, 0, "     BUTTON ACTIVE  ", 20);
 80021d2:	2314      	movs	r3, #20
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <Display_Start_Page+0x2c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	2100      	movs	r1, #0
 80021dc:	2001      	movs	r0, #1
 80021de:	f001 fc45 	bl	8003a6c <LCD_Write>

	// Line 2
	LCD_Write(false, LCD_LINE_2, 0,  "BUTTON START PRESSED", 20);
 80021e2:	2314      	movs	r3, #20
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <Display_Start_Page+0x30>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	2101      	movs	r1, #1
 80021ec:	2000      	movs	r0, #0
 80021ee:	f001 fc3d 	bl	8003a6c <LCD_Write>
}
 80021f2:	bf00      	nop
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	08021178 	.word	0x08021178
 80021fc:	080211a8 	.word	0x080211a8

08002200 <Display_Menu_Page>:

static void Display_Menu_Page(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af02      	add	r7, sp, #8
	// Line 1
	LCD_Write(true,   LCD_LINE_1, 0, "     BUTTON ACTIVE  ", 20);
 8002206:	2314      	movs	r3, #20
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <Display_Menu_Page+0x2c>)
 800220c:	2200      	movs	r2, #0
 800220e:	2100      	movs	r1, #0
 8002210:	2001      	movs	r0, #1
 8002212:	f001 fc2b 	bl	8003a6c <LCD_Write>

	// Line 2
	LCD_Write(false, LCD_LINE_2, 0,  "BUTTON MENU PRESSED ", 20);
 8002216:	2314      	movs	r3, #20
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <Display_Menu_Page+0x30>)
 800221c:	2200      	movs	r2, #0
 800221e:	2101      	movs	r1, #1
 8002220:	2000      	movs	r0, #0
 8002222:	f001 fc23 	bl	8003a6c <LCD_Write>
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	08021178 	.word	0x08021178
 8002230:	080211c0 	.word	0x080211c0

08002234 <Display_Pause_Page>:

static void Display_Pause_Page(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af02      	add	r7, sp, #8
	// Line 1
	LCD_Write(true,   LCD_LINE_1, 0, "     BUTTON ACTIVE  ", 20);
 800223a:	2314      	movs	r3, #20
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	4b08      	ldr	r3, [pc, #32]	; (8002260 <Display_Pause_Page+0x2c>)
 8002240:	2200      	movs	r2, #0
 8002242:	2100      	movs	r1, #0
 8002244:	2001      	movs	r0, #1
 8002246:	f001 fc11 	bl	8003a6c <LCD_Write>

	// Line 2
	LCD_Write(false, LCD_LINE_2, 0,  "BUTTON PAUSE PRESSED", 20);
 800224a:	2314      	movs	r3, #20
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	4b05      	ldr	r3, [pc, #20]	; (8002264 <Display_Pause_Page+0x30>)
 8002250:	2200      	movs	r2, #0
 8002252:	2101      	movs	r1, #1
 8002254:	2000      	movs	r0, #0
 8002256:	f001 fc09 	bl	8003a6c <LCD_Write>
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	08021178 	.word	0x08021178
 8002264:	080211d8 	.word	0x080211d8

08002268 <Display_Left_Page>:

static void Display_Left_Page(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af02      	add	r7, sp, #8
	// Line 1
	LCD_Write(true,   LCD_LINE_1, 0, "     BUTTON ACTIVE  ", 20);
 800226e:	2314      	movs	r3, #20
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <Display_Left_Page+0x2c>)
 8002274:	2200      	movs	r2, #0
 8002276:	2100      	movs	r1, #0
 8002278:	2001      	movs	r0, #1
 800227a:	f001 fbf7 	bl	8003a6c <LCD_Write>

	// Line 2
	LCD_Write(false, LCD_LINE_2, 0,  "BUTTON LEFT PRESSED ", 20);
 800227e:	2314      	movs	r3, #20
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	4b05      	ldr	r3, [pc, #20]	; (8002298 <Display_Left_Page+0x30>)
 8002284:	2200      	movs	r2, #0
 8002286:	2101      	movs	r1, #1
 8002288:	2000      	movs	r0, #0
 800228a:	f001 fbef 	bl	8003a6c <LCD_Write>
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	08021178 	.word	0x08021178
 8002298:	080211f0 	.word	0x080211f0

0800229c <Display_Up_Page>:

static void Display_Up_Page(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af02      	add	r7, sp, #8
	// Line 1
	LCD_Write(true,   LCD_LINE_1, 0, "     BUTTON ACTIVE  ", 20);
 80022a2:	2314      	movs	r3, #20
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <Display_Up_Page+0x2c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	2100      	movs	r1, #0
 80022ac:	2001      	movs	r0, #1
 80022ae:	f001 fbdd 	bl	8003a6c <LCD_Write>

	// Line 2
	LCD_Write(false, LCD_LINE_2, 0,  "  BUTTON UP PRESSED ", 20);
 80022b2:	2314      	movs	r3, #20
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <Display_Up_Page+0x30>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	2101      	movs	r1, #1
 80022bc:	2000      	movs	r0, #0
 80022be:	f001 fbd5 	bl	8003a6c <LCD_Write>
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	08021178 	.word	0x08021178
 80022cc:	08021208 	.word	0x08021208

080022d0 <Display_Down_Page>:

static void Display_Down_Page(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af02      	add	r7, sp, #8
	// Line 1
	LCD_Write(true,   LCD_LINE_1, 0, "     BUTTON ACTIVE  ", 20);
 80022d6:	2314      	movs	r3, #20
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <Display_Down_Page+0x2c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	2100      	movs	r1, #0
 80022e0:	2001      	movs	r0, #1
 80022e2:	f001 fbc3 	bl	8003a6c <LCD_Write>

	// Line 2
	LCD_Write(false, LCD_LINE_2, 0,  "BUTTON DOWN PRESSED ", 20);
 80022e6:	2314      	movs	r3, #20
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	4b05      	ldr	r3, [pc, #20]	; (8002300 <Display_Down_Page+0x30>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	2101      	movs	r1, #1
 80022f0:	2000      	movs	r0, #0
 80022f2:	f001 fbbb 	bl	8003a6c <LCD_Write>
}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	08021178 	.word	0x08021178
 8002300:	08021220 	.word	0x08021220

08002304 <Display_Sel_Page>:

static void Display_Sel_Page(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af02      	add	r7, sp, #8
	// Line 1
	LCD_Write(true,   LCD_LINE_1, 0, "     BUTTON ACTIVE  ", 20);
 800230a:	2314      	movs	r3, #20
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <Display_Sel_Page+0x2c>)
 8002310:	2200      	movs	r2, #0
 8002312:	2100      	movs	r1, #0
 8002314:	2001      	movs	r0, #1
 8002316:	f001 fba9 	bl	8003a6c <LCD_Write>

	// Line 2
	LCD_Write(false, LCD_LINE_2, 0,  "BUTTON SEL PRESSED  ", 20);
 800231a:	2314      	movs	r3, #20
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <Display_Sel_Page+0x30>)
 8002320:	2200      	movs	r2, #0
 8002322:	2101      	movs	r1, #1
 8002324:	2000      	movs	r0, #0
 8002326:	f001 fba1 	bl	8003a6c <LCD_Write>
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	08021178 	.word	0x08021178
 8002334:	08021238 	.word	0x08021238

08002338 <Display_Right_Page>:

static void Display_Right_Page(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af02      	add	r7, sp, #8
	// Line 1
	LCD_Write(true,   LCD_LINE_1, 0, "     BUTTON ACTIVE  ", 20);
 800233e:	2314      	movs	r3, #20
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <Display_Right_Page+0x2c>)
 8002344:	2200      	movs	r2, #0
 8002346:	2100      	movs	r1, #0
 8002348:	2001      	movs	r0, #1
 800234a:	f001 fb8f 	bl	8003a6c <LCD_Write>

	// Line 2
	LCD_Write(false, LCD_LINE_2, 0,  "BUTTON RIGHT PRESSED", 20);
 800234e:	2314      	movs	r3, #20
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	4b05      	ldr	r3, [pc, #20]	; (8002368 <Display_Right_Page+0x30>)
 8002354:	2200      	movs	r2, #0
 8002356:	2101      	movs	r1, #1
 8002358:	2000      	movs	r0, #0
 800235a:	f001 fb87 	bl	8003a6c <LCD_Write>
}
 800235e:	bf00      	nop
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	08021178 	.word	0x08021178
 8002368:	08021250 	.word	0x08021250

0800236c <Display_Page>:
		Display_Right_Page,

};

static void Display_Page(DISPLAY_ID eId)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
	if ( (eId > DISPLAY_ID_NONE) && (eId < DISPLAY_ID_COUNT) )
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d007      	beq.n	800238c <Display_Page+0x20>
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	2b0a      	cmp	r3, #10
 8002380:	d804      	bhi.n	800238c <Display_Page+0x20>
	{
		dispF[eId]();
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	4a03      	ldr	r2, [pc, #12]	; (8002394 <Display_Page+0x28>)
 8002386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238a:	4798      	blx	r3
	}
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000010 	.word	0x20000010

08002398 <Display_Request_Refresh>:
{
	gstDisplayManager->TimeLastSwitchPress = Get_SysTick();
}

void Display_Request_Refresh()
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
    //delayWd100ms( 1 );
	bRequestDisplayRefresh = true;
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <Display_Request_Refresh+0x14>)
 800239e:	2201      	movs	r2, #1
 80023a0:	701a      	strb	r2, [r3, #0]
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	200005e8 	.word	0x200005e8

080023b0 <GetEepromWriteWait>:
{
	displayEepromTest = enable;
}

bool GetEepromWriteWait( )
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
	return eepromWriteWait;
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <GetEepromWriteWait+0x14>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20000ac0 	.word	0x20000ac0

080023c8 <SetEepromWriteWait>:

void SetEepromWriteWait( bool eepromWriteWaitFlag )
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
	eepromWriteWait = eepromWriteWaitFlag;
 80023d2:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <SetEepromWriteWait+0x1c>)
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	7013      	strb	r3, [r2, #0]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	20000ac0 	.word	0x20000ac0

080023e8 <ReadEeprom>:
 *             numBytesToRead - number of bytes to read from EEPROM
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void ReadEeprom( uint16_t dataAddress, uint8_t * readData, int16_t numBytesToRead )
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	4603      	mov	r3, r0
 80023f0:	6039      	str	r1, [r7, #0]
 80023f2:	80fb      	strh	r3, [r7, #6]
 80023f4:	4613      	mov	r3, r2
 80023f6:	80bb      	strh	r3, [r7, #4]
	if( HAL_I2C_Mem_Read_IT( &hi2c3, EEPROM_DEVICE_ADDRESS, dataAddress, I2C_MEMADD_SIZE_16BIT, readData, numBytesToRead )
 80023f8:	88bb      	ldrh	r3, [r7, #4]
 80023fa:	88fa      	ldrh	r2, [r7, #6]
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2302      	movs	r3, #2
 8002404:	21a0      	movs	r1, #160	; 0xa0
 8002406:	4806      	ldr	r0, [pc, #24]	; (8002420 <ReadEeprom+0x38>)
 8002408:	f008 ffa4 	bl	800b354 <HAL_I2C_Mem_Read_IT>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <ReadEeprom+0x30>
			!= HAL_OK)
	{
		UartPrintf("I2C3 EEPROM read failed.\n");
 8002412:	4804      	ldr	r0, [pc, #16]	; (8002424 <ReadEeprom+0x3c>)
 8002414:	f003 fc84 	bl	8005d20 <UartPrintf>
	}
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	200042b0 	.word	0x200042b0
 8002424:	08021268 	.word	0x08021268

08002428 <GetLogWritePointerFromEeprom>:

//
// Read once at initialization
//
void GetLogWritePointerFromEeprom( )
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	getLogWritePtr = true;
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <GetLogWritePointerFromEeprom+0x18>)
 800242e:	2201      	movs	r2, #1
 8002430:	701a      	strb	r2, [r3, #0]

	ReadEeprom( LOG_WRITE_POINTER_ADDRESS, (uint8_t *)&eepromLogWritePtr, 2 );
 8002432:	2202      	movs	r2, #2
 8002434:	4903      	ldr	r1, [pc, #12]	; (8002444 <GetLogWritePointerFromEeprom+0x1c>)
 8002436:	207e      	movs	r0, #126	; 0x7e
 8002438:	f7ff ffd6 	bl	80023e8 <ReadEeprom>
}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000aba 	.word	0x20000aba
 8002444:	200008a0 	.word	0x200008a0

08002448 <GetMinuteCounterFromEeprom>:

void GetMinuteCounterFromEeprom( )
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
	getMinuteCounter = true;
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <GetMinuteCounterFromEeprom+0x18>)
 800244e:	2201      	movs	r2, #1
 8002450:	701a      	strb	r2, [r3, #0]

	ReadEeprom( MINUTE_CNTR_ADDRESS, (uint8_t *)&minuteCounter, 4 );
 8002452:	2204      	movs	r2, #4
 8002454:	4903      	ldr	r1, [pc, #12]	; (8002464 <GetMinuteCounterFromEeprom+0x1c>)
 8002456:	207a      	movs	r0, #122	; 0x7a
 8002458:	f7ff ffc6 	bl	80023e8 <ReadEeprom>
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000abb 	.word	0x20000abb
 8002464:	200008a8 	.word	0x200008a8

08002468 <GetEventCounterFromEeprom>:

void GetEventCounterFromEeprom( )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
	getEventCounter = true;
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <GetEventCounterFromEeprom+0x18>)
 800246e:	2201      	movs	r2, #1
 8002470:	701a      	strb	r2, [r3, #0]

	ReadEeprom( EVENT_CNTR_ADDRESS, (uint8_t *)&eventCounter, 2 );
 8002472:	2202      	movs	r2, #2
 8002474:	4903      	ldr	r1, [pc, #12]	; (8002484 <GetEventCounterFromEeprom+0x1c>)
 8002476:	2075      	movs	r0, #117	; 0x75
 8002478:	f7ff ffb6 	bl	80023e8 <ReadEeprom>
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000abc 	.word	0x20000abc
 8002484:	200008b4 	.word	0x200008b4

08002488 <InitEepromTxQueue>:
 * Parameters:  None
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void InitEepromTxQueue()
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
	eepromTxQueueReadIndex = 0;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <InitEepromTxQueue+0x20>)
 800248e:	2200      	movs	r2, #0
 8002490:	801a      	strh	r2, [r3, #0]
	eepromTxQueueWriteIndex = 0;
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <InitEepromTxQueue+0x24>)
 8002494:	2200      	movs	r2, #0
 8002496:	801a      	strh	r2, [r3, #0]

	GetLogWritePointerFromEeprom( );
 8002498:	f7ff ffc6 	bl	8002428 <GetLogWritePointerFromEeprom>

	UartPrintf("Size of logInfo: %d\n", LOG_EVENT_SIZE);
 800249c:	2110      	movs	r1, #16
 800249e:	4804      	ldr	r0, [pc, #16]	; (80024b0 <InitEepromTxQueue+0x28>)
 80024a0:	f003 fc3e 	bl	8005d20 <UartPrintf>
}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000894 	.word	0x20000894
 80024ac:	20000896 	.word	0x20000896
 80024b0:	080212cc 	.word	0x080212cc

080024b4 <IsTxEepromQueueEmpty>:
 * Parameters:  None
 *
 * Returns:     true if empty, false if not empty
 *---------------------------------------------------------------------------*/
bool IsTxEepromQueueEmpty( )
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
	int16_t queueIndexDiff = eepromTxQueueWriteIndex - eepromTxQueueReadIndex;
 80024ba:	4b14      	ldr	r3, [pc, #80]	; (800250c <IsTxEepromQueueEmpty+0x58>)
 80024bc:	881a      	ldrh	r2, [r3, #0]
 80024be:	4b14      	ldr	r3, [pc, #80]	; (8002510 <IsTxEepromQueueEmpty+0x5c>)
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	80fb      	strh	r3, [r7, #6]
	curTxEepromQueueDepth = queueIndexDiff;
 80024c8:	88fa      	ldrh	r2, [r7, #6]
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <IsTxEepromQueueEmpty+0x60>)
 80024cc:	801a      	strh	r2, [r3, #0]

	if( queueIndexDiff == 0 )
 80024ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <IsTxEepromQueueEmpty+0x26>
	{
		// Tx EEPROM queue is empty
		return true;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e011      	b.n	80024fe <IsTxEepromQueueEmpty+0x4a>
	}

	if( queueIndexDiff < 0 )
 80024da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	da03      	bge.n	80024ea <IsTxEepromQueueEmpty+0x36>
	{
		queueIndexDiff += EEPROM_TX_QUEUE_SIZE;
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	3320      	adds	r3, #32
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	80fb      	strh	r3, [r7, #6]
	}

	// Keep track of maximum Tx EEPROM queue depth
	if( queueIndexDiff > maxTxEepromQueueDepth )
 80024ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <IsTxEepromQueueEmpty+0x64>)
 80024f0:	8812      	ldrh	r2, [r2, #0]
 80024f2:	4293      	cmp	r3, r2
 80024f4:	dd02      	ble.n	80024fc <IsTxEepromQueueEmpty+0x48>
	{
		maxTxEepromQueueDepth = queueIndexDiff;
 80024f6:	88fa      	ldrh	r2, [r7, #6]
 80024f8:	4b07      	ldr	r3, [pc, #28]	; (8002518 <IsTxEepromQueueEmpty+0x64>)
 80024fa:	801a      	strh	r2, [r3, #0]
	}

	// Tx EEPROM queue is not empty
	return false;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000896 	.word	0x20000896
 8002510:	20000894 	.word	0x20000894
 8002514:	2000089e 	.word	0x2000089e
 8002518:	2000089c 	.word	0x2000089c

0800251c <IsTxEepromQueueFull>:
 * Parameters:  None
 *
 * Returns:     true if full, false if not full
 *---------------------------------------------------------------------------*/
bool IsTxEepromQueueFull( )
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
	int16_t queueIndexDiff = eepromTxQueueWriteIndex - eepromTxQueueReadIndex;
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <IsTxEepromQueueFull+0x40>)
 8002524:	881a      	ldrh	r2, [r3, #0]
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <IsTxEepromQueueFull+0x44>)
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	b29b      	uxth	r3, r3
 800252e:	80fb      	strh	r3, [r7, #6]

	if( queueIndexDiff < 0 )
 8002530:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002534:	2b00      	cmp	r3, #0
 8002536:	da03      	bge.n	8002540 <IsTxEepromQueueFull+0x24>
    {
		queueIndexDiff += EEPROM_TX_QUEUE_SIZE;
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	3320      	adds	r3, #32
 800253c:	b29b      	uxth	r3, r3
 800253e:	80fb      	strh	r3, [r7, #6]
	}

	if( queueIndexDiff == (EEPROM_TX_QUEUE_SIZE - 1) )
 8002540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002544:	2b1f      	cmp	r3, #31
 8002546:	d101      	bne.n	800254c <IsTxEepromQueueFull+0x30>
	{
		// Tx EEPROM queue is full
		return true;
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <IsTxEepromQueueFull+0x32>
	}

	// Tx EEPROM queue is not full
	return false;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000896 	.word	0x20000896
 8002560:	20000894 	.word	0x20000894

08002564 <WriteEeprom>:
 *             numBytesToWrite - number of bytes to write to EEPROM
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
uint8_t WriteEeprom( uint16_t dataAddress, uint8_t * writeData, uint16_t numBytesToWrite )
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af02      	add	r7, sp, #8
 800256a:	4603      	mov	r3, r0
 800256c:	6039      	str	r1, [r7, #0]
 800256e:	80fb      	strh	r3, [r7, #6]
 8002570:	4613      	mov	r3, r2
 8002572:	80bb      	strh	r3, [r7, #4]
	uint16_t numBytesRemaining = numBytesToWrite;
 8002574:	88bb      	ldrh	r3, [r7, #4]
 8002576:	82fb      	strh	r3, [r7, #22]
	uint16_t numBytesWritten = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	82bb      	strh	r3, [r7, #20]

	uint8_t pageStartAddress = dataAddress % EEPROM_PAGE_SIZE;
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002584:	74bb      	strb	r3, [r7, #18]
	uint8_t numBytesToEndOfPage = EEPROM_PAGE_SIZE - pageStartAddress;
 8002586:	7cbb      	ldrb	r3, [r7, #18]
 8002588:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800258c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8002590:	3380      	adds	r3, #128	; 0x80
 8002592:	74fb      	strb	r3, [r7, #19]

	while( numBytesRemaining > 0 )
 8002594:	e06b      	b.n	800266e <WriteEeprom+0x10a>
	{
		// Wait for I2C3 to be ready
		uint32_t startWaitTime = GetTimeMs();
 8002596:	f003 fcbb 	bl	8005f10 <GetTimeMs>
 800259a:	60f8      	str	r0, [r7, #12]

		while( eepromWriteWait != false )
 800259c:	e00a      	b.n	80025b4 <WriteEeprom+0x50>
		{
			// Wait until EEPROM write wait time has elapsed before writing EEPROM
			// UartPrintf("I2C EEPROM wait time has not elasped\n");
			if ( DiffTimeFromStartTimeMs(startWaitTime) > 10 ) // 10 ms
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f003 fcc8 	bl	8005f34 <DiffTimeFromStartTimeMs>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b0a      	cmp	r3, #10
 80025a8:	d904      	bls.n	80025b4 <WriteEeprom+0x50>
			{
				UartPrintf("I2C3 EEPROM transfer not complete for 10 ms\n");
 80025aa:	4835      	ldr	r0, [pc, #212]	; (8002680 <WriteEeprom+0x11c>)
 80025ac:	f003 fbb8 	bl	8005d20 <UartPrintf>
				return 1; // Wait too long for I2C3 EEPROM transfer to complete
 80025b0:	2301      	movs	r3, #1
 80025b2:	e060      	b.n	8002676 <WriteEeprom+0x112>
		while( eepromWriteWait != false )
 80025b4:	4b33      	ldr	r3, [pc, #204]	; (8002684 <WriteEeprom+0x120>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f0      	bne.n	800259e <WriteEeprom+0x3a>
			}
		}

		while (HAL_I2C_GetState(&hi2c3) != HAL_I2C_STATE_READY)
 80025bc:	e00a      	b.n	80025d4 <WriteEeprom+0x70>
		{
			if ( DiffTimeFromStartTimeMs(startWaitTime) > 3 ) // 3 ms
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f003 fcb8 	bl	8005f34 <DiffTimeFromStartTimeMs>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d904      	bls.n	80025d4 <WriteEeprom+0x70>
			{
				UartPrintf("I2C3 EEPROM transfer not complete for 3 ms\n");
 80025ca:	482f      	ldr	r0, [pc, #188]	; (8002688 <WriteEeprom+0x124>)
 80025cc:	f003 fba8 	bl	8005d20 <UartPrintf>
				return 1; // Wait too long for I2C3 EEPROM transfer to complete
 80025d0:	2301      	movs	r3, #1
 80025d2:	e050      	b.n	8002676 <WriteEeprom+0x112>
		while (HAL_I2C_GetState(&hi2c3) != HAL_I2C_STATE_READY)
 80025d4:	482d      	ldr	r0, [pc, #180]	; (800268c <WriteEeprom+0x128>)
 80025d6:	f008 ffad 	bl	800b534 <HAL_I2C_GetState>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b20      	cmp	r3, #32
 80025de:	d1ee      	bne.n	80025be <WriteEeprom+0x5a>
			}
		}

		if( numBytesRemaining <= numBytesToEndOfPage )
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	8afa      	ldrh	r2, [r7, #22]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d81d      	bhi.n	8002626 <WriteEeprom+0xc2>
		{
			// All remaining bytes will fit in page
			eepromWriteWait = true;
 80025ea:	4b26      	ldr	r3, [pc, #152]	; (8002684 <WriteEeprom+0x120>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
			if( HAL_I2C_Mem_Write_IT( &hi2c3, EEPROM_DEVICE_ADDRESS, dataAddress + numBytesWritten, I2C_MEMADD_SIZE_16BIT,
 80025f0:	88fa      	ldrh	r2, [r7, #6]
 80025f2:	8abb      	ldrh	r3, [r7, #20]
 80025f4:	4413      	add	r3, r2
 80025f6:	b299      	uxth	r1, r3
 80025f8:	8abb      	ldrh	r3, [r7, #20]
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	4413      	add	r3, r2
 80025fe:	8afa      	ldrh	r2, [r7, #22]
 8002600:	9201      	str	r2, [sp, #4]
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	2302      	movs	r3, #2
 8002606:	460a      	mov	r2, r1
 8002608:	21a0      	movs	r1, #160	; 0xa0
 800260a:	4820      	ldr	r0, [pc, #128]	; (800268c <WriteEeprom+0x128>)
 800260c:	f008 fe0e 	bl	800b22c <HAL_I2C_Mem_Write_IT>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d004      	beq.n	8002620 <WriteEeprom+0xbc>
					&writeData[numBytesWritten], numBytesRemaining ) != HAL_OK )
			{
				UartPrintf("I2C3 EEPROM write to signal page failed.\n");
 8002616:	481e      	ldr	r0, [pc, #120]	; (8002690 <WriteEeprom+0x12c>)
 8002618:	f003 fb82 	bl	8005d20 <UartPrintf>
				return 1;
 800261c:	2301      	movs	r3, #1
 800261e:	e02a      	b.n	8002676 <WriteEeprom+0x112>
			}
			numBytesWritten = numBytesRemaining;
 8002620:	8afb      	ldrh	r3, [r7, #22]
 8002622:	82bb      	strh	r3, [r7, #20]
 8002624:	e01d      	b.n	8002662 <WriteEeprom+0xfe>
		}
		else // Number of bytes to write requires multiple pages
		{
			eepromWriteWait = true;
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <WriteEeprom+0x120>)
 8002628:	2201      	movs	r2, #1
 800262a:	701a      	strb	r2, [r3, #0]
			if( HAL_I2C_Mem_Write_IT( &hi2c3, EEPROM_DEVICE_ADDRESS, dataAddress + numBytesWritten,
 800262c:	88fa      	ldrh	r2, [r7, #6]
 800262e:	8abb      	ldrh	r3, [r7, #20]
 8002630:	4413      	add	r3, r2
 8002632:	b299      	uxth	r1, r3
 8002634:	8abb      	ldrh	r3, [r7, #20]
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	4413      	add	r3, r2
 800263a:	7cfa      	ldrb	r2, [r7, #19]
 800263c:	b292      	uxth	r2, r2
 800263e:	9201      	str	r2, [sp, #4]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2302      	movs	r3, #2
 8002644:	460a      	mov	r2, r1
 8002646:	21a0      	movs	r1, #160	; 0xa0
 8002648:	4810      	ldr	r0, [pc, #64]	; (800268c <WriteEeprom+0x128>)
 800264a:	f008 fdef 	bl	800b22c <HAL_I2C_Mem_Write_IT>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d004      	beq.n	800265e <WriteEeprom+0xfa>
					I2C_MEMADD_SIZE_16BIT, &writeData[numBytesWritten], numBytesToEndOfPage ) != HAL_OK )
			{
				UartPrintf("I2C3 EEPROM write to multiple pages failed.\n");
 8002654:	480f      	ldr	r0, [pc, #60]	; (8002694 <WriteEeprom+0x130>)
 8002656:	f003 fb63 	bl	8005d20 <UartPrintf>
				return 1;
 800265a:	2301      	movs	r3, #1
 800265c:	e00b      	b.n	8002676 <WriteEeprom+0x112>
			}
			numBytesWritten = numBytesToEndOfPage;
 800265e:	7cfb      	ldrb	r3, [r7, #19]
 8002660:	82bb      	strh	r3, [r7, #20]
		}

		// Update number of bytes remaining to be written to EEPROM
		numBytesRemaining -= numBytesWritten;
 8002662:	8afa      	ldrh	r2, [r7, #22]
 8002664:	8abb      	ldrh	r3, [r7, #20]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	82fb      	strh	r3, [r7, #22]

		// After write to initial page, subsequent writes start at the beginning of the next page
		// and the full page is available
		numBytesToEndOfPage = EEPROM_PAGE_SIZE;
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	74fb      	strb	r3, [r7, #19]
	while( numBytesRemaining > 0 )
 800266e:	8afb      	ldrh	r3, [r7, #22]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d190      	bne.n	8002596 <WriteEeprom+0x32>
	}

	return 0;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	080212e4 	.word	0x080212e4
 8002684:	20000ac0 	.word	0x20000ac0
 8002688:	08021284 	.word	0x08021284
 800268c:	200042b0 	.word	0x200042b0
 8002690:	08021314 	.word	0x08021314
 8002694:	08021340 	.word	0x08021340

08002698 <WriteTxEepromQueue>:
 * Parameters:  buffer - pointer to data to be written to Tx UART queue
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
int WriteTxEepromQueue(uint16_t address, uint8_t * writeData, uint8_t numBytes )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	6039      	str	r1, [r7, #0]
 80026a2:	80fb      	strh	r3, [r7, #6]
 80026a4:	4613      	mov	r3, r2
 80026a6:	717b      	strb	r3, [r7, #5]
	uint32_t startWaitTime = GetTimeMs();
 80026a8:	f003 fc32 	bl	8005f10 <GetTimeMs>
 80026ac:	6138      	str	r0, [r7, #16]

	while( IsTxEepromQueueFull() != false )
 80026ae:	e014      	b.n	80026da <WriteTxEepromQueue+0x42>
	{
		// Wait for Tx EEPROM queue not to be full
		uint32_t waitTime = DiffTimeFromStartTimeMs(startWaitTime);
 80026b0:	6938      	ldr	r0, [r7, #16]
 80026b2:	f003 fc3f 	bl	8005f34 <DiffTimeFromStartTimeMs>
 80026b6:	60f8      	str	r0, [r7, #12]
		if ( waitTime > 10 ) // 10 ms
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b0a      	cmp	r3, #10
 80026bc:	d905      	bls.n	80026ca <WriteTxEepromQueue+0x32>
		{
			UartPrintf("\r\nI2C IT EEPROM queue full for 10 ms\r\n");
 80026be:	4830      	ldr	r0, [pc, #192]	; (8002780 <WriteTxEepromQueue+0xe8>)
 80026c0:	f003 fb2e 	bl	8005d20 <UartPrintf>
			return -1; // Wait too long for Tx EEPEROM queue not to be full
 80026c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026c8:	e055      	b.n	8002776 <WriteTxEepromQueue+0xde>
		}

		// Keep track of max wait time for Tx UART Queue not to be full
		if( waitTime > maxEepromTxQueueWaitTimeMs )
 80026ca:	4b2e      	ldr	r3, [pc, #184]	; (8002784 <WriteTxEepromQueue+0xec>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d902      	bls.n	80026da <WriteTxEepromQueue+0x42>
		{
			maxEepromTxQueueWaitTimeMs = waitTime;
 80026d4:	4a2b      	ldr	r2, [pc, #172]	; (8002784 <WriteTxEepromQueue+0xec>)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6013      	str	r3, [r2, #0]
	while( IsTxEepromQueueFull() != false )
 80026da:	f7ff ff1f 	bl	800251c <IsTxEepromQueueFull>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1e5      	bne.n	80026b0 <WriteTxEepromQueue+0x18>
		}
	}

	// Write info to Tx EEPROM queue
	eepromTxQueue[eepromTxQueueWriteIndex].address = address;
 80026e4:	4b28      	ldr	r3, [pc, #160]	; (8002788 <WriteTxEepromQueue+0xf0>)
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	4619      	mov	r1, r3
 80026ea:	4a28      	ldr	r2, [pc, #160]	; (800278c <WriteTxEepromQueue+0xf4>)
 80026ec:	460b      	mov	r3, r1
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	88fa      	ldrh	r2, [r7, #6]
 80026f8:	801a      	strh	r2, [r3, #0]
	eepromTxQueue[eepromTxQueueWriteIndex].numBytes = numBytes;
 80026fa:	4b23      	ldr	r3, [pc, #140]	; (8002788 <WriteTxEepromQueue+0xf0>)
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	4619      	mov	r1, r3
 8002700:	4a22      	ldr	r2, [pc, #136]	; (800278c <WriteTxEepromQueue+0xf4>)
 8002702:	460b      	mov	r3, r1
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	3302      	adds	r3, #2
 800270e:	797a      	ldrb	r2, [r7, #5]
 8002710:	701a      	strb	r2, [r3, #0]
	for( int i=0; i<numBytes; i++ )
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	e014      	b.n	8002742 <WriteTxEepromQueue+0xaa>
	{
		eepromTxQueue[eepromTxQueueWriteIndex].data[i] = *writeData++;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	603a      	str	r2, [r7, #0]
 800271e:	4a1a      	ldr	r2, [pc, #104]	; (8002788 <WriteTxEepromQueue+0xf0>)
 8002720:	8812      	ldrh	r2, [r2, #0]
 8002722:	4611      	mov	r1, r2
 8002724:	7818      	ldrb	r0, [r3, #0]
 8002726:	4a19      	ldr	r2, [pc, #100]	; (800278c <WriteTxEepromQueue+0xf4>)
 8002728:	460b      	mov	r3, r1
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	441a      	add	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	4413      	add	r3, r2
 8002736:	3303      	adds	r3, #3
 8002738:	4602      	mov	r2, r0
 800273a:	701a      	strb	r2, [r3, #0]
	for( int i=0; i<numBytes; i++ )
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	3301      	adds	r3, #1
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	797b      	ldrb	r3, [r7, #5]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	429a      	cmp	r2, r3
 8002748:	dbe6      	blt.n	8002718 <WriteTxEepromQueue+0x80>
	}

	// Increment EEPROM Tx queue write index
	eepromTxQueueWriteIndex++;
 800274a:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <WriteTxEepromQueue+0xf0>)
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	3301      	adds	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <WriteTxEepromQueue+0xf0>)
 8002754:	801a      	strh	r2, [r3, #0]
	if( eepromTxQueueWriteIndex >= EEPROM_TX_QUEUE_SIZE )
 8002756:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <WriteTxEepromQueue+0xf0>)
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	2b1f      	cmp	r3, #31
 800275c:	d902      	bls.n	8002764 <WriteTxEepromQueue+0xcc>
	{
		// Write index was at maximum, set to 0
		eepromTxQueueWriteIndex =  0;
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <WriteTxEepromQueue+0xf0>)
 8002760:	2200      	movs	r2, #0
 8002762:	801a      	strh	r2, [r3, #0]
	}

	// If I2C3 is ready, read data from TX EEPROM queue and write to EEPROM,
	// else return and HAL_I2C_MemTxCpltCallback will call ReadTxEepromQueueAndWriteEeprom
	// after current I2C3 transmission is complete
	if(HAL_I2C_GetState(&hi2c3) == HAL_I2C_STATE_READY)
 8002764:	480a      	ldr	r0, [pc, #40]	; (8002790 <WriteTxEepromQueue+0xf8>)
 8002766:	f008 fee5 	bl	800b534 <HAL_I2C_GetState>
 800276a:	4603      	mov	r3, r0
 800276c:	2b20      	cmp	r3, #32
 800276e:	d101      	bne.n	8002774 <WriteTxEepromQueue+0xdc>
	{
		ReadTxEepromQueueAndWriteEeprom();
 8002770:	f000 f810 	bl	8002794 <ReadTxEepromQueueAndWriteEeprom>
	}

	return 0;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	08021370 	.word	0x08021370
 8002784:	20000898 	.word	0x20000898
 8002788:	20000896 	.word	0x20000896
 800278c:	20000614 	.word	0x20000614
 8002790:	200042b0 	.word	0x200042b0

08002794 <ReadTxEepromQueueAndWriteEeprom>:
 * Parameters:  None
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void ReadTxEepromQueueAndWriteEeprom()
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
	if( IsTxEepromQueueEmpty() != false )
 800279a:	f7ff fe8b 	bl	80024b4 <IsTxEepromQueueEmpty>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d140      	bne.n	8002826 <ReadTxEepromQueueAndWriteEeprom+0x92>
		// Tx Eeprom queue is empty, nothing to read and transmit
		// UartPrintf("I2C EEPROM Tx queue is empty\n");
		return;
	}

	if( eepromWriteWait != false )
 80027a4:	4b23      	ldr	r3, [pc, #140]	; (8002834 <ReadTxEepromQueueAndWriteEeprom+0xa0>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d13e      	bne.n	800282a <ReadTxEepromQueueAndWriteEeprom+0x96>
		// UartPrintf("I2C EEPROM wait time has not elasped\n");
		return;
	}

	// Read data from Tx EEPROM queue
    uint16_t dataAddress = eepromTxQueue[eepromTxQueueReadIndex].address;
 80027ac:	4b22      	ldr	r3, [pc, #136]	; (8002838 <ReadTxEepromQueueAndWriteEeprom+0xa4>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	4619      	mov	r1, r3
 80027b2:	4a22      	ldr	r2, [pc, #136]	; (800283c <ReadTxEepromQueueAndWriteEeprom+0xa8>)
 80027b4:	460b      	mov	r3, r1
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	80fb      	strh	r3, [r7, #6]
    uint8_t numBytesToWrite = eepromTxQueue[eepromTxQueueReadIndex].numBytes;
 80027c2:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <ReadTxEepromQueueAndWriteEeprom+0xa4>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	4619      	mov	r1, r3
 80027c8:	4a1c      	ldr	r2, [pc, #112]	; (800283c <ReadTxEepromQueueAndWriteEeprom+0xa8>)
 80027ca:	460b      	mov	r3, r1
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	3302      	adds	r3, #2
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	717b      	strb	r3, [r7, #5]
    uint8_t * writeData = &(eepromTxQueue[eepromTxQueueReadIndex].data[0]);
 80027da:	4b17      	ldr	r3, [pc, #92]	; (8002838 <ReadTxEepromQueueAndWriteEeprom+0xa4>)
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4a14      	ldr	r2, [pc, #80]	; (800283c <ReadTxEepromQueueAndWriteEeprom+0xa8>)
 80027ea:	4413      	add	r3, r2
 80027ec:	3303      	adds	r3, #3
 80027ee:	603b      	str	r3, [r7, #0]

	// Increment Tx EEPROM queue read index
	eepromTxQueueReadIndex++;
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <ReadTxEepromQueueAndWriteEeprom+0xa4>)
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	3301      	adds	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <ReadTxEepromQueueAndWriteEeprom+0xa4>)
 80027fa:	801a      	strh	r2, [r3, #0]
	if( eepromTxQueueReadIndex >= EEPROM_TX_QUEUE_SIZE )
 80027fc:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <ReadTxEepromQueueAndWriteEeprom+0xa4>)
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	2b1f      	cmp	r3, #31
 8002802:	d902      	bls.n	800280a <ReadTxEepromQueueAndWriteEeprom+0x76>
	{
		// Read index was at maximum, set to 0
		eepromTxQueueReadIndex =  0;
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <ReadTxEepromQueueAndWriteEeprom+0xa4>)
 8002806:	2200      	movs	r2, #0
 8002808:	801a      	strh	r2, [r3, #0]
	}

	// Write data to EEPROM
	if( WriteEeprom( dataAddress, writeData, numBytesToWrite ) != 0 )
 800280a:	797b      	ldrb	r3, [r7, #5]
 800280c:	b29a      	uxth	r2, r3
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	6839      	ldr	r1, [r7, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fea6 	bl	8002564 <WriteEeprom>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <ReadTxEepromQueueAndWriteEeprom+0x98>
	{
		UartPrintf("I2C IT Transmit ERROR in ReadTxEepromQueueAndTransmit\n");
 800281e:	4808      	ldr	r0, [pc, #32]	; (8002840 <ReadTxEepromQueueAndWriteEeprom+0xac>)
 8002820:	f003 fa7e 	bl	8005d20 <UartPrintf>
 8002824:	e002      	b.n	800282c <ReadTxEepromQueueAndWriteEeprom+0x98>
		return;
 8002826:	bf00      	nop
 8002828:	e000      	b.n	800282c <ReadTxEepromQueueAndWriteEeprom+0x98>
		return;
 800282a:	bf00      	nop
	}
}
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000ac0 	.word	0x20000ac0
 8002838:	20000894 	.word	0x20000894
 800283c:	20000614 	.word	0x20000614
 8002840:	08021398 	.word	0x08021398

08002844 <StoreLogWritePointerInEeprom>:
{
	WriteTxEepromQueue(PEXP_GAIN_ADRS, (uint8_t *)&pExpGain, 4 );
}

void StoreLogWritePointerInEeprom( uint16_t logWritePointer )
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	80fb      	strh	r3, [r7, #6]
	WriteTxEepromQueue(LOG_WRITE_POINTER_ADDRESS, (uint8_t *)&logWritePointer, 2 );
 800284e:	1dbb      	adds	r3, r7, #6
 8002850:	2202      	movs	r2, #2
 8002852:	4619      	mov	r1, r3
 8002854:	207e      	movs	r0, #126	; 0x7e
 8002856:	f7ff ff1f 	bl	8002698 <WriteTxEepromQueue>
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <StoreMinuteCntrInEeprom>:

void StoreMinuteCntrInEeprom( uint32_t minuteCount )
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
	WriteTxEepromQueue( MINUTE_CNTR_ADDRESS, (uint8_t *)&minuteCount, 4 );
 800286a:	1d3b      	adds	r3, r7, #4
 800286c:	2204      	movs	r2, #4
 800286e:	4619      	mov	r1, r3
 8002870:	207a      	movs	r0, #122	; 0x7a
 8002872:	f7ff ff11 	bl	8002698 <WriteTxEepromQueue>
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <StoreEventCntrInEeprom>:

void StoreEventCntrInEeprom( uint16_t eventCount )
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	4603      	mov	r3, r0
 8002886:	80fb      	strh	r3, [r7, #6]
	WriteTxEepromQueue( EVENT_CNTR_ADDRESS, (uint8_t *)&eventCount, 2 );
 8002888:	1dbb      	adds	r3, r7, #6
 800288a:	2202      	movs	r2, #2
 800288c:	4619      	mov	r1, r3
 800288e:	2075      	movs	r0, #117	; 0x75
 8002890:	f7ff ff02 	bl	8002698 <WriteTxEepromQueue>
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <StoreMfgDateInEeprom>:
{
	WriteTxEepromQueue(HUMAN_USE_WORD_ADRS, (uint8_t *)&humanUseWord, 4 );
}

void StoreMfgDateInEeprom( char * mfgDate )
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	WriteTxEepromQueue(MFG_DATE_ADRS, (uint8_t *)mfgDate, 16 );
 80028a4:	2210      	movs	r2, #16
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	2014      	movs	r0, #20
 80028aa:	f7ff fef5 	bl	8002698 <WriteTxEepromQueue>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <StoreSerialNumberInEeprom>:

void StoreSerialNumberInEeprom( uint32_t serialNum )
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
	WriteTxEepromQueue(SERIAL_NUMBER_ADRS, (uint8_t *)&serialNum, 4 );
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	2204      	movs	r2, #4
 80028c2:	4619      	mov	r1, r3
 80028c4:	2024      	movs	r0, #36	; 0x24
 80028c6:	f7ff fee7 	bl	8002698 <WriteTxEepromQueue>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <SetEventCount>:

void SetEventCount( uint16_t eventCount )
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	80fb      	strh	r3, [r7, #6]
	eventCounter = eventCount;
 80028de:	4a04      	ldr	r2, [pc, #16]	; (80028f0 <SetEventCount+0x1c>)
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	8013      	strh	r3, [r2, #0]
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	200008b4 	.word	0x200008b4

080028f4 <InitializeLog>:

//
// Set at manufacturing time
//
void InitializeLog( )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
	// Set EEPROM log write pointer to log start address
	eepromLogWritePtr = LOG_START_ADDR;
 80028fa:	4b13      	ldr	r3, [pc, #76]	; (8002948 <InitializeLog+0x54>)
 80028fc:	2280      	movs	r2, #128	; 0x80
 80028fe:	801a      	strh	r2, [r3, #0]
	StoreLogWritePointerInEeprom( eepromLogWritePtr );
 8002900:	4b11      	ldr	r3, [pc, #68]	; (8002948 <InitializeLog+0x54>)
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff9d 	bl	8002844 <StoreLogWritePointerInEeprom>

	// Set minute counter to 0
	uint32_t minuteCounter = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	607b      	str	r3, [r7, #4]
	SetMinuteCount( minuteCounter );
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f005 fa22 	bl	8007d58 <SetMinuteCount>
	StoreMinuteCntrInEeprom( minuteCounter );
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff ffa4 	bl	8002862 <StoreMinuteCntrInEeprom>

	// Set event counter to 0
	uint16_t eventCount = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	807b      	strh	r3, [r7, #2]
	SetEventCount( eventCount );
 800291e:	887b      	ldrh	r3, [r7, #2]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ffd7 	bl	80028d4 <SetEventCount>
	StoreEventCntrInEeprom( eventCount );
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ffa8 	bl	800287e <StoreEventCntrInEeprom>

	// Clear log wrapped flag
	logWrappedFlag = 0;
 800292e:	4b07      	ldr	r3, [pc, #28]	; (800294c <InitializeLog+0x58>)
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
	WriteTxEepromQueue( LOG_WRAPPED_FLAG_ADDRESS, &logWrappedFlag, 1);
 8002934:	2201      	movs	r2, #1
 8002936:	4905      	ldr	r1, [pc, #20]	; (800294c <InitializeLog+0x58>)
 8002938:	2079      	movs	r0, #121	; 0x79
 800293a:	f7ff fead 	bl	8002698 <WriteTxEepromQueue>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	200008a0 	.word	0x200008a0
 800294c:	200008b6 	.word	0x200008b6

08002950 <GetMfgDateFromEeprom>:

	ReadEeprom( PINSP_OFFSET_ADRS, (uint8_t *)&calibrationConstants, sizeof(calConstants) );
}

void GetMfgDateFromEeprom( )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
	getMfgDate = true;
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <GetMfgDateFromEeprom+0x18>)
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]

	ReadEeprom( MFG_DATE_ADRS, (uint8_t *)&manufactureDate, 16 );
 800295a:	2210      	movs	r2, #16
 800295c:	4903      	ldr	r1, [pc, #12]	; (800296c <GetMfgDateFromEeprom+0x1c>)
 800295e:	2014      	movs	r0, #20
 8002960:	f7ff fd42 	bl	80023e8 <ReadEeprom>
}
 8002964:	bf00      	nop
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000aca 	.word	0x20000aca
 800296c:	2000003c 	.word	0x2000003c

08002970 <GetSerialNumberFromEeprom>:

void GetSerialNumberFromEeprom( )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
	getSerialNumber = true;
 8002974:	4b04      	ldr	r3, [pc, #16]	; (8002988 <GetSerialNumberFromEeprom+0x18>)
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]

	ReadEeprom( SERIAL_NUMBER_ADRS, (uint8_t *)&serialNumber, 4 );
 800297a:	2204      	movs	r2, #4
 800297c:	4903      	ldr	r1, [pc, #12]	; (800298c <GetSerialNumberFromEeprom+0x1c>)
 800297e:	2024      	movs	r0, #36	; 0x24
 8002980:	f7ff fd32 	bl	80023e8 <ReadEeprom>
}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000acb 	.word	0x20000acb
 800298c:	20000610 	.word	0x20000610

08002990 <crc32c>:

/* CRC-32C (iSCSI) polynomial in reversed bit order. */
#define POLY 0x82f63b78

uint32_t crc32c( uint32_t crc, uint8_t * buf, size_t len )
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
    crc = ~crc;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	43db      	mvns	r3, r3
 80029a0:	60fb      	str	r3, [r7, #12]

    while (len--)
 80029a2:	e01d      	b.n	80029e0 <crc32c+0x50>
    {
        crc ^= *buf++;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	60ba      	str	r2, [r7, #8]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4053      	eors	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]

        for( int i=0; i<8; i++ )
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	e00f      	b.n	80029da <crc32c+0x4a>
        {
        	crc = crc & 1 ? (crc >> 1) ^ POLY : crc >> 1;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d004      	beq.n	80029ce <crc32c+0x3e>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	085a      	lsrs	r2, r3, #1
 80029c8:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <crc32c+0x6c>)
 80029ca:	4053      	eors	r3, r2
 80029cc:	e001      	b.n	80029d2 <crc32c+0x42>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	085b      	lsrs	r3, r3, #1
 80029d2:	60fb      	str	r3, [r7, #12]
        for( int i=0; i<8; i++ )
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	3301      	adds	r3, #1
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b07      	cmp	r3, #7
 80029de:	ddec      	ble.n	80029ba <crc32c+0x2a>
    while (len--)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	1e5a      	subs	r2, r3, #1
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1dc      	bne.n	80029a4 <crc32c+0x14>
        }
    }

    return ~crc;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	43db      	mvns	r3, r3
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	82f63b78 	.word	0x82f63b78

08002a00 <CalcCalConstantsCrc>:

uint32_t CalcCalConstantsCrc( )
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
	calcCalConstCrc = crc32c( 0, (uint8_t *)&calibrationConstants, sizeof(calConstants) - 4 );
 8002a04:	220c      	movs	r2, #12
 8002a06:	4905      	ldr	r1, [pc, #20]	; (8002a1c <CalcCalConstantsCrc+0x1c>)
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7ff ffc1 	bl	8002990 <crc32c>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	4a03      	ldr	r2, [pc, #12]	; (8002a20 <CalcCalConstantsCrc+0x20>)
 8002a12:	6013      	str	r3, [r2, #0]
	return calcCalConstCrc;
 8002a14:	4b02      	ldr	r3, [pc, #8]	; (8002a20 <CalcCalConstantsCrc+0x20>)
 8002a16:	681b      	ldr	r3, [r3, #0]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000600 	.word	0x20000600
 8002a20:	200008a4 	.word	0x200008a4

08002a24 <ReadFromUpperPartOfEeprom>:
	StoreProgramCrcInEeprom( programCrc );
#endif
}

void ReadFromUpperPartOfEeprom( )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
	uint16_t bytesToEndOfLog = LOG_MAX_ADDR - logReadPointer;
 8002a2a:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <ReadFromUpperPartOfEeprom+0x70>)
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	80fb      	strh	r3, [r7, #6]

	numLogBytesToRead = (bytesToEndOfLog > MAX_NUM_LOG_BYTES_PER_READ) ? MAX_NUM_LOG_BYTES_PER_READ : bytesToEndOfLog;
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a38:	bf28      	it	cs
 8002a3a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <ReadFromUpperPartOfEeprom+0x74>)
 8002a42:	801a      	strh	r2, [r3, #0]

	if( numLogBytesToRead == 0 )
 8002a44:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <ReadFromUpperPartOfEeprom+0x74>)
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d103      	bne.n	8002a54 <ReadFromUpperPartOfEeprom+0x30>
	{
		UartPrintf("Number of bytes to read from upper part of log is 0\n");
 8002a4c:	4813      	ldr	r0, [pc, #76]	; (8002a9c <ReadFromUpperPartOfEeprom+0x78>)
 8002a4e:	f003 f967 	bl	8005d20 <UartPrintf>
		return;
 8002a52:	e01c      	b.n	8002a8e <ReadFromUpperPartOfEeprom+0x6a>
	}

	ReadEeprom( logReadPointer, logData, numLogBytesToRead );
 8002a54:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <ReadFromUpperPartOfEeprom+0x70>)
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	4a0f      	ldr	r2, [pc, #60]	; (8002a98 <ReadFromUpperPartOfEeprom+0x74>)
 8002a5a:	8812      	ldrh	r2, [r2, #0]
 8002a5c:	b212      	sxth	r2, r2
 8002a5e:	4910      	ldr	r1, [pc, #64]	; (8002aa0 <ReadFromUpperPartOfEeprom+0x7c>)
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fcc1 	bl	80023e8 <ReadEeprom>

	uint32_t logReadPtr = logReadPointer + numLogBytesToRead;
 8002a66:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <ReadFromUpperPartOfEeprom+0x70>)
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <ReadFromUpperPartOfEeprom+0x74>)
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	4413      	add	r3, r2
 8002a72:	603b      	str	r3, [r7, #0]

	if( logReadPtr >= LOG_MAX_ADDR )
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d903      	bls.n	8002a86 <ReadFromUpperPartOfEeprom+0x62>
	{
		logReadPointer = LOG_START_ADDR;
 8002a7e:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <ReadFromUpperPartOfEeprom+0x70>)
 8002a80:	2280      	movs	r2, #128	; 0x80
 8002a82:	801a      	strh	r2, [r3, #0]
 8002a84:	e003      	b.n	8002a8e <ReadFromUpperPartOfEeprom+0x6a>
	}
	else
	{
		logReadPointer = logReadPtr;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	4b02      	ldr	r3, [pc, #8]	; (8002a94 <ReadFromUpperPartOfEeprom+0x70>)
 8002a8c:	801a      	strh	r2, [r3, #0]
	}
}
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000ab8 	.word	0x20000ab8
 8002a98:	2000004e 	.word	0x2000004e
 8002a9c:	08021414 	.word	0x08021414
 8002aa0:	200008b8 	.word	0x200008b8

08002aa4 <ReadFromLowerPartOfEeprom>:

void ReadFromLowerPartOfEeprom( )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
	uint16_t bytesToWritePointer = eepromLogWritePtr - logReadPointer;
 8002aaa:	4b1c      	ldr	r3, [pc, #112]	; (8002b1c <ReadFromLowerPartOfEeprom+0x78>)
 8002aac:	881a      	ldrh	r2, [r3, #0]
 8002aae:	4b1c      	ldr	r3, [pc, #112]	; (8002b20 <ReadFromLowerPartOfEeprom+0x7c>)
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	80fb      	strh	r3, [r7, #6]

	numLogBytesToRead = (bytesToWritePointer > MAX_NUM_LOG_BYTES_PER_READ) ? MAX_NUM_LOG_BYTES_PER_READ : bytesToWritePointer;
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002abc:	bf28      	it	cs
 8002abe:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <ReadFromLowerPartOfEeprom+0x80>)
 8002ac6:	801a      	strh	r2, [r3, #0]

	if( numLogBytesToRead == 0 )
 8002ac8:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <ReadFromLowerPartOfEeprom+0x80>)
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d103      	bne.n	8002ad8 <ReadFromLowerPartOfEeprom+0x34>
	{
		UartPrintf("Number of bytes to read from lower part of log is 0\n");
 8002ad0:	4815      	ldr	r0, [pc, #84]	; (8002b28 <ReadFromLowerPartOfEeprom+0x84>)
 8002ad2:	f003 f925 	bl	8005d20 <UartPrintf>
		return;
 8002ad6:	e01d      	b.n	8002b14 <ReadFromLowerPartOfEeprom+0x70>
	}

	ReadEeprom( logReadPointer, logData, numLogBytesToRead );
 8002ad8:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <ReadFromLowerPartOfEeprom+0x7c>)
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	4a11      	ldr	r2, [pc, #68]	; (8002b24 <ReadFromLowerPartOfEeprom+0x80>)
 8002ade:	8812      	ldrh	r2, [r2, #0]
 8002ae0:	b212      	sxth	r2, r2
 8002ae2:	4912      	ldr	r1, [pc, #72]	; (8002b2c <ReadFromLowerPartOfEeprom+0x88>)
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fc7f 	bl	80023e8 <ReadEeprom>

	uint32_t logReadPtr = logReadPointer + numLogBytesToRead;
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <ReadFromLowerPartOfEeprom+0x7c>)
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <ReadFromLowerPartOfEeprom+0x80>)
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	4413      	add	r3, r2
 8002af6:	603b      	str	r3, [r7, #0]

	if( logReadPtr >= eepromLogWritePtr )
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <ReadFromLowerPartOfEeprom+0x78>)
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d303      	bcc.n	8002b0c <ReadFromLowerPartOfEeprom+0x68>
	{
		logReadComplete = true;
 8002b04:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <ReadFromLowerPartOfEeprom+0x8c>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	701a      	strb	r2, [r3, #0]
 8002b0a:	e003      	b.n	8002b14 <ReadFromLowerPartOfEeprom+0x70>
	}
	else
	{
		logReadPointer = logReadPtr;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <ReadFromLowerPartOfEeprom+0x7c>)
 8002b12:	801a      	strh	r2, [r3, #0]
	}
}
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200008a0 	.word	0x200008a0
 8002b20:	20000ab8 	.word	0x20000ab8
 8002b24:	2000004e 	.word	0x2000004e
 8002b28:	0802144c 	.word	0x0802144c
 8002b2c:	200008b8 	.word	0x200008b8
 8002b30:	20000ac9 	.word	0x20000ac9

08002b34 <ProcessEepromReadComplete>:

    UartPrintf("");
}

void ProcessEepromReadComplete( )
{
 8002b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b38:	b086      	sub	sp, #24
 8002b3a:	af06      	add	r7, sp, #24
	if( testRead != false )
 8002b3c:	4b87      	ldr	r3, [pc, #540]	; (8002d5c <ProcessEepromReadComplete+0x228>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d006      	beq.n	8002b52 <ProcessEepromReadComplete+0x1e>
	{
		testRead = false;
 8002b44:	4b85      	ldr	r3, [pc, #532]	; (8002d5c <ProcessEepromReadComplete+0x228>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]

		displayEepromTest = true;
 8002b4a:	4b85      	ldr	r3, [pc, #532]	; (8002d60 <ProcessEepromReadComplete+0x22c>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	701a      	strb	r2, [r3, #0]

	    return;
 8002b50:	e100      	b.n	8002d54 <ProcessEepromReadComplete+0x220>
	}

	if( getLogWritePtr != false )
 8002b52:	4b84      	ldr	r3, [pc, #528]	; (8002d64 <ProcessEepromReadComplete+0x230>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <ProcessEepromReadComplete+0x3a>
	{
		getLogWritePtr = false;
 8002b5a:	4b82      	ldr	r3, [pc, #520]	; (8002d64 <ProcessEepromReadComplete+0x230>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]

		UartPrintf("Log Write Ptr: 0x%04x\n", eepromLogWritePtr);
 8002b60:	4b81      	ldr	r3, [pc, #516]	; (8002d68 <ProcessEepromReadComplete+0x234>)
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	4619      	mov	r1, r3
 8002b66:	4881      	ldr	r0, [pc, #516]	; (8002d6c <ProcessEepromReadComplete+0x238>)
 8002b68:	f003 f8da 	bl	8005d20 <UartPrintf>

		return;
 8002b6c:	e0f2      	b.n	8002d54 <ProcessEepromReadComplete+0x220>
	}

	if( getMinuteCounter != false )
 8002b6e:	4b80      	ldr	r3, [pc, #512]	; (8002d70 <ProcessEepromReadComplete+0x23c>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00e      	beq.n	8002b94 <ProcessEepromReadComplete+0x60>
	{
		getMinuteCounter = false;
 8002b76:	4b7e      	ldr	r3, [pc, #504]	; (8002d70 <ProcessEepromReadComplete+0x23c>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]

		SetMinuteCount( minuteCounter );
 8002b7c:	4b7d      	ldr	r3, [pc, #500]	; (8002d74 <ProcessEepromReadComplete+0x240>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f005 f8e9 	bl	8007d58 <SetMinuteCount>

		UartPrintf("Minute Counter: 0x%04x\n", minuteCounter);
 8002b86:	4b7b      	ldr	r3, [pc, #492]	; (8002d74 <ProcessEepromReadComplete+0x240>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	487a      	ldr	r0, [pc, #488]	; (8002d78 <ProcessEepromReadComplete+0x244>)
 8002b8e:	f003 f8c7 	bl	8005d20 <UartPrintf>

		return;
 8002b92:	e0df      	b.n	8002d54 <ProcessEepromReadComplete+0x220>
	}

	if( getEventCounter != false )
 8002b94:	4b79      	ldr	r3, [pc, #484]	; (8002d7c <ProcessEepromReadComplete+0x248>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00e      	beq.n	8002bba <ProcessEepromReadComplete+0x86>
	{
		getEventCounter = false;
 8002b9c:	4b77      	ldr	r3, [pc, #476]	; (8002d7c <ProcessEepromReadComplete+0x248>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]

		SetEventCount( eventCounter );
 8002ba2:	4b77      	ldr	r3, [pc, #476]	; (8002d80 <ProcessEepromReadComplete+0x24c>)
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fe94 	bl	80028d4 <SetEventCount>

		UartPrintf("Event Counter: %4u\n", eventCounter);
 8002bac:	4b74      	ldr	r3, [pc, #464]	; (8002d80 <ProcessEepromReadComplete+0x24c>)
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4874      	ldr	r0, [pc, #464]	; (8002d84 <ProcessEepromReadComplete+0x250>)
 8002bb4:	f003 f8b4 	bl	8005d20 <UartPrintf>

		return;
 8002bb8:	e0cc      	b.n	8002d54 <ProcessEepromReadComplete+0x220>
	}

	if( getNivWord != false )
 8002bba:	4b73      	ldr	r3, [pc, #460]	; (8002d88 <ProcessEepromReadComplete+0x254>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <ProcessEepromReadComplete+0xa2>
	{
		getNivWord = false;
 8002bc2:	4b71      	ldr	r3, [pc, #452]	; (8002d88 <ProcessEepromReadComplete+0x254>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]

		UartPrintf("Niv Word: 0x%08x\n", nivWordValue);
 8002bc8:	4b70      	ldr	r3, [pc, #448]	; (8002d8c <ProcessEepromReadComplete+0x258>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4870      	ldr	r0, [pc, #448]	; (8002d90 <ProcessEepromReadComplete+0x25c>)
 8002bd0:	f003 f8a6 	bl	8005d20 <UartPrintf>

		return;
 8002bd4:	e0be      	b.n	8002d54 <ProcessEepromReadComplete+0x220>
	}

	if( getHumanUseWord != false )
 8002bd6:	4b6f      	ldr	r3, [pc, #444]	; (8002d94 <ProcessEepromReadComplete+0x260>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d009      	beq.n	8002bf2 <ProcessEepromReadComplete+0xbe>
	{
		getHumanUseWord = false;
 8002bde:	4b6d      	ldr	r3, [pc, #436]	; (8002d94 <ProcessEepromReadComplete+0x260>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]

		UartPrintf("Human Use Word: 0x%08x\n", humanUseWordValue);
 8002be4:	4b6c      	ldr	r3, [pc, #432]	; (8002d98 <ProcessEepromReadComplete+0x264>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4619      	mov	r1, r3
 8002bea:	486c      	ldr	r0, [pc, #432]	; (8002d9c <ProcessEepromReadComplete+0x268>)
 8002bec:	f003 f898 	bl	8005d20 <UartPrintf>

		return;
 8002bf0:	e0b0      	b.n	8002d54 <ProcessEepromReadComplete+0x220>
	}

	if( getProgramCrc != false )
 8002bf2:	4b6b      	ldr	r3, [pc, #428]	; (8002da0 <ProcessEepromReadComplete+0x26c>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <ProcessEepromReadComplete+0xce>
	{
		getProgramCrc = false;
 8002bfa:	4b69      	ldr	r3, [pc, #420]	; (8002da0 <ProcessEepromReadComplete+0x26c>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]

		return;
 8002c00:	e0a8      	b.n	8002d54 <ProcessEepromReadComplete+0x220>
	}

	if( getCalConstants != false )
 8002c02:	4b68      	ldr	r3, [pc, #416]	; (8002da4 <ProcessEepromReadComplete+0x270>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d03a      	beq.n	8002c80 <ProcessEepromReadComplete+0x14c>
	{
		getCalConstants = false;
 8002c0a:	4b66      	ldr	r3, [pc, #408]	; (8002da4 <ProcessEepromReadComplete+0x270>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]

		CalcCalConstantsCrc();
 8002c10:	f7ff fef6 	bl	8002a00 <CalcCalConstantsCrc>

		if( calcCalConstCrc != calibrationConstants.crc32 )
 8002c14:	4b64      	ldr	r3, [pc, #400]	; (8002da8 <ProcessEepromReadComplete+0x274>)
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	4b64      	ldr	r3, [pc, #400]	; (8002dac <ProcessEepromReadComplete+0x278>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d006      	beq.n	8002c2e <ProcessEepromReadComplete+0xfa>
		{
			UartPrintf("Calibration Constants Bad CRC\n");
 8002c20:	4863      	ldr	r0, [pc, #396]	; (8002db0 <ProcessEepromReadComplete+0x27c>)
 8002c22:	f003 f87d 	bl	8005d20 <UartPrintf>
			calConstantsCrcGood = 1;
 8002c26:	4b63      	ldr	r3, [pc, #396]	; (8002db4 <ProcessEepromReadComplete+0x280>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
 8002c2c:	e005      	b.n	8002c3a <ProcessEepromReadComplete+0x106>
		}
		else
		{
			UartPrintf("Calibration Constants Good CRC\n");
 8002c2e:	4862      	ldr	r0, [pc, #392]	; (8002db8 <ProcessEepromReadComplete+0x284>)
 8002c30:	f003 f876 	bl	8005d20 <UartPrintf>
			calConstantsCrcGood = 0;
 8002c34:	4b5f      	ldr	r3, [pc, #380]	; (8002db4 <ProcessEepromReadComplete+0x280>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
		}

		UartPrintf("PinspOffset: %d  PexpOffset: %d   PinspGain: %f  PexpGain: %f  CRC: 0x%08x\n", calibrationConstants.pInspOffset, calibrationConstants.pExpOffset,
 8002c3a:	4b5b      	ldr	r3, [pc, #364]	; (8002da8 <ProcessEepromReadComplete+0x274>)
 8002c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c40:	461e      	mov	r6, r3
 8002c42:	4b59      	ldr	r3, [pc, #356]	; (8002da8 <ProcessEepromReadComplete+0x274>)
 8002c44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c48:	4698      	mov	r8, r3
				calibrationConstants.pInspGain.floatValue, calibrationConstants.pExpGain.floatValue, calibrationConstants.crc32);
 8002c4a:	4b57      	ldr	r3, [pc, #348]	; (8002da8 <ProcessEepromReadComplete+0x274>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
		UartPrintf("PinspOffset: %d  PexpOffset: %d   PinspGain: %f  PexpGain: %f  CRC: 0x%08x\n", calibrationConstants.pInspOffset, calibrationConstants.pExpOffset,
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd fcb2 	bl	80005b8 <__aeabi_f2d>
 8002c54:	4604      	mov	r4, r0
 8002c56:	460d      	mov	r5, r1
				calibrationConstants.pInspGain.floatValue, calibrationConstants.pExpGain.floatValue, calibrationConstants.crc32);
 8002c58:	4b53      	ldr	r3, [pc, #332]	; (8002da8 <ProcessEepromReadComplete+0x274>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
		UartPrintf("PinspOffset: %d  PexpOffset: %d   PinspGain: %f  PexpGain: %f  CRC: 0x%08x\n", calibrationConstants.pInspOffset, calibrationConstants.pExpOffset,
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fcab 	bl	80005b8 <__aeabi_f2d>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4950      	ldr	r1, [pc, #320]	; (8002da8 <ProcessEepromReadComplete+0x274>)
 8002c68:	68c9      	ldr	r1, [r1, #12]
 8002c6a:	9104      	str	r1, [sp, #16]
 8002c6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c70:	e9cd 4500 	strd	r4, r5, [sp]
 8002c74:	4642      	mov	r2, r8
 8002c76:	4631      	mov	r1, r6
 8002c78:	4850      	ldr	r0, [pc, #320]	; (8002dbc <ProcessEepromReadComplete+0x288>)
 8002c7a:	f003 f851 	bl	8005d20 <UartPrintf>
		return;
 8002c7e:	e069      	b.n	8002d54 <ProcessEepromReadComplete+0x220>
	}

	if( getMfgDate != false )
 8002c80:	4b4f      	ldr	r3, [pc, #316]	; (8002dc0 <ProcessEepromReadComplete+0x28c>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d007      	beq.n	8002c98 <ProcessEepromReadComplete+0x164>
	{
		getMfgDate = false;
 8002c88:	4b4d      	ldr	r3, [pc, #308]	; (8002dc0 <ProcessEepromReadComplete+0x28c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]

		UartPrintf("Manufacture Date: %s\n", manufactureDate);
 8002c8e:	494d      	ldr	r1, [pc, #308]	; (8002dc4 <ProcessEepromReadComplete+0x290>)
 8002c90:	484d      	ldr	r0, [pc, #308]	; (8002dc8 <ProcessEepromReadComplete+0x294>)
 8002c92:	f003 f845 	bl	8005d20 <UartPrintf>

		return;
 8002c96:	e05d      	b.n	8002d54 <ProcessEepromReadComplete+0x220>
	}

	if( getSerialNumber != false )
 8002c98:	4b4c      	ldr	r3, [pc, #304]	; (8002dcc <ProcessEepromReadComplete+0x298>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d009      	beq.n	8002cb4 <ProcessEepromReadComplete+0x180>
	{
		getSerialNumber = false;
 8002ca0:	4b4a      	ldr	r3, [pc, #296]	; (8002dcc <ProcessEepromReadComplete+0x298>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]

		UartPrintf("Serial Number: %u\n", serialNumber);
 8002ca6:	4b4a      	ldr	r3, [pc, #296]	; (8002dd0 <ProcessEepromReadComplete+0x29c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4619      	mov	r1, r3
 8002cac:	4849      	ldr	r0, [pc, #292]	; (8002dd4 <ProcessEepromReadComplete+0x2a0>)
 8002cae:	f003 f837 	bl	8005d20 <UartPrintf>

		return;
 8002cb2:	e04f      	b.n	8002d54 <ProcessEepromReadComplete+0x220>
	}

	if( getWatchdogByte != false )
 8002cb4:	4b48      	ldr	r3, [pc, #288]	; (8002dd8 <ProcessEepromReadComplete+0x2a4>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <ProcessEepromReadComplete+0x190>
	{
		getWatchdogByte = false;
 8002cbc:	4b46      	ldr	r3, [pc, #280]	; (8002dd8 <ProcessEepromReadComplete+0x2a4>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]

		return;
 8002cc2:	e047      	b.n	8002d54 <ProcessEepromReadComplete+0x220>
	}

	if( getSupercapByte != false )
 8002cc4:	4b45      	ldr	r3, [pc, #276]	; (8002ddc <ProcessEepromReadComplete+0x2a8>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <ProcessEepromReadComplete+0x1a0>
	{
		getSupercapByte = false;
 8002ccc:	4b43      	ldr	r3, [pc, #268]	; (8002ddc <ProcessEepromReadComplete+0x2a8>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]

		return;
 8002cd2:	e03f      	b.n	8002d54 <ProcessEepromReadComplete+0x220>
	}

	if( dumpEepromFlag != false )
 8002cd4:	4b42      	ldr	r3, [pc, #264]	; (8002de0 <ProcessEepromReadComplete+0x2ac>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d03b      	beq.n	8002d54 <ProcessEepromReadComplete+0x220>
	{
		if( logReadComplete != false )
 8002cdc:	4b41      	ldr	r3, [pc, #260]	; (8002de4 <ProcessEepromReadComplete+0x2b0>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d006      	beq.n	8002cf2 <ProcessEepromReadComplete+0x1be>
		{
			// Log read is complete
			// Set flag to display final portion of log that has been read
			dumpEepromFlag = false;
 8002ce4:	4b3e      	ldr	r3, [pc, #248]	; (8002de0 <ProcessEepromReadComplete+0x2ac>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
			displayLogData = true;
 8002cea:	4b3f      	ldr	r3, [pc, #252]	; (8002de8 <ProcessEepromReadComplete+0x2b4>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	701a      	strb	r2, [r3, #0]
 8002cf0:	e030      	b.n	8002d54 <ProcessEepromReadComplete+0x220>
		}
		else if( initiateLogRead != false )
 8002cf2:	4b3e      	ldr	r3, [pc, #248]	; (8002dec <ProcessEepromReadComplete+0x2b8>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d029      	beq.n	8002d4e <ProcessEepromReadComplete+0x21a>
		{
			initiateLogRead = false;
 8002cfa:	4b3c      	ldr	r3, [pc, #240]	; (8002dec <ProcessEepromReadComplete+0x2b8>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]

			// Read first portion of log
			if(( logWrappedFlag == 0 ) && ( eepromLogWritePtr == LOG_START_ADDR ))
 8002d00:	4b3b      	ldr	r3, [pc, #236]	; (8002df0 <ProcessEepromReadComplete+0x2bc>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10d      	bne.n	8002d24 <ProcessEepromReadComplete+0x1f0>
 8002d08:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <ProcessEepromReadComplete+0x234>)
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	2b80      	cmp	r3, #128	; 0x80
 8002d0e:	d109      	bne.n	8002d24 <ProcessEepromReadComplete+0x1f0>
			{
				dumpEepromFlag = false;
 8002d10:	4b33      	ldr	r3, [pc, #204]	; (8002de0 <ProcessEepromReadComplete+0x2ac>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
				displayLogData = false;
 8002d16:	4b34      	ldr	r3, [pc, #208]	; (8002de8 <ProcessEepromReadComplete+0x2b4>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
				UartPrintf("Log is empty.\n");
 8002d1c:	4835      	ldr	r0, [pc, #212]	; (8002df4 <ProcessEepromReadComplete+0x2c0>)
 8002d1e:	f002 ffff 	bl	8005d20 <UartPrintf>
 8002d22:	e017      	b.n	8002d54 <ProcessEepromReadComplete+0x220>
			}
			else if(( logWrappedFlag == 1 ) && ( eepromLogWritePtr != LOG_START_ADDR ))
 8002d24:	4b32      	ldr	r3, [pc, #200]	; (8002df0 <ProcessEepromReadComplete+0x2bc>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d10a      	bne.n	8002d42 <ProcessEepromReadComplete+0x20e>
 8002d2c:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <ProcessEepromReadComplete+0x234>)
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	2b80      	cmp	r3, #128	; 0x80
 8002d32:	d006      	beq.n	8002d42 <ProcessEepromReadComplete+0x20e>
			{
				// Log wrapped flag is set, dump from log write pointer to end of log, and then from log start to log write pointer - 1
				logReadPointer = eepromLogWritePtr;
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <ProcessEepromReadComplete+0x234>)
 8002d36:	881a      	ldrh	r2, [r3, #0]
 8002d38:	4b2f      	ldr	r3, [pc, #188]	; (8002df8 <ProcessEepromReadComplete+0x2c4>)
 8002d3a:	801a      	strh	r2, [r3, #0]
				ReadFromUpperPartOfEeprom();
 8002d3c:	f7ff fe72 	bl	8002a24 <ReadFromUpperPartOfEeprom>
 8002d40:	e008      	b.n	8002d54 <ProcessEepromReadComplete+0x220>
			}
			else
			{
				// Log wrapped flag is not set, dump from log start to log write pointer - 1
				logReadPointer = LOG_START_ADDR;
 8002d42:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <ProcessEepromReadComplete+0x2c4>)
 8002d44:	2280      	movs	r2, #128	; 0x80
 8002d46:	801a      	strh	r2, [r3, #0]
				ReadFromLowerPartOfEeprom();
 8002d48:	f7ff feac 	bl	8002aa4 <ReadFromLowerPartOfEeprom>
 8002d4c:	e002      	b.n	8002d54 <ProcessEepromReadComplete+0x220>
			}
		}
		else
		{
			// Set flag to display portion of log that has been read
			displayLogData = true;
 8002d4e:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <ProcessEepromReadComplete+0x2b4>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002d54:	46bd      	mov	sp, r7
 8002d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000ac5 	.word	0x20000ac5
 8002d60:	20000ac2 	.word	0x20000ac2
 8002d64:	20000aba 	.word	0x20000aba
 8002d68:	200008a0 	.word	0x200008a0
 8002d6c:	080214b4 	.word	0x080214b4
 8002d70:	20000abb 	.word	0x20000abb
 8002d74:	200008a8 	.word	0x200008a8
 8002d78:	080214cc 	.word	0x080214cc
 8002d7c:	20000abc 	.word	0x20000abc
 8002d80:	200008b4 	.word	0x200008b4
 8002d84:	080214e4 	.word	0x080214e4
 8002d88:	20000abd 	.word	0x20000abd
 8002d8c:	200008ac 	.word	0x200008ac
 8002d90:	080214f8 	.word	0x080214f8
 8002d94:	20000abe 	.word	0x20000abe
 8002d98:	200008b0 	.word	0x200008b0
 8002d9c:	0802150c 	.word	0x0802150c
 8002da0:	20000abf 	.word	0x20000abf
 8002da4:	20000ac6 	.word	0x20000ac6
 8002da8:	20000600 	.word	0x20000600
 8002dac:	200008a4 	.word	0x200008a4
 8002db0:	08021524 	.word	0x08021524
 8002db4:	2000004c 	.word	0x2000004c
 8002db8:	08021544 	.word	0x08021544
 8002dbc:	08021564 	.word	0x08021564
 8002dc0:	20000aca 	.word	0x20000aca
 8002dc4:	2000003c 	.word	0x2000003c
 8002dc8:	080215b0 	.word	0x080215b0
 8002dcc:	20000acb 	.word	0x20000acb
 8002dd0:	20000610 	.word	0x20000610
 8002dd4:	080215c8 	.word	0x080215c8
 8002dd8:	20000ac3 	.word	0x20000ac3
 8002ddc:	20000ac4 	.word	0x20000ac4
 8002de0:	20000ac7 	.word	0x20000ac7
 8002de4:	20000ac9 	.word	0x20000ac9
 8002de8:	20000ac1 	.word	0x20000ac1
 8002dec:	20000ac8 	.word	0x20000ac8
 8002df0:	200008b6 	.word	0x200008b6
 8002df4:	080215dc 	.word	0x080215dc
 8002df8:	20000ab8 	.word	0x20000ab8

08002dfc <SynchOut>:
uint32_t g_currentDACVal = 0;

/*                                                                          _____
SynchOut();		Generates a single pulse 100mS duration  High-Low-High ____|     |____  */
void SynchOut(bool status)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, SYNC_OUT_Pin, status);
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e0e:	4803      	ldr	r0, [pc, #12]	; (8002e1c <SynchOut+0x20>)
 8002e10:	f007 ff5c 	bl	800accc <HAL_GPIO_WritePin>
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40020400 	.word	0x40020400

08002e20 <valve_control>:
  * @brief VALVE Control Functions
  * @param None
  * @retval None
  */
void valve_control(uint8_t valvename, bool status)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	460a      	mov	r2, r1
 8002e2a:	71fb      	strb	r3, [r7, #7]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	71bb      	strb	r3, [r7, #6]
	switch(valvename){
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	2b07      	cmp	r3, #7
 8002e36:	d84c      	bhi.n	8002ed2 <valve_control+0xb2>
 8002e38:	a201      	add	r2, pc, #4	; (adr r2, 8002e40 <valve_control+0x20>)
 8002e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3e:	bf00      	nop
 8002e40:	08002e61 	.word	0x08002e61
 8002e44:	08002e6f 	.word	0x08002e6f
 8002e48:	08002e7d 	.word	0x08002e7d
 8002e4c:	08002e8b 	.word	0x08002e8b
 8002e50:	08002e99 	.word	0x08002e99
 8002e54:	08002ea7 	.word	0x08002ea7
 8002e58:	08002eb5 	.word	0x08002eb5
 8002e5c:	08002ec3 	.word	0x08002ec3
		case 1 :
			HAL_GPIO_WritePin(GPIOG, VALVE_1A_CTRL_Pin, status);
 8002e60:	79bb      	ldrb	r3, [r7, #6]
 8002e62:	461a      	mov	r2, r3
 8002e64:	2101      	movs	r1, #1
 8002e66:	481d      	ldr	r0, [pc, #116]	; (8002edc <valve_control+0xbc>)
 8002e68:	f007 ff30 	bl	800accc <HAL_GPIO_WritePin>
			break;
 8002e6c:	e031      	b.n	8002ed2 <valve_control+0xb2>
		case 2:
			HAL_GPIO_WritePin(GPIOG, VALVE_1B_CTRL_Pin, status);
 8002e6e:	79bb      	ldrb	r3, [r7, #6]
 8002e70:	461a      	mov	r2, r3
 8002e72:	2102      	movs	r1, #2
 8002e74:	4819      	ldr	r0, [pc, #100]	; (8002edc <valve_control+0xbc>)
 8002e76:	f007 ff29 	bl	800accc <HAL_GPIO_WritePin>
			break;
 8002e7a:	e02a      	b.n	8002ed2 <valve_control+0xb2>
		case 3:
			HAL_GPIO_WritePin(GPIOG, VALVE_2A_CTRL_Pin, status);
 8002e7c:	79bb      	ldrb	r3, [r7, #6]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2104      	movs	r1, #4
 8002e82:	4816      	ldr	r0, [pc, #88]	; (8002edc <valve_control+0xbc>)
 8002e84:	f007 ff22 	bl	800accc <HAL_GPIO_WritePin>
			break;
 8002e88:	e023      	b.n	8002ed2 <valve_control+0xb2>
		case 4:
			HAL_GPIO_WritePin(GPIOG, VALVE_2B_CTRL_Pin, status);
 8002e8a:	79bb      	ldrb	r3, [r7, #6]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	2108      	movs	r1, #8
 8002e90:	4812      	ldr	r0, [pc, #72]	; (8002edc <valve_control+0xbc>)
 8002e92:	f007 ff1b 	bl	800accc <HAL_GPIO_WritePin>
			break;
 8002e96:	e01c      	b.n	8002ed2 <valve_control+0xb2>
		case 5:
			HAL_GPIO_WritePin(GPIOG, VALVE_3A_CTRL_Pin, status);
 8002e98:	79bb      	ldrb	r3, [r7, #6]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	2120      	movs	r1, #32
 8002e9e:	480f      	ldr	r0, [pc, #60]	; (8002edc <valve_control+0xbc>)
 8002ea0:	f007 ff14 	bl	800accc <HAL_GPIO_WritePin>
			break;
 8002ea4:	e015      	b.n	8002ed2 <valve_control+0xb2>
		case 6:
			HAL_GPIO_WritePin(GPIOG, VALVE_3B_CTRL_Pin, status);
 8002ea6:	79bb      	ldrb	r3, [r7, #6]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2140      	movs	r1, #64	; 0x40
 8002eac:	480b      	ldr	r0, [pc, #44]	; (8002edc <valve_control+0xbc>)
 8002eae:	f007 ff0d 	bl	800accc <HAL_GPIO_WritePin>
			break;
 8002eb2:	e00e      	b.n	8002ed2 <valve_control+0xb2>
		case 7:
			HAL_GPIO_WritePin(GPIOG, VALVE_4A_CTRL_Pin, status);
 8002eb4:	79bb      	ldrb	r3, [r7, #6]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	4808      	ldr	r0, [pc, #32]	; (8002edc <valve_control+0xbc>)
 8002ebc:	f007 ff06 	bl	800accc <HAL_GPIO_WritePin>
			break;
 8002ec0:	e007      	b.n	8002ed2 <valve_control+0xb2>
		case 8:
			HAL_GPIO_WritePin(GPIOG, VALVE_4B_CTRL_Pin, status);
 8002ec2:	79bb      	ldrb	r3, [r7, #6]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eca:	4804      	ldr	r0, [pc, #16]	; (8002edc <valve_control+0xbc>)
 8002ecc:	f007 fefe 	bl	800accc <HAL_GPIO_WritePin>
			break;
 8002ed0:	bf00      	nop
	}
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40021800 	.word	0x40021800

08002ee0 <Valve_1A_On>:

void Valve_1A_On()
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_1A_CTRL_Pin, GPIO_PIN_SET);
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	4804      	ldr	r0, [pc, #16]	; (8002efc <Valve_1A_On+0x1c>)
 8002eea:	f007 feef 	bl	800accc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8002eee:	2201      	movs	r2, #1
 8002ef0:	2180      	movs	r1, #128	; 0x80
 8002ef2:	4803      	ldr	r0, [pc, #12]	; (8002f00 <Valve_1A_On+0x20>)
 8002ef4:	f007 feea 	bl	800accc <HAL_GPIO_WritePin>
}
 8002ef8:	bf00      	nop
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40021800 	.word	0x40021800
 8002f00:	40020400 	.word	0x40020400

08002f04 <Valve_1A_Off>:

void Valve_1A_Off()
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_1A_CTRL_Pin, GPIO_PIN_RESET);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	4804      	ldr	r0, [pc, #16]	; (8002f20 <Valve_1A_Off+0x1c>)
 8002f0e:	f007 fedd 	bl	800accc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8002f12:	2200      	movs	r2, #0
 8002f14:	2180      	movs	r1, #128	; 0x80
 8002f16:	4803      	ldr	r0, [pc, #12]	; (8002f24 <Valve_1A_Off+0x20>)
 8002f18:	f007 fed8 	bl	800accc <HAL_GPIO_WritePin>
}
 8002f1c:	bf00      	nop
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021800 	.word	0x40021800
 8002f24:	40020400 	.word	0x40020400

08002f28 <Valve_1B_On>:

void Valve_1B_On()
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_1B_CTRL_Pin, GPIO_PIN_SET);
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	2102      	movs	r1, #2
 8002f30:	4805      	ldr	r0, [pc, #20]	; (8002f48 <Valve_1B_On+0x20>)
 8002f32:	f007 fecb 	bl	800accc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8002f36:	2201      	movs	r2, #1
 8002f38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f3c:	4803      	ldr	r0, [pc, #12]	; (8002f4c <Valve_1B_On+0x24>)
 8002f3e:	f007 fec5 	bl	800accc <HAL_GPIO_WritePin>
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40021800 	.word	0x40021800
 8002f4c:	40020400 	.word	0x40020400

08002f50 <Valve_1B_Off>:

void Valve_1B_Off()
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_1B_CTRL_Pin, GPIO_PIN_RESET);
 8002f54:	2200      	movs	r2, #0
 8002f56:	2102      	movs	r1, #2
 8002f58:	4805      	ldr	r0, [pc, #20]	; (8002f70 <Valve_1B_Off+0x20>)
 8002f5a:	f007 feb7 	bl	800accc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f64:	4803      	ldr	r0, [pc, #12]	; (8002f74 <Valve_1B_Off+0x24>)
 8002f66:	f007 feb1 	bl	800accc <HAL_GPIO_WritePin>
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40021800 	.word	0x40021800
 8002f74:	40020400 	.word	0x40020400

08002f78 <Valve_2A_On>:

void Valve_2A_On()
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_2A_CTRL_Pin, GPIO_PIN_SET);
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	2104      	movs	r1, #4
 8002f80:	4802      	ldr	r0, [pc, #8]	; (8002f8c <Valve_2A_On+0x14>)
 8002f82:	f007 fea3 	bl	800accc <HAL_GPIO_WritePin>
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40021800 	.word	0x40021800

08002f90 <Valve_2A_Off>:

void Valve_2A_Off()
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_2A_CTRL_Pin, GPIO_PIN_RESET);
 8002f94:	2200      	movs	r2, #0
 8002f96:	2104      	movs	r1, #4
 8002f98:	4802      	ldr	r0, [pc, #8]	; (8002fa4 <Valve_2A_Off+0x14>)
 8002f9a:	f007 fe97 	bl	800accc <HAL_GPIO_WritePin>
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40021800 	.word	0x40021800

08002fa8 <Valve_2B_On>:

void Valve_2B_On()
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_2B_CTRL_Pin, GPIO_PIN_SET);
 8002fac:	2201      	movs	r2, #1
 8002fae:	2108      	movs	r1, #8
 8002fb0:	4802      	ldr	r0, [pc, #8]	; (8002fbc <Valve_2B_On+0x14>)
 8002fb2:	f007 fe8b 	bl	800accc <HAL_GPIO_WritePin>
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40021800 	.word	0x40021800

08002fc0 <Valve_2B_Off>:

void Valve_2B_Off()
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_2B_CTRL_Pin, GPIO_PIN_RESET);
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2108      	movs	r1, #8
 8002fc8:	4802      	ldr	r0, [pc, #8]	; (8002fd4 <Valve_2B_Off+0x14>)
 8002fca:	f007 fe7f 	bl	800accc <HAL_GPIO_WritePin>
}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40021800 	.word	0x40021800

08002fd8 <Valve_3A_On>:

void Valve_3A_On()
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_3A_CTRL_Pin, GPIO_PIN_SET);
 8002fdc:	2201      	movs	r2, #1
 8002fde:	2120      	movs	r1, #32
 8002fe0:	4802      	ldr	r0, [pc, #8]	; (8002fec <Valve_3A_On+0x14>)
 8002fe2:	f007 fe73 	bl	800accc <HAL_GPIO_WritePin>
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40021800 	.word	0x40021800

08002ff0 <Valve_3A_Off>:

void Valve_3A_Off()
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_3A_CTRL_Pin, GPIO_PIN_RESET);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2120      	movs	r1, #32
 8002ff8:	4802      	ldr	r0, [pc, #8]	; (8003004 <Valve_3A_Off+0x14>)
 8002ffa:	f007 fe67 	bl	800accc <HAL_GPIO_WritePin>
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40021800 	.word	0x40021800

08003008 <Valve_3B_On>:

void Valve_3B_On()
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_3B_CTRL_Pin, GPIO_PIN_SET);
 800300c:	2201      	movs	r2, #1
 800300e:	2140      	movs	r1, #64	; 0x40
 8003010:	4802      	ldr	r0, [pc, #8]	; (800301c <Valve_3B_On+0x14>)
 8003012:	f007 fe5b 	bl	800accc <HAL_GPIO_WritePin>
}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40021800 	.word	0x40021800

08003020 <Valve_3B_Off>:

void Valve_3B_Off()
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_3B_CTRL_Pin, GPIO_PIN_RESET);
 8003024:	2200      	movs	r2, #0
 8003026:	2140      	movs	r1, #64	; 0x40
 8003028:	4802      	ldr	r0, [pc, #8]	; (8003034 <Valve_3B_Off+0x14>)
 800302a:	f007 fe4f 	bl	800accc <HAL_GPIO_WritePin>
}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40021800 	.word	0x40021800

08003038 <Valve_4A_On>:

void Valve_4A_On()
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_4A_CTRL_Pin, GPIO_PIN_SET);
 800303c:	2201      	movs	r2, #1
 800303e:	2180      	movs	r1, #128	; 0x80
 8003040:	4802      	ldr	r0, [pc, #8]	; (800304c <Valve_4A_On+0x14>)
 8003042:	f007 fe43 	bl	800accc <HAL_GPIO_WritePin>
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40021800 	.word	0x40021800

08003050 <Valve_4A_Off>:

void Valve_4A_Off()
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, VALVE_4A_CTRL_Pin, GPIO_PIN_RESET);
 8003054:	2200      	movs	r2, #0
 8003056:	2180      	movs	r1, #128	; 0x80
 8003058:	4802      	ldr	r0, [pc, #8]	; (8003064 <Valve_4A_Off+0x14>)
 800305a:	f007 fe37 	bl	800accc <HAL_GPIO_WritePin>
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40021800 	.word	0x40021800

08003068 <batleds_control>:

// Battery LED Control
// Syntaxis example:  batled(LedBat25, on/off)

void batleds_control(uint8_t batled, bool status)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	460a      	mov	r2, r1
 8003072:	71fb      	strb	r3, [r7, #7]
 8003074:	4613      	mov	r3, r2
 8003076:	71bb      	strb	r3, [r7, #6]
	switch(batled){
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	3b01      	subs	r3, #1
 800307c:	2b03      	cmp	r3, #3
 800307e:	d82b      	bhi.n	80030d8 <batleds_control+0x70>
 8003080:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <batleds_control+0x20>)
 8003082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003086:	bf00      	nop
 8003088:	08003099 	.word	0x08003099
 800308c:	080030a9 	.word	0x080030a9
 8003090:	080030b9 	.word	0x080030b9
 8003094:	080030c9 	.word	0x080030c9
	case 1 :
			HAL_GPIO_WritePin(GPIOD, LED_BAT25_Pin, status);
 8003098:	79bb      	ldrb	r3, [r7, #6]
 800309a:	461a      	mov	r2, r3
 800309c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030a0:	480f      	ldr	r0, [pc, #60]	; (80030e0 <batleds_control+0x78>)
 80030a2:	f007 fe13 	bl	800accc <HAL_GPIO_WritePin>
			break;
 80030a6:	e017      	b.n	80030d8 <batleds_control+0x70>
	case 2:
			HAL_GPIO_WritePin(GPIOD, LED_BAT50_Pin, status);
 80030a8:	79bb      	ldrb	r3, [r7, #6]
 80030aa:	461a      	mov	r2, r3
 80030ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030b0:	480b      	ldr	r0, [pc, #44]	; (80030e0 <batleds_control+0x78>)
 80030b2:	f007 fe0b 	bl	800accc <HAL_GPIO_WritePin>
			break;
 80030b6:	e00f      	b.n	80030d8 <batleds_control+0x70>
	case 3:
			HAL_GPIO_WritePin(GPIOD, LED_BAT75_Pin, status);
 80030b8:	79bb      	ldrb	r3, [r7, #6]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030c0:	4807      	ldr	r0, [pc, #28]	; (80030e0 <batleds_control+0x78>)
 80030c2:	f007 fe03 	bl	800accc <HAL_GPIO_WritePin>
			break;
 80030c6:	e007      	b.n	80030d8 <batleds_control+0x70>
	case 4:
			HAL_GPIO_WritePin(GPIOD, LED_BAT100_Pin, status);
 80030c8:	79bb      	ldrb	r3, [r7, #6]
 80030ca:	461a      	mov	r2, r3
 80030cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030d0:	4803      	ldr	r0, [pc, #12]	; (80030e0 <batleds_control+0x78>)
 80030d2:	f007 fdfb 	bl	800accc <HAL_GPIO_WritePin>
			break;
 80030d6:	bf00      	nop

	}

}
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40020c00 	.word	0x40020c00

080030e4 <alarmleds_control>:

// Alarm LED Control
// Syntaxis example:  alarmled yellow on/off
void alarmleds_control(uint8_t alarmled, bool status)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	460a      	mov	r2, r1
 80030ee:	71fb      	strb	r3, [r7, #7]
 80030f0:	4613      	mov	r3, r2
 80030f2:	71bb      	strb	r3, [r7, #6]
	switch(alarmled)
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d016      	beq.n	8003128 <alarmleds_control+0x44>
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	dc1c      	bgt.n	8003138 <alarmleds_control+0x54>
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d002      	beq.n	8003108 <alarmleds_control+0x24>
 8003102:	2b02      	cmp	r3, #2
 8003104:	d008      	beq.n	8003118 <alarmleds_control+0x34>

	    case 3:
		HAL_GPIO_WritePin(GPIOD, LED_R_Pin, status);
		break;
	}
}
 8003106:	e017      	b.n	8003138 <alarmleds_control+0x54>
		HAL_GPIO_WritePin(GPIOD, LED_Y_Pin, status);
 8003108:	79bb      	ldrb	r3, [r7, #6]
 800310a:	461a      	mov	r2, r3
 800310c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003110:	480b      	ldr	r0, [pc, #44]	; (8003140 <alarmleds_control+0x5c>)
 8003112:	f007 fddb 	bl	800accc <HAL_GPIO_WritePin>
		break;
 8003116:	e00f      	b.n	8003138 <alarmleds_control+0x54>
		HAL_GPIO_WritePin(GPIOD, LED_G_Pin, status);
 8003118:	79bb      	ldrb	r3, [r7, #6]
 800311a:	461a      	mov	r2, r3
 800311c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003120:	4807      	ldr	r0, [pc, #28]	; (8003140 <alarmleds_control+0x5c>)
 8003122:	f007 fdd3 	bl	800accc <HAL_GPIO_WritePin>
		break;
 8003126:	e007      	b.n	8003138 <alarmleds_control+0x54>
		HAL_GPIO_WritePin(GPIOD, LED_R_Pin, status);
 8003128:	79bb      	ldrb	r3, [r7, #6]
 800312a:	461a      	mov	r2, r3
 800312c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003130:	4803      	ldr	r0, [pc, #12]	; (8003140 <alarmleds_control+0x5c>)
 8003132:	f007 fdcb 	bl	800accc <HAL_GPIO_WritePin>
		break;
 8003136:	bf00      	nop
}
 8003138:	bf00      	nop
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40020c00 	.word	0x40020c00

08003144 <compressor_control>:

void compressor_control(bool status)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, COMPRESSOR_CTRL_Pin, status);
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	461a      	mov	r2, r3
 8003152:	2120      	movs	r1, #32
 8003154:	4803      	ldr	r0, [pc, #12]	; (8003164 <compressor_control+0x20>)
 8003156:	f007 fdb9 	bl	800accc <HAL_GPIO_WritePin>
}
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000

08003168 <Compressor_Control_On>:

void Compressor_Control_On()
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, COMPRESSOR_CTRL_Pin, GPIO_PIN_SET);
 800316c:	2201      	movs	r2, #1
 800316e:	2120      	movs	r1, #32
 8003170:	4802      	ldr	r0, [pc, #8]	; (800317c <Compressor_Control_On+0x14>)
 8003172:	f007 fdab 	bl	800accc <HAL_GPIO_WritePin>
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000

08003180 <Compressor_Control_Off>:

void Compressor_Control_Off()
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, COMPRESSOR_CTRL_Pin, GPIO_PIN_RESET);
 8003184:	2200      	movs	r2, #0
 8003186:	2120      	movs	r1, #32
 8003188:	4802      	ldr	r0, [pc, #8]	; (8003194 <Compressor_Control_Off+0x14>)
 800318a:	f007 fd9f 	bl	800accc <HAL_GPIO_WritePin>
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000

08003198 <MembranePS_control>:

void MembranePS_control(bool status)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOG, MEMB_POWER_EN_Pin, status);
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	461a      	mov	r2, r3
 80031a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031aa:	4803      	ldr	r0, [pc, #12]	; (80031b8 <MembranePS_control+0x20>)
 80031ac:	f007 fd8e 	bl	800accc <HAL_GPIO_WritePin>
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40021800 	.word	0x40021800

080031bc <displayPS_control>:

// Tested OK 092121 GG
void displayPS_control(bool status)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, DISP_POWER_EN_Pin, status);
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	461a      	mov	r2, r3
 80031ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031ce:	4803      	ldr	r0, [pc, #12]	; (80031dc <displayPS_control+0x20>)
 80031d0:	f007 fd7c 	bl	800accc <HAL_GPIO_WritePin>
}
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40020000 	.word	0x40020000

080031e0 <powerpcb_control>:

// Tested OK 090721 GG
void powerpcb_control(bool status)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, PWRRELAY_CTRL_Pin, status);  //PE6
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	461a      	mov	r2, r3
 80031ee:	2140      	movs	r1, #64	; 0x40
 80031f0:	4803      	ldr	r0, [pc, #12]	; (8003200 <powerpcb_control+0x20>)
 80031f2:	f007 fd6b 	bl	800accc <HAL_GPIO_WritePin>
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000

08003204 <PF_control>:

// Tested OK 090721 GG
void PF_control(bool status)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, PF_EN_Pin, status);  //PE11
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	461a      	mov	r2, r3
 8003212:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003216:	4803      	ldr	r0, [pc, #12]	; (8003224 <PF_control+0x20>)
 8003218:	f007 fd58 	bl	800accc <HAL_GPIO_WritePin>
}
 800321c:	bf00      	nop
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000

08003228 <PFC_RLY_control>:
	HAL_GPIO_WritePin(GPIOE, PF_EN_Pin, status);  //PE11
}*/

// Tested OK 090721 GG
void PFC_RLY_control(bool status)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PFC_RLY_EN_GPIO_Port, PFC_RLY_EN_Pin, status);  //PE7
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	461a      	mov	r2, r3
 8003236:	2180      	movs	r1, #128	; 0x80
 8003238:	4803      	ldr	r0, [pc, #12]	; (8003248 <PFC_RLY_control+0x20>)
 800323a:	f007 fd47 	bl	800accc <HAL_GPIO_WritePin>
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000

0800324c <BlowerDAC>:
//BlowerDAC(n); 		n is a floating point value 0-100%
//For 12-bit DAC = 2^12 = 4096
//Vout = (Vref x D) / 2^N = (3.3 x 1000)/4096 = 0.806V */

void BlowerDAC(uint32_t speed)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	2100      	movs	r1, #0
 800325a:	4803      	ldr	r0, [pc, #12]	; (8003268 <BlowerDAC+0x1c>)
 800325c:	f006 fee9 	bl	800a032 <HAL_DAC_SetValue>
}
 8003260:	bf00      	nop
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20004250 	.word	0x20004250
 800326c:	00000000 	.word	0x00000000

08003270 <BlowerControl>:

void BlowerControl(uint16_t dacval)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	80fb      	strh	r3, [r7, #6]
	uint32_t var =0;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
	float value = 0.0;
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	60bb      	str	r3, [r7, #8]
	g_currentDACVal = dacval;
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	4a22      	ldr	r2, [pc, #136]	; (8003310 <BlowerControl+0xa0>)
 8003288:	6013      	str	r3, [r2, #0]

	//Warning
	//These while loops with delays inside are mean! they halt all program
	//execution, use ONLY for hardware debugging and fix for firmware production

	while(var < dacval )   //(value < dacval )
 800328a:	e02f      	b.n	80032ec <BlowerControl+0x7c>
	{
		var = value*(0xFFF + 1)/3.3;
 800328c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003290:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003314 <BlowerControl+0xa4>
 8003294:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003298:	ee17 0a90 	vmov	r0, s15
 800329c:	f7fd f98c 	bl	80005b8 <__aeabi_f2d>
 80032a0:	a317      	add	r3, pc, #92	; (adr r3, 8003300 <BlowerControl+0x90>)
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	f7fd fb09 	bl	80008bc <__aeabi_ddiv>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4610      	mov	r0, r2
 80032b0:	4619      	mov	r1, r3
 80032b2:	f7fd fcb1 	bl	8000c18 <__aeabi_d2uiz>
 80032b6:	4603      	mov	r3, r0
 80032b8:	60fb      	str	r3, [r7, #12]
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, var);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	2100      	movs	r1, #0
 80032c0:	4815      	ldr	r0, [pc, #84]	; (8003318 <BlowerControl+0xa8>)
 80032c2:	f006 feb6 	bl	800a032 <HAL_DAC_SetValue>
		value += 0.05;
 80032c6:	68b8      	ldr	r0, [r7, #8]
 80032c8:	f7fd f976 	bl	80005b8 <__aeabi_f2d>
 80032cc:	a30e      	add	r3, pc, #56	; (adr r3, 8003308 <BlowerControl+0x98>)
 80032ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d2:	f7fd f813 	bl	80002fc <__adddf3>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4610      	mov	r0, r2
 80032dc:	4619      	mov	r1, r3
 80032de:	f7fd fcbb 	bl	8000c58 <__aeabi_d2f>
 80032e2:	4603      	mov	r3, r0
 80032e4:	60bb      	str	r3, [r7, #8]
		HAL_Delay(40); //this controls the speed of ramping up
 80032e6:	2028      	movs	r0, #40	; 0x28
 80032e8:	f005 ff5a 	bl	80091a0 <HAL_Delay>
	while(var < dacval )   //(value < dacval )
 80032ec:	88fb      	ldrh	r3, [r7, #6]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d3cb      	bcc.n	800328c <BlowerControl+0x1c>
	}
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	66666666 	.word	0x66666666
 8003304:	400a6666 	.word	0x400a6666
 8003308:	9999999a 	.word	0x9999999a
 800330c:	3fa99999 	.word	0x3fa99999
 8003310:	20000acc 	.word	0x20000acc
 8003314:	45800000 	.word	0x45800000
 8003318:	20004250 	.word	0x20004250

0800331c <BlowerOff>:

void BlowerOff()
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
	//uint32_t var;
	uint32_t value = g_currentDACVal;
 8003322:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <BlowerOff+0x3c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	607b      	str	r3, [r7, #4]

    //Warning
	//These while loops with delays inside are mean! they halt all program
	//execution, use ONLY for hardware debugging and fix for firmware production

	while(value  > 50  )
 8003328:	e00e      	b.n	8003348 <BlowerOff+0x2c>
	{
		value = value - 50;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3b32      	subs	r3, #50	; 0x32
 800332e:	607b      	str	r3, [r7, #4]
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	2100      	movs	r1, #0
 8003336:	4809      	ldr	r0, [pc, #36]	; (800335c <BlowerOff+0x40>)
 8003338:	f006 fe7b 	bl	800a032 <HAL_DAC_SetValue>
		g_currentDACVal = value;
 800333c:	4a06      	ldr	r2, [pc, #24]	; (8003358 <BlowerOff+0x3c>)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6013      	str	r3, [r2, #0]
		HAL_Delay(40); //this controls the speed of ramping up
 8003342:	2028      	movs	r0, #40	; 0x28
 8003344:	f005 ff2c 	bl	80091a0 <HAL_Delay>
	while(value  > 50  )
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b32      	cmp	r3, #50	; 0x32
 800334c:	d8ed      	bhi.n	800332a <BlowerOff+0xe>
	}
}
 800334e:	bf00      	nop
 8003350:	bf00      	nop
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000acc 	.word	0x20000acc
 800335c:	20004250 	.word	0x20004250

08003360 <Set_Fan_ONOFF>:


void Set_Fan_ONOFF(bool OnOff)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	71fb      	strb	r3, [r7, #7]
	if(OnOff)
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <Set_Fan_ONOFF+0x1c>
	{
		//UartPrintf("Fan On\n");
		htim14.Instance->CCR1 = 2500; //64% duty cycle
 8003370:	4b07      	ldr	r3, [pc, #28]	; (8003390 <Set_Fan_ONOFF+0x30>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003378:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		//UartPrintf("Fan Off\n");
		htim14.Instance->CCR1 = 0;
	}
}
 800337a:	e003      	b.n	8003384 <Set_Fan_ONOFF+0x24>
		htim14.Instance->CCR1 = 0;
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <Set_Fan_ONOFF+0x30>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2200      	movs	r2, #0
 8003382:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	20004658 	.word	0x20004658

08003394 <FanOnOff>:

void FanOnOff( uint8_t OnOff )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
    if(OnOff)
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <FanOnOff+0x18>
    {
        Set_Fan_ONOFF( true );
 80033a4:	2001      	movs	r0, #1
 80033a6:	f7ff ffdb 	bl	8003360 <Set_Fan_ONOFF>
 80033aa:	e002      	b.n	80033b2 <FanOnOff+0x1e>
    }
    else
    {
    	Set_Fan_ONOFF( false );
 80033ac:	2000      	movs	r0, #0
 80033ae:	f7ff ffd7 	bl	8003360 <Set_Fan_ONOFF>
    }
	UartPrintf("Fan %s\n", (OnOff == 1) ? "ON" : "OFF");
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <FanOnOff+0x28>
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <FanOnOff+0x3c>)
 80033ba:	e000      	b.n	80033be <FanOnOff+0x2a>
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <FanOnOff+0x40>)
 80033be:	4619      	mov	r1, r3
 80033c0:	4805      	ldr	r0, [pc, #20]	; (80033d8 <FanOnOff+0x44>)
 80033c2:	f002 fcad 	bl	8005d20 <UartPrintf>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	08021640 	.word	0x08021640
 80033d4:	08021644 	.word	0x08021644
 80033d8:	08021648 	.word	0x08021648

080033dc <cprtsystem_init>:

void cprtsystem_init()
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
	//Power board is OFF
	powerpcb_control(false);
 80033e0:	2000      	movs	r0, #0
 80033e2:	f7ff fefd 	bl	80031e0 <powerpcb_control>

	//Blower Relay is disable
	PFC_RLY_control(false);
 80033e6:	2000      	movs	r0, #0
 80033e8:	f7ff ff1e 	bl	8003228 <PFC_RLY_control>

	//DAC is set to zero
	BlowerDAC(0);
 80033ec:	2000      	movs	r0, #0
 80033ee:	f7ff ff2d 	bl	800324c <BlowerDAC>

	//PFC_Module is disable
	PF_control(false);
 80033f2:	2000      	movs	r0, #0
 80033f4:	f7ff ff06 	bl	8003204 <PF_control>

	//Set chassis fan off
	//HAL_GPIO_WritePin(GPIOF, FAN_CTRL_PWM_TIM14_Pin, GPIO_PIN_RESET);
	//Please use the API to control the GPIO
	Set_Fan_ONOFF(false);
 80033f8:	2000      	movs	r0, #0
 80033fa:	f7ff ffb1 	bl	8003360 <Set_Fan_ONOFF>
}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <cprtPowerOnSequence>:


void cprtPowerOnSequence()
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08a      	sub	sp, #40	; 0x28
 8003408:	af02      	add	r7, sp, #8
	char msg[20];
	int len = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
	uint32_t i = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]

	//1. Apply Power (24V) to Power PCBA (/PWR_Ctrl signal is active, low)
	powerpcb_control(true);
 8003412:	2001      	movs	r0, #1
 8003414:	f7ff fee4 	bl	80031e0 <powerpcb_control>

	sprintf(msg, "Powerpcb=ON");
 8003418:	1d3b      	adds	r3, r7, #4
 800341a:	4951      	ldr	r1, [pc, #324]	; (8003560 <cprtPowerOnSequence+0x15c>)
 800341c:	4618      	mov	r0, r3
 800341e:	f019 ff61 	bl	801d2e4 <siprintf>
	len =  strlen(msg);
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	4618      	mov	r0, r3
 8003426:	f7fc ff05 	bl	8000234 <strlen>
 800342a:	4603      	mov	r3, r0
 800342c:	61bb      	str	r3, [r7, #24]
	LCD_Write(true, LCD_LINE_1, 0, msg, len);
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	1d3a      	adds	r2, r7, #4
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	4613      	mov	r3, r2
 8003438:	2200      	movs	r2, #0
 800343a:	2100      	movs	r1, #0
 800343c:	2001      	movs	r0, #1
 800343e:	f000 fb15 	bl	8003a6c <LCD_Write>
	//HAL_Delay(3000);
	for (i=0; i<10000000; i++) { }  //stupid delay to avoid using HAL_delay GG 10/05/21
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	e002      	b.n	800344e <cprtPowerOnSequence+0x4a>
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	3301      	adds	r3, #1
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	4a44      	ldr	r2, [pc, #272]	; (8003564 <cprtPowerOnSequence+0x160>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d3f8      	bcc.n	8003448 <cprtPowerOnSequence+0x44>

	//2. Enable PFC Module with /PF_Enable signal
	PF_control(true);
 8003456:	2001      	movs	r0, #1
 8003458:	f7ff fed4 	bl	8003204 <PF_control>

	sprintf(msg, "PFCctrl=ON");
 800345c:	1d3b      	adds	r3, r7, #4
 800345e:	4942      	ldr	r1, [pc, #264]	; (8003568 <cprtPowerOnSequence+0x164>)
 8003460:	4618      	mov	r0, r3
 8003462:	f019 ff3f 	bl	801d2e4 <siprintf>
	len =  strlen(msg);
 8003466:	1d3b      	adds	r3, r7, #4
 8003468:	4618      	mov	r0, r3
 800346a:	f7fc fee3 	bl	8000234 <strlen>
 800346e:	4603      	mov	r3, r0
 8003470:	61bb      	str	r3, [r7, #24]
	LCD_Write(true, LCD_LINE_2, 0, msg, len);
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	b2db      	uxtb	r3, r3
 8003476:	1d3a      	adds	r2, r7, #4
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	4613      	mov	r3, r2
 800347c:	2200      	movs	r2, #0
 800347e:	2101      	movs	r1, #1
 8003480:	2001      	movs	r0, #1
 8003482:	f000 faf3 	bl	8003a6c <LCD_Write>

	//3. Wait until /LD_EN signal is active (low)
	//HAL_Delay(3000);  // As per PFC module specs Ton can be 2.5 Sec - 4 Sec

	for (i=0; i<30000000; i++) { }  //stupid delay to avoid using HAL_delay GG 10/05/21
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
 800348a:	e002      	b.n	8003492 <cprtPowerOnSequence+0x8e>
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	3301      	adds	r3, #1
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	4a35      	ldr	r2, [pc, #212]	; (800356c <cprtPowerOnSequence+0x168>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d9f8      	bls.n	800348c <cprtPowerOnSequence+0x88>

	//Evaluate if LD-ENABLE pin from PFC is active

	if (GetPfcLoadEnable())
 800349a:	f000 f8e3 	bl	8003664 <GetPfcLoadEnable>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d040      	beq.n	8003526 <cprtPowerOnSequence+0x122>
	{
		ClearPfcLoadEnable();
 80034a4:	f000 f8d2 	bl	800364c <ClearPfcLoadEnable>
		HAL_GPIO_WritePin(GPIOD, LED_Y_Pin, false);  //added for troubleshoot purposes GG 100521
 80034a8:	2200      	movs	r2, #0
 80034aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034ae:	4830      	ldr	r0, [pc, #192]	; (8003570 <cprtPowerOnSequence+0x16c>)
 80034b0:	f007 fc0c 	bl	800accc <HAL_GPIO_WritePin>

		sprintf(msg, "/LDEnab detected!");
 80034b4:	1d3b      	adds	r3, r7, #4
 80034b6:	492f      	ldr	r1, [pc, #188]	; (8003574 <cprtPowerOnSequence+0x170>)
 80034b8:	4618      	mov	r0, r3
 80034ba:	f019 ff13 	bl	801d2e4 <siprintf>
		len = snprintf(msg, sizeof(msg), "%s", msg);
 80034be:	1d3b      	adds	r3, r7, #4
 80034c0:	1d38      	adds	r0, r7, #4
 80034c2:	4a2d      	ldr	r2, [pc, #180]	; (8003578 <cprtPowerOnSequence+0x174>)
 80034c4:	2114      	movs	r1, #20
 80034c6:	f019 fed9 	bl	801d27c <sniprintf>
 80034ca:	61b8      	str	r0, [r7, #24]
		LCD_Write(true, LCD_LINE_3, 0, msg, len-1);
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	1d3a      	adds	r2, r7, #4
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	2200      	movs	r2, #0
 80034dc:	2102      	movs	r1, #2
 80034de:	2001      	movs	r0, #1
 80034e0:	f000 fac4 	bl	8003a6c <LCD_Write>

		HAL_Delay(1000); //small additional delay
 80034e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034e8:	f005 fe5a 	bl	80091a0 <HAL_Delay>
		//4. Close K2 relay to power Blower on
		PFC_RLY_control(true);
 80034ec:	2001      	movs	r0, #1
 80034ee:	f7ff fe9b 	bl	8003228 <PFC_RLY_control>

		sprintf(msg, "PFC_rly=closed");
 80034f2:	1d3b      	adds	r3, r7, #4
 80034f4:	4921      	ldr	r1, [pc, #132]	; (800357c <cprtPowerOnSequence+0x178>)
 80034f6:	4618      	mov	r0, r3
 80034f8:	f019 fef4 	bl	801d2e4 <siprintf>
		len =  strlen(msg);
 80034fc:	1d3b      	adds	r3, r7, #4
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fc fe98 	bl	8000234 <strlen>
 8003504:	4603      	mov	r3, r0
 8003506:	61bb      	str	r3, [r7, #24]
		LCD_Write(true, LCD_LINE_4, 0, msg, len);
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	1d3a      	adds	r2, r7, #4
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	4613      	mov	r3, r2
 8003512:	2200      	movs	r2, #0
 8003514:	2103      	movs	r1, #3
 8003516:	2001      	movs	r0, #1
 8003518:	f000 faa8 	bl	8003a6c <LCD_Write>
		HAL_Delay(1000); //small additional delay
 800351c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003520:	f005 fe3e 	bl	80091a0 <HAL_Delay>
		sprintf(msg, "PFCLdEN not detected");
		len =  strlen(msg);
		LCD_Write(true, LCD_LINE_3, 0, msg, len);
		HAL_Delay(2000); //small additional delay
	}
}
 8003524:	e018      	b.n	8003558 <cprtPowerOnSequence+0x154>
		sprintf(msg, "PFCLdEN not detected");
 8003526:	1d3b      	adds	r3, r7, #4
 8003528:	4915      	ldr	r1, [pc, #84]	; (8003580 <cprtPowerOnSequence+0x17c>)
 800352a:	4618      	mov	r0, r3
 800352c:	f019 feda 	bl	801d2e4 <siprintf>
		len =  strlen(msg);
 8003530:	1d3b      	adds	r3, r7, #4
 8003532:	4618      	mov	r0, r3
 8003534:	f7fc fe7e 	bl	8000234 <strlen>
 8003538:	4603      	mov	r3, r0
 800353a:	61bb      	str	r3, [r7, #24]
		LCD_Write(true, LCD_LINE_3, 0, msg, len);
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	1d3a      	adds	r2, r7, #4
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	2200      	movs	r2, #0
 8003548:	2102      	movs	r1, #2
 800354a:	2001      	movs	r0, #1
 800354c:	f000 fa8e 	bl	8003a6c <LCD_Write>
		HAL_Delay(2000); //small additional delay
 8003550:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003554:	f005 fe24 	bl	80091a0 <HAL_Delay>
}
 8003558:	bf00      	nop
 800355a:	3720      	adds	r7, #32
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	08021650 	.word	0x08021650
 8003564:	00989680 	.word	0x00989680
 8003568:	0802165c 	.word	0x0802165c
 800356c:	01c9c37f 	.word	0x01c9c37f
 8003570:	40020c00 	.word	0x40020c00
 8003574:	08021668 	.word	0x08021668
 8003578:	0802167c 	.word	0x0802167c
 800357c:	08021680 	.word	0x08021680
 8003580:	08021690 	.word	0x08021690

08003584 <cprtPowerOffSequence>:


void cprtPowerOffSequence()
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af02      	add	r7, sp, #8
	char msg[20];
	int len = 0;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]

	//1. Open K2 relay to power Blower off
	PFC_RLY_control(false);
 800358e:	2000      	movs	r0, #0
 8003590:	f7ff fe4a 	bl	8003228 <PFC_RLY_control>

	sprintf(msg, "PFC_rly=open");
 8003594:	463b      	mov	r3, r7
 8003596:	492a      	ldr	r1, [pc, #168]	; (8003640 <cprtPowerOffSequence+0xbc>)
 8003598:	4618      	mov	r0, r3
 800359a:	f019 fea3 	bl	801d2e4 <siprintf>
	len =  strlen(msg);
 800359e:	463b      	mov	r3, r7
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fc fe47 	bl	8000234 <strlen>
 80035a6:	4603      	mov	r3, r0
 80035a8:	617b      	str	r3, [r7, #20]
	LCD_Write(true, LCD_LINE_1, 0, msg, len);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	463a      	mov	r2, r7
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	4613      	mov	r3, r2
 80035b4:	2200      	movs	r2, #0
 80035b6:	2100      	movs	r1, #0
 80035b8:	2001      	movs	r0, #1
 80035ba:	f000 fa57 	bl	8003a6c <LCD_Write>
	HAL_Delay(2000);
 80035be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80035c2:	f005 fded 	bl	80091a0 <HAL_Delay>

	//2. Disable PFC Module with /PF_Enable signal
	PF_control(false);
 80035c6:	2000      	movs	r0, #0
 80035c8:	f7ff fe1c 	bl	8003204 <PF_control>

	sprintf(msg, "PFCctrl=OFF");
 80035cc:	463b      	mov	r3, r7
 80035ce:	491d      	ldr	r1, [pc, #116]	; (8003644 <cprtPowerOffSequence+0xc0>)
 80035d0:	4618      	mov	r0, r3
 80035d2:	f019 fe87 	bl	801d2e4 <siprintf>
	len =  strlen(msg);
 80035d6:	463b      	mov	r3, r7
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fc fe2b 	bl	8000234 <strlen>
 80035de:	4603      	mov	r3, r0
 80035e0:	617b      	str	r3, [r7, #20]
	LCD_Write(true, LCD_LINE_2, 0, msg, len);
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	463a      	mov	r2, r7
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	4613      	mov	r3, r2
 80035ec:	2200      	movs	r2, #0
 80035ee:	2101      	movs	r1, #1
 80035f0:	2001      	movs	r0, #1
 80035f2:	f000 fa3b 	bl	8003a6c <LCD_Write>
	HAL_Delay(2000);
 80035f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80035fa:	f005 fdd1 	bl	80091a0 <HAL_Delay>

	//3. Cut Power (24V) to Power PCBA (/PWR_Ctrl signal is inactive, high)
	powerpcb_control(false);
 80035fe:	2000      	movs	r0, #0
 8003600:	f7ff fdee 	bl	80031e0 <powerpcb_control>

	sprintf(msg, "Powerpcb=OFF");
 8003604:	463b      	mov	r3, r7
 8003606:	4910      	ldr	r1, [pc, #64]	; (8003648 <cprtPowerOffSequence+0xc4>)
 8003608:	4618      	mov	r0, r3
 800360a:	f019 fe6b 	bl	801d2e4 <siprintf>
	len =  strlen(msg);
 800360e:	463b      	mov	r3, r7
 8003610:	4618      	mov	r0, r3
 8003612:	f7fc fe0f 	bl	8000234 <strlen>
 8003616:	4603      	mov	r3, r0
 8003618:	617b      	str	r3, [r7, #20]
	LCD_Write(true, LCD_LINE_3, 0, msg, len);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	463a      	mov	r2, r7
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	4613      	mov	r3, r2
 8003624:	2200      	movs	r2, #0
 8003626:	2102      	movs	r1, #2
 8003628:	2001      	movs	r0, #1
 800362a:	f000 fa1f 	bl	8003a6c <LCD_Write>
	HAL_Delay(2000);
 800362e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003632:	f005 fdb5 	bl	80091a0 <HAL_Delay>
}
 8003636:	bf00      	nop
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	080216a8 	.word	0x080216a8
 8003644:	080216b8 	.word	0x080216b8
 8003648:	080216c4 	.word	0x080216c4

0800364c <ClearPfcLoadEnable>:
{
	gstModel.bPfcPowerWarnFail = false;
}

void ClearPfcLoadEnable()
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
	gstModel.bPfcLoadEnable = false;
 8003650:	4b03      	ldr	r3, [pc, #12]	; (8003660 <ClearPfcLoadEnable+0x14>)
 8003652:	2200      	movs	r2, #0
 8003654:	71da      	strb	r2, [r3, #7]
}
 8003656:	bf00      	nop
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	20000c60 	.word	0x20000c60

08003664 <GetPfcLoadEnable>:
{
	return gstModel.bPfcPowerWarnFail;
}

bool GetPfcLoadEnable()
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
	return gstModel.bPfcLoadEnable;
 8003668:	4b03      	ldr	r3, [pc, #12]	; (8003678 <GetPfcLoadEnable+0x14>)
 800366a:	79db      	ldrb	r3, [r3, #7]
}
 800366c:	4618      	mov	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	20000c60 	.word	0x20000c60

0800367c <SetPfcPowerFailWarn>:

void SetPfcPowerFailWarn(bool flag)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	71fb      	strb	r3, [r7, #7]
	gstModel.bPfcPowerWarnFail = flag;
 8003686:	4a04      	ldr	r2, [pc, #16]	; (8003698 <SetPfcPowerFailWarn+0x1c>)
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	7193      	strb	r3, [r2, #6]
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	20000c60 	.word	0x20000c60

0800369c <SetPfcLoadEnable>:

void SetPfcLoadEnable(bool flag)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	71fb      	strb	r3, [r7, #7]
	gstModel.bPfcLoadEnable = flag;
 80036a6:	4a04      	ldr	r2, [pc, #16]	; (80036b8 <SetPfcLoadEnable+0x1c>)
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	71d3      	strb	r3, [r2, #7]
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	20000c60 	.word	0x20000c60

080036bc <GetClearScreenWait>:
static void LCD_ClearScreen(void);
static void LCD_BlinkCursorOnOff(bool flag);


bool GetClearScreenWait( )
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
	return clearScreenWait;
 80036c0:	4b03      	ldr	r3, [pc, #12]	; (80036d0 <GetClearScreenWait+0x14>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	20000c44 	.word	0x20000c44

080036d4 <SetClearScreenWait>:

void SetClearScreenWait( bool clearScreenWaitFlag )
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	71fb      	strb	r3, [r7, #7]
	clearScreenWait = clearScreenWaitFlag;
 80036de:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <SetClearScreenWait+0x1c>)
 80036e0:	79fb      	ldrb	r3, [r7, #7]
 80036e2:	7013      	strb	r3, [r2, #0]
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	20000c44 	.word	0x20000c44

080036f4 <IsTxLcdQueueEmpty>:
 * Parameters:  None
 *
 * Returns:     true if empty, false if not empty
 *---------------------------------------------------------------------------*/
bool IsTxLcdQueueEmpty( )
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
	int16_t queueIndexDiff = lcdTxQueueWriteIndex - lcdTxQueueReadIndex;
 80036fa:	4b14      	ldr	r3, [pc, #80]	; (800374c <IsTxLcdQueueEmpty+0x58>)
 80036fc:	881a      	ldrh	r2, [r3, #0]
 80036fe:	4b14      	ldr	r3, [pc, #80]	; (8003750 <IsTxLcdQueueEmpty+0x5c>)
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	b29b      	uxth	r3, r3
 8003706:	80fb      	strh	r3, [r7, #6]
	curTxLcdQueueDepth = queueIndexDiff;
 8003708:	88fa      	ldrh	r2, [r7, #6]
 800370a:	4b12      	ldr	r3, [pc, #72]	; (8003754 <IsTxLcdQueueEmpty+0x60>)
 800370c:	801a      	strh	r2, [r3, #0]

	if( queueIndexDiff == 0 )
 800370e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <IsTxLcdQueueEmpty+0x26>
	{
		// Tx LCD queue is empty
		return true;
 8003716:	2301      	movs	r3, #1
 8003718:	e011      	b.n	800373e <IsTxLcdQueueEmpty+0x4a>
	}

	if( queueIndexDiff < 0 )
 800371a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800371e:	2b00      	cmp	r3, #0
 8003720:	da03      	bge.n	800372a <IsTxLcdQueueEmpty+0x36>
	{
		queueIndexDiff += LCD_TX_QUEUE_SIZE;
 8003722:	88fb      	ldrh	r3, [r7, #6]
 8003724:	3310      	adds	r3, #16
 8003726:	b29b      	uxth	r3, r3
 8003728:	80fb      	strh	r3, [r7, #6]
	}

	// Keep track of maximum Tx LCD queue depth
	if( queueIndexDiff > maxTxLcdQueueDepth )
 800372a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <IsTxLcdQueueEmpty+0x64>)
 8003730:	8812      	ldrh	r2, [r2, #0]
 8003732:	4293      	cmp	r3, r2
 8003734:	dd02      	ble.n	800373c <IsTxLcdQueueEmpty+0x48>
	{
		maxTxLcdQueueDepth = queueIndexDiff;
 8003736:	88fa      	ldrh	r2, [r7, #6]
 8003738:	4b07      	ldr	r3, [pc, #28]	; (8003758 <IsTxLcdQueueEmpty+0x64>)
 800373a:	801a      	strh	r2, [r3, #0]
	}

	// Tx LCD queue is not empty
	return false;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	20000c3a 	.word	0x20000c3a
 8003750:	20000c38 	.word	0x20000c38
 8003754:	20000c42 	.word	0x20000c42
 8003758:	20000c40 	.word	0x20000c40

0800375c <IsTxLcdQueueFull>:
 * Parameters:  None
 *
 * Returns:     true if full, false if not full
 *---------------------------------------------------------------------------*/
bool IsTxLcdQueueFull( )
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
	int16_t queueIndexDiff = lcdTxQueueWriteIndex - lcdTxQueueReadIndex;
 8003762:	4b0e      	ldr	r3, [pc, #56]	; (800379c <IsTxLcdQueueFull+0x40>)
 8003764:	881a      	ldrh	r2, [r3, #0]
 8003766:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <IsTxLcdQueueFull+0x44>)
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	b29b      	uxth	r3, r3
 800376e:	80fb      	strh	r3, [r7, #6]

	if( queueIndexDiff < 0 )
 8003770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003774:	2b00      	cmp	r3, #0
 8003776:	da03      	bge.n	8003780 <IsTxLcdQueueFull+0x24>
    {
		queueIndexDiff += LCD_TX_QUEUE_SIZE;
 8003778:	88fb      	ldrh	r3, [r7, #6]
 800377a:	3310      	adds	r3, #16
 800377c:	b29b      	uxth	r3, r3
 800377e:	80fb      	strh	r3, [r7, #6]
	}

	if( queueIndexDiff == (LCD_TX_QUEUE_SIZE - 1) )
 8003780:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003784:	2b0f      	cmp	r3, #15
 8003786:	d101      	bne.n	800378c <IsTxLcdQueueFull+0x30>
	{
		// Tx LCD queue is full
		return true;
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <IsTxLcdQueueFull+0x32>
	}

	// Tx LCD queue is not full
	return false;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	20000c3a 	.word	0x20000c3a
 80037a0:	20000c38 	.word	0x20000c38

080037a4 <ReadTxLcdQueueAndTransmit>:
 * Parameters:  None
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void ReadTxLcdQueueAndTransmit()
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
	static bool suppresLcdTransmitError = false;

	if( IsTxLcdQueueEmpty() != false )
 80037aa:	f7ff ffa3 	bl	80036f4 <IsTxLcdQueueEmpty>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d16a      	bne.n	800388a <ReadTxLcdQueueAndTransmit+0xe6>
	{
		// Tx LCD queue is empty, nothing to read and transmit
		return;
	}

	if( clearScreenWait != false )
 80037b4:	4b38      	ldr	r3, [pc, #224]	; (8003898 <ReadTxLcdQueueAndTransmit+0xf4>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d168      	bne.n	800388e <ReadTxLcdQueueAndTransmit+0xea>
	{
		// Wait until clear screen wait time has elapsed before writing LCD line
		return;
	}

	if(HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY)
 80037bc:	4837      	ldr	r0, [pc, #220]	; (800389c <ReadTxLcdQueueAndTransmit+0xf8>)
 80037be:	f007 feb9 	bl	800b534 <HAL_I2C_GetState>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d003      	beq.n	80037d0 <ReadTxLcdQueueAndTransmit+0x2c>
	{
		// LCD I2C bus is not ready yet
		UartPrintf("LCD I2C bus is NOT READY\n");
 80037c8:	4835      	ldr	r0, [pc, #212]	; (80038a0 <ReadTxLcdQueueAndTransmit+0xfc>)
 80037ca:	f002 faa9 	bl	8005d20 <UartPrintf>
		return;
 80037ce:	e05f      	b.n	8003890 <ReadTxLcdQueueAndTransmit+0xec>
	}

	memset( lcdTxBuf, ' ', MAX_NUM_CHARS_PER_LCD_LINE+1 );
 80037d0:	2215      	movs	r2, #21
 80037d2:	2120      	movs	r1, #32
 80037d4:	4833      	ldr	r0, [pc, #204]	; (80038a4 <ReadTxLcdQueueAndTransmit+0x100>)
 80037d6:	f018 ffef 	bl	801c7b8 <memset>

	// Read number of characters to write from LCD queue to LCD I2C
	uint8_t numChars = lcdNumCharsTxQueue[lcdTxQueueReadIndex];
 80037da:	4b33      	ldr	r3, [pc, #204]	; (80038a8 <ReadTxLcdQueueAndTransmit+0x104>)
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	4b32      	ldr	r3, [pc, #200]	; (80038ac <ReadTxLcdQueueAndTransmit+0x108>)
 80037e2:	5c9b      	ldrb	r3, [r3, r2]
 80037e4:	71fb      	strb	r3, [r7, #7]
	memcpy( lcdTxBuf, lcdTxQueue[lcdTxQueueReadIndex], numChars );
 80037e6:	4b30      	ldr	r3, [pc, #192]	; (80038a8 <ReadTxLcdQueueAndTransmit+0x104>)
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	4613      	mov	r3, r2
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	4413      	add	r3, r2
 80037f2:	00da      	lsls	r2, r3, #3
 80037f4:	1ad2      	subs	r2, r2, r3
 80037f6:	4b2e      	ldr	r3, [pc, #184]	; (80038b0 <ReadTxLcdQueueAndTransmit+0x10c>)
 80037f8:	4413      	add	r3, r2
 80037fa:	79fa      	ldrb	r2, [r7, #7]
 80037fc:	4619      	mov	r1, r3
 80037fe:	4829      	ldr	r0, [pc, #164]	; (80038a4 <ReadTxLcdQueueAndTransmit+0x100>)
 8003800:	f018 ffcc 	bl	801c79c <memcpy>

	memset(lcdTxQueue[lcdTxQueueReadIndex], ' ', MAX_NUM_CHARS_PER_LCD_LINE+1);
 8003804:	4b28      	ldr	r3, [pc, #160]	; (80038a8 <ReadTxLcdQueueAndTransmit+0x104>)
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	4613      	mov	r3, r2
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	4413      	add	r3, r2
 8003810:	00da      	lsls	r2, r3, #3
 8003812:	1ad2      	subs	r2, r2, r3
 8003814:	4b26      	ldr	r3, [pc, #152]	; (80038b0 <ReadTxLcdQueueAndTransmit+0x10c>)
 8003816:	4413      	add	r3, r2
 8003818:	2215      	movs	r2, #21
 800381a:	2120      	movs	r1, #32
 800381c:	4618      	mov	r0, r3
 800381e:	f018 ffcb 	bl	801c7b8 <memset>

	if( lcdTxBuf[1] == 0x51 ) // Clear screen command, start wait to allow clear screen to finish before next write to LCD
 8003822:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <ReadTxLcdQueueAndTransmit+0x100>)
 8003824:	785b      	ldrb	r3, [r3, #1]
 8003826:	2b51      	cmp	r3, #81	; 0x51
 8003828:	d102      	bne.n	8003830 <ReadTxLcdQueueAndTransmit+0x8c>
	{
		clearScreenWait = true;
 800382a:	4b1b      	ldr	r3, [pc, #108]	; (8003898 <ReadTxLcdQueueAndTransmit+0xf4>)
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
	}

	// Increment Tx LCD queue read index
	lcdTxQueueReadIndex++;
 8003830:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <ReadTxLcdQueueAndTransmit+0x104>)
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	3301      	adds	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <ReadTxLcdQueueAndTransmit+0x104>)
 800383a:	801a      	strh	r2, [r3, #0]
	if( lcdTxQueueReadIndex >= LCD_TX_QUEUE_SIZE )
 800383c:	4b1a      	ldr	r3, [pc, #104]	; (80038a8 <ReadTxLcdQueueAndTransmit+0x104>)
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	2b0f      	cmp	r3, #15
 8003842:	d902      	bls.n	800384a <ReadTxLcdQueueAndTransmit+0xa6>
	{
		// Read index was at maximum, set to 0
		lcdTxQueueReadIndex =  0;
 8003844:	4b18      	ldr	r3, [pc, #96]	; (80038a8 <ReadTxLcdQueueAndTransmit+0x104>)
 8003846:	2200      	movs	r2, #0
 8003848:	801a      	strh	r2, [r3, #0]
	}

    // UartPrintf("LCD Write %2d chars: %s\n", numChars, lcdTxBuf);
	// Transmit data from Tx LCD queue to I2C via IT
    HAL_StatusTypeDef err = HAL_I2C_Master_Transmit_IT(&hi2c2, LCD_ADD, lcdTxBuf, numChars );
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	b29b      	uxth	r3, r3
 800384e:	4a15      	ldr	r2, [pc, #84]	; (80038a4 <ReadTxLcdQueueAndTransmit+0x100>)
 8003850:	2150      	movs	r1, #80	; 0x50
 8003852:	4812      	ldr	r0, [pc, #72]	; (800389c <ReadTxLcdQueueAndTransmit+0xf8>)
 8003854:	f007 fc0a 	bl	800b06c <HAL_I2C_Master_Transmit_IT>
 8003858:	4603      	mov	r3, r0
 800385a:	71bb      	strb	r3, [r7, #6]
	if( err != HAL_OK )
 800385c:	79bb      	ldrb	r3, [r7, #6]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00f      	beq.n	8003882 <ReadTxLcdQueueAndTransmit+0xde>
	{
		if( suppresLcdTransmitError == false )
 8003862:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <ReadTxLcdQueueAndTransmit+0x110>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	f083 0301 	eor.w	r3, r3, #1
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00f      	beq.n	8003890 <ReadTxLcdQueueAndTransmit+0xec>
		{
			UartPrintf("LCD I2C IT Transmit ERROR in ReadTxLcdQueueAndTransmit %x\n", err);
 8003870:	79bb      	ldrb	r3, [r7, #6]
 8003872:	4619      	mov	r1, r3
 8003874:	4810      	ldr	r0, [pc, #64]	; (80038b8 <ReadTxLcdQueueAndTransmit+0x114>)
 8003876:	f002 fa53 	bl	8005d20 <UartPrintf>
			suppresLcdTransmitError = true;
 800387a:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <ReadTxLcdQueueAndTransmit+0x110>)
 800387c:	2201      	movs	r2, #1
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e006      	b.n	8003890 <ReadTxLcdQueueAndTransmit+0xec>
		}
	}
	else
	{
		suppresLcdTransmitError = false;
 8003882:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <ReadTxLcdQueueAndTransmit+0x110>)
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
 8003888:	e002      	b.n	8003890 <ReadTxLcdQueueAndTransmit+0xec>
		return;
 800388a:	bf00      	nop
 800388c:	e000      	b.n	8003890 <ReadTxLcdQueueAndTransmit+0xec>
		return;
 800388e:	bf00      	nop
	}
}
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20000c44 	.word	0x20000c44
 800389c:	20004264 	.word	0x20004264
 80038a0:	080216d4 	.word	0x080216d4
 80038a4:	20000c48 	.word	0x20000c48
 80038a8:	20000c38 	.word	0x20000c38
 80038ac:	20000c28 	.word	0x20000c28
 80038b0:	20000ad8 	.word	0x20000ad8
 80038b4:	20000c5d 	.word	0x20000c5d
 80038b8:	080216f0 	.word	0x080216f0

080038bc <WriteTxLcdQueue>:
 * Parameters:  buffer - pointer to data to be written to Tx LCD queue
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void WriteTxLcdQueue(uint8_t * buffer, uint8_t numChars )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	70fb      	strb	r3, [r7, #3]
	uint32_t startWaitTime = GetTimeMs();
 80038c8:	f002 fb22 	bl	8005f10 <GetTimeMs>
 80038cc:	60f8      	str	r0, [r7, #12]

	while( IsTxLcdQueueFull() != false )
 80038ce:	e00e      	b.n	80038ee <WriteTxLcdQueue+0x32>
	{
		// Wait for Tx LCD queue not to be full
		uint32_t waitTime = DiffTimeFromStartTimeMs(startWaitTime);
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f002 fb2f 	bl	8005f34 <DiffTimeFromStartTimeMs>
 80038d6:	60b8      	str	r0, [r7, #8]
		if ( waitTime > 10 ) // 10 ms
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b0a      	cmp	r3, #10
 80038dc:	d842      	bhi.n	8003964 <WriteTxLcdQueue+0xa8>
			//UartPrintf("LCD I2C IT Tx queue full for 10 ms\n");
			return; // Wait too long for Tx I2C LCD queue not to be full
		}

		// Keep track of max wait time for Tx LCD Queue not to be full
		if( waitTime > maxLcdTxQueueWaitTimeMs )
 80038de:	4b24      	ldr	r3, [pc, #144]	; (8003970 <WriteTxLcdQueue+0xb4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d902      	bls.n	80038ee <WriteTxLcdQueue+0x32>
		{
			maxLcdTxQueueWaitTimeMs = waitTime;
 80038e8:	4a21      	ldr	r2, [pc, #132]	; (8003970 <WriteTxLcdQueue+0xb4>)
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	6013      	str	r3, [r2, #0]
	while( IsTxLcdQueueFull() != false )
 80038ee:	f7ff ff35 	bl	800375c <IsTxLcdQueueFull>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1eb      	bne.n	80038d0 <WriteTxLcdQueue+0x14>
		}
	}

	if( numChars > MAX_NUM_CHARS_PER_LCD_LINE )
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	2b14      	cmp	r3, #20
 80038fc:	d907      	bls.n	800390e <WriteTxLcdQueue+0x52>
	{
		 UartPrintf("Number of LCD Line chars to write is %d. Truncating to %d  chars\n", numChars, MAX_NUM_CHARS_PER_LCD_LINE);
 80038fe:	78fb      	ldrb	r3, [r7, #3]
 8003900:	2214      	movs	r2, #20
 8003902:	4619      	mov	r1, r3
 8003904:	481b      	ldr	r0, [pc, #108]	; (8003974 <WriteTxLcdQueue+0xb8>)
 8003906:	f002 fa0b 	bl	8005d20 <UartPrintf>
		numChars = MAX_NUM_CHARS_PER_LCD_LINE;
 800390a:	2314      	movs	r3, #20
 800390c:	70fb      	strb	r3, [r7, #3]
	}

	// Write buffer data to Tx LCD queue
	memcpy((char *)&lcdTxQueue[lcdTxQueueWriteIndex], (char *)buffer, numChars);
 800390e:	4b1a      	ldr	r3, [pc, #104]	; (8003978 <WriteTxLcdQueue+0xbc>)
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	4613      	mov	r3, r2
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	4413      	add	r3, r2
 800391a:	00da      	lsls	r2, r3, #3
 800391c:	1ad2      	subs	r2, r2, r3
 800391e:	4b17      	ldr	r3, [pc, #92]	; (800397c <WriteTxLcdQueue+0xc0>)
 8003920:	4413      	add	r3, r2
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4618      	mov	r0, r3
 8003928:	f018 ff38 	bl	801c79c <memcpy>
	lcdNumCharsTxQueue[lcdTxQueueWriteIndex] = numChars;
 800392c:	4b12      	ldr	r3, [pc, #72]	; (8003978 <WriteTxLcdQueue+0xbc>)
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	4619      	mov	r1, r3
 8003932:	4a13      	ldr	r2, [pc, #76]	; (8003980 <WriteTxLcdQueue+0xc4>)
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	5453      	strb	r3, [r2, r1]

	// Increment LCD Tx queue write index
	lcdTxQueueWriteIndex++;
 8003938:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <WriteTxLcdQueue+0xbc>)
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	3301      	adds	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <WriteTxLcdQueue+0xbc>)
 8003942:	801a      	strh	r2, [r3, #0]
	if( lcdTxQueueWriteIndex >= LCD_TX_QUEUE_SIZE )
 8003944:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <WriteTxLcdQueue+0xbc>)
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	2b0f      	cmp	r3, #15
 800394a:	d902      	bls.n	8003952 <WriteTxLcdQueue+0x96>
	{
		// Write index was at maximum, set to 0
		lcdTxQueueWriteIndex =  0;
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <WriteTxLcdQueue+0xbc>)
 800394e:	2200      	movs	r2, #0
 8003950:	801a      	strh	r2, [r3, #0]
	}

	// If I2C2 is ready, read data from TX LCD queue and write to LCD,
	// else return and HAL_I2C_MemTxCpltCallback will call ReadTxLcdQueueAndTransmit
	// after current I2C2 transmission is complete
	if( HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY )
 8003952:	480c      	ldr	r0, [pc, #48]	; (8003984 <WriteTxLcdQueue+0xc8>)
 8003954:	f007 fdee 	bl	800b534 <HAL_I2C_GetState>
 8003958:	4603      	mov	r3, r0
 800395a:	2b20      	cmp	r3, #32
 800395c:	d104      	bne.n	8003968 <WriteTxLcdQueue+0xac>
	{
		ReadTxLcdQueueAndTransmit();
 800395e:	f7ff ff21 	bl	80037a4 <ReadTxLcdQueueAndTransmit>
	}

	return;
 8003962:	e001      	b.n	8003968 <WriteTxLcdQueue+0xac>
			return; // Wait too long for Tx I2C LCD queue not to be full
 8003964:	bf00      	nop
 8003966:	e000      	b.n	800396a <WriteTxLcdQueue+0xae>
	return;
 8003968:	bf00      	nop
}
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20000c3c 	.word	0x20000c3c
 8003974:	0802172c 	.word	0x0802172c
 8003978:	20000c3a 	.word	0x20000c3a
 800397c:	20000ad8 	.word	0x20000ad8
 8003980:	20000c28 	.word	0x20000c28
 8003984:	20004264 	.word	0x20004264

08003988 <LCD_ClearScreen>:


static void LCD_ClearScreen(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
	uint8_t clear_screen[2] = {0xFE, 0x51};
 800398e:	f245 13fe 	movw	r3, #20990	; 0x51fe
 8003992:	80bb      	strh	r3, [r7, #4]
	WriteTxLcdQueue( clear_screen, 2 );
 8003994:	1d3b      	adds	r3, r7, #4
 8003996:	2102      	movs	r1, #2
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff ff8f 	bl	80038bc <WriteTxLcdQueue>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <LCD_BlinkCursorOnOff>:

static void LCD_BlinkCursorOnOff(bool flag)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	4603      	mov	r3, r0
 80039ae:	71fb      	strb	r3, [r7, #7]
	uint8_t blink_cursor[2] = {0xFE, 0x00};
 80039b0:	23fe      	movs	r3, #254	; 0xfe
 80039b2:	81bb      	strh	r3, [r7, #12]
	blink_cursor[1] = (flag) ? 0x4B : 0x4C;
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <LCD_BlinkCursorOnOff+0x18>
 80039ba:	234b      	movs	r3, #75	; 0x4b
 80039bc:	e000      	b.n	80039c0 <LCD_BlinkCursorOnOff+0x1a>
 80039be:	234c      	movs	r3, #76	; 0x4c
 80039c0:	737b      	strb	r3, [r7, #13]
	WriteTxLcdQueue( blink_cursor, 2 );
 80039c2:	f107 030c 	add.w	r3, r7, #12
 80039c6:	2102      	movs	r1, #2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff ff77 	bl	80038bc <WriteTxLcdQueue>
}
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <LCD_MoveCursor>:

void LCD_MoveCursor(LCD_LINE LineNum, uint8_t Position)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	460a      	mov	r2, r1
 80039e2:	71fb      	strb	r3, [r7, #7]
 80039e4:	4613      	mov	r3, r2
 80039e6:	71bb      	strb	r3, [r7, #6]
    uint8_t set_cursor[3] = {0xFE, 0x45, 0x00};
 80039e8:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <LCD_MoveCursor+0x64>)
 80039ea:	f107 030c 	add.w	r3, r7, #12
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	4611      	mov	r1, r2
 80039f2:	8019      	strh	r1, [r3, #0]
 80039f4:	3302      	adds	r3, #2
 80039f6:	0c12      	lsrs	r2, r2, #16
 80039f8:	701a      	strb	r2, [r3, #0]
    //Line 2 0x40 0x53
    //Line 3 0x14 0x27
    //Line 4 0x54 0x67
	//Position 0x00 to 0x13
	
	set_cursor[2] = (LineNum == LCD_LINE_4) ? 0x54 :
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d00b      	beq.n	8003a18 <LCD_MoveCursor+0x40>
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d006      	beq.n	8003a14 <LCD_MoveCursor+0x3c>
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <LCD_MoveCursor+0x38>
 8003a0c:	2340      	movs	r3, #64	; 0x40
 8003a0e:	e004      	b.n	8003a1a <LCD_MoveCursor+0x42>
 8003a10:	2300      	movs	r3, #0
 8003a12:	e002      	b.n	8003a1a <LCD_MoveCursor+0x42>
 8003a14:	2314      	movs	r3, #20
 8003a16:	e000      	b.n	8003a1a <LCD_MoveCursor+0x42>
 8003a18:	2354      	movs	r3, #84	; 0x54
 8003a1a:	73bb      	strb	r3, [r7, #14]
	                (LineNum == LCD_LINE_3) ? 0x14 :
	                (LineNum == LCD_LINE_2) ? 0x40 : 0x00;
	set_cursor[2] += Position;
 8003a1c:	7bba      	ldrb	r2, [r7, #14]
 8003a1e:	79bb      	ldrb	r3, [r7, #6]
 8003a20:	4413      	add	r3, r2
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	73bb      	strb	r3, [r7, #14]
	WriteTxLcdQueue( set_cursor, 3 );
 8003a26:	f107 030c 	add.w	r3, r7, #12
 8003a2a:	2103      	movs	r1, #3
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff ff45 	bl	80038bc <WriteTxLcdQueue>
}
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	08021770 	.word	0x08021770

08003a40 <LCD_SetBacklight>:

static void LCD_SetBacklight( )
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
	uint8_t set_backlight[3] = {0xFE, 0x53, 0x08};
 8003a46:	4a08      	ldr	r2, [pc, #32]	; (8003a68 <LCD_SetBacklight+0x28>)
 8003a48:	1d3b      	adds	r3, r7, #4
 8003a4a:	6812      	ldr	r2, [r2, #0]
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	8019      	strh	r1, [r3, #0]
 8003a50:	3302      	adds	r3, #2
 8003a52:	0c12      	lsrs	r2, r2, #16
 8003a54:	701a      	strb	r2, [r3, #0]
	WriteTxLcdQueue( set_backlight, 3 );
 8003a56:	1d3b      	adds	r3, r7, #4
 8003a58:	2103      	movs	r1, #3
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff ff2e 	bl	80038bc <WriteTxLcdQueue>
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	08021774 	.word	0x08021774

08003a6c <LCD_Write>:

uint8_t LCD_Write(bool bFresh, LCD_LINE Line, uint8_t Position, char *msg, uint8_t NumChar)
{	
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	4603      	mov	r3, r0
 8003a76:	71fb      	strb	r3, [r7, #7]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	71bb      	strb	r3, [r7, #6]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	717b      	strb	r3, [r7, #5]
	uint8_t ret = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	73fb      	strb	r3, [r7, #15]
	
	if(bFresh)
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <LCD_Write+0x22>
	{
	   LCD_ClearScreen();
 8003a8a:	f7ff ff7d 	bl	8003988 <LCD_ClearScreen>
	}
	
	LCD_MoveCursor(Line, Position);
 8003a8e:	797a      	ldrb	r2, [r7, #5]
 8003a90:	79bb      	ldrb	r3, [r7, #6]
 8003a92:	4611      	mov	r1, r2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ff9f 	bl	80039d8 <LCD_MoveCursor>
	WriteTxLcdQueue( (uint8_t *)msg, NumChar );
 8003a9a:	7e3b      	ldrb	r3, [r7, #24]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	6838      	ldr	r0, [r7, #0]
 8003aa0:	f7ff ff0c 	bl	80038bc <WriteTxLcdQueue>

	return ret;
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <LCD_Init>:

LCD* LCD_Init(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08c      	sub	sp, #48	; 0x30
 8003ab4:	af02      	add	r7, sp, #8
	char msg[32];
	int len;


	lcdTxQueueReadIndex = 0;
 8003ab6:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <LCD_Init+0x5c>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	801a      	strh	r2, [r3, #0]
	lcdTxQueueWriteIndex = 0;
 8003abc:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <LCD_Init+0x60>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	801a      	strh	r2, [r3, #0]

	UartPrintf("Init LCD\n");
 8003ac2:	4814      	ldr	r0, [pc, #80]	; (8003b14 <LCD_Init+0x64>)
 8003ac4:	f002 f92c 	bl	8005d20 <UartPrintf>

	HAL_Delay(10);
 8003ac8:	200a      	movs	r0, #10
 8003aca:	f005 fb69 	bl	80091a0 <HAL_Delay>
	LCD_SetBacklight( );
 8003ace:	f7ff ffb7 	bl	8003a40 <LCD_SetBacklight>

	len = snprintf(msg, sizeof(msg), "CPRT %s", GetSwVersionString( CURRENT_SW_VERSION_ID ));
 8003ad2:	200b      	movs	r0, #11
 8003ad4:	f004 f950 	bl	8007d78 <GetSwVersionString>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	1d38      	adds	r0, r7, #4
 8003adc:	4a0e      	ldr	r2, [pc, #56]	; (8003b18 <LCD_Init+0x68>)
 8003ade:	2120      	movs	r1, #32
 8003ae0:	f019 fbcc 	bl	801d27c <sniprintf>
 8003ae4:	6278      	str	r0, [r7, #36]	; 0x24
	LCD_Write(true, LCD_LINE_1, 0, msg, len );
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	1d3a      	adds	r2, r7, #4
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	4613      	mov	r3, r2
 8003af0:	2200      	movs	r2, #0
 8003af2:	2100      	movs	r1, #0
 8003af4:	2001      	movs	r0, #1
 8003af6:	f7ff ffb9 	bl	8003a6c <LCD_Write>

	LCD_BlinkCursorOnOff(false);
 8003afa:	2000      	movs	r0, #0
 8003afc:	f7ff ff53 	bl	80039a6 <LCD_BlinkCursorOnOff>

    return (LCD *)&c;
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <LCD_Init+0x6c>)
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3728      	adds	r7, #40	; 0x28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000c38 	.word	0x20000c38
 8003b10:	20000c3a 	.word	0x20000c3a
 8003b14:	08021778 	.word	0x08021778
 8003b18:	08021784 	.word	0x08021784
 8003b1c:	20000ad0 	.word	0x20000ad0

08003b20 <LCD_Power_Onoff>:

void LCD_Power_Onoff(bool bOnOff)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	71fb      	strb	r3, [r7, #7]
	if(bOnOff == true)
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d006      	beq.n	8003b3e <LCD_Power_Onoff+0x1e>
	{
		HAL_GPIO_WritePin(DISP_POWER_EN_GPIO_Port, DISP_POWER_EN_Pin, GPIO_PIN_SET);
 8003b30:	2201      	movs	r2, #1
 8003b32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b36:	4807      	ldr	r0, [pc, #28]	; (8003b54 <LCD_Power_Onoff+0x34>)
 8003b38:	f007 f8c8 	bl	800accc <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(DISP_POWER_EN_GPIO_Port, DISP_POWER_EN_Pin, GPIO_PIN_RESET);
	}
}
 8003b3c:	e005      	b.n	8003b4a <LCD_Power_Onoff+0x2a>
		HAL_GPIO_WritePin(DISP_POWER_EN_GPIO_Port, DISP_POWER_EN_Pin, GPIO_PIN_RESET);
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b44:	4803      	ldr	r0, [pc, #12]	; (8003b54 <LCD_Power_Onoff+0x34>)
 8003b46:	f007 f8c1 	bl	800accc <HAL_GPIO_WritePin>
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40020000 	.word	0x40020000

08003b58 <LED_Set>:
    [LED_MAX_START  ] = { LED_MAX_START  , false, false,  false,   0,          0,         0,        0,     BLINK_STATUS_OFF     ,                     NULL,                0 , (FpLedOn)LED_Start_On, (FpLedOff)LED_Start_Off   },
    [LED_MAX_PAUSE  ] = { LED_MAX_PAUSE  , false, false,  false,   0,          0,         0,        0,     BLINK_STATUS_OFF     ,                     NULL,                0 , (FpLedOn)LED_Pause_On, (FpLedOff)LED_Pause_Off   },
};

void LED_Set(LED_ID eLedID, LED_SET eLedSet, uint16_t wtOnInMs, uint16_t wtOffInMs)
{
 8003b58:	b590      	push	{r4, r7, lr}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4604      	mov	r4, r0
 8003b60:	4608      	mov	r0, r1
 8003b62:	4611      	mov	r1, r2
 8003b64:	461a      	mov	r2, r3
 8003b66:	4623      	mov	r3, r4
 8003b68:	71fb      	strb	r3, [r7, #7]
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	71bb      	strb	r3, [r7, #6]
 8003b6e:	460b      	mov	r3, r1
 8003b70:	80bb      	strh	r3, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	807b      	strh	r3, [r7, #2]
	if( eLedID == LED_COUNT )
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	2b0a      	cmp	r3, #10
 8003b7a:	f040 809b 	bne.w	8003cb4 <LED_Set+0x15c>
	{
		int  index;

		for(index = 0; index < ARRAY_LEN(astLedSet); index++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	e092      	b.n	8003caa <LED_Set+0x152>
		{
			switch(eLedSet)
 8003b84:	79bb      	ldrb	r3, [r7, #6]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d031      	beq.n	8003bee <LED_Set+0x96>
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	f300 8087 	bgt.w	8003c9e <LED_Set+0x146>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <LED_Set+0x42>
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d015      	beq.n	8003bc4 <LED_Set+0x6c>
					}
				}
				break;

				default:
				break;
 8003b98:	e081      	b.n	8003c9e <LED_Set+0x146>
					astLedSet[index].bOff   = true;
 8003b9a:	4990      	ldr	r1, [pc, #576]	; (8003ddc <LED_Set+0x284>)
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	3302      	adds	r3, #2
 8003baa:	2201      	movs	r2, #1
 8003bac:	701a      	strb	r2, [r3, #0]
					astLedSet[index].bBlink = false;
 8003bae:	498b      	ldr	r1, [pc, #556]	; (8003ddc <LED_Set+0x284>)
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	3303      	adds	r3, #3
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
				break;
 8003bc2:	e06f      	b.n	8003ca4 <LED_Set+0x14c>
					astLedSet[index].bOn = true;
 8003bc4:	4985      	ldr	r1, [pc, #532]	; (8003ddc <LED_Set+0x284>)
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4413      	add	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	701a      	strb	r2, [r3, #0]
					astLedSet[index].bBlink = false;
 8003bd8:	4980      	ldr	r1, [pc, #512]	; (8003ddc <LED_Set+0x284>)
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	3303      	adds	r3, #3
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]
				break;
 8003bec:	e05a      	b.n	8003ca4 <LED_Set+0x14c>
					if((astLedSet[index].eBlinkStatus != BLINK_STATUS_DISABLE) &&
 8003bee:	497b      	ldr	r1, [pc, #492]	; (8003ddc <LED_Set+0x284>)
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	3310      	adds	r3, #16
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d04e      	beq.n	8003ca2 <LED_Set+0x14a>
					   (astLedSet[index].bBlink == false))
 8003c04:	4975      	ldr	r1, [pc, #468]	; (8003ddc <LED_Set+0x284>)
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	3303      	adds	r3, #3
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	f083 0301 	eor.w	r3, r3, #1
 8003c1a:	b2db      	uxtb	r3, r3
					if((astLedSet[index].eBlinkStatus != BLINK_STATUS_DISABLE) &&
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d040      	beq.n	8003ca2 <LED_Set+0x14a>
						astLedSet[index].bBlink       = true;
 8003c20:	496e      	ldr	r1, [pc, #440]	; (8003ddc <LED_Set+0x284>)
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4613      	mov	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	3303      	adds	r3, #3
 8003c30:	2201      	movs	r2, #1
 8003c32:	701a      	strb	r2, [r3, #0]
						astLedSet[index].wtimeOn      = wtOnInMs;
 8003c34:	4969      	ldr	r1, [pc, #420]	; (8003ddc <LED_Set+0x284>)
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	330c      	adds	r3, #12
 8003c44:	88ba      	ldrh	r2, [r7, #4]
 8003c46:	801a      	strh	r2, [r3, #0]
						astLedSet[index].wtimeOff     = wtOffInMs;
 8003c48:	4964      	ldr	r1, [pc, #400]	; (8003ddc <LED_Set+0x284>)
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	330e      	adds	r3, #14
 8003c58:	887a      	ldrh	r2, [r7, #2]
 8003c5a:	801a      	strh	r2, [r3, #0]
						astLedSet[index].wLastTimeOn  = Get_SysTick();
 8003c5c:	f002 f994 	bl	8005f88 <Get_SysTick>
 8003c60:	4601      	mov	r1, r0
 8003c62:	485e      	ldr	r0, [pc, #376]	; (8003ddc <LED_Set+0x284>)
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4613      	mov	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4403      	add	r3, r0
 8003c70:	3304      	adds	r3, #4
 8003c72:	6019      	str	r1, [r3, #0]
						astLedSet[index].wLastTimeOff = 0;
 8003c74:	4959      	ldr	r1, [pc, #356]	; (8003ddc <LED_Set+0x284>)
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	3308      	adds	r3, #8
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
						astLedSet[index].eBlinkStatus = BLINK_STATUS_ON;
 8003c88:	4954      	ldr	r1, [pc, #336]	; (8003ddc <LED_Set+0x284>)
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	3310      	adds	r3, #16
 8003c98:	2201      	movs	r2, #1
 8003c9a:	701a      	strb	r2, [r3, #0]
				break;
 8003c9c:	e001      	b.n	8003ca2 <LED_Set+0x14a>
				break;
 8003c9e:	bf00      	nop
 8003ca0:	e000      	b.n	8003ca4 <LED_Set+0x14c>
				break;
 8003ca2:	bf00      	nop
		for(index = 0; index < ARRAY_LEN(astLedSet); index++)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2b09      	cmp	r3, #9
 8003cae:	f67f af69 	bls.w	8003b84 <LED_Set+0x2c>

			default:
			break;
		}
	}
}
 8003cb2:	e08f      	b.n	8003dd4 <LED_Set+0x27c>
		switch(eLedSet)
 8003cb4:	79bb      	ldrb	r3, [r7, #6]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d031      	beq.n	8003d1e <LED_Set+0x1c6>
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	f300 8087 	bgt.w	8003dce <LED_Set+0x276>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <LED_Set+0x172>
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d015      	beq.n	8003cf4 <LED_Set+0x19c>
			break;
 8003cc8:	e081      	b.n	8003dce <LED_Set+0x276>
				astLedSet[eLedID].bOff   = true;
 8003cca:	79fa      	ldrb	r2, [r7, #7]
 8003ccc:	4943      	ldr	r1, [pc, #268]	; (8003ddc <LED_Set+0x284>)
 8003cce:	4613      	mov	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	3302      	adds	r3, #2
 8003cda:	2201      	movs	r2, #1
 8003cdc:	701a      	strb	r2, [r3, #0]
				astLedSet[eLedID].bBlink = false;
 8003cde:	79fa      	ldrb	r2, [r7, #7]
 8003ce0:	493e      	ldr	r1, [pc, #248]	; (8003ddc <LED_Set+0x284>)
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	3303      	adds	r3, #3
 8003cee:	2200      	movs	r2, #0
 8003cf0:	701a      	strb	r2, [r3, #0]
			break;
 8003cf2:	e06f      	b.n	8003dd4 <LED_Set+0x27c>
				astLedSet[eLedID].bOn = true;
 8003cf4:	79fa      	ldrb	r2, [r7, #7]
 8003cf6:	4939      	ldr	r1, [pc, #228]	; (8003ddc <LED_Set+0x284>)
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	3301      	adds	r3, #1
 8003d04:	2201      	movs	r2, #1
 8003d06:	701a      	strb	r2, [r3, #0]
				astLedSet[eLedID].bBlink = false;
 8003d08:	79fa      	ldrb	r2, [r7, #7]
 8003d0a:	4934      	ldr	r1, [pc, #208]	; (8003ddc <LED_Set+0x284>)
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	3303      	adds	r3, #3
 8003d18:	2200      	movs	r2, #0
 8003d1a:	701a      	strb	r2, [r3, #0]
			break;
 8003d1c:	e05a      	b.n	8003dd4 <LED_Set+0x27c>
				if((astLedSet[eLedID].eBlinkStatus != BLINK_STATUS_DISABLE) &&
 8003d1e:	79fa      	ldrb	r2, [r7, #7]
 8003d20:	492e      	ldr	r1, [pc, #184]	; (8003ddc <LED_Set+0x284>)
 8003d22:	4613      	mov	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	3310      	adds	r3, #16
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d04e      	beq.n	8003dd2 <LED_Set+0x27a>
				   (astLedSet[eLedID].bBlink == false))
 8003d34:	79fa      	ldrb	r2, [r7, #7]
 8003d36:	4929      	ldr	r1, [pc, #164]	; (8003ddc <LED_Set+0x284>)
 8003d38:	4613      	mov	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	3303      	adds	r3, #3
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	f083 0301 	eor.w	r3, r3, #1
 8003d4a:	b2db      	uxtb	r3, r3
				if((astLedSet[eLedID].eBlinkStatus != BLINK_STATUS_DISABLE) &&
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d040      	beq.n	8003dd2 <LED_Set+0x27a>
					astLedSet[eLedID].bBlink       = true;
 8003d50:	79fa      	ldrb	r2, [r7, #7]
 8003d52:	4922      	ldr	r1, [pc, #136]	; (8003ddc <LED_Set+0x284>)
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	3303      	adds	r3, #3
 8003d60:	2201      	movs	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]
					astLedSet[eLedID].wtimeOn      = wtOnInMs;
 8003d64:	79fa      	ldrb	r2, [r7, #7]
 8003d66:	491d      	ldr	r1, [pc, #116]	; (8003ddc <LED_Set+0x284>)
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	330c      	adds	r3, #12
 8003d74:	88ba      	ldrh	r2, [r7, #4]
 8003d76:	801a      	strh	r2, [r3, #0]
					astLedSet[eLedID].wtimeOff     = wtOffInMs;
 8003d78:	79fa      	ldrb	r2, [r7, #7]
 8003d7a:	4918      	ldr	r1, [pc, #96]	; (8003ddc <LED_Set+0x284>)
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	330e      	adds	r3, #14
 8003d88:	887a      	ldrh	r2, [r7, #2]
 8003d8a:	801a      	strh	r2, [r3, #0]
					astLedSet[eLedID].wLastTimeOn  = Get_SysTick();
 8003d8c:	79fc      	ldrb	r4, [r7, #7]
 8003d8e:	f002 f8fb 	bl	8005f88 <Get_SysTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	4911      	ldr	r1, [pc, #68]	; (8003ddc <LED_Set+0x284>)
 8003d96:	4623      	mov	r3, r4
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	4423      	add	r3, r4
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	3304      	adds	r3, #4
 8003da2:	601a      	str	r2, [r3, #0]
					astLedSet[eLedID].wLastTimeOff = 0;
 8003da4:	79fa      	ldrb	r2, [r7, #7]
 8003da6:	490d      	ldr	r1, [pc, #52]	; (8003ddc <LED_Set+0x284>)
 8003da8:	4613      	mov	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	3308      	adds	r3, #8
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
					astLedSet[eLedID].eBlinkStatus = BLINK_STATUS_ON;
 8003db8:	79fa      	ldrb	r2, [r7, #7]
 8003dba:	4908      	ldr	r1, [pc, #32]	; (8003ddc <LED_Set+0x284>)
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	3310      	adds	r3, #16
 8003dc8:	2201      	movs	r2, #1
 8003dca:	701a      	strb	r2, [r3, #0]
			break;
 8003dcc:	e001      	b.n	8003dd2 <LED_Set+0x27a>
			break;
 8003dce:	bf00      	nop
 8003dd0:	e000      	b.n	8003dd4 <LED_Set+0x27c>
			break;
 8003dd2:	bf00      	nop
}
 8003dd4:	bf00      	nop
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd90      	pop	{r4, r7, pc}
 8003ddc:	20000050 	.word	0x20000050

08003de0 <LED_Run>:

void LED_Run(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
	int  index;

	//OFF Handle the on LED, one at the time
	for(index = 0; index < ARRAY_LEN(astLedSet); index++)
 8003de6:	2300      	movs	r3, #0
 8003de8:	607b      	str	r3, [r7, #4]
 8003dea:	e04e      	b.n	8003e8a <LED_Run+0xaa>
	{
		if(astLedSet[index].bOff == true)
 8003dec:	499b      	ldr	r1, [pc, #620]	; (800405c <LED_Run+0x27c>)
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	3302      	adds	r3, #2
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d040      	beq.n	8003e84 <LED_Run+0xa4>
		{
			astLedSet[index].bOff = false;
 8003e02:	4996      	ldr	r1, [pc, #600]	; (800405c <LED_Run+0x27c>)
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	3302      	adds	r3, #2
 8003e12:	2200      	movs	r2, #0
 8003e14:	701a      	strb	r2, [r3, #0]

			if( astLedSet[index].ptrPort != NULL )
 8003e16:	4991      	ldr	r1, [pc, #580]	; (800405c <LED_Run+0x27c>)
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	4413      	add	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	3314      	adds	r3, #20
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d016      	beq.n	8003e5a <LED_Run+0x7a>
		    {
				//If the LEDs controlling from STM32 toggle the GPIO
                HAL_GPIO_WritePin(astLedSet[index].ptrPort, astLedSet[index].pin, GPIO_PIN_RESET);
 8003e2c:	498b      	ldr	r1, [pc, #556]	; (800405c <LED_Run+0x27c>)
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	3314      	adds	r3, #20
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	4987      	ldr	r1, [pc, #540]	; (800405c <LED_Run+0x27c>)
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	3318      	adds	r3, #24
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	2200      	movs	r2, #0
 8003e52:	4619      	mov	r1, r3
 8003e54:	f006 ff3a 	bl	800accc <HAL_GPIO_WritePin>
 8003e58:	e014      	b.n	8003e84 <LED_Run+0xa4>
			}
			else if( astLedSet[index].pFunctionLedOff != NULL )
 8003e5a:	4980      	ldr	r1, [pc, #512]	; (800405c <LED_Run+0x27c>)
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	4413      	add	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	3320      	adds	r3, #32
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d009      	beq.n	8003e84 <LED_Run+0xa4>
			{
				//Otherwise call the call back function
				astLedSet[index].pFunctionLedOff();
 8003e70:	497a      	ldr	r1, [pc, #488]	; (800405c <LED_Run+0x27c>)
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	3320      	adds	r3, #32
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4798      	blx	r3
	for(index = 0; index < ARRAY_LEN(astLedSet); index++)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3301      	adds	r3, #1
 8003e88:	607b      	str	r3, [r7, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b09      	cmp	r3, #9
 8003e8e:	d9ad      	bls.n	8003dec <LED_Run+0xc>
			}
		}
	}

	//ON Handle the on LED, one at the time
	for(index = 0; index < ARRAY_LEN(astLedSet); index++)
 8003e90:	2300      	movs	r3, #0
 8003e92:	607b      	str	r3, [r7, #4]
 8003e94:	e04e      	b.n	8003f34 <LED_Run+0x154>
	{
		if(astLedSet[index].bOn == true)
 8003e96:	4971      	ldr	r1, [pc, #452]	; (800405c <LED_Run+0x27c>)
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d040      	beq.n	8003f2e <LED_Run+0x14e>
		{
            astLedSet[index].bOn = false;
 8003eac:	496b      	ldr	r1, [pc, #428]	; (800405c <LED_Run+0x27c>)
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	3301      	adds	r3, #1
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	701a      	strb	r2, [r3, #0]

			if( astLedSet[index].ptrPort != NULL )
 8003ec0:	4966      	ldr	r1, [pc, #408]	; (800405c <LED_Run+0x27c>)
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	3314      	adds	r3, #20
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d016      	beq.n	8003f04 <LED_Run+0x124>
		    {
				//If the LEDs controlling from STM32 toggle the GPIO
                HAL_GPIO_WritePin(astLedSet[index].ptrPort, astLedSet[index].pin, GPIO_PIN_SET);
 8003ed6:	4961      	ldr	r1, [pc, #388]	; (800405c <LED_Run+0x27c>)
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	3314      	adds	r3, #20
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	495c      	ldr	r1, [pc, #368]	; (800405c <LED_Run+0x27c>)
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	3318      	adds	r3, #24
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	2201      	movs	r2, #1
 8003efc:	4619      	mov	r1, r3
 8003efe:	f006 fee5 	bl	800accc <HAL_GPIO_WritePin>
 8003f02:	e014      	b.n	8003f2e <LED_Run+0x14e>
			}
			else if( astLedSet[index].pFunctionLedOff != NULL )
 8003f04:	4955      	ldr	r1, [pc, #340]	; (800405c <LED_Run+0x27c>)
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	3320      	adds	r3, #32
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d009      	beq.n	8003f2e <LED_Run+0x14e>
			{
				//Otherwise call the call back function
				astLedSet[index].pFunctionLedOn();
 8003f1a:	4950      	ldr	r1, [pc, #320]	; (800405c <LED_Run+0x27c>)
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	331c      	adds	r3, #28
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4798      	blx	r3
	for(index = 0; index < ARRAY_LEN(astLedSet); index++)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3301      	adds	r3, #1
 8003f32:	607b      	str	r3, [r7, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b09      	cmp	r3, #9
 8003f38:	d9ad      	bls.n	8003e96 <LED_Run+0xb6>
			}
		}
	}

	//BLINK Handle the blink LED for all the LEDs that have this feature available
	for(index = 0; index < ARRAY_LEN(astLedSet); index++)
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	607b      	str	r3, [r7, #4]
 8003f3e:	e0fd      	b.n	800413c <LED_Run+0x35c>
	{
		if((astLedSet[index].eBlinkStatus != BLINK_STATUS_DISABLE) &&
 8003f40:	4946      	ldr	r1, [pc, #280]	; (800405c <LED_Run+0x27c>)
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	4613      	mov	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	3310      	adds	r3, #16
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 80ea 	beq.w	800412c <LED_Run+0x34c>
		   (astLedSet[index].bBlink == true))
 8003f58:	4940      	ldr	r1, [pc, #256]	; (800405c <LED_Run+0x27c>)
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	3303      	adds	r3, #3
 8003f68:	781b      	ldrb	r3, [r3, #0]
		if((astLedSet[index].eBlinkStatus != BLINK_STATUS_DISABLE) &&
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 80de 	beq.w	800412c <LED_Run+0x34c>
		{
			switch(astLedSet[index].eBlinkStatus)
 8003f70:	493a      	ldr	r1, [pc, #232]	; (800405c <LED_Run+0x27c>)
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	4613      	mov	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4413      	add	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	3310      	adds	r3, #16
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d002      	beq.n	8003f8c <LED_Run+0x1ac>
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d06a      	beq.n	8004060 <LED_Run+0x280>
					}
				}
				break;

				default:
				break;
 8003f8a:	e0d4      	b.n	8004136 <LED_Run+0x356>
					if( (Get_SysTick() - astLedSet[index].wLastTimeOn) >= astLedSet[index].wtimeOn)
 8003f8c:	f001 fffc 	bl	8005f88 <Get_SysTick>
 8003f90:	4601      	mov	r1, r0
 8003f92:	4832      	ldr	r0, [pc, #200]	; (800405c <LED_Run+0x27c>)
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	4613      	mov	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4403      	add	r3, r0
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	1ac9      	subs	r1, r1, r3
 8003fa6:	482d      	ldr	r0, [pc, #180]	; (800405c <LED_Run+0x27c>)
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	4613      	mov	r3, r2
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	4413      	add	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4403      	add	r3, r0
 8003fb4:	330c      	adds	r3, #12
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	4299      	cmp	r1, r3
 8003fba:	f0c0 80b9 	bcc.w	8004130 <LED_Run+0x350>
						astLedSet[index].wLastTimeOff = Get_SysTick(); //save the start of off time
 8003fbe:	f001 ffe3 	bl	8005f88 <Get_SysTick>
 8003fc2:	4601      	mov	r1, r0
 8003fc4:	4825      	ldr	r0, [pc, #148]	; (800405c <LED_Run+0x27c>)
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4403      	add	r3, r0
 8003fd2:	3308      	adds	r3, #8
 8003fd4:	6019      	str	r1, [r3, #0]
						astLedSet[index].eBlinkStatus = BLINK_STATUS_OFF;
 8003fd6:	4921      	ldr	r1, [pc, #132]	; (800405c <LED_Run+0x27c>)
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	3310      	adds	r3, #16
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	701a      	strb	r2, [r3, #0]
						if( astLedSet[index].ptrPort != NULL )
 8003fea:	491c      	ldr	r1, [pc, #112]	; (800405c <LED_Run+0x27c>)
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	3314      	adds	r3, #20
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d016      	beq.n	800402e <LED_Run+0x24e>
			                HAL_GPIO_WritePin(astLedSet[index].ptrPort, astLedSet[index].pin, GPIO_PIN_RESET);
 8004000:	4916      	ldr	r1, [pc, #88]	; (800405c <LED_Run+0x27c>)
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	3314      	adds	r3, #20
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	4912      	ldr	r1, [pc, #72]	; (800405c <LED_Run+0x27c>)
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	3318      	adds	r3, #24
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	2200      	movs	r2, #0
 8004026:	4619      	mov	r1, r3
 8004028:	f006 fe50 	bl	800accc <HAL_GPIO_WritePin>
				break;
 800402c:	e080      	b.n	8004130 <LED_Run+0x350>
						else if( astLedSet[index].pFunctionLedOff != NULL )
 800402e:	490b      	ldr	r1, [pc, #44]	; (800405c <LED_Run+0x27c>)
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	3320      	adds	r3, #32
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d075      	beq.n	8004130 <LED_Run+0x350>
							astLedSet[index].pFunctionLedOff();
 8004044:	4905      	ldr	r1, [pc, #20]	; (800405c <LED_Run+0x27c>)
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	3320      	adds	r3, #32
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4798      	blx	r3
				break;
 8004058:	e06a      	b.n	8004130 <LED_Run+0x350>
 800405a:	bf00      	nop
 800405c:	20000050 	.word	0x20000050
					if( (Get_SysTick() - astLedSet[index].wLastTimeOff) >= astLedSet[index].wtimeOff)
 8004060:	f001 ff92 	bl	8005f88 <Get_SysTick>
 8004064:	4601      	mov	r1, r0
 8004066:	483a      	ldr	r0, [pc, #232]	; (8004150 <LED_Run+0x370>)
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4403      	add	r3, r0
 8004074:	3308      	adds	r3, #8
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	1ac9      	subs	r1, r1, r3
 800407a:	4835      	ldr	r0, [pc, #212]	; (8004150 <LED_Run+0x370>)
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4403      	add	r3, r0
 8004088:	330e      	adds	r3, #14
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	4299      	cmp	r1, r3
 800408e:	d351      	bcc.n	8004134 <LED_Run+0x354>
						astLedSet[index].wLastTimeOn  = Get_SysTick(); //save the start of On time
 8004090:	f001 ff7a 	bl	8005f88 <Get_SysTick>
 8004094:	4601      	mov	r1, r0
 8004096:	482e      	ldr	r0, [pc, #184]	; (8004150 <LED_Run+0x370>)
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4403      	add	r3, r0
 80040a4:	3304      	adds	r3, #4
 80040a6:	6019      	str	r1, [r3, #0]
						astLedSet[index].eBlinkStatus = BLINK_STATUS_ON;
 80040a8:	4929      	ldr	r1, [pc, #164]	; (8004150 <LED_Run+0x370>)
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	4613      	mov	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	3310      	adds	r3, #16
 80040b8:	2201      	movs	r2, #1
 80040ba:	701a      	strb	r2, [r3, #0]
						if( astLedSet[index].ptrPort != NULL )
 80040bc:	4924      	ldr	r1, [pc, #144]	; (8004150 <LED_Run+0x370>)
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	3314      	adds	r3, #20
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d016      	beq.n	8004100 <LED_Run+0x320>
			                HAL_GPIO_WritePin(astLedSet[index].ptrPort, astLedSet[index].pin, GPIO_PIN_SET);
 80040d2:	491f      	ldr	r1, [pc, #124]	; (8004150 <LED_Run+0x370>)
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	440b      	add	r3, r1
 80040e0:	3314      	adds	r3, #20
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	491a      	ldr	r1, [pc, #104]	; (8004150 <LED_Run+0x370>)
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	4613      	mov	r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4413      	add	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	3318      	adds	r3, #24
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	2201      	movs	r2, #1
 80040f8:	4619      	mov	r1, r3
 80040fa:	f006 fde7 	bl	800accc <HAL_GPIO_WritePin>
				break;
 80040fe:	e019      	b.n	8004134 <LED_Run+0x354>
						else if( astLedSet[index].pFunctionLedOff != NULL )
 8004100:	4913      	ldr	r1, [pc, #76]	; (8004150 <LED_Run+0x370>)
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	3320      	adds	r3, #32
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00e      	beq.n	8004134 <LED_Run+0x354>
							astLedSet[index].pFunctionLedOn();
 8004116:	490e      	ldr	r1, [pc, #56]	; (8004150 <LED_Run+0x370>)
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	4413      	add	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	331c      	adds	r3, #28
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4798      	blx	r3
				break;
 800412a:	e003      	b.n	8004134 <LED_Run+0x354>
			}
		}
 800412c:	bf00      	nop
 800412e:	e002      	b.n	8004136 <LED_Run+0x356>
				break;
 8004130:	bf00      	nop
 8004132:	e000      	b.n	8004136 <LED_Run+0x356>
				break;
 8004134:	bf00      	nop
	for(index = 0; index < ARRAY_LEN(astLedSet); index++)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3301      	adds	r3, #1
 800413a:	607b      	str	r3, [r7, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b09      	cmp	r3, #9
 8004140:	f67f aefe 	bls.w	8003f40 <LED_Run+0x160>
	}

}
 8004144:	bf00      	nop
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000050 	.word	0x20000050

08004154 <Model_Init>:

//Main model collection of all global parameters
MODEL gstModel;

void Model_Init(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
    gstModel.bKeyCodeReady     = false;
 8004158:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <Model_Init+0x3c>)
 800415a:	2200      	movs	r2, #0
 800415c:	711a      	strb	r2, [r3, #4]
    gstModel.bLCDResetRequest  = false;
 800415e:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <Model_Init+0x3c>)
 8004160:	2200      	movs	r2, #0
 8004162:	709a      	strb	r2, [r3, #2]
    gstModel.dac_value         = 2048; //1.5V
 8004164:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <Model_Init+0x3c>)
 8004166:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800416a:	841a      	strh	r2, [r3, #32]
    gstModel.bDisplayTime      = false;
 800416c:	4b08      	ldr	r3, [pc, #32]	; (8004190 <Model_Init+0x3c>)
 800416e:	2200      	movs	r2, #0
 8004170:	715a      	strb	r2, [r3, #5]
    gstModel.bPfcLoadEnable    = false;
 8004172:	4b07      	ldr	r3, [pc, #28]	; (8004190 <Model_Init+0x3c>)
 8004174:	2200      	movs	r2, #0
 8004176:	71da      	strb	r2, [r3, #7]
    gstModel.bPfcPowerWarnFail = false;
 8004178:	4b05      	ldr	r3, [pc, #20]	; (8004190 <Model_Init+0x3c>)
 800417a:	2200      	movs	r2, #0
 800417c:	719a      	strb	r2, [r3, #6]
    gstModel.bMembranePress    = false;
 800417e:	4b04      	ldr	r3, [pc, #16]	; (8004190 <Model_Init+0x3c>)
 8004180:	2200      	movs	r2, #0
 8004182:	721a      	strb	r2, [r3, #8]
}
 8004184:	bf00      	nop
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	20000c60 	.word	0x20000c60

08004194 <MAX7370_write>:
static void MAX7370_read();

//=============================Switches Membrane=========================================================

static void MAX7370_write(uint8_t *pData, uint16_t Size)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af02      	add	r7, sp, #8
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	807b      	strh	r3, [r7, #2]
	 HAL_StatusTypeDef ret;

	 ret = HAL_I2C_Master_Transmit(&hi2c2, MAX7370_ADR, pData, Size, HAL_MAX_DELAY);
 80041a0:	887b      	ldrh	r3, [r7, #2]
 80041a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041a6:	9200      	str	r2, [sp, #0]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	2170      	movs	r1, #112	; 0x70
 80041ac:	4808      	ldr	r0, [pc, #32]	; (80041d0 <MAX7370_write+0x3c>)
 80041ae:	f006 fe69 	bl	800ae84 <HAL_I2C_Master_Transmit>
 80041b2:	4603      	mov	r3, r0
 80041b4:	73fb      	strb	r3, [r7, #15]

	 if(ret != HAL_OK)
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d004      	beq.n	80041c6 <MAX7370_write+0x32>
	 {
		 UartPrintf("MAX7370 Setup write err %x\n", ret);
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	4619      	mov	r1, r3
 80041c0:	4804      	ldr	r0, [pc, #16]	; (80041d4 <MAX7370_write+0x40>)
 80041c2:	f001 fdad 	bl	8005d20 <UartPrintf>
	 }
}
 80041c6:	bf00      	nop
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20004264 	.word	0x20004264
 80041d4:	0802178c 	.word	0x0802178c

080041d8 <isMembraneIntStillLow>:

static bool isMembraneIntStillLow()
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
	bool bStatus;
	bStatus = HAL_GPIO_ReadPin(N_MEMBRANE_INT_GPIO_Port, N_MEMBRANE_INT_Pin) ? false : true;
 80041de:	2104      	movs	r1, #4
 80041e0:	4806      	ldr	r0, [pc, #24]	; (80041fc <isMembraneIntStillLow+0x24>)
 80041e2:	f006 fd5b 	bl	800ac9c <HAL_GPIO_ReadPin>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	bf0c      	ite	eq
 80041ec:	2301      	moveq	r3, #1
 80041ee:	2300      	movne	r3, #0
 80041f0:	71fb      	strb	r3, [r7, #7]
	return bStatus;
 80041f2:	79fb      	ldrb	r3, [r7, #7]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40021000 	.word	0x40021000

08004200 <MAX7370_read>:

static void MAX7370_read(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af02      	add	r7, sp, #8
	  HAL_StatusTypeDef ret;

	  uint8_t cmd = KEY_FIFO_REG;
 8004206:	2300      	movs	r3, #0
 8004208:	71bb      	strb	r3, [r7, #6]

      ret = HAL_I2C_Master_Transmit(&hi2c2, MAX7370_ADR, &cmd, 1, HAL_MAX_DELAY);
 800420a:	1dba      	adds	r2, r7, #6
 800420c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	2301      	movs	r3, #1
 8004214:	2170      	movs	r1, #112	; 0x70
 8004216:	4811      	ldr	r0, [pc, #68]	; (800425c <MAX7370_read+0x5c>)
 8004218:	f006 fe34 	bl	800ae84 <HAL_I2C_Master_Transmit>
 800421c:	4603      	mov	r3, r0
 800421e:	71fb      	strb	r3, [r7, #7]

	  if(ret == HAL_OK)
 8004220:	79fb      	ldrb	r3, [r7, #7]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d110      	bne.n	8004248 <MAX7370_read+0x48>
	  {
		 ret = HAL_I2C_Master_Receive_IT(&hi2c2, MAX7370_ADR, &gstModel.gKeyCode, 1);
 8004226:	2301      	movs	r3, #1
 8004228:	4a0d      	ldr	r2, [pc, #52]	; (8004260 <MAX7370_read+0x60>)
 800422a:	2170      	movs	r1, #112	; 0x70
 800422c:	480b      	ldr	r0, [pc, #44]	; (800425c <MAX7370_read+0x5c>)
 800422e:	f006 ff8d 	bl	800b14c <HAL_I2C_Master_Receive_IT>
 8004232:	4603      	mov	r3, r0
 8004234:	71fb      	strb	r3, [r7, #7]

		 if(ret != HAL_OK)
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <MAX7370_read+0x52>
		 {
			 UartPrintf("MAX7370 RCIT Read err %x\n", ret);
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	4619      	mov	r1, r3
 8004240:	4808      	ldr	r0, [pc, #32]	; (8004264 <MAX7370_read+0x64>)
 8004242:	f001 fd6d 	bl	8005d20 <UartPrintf>
	  }
	  else
	  {
		  UartPrintf("MAX7370 TX Read err  %x\n", ret);
	  }
}
 8004246:	e004      	b.n	8004252 <MAX7370_read+0x52>
		  UartPrintf("MAX7370 TX Read err  %x\n", ret);
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	4619      	mov	r1, r3
 800424c:	4806      	ldr	r0, [pc, #24]	; (8004268 <MAX7370_read+0x68>)
 800424e:	f001 fd67 	bl	8005d20 <UartPrintf>
}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20004264 	.word	0x20004264
 8004260:	20000c6a 	.word	0x20000c6a
 8004264:	080217a8 	.word	0x080217a8
 8004268:	080217c4 	.word	0x080217c4

0800426c <MAX7370_init>:

static void MAX7370_init()
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
	uint8_t data[2];

	data[0] = GLOBAL_CFG_REG;
 8004272:	2340      	movs	r3, #64	; 0x40
 8004274:	713b      	strb	r3, [r7, #4]
    data[1] = 0x10;                  // Normal Op: GPIO,PWM,CCS
 8004276:	2310      	movs	r3, #16
 8004278:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 800427a:	1d3b      	adds	r3, r7, #4
 800427c:	2102      	movs	r1, #2
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff ff88 	bl	8004194 <MAX7370_write>

    data[0] = CFG_REG;
 8004284:	2301      	movs	r3, #1
 8004286:	713b      	strb	r3, [r7, #4]
    data[1] = 0x89;                  // Key-switch operation mode, key-release en, timout disable
 8004288:	2389      	movs	r3, #137	; 0x89
 800428a:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 800428c:	1d3b      	adds	r3, r7, #4
 800428e:	2102      	movs	r1, #2
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff ff7f 	bl	8004194 <MAX7370_write>

	data[0] = KEY_REPEAT_REG;
 8004296:	2305      	movs	r3, #5
 8004298:	713b      	strb	r3, [r7, #4]
	data[1] = 0xFF;                  // Key-switch auto-repeat enable Autorepeat frequency is 32 debounce cycles, Autorepeat delay is 128 debounce cycles
 800429a:	23ff      	movs	r3, #255	; 0xff
 800429c:	717b      	strb	r3, [r7, #5]
	MAX7370_write((uint8_t *)&data, 2);
 800429e:	1d3b      	adds	r3, r7, #4
 80042a0:	2102      	movs	r1, #2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff ff76 	bl	8004194 <MAX7370_write>

    data[0] = KEY_SWITCH_SIZE_REG;
 80042a8:	2330      	movs	r3, #48	; 0x30
 80042aa:	713b      	strb	r3, [r7, #4]
    data[1] = 0x33;                  // Keypad size: ROW 2:0, COL 2:0
 80042ac:	2333      	movs	r3, #51	; 0x33
 80042ae:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 80042b0:	1d3b      	adds	r3, r7, #4
 80042b2:	2102      	movs	r1, #2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff ff6d 	bl	8004194 <MAX7370_write>
    //COL7:4 default as OP, COL3:0 default as PP

    //.......ROW/COL Direction for Keypad Operation
    //ROW7:0 default all Inputs

    data[0] = COL70_DIR_REG;
 80042ba:	2335      	movs	r3, #53	; 0x35
 80042bc:	713b      	strb	r3, [r7, #4]
    data[1] = 0x30;                       // COL5:4 = out; COL3:0 = in; 0=in; 1=out; default=0x00
 80042be:	2330      	movs	r3, #48	; 0x30
 80042c0:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 80042c2:	1d3b      	adds	r3, r7, #4
 80042c4:	2102      	movs	r1, #2
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff ff64 	bl	8004194 <MAX7370_write>

    //............ Col 7:4 Constant Current Setting
    data[0] = COL70_CC_SETTING_REG;
 80042cc:	2343      	movs	r3, #67	; 0x43
 80042ce:	713b      	strb	r3, [r7, #4]
    data[1] = 0xC1;                       // COL 7:4 0xC0=20mA; 0xC1=10mA
 80042d0:	23c1      	movs	r3, #193	; 0xc1
 80042d2:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 80042d4:	1d3b      	adds	r3, r7, #4
 80042d6:	2102      	movs	r1, #2
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff ff5b 	bl	8004194 <MAX7370_write>

    //Key-switches and Interrupt set up
    data[0] = DEBOUNCE_KEY_REG;
 80042de:	2302      	movs	r3, #2
 80042e0:	713b      	strb	r3, [r7, #4]
    data[1] = 0x0A;           // 20ms press debounce time
 80042e2:	230a      	movs	r3, #10
 80042e4:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 80042e6:	1d3b      	adds	r3, r7, #4
 80042e8:	2102      	movs	r1, #2
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff ff52 	bl	8004194 <MAX7370_write>

    data[0] = INTERRUPT_KS_REG;
 80042f0:	2303      	movs	r3, #3
 80042f2:	713b      	strb	r3, [r7, #4]
    data[1] = 0x01;           // /INT assert every debounce cycle
 80042f4:	2301      	movs	r3, #1
 80042f6:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 80042f8:	1d3b      	adds	r3, r7, #4
 80042fa:	2102      	movs	r1, #2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ff49 	bl	8004194 <MAX7370_write>

    MAX7370_write((uint8_t *)&send_data, 2);//off all
 8004302:	2102      	movs	r1, #2
 8004304:	4803      	ldr	r0, [pc, #12]	; (8004314 <MAX7370_init+0xa8>)
 8004306:	f7ff ff45 	bl	8004194 <MAX7370_write>
}
 800430a:	bf00      	nop
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	200001c4 	.word	0x200001c4

08004318 <Switches_Init>:


SWITCH* Switches_Init(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
	UartPrintf("Init MAX7370\n");
 800431c:	4805      	ldr	r0, [pc, #20]	; (8004334 <Switches_Init+0x1c>)
 800431e:	f001 fcff 	bl	8005d20 <UartPrintf>

	MAX7370_init();
 8004322:	f7ff ffa3 	bl	800426c <MAX7370_init>

	gstSwitch = &c;
 8004326:	4b04      	ldr	r3, [pc, #16]	; (8004338 <Switches_Init+0x20>)
 8004328:	4a04      	ldr	r2, [pc, #16]	; (800433c <Switches_Init+0x24>)
 800432a:	601a      	str	r2, [r3, #0]

	return (SWITCH*) &c;
 800432c:	4b03      	ldr	r3, [pc, #12]	; (800433c <Switches_Init+0x24>)
}
 800432e:	4618      	mov	r0, r3
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	080217e0 	.word	0x080217e0
 8004338:	20000c90 	.word	0x20000c90
 800433c:	20000c84 	.word	0x20000c84

08004340 <KeyCodeTranslation>:

SWITCH_ID KeyCodeTranslation(uint8_t KeyCode)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	71fb      	strb	r3, [r7, #7]
	int i;

	for(i = 1; i < ARRAY_LEN(astKeyTranslate); i++)
 800434a:	2301      	movs	r3, #1
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	e00c      	b.n	800436a <KeyCodeTranslation+0x2a>
	{
		if(KeyCode == astKeyTranslate[i].uKeyCode)
 8004350:	4a0b      	ldr	r2, [pc, #44]	; (8004380 <KeyCodeTranslation+0x40>)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4413      	add	r3, r2
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	79fa      	ldrb	r2, [r7, #7]
 800435a:	429a      	cmp	r2, r3
 800435c:	d102      	bne.n	8004364 <KeyCodeTranslation+0x24>
		{
			return i;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	e006      	b.n	8004372 <KeyCodeTranslation+0x32>
	for(i = 1; i < ARRAY_LEN(astKeyTranslate); i++)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3301      	adds	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b09      	cmp	r3, #9
 800436e:	d9ef      	bls.n	8004350 <KeyCodeTranslation+0x10>
		}
	}

    return SWITCH_ID_NONE;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	200001b8 	.word	0x200001b8

08004384 <Switches_Scan>:

bool Switches_Scan(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
	bool bSwitchPress = false;
 800438a:	2300      	movs	r3, #0
 800438c:	73fb      	strb	r3, [r7, #15]

	if( keyboardFail != false )
 800438e:	4b5a      	ldr	r3, [pc, #360]	; (80044f8 <Switches_Scan+0x174>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <Switches_Scan+0x16>
	{
		return bSwitchPress;
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	e0aa      	b.n	80044f0 <Switches_Scan+0x16c>
	}

	KEY_ACTIVE *pstKeyActive = &(gstSwitch->stKeyActive);
 800439a:	4b58      	ldr	r3, [pc, #352]	; (80044fc <Switches_Scan+0x178>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60bb      	str	r3, [r7, #8]

	//Serve the interrupt;
	if(gstModel.bMembranePress == true)
 80043a0:	4b57      	ldr	r3, [pc, #348]	; (8004500 <Switches_Scan+0x17c>)
 80043a2:	7a1b      	ldrb	r3, [r3, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d009      	beq.n	80043bc <Switches_Scan+0x38>
	{
		gstModel.bMembranePress = false;
 80043a8:	4b55      	ldr	r3, [pc, #340]	; (8004500 <Switches_Scan+0x17c>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	721a      	strb	r2, [r3, #8]
		MAX7370_read();
 80043ae:	f7ff ff27 	bl	8004200 <MAX7370_read>
		wMAX7370LastRead = GetTimeMs();
 80043b2:	f001 fdad 	bl	8005f10 <GetTimeMs>
 80043b6:	4603      	mov	r3, r0
 80043b8:	4a52      	ldr	r2, [pc, #328]	; (8004504 <Switches_Scan+0x180>)
 80043ba:	6013      	str	r3, [r2, #0]
	}

	//Serve the KeyCode read back
	if(gstModel.bKeyCodeReady == true)
 80043bc:	4b50      	ldr	r3, [pc, #320]	; (8004500 <Switches_Scan+0x17c>)
 80043be:	791b      	ldrb	r3, [r3, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 8084 	beq.w	80044ce <Switches_Scan+0x14a>
	{
		gstModel.bKeyCodeReady = false;
 80043c6:	4b4e      	ldr	r3, [pc, #312]	; (8004500 <Switches_Scan+0x17c>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	711a      	strb	r2, [r3, #4]

		//Check to see if key interrupt from press or release action
		if( (gstModel.gKeyCode & KEY_RELEASE) != KEY_RELEASE)
 80043cc:	4b4c      	ldr	r3, [pc, #304]	; (8004500 <Switches_Scan+0x17c>)
 80043ce:	7a9b      	ldrb	r3, [r3, #10]
 80043d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d134      	bne.n	8004442 <Switches_Scan+0xbe>
		{
			//Key press
			pstKeyActive->uKeyCode        = KEY_NOW; //save keycode
 80043d8:	4b49      	ldr	r3, [pc, #292]	; (8004500 <Switches_Scan+0x17c>)
 80043da:	7a9b      	ldrb	r3, [r3, #10]
 80043dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	709a      	strb	r2, [r3, #2]

			//detection of the key stuck for more than 20 seconds
			if(KEY_REPEAT_LAST_DATA ==  pstKeyActive->uKeyCode)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	789b      	ldrb	r3, [r3, #2]
 80043ea:	2b3e      	cmp	r3, #62	; 0x3e
 80043ec:	d120      	bne.n	8004430 <Switches_Scan+0xac>
			{
				if(pstKeyActive->uFirstRepeatTime == 0)
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d105      	bne.n	8004402 <Switches_Scan+0x7e>
				{
				    pstKeyActive->uFirstRepeatTime = Get_SysTick(); //time stamp of the first repeat no data event
 80043f6:	f001 fdc7 	bl	8005f88 <Get_SysTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	609a      	str	r2, [r3, #8]
 8004400:	e065      	b.n	80044ce <Switches_Scan+0x14a>
				}
				else
				{
					if( (Get_SysTick() - pstKeyActive->uFirstRepeatTime) >= KEY_HOLD_20_SEC)
 8004402:	f001 fdc1 	bl	8005f88 <Get_SysTick>
 8004406:	4602      	mov	r2, r0
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004412:	4293      	cmp	r3, r2
 8004414:	d95b      	bls.n	80044ce <Switches_Scan+0x14a>
					{
						//KEY_FAIL
						pstKeyActive->uFirstRepeatTime = 0;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2200      	movs	r2, #0
 800441a:	609a      	str	r2, [r3, #8]
						pstKeyActive->eKeyStatus = KEY_FAIL;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2203      	movs	r2, #3
 8004420:	701a      	strb	r2, [r3, #0]
						keyboardFail = true;
 8004422:	4b35      	ldr	r3, [pc, #212]	; (80044f8 <Switches_Scan+0x174>)
 8004424:	2201      	movs	r2, #1
 8004426:	701a      	strb	r2, [r3, #0]
						UartPrintf("Switch held too Long, Disable Switch Scan\n");
 8004428:	4837      	ldr	r0, [pc, #220]	; (8004508 <Switches_Scan+0x184>)
 800442a:	f001 fc79 	bl	8005d20 <UartPrintf>
 800442e:	e04e      	b.n	80044ce <Switches_Scan+0x14a>
					}
				}
			}
			else
			{
				pstKeyActive->uLastActiveTime  = Get_SysTick(); //store the key press
 8004430:	f001 fdaa 	bl	8005f88 <Get_SysTick>
 8004434:	4602      	mov	r2, r0
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	605a      	str	r2, [r3, #4]
				pstKeyActive->uFirstRepeatTime = 0;
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2200      	movs	r2, #0
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	e045      	b.n	80044ce <Switches_Scan+0x14a>
			}
		}
		else
		{
			//Key release, only validate Keycode with previously press
			uint8_t uKeyCodeNow = KEY_NOW;
 8004442:	4b2f      	ldr	r3, [pc, #188]	; (8004500 <Switches_Scan+0x17c>)
 8004444:	7a9b      	ldrb	r3, [r3, #10]
 8004446:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800444a:	71fb      	strb	r3, [r7, #7]

			if(pstKeyActive->uLastActiveTime && (uKeyCodeNow == pstKeyActive->uKeyCode))
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d03c      	beq.n	80044ce <Switches_Scan+0x14a>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	789b      	ldrb	r3, [r3, #2]
 8004458:	79fa      	ldrb	r2, [r7, #7]
 800445a:	429a      	cmp	r2, r3
 800445c:	d137      	bne.n	80044ce <Switches_Scan+0x14a>
			{
				if( (Get_SysTick() - pstKeyActive->uLastActiveTime) >= KEY_HOLD_4_SEC)
 800445e:	f001 fd93 	bl	8005f88 <Get_SysTick>
 8004462:	4602      	mov	r2, r0
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800446e:	d303      	bcc.n	8004478 <Switches_Scan+0xf4>
				{
					//KEY_HOLD_4_SEC
					pstKeyActive->eKeyStatus = KEY_HOLD_4_S;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2201      	movs	r2, #1
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	e00f      	b.n	8004498 <Switches_Scan+0x114>
				}
				else if( (Get_SysTick() - pstKeyActive->uLastActiveTime) >= KEY_HOLD_2_SEC)
 8004478:	f001 fd86 	bl	8005f88 <Get_SysTick>
 800447c:	4602      	mov	r2, r0
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004488:	d303      	bcc.n	8004492 <Switches_Scan+0x10e>
				{
					//KEY_HOLD_2_SEC
					pstKeyActive->eKeyStatus = KEY_HOLD_2_S;
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2202      	movs	r2, #2
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	e002      	b.n	8004498 <Switches_Scan+0x114>
				}
				else
				{
					pstKeyActive->eKeyStatus = KEY_PRESS;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2200      	movs	r2, #0
 8004496:	701a      	strb	r2, [r3, #0]
				}

				pstKeyActive->eKeyID = KeyCodeTranslation(pstKeyActive->uKeyCode); //translation from KeyCode to enum ID
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	789b      	ldrb	r3, [r3, #2]
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff ff4f 	bl	8004340 <KeyCodeTranslation>
 80044a2:	4603      	mov	r3, r0
 80044a4:	461a      	mov	r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	705a      	strb	r2, [r3, #1]
				pstKeyActive->uLastActiveTime = 0; //clean up temp holder
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2200      	movs	r2, #0
 80044ae:	605a      	str	r2, [r3, #4]
				if( keyboardFail  == false )
 80044b0:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <Switches_Scan+0x174>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	f083 0301 	eor.w	r3, r3, #1
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d007      	beq.n	80044ce <Switches_Scan+0x14a>
				{
					bSwitchPress = true;
 80044be:	2301      	movs	r3, #1
 80044c0:	73fb      	strb	r3, [r7, #15]
					UartPrintf("Key Active: %d\n", pstKeyActive->eKeyID);
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	785b      	ldrb	r3, [r3, #1]
 80044c6:	4619      	mov	r1, r3
 80044c8:	4810      	ldr	r0, [pc, #64]	; (800450c <Switches_Scan+0x188>)
 80044ca:	f001 fc29 	bl	8005d20 <UartPrintf>
		}
	}

	//Fail safe check to see the interrupt line still low, do another read
	//to make sure the fifo is clear
	if(isMembraneIntStillLow() == true)
 80044ce:	f7ff fe83 	bl	80041d8 <isMembraneIntStillLow>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <Switches_Scan+0x16a>
	{
		if((GetTimeMs() - wMAX7370LastRead) >= MAX_TIME_INT_SIGNAL_LOW_MS)
 80044d8:	f001 fd1a 	bl	8005f10 <GetTimeMs>
 80044dc:	4602      	mov	r2, r0
 80044de:	4b09      	ldr	r3, [pc, #36]	; (8004504 <Switches_Scan+0x180>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80044e8:	d301      	bcc.n	80044ee <Switches_Scan+0x16a>
		{
		    MAX7370_read();
 80044ea:	f7ff fe89 	bl	8004200 <MAX7370_read>
		}
	}

	return bSwitchPress;
 80044ee:	7bfb      	ldrb	r3, [r7, #15]

}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	20000c94 	.word	0x20000c94
 80044fc:	20000c90 	.word	0x20000c90
 8004500:	20000c60 	.word	0x20000c60
 8004504:	20000c98 	.word	0x20000c98
 8004508:	080217f0 	.word	0x080217f0
 800450c:	0802181c 	.word	0x0802181c

08004510 <Switches_Get_Status>:

void Switches_Get_Status( SWITCH_ID * eSwitchId, KEY_STATUS * eKeyStatus )
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
	KEY_ACTIVE *pstKeyActive 	= &(gstSwitch->stKeyActive);
 800451a:	4b08      	ldr	r3, [pc, #32]	; (800453c <Switches_Get_Status+0x2c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60fb      	str	r3, [r7, #12]
	*eSwitchId        			= pstKeyActive->eKeyID;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	785a      	ldrb	r2, [r3, #1]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	701a      	strb	r2, [r3, #0]
	*eKeyStatus 				= pstKeyActive->eKeyStatus;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	781a      	ldrb	r2, [r3, #0]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	701a      	strb	r2, [r3, #0]
}
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	20000c90 	.word	0x20000c90

08004540 <Switches_Power_Onoff>:


void Switches_Power_Onoff(bool bOnOff)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	71fb      	strb	r3, [r7, #7]
	if(bOnOff == true)
 800454a:	79fb      	ldrb	r3, [r7, #7]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d006      	beq.n	800455e <Switches_Power_Onoff+0x1e>
	{
		HAL_GPIO_WritePin(MEMB_POWER_EN_GPIO_Port, MEMB_POWER_EN_Pin, GPIO_PIN_SET);
 8004550:	2201      	movs	r2, #1
 8004552:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004556:	4807      	ldr	r0, [pc, #28]	; (8004574 <Switches_Power_Onoff+0x34>)
 8004558:	f006 fbb8 	bl	800accc <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(MEMB_POWER_EN_GPIO_Port, MEMB_POWER_EN_Pin, GPIO_PIN_RESET);
	}
}
 800455c:	e005      	b.n	800456a <Switches_Power_Onoff+0x2a>
		HAL_GPIO_WritePin(MEMB_POWER_EN_GPIO_Port, MEMB_POWER_EN_Pin, GPIO_PIN_RESET);
 800455e:	2200      	movs	r2, #0
 8004560:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004564:	4803      	ldr	r0, [pc, #12]	; (8004574 <Switches_Power_Onoff+0x34>)
 8004566:	f006 fbb1 	bl	800accc <HAL_GPIO_WritePin>
}
 800456a:	bf00      	nop
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40021800 	.word	0x40021800

08004578 <LED_Start_On>:

void LED_Start_On()
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
	uint8_t data[2];
    data[0] = DEBOUNCED_VAL_COL70_REG;
 800457e:	233b      	movs	r3, #59	; 0x3b
 8004580:	713b      	strb	r3, [r7, #4]
    led_start_pause &= ~(1<<4); //COL4 = 0
 8004582:	4b09      	ldr	r3, [pc, #36]	; (80045a8 <LED_Start_On+0x30>)
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	f023 0310 	bic.w	r3, r3, #16
 800458a:	b2da      	uxtb	r2, r3
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <LED_Start_On+0x30>)
 800458e:	701a      	strb	r2, [r3, #0]
    data[1] = led_start_pause;
 8004590:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <LED_Start_On+0x30>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 8004596:	1d3b      	adds	r3, r7, #4
 8004598:	2102      	movs	r1, #2
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff fdfa 	bl	8004194 <MAX7370_write>
}
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	200001c6 	.word	0x200001c6

080045ac <LED_Start_Off>:

void LED_Start_Off()
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
	uint8_t data[2];
    data[0] = DEBOUNCED_VAL_COL70_REG;
 80045b2:	233b      	movs	r3, #59	; 0x3b
 80045b4:	713b      	strb	r3, [r7, #4]
    led_start_pause |= (1<<4); //COL4 = 1
 80045b6:	4b09      	ldr	r3, [pc, #36]	; (80045dc <LED_Start_Off+0x30>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	f043 0310 	orr.w	r3, r3, #16
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <LED_Start_Off+0x30>)
 80045c2:	701a      	strb	r2, [r3, #0]
    data[1] = led_start_pause;
 80045c4:	4b05      	ldr	r3, [pc, #20]	; (80045dc <LED_Start_Off+0x30>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 80045ca:	1d3b      	adds	r3, r7, #4
 80045cc:	2102      	movs	r1, #2
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff fde0 	bl	8004194 <MAX7370_write>
}
 80045d4:	bf00      	nop
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	200001c6 	.word	0x200001c6

080045e0 <LED_Pause_On>:

void LED_Pause_On()
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
	uint8_t data[2];
    data[0] = DEBOUNCED_VAL_COL70_REG;
 80045e6:	233b      	movs	r3, #59	; 0x3b
 80045e8:	713b      	strb	r3, [r7, #4]
    led_start_pause &= ~(1<<5); //COL4 = 0
 80045ea:	4b09      	ldr	r3, [pc, #36]	; (8004610 <LED_Pause_On+0x30>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	f023 0320 	bic.w	r3, r3, #32
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	4b06      	ldr	r3, [pc, #24]	; (8004610 <LED_Pause_On+0x30>)
 80045f6:	701a      	strb	r2, [r3, #0]
    data[1] = led_start_pause;
 80045f8:	4b05      	ldr	r3, [pc, #20]	; (8004610 <LED_Pause_On+0x30>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 80045fe:	1d3b      	adds	r3, r7, #4
 8004600:	2102      	movs	r1, #2
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff fdc6 	bl	8004194 <MAX7370_write>
}
 8004608:	bf00      	nop
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	200001c6 	.word	0x200001c6

08004614 <LED_Pause_Off>:

void LED_Pause_Off()
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
	uint8_t data[2];
    data[0] = DEBOUNCED_VAL_COL70_REG;
 800461a:	233b      	movs	r3, #59	; 0x3b
 800461c:	713b      	strb	r3, [r7, #4]
    led_start_pause |= (1<<5); //COL4 = 1
 800461e:	4b09      	ldr	r3, [pc, #36]	; (8004644 <LED_Pause_Off+0x30>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	f043 0320 	orr.w	r3, r3, #32
 8004626:	b2da      	uxtb	r2, r3
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <LED_Pause_Off+0x30>)
 800462a:	701a      	strb	r2, [r3, #0]
    data[1] = led_start_pause;
 800462c:	4b05      	ldr	r3, [pc, #20]	; (8004644 <LED_Pause_Off+0x30>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	717b      	strb	r3, [r7, #5]
    MAX7370_write((uint8_t *)&data, 2);
 8004632:	1d3b      	adds	r3, r7, #4
 8004634:	2102      	movs	r1, #2
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fdac 	bl	8004194 <MAX7370_write>
}
 800463c:	bf00      	nop
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	200001c6 	.word	0x200001c6

08004648 <IsAlpha>:
 * Parameters:  c - Char to be checked.
 *
 * Returns:     -1 if alphanumeric, 0 otherwise.
 *---------------------------------------------------------------------------*/
int IsAlpha(char c)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	71fb      	strb	r3, [r7, #7]
    if (((c >= '0') && (c <= '9')) ||
 8004652:	79fb      	ldrb	r3, [r7, #7]
 8004654:	2b2f      	cmp	r3, #47	; 0x2f
 8004656:	d902      	bls.n	800465e <IsAlpha+0x16>
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	2b39      	cmp	r3, #57	; 0x39
 800465c:	d90b      	bls.n	8004676 <IsAlpha+0x2e>
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	2b40      	cmp	r3, #64	; 0x40
 8004662:	d902      	bls.n	800466a <IsAlpha+0x22>
        ((c >= 'A') && (c <= 'Z')) ||
 8004664:	79fb      	ldrb	r3, [r7, #7]
 8004666:	2b5a      	cmp	r3, #90	; 0x5a
 8004668:	d905      	bls.n	8004676 <IsAlpha+0x2e>
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	2b60      	cmp	r3, #96	; 0x60
 800466e:	d905      	bls.n	800467c <IsAlpha+0x34>
        ((c >= 'a') && (c <= 'z')))
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	2b7a      	cmp	r3, #122	; 0x7a
 8004674:	d802      	bhi.n	800467c <IsAlpha+0x34>
    {
        return -1;
 8004676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800467a:	e000      	b.n	800467e <IsAlpha+0x36>
    }
    else
    {
        return 0;
 800467c:	2300      	movs	r3, #0
    }
}
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
	...

0800468c <InterpLookup>:
 * Returns:     If the command name is recognized, a pointer to an associated
 *              command table entry. If the command name is not recognized,
 *              a NULL pointer is returned.
 *--------------------------------------------------------------------------*/
static CmdTableEntry* InterpLookup(char* cmdName)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
    uint16_t i;
    CmdTableEntry* pCmdTableEntry = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	60bb      	str	r3, [r7, #8]

    // Check if command name exists.
    if (cmdName == (char*)0)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <InterpLookup+0x16>
        return NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	e023      	b.n	80046ea <InterpLookup+0x5e>

    // Look in command table for a matching command name.
    for ( i=0; i <= currentNumberOfCommands; i++ )
 80046a2:	2300      	movs	r3, #0
 80046a4:	81fb      	strh	r3, [r7, #14]
 80046a6:	e01a      	b.n	80046de <InterpLookup+0x52>
    {
        if ( !strcmp(CommandTable[i].name, cmdName) )
 80046a8:	89fa      	ldrh	r2, [r7, #14]
 80046aa:	4613      	mov	r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	1a9b      	subs	r3, r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4a10      	ldr	r2, [pc, #64]	; (80046f4 <InterpLookup+0x68>)
 80046b4:	4413      	add	r3, r2
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fb fdb1 	bl	8000220 <strcmp>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d109      	bne.n	80046d8 <InterpLookup+0x4c>
        {
            pCmdTableEntry = &CommandTable[i];
 80046c4:	89fa      	ldrh	r2, [r7, #14]
 80046c6:	4613      	mov	r3, r2
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	1a9b      	subs	r3, r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4a09      	ldr	r2, [pc, #36]	; (80046f4 <InterpLookup+0x68>)
 80046d0:	4413      	add	r3, r2
 80046d2:	60bb      	str	r3, [r7, #8]
            return pCmdTableEntry;
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	e008      	b.n	80046ea <InterpLookup+0x5e>
    for ( i=0; i <= currentNumberOfCommands; i++ )
 80046d8:	89fb      	ldrh	r3, [r7, #14]
 80046da:	3301      	adds	r3, #1
 80046dc:	81fb      	strh	r3, [r7, #14]
 80046de:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <InterpLookup+0x6c>)
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	89fa      	ldrh	r2, [r7, #14]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d9df      	bls.n	80046a8 <InterpLookup+0x1c>
        }
    }

    return NULL;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000c9c 	.word	0x20000c9c
 80046f8:	20001a9c 	.word	0x20001a9c

080046fc <InterpValidateCmd>:
 *                            the current command.
 *
 * Returns:     An interpreter error code.
 *--------------------------------------------------------------------------*/
static INTERP InterpValidateCmd(char** argv, int argc, CmdTableEntry** ppCmdTabEnt )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
    CmdTableEntry*  pCmdTableEntry = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
    CmdTableEntry** UserPPcmdTabEnt = ppCmdTabEnt;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	613b      	str	r3, [r7, #16]

    *UserPPcmdTabEnt = 0;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]

    /* Check if command name exists. */
    if ( argv[0] == NULL )
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <InterpValidateCmd+0x26>
        return INTERP_ARG_CMD_NOT_VALID;
 800471e:	2303      	movs	r3, #3
 8004720:	e01c      	b.n	800475c <InterpValidateCmd+0x60>

    /* Find the command object associated with the command. */
    pCmdTableEntry = InterpLookup( argv[0] );
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff ffb0 	bl	800468c <InterpLookup>
 800472c:	6178      	str	r0, [r7, #20]
    if ( pCmdTableEntry == NULL )
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <InterpValidateCmd+0x3c>
        return INTERP_ARG_CMD_NOT_VALID;
 8004734:	2303      	movs	r3, #3
 8004736:	e011      	b.n	800475c <InterpValidateCmd+0x60>

    // Validate the command arguments.
    if ( argc < pCmdTableEntry->minArgs )
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	429a      	cmp	r2, r3
 8004740:	da01      	bge.n	8004746 <InterpValidateCmd+0x4a>
        return INTERP_ARG_UNDER_MIN;
 8004742:	2304      	movs	r3, #4
 8004744:	e00a      	b.n	800475c <InterpValidateCmd+0x60>
    else if ( argc > pCmdTableEntry->maxArgs )
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	429a      	cmp	r2, r3
 800474e:	dd01      	ble.n	8004754 <InterpValidateCmd+0x58>
        return INTERP_ARG_OVER_MAX;
 8004750:	2305      	movs	r3, #5
 8004752:	e003      	b.n	800475c <InterpValidateCmd+0x60>
    else
    {
        *ppCmdTabEnt = pCmdTableEntry;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	601a      	str	r2, [r3, #0]
        return INTERP_SUCCESS;
 800475a:	2300      	movs	r3, #0
    }

    return INTERP_ARG_CMD_NOT_VALID;
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <InterpExecute>:
 * Parameters:  None.
 *
 * Returns:     An interpreter error code.
 *--------------------------------------------------------------------------*/
static INTERP InterpExecute(int argc, char** argv)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
    CmdTableEntry*       pCmdTabEnt1   = NULL;
 800476e:	2300      	movs	r3, #0
 8004770:	60bb      	str	r3, [r7, #8]
    INTERP               interpRes     = INTERP_BAD_ARGC;
 8004772:	2302      	movs	r3, #2
 8004774:	73fb      	strb	r3, [r7, #15]

    /* Check arguments and lookup command procedure. */
    if (argc > 0)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	dd39      	ble.n	80047f0 <InterpExecute+0x8c>
    {
        /* Check command for validity. */
        if ( (interpRes = InterpValidateCmd(argv, argc, &pCmdTabEnt1)) == INTERP_SUCCESS )
 800477c:	f107 0308 	add.w	r3, r7, #8
 8004780:	461a      	mov	r2, r3
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	6838      	ldr	r0, [r7, #0]
 8004786:	f7ff ffb9 	bl	80046fc <InterpValidateCmd>
 800478a:	4603      	mov	r3, r0
 800478c:	73fb      	strb	r3, [r7, #15]
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d110      	bne.n	80047b6 <InterpExecute+0x52>
        {
            // Execute the command.
            if ( pCmdTabEnt1->cmdFn(argc, argv) )
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	6839      	ldr	r1, [r7, #0]
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	4798      	blx	r3
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d026      	beq.n	80047f2 <InterpExecute+0x8e>
            {
            	UartPrintf("Error Executing Command: %s\r\n", argv[0]);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4619      	mov	r1, r3
 80047aa:	4814      	ldr	r0, [pc, #80]	; (80047fc <InterpExecute+0x98>)
 80047ac:	f001 fab8 	bl	8005d20 <UartPrintf>
                interpRes = INTERP_CMD_FAIL;
 80047b0:	2306      	movs	r3, #6
 80047b2:	73fb      	strb	r3, [r7, #15]
 80047b4:	e01d      	b.n	80047f2 <InterpExecute+0x8e>
            }
        }
        else
        {
            switch ( interpRes )
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
 80047b8:	2b05      	cmp	r3, #5
 80047ba:	d011      	beq.n	80047e0 <InterpExecute+0x7c>
 80047bc:	2b05      	cmp	r3, #5
 80047be:	dc13      	bgt.n	80047e8 <InterpExecute+0x84>
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d002      	beq.n	80047ca <InterpExecute+0x66>
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d007      	beq.n	80047d8 <InterpExecute+0x74>
 80047c8:	e00e      	b.n	80047e8 <InterpExecute+0x84>
            {
                case INTERP_ARG_CMD_NOT_VALID:
                	UartPrintf("Command: %s -- not Valid \r\n", argv[0]);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4619      	mov	r1, r3
 80047d0:	480b      	ldr	r0, [pc, #44]	; (8004800 <InterpExecute+0x9c>)
 80047d2:	f001 faa5 	bl	8005d20 <UartPrintf>
                    break;
 80047d6:	e00c      	b.n	80047f2 <InterpExecute+0x8e>

                case INTERP_ARG_UNDER_MIN:
                	UartPrintf("Too few command arguments\r\n");
 80047d8:	480a      	ldr	r0, [pc, #40]	; (8004804 <InterpExecute+0xa0>)
 80047da:	f001 faa1 	bl	8005d20 <UartPrintf>
                    break;
 80047de:	e008      	b.n	80047f2 <InterpExecute+0x8e>

                case INTERP_ARG_OVER_MAX:
                	UartPrintf("Too many command arguments\r\n");
 80047e0:	4809      	ldr	r0, [pc, #36]	; (8004808 <InterpExecute+0xa4>)
 80047e2:	f001 fa9d 	bl	8005d20 <UartPrintf>
                    break;
 80047e6:	e004      	b.n	80047f2 <InterpExecute+0x8e>

                default:
                	UartPrintf("Unknown command failure\r\n");
 80047e8:	4808      	ldr	r0, [pc, #32]	; (800480c <InterpExecute+0xa8>)
 80047ea:	f001 fa99 	bl	8005d20 <UartPrintf>
                	break;
 80047ee:	e000      	b.n	80047f2 <InterpExecute+0x8e>
            }
        }
 80047f0:	bf00      	nop
    }

    return interpRes;
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	0802182c 	.word	0x0802182c
 8004800:	0802184c 	.word	0x0802184c
 8004804:	08021868 	.word	0x08021868
 8004808:	08021884 	.word	0x08021884
 800480c:	080218a4 	.word	0x080218a4

08004810 <InterpRun>:
 * Parameters:  cmdStr - A pointer to a command string containing an ASCII command.
 *
 * Returns:     0 if command executed successfully, 1 otherwise.
 *----------------------------------------------------------------------------*/
INTERP InterpRun(const char* cmdStr)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
    unsigned int    i   = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	60fb      	str	r3, [r7, #12]
    const char*     ptr = cmdStr;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	60bb      	str	r3, [r7, #8]

    /* Create command tokens. */
    scriptArgc = 0;
 8004820:	4b50      	ldr	r3, [pc, #320]	; (8004964 <InterpRun+0x154>)
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]

    while (*ptr != 0)
 8004826:	e08c      	b.n	8004942 <InterpRun+0x132>
    {
        /* Argument is a string. */
        if (*ptr == '"')
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b22      	cmp	r3, #34	; 0x22
 800482e:	d115      	bne.n	800485c <InterpRun+0x4c>
        {
            ptr++;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	3301      	adds	r3, #1
 8004834:	60bb      	str	r3, [r7, #8]
            while (*ptr != '"')
 8004836:	e00d      	b.n	8004854 <InterpRun+0x44>
            {
                scriptArgv[scriptArgc][i++] = *ptr++;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	60ba      	str	r2, [r7, #8]
 800483e:	4a49      	ldr	r2, [pc, #292]	; (8004964 <InterpRun+0x154>)
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	4949      	ldr	r1, [pc, #292]	; (8004968 <InterpRun+0x158>)
 8004844:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	1c50      	adds	r0, r2, #1
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	440a      	add	r2, r1
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	7013      	strb	r3, [r2, #0]
            while (*ptr != '"')
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b22      	cmp	r3, #34	; 0x22
 800485a:	d1ed      	bne.n	8004838 <InterpRun+0x28>
            }
        }

        /* Add character to argument. */
        if (IsAlpha(*ptr))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff fef1 	bl	8004648 <IsAlpha>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00c      	beq.n	8004886 <InterpRun+0x76>
        {
            scriptArgv[scriptArgc][i++] = *ptr;
 800486c:	4b3d      	ldr	r3, [pc, #244]	; (8004964 <InterpRun+0x154>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a3d      	ldr	r2, [pc, #244]	; (8004968 <InterpRun+0x158>)
 8004872:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1c59      	adds	r1, r3, #1
 800487a:	60f9      	str	r1, [r7, #12]
 800487c:	4413      	add	r3, r2
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	7812      	ldrb	r2, [r2, #0]
 8004882:	701a      	strb	r2, [r3, #0]
 8004884:	e043      	b.n	800490e <InterpRun+0xfe>
        }
        else if ((*ptr == '.') ||
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b2e      	cmp	r3, #46	; 0x2e
 800488c:	d01f      	beq.n	80048ce <InterpRun+0xbe>
                 (*ptr == '_') ||
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	781b      	ldrb	r3, [r3, #0]
        else if ((*ptr == '.') ||
 8004892:	2b5f      	cmp	r3, #95	; 0x5f
 8004894:	d01b      	beq.n	80048ce <InterpRun+0xbe>
                 (*ptr == '-') ||
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	781b      	ldrb	r3, [r3, #0]
                 (*ptr == '_') ||
 800489a:	2b2d      	cmp	r3, #45	; 0x2d
 800489c:	d017      	beq.n	80048ce <InterpRun+0xbe>
                 (*ptr == '/') ||
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	781b      	ldrb	r3, [r3, #0]
                 (*ptr == '-') ||
 80048a2:	2b2f      	cmp	r3, #47	; 0x2f
 80048a4:	d013      	beq.n	80048ce <InterpRun+0xbe>
                 (*ptr == '+') ||
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	781b      	ldrb	r3, [r3, #0]
                 (*ptr == '/') ||
 80048aa:	2b2b      	cmp	r3, #43	; 0x2b
 80048ac:	d00f      	beq.n	80048ce <InterpRun+0xbe>
                 (*ptr == '=') ||
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	781b      	ldrb	r3, [r3, #0]
                 (*ptr == '+') ||
 80048b2:	2b3d      	cmp	r3, #61	; 0x3d
 80048b4:	d00b      	beq.n	80048ce <InterpRun+0xbe>
                 (*ptr == '>') ||
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	781b      	ldrb	r3, [r3, #0]
                 (*ptr == '=') ||
 80048ba:	2b3e      	cmp	r3, #62	; 0x3e
 80048bc:	d007      	beq.n	80048ce <InterpRun+0xbe>
                 (*ptr == ':') ||
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	781b      	ldrb	r3, [r3, #0]
                 (*ptr == '>') ||
 80048c2:	2b3a      	cmp	r3, #58	; 0x3a
 80048c4:	d003      	beq.n	80048ce <InterpRun+0xbe>
                 (*ptr == '?'))
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	781b      	ldrb	r3, [r3, #0]
                 (*ptr == ':') ||
 80048ca:	2b3f      	cmp	r3, #63	; 0x3f
 80048cc:	d10c      	bne.n	80048e8 <InterpRun+0xd8>
        {
            scriptArgv[scriptArgc][i++] = *ptr;
 80048ce:	4b25      	ldr	r3, [pc, #148]	; (8004964 <InterpRun+0x154>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a25      	ldr	r2, [pc, #148]	; (8004968 <InterpRun+0x158>)
 80048d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	1c59      	adds	r1, r3, #1
 80048dc:	60f9      	str	r1, [r7, #12]
 80048de:	4413      	add	r3, r2
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	7812      	ldrb	r2, [r2, #0]
 80048e4:	701a      	strb	r2, [r3, #0]
 80048e6:	e012      	b.n	800490e <InterpRun+0xfe>
        }
        /* Terminate argument. */
        else if ( i > 0 )
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00f      	beq.n	800490e <InterpRun+0xfe>
        {
            scriptArgv[scriptArgc][i] = '\0';
 80048ee:	4b1d      	ldr	r3, [pc, #116]	; (8004964 <InterpRun+0x154>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <InterpRun+0x158>)
 80048f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]
            i = 0;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]
            scriptArgc++;
 8004904:	4b17      	ldr	r3, [pc, #92]	; (8004964 <InterpRun+0x154>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3301      	adds	r3, #1
 800490a:	4a16      	ldr	r2, [pc, #88]	; (8004964 <InterpRun+0x154>)
 800490c:	6013      	str	r3, [r2, #0]
        }

        /* If at end of cmd str and there were cmd chars for the prev argv, */
        /* terminate the argument. */
        ptr++;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	3301      	adds	r3, #1
 8004912:	60bb      	str	r3, [r7, #8]
        if ( (*ptr == 0) && (i > 0) )
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d112      	bne.n	8004942 <InterpRun+0x132>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00f      	beq.n	8004942 <InterpRun+0x132>
        {
            scriptArgv[scriptArgc][i] = '\0';
 8004922:	4b10      	ldr	r3, [pc, #64]	; (8004964 <InterpRun+0x154>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a10      	ldr	r2, [pc, #64]	; (8004968 <InterpRun+0x158>)
 8004928:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]
            i = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	60fb      	str	r3, [r7, #12]
            scriptArgc++;
 8004938:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <InterpRun+0x154>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3301      	adds	r3, #1
 800493e:	4a09      	ldr	r2, [pc, #36]	; (8004964 <InterpRun+0x154>)
 8004940:	6013      	str	r3, [r2, #0]
    while (*ptr != 0)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	f47f af6e 	bne.w	8004828 <InterpRun+0x18>
        }
    }

    /* Execute the parsed ASCII command. */
    return InterpExecute( scriptArgc, scriptArgv );
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <InterpRun+0x154>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4905      	ldr	r1, [pc, #20]	; (8004968 <InterpRun+0x158>)
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff ff06 	bl	8004764 <InterpExecute>
 8004958:	4603      	mov	r3, r0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20001ce0 	.word	0x20001ce0
 8004968:	20001ca0 	.word	0x20001ca0

0800496c <InterpRegister>:
 *              maxArgs - The maximum # of args the handler accepts.
 *
 * Returns:     A interpreter error code.
 *--------------------------------------------------------------------------*/
INTERP InterpRegister( char* cmdName, int (*proc)(), int minArgs, int maxArgs )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	603b      	str	r3, [r7, #0]
    if ( currentNumberOfCommands < MAX_NUM_OF_COMMANDS )
 800497a:	4b21      	ldr	r3, [pc, #132]	; (8004a00 <InterpRegister+0x94>)
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	2b7f      	cmp	r3, #127	; 0x7f
 8004980:	d838      	bhi.n	80049f4 <InterpRegister+0x88>
    {
        strcpy( CommandTable[currentNumberOfCommands].name, cmdName );
 8004982:	4b1f      	ldr	r3, [pc, #124]	; (8004a00 <InterpRegister+0x94>)
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	461a      	mov	r2, r3
 8004988:	4613      	mov	r3, r2
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4a1c      	ldr	r2, [pc, #112]	; (8004a04 <InterpRegister+0x98>)
 8004992:	4413      	add	r3, r2
 8004994:	68f9      	ldr	r1, [r7, #12]
 8004996:	4618      	mov	r0, r3
 8004998:	f018 fcd1 	bl	801d33e <strcpy>
        CommandTable[currentNumberOfCommands].cmdFn   = proc;
 800499c:	4b18      	ldr	r3, [pc, #96]	; (8004a00 <InterpRegister+0x94>)
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	4619      	mov	r1, r3
 80049a2:	4a18      	ldr	r2, [pc, #96]	; (8004a04 <InterpRegister+0x98>)
 80049a4:	460b      	mov	r3, r1
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	1a5b      	subs	r3, r3, r1
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	3310      	adds	r3, #16
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	601a      	str	r2, [r3, #0]
        CommandTable[currentNumberOfCommands].minArgs = minArgs;
 80049b4:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <InterpRegister+0x94>)
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	4619      	mov	r1, r3
 80049ba:	4a12      	ldr	r2, [pc, #72]	; (8004a04 <InterpRegister+0x98>)
 80049bc:	460b      	mov	r3, r1
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	1a5b      	subs	r3, r3, r1
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	3314      	adds	r3, #20
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	601a      	str	r2, [r3, #0]
        CommandTable[currentNumberOfCommands].maxArgs = maxArgs;
 80049cc:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <InterpRegister+0x94>)
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	4619      	mov	r1, r3
 80049d2:	4a0c      	ldr	r2, [pc, #48]	; (8004a04 <InterpRegister+0x98>)
 80049d4:	460b      	mov	r3, r1
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	1a5b      	subs	r3, r3, r1
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	3318      	adds	r3, #24
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	601a      	str	r2, [r3, #0]
        currentNumberOfCommands++;
 80049e4:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <InterpRegister+0x94>)
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	3301      	adds	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <InterpRegister+0x94>)
 80049ee:	801a      	strh	r2, [r3, #0]
        return ( INTERP_SUCCESS );
 80049f0:	2300      	movs	r3, #0
 80049f2:	e000      	b.n	80049f6 <InterpRegister+0x8a>
    }

    return( INTERP_CMD_REGISTER_FAIL );
 80049f4:	2301      	movs	r3, #1
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20001a9c 	.word	0x20001a9c
 8004a04:	20000c9c 	.word	0x20000c9c

08004a08 <InterpInit>:
 * Parameters:  None.
 *
 * Returns:     None.
 *--------------------------------------------------------------------------*/
void InterpInit()
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
    uint16_t i;

    // Initialize the command argument array.
    for ( i = 0; i < MAX_NUM_OF_ARGS; i++ )
 8004a0e:	2300      	movs	r3, #0
 8004a10:	80fb      	strh	r3, [r7, #6]
 8004a12:	e00a      	b.n	8004a2a <InterpInit+0x22>
        scriptArgv[i] = &(cmdArgs[i][0]);
 8004a14:	88fa      	ldrh	r2, [r7, #6]
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	0152      	lsls	r2, r2, #5
 8004a1a:	4909      	ldr	r1, [pc, #36]	; (8004a40 <InterpInit+0x38>)
 8004a1c:	440a      	add	r2, r1
 8004a1e:	4909      	ldr	r1, [pc, #36]	; (8004a44 <InterpInit+0x3c>)
 8004a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for ( i = 0; i < MAX_NUM_OF_ARGS; i++ )
 8004a24:	88fb      	ldrh	r3, [r7, #6]
 8004a26:	3301      	adds	r3, #1
 8004a28:	80fb      	strh	r3, [r7, #6]
 8004a2a:	88fb      	ldrh	r3, [r7, #6]
 8004a2c:	2b0f      	cmp	r3, #15
 8004a2e:	d9f1      	bls.n	8004a14 <InterpInit+0xc>

    UartPrintf("Interpreter Initialized\r\n");
 8004a30:	4805      	ldr	r0, [pc, #20]	; (8004a48 <InterpInit+0x40>)
 8004a32:	f001 f975 	bl	8005d20 <UartPrintf>
}
 8004a36:	bf00      	nop
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20001aa0 	.word	0x20001aa0
 8004a44:	20001ca0 	.word	0x20001ca0
 8004a48:	080218c0 	.word	0x080218c0

08004a4c <GetNoAsyncPrintsFlag>:
static uint8_t headerPrinted = 0;
bool noAsyncPrints           = false;
bool bStopDebugPrint         = false;

bool GetNoAsyncPrintsFlag( )
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
	return noAsyncPrints;
 8004a50:	4b03      	ldr	r3, [pc, #12]	; (8004a60 <GetNoAsyncPrintsFlag+0x14>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	20001ce5 	.word	0x20001ce5

08004a64 <IsStopDebugPring>:

bool IsStopDebugPring()
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
	return bStopDebugPrint;
 8004a68:	4b03      	ldr	r3, [pc, #12]	; (8004a78 <IsStopDebugPring+0x14>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	20001ce6 	.word	0x20001ce6

08004a7c <PrintManagerInit>:

PrintEnables printEnables;
uint16_t PrintTimes[PRINT_GROUPS];

void PrintManagerInit()
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
	printEnables.PrintEnableWord = 0;
 8004a80:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <PrintManagerInit+0x1c>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
	PrintTimes[PRINT_PRESS]      = 200;
 8004a86:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <PrintManagerInit+0x20>)
 8004a88:	22c8      	movs	r2, #200	; 0xc8
 8004a8a:	801a      	strh	r2, [r3, #0]

	return;
 8004a8c:	bf00      	nop
}
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	20001ce8 	.word	0x20001ce8
 8004a9c:	20001cec 	.word	0x20001cec

08004aa0 <PrintManager>:

int PrintManager()
{
 8004aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa4:	b086      	sub	sp, #24
 8004aa6:	af06      	add	r7, sp, #24
	static unsigned int pmCount = 0;

	if ( printEnables.PrintEnableWord )
 8004aa8:	4b41      	ldr	r3, [pc, #260]	; (8004bb0 <PrintManager+0x110>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d075      	beq.n	8004b9c <PrintManager+0xfc>
	{
		//check if there is any request to print Item for example this is the request to show
		//the pressure sensor

		if (  printEnables.bits.printPress  )
 8004ab0:	4b3f      	ldr	r3, [pc, #252]	; (8004bb0 <PrintManager+0x110>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d044      	beq.n	8004b48 <PrintManager+0xa8>
		{
			if ( !(pmCount % PrintTimes[PRINT_PRESS]) )
 8004abe:	4b3d      	ldr	r3, [pc, #244]	; (8004bb4 <PrintManager+0x114>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a3d      	ldr	r2, [pc, #244]	; (8004bb8 <PrintManager+0x118>)
 8004ac4:	8812      	ldrh	r2, [r2, #0]
 8004ac6:	fbb3 f1f2 	udiv	r1, r3, r2
 8004aca:	fb01 f202 	mul.w	r2, r1, r2
 8004ace:	1a9b      	subs	r3, r3, r2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d163      	bne.n	8004b9c <PrintManager+0xfc>
			{
				if ( !headerPrinted )
 8004ad4:	4b39      	ldr	r3, [pc, #228]	; (8004bbc <PrintManager+0x11c>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d105      	bne.n	8004ae8 <PrintManager+0x48>
				{
					PmUartPrintfWithoutPrompt("PSen1 mmHg       PSen2   mmHg     PSen3   mmHg    PSen4  mmHg\n");
 8004adc:	4838      	ldr	r0, [pc, #224]	; (8004bc0 <PrintManager+0x120>)
 8004ade:	f001 f9e5 	bl	8005eac <PmUartPrintfWithoutPrompt>
					headerPrinted = 1;
 8004ae2:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <PrintManager+0x11c>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	701a      	strb	r2, [r3, #0]
				//UartPrintfWithoutPrompt("%4.3f     %4.3f     %4.3f     %4.3f\n",
				//		                   GetPressureSensor1Value(), GetPressureSensor2Value(),
				//						   GetPressureSensor3Value(), GetPressureSensor4Value() );

				UartPrintfWithoutPrompt("%9.4f        %9.4f        %9.4f        %9.4f\n",
						               GetCalcMmhgSensorPressure1( ), GetCalcMmhgSensorPressure2( ),
 8004ae8:	f7fc fc06 	bl	80012f8 <GetCalcMmhgSensorPressure1>
 8004aec:	ee10 3a10 	vmov	r3, s0
				UartPrintfWithoutPrompt("%9.4f        %9.4f        %9.4f        %9.4f\n",
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fb fd61 	bl	80005b8 <__aeabi_f2d>
 8004af6:	4682      	mov	sl, r0
 8004af8:	468b      	mov	fp, r1
						               GetCalcMmhgSensorPressure1( ), GetCalcMmhgSensorPressure2( ),
 8004afa:	f7fc fb31 	bl	8001160 <GetCalcMmhgSensorPressure2>
 8004afe:	ee10 3a10 	vmov	r3, s0
				UartPrintfWithoutPrompt("%9.4f        %9.4f        %9.4f        %9.4f\n",
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fb fd58 	bl	80005b8 <__aeabi_f2d>
 8004b08:	4604      	mov	r4, r0
 8004b0a:	460d      	mov	r5, r1
						               GetCalcMmhgSensorPressure3( ), GetCalcMmhgSensorPressure4( ) );
 8004b0c:	f7fc fb6c 	bl	80011e8 <GetCalcMmhgSensorPressure3>
 8004b10:	ee10 3a10 	vmov	r3, s0
				UartPrintfWithoutPrompt("%9.4f        %9.4f        %9.4f        %9.4f\n",
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fb fd4f 	bl	80005b8 <__aeabi_f2d>
 8004b1a:	4680      	mov	r8, r0
 8004b1c:	4689      	mov	r9, r1
						               GetCalcMmhgSensorPressure3( ), GetCalcMmhgSensorPressure4( ) );
 8004b1e:	f7fc fba7 	bl	8001270 <GetCalcMmhgSensorPressure4>
 8004b22:	ee10 3a10 	vmov	r3, s0
				UartPrintfWithoutPrompt("%9.4f        %9.4f        %9.4f        %9.4f\n",
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fb fd46 	bl	80005b8 <__aeabi_f2d>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b34:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004b38:	e9cd 4500 	strd	r4, r5, [sp]
 8004b3c:	4652      	mov	r2, sl
 8004b3e:	465b      	mov	r3, fp
 8004b40:	4820      	ldr	r0, [pc, #128]	; (8004bc4 <PrintManager+0x124>)
 8004b42:	f001 f933 	bl	8005dac <UartPrintfWithoutPrompt>
 8004b46:	e029      	b.n	8004b9c <PrintManager+0xfc>
			}
		}
		else if (  printEnables.bits.printPfc  )
 8004b48:	4b19      	ldr	r3, [pc, #100]	; (8004bb0 <PrintManager+0x110>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d022      	beq.n	8004b9c <PrintManager+0xfc>
		{
			if ( !(pmCount % PrintTimes[PRINT_PFC]) )
 8004b56:	4b17      	ldr	r3, [pc, #92]	; (8004bb4 <PrintManager+0x114>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a17      	ldr	r2, [pc, #92]	; (8004bb8 <PrintManager+0x118>)
 8004b5c:	8852      	ldrh	r2, [r2, #2]
 8004b5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b62:	fb01 f202 	mul.w	r2, r1, r2
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d117      	bne.n	8004b9c <PrintManager+0xfc>
			{
				if ( !headerPrinted )
 8004b6c:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <PrintManager+0x11c>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d105      	bne.n	8004b80 <PrintManager+0xe0>
				{
					PmUartPrintfWithoutPrompt("PfcCurrentRawAdc      PfcVoutRawAdc     PfcTempMonRawAdc\n");
 8004b74:	4814      	ldr	r0, [pc, #80]	; (8004bc8 <PrintManager+0x128>)
 8004b76:	f001 f999 	bl	8005eac <PmUartPrintfWithoutPrompt>
					headerPrinted = 1;
 8004b7a:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <PrintManager+0x11c>)
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	701a      	strb	r2, [r3, #0]
				}

				PmUartPrintfWithoutPrompt("%d       %d       %d\n", GetPfcCurrentMonRawAdc(), GetPfcVOutRawAdc(), GetPfcTempMonRawAdc() );
 8004b80:	f7fc fc48 	bl	8001414 <GetPfcCurrentMonRawAdc>
 8004b84:	4604      	mov	r4, r0
 8004b86:	f7fc fc51 	bl	800142c <GetPfcVOutRawAdc>
 8004b8a:	4605      	mov	r5, r0
 8004b8c:	f7fc fc5a 	bl	8001444 <GetPfcTempMonRawAdc>
 8004b90:	4603      	mov	r3, r0
 8004b92:	462a      	mov	r2, r5
 8004b94:	4621      	mov	r1, r4
 8004b96:	480d      	ldr	r0, [pc, #52]	; (8004bcc <PrintManager+0x12c>)
 8004b98:	f001 f988 	bl	8005eac <PmUartPrintfWithoutPrompt>
			}
		}

	}

	pmCount++;
 8004b9c:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <PrintManager+0x114>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	4a04      	ldr	r2, [pc, #16]	; (8004bb4 <PrintManager+0x114>)
 8004ba4:	6013      	str	r3, [r2, #0]

	return 0;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bb0:	20001ce8 	.word	0x20001ce8
 8004bb4:	20001cf0 	.word	0x20001cf0
 8004bb8:	20001cec 	.word	0x20001cec
 8004bbc:	20001ce4 	.word	0x20001ce4
 8004bc0:	080218dc 	.word	0x080218dc
 8004bc4:	0802191c 	.word	0x0802191c
 8004bc8:	0802194c 	.word	0x0802194c
 8004bcc:	08021988 	.word	0x08021988

08004bd0 <SetPrintTimePeriods>:

void SetPrintTimePeriods( PRINT_CODE pc, uint16_t tp )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	460a      	mov	r2, r1
 8004bda:	71fb      	strb	r3, [r7, #7]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	80bb      	strh	r3, [r7, #4]
	noAsyncPrints = false;
 8004be0:	4b24      	ldr	r3, [pc, #144]	; (8004c74 <SetPrintTimePeriods+0xa4>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	701a      	strb	r2, [r3, #0]

	if ( pc >= PRINT_GROUPS )
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d903      	bls.n	8004bf4 <SetPrintTimePeriods+0x24>
	{
		UartPrintf( "Illegal Print Group for Setting Time Period \n");
 8004bec:	4822      	ldr	r0, [pc, #136]	; (8004c78 <SetPrintTimePeriods+0xa8>)
 8004bee:	f001 f897 	bl	8005d20 <UartPrintf>
		return;
 8004bf2:	e03b      	b.n	8004c6c <SetPrintTimePeriods+0x9c>
	}

	if ( tp == 0 )
 8004bf4:	88bb      	ldrh	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d119      	bne.n	8004c2e <SetPrintTimePeriods+0x5e>
	{
		headerPrinted = 0;
 8004bfa:	4b20      	ldr	r3, [pc, #128]	; (8004c7c <SetPrintTimePeriods+0xac>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]

		switch ( pc )
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <SetPrintTimePeriods+0x3c>
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d006      	beq.n	8004c18 <SetPrintTimePeriods+0x48>
 8004c0a:	e00b      	b.n	8004c24 <SetPrintTimePeriods+0x54>
		{
			case PRINT_PRESS:
			    printEnables.bits.printPress = 0;
 8004c0c:	4a1c      	ldr	r2, [pc, #112]	; (8004c80 <SetPrintTimePeriods+0xb0>)
 8004c0e:	7813      	ldrb	r3, [r2, #0]
 8004c10:	f36f 0300 	bfc	r3, #0, #1
 8004c14:	7013      	strb	r3, [r2, #0]
			break;
 8004c16:	e009      	b.n	8004c2c <SetPrintTimePeriods+0x5c>

			case PRINT_PFC:
			    printEnables.bits.printPfc = 0;
 8004c18:	4a19      	ldr	r2, [pc, #100]	; (8004c80 <SetPrintTimePeriods+0xb0>)
 8004c1a:	7813      	ldrb	r3, [r2, #0]
 8004c1c:	f36f 0341 	bfc	r3, #1, #1
 8004c20:	7013      	strb	r3, [r2, #0]
			break;
 8004c22:	e003      	b.n	8004c2c <SetPrintTimePeriods+0x5c>

			default:
			printEnables.PrintEnableWord = 0;
 8004c24:	4b16      	ldr	r3, [pc, #88]	; (8004c80 <SetPrintTimePeriods+0xb0>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
			break;
 8004c2a:	bf00      	nop
		}

		return;
 8004c2c:	e01e      	b.n	8004c6c <SetPrintTimePeriods+0x9c>
	}

    if ( tp >= MIN_PRINT_PERIOD_MS )
 8004c2e:	88bb      	ldrh	r3, [r7, #4]
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d910      	bls.n	8004c56 <SetPrintTimePeriods+0x86>
	{
		PrintTimes[pc] = tp / 5;  // Print Times in 5ms ticks
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	88ba      	ldrh	r2, [r7, #4]
 8004c38:	4912      	ldr	r1, [pc, #72]	; (8004c84 <SetPrintTimePeriods+0xb4>)
 8004c3a:	fba1 1202 	umull	r1, r2, r1, r2
 8004c3e:	0892      	lsrs	r2, r2, #2
 8004c40:	b291      	uxth	r1, r2
 8004c42:	4a11      	ldr	r2, [pc, #68]	; (8004c88 <SetPrintTimePeriods+0xb8>)
 8004c44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if( tp < 20 )
 8004c48:	88bb      	ldrh	r3, [r7, #4]
 8004c4a:	2b13      	cmp	r3, #19
 8004c4c:	d80d      	bhi.n	8004c6a <SetPrintTimePeriods+0x9a>
		{
			noAsyncPrints = true;
 8004c4e:	4b09      	ldr	r3, [pc, #36]	; (8004c74 <SetPrintTimePeriods+0xa4>)
 8004c50:	2201      	movs	r2, #1
 8004c52:	701a      	strb	r2, [r3, #0]
		printEnables.PrintEnableWord = 0;
		UartPrintfWithoutPrompt( "Print Period is too short \n");
		UartPrintf( "Print time must be 0 (turn print group off) or >= %d \n", MIN_PRINT_PERIOD_MS );
	}

	return;
 8004c54:	e009      	b.n	8004c6a <SetPrintTimePeriods+0x9a>
		printEnables.PrintEnableWord = 0;
 8004c56:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <SetPrintTimePeriods+0xb0>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
		UartPrintfWithoutPrompt( "Print Period is too short \n");
 8004c5c:	480b      	ldr	r0, [pc, #44]	; (8004c8c <SetPrintTimePeriods+0xbc>)
 8004c5e:	f001 f8a5 	bl	8005dac <UartPrintfWithoutPrompt>
		UartPrintf( "Print time must be 0 (turn print group off) or >= %d \n", MIN_PRINT_PERIOD_MS );
 8004c62:	2105      	movs	r1, #5
 8004c64:	480a      	ldr	r0, [pc, #40]	; (8004c90 <SetPrintTimePeriods+0xc0>)
 8004c66:	f001 f85b 	bl	8005d20 <UartPrintf>
	return;
 8004c6a:	bf00      	nop
}
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20001ce5 	.word	0x20001ce5
 8004c78:	080219a0 	.word	0x080219a0
 8004c7c:	20001ce4 	.word	0x20001ce4
 8004c80:	20001ce8 	.word	0x20001ce8
 8004c84:	cccccccd 	.word	0xcccccccd
 8004c88:	20001cec 	.word	0x20001cec
 8004c8c:	080219d0 	.word	0x080219d0
 8004c90:	080219ec 	.word	0x080219ec

08004c94 <SetPMprints>:


int SetPMprints( int argc, char** argv )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
	PRINT_CODE printCode;

    if ( !strcmp(argv[1], "press") )
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4922      	ldr	r1, [pc, #136]	; (8004d30 <SetPMprints+0x9c>)
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fb faba 	bl	8000220 <strcmp>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d107      	bne.n	8004cc2 <SetPMprints+0x2e>
	{
		printCode = PRINT_PRESS;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	73fb      	strb	r3, [r7, #15]
		printEnables.bits.printPress = 1;
 8004cb6:	4a1f      	ldr	r2, [pc, #124]	; (8004d34 <SetPMprints+0xa0>)
 8004cb8:	7813      	ldrb	r3, [r2, #0]
 8004cba:	f043 0301 	orr.w	r3, r3, #1
 8004cbe:	7013      	strb	r3, [r2, #0]
 8004cc0:	e017      	b.n	8004cf2 <SetPMprints+0x5e>
	}
	else if( !strcmp(argv[1], "pfc") )
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	491b      	ldr	r1, [pc, #108]	; (8004d38 <SetPMprints+0xa4>)
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fb faa8 	bl	8000220 <strcmp>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d107      	bne.n	8004ce6 <SetPMprints+0x52>
	{
		printCode = PRINT_PFC;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	73fb      	strb	r3, [r7, #15]
		printEnables.bits.printPfc = 1;
 8004cda:	4a16      	ldr	r2, [pc, #88]	; (8004d34 <SetPMprints+0xa0>)
 8004cdc:	7813      	ldrb	r3, [r2, #0]
 8004cde:	f043 0302 	orr.w	r3, r3, #2
 8004ce2:	7013      	strb	r3, [r2, #0]
 8004ce4:	e005      	b.n	8004cf2 <SetPMprints+0x5e>
	}
	else
	{
		UartPrintf( "Illegal Print Code Used \n" );
 8004ce6:	4815      	ldr	r0, [pc, #84]	; (8004d3c <SetPMprints+0xa8>)
 8004ce8:	f001 f81a 	bl	8005d20 <UartPrintf>
		return -1;
 8004cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cf0:	e01a      	b.n	8004d28 <SetPMprints+0x94>
	}

	if ( argc > 2 )
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	dd0e      	ble.n	8004d16 <SetPMprints+0x82>
	{
		uint16_t printTimePeriodMs;
		printTimePeriodMs = atoi( (const char*)argv[2] );
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	3308      	adds	r3, #8
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f017 fd0e 	bl	801c720 <atoi>
 8004d04:	4603      	mov	r3, r0
 8004d06:	81bb      	strh	r3, [r7, #12]
		SetPrintTimePeriods( printCode, printTimePeriodMs );
 8004d08:	89ba      	ldrh	r2, [r7, #12]
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff ff5e 	bl	8004bd0 <SetPrintTimePeriods>
 8004d14:	e007      	b.n	8004d26 <SetPMprints+0x92>
	}
	else
	{
		UartPrintfWithoutPrompt( "No Print Period specified -- defaulting to 1 second\n");
 8004d16:	480a      	ldr	r0, [pc, #40]	; (8004d40 <SetPMprints+0xac>)
 8004d18:	f001 f848 	bl	8005dac <UartPrintfWithoutPrompt>
		SetPrintTimePeriods( printCode, 200 );
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
 8004d1e:	21c8      	movs	r1, #200	; 0xc8
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff ff55 	bl	8004bd0 <SetPrintTimePeriods>
	}

	return 0;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	08021a24 	.word	0x08021a24
 8004d34:	20001ce8 	.word	0x20001ce8
 8004d38:	08021a2c 	.word	0x08021a2c
 8004d3c:	08021a30 	.word	0x08021a30
 8004d40:	08021a4c 	.word	0x08021a4c

08004d44 <SetAllLedBlink>:

int SetAllLedBlink( int argc, char** argv )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
	UartPrintf("Received Blink all LEDs Command, TimeOn TimeOff should be multiple of 5ms\n");
 8004d4e:	4807      	ldr	r0, [pc, #28]	; (8004d6c <SetAllLedBlink+0x28>)
 8004d50:	f000 ffe6 	bl	8005d20 <UartPrintf>
	LED_Set( LED_COUNT, LED_SET_BLINK, 50, 50);
 8004d54:	2332      	movs	r3, #50	; 0x32
 8004d56:	2232      	movs	r2, #50	; 0x32
 8004d58:	2102      	movs	r1, #2
 8004d5a:	200a      	movs	r0, #10
 8004d5c:	f7fe fefc 	bl	8003b58 <LED_Set>
	return 0;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	08021a84 	.word	0x08021a84

08004d70 <SetAllLedOn>:

int SetAllLedOn( int argc, char** argv )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
	UartPrintf("Received Turn all LEDs On Command\n");
 8004d7a:	4807      	ldr	r0, [pc, #28]	; (8004d98 <SetAllLedOn+0x28>)
 8004d7c:	f000 ffd0 	bl	8005d20 <UartPrintf>
	LED_Set( LED_COUNT, LED_SET_ON, 0, 0);
 8004d80:	2300      	movs	r3, #0
 8004d82:	2200      	movs	r2, #0
 8004d84:	2101      	movs	r1, #1
 8004d86:	200a      	movs	r0, #10
 8004d88:	f7fe fee6 	bl	8003b58 <LED_Set>
	return 0;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	08021ad0 	.word	0x08021ad0

08004d9c <SetAllLedOff>:

int SetAllLedOff( int argc, char** argv )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
	UartPrintf("Received Turn all LEDs Off Command\n");
 8004da6:	4807      	ldr	r0, [pc, #28]	; (8004dc4 <SetAllLedOff+0x28>)
 8004da8:	f000 ffba 	bl	8005d20 <UartPrintf>
	LED_Set( LED_COUNT, LED_SET_OFF, 0, 0);
 8004dac:	2300      	movs	r3, #0
 8004dae:	2200      	movs	r2, #0
 8004db0:	2100      	movs	r1, #0
 8004db2:	200a      	movs	r0, #10
 8004db4:	f7fe fed0 	bl	8003b58 <LED_Set>
	return 0;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	08021af4 	.word	0x08021af4

08004dc8 <InitLog>:

int InitLog( int argc, char** argv )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
	InitializeLog( );
 8004dd2:	f7fd fd8f 	bl	80028f4 <InitializeLog>

	UartPrintf("");
 8004dd6:	4804      	ldr	r0, [pc, #16]	; (8004de8 <InitLog+0x20>)
 8004dd8:	f000 ffa2 	bl	8005d20 <UartPrintf>

    return 0;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	08021b18 	.word	0x08021b18

08004dec <GetMfgDate>:

int GetMfgDate( int argc, char** argv )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
	GetMfgDateFromEeprom( );
 8004df6:	f7fd fdab 	bl	8002950 <GetMfgDateFromEeprom>

	return 0;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <SetMfgDate>:

int SetMfgDate( int argc, char** argv )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
	if( sizeof(argv[1]) <= 16 )
	{
		StoreMfgDateInEeprom( argv[1] );
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	3304      	adds	r3, #4
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fd fd41 	bl	800289c <StoreMfgDateInEeprom>
	else
	{
		UartPrintf("Mfg Date: %s is too long\n", argv[1]);
	}

	UartPrintf("Set Mfg Date:%s\n", argv[1]);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4619      	mov	r1, r3
 8004e22:	4804      	ldr	r0, [pc, #16]	; (8004e34 <SetMfgDate+0x30>)
 8004e24:	f000 ff7c 	bl	8005d20 <UartPrintf>

	return 0;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	08021b1c 	.word	0x08021b1c

08004e38 <GetSerialNum>:

int GetSerialNum( int argc, char** argv )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
	GetSerialNumberFromEeprom( );
 8004e42:	f7fd fd95 	bl	8002970 <GetSerialNumberFromEeprom>

	return 0;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <SetSerialNum>:

int SetSerialNum( int argc, char** argv )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
	uint32_t serialNum = strtol(argv[1], NULL, 10);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	220a      	movs	r2, #10
 8004e62:	2100      	movs	r1, #0
 8004e64:	4618      	mov	r0, r3
 8004e66:	f019 f99b 	bl	801e1a0 <strtol>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	60fb      	str	r3, [r7, #12]

	StoreSerialNumberInEeprom( serialNum );
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f7fd fd21 	bl	80028b6 <StoreSerialNumberInEeprom>

	UartPrintf("");
 8004e74:	4803      	ldr	r0, [pc, #12]	; (8004e84 <SetSerialNum+0x34>)
 8004e76:	f000 ff53 	bl	8005d20 <UartPrintf>

	return 0;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	08021b18 	.word	0x08021b18

08004e88 <SetMediumAlarm>:

int SetMediumAlarm( int argc, char** argv )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
	UartPrintf("Med Alarm On\n");
 8004e92:	4809      	ldr	r0, [pc, #36]	; (8004eb8 <SetMediumAlarm+0x30>)
 8004e94:	f000 ff44 	bl	8005d20 <UartPrintf>
	BUZZER_Request( BUZZER_TONE_MED, 300, 300, 0, 10000 );
 8004e98:	f242 7310 	movw	r3, #10000	; 0x2710
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ea4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004ea8:	2001      	movs	r0, #1
 8004eaa:	f7fc fe7f 	bl	8001bac <BUZZER_Request>
	return 0;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	08021b30 	.word	0x08021b30

08004ebc <SetHightAlarm>:

int SetHightAlarm( int argc, char** argv )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
	UartPrintf("High Alarm On\n");
 8004ec6:	4809      	ldr	r0, [pc, #36]	; (8004eec <SetHightAlarm+0x30>)
 8004ec8:	f000 ff2a 	bl	8005d20 <UartPrintf>
	BUZZER_Request( BUZZER_TONE_HIGH, 250, 250, 300, 5000 );
 8004ecc:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004ed6:	22fa      	movs	r2, #250	; 0xfa
 8004ed8:	21fa      	movs	r1, #250	; 0xfa
 8004eda:	2002      	movs	r0, #2
 8004edc:	f7fc fe66 	bl	8001bac <BUZZER_Request>
	return 0;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	08021b40 	.word	0x08021b40

08004ef0 <SetAlarmOff>:

int SetAlarmOff( int argc, char** argv )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
	UartPrintf("Alarm Off\n");
 8004efa:	4808      	ldr	r0, [pc, #32]	; (8004f1c <SetAlarmOff+0x2c>)
 8004efc:	f000 ff10 	bl	8005d20 <UartPrintf>
	BUZZER_Request( BUZZER_TONE_OFF, 0, 0, 0, 0 );
 8004f00:	2300      	movs	r3, #0
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	2300      	movs	r3, #0
 8004f06:	2200      	movs	r2, #0
 8004f08:	2100      	movs	r1, #0
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	f7fc fe4e 	bl	8001bac <BUZZER_Request>
	return 0;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	08021b50 	.word	0x08021b50

08004f20 <SetDacOutput>:

int SetDacOutput( int argc, char** argv )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]

	float fV = strtof(argv[1], NULL);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2100      	movs	r1, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	f019 f856 	bl	801dfe4 <strtof>
 8004f38:	ed87 0a03 	vstr	s0, [r7, #12]

	if(fV < 0.0 || fV > 3.3)
 8004f3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f48:	d40a      	bmi.n	8004f60 <SetDacOutput+0x40>
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f7fb fb34 	bl	80005b8 <__aeabi_f2d>
 8004f50:	a311      	add	r3, pc, #68	; (adr r3, 8004f98 <SetDacOutput+0x78>)
 8004f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f56:	f7fb fe17 	bl	8000b88 <__aeabi_dcmpgt>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <SetDacOutput+0x48>
	{
		UartPrintfWithoutPrompt("Bad DAC value: range allows from 0.0 to 3.3\n");
 8004f60:	480b      	ldr	r0, [pc, #44]	; (8004f90 <SetDacOutput+0x70>)
 8004f62:	f000 ff23 	bl	8005dac <UartPrintfWithoutPrompt>
 8004f66:	e00b      	b.n	8004f80 <SetDacOutput+0x60>
	}
	else
	{
	   UartPrintfWithoutPrompt("Set DAC value to %4.2f Volt\n", fV);
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f7fb fb25 	bl	80005b8 <__aeabi_f2d>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4808      	ldr	r0, [pc, #32]	; (8004f94 <SetDacOutput+0x74>)
 8004f74:	f000 ff1a 	bl	8005dac <UartPrintfWithoutPrompt>
	   Set_DAC_Voltage(fV);
 8004f78:	ed97 0a03 	vldr	s0, [r7, #12]
 8004f7c:	f001 f9ec 	bl	8006358 <Set_DAC_Voltage>
	}
	return 0;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	f3af 8000 	nop.w
 8004f90:	08021b5c 	.word	0x08021b5c
 8004f94:	08021b8c 	.word	0x08021b8c
 8004f98:	66666666 	.word	0x66666666
 8004f9c:	400a6666 	.word	0x400a6666

08004fa0 <GetDacOutput>:

int GetDacOutput( int argc, char** argv )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
	UartPrintfWithoutPrompt("What is DAC setting?\n");
 8004faa:	4805      	ldr	r0, [pc, #20]	; (8004fc0 <GetDacOutput+0x20>)
 8004fac:	f000 fefe 	bl	8005dac <UartPrintfWithoutPrompt>
	Get_DAC_Voltage();
 8004fb0:	f001 fa26 	bl	8006400 <Get_DAC_Voltage>
	return 0;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	08021bac 	.word	0x08021bac

08004fc4 <SetRTCTime>:

int SetRTCTime( int argc, char** argv )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
	uint8_t hr  = (uint8_t)strtol(argv[1], NULL, 10);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	220a      	movs	r2, #10
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f019 f8e1 	bl	801e1a0 <strtol>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	73fb      	strb	r3, [r7, #15]
	uint8_t min = (uint8_t)strtol(argv[2], NULL, 10);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	220a      	movs	r2, #10
 8004fea:	2100      	movs	r1, #0
 8004fec:	4618      	mov	r0, r3
 8004fee:	f019 f8d7 	bl	801e1a0 <strtol>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	73bb      	strb	r3, [r7, #14]
	uint8_t sec = (uint8_t)strtol(argv[3], NULL, 10);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	220a      	movs	r2, #10
 8004ffe:	2100      	movs	r1, #0
 8005000:	4618      	mov	r0, r3
 8005002:	f019 f8cd 	bl	801e1a0 <strtol>
 8005006:	4603      	mov	r3, r0
 8005008:	737b      	strb	r3, [r7, #13]
	Set_Time( hr, min, sec);
 800500a:	7b7a      	ldrb	r2, [r7, #13]
 800500c:	7bb9      	ldrb	r1, [r7, #14]
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	4618      	mov	r0, r3
 8005012:	f001 fa1d 	bl	8006450 <Set_Time>
	return 0;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <SetRTCDate>:

int SetRTCDate( int argc, char** argv )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
	uint8_t day   = (uint8_t)strtol(argv[1], NULL, 10);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	3304      	adds	r3, #4
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	220a      	movs	r2, #10
 8005032:	2100      	movs	r1, #0
 8005034:	4618      	mov	r0, r3
 8005036:	f019 f8b3 	bl	801e1a0 <strtol>
 800503a:	4603      	mov	r3, r0
 800503c:	73fb      	strb	r3, [r7, #15]
	uint8_t month = (uint8_t)strtol(argv[2], NULL, 10);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	3308      	adds	r3, #8
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	220a      	movs	r2, #10
 8005046:	2100      	movs	r1, #0
 8005048:	4618      	mov	r0, r3
 800504a:	f019 f8a9 	bl	801e1a0 <strtol>
 800504e:	4603      	mov	r3, r0
 8005050:	73bb      	strb	r3, [r7, #14]
	uint8_t date  = (uint8_t)strtol(argv[3], NULL, 10);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	330c      	adds	r3, #12
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	220a      	movs	r2, #10
 800505a:	2100      	movs	r1, #0
 800505c:	4618      	mov	r0, r3
 800505e:	f019 f89f 	bl	801e1a0 <strtol>
 8005062:	4603      	mov	r3, r0
 8005064:	737b      	strb	r3, [r7, #13]
	uint8_t year  = (uint8_t)strtol(argv[4], NULL, 10);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	3310      	adds	r3, #16
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	220a      	movs	r2, #10
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f019 f895 	bl	801e1a0 <strtol>
 8005076:	4603      	mov	r3, r0
 8005078:	733b      	strb	r3, [r7, #12]
	Set_Date( day, month, date, year);
 800507a:	7b3b      	ldrb	r3, [r7, #12]
 800507c:	7b7a      	ldrb	r2, [r7, #13]
 800507e:	7bb9      	ldrb	r1, [r7, #14]
 8005080:	7bf8      	ldrb	r0, [r7, #15]
 8005082:	f001 fa11 	bl	80064a8 <Set_Date>
	return 0;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <DisplayTime>:

int DisplayTime( int argc, char** argv )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
	uint8_t onoff   = (uint8_t)strtol(argv[1], NULL, 10);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	3304      	adds	r3, #4
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	220a      	movs	r2, #10
 80050a2:	2100      	movs	r1, #0
 80050a4:	4618      	mov	r0, r3
 80050a6:	f019 f87b 	bl	801e1a0 <strtol>
 80050aa:	4603      	mov	r3, r0
 80050ac:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <DisplayTime+0x2c>
	{
		gstModel.bDisplayTime = true;
 80050b4:	4b05      	ldr	r3, [pc, #20]	; (80050cc <DisplayTime+0x3c>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	715a      	strb	r2, [r3, #5]
 80050ba:	e002      	b.n	80050c2 <DisplayTime+0x32>
	}
	else
	{
		gstModel.bDisplayTime = false;
 80050bc:	4b03      	ldr	r3, [pc, #12]	; (80050cc <DisplayTime+0x3c>)
 80050be:	2200      	movs	r2, #0
 80050c0:	715a      	strb	r2, [r3, #5]
	}
	return 0;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	20000c60 	.word	0x20000c60

080050d0 <GetAdc1Values>:

int GetAdc1Values( int argc, char** argv )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
	uint16_t numReads = (uint16_t)strtol(argv[1], NULL, 10);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	3304      	adds	r3, #4
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	220a      	movs	r2, #10
 80050e2:	2100      	movs	r1, #0
 80050e4:	4618      	mov	r0, r3
 80050e6:	f019 f85b 	bl	801e1a0 <strtol>
 80050ea:	4603      	mov	r3, r0
 80050ec:	81fb      	strh	r3, [r7, #14]

	if ( numReads > 50000 )
 80050ee:	89fb      	ldrh	r3, [r7, #14]
 80050f0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d905      	bls.n	8005104 <GetAdc1Values+0x34>
	{
		UartPrintf( "Print Count Limit of 50000 \r\n" );
 80050f8:	4807      	ldr	r0, [pc, #28]	; (8005118 <GetAdc1Values+0x48>)
 80050fa:	f000 fe11 	bl	8005d20 <UartPrintf>
		return -1;
 80050fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005102:	e004      	b.n	800510e <GetAdc1Values+0x3e>
	}

	PrintAdc1ChannelsSpecifiedNumberOfTimes( numReads );
 8005104:	89fb      	ldrh	r3, [r7, #14]
 8005106:	4618      	mov	r0, r3
 8005108:	f7fc fb1a 	bl	8001740 <PrintAdc1ChannelsSpecifiedNumberOfTimes>

    return 0;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	08021bc4 	.word	0x08021bc4

0800511c <GetAdc3Values>:

int GetAdc3Values( int argc, char** argv )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
	uint16_t numReads = (uint16_t)strtol(argv[1], NULL, 10);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	3304      	adds	r3, #4
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	220a      	movs	r2, #10
 800512e:	2100      	movs	r1, #0
 8005130:	4618      	mov	r0, r3
 8005132:	f019 f835 	bl	801e1a0 <strtol>
 8005136:	4603      	mov	r3, r0
 8005138:	81fb      	strh	r3, [r7, #14]

	if ( numReads > 50000 )
 800513a:	89fb      	ldrh	r3, [r7, #14]
 800513c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005140:	4293      	cmp	r3, r2
 8005142:	d905      	bls.n	8005150 <GetAdc3Values+0x34>
	{
		UartPrintf( "Print Count Limit of 50000 \r\n" );
 8005144:	4807      	ldr	r0, [pc, #28]	; (8005164 <GetAdc3Values+0x48>)
 8005146:	f000 fdeb 	bl	8005d20 <UartPrintf>
		return -1;
 800514a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800514e:	e004      	b.n	800515a <GetAdc3Values+0x3e>
	}

	PrintAdc3ChannelsSpecifiedNumberOfTimes( numReads );
 8005150:	89fb      	ldrh	r3, [r7, #14]
 8005152:	4618      	mov	r0, r3
 8005154:	f7fc fc70 	bl	8001a38 <PrintAdc3ChannelsSpecifiedNumberOfTimes>

    return 0;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	08021bc4 	.word	0x08021bc4

08005168 <GetAdc1OneTime>:

int GetAdc1OneTime( int argc, char** argv )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
	PrintAdc1Channels( );
 8005172:	f7fc fa53 	bl	800161c <PrintAdc1Channels>

    return 0;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <GetAdc3OneTime>:

int GetAdc3OneTime( int argc, char** argv )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
	PrintAdc3Channels( );
 800518a:	f7fc fbb5 	bl	80018f8 <PrintAdc3Channels>

    return 0;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <ValveControl>:

int ValveControl( int argc, char** argv )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
	uint8_t valvenumber;
	bool status;

	if ( !strcmp(argv[2], "1") )
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	3308      	adds	r3, #8
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4923      	ldr	r1, [pc, #140]	; (8005238 <ValveControl+0xa0>)
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fb f838 	bl	8000220 <strcmp>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <ValveControl+0x22>
	{
		status = true;
 80051b6:	2301      	movs	r3, #1
 80051b8:	73fb      	strb	r3, [r7, #15]
	}

	if ( !strcmp(argv[2], "0") )
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	3308      	adds	r3, #8
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	491e      	ldr	r1, [pc, #120]	; (800523c <ValveControl+0xa4>)
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fb f82c 	bl	8000220 <strcmp>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <ValveControl+0x3a>
	{
		status = false;
 80051ce:	2300      	movs	r3, #0
 80051d0:	73fb      	strb	r3, [r7, #15]
	}

	valvenumber = atoi( (const char*)argv[1] );
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	3304      	adds	r3, #4
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4618      	mov	r0, r3
 80051da:	f017 faa1 	bl	801c720 <atoi>
 80051de:	4603      	mov	r3, r0
 80051e0:	73bb      	strb	r3, [r7, #14]

	int istatus = atoi( (const char*)argv[2] );
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	3308      	adds	r3, #8
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f017 fa99 	bl	801c720 <atoi>
 80051ee:	60b8      	str	r0, [r7, #8]

	if ( valvenumber > 8 )
 80051f0:	7bbb      	ldrb	r3, [r7, #14]
 80051f2:	2b08      	cmp	r3, #8
 80051f4:	d905      	bls.n	8005202 <ValveControl+0x6a>
	{
		UartPrintf( "Valve Number must be < 8\n" );
 80051f6:	4812      	ldr	r0, [pc, #72]	; (8005240 <ValveControl+0xa8>)
 80051f8:	f000 fd92 	bl	8005d20 <UartPrintf>
		return -1;
 80051fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005200:	e015      	b.n	800522e <ValveControl+0x96>
	}

	if ( istatus > 1 )
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b01      	cmp	r3, #1
 8005206:	dd05      	ble.n	8005214 <ValveControl+0x7c>
	{
		UartPrintf( "Valve Enable Param must be 1 to enable or 0 to disable \n" );
 8005208:	480e      	ldr	r0, [pc, #56]	; (8005244 <ValveControl+0xac>)
 800520a:	f000 fd89 	bl	8005d20 <UartPrintf>
		return -1;
 800520e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005212:	e00c      	b.n	800522e <ValveControl+0x96>
	}

	valve_control(valvenumber, status);
 8005214:	7bfa      	ldrb	r2, [r7, #15]
 8005216:	7bbb      	ldrb	r3, [r7, #14]
 8005218:	4611      	mov	r1, r2
 800521a:	4618      	mov	r0, r3
 800521c:	f7fd fe00 	bl	8002e20 <valve_control>
	UartPrintf("Valve %d Control Status %d\n", valvenumber, status);
 8005220:	7bbb      	ldrb	r3, [r7, #14]
 8005222:	7bfa      	ldrb	r2, [r7, #15]
 8005224:	4619      	mov	r1, r3
 8005226:	4808      	ldr	r0, [pc, #32]	; (8005248 <ValveControl+0xb0>)
 8005228:	f000 fd7a 	bl	8005d20 <UartPrintf>
	return 0;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	08021be4 	.word	0x08021be4
 800523c:	08021be8 	.word	0x08021be8
 8005240:	08021bec 	.word	0x08021bec
 8005244:	08021c08 	.word	0x08021c08
 8005248:	08021c44 	.word	0x08021c44

0800524c <SetFanOnOff>:

int SetFanOnOff( int argc, char** argv )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
	uint8_t onoff = (uint16_t)strtol(argv[1], NULL, 10);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	3304      	adds	r3, #4
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	220a      	movs	r2, #10
 800525e:	2100      	movs	r1, #0
 8005260:	4618      	mov	r0, r3
 8005262:	f018 ff9d 	bl	801e1a0 <strtol>
 8005266:	4603      	mov	r3, r0
 8005268:	73fb      	strb	r3, [r7, #15]

	FanOnOff( onoff );
 800526a:	7bfb      	ldrb	r3, [r7, #15]
 800526c:	4618      	mov	r0, r3
 800526e:	f7fe f891 	bl	8003394 <FanOnOff>

	return 0;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <StopDebugPrinting>:

int StopDebugPrinting( int argc, char** argv )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
	uint8_t onoff = (uint16_t)strtol(argv[1], NULL, 10);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	3304      	adds	r3, #4
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	220a      	movs	r2, #10
 800528e:	2100      	movs	r1, #0
 8005290:	4618      	mov	r0, r3
 8005292:	f018 ff85 	bl	801e1a0 <strtol>
 8005296:	4603      	mov	r3, r0
 8005298:	73fb      	strb	r3, [r7, #15]

	bStopDebugPrint = onoff;
 800529a:	7bfb      	ldrb	r3, [r7, #15]
 800529c:	2b00      	cmp	r3, #0
 800529e:	bf14      	ite	ne
 80052a0:	2301      	movne	r3, #1
 80052a2:	2300      	moveq	r3, #0
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	4b03      	ldr	r3, [pc, #12]	; (80052b4 <StopDebugPrinting+0x38>)
 80052a8:	701a      	strb	r2, [r3, #0]

	return 0;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	20001ce6 	.word	0x20001ce6

080052b8 <BatLedControl>:

int BatLedControl( int argc, char** argv )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
	uint8_t ledbat;
	bool status;

	if ( !strcmp(argv[2], "1") )
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	3308      	adds	r3, #8
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	491e      	ldr	r1, [pc, #120]	; (8005344 <BatLedControl+0x8c>)
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fa ffa8 	bl	8000220 <strcmp>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <BatLedControl+0x22>
	{
		status = true;
 80052d6:	2301      	movs	r3, #1
 80052d8:	73fb      	strb	r3, [r7, #15]
	}
	if ( !strcmp(argv[2], "0") )
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	3308      	adds	r3, #8
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4919      	ldr	r1, [pc, #100]	; (8005348 <BatLedControl+0x90>)
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fa ff9c 	bl	8000220 <strcmp>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <BatLedControl+0x3a>
	{
		status = false;
 80052ee:	2300      	movs	r3, #0
 80052f0:	73fb      	strb	r3, [r7, #15]
	}

	ledbat = atoi( (const char*)argv[1] );
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	3304      	adds	r3, #4
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f017 fa11 	bl	801c720 <atoi>
 80052fe:	4603      	mov	r3, r0
 8005300:	73bb      	strb	r3, [r7, #14]

	int istatus = atoi( (const char*)argv[2] );
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	3308      	adds	r3, #8
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4618      	mov	r0, r3
 800530a:	f017 fa09 	bl	801c720 <atoi>
 800530e:	60b8      	str	r0, [r7, #8]

	if ( istatus > 1 )
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2b01      	cmp	r3, #1
 8005314:	dd05      	ble.n	8005322 <BatLedControl+0x6a>
	{
		UartPrintf( "Battery LED Enable Param must be 1 to turn on or 0 to turn off \n" );
 8005316:	480d      	ldr	r0, [pc, #52]	; (800534c <BatLedControl+0x94>)
 8005318:	f000 fd02 	bl	8005d20 <UartPrintf>
		return -1;
 800531c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005320:	e00c      	b.n	800533c <BatLedControl+0x84>
	}

	batleds_control(ledbat, status);
 8005322:	7bfa      	ldrb	r2, [r7, #15]
 8005324:	7bbb      	ldrb	r3, [r7, #14]
 8005326:	4611      	mov	r1, r2
 8005328:	4618      	mov	r0, r3
 800532a:	f7fd fe9d 	bl	8003068 <batleds_control>

	UartPrintf("Led Battery %d Control Status %d\n", ledbat, status);
 800532e:	7bbb      	ldrb	r3, [r7, #14]
 8005330:	7bfa      	ldrb	r2, [r7, #15]
 8005332:	4619      	mov	r1, r3
 8005334:	4806      	ldr	r0, [pc, #24]	; (8005350 <BatLedControl+0x98>)
 8005336:	f000 fcf3 	bl	8005d20 <UartPrintf>
	return 0;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	08021be4 	.word	0x08021be4
 8005348:	08021be8 	.word	0x08021be8
 800534c:	08021c60 	.word	0x08021c60
 8005350:	08021ca4 	.word	0x08021ca4

08005354 <LedAlarmControl>:


int LedAlarmControl ( int argc, char** argv )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
	uint8_t alarmled;
	bool status;

	if ( !strcmp(argv[2], "1") )
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	3308      	adds	r3, #8
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	491e      	ldr	r1, [pc, #120]	; (80053e0 <LedAlarmControl+0x8c>)
 8005366:	4618      	mov	r0, r3
 8005368:	f7fa ff5a 	bl	8000220 <strcmp>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <LedAlarmControl+0x22>
	{
		status = true;
 8005372:	2301      	movs	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
	}
	if ( !strcmp(argv[2], "0") )
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	3308      	adds	r3, #8
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4919      	ldr	r1, [pc, #100]	; (80053e4 <LedAlarmControl+0x90>)
 800537e:	4618      	mov	r0, r3
 8005380:	f7fa ff4e 	bl	8000220 <strcmp>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <LedAlarmControl+0x3a>
	{
		status = false;
 800538a:	2300      	movs	r3, #0
 800538c:	73fb      	strb	r3, [r7, #15]
	}

	alarmled = atoi( (const char*)argv[1] );
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	3304      	adds	r3, #4
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4618      	mov	r0, r3
 8005396:	f017 f9c3 	bl	801c720 <atoi>
 800539a:	4603      	mov	r3, r0
 800539c:	73bb      	strb	r3, [r7, #14]

	int istatus = atoi( (const char*)argv[2] );
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	3308      	adds	r3, #8
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f017 f9bb 	bl	801c720 <atoi>
 80053aa:	60b8      	str	r0, [r7, #8]

	if ( istatus > 1 )
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	dd05      	ble.n	80053be <LedAlarmControl+0x6a>
	{
		UartPrintf( "Alarm LED Enable Param must be 1 to turn on or 0 to turn off \n" );
 80053b2:	480d      	ldr	r0, [pc, #52]	; (80053e8 <LedAlarmControl+0x94>)
 80053b4:	f000 fcb4 	bl	8005d20 <UartPrintf>
		return -1;
 80053b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053bc:	e00c      	b.n	80053d8 <LedAlarmControl+0x84>
	}

	alarmleds_control(alarmled, status);
 80053be:	7bfa      	ldrb	r2, [r7, #15]
 80053c0:	7bbb      	ldrb	r3, [r7, #14]
 80053c2:	4611      	mov	r1, r2
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fd fe8d 	bl	80030e4 <alarmleds_control>

	UartPrintf("Alarm Led %d Control Status %d\n", alarmled, status);
 80053ca:	7bbb      	ldrb	r3, [r7, #14]
 80053cc:	7bfa      	ldrb	r2, [r7, #15]
 80053ce:	4619      	mov	r1, r3
 80053d0:	4806      	ldr	r0, [pc, #24]	; (80053ec <LedAlarmControl+0x98>)
 80053d2:	f000 fca5 	bl	8005d20 <UartPrintf>
	return 0;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	08021be4 	.word	0x08021be4
 80053e4:	08021be8 	.word	0x08021be8
 80053e8:	08021cc8 	.word	0x08021cc8
 80053ec:	08021d08 	.word	0x08021d08

080053f0 <CompressorControl>:


int CompressorControl( int argc, char** argv )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
	uint8_t compressorEn;

	compressorEn = atoi( (const char*)argv[1] );
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	3304      	adds	r3, #4
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4618      	mov	r0, r3
 8005402:	f017 f98d 	bl	801c720 <atoi>
 8005406:	4603      	mov	r3, r0
 8005408:	73fb      	strb	r3, [r7, #15]
	if ( compressorEn > 1 )
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d905      	bls.n	800541c <CompressorControl+0x2c>
	{
		UartPrintf( "Compressor Enable Param must be 1 to enable or 0 to disable \n" );
 8005410:	480c      	ldr	r0, [pc, #48]	; (8005444 <CompressorControl+0x54>)
 8005412:	f000 fc85 	bl	8005d20 <UartPrintf>
		return -1;
 8005416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800541a:	e00e      	b.n	800543a <CompressorControl+0x4a>
	}
	compressor_control(compressorEn);
 800541c:	7bfb      	ldrb	r3, [r7, #15]
 800541e:	2b00      	cmp	r3, #0
 8005420:	bf14      	ite	ne
 8005422:	2301      	movne	r3, #1
 8005424:	2300      	moveq	r3, #0
 8005426:	b2db      	uxtb	r3, r3
 8005428:	4618      	mov	r0, r3
 800542a:	f7fd fe8b 	bl	8003144 <compressor_control>
	UartPrintf( "Compressor Power set to %d\n", compressorEn );
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	4619      	mov	r1, r3
 8005432:	4805      	ldr	r0, [pc, #20]	; (8005448 <CompressorControl+0x58>)
 8005434:	f000 fc74 	bl	8005d20 <UartPrintf>
	return 0;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	08021d28 	.word	0x08021d28
 8005448:	08021d68 	.word	0x08021d68

0800544c <MembranePSControl>:

int MembranePSControl( int argc, char** argv )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
	uint8_t membranepsEn;

	membranepsEn = atoi( (const char*)argv[1] );
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	3304      	adds	r3, #4
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f017 f95f 	bl	801c720 <atoi>
 8005462:	4603      	mov	r3, r0
 8005464:	73fb      	strb	r3, [r7, #15]
	if ( membranepsEn > 1 )
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d905      	bls.n	8005478 <MembranePSControl+0x2c>
	{
		UartPrintf( "Membrane PS Enable Param must be 1 to enable or 0 to disable \n" );
 800546c:	480c      	ldr	r0, [pc, #48]	; (80054a0 <MembranePSControl+0x54>)
 800546e:	f000 fc57 	bl	8005d20 <UartPrintf>
		return -1;
 8005472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005476:	e00e      	b.n	8005496 <MembranePSControl+0x4a>
	}

	MembranePS_control(membranepsEn);
 8005478:	7bfb      	ldrb	r3, [r7, #15]
 800547a:	2b00      	cmp	r3, #0
 800547c:	bf14      	ite	ne
 800547e:	2301      	movne	r3, #1
 8005480:	2300      	moveq	r3, #0
 8005482:	b2db      	uxtb	r3, r3
 8005484:	4618      	mov	r0, r3
 8005486:	f7fd fe87 	bl	8003198 <MembranePS_control>
	UartPrintf( "Membrane Power Supply set to %d\n", membranepsEn );
 800548a:	7bfb      	ldrb	r3, [r7, #15]
 800548c:	4619      	mov	r1, r3
 800548e:	4805      	ldr	r0, [pc, #20]	; (80054a4 <MembranePSControl+0x58>)
 8005490:	f000 fc46 	bl	8005d20 <UartPrintf>
	return 0;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	08021d84 	.word	0x08021d84
 80054a4:	08021dc4 	.word	0x08021dc4

080054a8 <DisplayPSControl>:

int DisplayPSControl( int argc, char** argv )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
	uint8_t displaypsEn;

	displaypsEn = atoi( (const char*)argv[1] );
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	3304      	adds	r3, #4
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f017 f931 	bl	801c720 <atoi>
 80054be:	4603      	mov	r3, r0
 80054c0:	73fb      	strb	r3, [r7, #15]
	if ( displaypsEn > 1 )
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d905      	bls.n	80054d4 <DisplayPSControl+0x2c>
	{
		UartPrintf( "Display Power Control Param must be 1 to enable or 0 to disable \n" );
 80054c8:	480c      	ldr	r0, [pc, #48]	; (80054fc <DisplayPSControl+0x54>)
 80054ca:	f000 fc29 	bl	8005d20 <UartPrintf>
		return -1;
 80054ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054d2:	e00e      	b.n	80054f2 <DisplayPSControl+0x4a>
	}

	displayPS_control(displaypsEn);
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	bf14      	ite	ne
 80054da:	2301      	movne	r3, #1
 80054dc:	2300      	moveq	r3, #0
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7fd fe6b 	bl	80031bc <displayPS_control>
	UartPrintf( "Display Power Control set to %d\n", displaypsEn );
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	4619      	mov	r1, r3
 80054ea:	4805      	ldr	r0, [pc, #20]	; (8005500 <DisplayPSControl+0x58>)
 80054ec:	f000 fc18 	bl	8005d20 <UartPrintf>
	return 0;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	08021de8 	.word	0x08021de8
 8005500:	08021e2c 	.word	0x08021e2c

08005504 <SyncOutControl>:


int SyncOutControl ( int argc, char** argv )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
	uint8_t syncOutEn;

		syncOutEn = atoi( (const char*)argv[1] );
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	3304      	adds	r3, #4
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	f017 f903 	bl	801c720 <atoi>
 800551a:	4603      	mov	r3, r0
 800551c:	73fb      	strb	r3, [r7, #15]
		if ( syncOutEn > 1 )
 800551e:	7bfb      	ldrb	r3, [r7, #15]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d905      	bls.n	8005530 <SyncOutControl+0x2c>
		{
			UartPrintf( "Synch Output Enable Param must be 1 to enable or 0 to disable \n" );
 8005524:	480c      	ldr	r0, [pc, #48]	; (8005558 <SyncOutControl+0x54>)
 8005526:	f000 fbfb 	bl	8005d20 <UartPrintf>
			return -1;
 800552a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800552e:	e00e      	b.n	800554e <SyncOutControl+0x4a>
		}

		SynchOut(syncOutEn);
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	2b00      	cmp	r3, #0
 8005534:	bf14      	ite	ne
 8005536:	2301      	movne	r3, #1
 8005538:	2300      	moveq	r3, #0
 800553a:	b2db      	uxtb	r3, r3
 800553c:	4618      	mov	r0, r3
 800553e:	f7fd fc5d 	bl	8002dfc <SynchOut>
		UartPrintf("Sync Output Control Status %d\n", syncOutEn);
 8005542:	7bfb      	ldrb	r3, [r7, #15]
 8005544:	4619      	mov	r1, r3
 8005546:	4805      	ldr	r0, [pc, #20]	; (800555c <SyncOutControl+0x58>)
 8005548:	f000 fbea 	bl	8005d20 <UartPrintf>
		return 0;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	08021e50 	.word	0x08021e50
 800555c:	08021e90 	.word	0x08021e90

08005560 <pcbpowerrelayControl>:

int pcbpowerrelayControl( int argc, char** argv )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
	uint8_t powerpcbEn;

	powerpcbEn = atoi( (const char*)argv[1] );
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	3304      	adds	r3, #4
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f017 f8d5 	bl	801c720 <atoi>
 8005576:	4603      	mov	r3, r0
 8005578:	73fb      	strb	r3, [r7, #15]
	if ( powerpcbEn > 1 )
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d905      	bls.n	800558c <pcbpowerrelayControl+0x2c>
	{
		UartPrintf( "Power PCB Relay Enable Param must be 1 to enable or 0 to disable \n" );
 8005580:	480c      	ldr	r0, [pc, #48]	; (80055b4 <pcbpowerrelayControl+0x54>)
 8005582:	f000 fbcd 	bl	8005d20 <UartPrintf>
		return -1;
 8005586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800558a:	e00e      	b.n	80055aa <pcbpowerrelayControl+0x4a>
	}

	powerpcb_control(powerpcbEn);
 800558c:	7bfb      	ldrb	r3, [r7, #15]
 800558e:	2b00      	cmp	r3, #0
 8005590:	bf14      	ite	ne
 8005592:	2301      	movne	r3, #1
 8005594:	2300      	moveq	r3, #0
 8005596:	b2db      	uxtb	r3, r3
 8005598:	4618      	mov	r0, r3
 800559a:	f7fd fe21 	bl	80031e0 <powerpcb_control>
	UartPrintf("Power PCB Relay Control Status %d\n", powerpcbEn);
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	4619      	mov	r1, r3
 80055a2:	4805      	ldr	r0, [pc, #20]	; (80055b8 <pcbpowerrelayControl+0x58>)
 80055a4:	f000 fbbc 	bl	8005d20 <UartPrintf>
	return 0;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	08021eb0 	.word	0x08021eb0
 80055b8:	08021ef4 	.word	0x08021ef4

080055bc <pfControl>:
	return 0;
}


int pfControl( int argc, char** argv )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
	uint8_t pfEn;

	pfEn = atoi( (const char*)argv[1] );
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	3304      	adds	r3, #4
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f017 f8a7 	bl	801c720 <atoi>
 80055d2:	4603      	mov	r3, r0
 80055d4:	73fb      	strb	r3, [r7, #15]
	if ( pfEn> 1 )
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d905      	bls.n	80055e8 <pfControl+0x2c>
	{
		UartPrintf( "Power Factor Module Enable Param must be 1 to enable or 0 to disable \n" );
 80055dc:	480c      	ldr	r0, [pc, #48]	; (8005610 <pfControl+0x54>)
 80055de:	f000 fb9f 	bl	8005d20 <UartPrintf>
		return -1;
 80055e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055e6:	e00e      	b.n	8005606 <pfControl+0x4a>
	}

	PF_control(pfEn);
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	bf14      	ite	ne
 80055ee:	2301      	movne	r3, #1
 80055f0:	2300      	moveq	r3, #0
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fd fe05 	bl	8003204 <PF_control>
	UartPrintf("Power Factor Module Enable Status is %d\n", pfEn);
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
 80055fc:	4619      	mov	r1, r3
 80055fe:	4805      	ldr	r0, [pc, #20]	; (8005614 <pfControl+0x58>)
 8005600:	f000 fb8e 	bl	8005d20 <UartPrintf>
	return 0;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	08021f78 	.word	0x08021f78
 8005614:	08021fc0 	.word	0x08021fc0

08005618 <wdiControl>:


int wdiControl( int argc, char** argv )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
	uint8_t status;

	status = atoi( (const char*)argv[1] );
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	3304      	adds	r3, #4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4618      	mov	r0, r3
 800562a:	f017 f879 	bl	801c720 <atoi>
 800562e:	4603      	mov	r3, r0
 8005630:	73fb      	strb	r3, [r7, #15]
	if ( status > 1 )
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d905      	bls.n	8005644 <wdiControl+0x2c>
	{
		UartPrintf( "Watchdog Timer Input Param must be 1 to enable or 0 to disable \n" );
 8005638:	480b      	ldr	r0, [pc, #44]	; (8005668 <wdiControl+0x50>)
 800563a:	f000 fb71 	bl	8005d20 <UartPrintf>
		return -1;
 800563e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005642:	e00d      	b.n	8005660 <wdiControl+0x48>
	}

	wdi_flag = status;
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	2b00      	cmp	r3, #0
 8005648:	bf14      	ite	ne
 800564a:	2301      	movne	r3, #1
 800564c:	2300      	moveq	r3, #0
 800564e:	b2da      	uxtb	r2, r3
 8005650:	4b06      	ldr	r3, [pc, #24]	; (800566c <wdiControl+0x54>)
 8005652:	701a      	strb	r2, [r3, #0]
	UartPrintf("Watchdog Timer Input set to %d\n", status);
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	4619      	mov	r1, r3
 8005658:	4805      	ldr	r0, [pc, #20]	; (8005670 <wdiControl+0x58>)
 800565a:	f000 fb61 	bl	8005d20 <UartPrintf>
	return 0;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	08021fec 	.word	0x08021fec
 800566c:	2000710f 	.word	0x2000710f
 8005670:	08022030 	.word	0x08022030

08005674 <pfcRlyControl>:

int pfcRlyControl( int argc, char** argv )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
	uint8_t pfcRlyEn;

	pfcRlyEn = atoi( (const char*)argv[1] );
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	3304      	adds	r3, #4
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4618      	mov	r0, r3
 8005686:	f017 f84b 	bl	801c720 <atoi>
 800568a:	4603      	mov	r3, r0
 800568c:	73fb      	strb	r3, [r7, #15]
	if ( pfcRlyEn > 1 )
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d905      	bls.n	80056a0 <pfcRlyControl+0x2c>
	{
		UartPrintf( "Power Factor Relay Enable Param must be 1 to enable or 0 to disable \n" );
 8005694:	480c      	ldr	r0, [pc, #48]	; (80056c8 <pfcRlyControl+0x54>)
 8005696:	f000 fb43 	bl	8005d20 <UartPrintf>
		return -1;
 800569a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800569e:	e00e      	b.n	80056be <pfcRlyControl+0x4a>
	}

	PFC_RLY_control(pfcRlyEn);
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	bf14      	ite	ne
 80056a6:	2301      	movne	r3, #1
 80056a8:	2300      	moveq	r3, #0
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fd fdbb 	bl	8003228 <PFC_RLY_control>
	UartPrintf("Power Factor Relay Enable Status is %d\n", pfcRlyEn);
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	4619      	mov	r1, r3
 80056b6:	4805      	ldr	r0, [pc, #20]	; (80056cc <pfcRlyControl+0x58>)
 80056b8:	f000 fb32 	bl	8005d20 <UartPrintf>
	return 0;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	08022050 	.word	0x08022050
 80056cc:	08022098 	.word	0x08022098

080056d0 <BlowerSpeedCtrl>:


int BlowerSpeedCtrl ( int argc, char** argv )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
	uint16_t speed;

	speed = atoi( argv[1] );   //speed = atoi( (const char*)argv[1] );
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	3304      	adds	r3, #4
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f017 f81d 	bl	801c720 <atoi>
 80056e6:	4603      	mov	r3, r0
 80056e8:	81fb      	strh	r3, [r7, #14]
	if ( speed > 4095 )
 80056ea:	89fb      	ldrh	r3, [r7, #14]
 80056ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f0:	d305      	bcc.n	80056fe <BlowerSpeedCtrl+0x2e>
	{
		UartPrintf( "Blower max speed Param must be less than 4096\n" );
 80056f2:	480a      	ldr	r0, [pc, #40]	; (800571c <BlowerSpeedCtrl+0x4c>)
 80056f4:	f000 fb14 	bl	8005d20 <UartPrintf>
		return -1;
 80056f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056fc:	e009      	b.n	8005712 <BlowerSpeedCtrl+0x42>
	}
	UartPrintf("Blower Speed Control will be set to  %u\n", speed);
 80056fe:	89fb      	ldrh	r3, [r7, #14]
 8005700:	4619      	mov	r1, r3
 8005702:	4807      	ldr	r0, [pc, #28]	; (8005720 <BlowerSpeedCtrl+0x50>)
 8005704:	f000 fb0c 	bl	8005d20 <UartPrintf>
	BlowerDAC(speed);
 8005708:	89fb      	ldrh	r3, [r7, #14]
 800570a:	4618      	mov	r0, r3
 800570c:	f7fd fd9e 	bl	800324c <BlowerDAC>

	return 0;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	080220c0 	.word	0x080220c0
 8005720:	080220f0 	.word	0x080220f0

08005724 <BlowerCtrl>:

int BlowerCtrl ( int argc, char** argv )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
	uint16_t dacval;

	dacval = atoi( (const char*)argv[1] );
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	3304      	adds	r3, #4
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4618      	mov	r0, r3
 8005736:	f016 fff3 	bl	801c720 <atoi>
 800573a:	4603      	mov	r3, r0
 800573c:	81fb      	strh	r3, [r7, #14]
	if ( dacval > 4095 )
 800573e:	89fb      	ldrh	r3, [r7, #14]
 8005740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005744:	d305      	bcc.n	8005752 <BlowerCtrl+0x2e>
	{
		UartPrintf( "Blower DAC Value must be 0 to 4095\n" );
 8005746:	480a      	ldr	r0, [pc, #40]	; (8005770 <BlowerCtrl+0x4c>)
 8005748:	f000 faea 	bl	8005d20 <UartPrintf>
		return -1;
 800574c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005750:	e009      	b.n	8005766 <BlowerCtrl+0x42>
	}

	BlowerControl(dacval);
 8005752:	89fb      	ldrh	r3, [r7, #14]
 8005754:	4618      	mov	r0, r3
 8005756:	f7fd fd8b 	bl	8003270 <BlowerControl>
	UartPrintf("Blower Control Status set to %d\n", dacval);
 800575a:	89fb      	ldrh	r3, [r7, #14]
 800575c:	4619      	mov	r1, r3
 800575e:	4805      	ldr	r0, [pc, #20]	; (8005774 <BlowerCtrl+0x50>)
 8005760:	f000 fade 	bl	8005d20 <UartPrintf>
	return 0;
 8005764:	2300      	movs	r3, #0

}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	0802211c 	.word	0x0802211c
 8005774:	08022140 	.word	0x08022140

08005778 <Bloweroff>:

int Bloweroff ( int argc, char** argv )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
	BlowerOff();
 8005782:	f7fd fdcb 	bl	800331c <BlowerOff>
	return 0;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <CprtseqON>:

int CprtseqON ( int argc, char** argv )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
	cprtPowerOnSequence();
 800579a:	f7fd fe33 	bl	8003404 <cprtPowerOnSequence>
	return 0;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <CprtseqOFF>:

int CprtseqOFF ( int argc, char** argv )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
	cprtPowerOffSequence();
 80057b2:	f7fd fee7 	bl	8003584 <cprtPowerOffSequence>
	return 0;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <RegisterAllCommands>:


void RegisterAllCommands()
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
    InterpRegister( "initlog",         InitLog,            1, 1 );
 80057c4:	2301      	movs	r3, #1
 80057c6:	2201      	movs	r2, #1
 80057c8:	4976      	ldr	r1, [pc, #472]	; (80059a4 <RegisterAllCommands+0x1e4>)
 80057ca:	4877      	ldr	r0, [pc, #476]	; (80059a8 <RegisterAllCommands+0x1e8>)
 80057cc:	f7ff f8ce 	bl	800496c <InterpRegister>
    InterpRegister( "setmfgdate",      SetMfgDate,         2, 2 );
 80057d0:	2302      	movs	r3, #2
 80057d2:	2202      	movs	r2, #2
 80057d4:	4975      	ldr	r1, [pc, #468]	; (80059ac <RegisterAllCommands+0x1ec>)
 80057d6:	4876      	ldr	r0, [pc, #472]	; (80059b0 <RegisterAllCommands+0x1f0>)
 80057d8:	f7ff f8c8 	bl	800496c <InterpRegister>
    InterpRegister( "getmfgdate",      GetMfgDate,         1, 1 );
 80057dc:	2301      	movs	r3, #1
 80057de:	2201      	movs	r2, #1
 80057e0:	4974      	ldr	r1, [pc, #464]	; (80059b4 <RegisterAllCommands+0x1f4>)
 80057e2:	4875      	ldr	r0, [pc, #468]	; (80059b8 <RegisterAllCommands+0x1f8>)
 80057e4:	f7ff f8c2 	bl	800496c <InterpRegister>
    InterpRegister( "setserialnum",    SetSerialNum,       2, 2 );
 80057e8:	2302      	movs	r3, #2
 80057ea:	2202      	movs	r2, #2
 80057ec:	4973      	ldr	r1, [pc, #460]	; (80059bc <RegisterAllCommands+0x1fc>)
 80057ee:	4874      	ldr	r0, [pc, #464]	; (80059c0 <RegisterAllCommands+0x200>)
 80057f0:	f7ff f8bc 	bl	800496c <InterpRegister>
    InterpRegister( "getserialnum",    GetSerialNum,       1, 1 );
 80057f4:	2301      	movs	r3, #1
 80057f6:	2201      	movs	r2, #1
 80057f8:	4972      	ldr	r1, [pc, #456]	; (80059c4 <RegisterAllCommands+0x204>)
 80057fa:	4873      	ldr	r0, [pc, #460]	; (80059c8 <RegisterAllCommands+0x208>)
 80057fc:	f7ff f8b6 	bl	800496c <InterpRegister>
    InterpRegister( "ledallblk",       SetAllLedBlink,     1, 1 );
 8005800:	2301      	movs	r3, #1
 8005802:	2201      	movs	r2, #1
 8005804:	4971      	ldr	r1, [pc, #452]	; (80059cc <RegisterAllCommands+0x20c>)
 8005806:	4872      	ldr	r0, [pc, #456]	; (80059d0 <RegisterAllCommands+0x210>)
 8005808:	f7ff f8b0 	bl	800496c <InterpRegister>
    InterpRegister( "ledallon",        SetAllLedOn,        1, 1 );
 800580c:	2301      	movs	r3, #1
 800580e:	2201      	movs	r2, #1
 8005810:	4970      	ldr	r1, [pc, #448]	; (80059d4 <RegisterAllCommands+0x214>)
 8005812:	4871      	ldr	r0, [pc, #452]	; (80059d8 <RegisterAllCommands+0x218>)
 8005814:	f7ff f8aa 	bl	800496c <InterpRegister>
    InterpRegister( "ledalloff",       SetAllLedOff,       1, 1 );
 8005818:	2301      	movs	r3, #1
 800581a:	2201      	movs	r2, #1
 800581c:	496f      	ldr	r1, [pc, #444]	; (80059dc <RegisterAllCommands+0x21c>)
 800581e:	4870      	ldr	r0, [pc, #448]	; (80059e0 <RegisterAllCommands+0x220>)
 8005820:	f7ff f8a4 	bl	800496c <InterpRegister>

    InterpRegister( "alarmmed",        SetMediumAlarm,     1, 1 );
 8005824:	2301      	movs	r3, #1
 8005826:	2201      	movs	r2, #1
 8005828:	496e      	ldr	r1, [pc, #440]	; (80059e4 <RegisterAllCommands+0x224>)
 800582a:	486f      	ldr	r0, [pc, #444]	; (80059e8 <RegisterAllCommands+0x228>)
 800582c:	f7ff f89e 	bl	800496c <InterpRegister>
    InterpRegister( "alarmhigh",       SetHightAlarm,      1, 1 );
 8005830:	2301      	movs	r3, #1
 8005832:	2201      	movs	r2, #1
 8005834:	496d      	ldr	r1, [pc, #436]	; (80059ec <RegisterAllCommands+0x22c>)
 8005836:	486e      	ldr	r0, [pc, #440]	; (80059f0 <RegisterAllCommands+0x230>)
 8005838:	f7ff f898 	bl	800496c <InterpRegister>
    InterpRegister( "alarmoff",        SetAlarmOff,        1, 1 );
 800583c:	2301      	movs	r3, #1
 800583e:	2201      	movs	r2, #1
 8005840:	496c      	ldr	r1, [pc, #432]	; (80059f4 <RegisterAllCommands+0x234>)
 8005842:	486d      	ldr	r0, [pc, #436]	; (80059f8 <RegisterAllCommands+0x238>)
 8005844:	f7ff f892 	bl	800496c <InterpRegister>

    InterpRegister( "setdac",         SetDacOutput,        2, 2 );
 8005848:	2302      	movs	r3, #2
 800584a:	2202      	movs	r2, #2
 800584c:	496b      	ldr	r1, [pc, #428]	; (80059fc <RegisterAllCommands+0x23c>)
 800584e:	486c      	ldr	r0, [pc, #432]	; (8005a00 <RegisterAllCommands+0x240>)
 8005850:	f7ff f88c 	bl	800496c <InterpRegister>
    InterpRegister( "getdac",         GetDacOutput,        1, 1 );
 8005854:	2301      	movs	r3, #1
 8005856:	2201      	movs	r2, #1
 8005858:	496a      	ldr	r1, [pc, #424]	; (8005a04 <RegisterAllCommands+0x244>)
 800585a:	486b      	ldr	r0, [pc, #428]	; (8005a08 <RegisterAllCommands+0x248>)
 800585c:	f7ff f886 	bl	800496c <InterpRegister>

    InterpRegister( "settime",         SetRTCTime,          4, 4 );
 8005860:	2304      	movs	r3, #4
 8005862:	2204      	movs	r2, #4
 8005864:	4969      	ldr	r1, [pc, #420]	; (8005a0c <RegisterAllCommands+0x24c>)
 8005866:	486a      	ldr	r0, [pc, #424]	; (8005a10 <RegisterAllCommands+0x250>)
 8005868:	f7ff f880 	bl	800496c <InterpRegister>
    InterpRegister( "setdate",         SetRTCDate,          5, 5 );
 800586c:	2305      	movs	r3, #5
 800586e:	2205      	movs	r2, #5
 8005870:	4968      	ldr	r1, [pc, #416]	; (8005a14 <RegisterAllCommands+0x254>)
 8005872:	4869      	ldr	r0, [pc, #420]	; (8005a18 <RegisterAllCommands+0x258>)
 8005874:	f7ff f87a 	bl	800496c <InterpRegister>

    InterpRegister( "disptime",        DisplayTime,         2, 2 );
 8005878:	2302      	movs	r3, #2
 800587a:	2202      	movs	r2, #2
 800587c:	4967      	ldr	r1, [pc, #412]	; (8005a1c <RegisterAllCommands+0x25c>)
 800587e:	4868      	ldr	r0, [pc, #416]	; (8005a20 <RegisterAllCommands+0x260>)
 8005880:	f7ff f874 	bl	800496c <InterpRegister>
    InterpRegister( "getadc1",         GetAdc1Values,       2, 2 );
 8005884:	2302      	movs	r3, #2
 8005886:	2202      	movs	r2, #2
 8005888:	4966      	ldr	r1, [pc, #408]	; (8005a24 <RegisterAllCommands+0x264>)
 800588a:	4867      	ldr	r0, [pc, #412]	; (8005a28 <RegisterAllCommands+0x268>)
 800588c:	f7ff f86e 	bl	800496c <InterpRegister>
    InterpRegister( "getadc3",         GetAdc3Values,       2, 2 );
 8005890:	2302      	movs	r3, #2
 8005892:	2202      	movs	r2, #2
 8005894:	4965      	ldr	r1, [pc, #404]	; (8005a2c <RegisterAllCommands+0x26c>)
 8005896:	4866      	ldr	r0, [pc, #408]	; (8005a30 <RegisterAllCommands+0x270>)
 8005898:	f7ff f868 	bl	800496c <InterpRegister>
    InterpRegister( "adc1",            GetAdc1OneTime,      1, 1 );
 800589c:	2301      	movs	r3, #1
 800589e:	2201      	movs	r2, #1
 80058a0:	4964      	ldr	r1, [pc, #400]	; (8005a34 <RegisterAllCommands+0x274>)
 80058a2:	4865      	ldr	r0, [pc, #404]	; (8005a38 <RegisterAllCommands+0x278>)
 80058a4:	f7ff f862 	bl	800496c <InterpRegister>
    InterpRegister( "adc3",            GetAdc3OneTime,      1, 1 );
 80058a8:	2301      	movs	r3, #1
 80058aa:	2201      	movs	r2, #1
 80058ac:	4963      	ldr	r1, [pc, #396]	; (8005a3c <RegisterAllCommands+0x27c>)
 80058ae:	4864      	ldr	r0, [pc, #400]	; (8005a40 <RegisterAllCommands+0x280>)
 80058b0:	f7ff f85c 	bl	800496c <InterpRegister>
    InterpRegister( "setfan",         SetFanOnOff,          2, 2 );
 80058b4:	2302      	movs	r3, #2
 80058b6:	2202      	movs	r2, #2
 80058b8:	4962      	ldr	r1, [pc, #392]	; (8005a44 <RegisterAllCommands+0x284>)
 80058ba:	4863      	ldr	r0, [pc, #396]	; (8005a48 <RegisterAllCommands+0x288>)
 80058bc:	f7ff f856 	bl	800496c <InterpRegister>
    InterpRegister( "setprt",  	  	  SetPMprints,          2, 3 );
 80058c0:	2303      	movs	r3, #3
 80058c2:	2202      	movs	r2, #2
 80058c4:	4961      	ldr	r1, [pc, #388]	; (8005a4c <RegisterAllCommands+0x28c>)
 80058c6:	4862      	ldr	r0, [pc, #392]	; (8005a50 <RegisterAllCommands+0x290>)
 80058c8:	f7ff f850 	bl	800496c <InterpRegister>

    //commands from Cprtfunctions code
    InterpRegister( "valvectrl",      ValveControl,           3, 3 );
 80058cc:	2303      	movs	r3, #3
 80058ce:	2203      	movs	r2, #3
 80058d0:	4960      	ldr	r1, [pc, #384]	; (8005a54 <RegisterAllCommands+0x294>)
 80058d2:	4861      	ldr	r0, [pc, #388]	; (8005a58 <RegisterAllCommands+0x298>)
 80058d4:	f7ff f84a 	bl	800496c <InterpRegister>
	InterpRegister( "ledbatctrl",     BatLedControl,          3, 3 );
 80058d8:	2303      	movs	r3, #3
 80058da:	2203      	movs	r2, #3
 80058dc:	495f      	ldr	r1, [pc, #380]	; (8005a5c <RegisterAllCommands+0x29c>)
 80058de:	4860      	ldr	r0, [pc, #384]	; (8005a60 <RegisterAllCommands+0x2a0>)
 80058e0:	f7ff f844 	bl	800496c <InterpRegister>
	InterpRegister( "ledalarmctrl",   LedAlarmControl,        3, 3 );
 80058e4:	2303      	movs	r3, #3
 80058e6:	2203      	movs	r2, #3
 80058e8:	495e      	ldr	r1, [pc, #376]	; (8005a64 <RegisterAllCommands+0x2a4>)
 80058ea:	485f      	ldr	r0, [pc, #380]	; (8005a68 <RegisterAllCommands+0x2a8>)
 80058ec:	f7ff f83e 	bl	800496c <InterpRegister>
	InterpRegister( "compressorctrl", CompressorControl,      2, 2 );
 80058f0:	2302      	movs	r3, #2
 80058f2:	2202      	movs	r2, #2
 80058f4:	495d      	ldr	r1, [pc, #372]	; (8005a6c <RegisterAllCommands+0x2ac>)
 80058f6:	485e      	ldr	r0, [pc, #376]	; (8005a70 <RegisterAllCommands+0x2b0>)
 80058f8:	f7ff f838 	bl	800496c <InterpRegister>
	InterpRegister( "membranepsctrl", MembranePSControl,      2, 2 );
 80058fc:	2302      	movs	r3, #2
 80058fe:	2202      	movs	r2, #2
 8005900:	495c      	ldr	r1, [pc, #368]	; (8005a74 <RegisterAllCommands+0x2b4>)
 8005902:	485d      	ldr	r0, [pc, #372]	; (8005a78 <RegisterAllCommands+0x2b8>)
 8005904:	f7ff f832 	bl	800496c <InterpRegister>
	InterpRegister( "displaypsctrl",  DisplayPSControl,       2, 2 );
 8005908:	2302      	movs	r3, #2
 800590a:	2202      	movs	r2, #2
 800590c:	495b      	ldr	r1, [pc, #364]	; (8005a7c <RegisterAllCommands+0x2bc>)
 800590e:	485c      	ldr	r0, [pc, #368]	; (8005a80 <RegisterAllCommands+0x2c0>)
 8005910:	f7ff f82c 	bl	800496c <InterpRegister>
	InterpRegister( "syncoutctrl",    SyncOutControl,         2, 2 );
 8005914:	2302      	movs	r3, #2
 8005916:	2202      	movs	r2, #2
 8005918:	495a      	ldr	r1, [pc, #360]	; (8005a84 <RegisterAllCommands+0x2c4>)
 800591a:	485b      	ldr	r0, [pc, #364]	; (8005a88 <RegisterAllCommands+0x2c8>)
 800591c:	f7ff f826 	bl	800496c <InterpRegister>
	InterpRegister( "powerpcbctrl",   pcbpowerrelayControl,   2, 2 );
 8005920:	2302      	movs	r3, #2
 8005922:	2202      	movs	r2, #2
 8005924:	4959      	ldr	r1, [pc, #356]	; (8005a8c <RegisterAllCommands+0x2cc>)
 8005926:	485a      	ldr	r0, [pc, #360]	; (8005a90 <RegisterAllCommands+0x2d0>)
 8005928:	f7ff f820 	bl	800496c <InterpRegister>
	InterpRegister( "pfctrl",   	  pfControl,              2, 2 );
 800592c:	2302      	movs	r3, #2
 800592e:	2202      	movs	r2, #2
 8005930:	4958      	ldr	r1, [pc, #352]	; (8005a94 <RegisterAllCommands+0x2d4>)
 8005932:	4859      	ldr	r0, [pc, #356]	; (8005a98 <RegisterAllCommands+0x2d8>)
 8005934:	f7ff f81a 	bl	800496c <InterpRegister>
	InterpRegister( "wdictrl",   	  wdiControl,             2, 2 );
 8005938:	2302      	movs	r3, #2
 800593a:	2202      	movs	r2, #2
 800593c:	4957      	ldr	r1, [pc, #348]	; (8005a9c <RegisterAllCommands+0x2dc>)
 800593e:	4858      	ldr	r0, [pc, #352]	; (8005aa0 <RegisterAllCommands+0x2e0>)
 8005940:	f7ff f814 	bl	800496c <InterpRegister>
	InterpRegister( "pfcrlyctrl",  	  pfcRlyControl,          2, 2 );
 8005944:	2302      	movs	r3, #2
 8005946:	2202      	movs	r2, #2
 8005948:	4956      	ldr	r1, [pc, #344]	; (8005aa4 <RegisterAllCommands+0x2e4>)
 800594a:	4857      	ldr	r0, [pc, #348]	; (8005aa8 <RegisterAllCommands+0x2e8>)
 800594c:	f7ff f80e 	bl	800496c <InterpRegister>
	InterpRegister( "blowerspeed",    BlowerSpeedCtrl,        2, 2 );
 8005950:	2302      	movs	r3, #2
 8005952:	2202      	movs	r2, #2
 8005954:	4955      	ldr	r1, [pc, #340]	; (8005aac <RegisterAllCommands+0x2ec>)
 8005956:	4856      	ldr	r0, [pc, #344]	; (8005ab0 <RegisterAllCommands+0x2f0>)
 8005958:	f7ff f808 	bl	800496c <InterpRegister>
	InterpRegister( "blowerctrl",     BlowerCtrl,             2, 2 );
 800595c:	2302      	movs	r3, #2
 800595e:	2202      	movs	r2, #2
 8005960:	4954      	ldr	r1, [pc, #336]	; (8005ab4 <RegisterAllCommands+0x2f4>)
 8005962:	4855      	ldr	r0, [pc, #340]	; (8005ab8 <RegisterAllCommands+0x2f8>)
 8005964:	f7ff f802 	bl	800496c <InterpRegister>
	InterpRegister( "bloweroff",      Bloweroff,              1, 1 );
 8005968:	2301      	movs	r3, #1
 800596a:	2201      	movs	r2, #1
 800596c:	4953      	ldr	r1, [pc, #332]	; (8005abc <RegisterAllCommands+0x2fc>)
 800596e:	4854      	ldr	r0, [pc, #336]	; (8005ac0 <RegisterAllCommands+0x300>)
 8005970:	f7fe fffc 	bl	800496c <InterpRegister>
	InterpRegister( "cprtseqon", 	  CprtseqON,			  1, 1 );
 8005974:	2301      	movs	r3, #1
 8005976:	2201      	movs	r2, #1
 8005978:	4952      	ldr	r1, [pc, #328]	; (8005ac4 <RegisterAllCommands+0x304>)
 800597a:	4853      	ldr	r0, [pc, #332]	; (8005ac8 <RegisterAllCommands+0x308>)
 800597c:	f7fe fff6 	bl	800496c <InterpRegister>
	InterpRegister( "cprtseqoff", 	  CprtseqOFF,			  1, 1 );
 8005980:	2301      	movs	r3, #1
 8005982:	2201      	movs	r2, #1
 8005984:	4951      	ldr	r1, [pc, #324]	; (8005acc <RegisterAllCommands+0x30c>)
 8005986:	4852      	ldr	r0, [pc, #328]	; (8005ad0 <RegisterAllCommands+0x310>)
 8005988:	f7fe fff0 	bl	800496c <InterpRegister>
	InterpRegister( "stopdbgprt",     StopDebugPrinting,      2, 2 );
 800598c:	2302      	movs	r3, #2
 800598e:	2202      	movs	r2, #2
 8005990:	4950      	ldr	r1, [pc, #320]	; (8005ad4 <RegisterAllCommands+0x314>)
 8005992:	4851      	ldr	r0, [pc, #324]	; (8005ad8 <RegisterAllCommands+0x318>)
 8005994:	f7fe ffea 	bl	800496c <InterpRegister>

    UartPrintf("All Interpreter Commands Registered\n");
 8005998:	4850      	ldr	r0, [pc, #320]	; (8005adc <RegisterAllCommands+0x31c>)
 800599a:	f000 f9c1 	bl	8005d20 <UartPrintf>
}
 800599e:	bf00      	nop
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	08004dc9 	.word	0x08004dc9
 80059a8:	08022164 	.word	0x08022164
 80059ac:	08004e05 	.word	0x08004e05
 80059b0:	0802216c 	.word	0x0802216c
 80059b4:	08004ded 	.word	0x08004ded
 80059b8:	08022178 	.word	0x08022178
 80059bc:	08004e51 	.word	0x08004e51
 80059c0:	08022184 	.word	0x08022184
 80059c4:	08004e39 	.word	0x08004e39
 80059c8:	08022194 	.word	0x08022194
 80059cc:	08004d45 	.word	0x08004d45
 80059d0:	080221a4 	.word	0x080221a4
 80059d4:	08004d71 	.word	0x08004d71
 80059d8:	080221b0 	.word	0x080221b0
 80059dc:	08004d9d 	.word	0x08004d9d
 80059e0:	080221bc 	.word	0x080221bc
 80059e4:	08004e89 	.word	0x08004e89
 80059e8:	080221c8 	.word	0x080221c8
 80059ec:	08004ebd 	.word	0x08004ebd
 80059f0:	080221d4 	.word	0x080221d4
 80059f4:	08004ef1 	.word	0x08004ef1
 80059f8:	080221e0 	.word	0x080221e0
 80059fc:	08004f21 	.word	0x08004f21
 8005a00:	080221ec 	.word	0x080221ec
 8005a04:	08004fa1 	.word	0x08004fa1
 8005a08:	080221f4 	.word	0x080221f4
 8005a0c:	08004fc5 	.word	0x08004fc5
 8005a10:	080221fc 	.word	0x080221fc
 8005a14:	08005021 	.word	0x08005021
 8005a18:	08022204 	.word	0x08022204
 8005a1c:	08005091 	.word	0x08005091
 8005a20:	0802220c 	.word	0x0802220c
 8005a24:	080050d1 	.word	0x080050d1
 8005a28:	08022218 	.word	0x08022218
 8005a2c:	0800511d 	.word	0x0800511d
 8005a30:	08022220 	.word	0x08022220
 8005a34:	08005169 	.word	0x08005169
 8005a38:	08022228 	.word	0x08022228
 8005a3c:	08005181 	.word	0x08005181
 8005a40:	08022230 	.word	0x08022230
 8005a44:	0800524d 	.word	0x0800524d
 8005a48:	08022238 	.word	0x08022238
 8005a4c:	08004c95 	.word	0x08004c95
 8005a50:	08022240 	.word	0x08022240
 8005a54:	08005199 	.word	0x08005199
 8005a58:	08022248 	.word	0x08022248
 8005a5c:	080052b9 	.word	0x080052b9
 8005a60:	08022254 	.word	0x08022254
 8005a64:	08005355 	.word	0x08005355
 8005a68:	08022260 	.word	0x08022260
 8005a6c:	080053f1 	.word	0x080053f1
 8005a70:	08022270 	.word	0x08022270
 8005a74:	0800544d 	.word	0x0800544d
 8005a78:	08022280 	.word	0x08022280
 8005a7c:	080054a9 	.word	0x080054a9
 8005a80:	08022290 	.word	0x08022290
 8005a84:	08005505 	.word	0x08005505
 8005a88:	080222a0 	.word	0x080222a0
 8005a8c:	08005561 	.word	0x08005561
 8005a90:	080222ac 	.word	0x080222ac
 8005a94:	080055bd 	.word	0x080055bd
 8005a98:	080222bc 	.word	0x080222bc
 8005a9c:	08005619 	.word	0x08005619
 8005aa0:	080222c4 	.word	0x080222c4
 8005aa4:	08005675 	.word	0x08005675
 8005aa8:	080222cc 	.word	0x080222cc
 8005aac:	080056d1 	.word	0x080056d1
 8005ab0:	080222d8 	.word	0x080222d8
 8005ab4:	08005725 	.word	0x08005725
 8005ab8:	080222e4 	.word	0x080222e4
 8005abc:	08005779 	.word	0x08005779
 8005ac0:	080222f0 	.word	0x080222f0
 8005ac4:	08005791 	.word	0x08005791
 8005ac8:	080222fc 	.word	0x080222fc
 8005acc:	080057a9 	.word	0x080057a9
 8005ad0:	08022308 	.word	0x08022308
 8005ad4:	0800527d 	.word	0x0800527d
 8005ad8:	08022314 	.word	0x08022314
 8005adc:	08022320 	.word	0x08022320

08005ae0 <InitUartTxQueue>:
 * Parameters:  None
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void InitUartTxQueue()
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
	uartTxQueueReadIndex = 0;
 8005ae4:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <InitUartTxQueue+0x20>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	801a      	strh	r2, [r3, #0]
	uartTxQueueWriteIndex = 0;
 8005aea:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <InitUartTxQueue+0x24>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	801a      	strh	r2, [r3, #0]
	memset(&uartTxQueue[0], 0, UART_TX_QUEUE_SIZE * UART_TX_QUEUE_MAX_MSG_SIZE);
 8005af0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005af4:	2100      	movs	r1, #0
 8005af6:	4804      	ldr	r0, [pc, #16]	; (8005b08 <InitUartTxQueue+0x28>)
 8005af8:	f016 fe5e 	bl	801c7b8 <memset>
}
 8005afc:	bf00      	nop
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	20003cf4 	.word	0x20003cf4
 8005b04:	20003cf6 	.word	0x20003cf6
 8005b08:	20001cf4 	.word	0x20001cf4

08005b0c <IsTxUartQueueEmpty>:
 * Parameters:  None
 *
 * Returns:     true if empty, false if not empty
 *---------------------------------------------------------------------------*/
bool IsTxUartQueueEmpty( )
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
	int16_t queueIndexDiff = uartTxQueueWriteIndex - uartTxQueueReadIndex;
 8005b12:	4b14      	ldr	r3, [pc, #80]	; (8005b64 <IsTxUartQueueEmpty+0x58>)
 8005b14:	881a      	ldrh	r2, [r3, #0]
 8005b16:	4b14      	ldr	r3, [pc, #80]	; (8005b68 <IsTxUartQueueEmpty+0x5c>)
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	80fb      	strh	r3, [r7, #6]
	curTxUartQueueDepth = queueIndexDiff;
 8005b20:	88fa      	ldrh	r2, [r7, #6]
 8005b22:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <IsTxUartQueueEmpty+0x60>)
 8005b24:	801a      	strh	r2, [r3, #0]

	if( queueIndexDiff == 0 )
 8005b26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <IsTxUartQueueEmpty+0x26>
	{
		// Tx UART queue is empty
		return true;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e011      	b.n	8005b56 <IsTxUartQueueEmpty+0x4a>
	}

	if( queueIndexDiff < 0 )
 8005b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	da03      	bge.n	8005b42 <IsTxUartQueueEmpty+0x36>
	{
		queueIndexDiff += UART_TX_QUEUE_SIZE;
 8005b3a:	88fb      	ldrh	r3, [r7, #6]
 8005b3c:	3320      	adds	r3, #32
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	80fb      	strh	r3, [r7, #6]
	}

	// Keep track of maximum Tx UART queue depth
	if( queueIndexDiff > maxTxUartQueueDepth )
 8005b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b46:	4a0a      	ldr	r2, [pc, #40]	; (8005b70 <IsTxUartQueueEmpty+0x64>)
 8005b48:	8812      	ldrh	r2, [r2, #0]
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	dd02      	ble.n	8005b54 <IsTxUartQueueEmpty+0x48>
	{
		maxTxUartQueueDepth = queueIndexDiff;
 8005b4e:	88fa      	ldrh	r2, [r7, #6]
 8005b50:	4b07      	ldr	r3, [pc, #28]	; (8005b70 <IsTxUartQueueEmpty+0x64>)
 8005b52:	801a      	strh	r2, [r3, #0]
	}

	// Tx UART queue is not empty
	return false;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	20003cf6 	.word	0x20003cf6
 8005b68:	20003cf4 	.word	0x20003cf4
 8005b6c:	20003ffe 	.word	0x20003ffe
 8005b70:	20003ffc 	.word	0x20003ffc

08005b74 <IsTxUartQueueFull>:
 * Parameters:  None
 *
 * Returns:     true if full, false if not full
 *---------------------------------------------------------------------------*/
bool IsTxUartQueueFull( )
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
	int16_t queueIndexDiff = uartTxQueueWriteIndex - uartTxQueueReadIndex;
 8005b7a:	4b0e      	ldr	r3, [pc, #56]	; (8005bb4 <IsTxUartQueueFull+0x40>)
 8005b7c:	881a      	ldrh	r2, [r3, #0]
 8005b7e:	4b0e      	ldr	r3, [pc, #56]	; (8005bb8 <IsTxUartQueueFull+0x44>)
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	80fb      	strh	r3, [r7, #6]

	if( queueIndexDiff < 0 )
 8005b88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	da03      	bge.n	8005b98 <IsTxUartQueueFull+0x24>
    {
		queueIndexDiff += UART_TX_QUEUE_SIZE;
 8005b90:	88fb      	ldrh	r3, [r7, #6]
 8005b92:	3320      	adds	r3, #32
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	80fb      	strh	r3, [r7, #6]
	}

	if( queueIndexDiff == (UART_TX_QUEUE_SIZE - 1) )
 8005b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b9c:	2b1f      	cmp	r3, #31
 8005b9e:	d101      	bne.n	8005ba4 <IsTxUartQueueFull+0x30>
	{
		// Tx UART queue is full
		return true;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <IsTxUartQueueFull+0x32>
	}

	// Tx UART queue is not full
	return false;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	20003cf6 	.word	0x20003cf6
 8005bb8:	20003cf4 	.word	0x20003cf4

08005bbc <ReadTxUartQueueAndTransmit>:
 * Parameters:  None
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void ReadTxUartQueueAndTransmit()
{
 8005bbc:	b598      	push	{r3, r4, r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
	if( IsTxUartQueueEmpty() != false )
 8005bc0:	f7ff ffa4 	bl	8005b0c <IsTxUartQueueEmpty>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d145      	bne.n	8005c56 <ReadTxUartQueueAndTransmit+0x9a>
		// Tx UART queue is empty, nothing to read and transmit
		return;
	}

	// Read data from Tx UART queue into buffer
	sprintf((char*)txUartBuf, (char *)&uartTxQueue[uartTxQueueReadIndex]);
 8005bca:	4b24      	ldr	r3, [pc, #144]	; (8005c5c <ReadTxUartQueueAndTransmit+0xa0>)
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	021b      	lsls	r3, r3, #8
 8005bd0:	4a23      	ldr	r2, [pc, #140]	; (8005c60 <ReadTxUartQueueAndTransmit+0xa4>)
 8005bd2:	4413      	add	r3, r2
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4823      	ldr	r0, [pc, #140]	; (8005c64 <ReadTxUartQueueAndTransmit+0xa8>)
 8005bd8:	f017 fb84 	bl	801d2e4 <siprintf>

	// Transmit buffer data from Tx UART queue to UART via IT
	if( HAL_UART_Transmit_IT(&debugUart, txUartBuf, strlen((char *)txUartBuf) ) != HAL_OK )
 8005bdc:	4821      	ldr	r0, [pc, #132]	; (8005c64 <ReadTxUartQueueAndTransmit+0xa8>)
 8005bde:	f7fa fb29 	bl	8000234 <strlen>
 8005be2:	4603      	mov	r3, r0
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	461a      	mov	r2, r3
 8005be8:	491e      	ldr	r1, [pc, #120]	; (8005c64 <ReadTxUartQueueAndTransmit+0xa8>)
 8005bea:	481f      	ldr	r0, [pc, #124]	; (8005c68 <ReadTxUartQueueAndTransmit+0xac>)
 8005bec:	f00c fd24 	bl	8012638 <HAL_UART_Transmit_IT>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00e      	beq.n	8005c14 <ReadTxUartQueueAndTransmit+0x58>
	{
		sprintf((char*)txUartBuf, "UART Transmit ERROR in ReadTxUartQueueAndTransmit\n");
 8005bf6:	491d      	ldr	r1, [pc, #116]	; (8005c6c <ReadTxUartQueueAndTransmit+0xb0>)
 8005bf8:	481a      	ldr	r0, [pc, #104]	; (8005c64 <ReadTxUartQueueAndTransmit+0xa8>)
 8005bfa:	f017 fb73 	bl	801d2e4 <siprintf>
		HAL_UART_Transmit(&debugUart, txUartBuf, strlen((char*)txUartBuf), 0x200);
 8005bfe:	4819      	ldr	r0, [pc, #100]	; (8005c64 <ReadTxUartQueueAndTransmit+0xa8>)
 8005c00:	f7fa fb18 	bl	8000234 <strlen>
 8005c04:	4603      	mov	r3, r0
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c0c:	4915      	ldr	r1, [pc, #84]	; (8005c64 <ReadTxUartQueueAndTransmit+0xa8>)
 8005c0e:	4816      	ldr	r0, [pc, #88]	; (8005c68 <ReadTxUartQueueAndTransmit+0xac>)
 8005c10:	f00c fc7e 	bl	8012510 <HAL_UART_Transmit>
	}

	// Clear read queue location
	memset(&uartTxQueue[uartTxQueueReadIndex], 0, strlen((char *)&uartTxQueue[uartTxQueueReadIndex]));
 8005c14:	4b11      	ldr	r3, [pc, #68]	; (8005c5c <ReadTxUartQueueAndTransmit+0xa0>)
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	021b      	lsls	r3, r3, #8
 8005c1a:	4a11      	ldr	r2, [pc, #68]	; (8005c60 <ReadTxUartQueueAndTransmit+0xa4>)
 8005c1c:	189c      	adds	r4, r3, r2
 8005c1e:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <ReadTxUartQueueAndTransmit+0xa0>)
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	4a0e      	ldr	r2, [pc, #56]	; (8005c60 <ReadTxUartQueueAndTransmit+0xa4>)
 8005c26:	4413      	add	r3, r2
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fa fb03 	bl	8000234 <strlen>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	461a      	mov	r2, r3
 8005c32:	2100      	movs	r1, #0
 8005c34:	4620      	mov	r0, r4
 8005c36:	f016 fdbf 	bl	801c7b8 <memset>

	// Increment Tx UART queue read index
	uartTxQueueReadIndex++;
 8005c3a:	4b08      	ldr	r3, [pc, #32]	; (8005c5c <ReadTxUartQueueAndTransmit+0xa0>)
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <ReadTxUartQueueAndTransmit+0xa0>)
 8005c44:	801a      	strh	r2, [r3, #0]
	if( uartTxQueueReadIndex >= UART_TX_QUEUE_SIZE )
 8005c46:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <ReadTxUartQueueAndTransmit+0xa0>)
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	2b1f      	cmp	r3, #31
 8005c4c:	d904      	bls.n	8005c58 <ReadTxUartQueueAndTransmit+0x9c>
	{
		// Read index was at maximum, set to 0
		uartTxQueueReadIndex =  0;
 8005c4e:	4b03      	ldr	r3, [pc, #12]	; (8005c5c <ReadTxUartQueueAndTransmit+0xa0>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	801a      	strh	r2, [r3, #0]
 8005c54:	e000      	b.n	8005c58 <ReadTxUartQueueAndTransmit+0x9c>
		return;
 8005c56:	bf00      	nop
	}
}
 8005c58:	bd98      	pop	{r3, r4, r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	20003cf4 	.word	0x20003cf4
 8005c60:	20001cf4 	.word	0x20001cf4
 8005c64:	20003df8 	.word	0x20003df8
 8005c68:	20004704 	.word	0x20004704
 8005c6c:	08022348 	.word	0x08022348

08005c70 <WriteTxUartQueue>:
 * Parameters:  buffer - pointer to data to be written to Tx UART queue
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void WriteTxUartQueue(uint8_t * buffer )
{
 8005c70:	b590      	push	{r4, r7, lr}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
	uint32_t startWaitTimeMs = GetTimeMs();
 8005c78:	f000 f94a 	bl	8005f10 <GetTimeMs>
 8005c7c:	60f8      	str	r0, [r7, #12]

	while( IsTxUartQueueFull() != false )
 8005c7e:	e01e      	b.n	8005cbe <WriteTxUartQueue+0x4e>
	{
		// Wait for Tx UART queue not to be full
		uint32_t waitTimeMs = DiffTimeFromStartTimeMs( startWaitTimeMs );
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 f957 	bl	8005f34 <DiffTimeFromStartTimeMs>
 8005c86:	60b8      	str	r0, [r7, #8]
		if ( waitTimeMs > 20 ) // 20 ms
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b14      	cmp	r3, #20
 8005c8c:	d90f      	bls.n	8005cae <WriteTxUartQueue+0x3e>
		{
			sprintf((char*)txUartErrorBuf, "UART Tx queue full for 20 ms\r\n");
 8005c8e:	491e      	ldr	r1, [pc, #120]	; (8005d08 <WriteTxUartQueue+0x98>)
 8005c90:	481e      	ldr	r0, [pc, #120]	; (8005d0c <WriteTxUartQueue+0x9c>)
 8005c92:	f017 fb27 	bl	801d2e4 <siprintf>
			HAL_UART_Transmit(&debugUart, txUartErrorBuf, strlen((char*)txUartErrorBuf), 0x200);
 8005c96:	481d      	ldr	r0, [pc, #116]	; (8005d0c <WriteTxUartQueue+0x9c>)
 8005c98:	f7fa facc 	bl	8000234 <strlen>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ca4:	4919      	ldr	r1, [pc, #100]	; (8005d0c <WriteTxUartQueue+0x9c>)
 8005ca6:	481a      	ldr	r0, [pc, #104]	; (8005d10 <WriteTxUartQueue+0xa0>)
 8005ca8:	f00c fc32 	bl	8012510 <HAL_UART_Transmit>
			return; // Wait too long for Tx UART queue not to be full
 8005cac:	e028      	b.n	8005d00 <WriteTxUartQueue+0x90>
		}

		// Keep track of max wait time for Tx UART Queue not to be full
		if( waitTimeMs > maxUartTxQueueWaitTimeMs )
 8005cae:	4b19      	ldr	r3, [pc, #100]	; (8005d14 <WriteTxUartQueue+0xa4>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d902      	bls.n	8005cbe <WriteTxUartQueue+0x4e>
		{
			maxUartTxQueueWaitTimeMs = waitTimeMs;
 8005cb8:	4a16      	ldr	r2, [pc, #88]	; (8005d14 <WriteTxUartQueue+0xa4>)
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	6013      	str	r3, [r2, #0]
	while( IsTxUartQueueFull() != false )
 8005cbe:	f7ff ff59 	bl	8005b74 <IsTxUartQueueFull>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1db      	bne.n	8005c80 <WriteTxUartQueue+0x10>
		}
	}

	// Write buffer data to Tx UART queue
	strncpy((char *)&uartTxQueue[uartTxQueueWriteIndex], (char *)buffer, strlen((char *)buffer));
 8005cc8:	4b13      	ldr	r3, [pc, #76]	; (8005d18 <WriteTxUartQueue+0xa8>)
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	4a13      	ldr	r2, [pc, #76]	; (8005d1c <WriteTxUartQueue+0xac>)
 8005cd0:	189c      	adds	r4, r3, r2
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fa faae 	bl	8000234 <strlen>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	461a      	mov	r2, r3
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f017 fb48 	bl	801d374 <strncpy>

	// Increment UART Tx queue write index
	uartTxQueueWriteIndex++;
 8005ce4:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <WriteTxUartQueue+0xa8>)
 8005ce6:	881b      	ldrh	r3, [r3, #0]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	4b0a      	ldr	r3, [pc, #40]	; (8005d18 <WriteTxUartQueue+0xa8>)
 8005cee:	801a      	strh	r2, [r3, #0]
	if( uartTxQueueWriteIndex >= UART_TX_QUEUE_SIZE )
 8005cf0:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <WriteTxUartQueue+0xa8>)
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	2b1f      	cmp	r3, #31
 8005cf6:	d902      	bls.n	8005cfe <WriteTxUartQueue+0x8e>
	{
		// Write index was at maximum, set to 0
		uartTxQueueWriteIndex =  0;
 8005cf8:	4b07      	ldr	r3, [pc, #28]	; (8005d18 <WriteTxUartQueue+0xa8>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	801a      	strh	r2, [r3, #0]
	}

	return;
 8005cfe:	bf00      	nop
}
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd90      	pop	{r4, r7, pc}
 8005d06:	bf00      	nop
 8005d08:	0802237c 	.word	0x0802237c
 8005d0c:	20003ef8 	.word	0x20003ef8
 8005d10:	20004704 	.word	0x20004704
 8005d14:	20003ff8 	.word	0x20003ff8
 8005d18:	20003cf6 	.word	0x20003cf6
 8005d1c:	20001cf4 	.word	0x20001cf4

08005d20 <UartPrintf>:
 * Parameters:  format - string that contains text to be printed
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void UartPrintf(const char * format, ... )
{
 8005d20:	b40f      	push	{r0, r1, r2, r3}
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
	if( (GetNoAsyncPrintsFlag( ) != false) || (IsStopDebugPring() == true) )
 8005d28:	f7fe fe90 	bl	8004a4c <GetNoAsyncPrintsFlag>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d12c      	bne.n	8005d8c <UartPrintf+0x6c>
 8005d32:	f7fe fe97 	bl	8004a64 <IsStopDebugPring>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d127      	bne.n	8005d8c <UartPrintf+0x6c>

	va_list ap;
	int n;

	// Put print string in buffer
	va_start(ap, format);
 8005d3c:	f107 0314 	add.w	r3, r7, #20
 8005d40:	603b      	str	r3, [r7, #0]
	// Max number of bytes is UART_TX_QUEUE_MAX_MSG_SIZE-2 to allow for append of "$ " prompt
	n = vsnprintf ((char*)printBuf, UART_TX_QUEUE_MAX_MSG_SIZE - 2, format, ap);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	21fe      	movs	r1, #254	; 0xfe
 8005d48:	4815      	ldr	r0, [pc, #84]	; (8005da0 <UartPrintf+0x80>)
 8005d4a:	f018 fa5f 	bl	801e20c <vsniprintf>
 8005d4e:	6078      	str	r0, [r7, #4]
	va_end(ap);

	// Append command prompt to print string
	strcat((char *)printBuf,"$ ");
 8005d50:	4813      	ldr	r0, [pc, #76]	; (8005da0 <UartPrintf+0x80>)
 8005d52:	f7fa fa6f 	bl	8000234 <strlen>
 8005d56:	4603      	mov	r3, r0
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4b11      	ldr	r3, [pc, #68]	; (8005da0 <UartPrintf+0x80>)
 8005d5c:	4413      	add	r3, r2
 8005d5e:	4a11      	ldr	r2, [pc, #68]	; (8005da4 <UartPrintf+0x84>)
 8005d60:	8811      	ldrh	r1, [r2, #0]
 8005d62:	7892      	ldrb	r2, [r2, #2]
 8005d64:	8019      	strh	r1, [r3, #0]
 8005d66:	709a      	strb	r2, [r3, #2]

	if ( n == -1 )
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d6e:	d103      	bne.n	8005d78 <UartPrintf+0x58>
	{
		printBuf[UART_TX_QUEUE_MAX_MSG_SIZE-1] = '\0';
 8005d70:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <UartPrintf+0x80>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
	}

	// Write buffer to Tx UART queue
	WriteTxUartQueue( printBuf );
 8005d78:	4809      	ldr	r0, [pc, #36]	; (8005da0 <UartPrintf+0x80>)
 8005d7a:	f7ff ff79 	bl	8005c70 <WriteTxUartQueue>

	// If UART is ready, read data from TX UART queue and transmit to UART,
	// else return and HAL_UART_TxCpltCallback will call ReadTxUArtQueue
	// after current UART transmission is complete
	if(debugUart.gState == HAL_UART_STATE_READY)
 8005d7e:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <UartPrintf+0x88>)
 8005d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d82:	2b20      	cmp	r3, #32
 8005d84:	d104      	bne.n	8005d90 <UartPrintf+0x70>
	{
		ReadTxUartQueueAndTransmit();
 8005d86:	f7ff ff19 	bl	8005bbc <ReadTxUartQueueAndTransmit>
	}

	return;
 8005d8a:	e001      	b.n	8005d90 <UartPrintf+0x70>
		return;
 8005d8c:	bf00      	nop
 8005d8e:	e000      	b.n	8005d92 <UartPrintf+0x72>
	return;
 8005d90:	bf00      	nop
}
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d9a:	b004      	add	sp, #16
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	20003cf8 	.word	0x20003cf8
 8005da4:	0802239c 	.word	0x0802239c
 8005da8:	20004704 	.word	0x20004704

08005dac <UartPrintfWithoutPrompt>:
 * Parameters:  format - string that contains text to be printed
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void UartPrintfWithoutPrompt(const char * format, ... )
{
 8005dac:	b40f      	push	{r0, r1, r2, r3}
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
	if( GetNoAsyncPrintsFlag( ) != false )
 8005db4:	f7fe fe4a 	bl	8004a4c <GetNoAsyncPrintsFlag>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d11f      	bne.n	8005dfe <UartPrintfWithoutPrompt+0x52>

	va_list ap;
	int n;

	// Put print string in buffer
	va_start(ap, format);
 8005dbe:	f107 0314 	add.w	r3, r7, #20
 8005dc2:	603b      	str	r3, [r7, #0]
	n = vsnprintf ((char*)printBuf, UART_TX_QUEUE_MAX_MSG_SIZE, format, ap);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dcc:	4811      	ldr	r0, [pc, #68]	; (8005e14 <UartPrintfWithoutPrompt+0x68>)
 8005dce:	f018 fa1d 	bl	801e20c <vsniprintf>
 8005dd2:	6078      	str	r0, [r7, #4]
	va_end(ap);

	// If string is empty, nothing to print so return
	if( n == 0 )
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d013      	beq.n	8005e02 <UartPrintfWithoutPrompt+0x56>
	{
		return;
	}

	if ( n == -1 )
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005de0:	d103      	bne.n	8005dea <UartPrintfWithoutPrompt+0x3e>
	{
		printBuf[UART_TX_QUEUE_MAX_MSG_SIZE-1] = '\0';
 8005de2:	4b0c      	ldr	r3, [pc, #48]	; (8005e14 <UartPrintfWithoutPrompt+0x68>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
	}

	// Write buffer to Tx UART queue
	WriteTxUartQueue( printBuf );
 8005dea:	480a      	ldr	r0, [pc, #40]	; (8005e14 <UartPrintfWithoutPrompt+0x68>)
 8005dec:	f7ff ff40 	bl	8005c70 <WriteTxUartQueue>

	// If UART is ready, read data from TX UART queue and transmit to UART,
	// else return and HAL_UART_TxCpltCallback will call ReadTxUArtQueue
	// after current UART transmission is complete
	if(debugUart.gState == HAL_UART_STATE_READY)
 8005df0:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <UartPrintfWithoutPrompt+0x6c>)
 8005df2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d106      	bne.n	8005e06 <UartPrintfWithoutPrompt+0x5a>
	{
		ReadTxUartQueueAndTransmit();
 8005df8:	f7ff fee0 	bl	8005bbc <ReadTxUartQueueAndTransmit>
	}

	return;
 8005dfc:	e003      	b.n	8005e06 <UartPrintfWithoutPrompt+0x5a>
		return;
 8005dfe:	bf00      	nop
 8005e00:	e002      	b.n	8005e08 <UartPrintfWithoutPrompt+0x5c>
		return;
 8005e02:	bf00      	nop
 8005e04:	e000      	b.n	8005e08 <UartPrintfWithoutPrompt+0x5c>
	return;
 8005e06:	bf00      	nop
}
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e10:	b004      	add	sp, #16
 8005e12:	4770      	bx	lr
 8005e14:	20003cf8 	.word	0x20003cf8
 8005e18:	20004704 	.word	0x20004704

08005e1c <GuiUartPrintf>:

void GuiUartPrintf(const char * format, ... )
{
 8005e1c:	b40f      	push	{r0, r1, r2, r3}
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b082      	sub	sp, #8
 8005e22:	af00      	add	r7, sp, #0
	va_list ap;
	int n;

	// Put print string in buffer
	va_start(ap, format);
 8005e24:	f107 0314 	add.w	r3, r7, #20
 8005e28:	603b      	str	r3, [r7, #0]
	n = vsnprintf ((char*)guiPrintBuf, UART_TX_QUEUE_MAX_MSG_SIZE, format, ap);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e32:	481b      	ldr	r0, [pc, #108]	; (8005ea0 <GuiUartPrintf+0x84>)
 8005e34:	f018 f9ea 	bl	801e20c <vsniprintf>
 8005e38:	6078      	str	r0, [r7, #4]
	va_end(ap);

	// If string is empty, nothing to print so return
	if( n == 0 )
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d025      	beq.n	8005e8c <GuiUartPrintf+0x70>
	{
		return;
	}

	if ( n == -1 )
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e46:	d103      	bne.n	8005e50 <GuiUartPrintf+0x34>
	{
		guiPrintBuf[UART_TX_QUEUE_MAX_MSG_SIZE-1] = '\0';
 8005e48:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <GuiUartPrintf+0x84>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
	}

	// If UART is ready transmit to UART,

	if(guiUart.gState == HAL_UART_STATE_READY)
 8005e50:	4b14      	ldr	r3, [pc, #80]	; (8005ea4 <GuiUartPrintf+0x88>)
 8005e52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	d11b      	bne.n	8005e90 <GuiUartPrintf+0x74>
	{
		// Transmit buffer data from Tx UART queue to UART via IT
		if( HAL_UART_Transmit_IT(&guiUart, guiPrintBuf, n ) != HAL_OK )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	4910      	ldr	r1, [pc, #64]	; (8005ea0 <GuiUartPrintf+0x84>)
 8005e60:	4810      	ldr	r0, [pc, #64]	; (8005ea4 <GuiUartPrintf+0x88>)
 8005e62:	f00c fbe9 	bl	8012638 <HAL_UART_Transmit_IT>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d011      	beq.n	8005e90 <GuiUartPrintf+0x74>
		{
			sprintf((char*)guiPrintBuf, "UART Transmit ERROR in ReadTxUartQueueAndTransmit\n");
 8005e6c:	490e      	ldr	r1, [pc, #56]	; (8005ea8 <GuiUartPrintf+0x8c>)
 8005e6e:	480c      	ldr	r0, [pc, #48]	; (8005ea0 <GuiUartPrintf+0x84>)
 8005e70:	f017 fa38 	bl	801d2e4 <siprintf>
			HAL_UART_Transmit(&guiUart, guiPrintBuf, strlen((char*)guiPrintBuf), 0x200);
 8005e74:	480a      	ldr	r0, [pc, #40]	; (8005ea0 <GuiUartPrintf+0x84>)
 8005e76:	f7fa f9dd 	bl	8000234 <strlen>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e82:	4907      	ldr	r1, [pc, #28]	; (8005ea0 <GuiUartPrintf+0x84>)
 8005e84:	4807      	ldr	r0, [pc, #28]	; (8005ea4 <GuiUartPrintf+0x88>)
 8005e86:	f00c fb43 	bl	8012510 <HAL_UART_Transmit>
		}
	}

	return;
 8005e8a:	e001      	b.n	8005e90 <GuiUartPrintf+0x74>
		return;
 8005e8c:	bf00      	nop
 8005e8e:	e000      	b.n	8005e92 <GuiUartPrintf+0x76>
	return;
 8005e90:	bf00      	nop
}
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e9a:	b004      	add	sp, #16
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	20004000 	.word	0x20004000
 8005ea4:	2000480c 	.word	0x2000480c
 8005ea8:	08022348 	.word	0x08022348

08005eac <PmUartPrintfWithoutPrompt>:
 * Parameters:  format - string that contains text to be printed
 *
 * Returns:     None
 *---------------------------------------------------------------------------*/
void PmUartPrintfWithoutPrompt(const char * format, ... )
{
 8005eac:	b40f      	push	{r0, r1, r2, r3}
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
	va_list ap;
	int n;

	// Put print string in buffer
	va_start(ap, format);
 8005eb4:	f107 0314 	add.w	r3, r7, #20
 8005eb8:	603b      	str	r3, [r7, #0]
	n = vsnprintf ((char*)printBuf, UART_TX_QUEUE_MAX_MSG_SIZE, format, ap);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ec2:	4811      	ldr	r0, [pc, #68]	; (8005f08 <PmUartPrintfWithoutPrompt+0x5c>)
 8005ec4:	f018 f9a2 	bl	801e20c <vsniprintf>
 8005ec8:	6078      	str	r0, [r7, #4]
	va_end(ap);

	// If string is empty, nothing to print so return
	if( n == 0 )
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d011      	beq.n	8005ef4 <PmUartPrintfWithoutPrompt+0x48>
	{
		return;
	}

	if ( n == -1 )
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ed6:	d103      	bne.n	8005ee0 <PmUartPrintfWithoutPrompt+0x34>
	{
		printBuf[UART_TX_QUEUE_MAX_MSG_SIZE-1] = '\0';
 8005ed8:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <PmUartPrintfWithoutPrompt+0x5c>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
	}

	// Write buffer to Tx UART queue
	WriteTxUartQueue( printBuf );
 8005ee0:	4809      	ldr	r0, [pc, #36]	; (8005f08 <PmUartPrintfWithoutPrompt+0x5c>)
 8005ee2:	f7ff fec5 	bl	8005c70 <WriteTxUartQueue>

	// If UART is ready, read data from TX UART queue and transmit to UART,
	// else return and HAL_UART_TxCpltCallback will call ReadTxUArtQueue
	// after current UART transmission is complete
	if(debugUart.gState == HAL_UART_STATE_READY)
 8005ee6:	4b09      	ldr	r3, [pc, #36]	; (8005f0c <PmUartPrintfWithoutPrompt+0x60>)
 8005ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eea:	2b20      	cmp	r3, #32
 8005eec:	d104      	bne.n	8005ef8 <PmUartPrintfWithoutPrompt+0x4c>
	{
		ReadTxUartQueueAndTransmit();
 8005eee:	f7ff fe65 	bl	8005bbc <ReadTxUartQueueAndTransmit>
	}

	return;
 8005ef2:	e001      	b.n	8005ef8 <PmUartPrintfWithoutPrompt+0x4c>
		return;
 8005ef4:	bf00      	nop
 8005ef6:	e000      	b.n	8005efa <PmUartPrintfWithoutPrompt+0x4e>
	return;
 8005ef8:	bf00      	nop
}
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f02:	b004      	add	sp, #16
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	20003cf8 	.word	0x20003cf8
 8005f0c:	20004704 	.word	0x20004704

08005f10 <GetTimeMs>:

// Returns a millisecond count based on the microsecond timer
// For use in callbacks where HAL_GetTick() might not increment due to interrupt priority
// e.g. where UartPrintf is called in a callback
uint32_t GetTimeMs(void)
{
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
	return __HAL_TIM_GetCounter(&htim5)/1000;
 8005f14:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <GetTimeMs+0x1c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	4a05      	ldr	r2, [pc, #20]	; (8005f30 <GetTimeMs+0x20>)
 8005f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f20:	099b      	lsrs	r3, r3, #6
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	20004574 	.word	0x20004574
 8005f30:	10624dd3 	.word	0x10624dd3

08005f34 <DiffTimeFromStartTimeMs>:

// Calculate current difference in time in ms from startTimeMs
uint32_t DiffTimeFromStartTimeMs( uint32_t startTimeMs )
{
 8005f34:	b4b0      	push	{r4, r5, r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
	int64_t diffTimeMs = (__HAL_TIM_GetCounter(&htim5)/1000) - startTimeMs;
 8005f3c:	4910      	ldr	r1, [pc, #64]	; (8005f80 <DiffTimeFromStartTimeMs+0x4c>)
 8005f3e:	6809      	ldr	r1, [r1, #0]
 8005f40:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8005f42:	4810      	ldr	r0, [pc, #64]	; (8005f84 <DiffTimeFromStartTimeMs+0x50>)
 8005f44:	fba0 0101 	umull	r0, r1, r0, r1
 8005f48:	0988      	lsrs	r0, r1, #6
 8005f4a:	6879      	ldr	r1, [r7, #4]
 8005f4c:	1a41      	subs	r1, r0, r1
 8005f4e:	2000      	movs	r0, #0
 8005f50:	460a      	mov	r2, r1
 8005f52:	4603      	mov	r3, r0
 8005f54:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if( diffTimeMs < 0 )
 8005f58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	da06      	bge.n	8005f6e <DiffTimeFromStartTimeMs+0x3a>
	{
		diffTimeMs += 0xFFFFFFFF;
 8005f60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f64:	1e54      	subs	r4, r2, #1
 8005f66:	f143 0500 	adc.w	r5, r3, #0
 8005f6a:	e9c7 4504 	strd	r4, r5, [r7, #16]
	}

	uint32_t diffTimeMsUint32 = diffTimeMs;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	60fb      	str	r3, [r7, #12]

	return diffTimeMsUint32;
 8005f72:	68fb      	ldr	r3, [r7, #12]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	371c      	adds	r7, #28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bcb0      	pop	{r4, r5, r7}
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	20004574 	.word	0x20004574
 8005f84:	10624dd3 	.word	0x10624dd3

08005f88 <Get_SysTick>:

//Provides a tick value in millisecond.
uint32_t Get_SysTick(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8005f8c:	f003 f8fc 	bl	8009188 <HAL_GetTick>
 8005f90:	4603      	mov	r3, r0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	bd80      	pop	{r7, pc}
	...

08005f98 <IsPfcLoadEnLow>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool IsPfcLoadEnLow()
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
	//PfcLoadEnanable signal low return TRUE else return FALSE
	return ( HAL_GPIO_ReadPin(PFC_LoadEN_N_GPIO_Port, PFC_LoadEN_N_Pin) == GPIO_PIN_RESET) ? true : false;
 8005f9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005fa0:	4805      	ldr	r0, [pc, #20]	; (8005fb8 <IsPfcLoadEnLow+0x20>)
 8005fa2:	f004 fe7b 	bl	800ac9c <HAL_GPIO_ReadPin>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	bf0c      	ite	eq
 8005fac:	2301      	moveq	r3, #1
 8005fae:	2300      	movne	r3, #0
 8005fb0:	b2db      	uxtb	r3, r3
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	40021400 	.word	0x40021400

08005fbc <IsPfcPowerFailWarnLow>:

bool IsPfcPowerFailWarnLow()
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
	//PFC_POWERFAILWARNNING_N signal low return TRUE else return FALSE
	return ( HAL_GPIO_ReadPin(PFC_POWERFAILWARNNING_N_GPIO_Port, PFC_POWERFAILWARNNING_N_Pin) == GPIO_PIN_RESET) ? true : false;
 8005fc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fc4:	4805      	ldr	r0, [pc, #20]	; (8005fdc <IsPfcPowerFailWarnLow+0x20>)
 8005fc6:	f004 fe69 	bl	800ac9c <HAL_GPIO_ReadPin>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	bf0c      	ite	eq
 8005fd0:	2301      	moveq	r3, #1
 8005fd2:	2300      	movne	r3, #0
 8005fd4:	b2db      	uxtb	r3, r3
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	40021000 	.word	0x40021000

08005fe0 <Refresh_Hardware_WDT>:

void Refresh_Hardware_WDT()
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(WDI_GPIO_Port, WDI_Pin);
 8005fe4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fe8:	4802      	ldr	r0, [pc, #8]	; (8005ff4 <Refresh_Hardware_WDT+0x14>)
 8005fea:	f004 fe88 	bl	800acfe <HAL_GPIO_TogglePin>
}
 8005fee:	bf00      	nop
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40021400 	.word	0x40021400

08005ff8 <delayWd100ms>:

void delayWd100ms( uint8_t numOf100msTics )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	4603      	mov	r3, r0
 8006000:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	// Allow a maximum delay of 2 sec.
	if ( numOf100msTics > 20 )
 8006002:	79fb      	ldrb	r3, [r7, #7]
 8006004:	2b14      	cmp	r3, #20
 8006006:	d904      	bls.n	8006012 <delayWd100ms+0x1a>
	{
		numOf100msTics = 20;
 8006008:	2314      	movs	r3, #20
 800600a:	71fb      	strb	r3, [r7, #7]
		UartPrintf( "ERROR - Requesting illegal WD delay over 2 sec \n" );
 800600c:	480a      	ldr	r0, [pc, #40]	; (8006038 <delayWd100ms+0x40>)
 800600e:	f7ff fe87 	bl	8005d20 <UartPrintf>
	}

	for ( i = 0; i < numOf100msTics; i++ )
 8006012:	2300      	movs	r3, #0
 8006014:	73fb      	strb	r3, [r7, #15]
 8006016:	e007      	b.n	8006028 <delayWd100ms+0x30>
	{
		HAL_Delay( 100 );
 8006018:	2064      	movs	r0, #100	; 0x64
 800601a:	f003 f8c1 	bl	80091a0 <HAL_Delay>
	    //HAL_IWDG_Refresh( &hiwdg );  // Feed the Internal dog.
	    Refresh_Hardware_WDT();		 // Feed the External dog.
 800601e:	f7ff ffdf 	bl	8005fe0 <Refresh_Hardware_WDT>
	for ( i = 0; i < numOf100msTics; i++ )
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	3301      	adds	r3, #1
 8006026:	73fb      	strb	r3, [r7, #15]
 8006028:	7bfa      	ldrb	r2, [r7, #15]
 800602a:	79fb      	ldrb	r3, [r7, #7]
 800602c:	429a      	cmp	r2, r3
 800602e:	d3f3      	bcc.n	8006018 <delayWd100ms+0x20>
	}

	return;
 8006030:	bf00      	nop
}
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	08022400 	.word	0x08022400

0800603c <CommandProcessing>:

void CommandProcessing( )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
    // Check if command from UART1 is ready to process
	if( commandReady != false )
 8006040:	4b11      	ldr	r3, [pc, #68]	; (8006088 <CommandProcessing+0x4c>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d01c      	beq.n	8006082 <CommandProcessing+0x46>
	{
		// Process command
		if( strlen(commandBuf) > 0 )
 8006048:	4b10      	ldr	r3, [pc, #64]	; (800608c <CommandProcessing+0x50>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d009      	beq.n	8006064 <CommandProcessing+0x28>
		{

			if( InterpRun( commandBuf ) != INTERP_SUCCESS )
 8006050:	480e      	ldr	r0, [pc, #56]	; (800608c <CommandProcessing+0x50>)
 8006052:	f7fe fbdd 	bl	8004810 <InterpRun>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d006      	beq.n	800606a <CommandProcessing+0x2e>
			{
			    UartPrintf("Error Executing Received Command\r\n");
 800605c:	480c      	ldr	r0, [pc, #48]	; (8006090 <CommandProcessing+0x54>)
 800605e:	f7ff fe5f 	bl	8005d20 <UartPrintf>
 8006062:	e002      	b.n	800606a <CommandProcessing+0x2e>
			}
		}
		else // Empty command received, do not attempt to process
		{
		    UartPrintf("");
 8006064:	480b      	ldr	r0, [pc, #44]	; (8006094 <CommandProcessing+0x58>)
 8006066:	f7ff fe5b 	bl	8005d20 <UartPrintf>
		}

		// Command processed, clear command buffer and command ready flag
		memset(commandBuf, 0, strlen(commandBuf));
 800606a:	4808      	ldr	r0, [pc, #32]	; (800608c <CommandProcessing+0x50>)
 800606c:	f7fa f8e2 	bl	8000234 <strlen>
 8006070:	4603      	mov	r3, r0
 8006072:	461a      	mov	r2, r3
 8006074:	2100      	movs	r1, #0
 8006076:	4805      	ldr	r0, [pc, #20]	; (800608c <CommandProcessing+0x50>)
 8006078:	f016 fb9e 	bl	801c7b8 <memset>
		commandReady = false;
 800607c:	4b02      	ldr	r3, [pc, #8]	; (8006088 <CommandProcessing+0x4c>)
 800607e:	2200      	movs	r2, #0
 8006080:	701a      	strb	r2, [r3, #0]
	}
}
 8006082:	bf00      	nop
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20006d0e 	.word	0x20006d0e
 800608c:	20006b10 	.word	0x20006b10
 8006090:	08022434 	.word	0x08022434
 8006094:	08022458 	.word	0x08022458

08006098 <GuiCommandProcessing>:

void GuiCommandProcessing( )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
    // Check if command from UART1 is ready to process
	if( guiCommandReady != false )
 800609e:	4b95      	ldr	r3, [pc, #596]	; (80062f4 <GuiCommandProcessing+0x25c>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 8122 	beq.w	80062ec <GuiCommandProcessing+0x254>
	{
		// Process command
		if( strlen(guiCommandBuf) > 0 )
 80060a8:	4b93      	ldr	r3, [pc, #588]	; (80062f8 <GuiCommandProcessing+0x260>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 8111 	beq.w	80062d4 <GuiCommandProcessing+0x23c>
		{
			uint32_t length = strlen(guiCommandBuf);
 80060b2:	4891      	ldr	r0, [pc, #580]	; (80062f8 <GuiCommandProcessing+0x260>)
 80060b4:	f7fa f8be 	bl	8000234 <strlen>
 80060b8:	6178      	str	r0, [r7, #20]

			UartPrintf("Received:%d bytes %s\n", length, guiCommandBuf);
 80060ba:	4a8f      	ldr	r2, [pc, #572]	; (80062f8 <GuiCommandProcessing+0x260>)
 80060bc:	6979      	ldr	r1, [r7, #20]
 80060be:	488f      	ldr	r0, [pc, #572]	; (80062fc <GuiCommandProcessing+0x264>)
 80060c0:	f7ff fe2e 	bl	8005d20 <UartPrintf>

			uint32_t index = 0;
 80060c4:	2300      	movs	r3, #0
 80060c6:	613b      	str	r3, [r7, #16]

            while(length != 0)
 80060c8:	e100      	b.n	80062cc <GuiCommandProcessing+0x234>
            {
            	char inchar = guiCommandBuf[index];
 80060ca:	4a8b      	ldr	r2, [pc, #556]	; (80062f8 <GuiCommandProcessing+0x260>)
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	4413      	add	r3, r2
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	737b      	strb	r3, [r7, #13]

				switch(inchar)
 80060d4:	7b7b      	ldrb	r3, [r7, #13]
 80060d6:	3b41      	subs	r3, #65	; 0x41
 80060d8:	2b19      	cmp	r3, #25
 80060da:	f200 80ee 	bhi.w	80062ba <GuiCommandProcessing+0x222>
 80060de:	a201      	add	r2, pc, #4	; (adr r2, 80060e4 <GuiCommandProcessing+0x4c>)
 80060e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e4:	0800614d 	.word	0x0800614d
 80060e8:	08006159 	.word	0x08006159
 80060ec:	08006165 	.word	0x08006165
 80060f0:	08006171 	.word	0x08006171
 80060f4:	0800617d 	.word	0x0800617d
 80060f8:	08006189 	.word	0x08006189
 80060fc:	080061ad 	.word	0x080061ad
 8006100:	080061b9 	.word	0x080061b9
 8006104:	080061c5 	.word	0x080061c5
 8006108:	080061d1 	.word	0x080061d1
 800610c:	080061dd 	.word	0x080061dd
 8006110:	080061e9 	.word	0x080061e9
 8006114:	08006195 	.word	0x08006195
 8006118:	080061a1 	.word	0x080061a1
 800611c:	080062bb 	.word	0x080062bb
 8006120:	08006287 	.word	0x08006287
 8006124:	08006293 	.word	0x08006293
 8006128:	080062bb 	.word	0x080062bb
 800612c:	080061f5 	.word	0x080061f5
 8006130:	080062bb 	.word	0x080062bb
 8006134:	080062bb 	.word	0x080062bb
 8006138:	080062bb 	.word	0x080062bb
 800613c:	0800629f 	.word	0x0800629f
 8006140:	080062bb 	.word	0x080062bb
 8006144:	080062bb 	.word	0x080062bb
 8006148:	080062ad 	.word	0x080062ad
				{
					case 'A':
						UartPrintf("Thoracic Vest 1 On\n");
 800614c:	486c      	ldr	r0, [pc, #432]	; (8006300 <GuiCommandProcessing+0x268>)
 800614e:	f7ff fde7 	bl	8005d20 <UartPrintf>
						Valve_1A_On();
 8006152:	f7fc fec5 	bl	8002ee0 <Valve_1A_On>
					break;
 8006156:	e0b3      	b.n	80062c0 <GuiCommandProcessing+0x228>

					case 'B':
						UartPrintf("Thoracic Vest 1 Off\n");
 8006158:	486a      	ldr	r0, [pc, #424]	; (8006304 <GuiCommandProcessing+0x26c>)
 800615a:	f7ff fde1 	bl	8005d20 <UartPrintf>
						Valve_1A_Off();
 800615e:	f7fc fed1 	bl	8002f04 <Valve_1A_Off>
					break;
 8006162:	e0ad      	b.n	80062c0 <GuiCommandProcessing+0x228>

					case 'C':
						UartPrintf("Thoracic Vest 2 On\n");
 8006164:	4868      	ldr	r0, [pc, #416]	; (8006308 <GuiCommandProcessing+0x270>)
 8006166:	f7ff fddb 	bl	8005d20 <UartPrintf>
						Valve_1B_On();
 800616a:	f7fc fedd 	bl	8002f28 <Valve_1B_On>
					break;
 800616e:	e0a7      	b.n	80062c0 <GuiCommandProcessing+0x228>

					case 'D':
						UartPrintf("Thoracic Vest 2 Off\n");
 8006170:	4866      	ldr	r0, [pc, #408]	; (800630c <GuiCommandProcessing+0x274>)
 8006172:	f7ff fdd5 	bl	8005d20 <UartPrintf>
						Valve_1B_Off();
 8006176:	f7fc feeb 	bl	8002f50 <Valve_1B_Off>
					break;
 800617a:	e0a1      	b.n	80062c0 <GuiCommandProcessing+0x228>

					case 'E':
						UartPrintf("Abd Vest 1 On\n");
 800617c:	4864      	ldr	r0, [pc, #400]	; (8006310 <GuiCommandProcessing+0x278>)
 800617e:	f7ff fdcf 	bl	8005d20 <UartPrintf>
						Valve_2A_On();
 8006182:	f7fc fef9 	bl	8002f78 <Valve_2A_On>
					break;
 8006186:	e09b      	b.n	80062c0 <GuiCommandProcessing+0x228>

					case 'F':
						UartPrintf("Abd Vest 1 Off\n");
 8006188:	4862      	ldr	r0, [pc, #392]	; (8006314 <GuiCommandProcessing+0x27c>)
 800618a:	f7ff fdc9 	bl	8005d20 <UartPrintf>
						Valve_2A_Off();
 800618e:	f7fc feff 	bl	8002f90 <Valve_2A_Off>
					break;
 8006192:	e095      	b.n	80062c0 <GuiCommandProcessing+0x228>

					case 'M':
						UartPrintf("Abd Vest 2 On\n");
 8006194:	4860      	ldr	r0, [pc, #384]	; (8006318 <GuiCommandProcessing+0x280>)
 8006196:	f7ff fdc3 	bl	8005d20 <UartPrintf>
						Valve_2B_On();
 800619a:	f7fc ff05 	bl	8002fa8 <Valve_2B_On>
					break;
 800619e:	e08f      	b.n	80062c0 <GuiCommandProcessing+0x228>

					case 'N':
						UartPrintf("Abd Vest 2 Off\n");
 80061a0:	485e      	ldr	r0, [pc, #376]	; (800631c <GuiCommandProcessing+0x284>)
 80061a2:	f7ff fdbd 	bl	8005d20 <UartPrintf>
						Valve_2B_Off();
 80061a6:	f7fc ff0b 	bl	8002fc0 <Valve_2B_Off>
					break;
 80061aa:	e089      	b.n	80062c0 <GuiCommandProcessing+0x228>

					case 'G':
						UartPrintf("Vac Div 1 On\n");
 80061ac:	485c      	ldr	r0, [pc, #368]	; (8006320 <GuiCommandProcessing+0x288>)
 80061ae:	f7ff fdb7 	bl	8005d20 <UartPrintf>
						Valve_3A_On();
 80061b2:	f7fc ff11 	bl	8002fd8 <Valve_3A_On>
					break;
 80061b6:	e083      	b.n	80062c0 <GuiCommandProcessing+0x228>

					case 'H':
						UartPrintf("Vac Div 1 Off\n");
 80061b8:	485a      	ldr	r0, [pc, #360]	; (8006324 <GuiCommandProcessing+0x28c>)
 80061ba:	f7ff fdb1 	bl	8005d20 <UartPrintf>
						Valve_3A_Off();
 80061be:	f7fc ff17 	bl	8002ff0 <Valve_3A_Off>
					break;
 80061c2:	e07d      	b.n	80062c0 <GuiCommandProcessing+0x228>

					case 'I':
						UartPrintf("Vac Div 2 On\n");
 80061c4:	4858      	ldr	r0, [pc, #352]	; (8006328 <GuiCommandProcessing+0x290>)
 80061c6:	f7ff fdab 	bl	8005d20 <UartPrintf>
						Valve_3B_On();
 80061ca:	f7fc ff1d 	bl	8003008 <Valve_3B_On>
					break;
 80061ce:	e077      	b.n	80062c0 <GuiCommandProcessing+0x228>

					case 'J':
						UartPrintf("Vac Div 2 Off\n");
 80061d0:	4856      	ldr	r0, [pc, #344]	; (800632c <GuiCommandProcessing+0x294>)
 80061d2:	f7ff fda5 	bl	8005d20 <UartPrintf>
						Valve_3B_Off();
 80061d6:	f7fc ff23 	bl	8003020 <Valve_3B_Off>
					break;
 80061da:	e071      	b.n	80062c0 <GuiCommandProcessing+0x228>

					case 'K':
						UartPrintf("Vent 1 On\n");
 80061dc:	4854      	ldr	r0, [pc, #336]	; (8006330 <GuiCommandProcessing+0x298>)
 80061de:	f7ff fd9f 	bl	8005d20 <UartPrintf>
						Valve_4A_On();
 80061e2:	f7fc ff29 	bl	8003038 <Valve_4A_On>
					break;
 80061e6:	e06b      	b.n	80062c0 <GuiCommandProcessing+0x228>

					case 'L':
						UartPrintf("Vent 1 Off\n");
 80061e8:	4852      	ldr	r0, [pc, #328]	; (8006334 <GuiCommandProcessing+0x29c>)
 80061ea:	f7ff fd99 	bl	8005d20 <UartPrintf>
						Valve_4A_Off();
 80061ee:	f7fc ff2f 	bl	8003050 <Valve_4A_Off>
					break;
 80061f2:	e065      	b.n	80062c0 <GuiCommandProcessing+0x228>
						//process speed setting S+speed+T
						//parse for number
                        char msg[8];

                        //advance index
                        uint8_t duty_cycle_index = 0;
 80061f4:	2300      	movs	r3, #0
 80061f6:	73fb      	strb	r3, [r7, #15]

                        index++; //SxT where x = 0 to 10
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	3301      	adds	r3, #1
 80061fc:	613b      	str	r3, [r7, #16]
                        char nextchar = guiCommandBuf[index];
 80061fe:	4a3e      	ldr	r2, [pc, #248]	; (80062f8 <GuiCommandProcessing+0x260>)
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	4413      	add	r3, r2
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	73bb      	strb	r3, [r7, #14]

                        while (nextchar != 'T' && nextchar != '\0')
 8006208:	e010      	b.n	800622c <GuiCommandProcessing+0x194>
                        {
                        	msg[duty_cycle_index] = nextchar;
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	3318      	adds	r3, #24
 800620e:	443b      	add	r3, r7
 8006210:	7bba      	ldrb	r2, [r7, #14]
 8006212:	f803 2c18 	strb.w	r2, [r3, #-24]
                        	duty_cycle_index++;
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	3301      	adds	r3, #1
 800621a:	73fb      	strb	r3, [r7, #15]
                        	index++;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	3301      	adds	r3, #1
 8006220:	613b      	str	r3, [r7, #16]
                        	nextchar = guiCommandBuf[index];
 8006222:	4a35      	ldr	r2, [pc, #212]	; (80062f8 <GuiCommandProcessing+0x260>)
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	4413      	add	r3, r2
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	73bb      	strb	r3, [r7, #14]
                        while (nextchar != 'T' && nextchar != '\0')
 800622c:	7bbb      	ldrb	r3, [r7, #14]
 800622e:	2b54      	cmp	r3, #84	; 0x54
 8006230:	d002      	beq.n	8006238 <GuiCommandProcessing+0x1a0>
 8006232:	7bbb      	ldrb	r3, [r7, #14]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1e8      	bne.n	800620a <GuiCommandProcessing+0x172>
                        }

                        msg[duty_cycle_index] = '\0'; //complete string
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	3318      	adds	r3, #24
 800623c:	443b      	add	r3, r7
 800623e:	2200      	movs	r2, #0
 8006240:	f803 2c18 	strb.w	r2, [r3, #-24]

                        uint8_t dc_index = atoi( msg );
 8006244:	463b      	mov	r3, r7
 8006246:	4618      	mov	r0, r3
 8006248:	f016 fa6a 	bl	801c720 <atoi>
 800624c:	4603      	mov	r3, r0
 800624e:	733b      	strb	r3, [r7, #12]

						if(dc_index >= 0 && dc_index <= 10)
 8006250:	7b3b      	ldrb	r3, [r7, #12]
 8006252:	2b0a      	cmp	r3, #10
 8006254:	d833      	bhi.n	80062be <GuiCommandProcessing+0x226>
						{
							uint32_t duty_cycle = blower_duty_cycle[dc_index];
 8006256:	7b3b      	ldrb	r3, [r7, #12]
 8006258:	4a37      	ldr	r2, [pc, #220]	; (8006338 <GuiCommandProcessing+0x2a0>)
 800625a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800625e:	60bb      	str	r3, [r7, #8]

							UartPrintf("Speed:%d DAC:%d\r\n", dc_index, duty_cycle);
 8006260:	7b3b      	ldrb	r3, [r7, #12]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	4619      	mov	r1, r3
 8006266:	4835      	ldr	r0, [pc, #212]	; (800633c <GuiCommandProcessing+0x2a4>)
 8006268:	f7ff fd5a 	bl	8005d20 <UartPrintf>

							BlowerDAC( duty_cycle );
 800626c:	68b8      	ldr	r0, [r7, #8]
 800626e:	f7fc ffed 	bl	800324c <BlowerDAC>

							powerpcb_control(1);
 8006272:	2001      	movs	r0, #1
 8006274:	f7fc ffb4 	bl	80031e0 <powerpcb_control>

							PF_control(1);
 8006278:	2001      	movs	r0, #1
 800627a:	f7fc ffc3 	bl	8003204 <PF_control>

							PFC_RLY_control(1);
 800627e:	2001      	movs	r0, #1
 8006280:	f7fc ffd2 	bl	8003228 <PFC_RLY_control>
						}

					}
					break;
 8006284:	e01b      	b.n	80062be <GuiCommandProcessing+0x226>

					case 'P':
						//turn on pilot compressor P2
						UartPrintf("Compressor Contro1 On\n");
 8006286:	482e      	ldr	r0, [pc, #184]	; (8006340 <GuiCommandProcessing+0x2a8>)
 8006288:	f7ff fd4a 	bl	8005d20 <UartPrintf>
						Compressor_Control_On();
 800628c:	f7fc ff6c 	bl	8003168 <Compressor_Control_On>
					break;
 8006290:	e016      	b.n	80062c0 <GuiCommandProcessing+0x228>

					case 'Q':
						//turn off pilot compressor P2
						UartPrintf("Compressor Contro1 Off\n");
 8006292:	482c      	ldr	r0, [pc, #176]	; (8006344 <GuiCommandProcessing+0x2ac>)
 8006294:	f7ff fd44 	bl	8005d20 <UartPrintf>
						Compressor_Control_Off();
 8006298:	f7fc ff72 	bl	8003180 <Compressor_Control_Off>
					break;
 800629c:	e010      	b.n	80062c0 <GuiCommandProcessing+0x228>

					case 'W':
						//subscribe for 4-pressure sensors
						UartPrintf("Subscribe for Pressure Statuses\n");
 800629e:	482a      	ldr	r0, [pc, #168]	; (8006348 <GuiCommandProcessing+0x2b0>)
 80062a0:	f7ff fd3e 	bl	8005d20 <UartPrintf>
						gstModel.bPressureData = true;
 80062a4:	4b29      	ldr	r3, [pc, #164]	; (800634c <GuiCommandProcessing+0x2b4>)
 80062a6:	2201      	movs	r2, #1
 80062a8:	725a      	strb	r2, [r3, #9]
					break;
 80062aa:	e009      	b.n	80062c0 <GuiCommandProcessing+0x228>

					case 'Z':
						//unsubscribe for 4-pressure sensors
						UartPrintf("Un-Subscribe for Pressure Statuses\n");
 80062ac:	4828      	ldr	r0, [pc, #160]	; (8006350 <GuiCommandProcessing+0x2b8>)
 80062ae:	f7ff fd37 	bl	8005d20 <UartPrintf>
						gstModel.bPressureData = false;
 80062b2:	4b26      	ldr	r3, [pc, #152]	; (800634c <GuiCommandProcessing+0x2b4>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	725a      	strb	r2, [r3, #9]
					break;
 80062b8:	e002      	b.n	80062c0 <GuiCommandProcessing+0x228>

					default:
					break;
 80062ba:	bf00      	nop
 80062bc:	e000      	b.n	80062c0 <GuiCommandProcessing+0x228>
					break;
 80062be:	bf00      	nop
				}

				length--;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	3b01      	subs	r3, #1
 80062c4:	617b      	str	r3, [r7, #20]
				index++;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	3301      	adds	r3, #1
 80062ca:	613b      	str	r3, [r7, #16]
            while(length != 0)
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f47f aefb 	bne.w	80060ca <GuiCommandProcessing+0x32>
            }
		}

		// Command processed, clear command buffer and command ready flag
		memset(guiCommandBuf, 0, strlen(guiCommandBuf));
 80062d4:	4808      	ldr	r0, [pc, #32]	; (80062f8 <GuiCommandProcessing+0x260>)
 80062d6:	f7f9 ffad 	bl	8000234 <strlen>
 80062da:	4603      	mov	r3, r0
 80062dc:	461a      	mov	r2, r3
 80062de:	2100      	movs	r1, #0
 80062e0:	4805      	ldr	r0, [pc, #20]	; (80062f8 <GuiCommandProcessing+0x260>)
 80062e2:	f016 fa69 	bl	801c7b8 <memset>
		guiCommandReady = false;
 80062e6:	4b03      	ldr	r3, [pc, #12]	; (80062f4 <GuiCommandProcessing+0x25c>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	701a      	strb	r2, [r3, #0]
	}
}
 80062ec:	bf00      	nop
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	2000710e 	.word	0x2000710e
 80062f8:	20006f10 	.word	0x20006f10
 80062fc:	0802245c 	.word	0x0802245c
 8006300:	08022474 	.word	0x08022474
 8006304:	08022488 	.word	0x08022488
 8006308:	080224a0 	.word	0x080224a0
 800630c:	080224b4 	.word	0x080224b4
 8006310:	080224cc 	.word	0x080224cc
 8006314:	080224dc 	.word	0x080224dc
 8006318:	080224ec 	.word	0x080224ec
 800631c:	080224fc 	.word	0x080224fc
 8006320:	0802250c 	.word	0x0802250c
 8006324:	0802251c 	.word	0x0802251c
 8006328:	0802252c 	.word	0x0802252c
 800632c:	0802253c 	.word	0x0802253c
 8006330:	0802254c 	.word	0x0802254c
 8006334:	08022558 	.word	0x08022558
 8006338:	200001c8 	.word	0x200001c8
 800633c:	08022564 	.word	0x08022564
 8006340:	08022578 	.word	0x08022578
 8006344:	08022590 	.word	0x08022590
 8006348:	080225a8 	.word	0x080225a8
 800634c:	20000c60 	.word	0x20000c60
 8006350:	080225cc 	.word	0x080225cc
 8006354:	00000000 	.word	0x00000000

08006358 <Set_DAC_Voltage>:

void Set_DAC_Voltage(float fV)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	ed87 0a01 	vstr	s0, [r7, #4]
	//only allow from 0.0 to 3.3V
	if( (fV >= 0.0) && (fV <= 3.3) )
 8006362:	edd7 7a01 	vldr	s15, [r7, #4]
 8006366:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800636a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800636e:	da00      	bge.n	8006372 <Set_DAC_Voltage+0x1a>

		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R,  gstModel.dac_value);

		HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
	}
}
 8006370:	e033      	b.n	80063da <Set_DAC_Voltage+0x82>
	if( (fV >= 0.0) && (fV <= 3.3) )
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7fa f920 	bl	80005b8 <__aeabi_f2d>
 8006378:	a31b      	add	r3, pc, #108	; (adr r3, 80063e8 <Set_DAC_Voltage+0x90>)
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	f7fa fbef 	bl	8000b60 <__aeabi_dcmple>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d100      	bne.n	800638a <Set_DAC_Voltage+0x32>
}
 8006388:	e027      	b.n	80063da <Set_DAC_Voltage+0x82>
		gstModel.dac_value = (uint16_t)(fV * 4095 / 3.3);
 800638a:	edd7 7a01 	vldr	s15, [r7, #4]
 800638e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80063f0 <Set_DAC_Voltage+0x98>
 8006392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006396:	ee17 0a90 	vmov	r0, s15
 800639a:	f7fa f90d 	bl	80005b8 <__aeabi_f2d>
 800639e:	a312      	add	r3, pc, #72	; (adr r3, 80063e8 <Set_DAC_Voltage+0x90>)
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	f7fa fa8a 	bl	80008bc <__aeabi_ddiv>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4610      	mov	r0, r2
 80063ae:	4619      	mov	r1, r3
 80063b0:	f7fa fc32 	bl	8000c18 <__aeabi_d2uiz>
 80063b4:	4603      	mov	r3, r0
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	4b0e      	ldr	r3, [pc, #56]	; (80063f4 <Set_DAC_Voltage+0x9c>)
 80063ba:	841a      	strh	r2, [r3, #32]
		HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80063bc:	2100      	movs	r1, #0
 80063be:	480e      	ldr	r0, [pc, #56]	; (80063f8 <Set_DAC_Voltage+0xa0>)
 80063c0:	f003 fde5 	bl	8009f8e <HAL_DAC_Start>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R,  gstModel.dac_value);
 80063c4:	4b0b      	ldr	r3, [pc, #44]	; (80063f4 <Set_DAC_Voltage+0x9c>)
 80063c6:	8c1b      	ldrh	r3, [r3, #32]
 80063c8:	2200      	movs	r2, #0
 80063ca:	2100      	movs	r1, #0
 80063cc:	480a      	ldr	r0, [pc, #40]	; (80063f8 <Set_DAC_Voltage+0xa0>)
 80063ce:	f003 fe30 	bl	800a032 <HAL_DAC_SetValue>
		HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80063d2:	2100      	movs	r1, #0
 80063d4:	4808      	ldr	r0, [pc, #32]	; (80063f8 <Set_DAC_Voltage+0xa0>)
 80063d6:	f003 fdda 	bl	8009f8e <HAL_DAC_Start>
}
 80063da:	bf00      	nop
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	f3af 8000 	nop.w
 80063e8:	66666666 	.word	0x66666666
 80063ec:	400a6666 	.word	0x400a6666
 80063f0:	457ff000 	.word	0x457ff000
 80063f4:	20000c60 	.word	0x20000c60
 80063f8:	20004250 	.word	0x20004250
 80063fc:	00000000 	.word	0x00000000

08006400 <Get_DAC_Voltage>:

void  Get_DAC_Voltage()
{
 8006400:	b580      	push	{r7, lr}
 8006402:	af00      	add	r7, sp, #0
	UartPrintfWithoutPrompt("DAC is set at: %2.1f\n", (gstModel.dac_value * 3.3)/4095.0);
 8006404:	4b10      	ldr	r3, [pc, #64]	; (8006448 <Get_DAC_Voltage+0x48>)
 8006406:	8c1b      	ldrh	r3, [r3, #32]
 8006408:	4618      	mov	r0, r3
 800640a:	f7fa f8c3 	bl	8000594 <__aeabi_i2d>
 800640e:	a30a      	add	r3, pc, #40	; (adr r3, 8006438 <Get_DAC_Voltage+0x38>)
 8006410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006414:	f7fa f928 	bl	8000668 <__aeabi_dmul>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	4610      	mov	r0, r2
 800641e:	4619      	mov	r1, r3
 8006420:	a307      	add	r3, pc, #28	; (adr r3, 8006440 <Get_DAC_Voltage+0x40>)
 8006422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006426:	f7fa fa49 	bl	80008bc <__aeabi_ddiv>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	4807      	ldr	r0, [pc, #28]	; (800644c <Get_DAC_Voltage+0x4c>)
 8006430:	f7ff fcbc 	bl	8005dac <UartPrintfWithoutPrompt>
}
 8006434:	bf00      	nop
 8006436:	bd80      	pop	{r7, pc}
 8006438:	66666666 	.word	0x66666666
 800643c:	400a6666 	.word	0x400a6666
 8006440:	00000000 	.word	0x00000000
 8006444:	40affe00 	.word	0x40affe00
 8006448:	20000c60 	.word	0x20000c60
 800644c:	080225f0 	.word	0x080225f0

08006450 <Set_Time>:

void Set_Time(uint8_t hr, uint8_t min, uint8_t sec)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af00      	add	r7, sp, #0
 8006456:	4603      	mov	r3, r0
 8006458:	71fb      	strb	r3, [r7, #7]
 800645a:	460b      	mov	r3, r1
 800645c:	71bb      	strb	r3, [r7, #6]
 800645e:	4613      	mov	r3, r2
 8006460:	717b      	strb	r3, [r7, #5]
  RTC_TimeTypeDef sTime;

  /** Initialize RTC and set the Time and Date  */
  sTime.Hours   = hr;
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = min;
 8006466:	79bb      	ldrb	r3, [r7, #6]
 8006468:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = sec;
 800646a:	797b      	ldrb	r3, [r7, #5]
 800646c:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800646e:	2300      	movs	r3, #0
 8006470:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006472:	2300      	movs	r3, #0
 8006474:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8006476:	f107 0308 	add.w	r3, r7, #8
 800647a:	2200      	movs	r2, #0
 800647c:	4619      	mov	r1, r3
 800647e:	4808      	ldr	r0, [pc, #32]	; (80064a0 <Set_Time+0x50>)
 8006480:	f008 ff2a 	bl	800f2d8 <HAL_RTC_SetTime>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <Set_Time+0x3e>
  {
    Error_Handler();
 800648a:	f001 fc85 	bl	8007d98 <Error_Handler>
  }

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xDEADBEEF); // backup register
 800648e:	4a05      	ldr	r2, [pc, #20]	; (80064a4 <Set_Time+0x54>)
 8006490:	2100      	movs	r1, #0
 8006492:	4803      	ldr	r0, [pc, #12]	; (80064a0 <Set_Time+0x50>)
 8006494:	f009 f9c4 	bl	800f820 <HAL_RTCEx_BKUPWrite>
}
 8006498:	bf00      	nop
 800649a:	3720      	adds	r7, #32
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	200042fc 	.word	0x200042fc
 80064a4:	deadbeef 	.word	0xdeadbeef

080064a8 <Set_Date>:

void Set_Date(uint8_t day, uint8_t month, uint8_t date, uint8_t year)
{
 80064a8:	b590      	push	{r4, r7, lr}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	4604      	mov	r4, r0
 80064b0:	4608      	mov	r0, r1
 80064b2:	4611      	mov	r1, r2
 80064b4:	461a      	mov	r2, r3
 80064b6:	4623      	mov	r3, r4
 80064b8:	71fb      	strb	r3, [r7, #7]
 80064ba:	4603      	mov	r3, r0
 80064bc:	71bb      	strb	r3, [r7, #6]
 80064be:	460b      	mov	r3, r1
 80064c0:	717b      	strb	r3, [r7, #5]
 80064c2:	4613      	mov	r3, r2
 80064c4:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef sDate;

  sDate.WeekDay = day; //RTC_WEEKDAY_TUESDAY;
 80064c6:	79fb      	ldrb	r3, [r7, #7]
 80064c8:	733b      	strb	r3, [r7, #12]
  sDate.Month   = month; //RTC_MONTH_SEPTEMBER;
 80064ca:	79bb      	ldrb	r3, [r7, #6]
 80064cc:	737b      	strb	r3, [r7, #13]
  sDate.Date    = date;   //28;
 80064ce:	797b      	ldrb	r3, [r7, #5]
 80064d0:	73bb      	strb	r3, [r7, #14]
  sDate.Year    = year;   //21;
 80064d2:	793b      	ldrb	r3, [r7, #4]
 80064d4:	73fb      	strb	r3, [r7, #15]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80064d6:	f107 030c 	add.w	r3, r7, #12
 80064da:	2200      	movs	r2, #0
 80064dc:	4619      	mov	r1, r3
 80064de:	4808      	ldr	r0, [pc, #32]	; (8006500 <Set_Date+0x58>)
 80064e0:	f009 f816 	bl	800f510 <HAL_RTC_SetDate>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <Set_Date+0x46>
  {
    Error_Handler();
 80064ea:	f001 fc55 	bl	8007d98 <Error_Handler>
  }

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xDEADBEEF); // backup register
 80064ee:	4a05      	ldr	r2, [pc, #20]	; (8006504 <Set_Date+0x5c>)
 80064f0:	2100      	movs	r1, #0
 80064f2:	4803      	ldr	r0, [pc, #12]	; (8006500 <Set_Date+0x58>)
 80064f4:	f009 f994 	bl	800f820 <HAL_RTCEx_BKUPWrite>
}
 80064f8:	bf00      	nop
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd90      	pop	{r4, r7, pc}
 8006500:	200042fc 	.word	0x200042fc
 8006504:	deadbeef 	.word	0xdeadbeef

08006508 <Get_Time>:

void Get_Time()
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08a      	sub	sp, #40	; 0x28
 800650c:	af02      	add	r7, sp, #8
	 RTC_DateTypeDef gDate;
	 RTC_TimeTypeDef gTime;

	 /* Get the RTC current Time */
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800650e:	1d3b      	adds	r3, r7, #4
 8006510:	2200      	movs	r2, #0
 8006512:	4619      	mov	r1, r3
 8006514:	4812      	ldr	r0, [pc, #72]	; (8006560 <Get_Time+0x58>)
 8006516:	f008 ff9d 	bl	800f454 <HAL_RTC_GetTime>

	 /* Get the RTC current Date */
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800651a:	f107 031c 	add.w	r3, r7, #28
 800651e:	2200      	movs	r2, #0
 8006520:	4619      	mov	r1, r3
 8006522:	480f      	ldr	r0, [pc, #60]	; (8006560 <Get_Time+0x58>)
 8006524:	f009 f89c 	bl	800f660 <HAL_RTC_GetDate>

	 /* Display time Format: hh:mm:ss */
	 sprintf((char *)&gstModel.atime,"%02d:%02d:%02d", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8006528:	793b      	ldrb	r3, [r7, #4]
 800652a:	461a      	mov	r2, r3
 800652c:	797b      	ldrb	r3, [r7, #5]
 800652e:	4619      	mov	r1, r3
 8006530:	79bb      	ldrb	r3, [r7, #6]
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	460b      	mov	r3, r1
 8006536:	490b      	ldr	r1, [pc, #44]	; (8006564 <Get_Time+0x5c>)
 8006538:	480b      	ldr	r0, [pc, #44]	; (8006568 <Get_Time+0x60>)
 800653a:	f016 fed3 	bl	801d2e4 <siprintf>

	 /* Display date Format: mm-dd-yy */
	 sprintf((char *)&gstModel.adate,"%02d-%02d-%2d", gDate.Month, gDate.Date, 2000 + gDate.Year);
 800653e:	7f7b      	ldrb	r3, [r7, #29]
 8006540:	461a      	mov	r2, r3
 8006542:	7fbb      	ldrb	r3, [r7, #30]
 8006544:	4619      	mov	r1, r3
 8006546:	7ffb      	ldrb	r3, [r7, #31]
 8006548:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	460b      	mov	r3, r1
 8006550:	4906      	ldr	r1, [pc, #24]	; (800656c <Get_Time+0x64>)
 8006552:	4807      	ldr	r0, [pc, #28]	; (8006570 <Get_Time+0x68>)
 8006554:	f016 fec6 	bl	801d2e4 <siprintf>
}
 8006558:	bf00      	nop
 800655a:	3720      	adds	r7, #32
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	200042fc 	.word	0x200042fc
 8006564:	08022608 	.word	0x08022608
 8006568:	20000c6b 	.word	0x20000c6b
 800656c:	08022618 	.word	0x08022618
 8006570:	20000c75 	.word	0x20000c75

08006574 <Monitor>:

int Monitor()
{
 8006574:	b580      	push	{r7, lr}
 8006576:	af00      	add	r7, sp, #0
	ReadAdc1Channels();
 8006578:	f7fb f820 	bl	80015bc <ReadAdc1Channels>
	ReadAdc3Channels();
 800657c:	f7fb f98c 	bl	8001898 <ReadAdc3Channels>
	return 0;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	bd80      	pop	{r7, pc}
	...

08006588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800658c:	b092      	sub	sp, #72	; 0x48
 800658e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006590:	f002 fda0 	bl	80090d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006594:	f000 fad2 	bl	8006b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006598:	f001 f8d0 	bl	800773c <MX_GPIO_Init>
  MX_DMA_Init();
 800659c:	f001 f884 	bl	80076a8 <MX_DMA_Init>
  MX_DAC_Init();
 80065a0:	f000 fcfe 	bl	8006fa0 <MX_DAC_Init>
  MX_I2C2_Init();
 80065a4:	f000 fd26 	bl	8006ff4 <MX_I2C2_Init>
  MX_I2C3_Init();
 80065a8:	f000 fd6a 	bl	8007080 <MX_I2C3_Init>
  MX_SDMMC2_SD_Init();
 80065ac:	f000 fdce 	bl	800714c <MX_SDMMC2_SD_Init>
  MX_SPI1_Init();
 80065b0:	f000 fdee 	bl	8007190 <MX_SPI1_Init>
  MX_SPI3_Init();
 80065b4:	f000 fe2a 	bl	800720c <MX_SPI3_Init>
  MX_TIM14_Init();
 80065b8:	f000 ff98 	bl	80074ec <MX_TIM14_Init>
  MX_UART5_Init();
 80065bc:	f000 ffe4 	bl	8007588 <MX_UART5_Init>
  MX_UART7_Init();
 80065c0:	f001 f812 	bl	80075e8 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 80065c4:	f015 fb1e 	bl	801bc04 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80065c8:	f000 fe5e 	bl	8007288 <MX_TIM2_Init>
  MX_TIM5_Init();
 80065cc:	f000 fed2 	bl	8007374 <MX_TIM5_Init>
  MX_TIM7_Init();
 80065d0:	f000 ff56 	bl	8007480 <MX_TIM7_Init>
  MX_FATFS_Init();
 80065d4:	f00f fa20 	bl	8015a18 <MX_FATFS_Init>
  MX_RTC_Init();
 80065d8:	f000 fd92 	bl	8007100 <MX_RTC_Init>
  MX_ADC1_Init();
 80065dc:	f000 fb64 	bl	8006ca8 <MX_ADC1_Init>
  MX_ADC3_Init();
 80065e0:	f000 fc08 	bl	8006df4 <MX_ADC3_Init>
  MX_UART8_Init();
 80065e4:	f001 f830 	bl	8007648 <MX_UART8_Init>
  MX_TIM6_Init();
 80065e8:	f000 ff12 	bl	8007410 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  wdi_flag = true;  //Enables feeding EWDT
 80065ec:	4b6a      	ldr	r3, [pc, #424]	; (8006798 <main+0x210>)
 80065ee:	2201      	movs	r2, #1
 80065f0:	701a      	strb	r2, [r3, #0]

  Adc1Init();
 80065f2:	f7fa fd39 	bl	8001068 <Adc1Init>
  //  Adc3Init();
  HAL_ADC_Start(&hadc1);
 80065f6:	4869      	ldr	r0, [pc, #420]	; (800679c <main+0x214>)
 80065f8:	f002 fe3a 	bl	8009270 <HAL_ADC_Start>

  // Starts the DAC
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);   //Added by Gio  10/6/21
 80065fc:	2100      	movs	r1, #0
 80065fe:	4868      	ldr	r0, [pc, #416]	; (80067a0 <main+0x218>)
 8006600:	f003 fcc5 	bl	8009f8e <HAL_DAC_Start>

  //Added by Gio 10/5/21
  cprtsystem_init();
 8006604:	f7fc feea 	bl	80033dc <cprtsystem_init>
  UartPrintf("CPRT System Initialization Started\n");
 8006608:	4866      	ldr	r0, [pc, #408]	; (80067a4 <main+0x21c>)
 800660a:	f7ff fb89 	bl	8005d20 <UartPrintf>

  //UartPrintf("Initialization Started\n");
  GetMinuteCounterFromEeprom( );
 800660e:	f7fb ff1b 	bl	8002448 <GetMinuteCounterFromEeprom>
  delayWd100ms( 1 );
 8006612:	2001      	movs	r0, #1
 8006614:	f7ff fcf0 	bl	8005ff8 <delayWd100ms>
  GetEventCounterFromEeprom( );
 8006618:	f7fb ff26 	bl	8002468 <GetEventCounterFromEeprom>
  delayWd100ms( 1 );
 800661c:	2001      	movs	r0, #1
 800661e:	f7ff fceb 	bl	8005ff8 <delayWd100ms>
  GetMfgDateFromEeprom( );
 8006622:	f7fc f995 	bl	8002950 <GetMfgDateFromEeprom>
  delayWd100ms( 1 );
 8006626:	2001      	movs	r0, #1
 8006628:	f7ff fce6 	bl	8005ff8 <delayWd100ms>
  GetSerialNumberFromEeprom( );
 800662c:	f7fc f9a0 	bl	8002970 <GetSerialNumberFromEeprom>
  delayWd100ms( 1 );
 8006630:	2001      	movs	r0, #1
 8006632:	f7ff fce1 	bl	8005ff8 <delayWd100ms>

  //Added the checking to do the initlog
  uint32_t minuteCount = GetMinuteCount();
 8006636:	f001 fb83 	bl	8007d40 <GetMinuteCount>
 800663a:	62f8      	str	r0, [r7, #44]	; 0x2c

  if(minuteCount >= 0x025DFBE0) // TODO: value check coming from data showed 27579 x 1440, need to confirm this value
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	4a5a      	ldr	r2, [pc, #360]	; (80067a8 <main+0x220>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d901      	bls.n	8006648 <main+0xc0>
  {
      InitializeLog( );
 8006644:	f7fc f956 	bl	80028f4 <InitializeLog>
  }

  delayWd100ms( 5 );
 8006648:	2005      	movs	r0, #5
 800664a:	f7ff fcd5 	bl	8005ff8 <delayWd100ms>

  /*Debug Uart using UART5*/
  memset(commandBuf, 0, MAX_COMMAND_LENGTH);
 800664e:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8006652:	2100      	movs	r1, #0
 8006654:	4855      	ldr	r0, [pc, #340]	; (80067ac <main+0x224>)
 8006656:	f016 f8af 	bl	801c7b8 <memset>
  __HAL_UART_ENABLE_IT(&debugUart, UART_IT_IDLE);  // Enable UART idle interrupt
 800665a:	4b55      	ldr	r3, [pc, #340]	; (80067b0 <main+0x228>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	4b53      	ldr	r3, [pc, #332]	; (80067b0 <main+0x228>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f042 0210 	orr.w	r2, r2, #16
 8006668:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&debugUart, UART_IT_TC);    // Enable UART Tx Complete interrupt
 800666a:	4b51      	ldr	r3, [pc, #324]	; (80067b0 <main+0x228>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	4b4f      	ldr	r3, [pc, #316]	; (80067b0 <main+0x228>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006678:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&debugUart, uartReceiveBuff, UART_RX_DMA_BUFFER_SIZE ); // Set up the IT UART transmission to move the received
 800667a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800667e:	494d      	ldr	r1, [pc, #308]	; (80067b4 <main+0x22c>)
 8006680:	484b      	ldr	r0, [pc, #300]	; (80067b0 <main+0x228>)
 8006682:	f00c f835 	bl	80126f0 <HAL_UART_Receive_IT>
                                                                                // data of serial port to uartReceiveBuff,
                                                                                // UART_RX_DMA_BUFFER_SIZE bytes at a time

  /*GUI Uart suing UART8 */
  memset(guiCommandBuf, 0, MAX_COMMAND_LENGTH);
 8006686:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 800668a:	2100      	movs	r1, #0
 800668c:	484a      	ldr	r0, [pc, #296]	; (80067b8 <main+0x230>)
 800668e:	f016 f893 	bl	801c7b8 <memset>
  __HAL_UART_ENABLE_IT(&guiUart, UART_IT_IDLE);  // Enable UART idle interrupt
 8006692:	4b4a      	ldr	r3, [pc, #296]	; (80067bc <main+0x234>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	4b48      	ldr	r3, [pc, #288]	; (80067bc <main+0x234>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f042 0210 	orr.w	r2, r2, #16
 80066a0:	601a      	str	r2, [r3, #0]
  //__HAL_UART_ENABLE_IT(&guiUart, UART_IT_TC);    // Enable UART Tx Complete interrupt
  HAL_UART_Receive_IT(&guiUart, guiUartReceiveBuff, UART_RX_DMA_BUFFER_SIZE ); // Set up the IT UART transmission to move the received
 80066a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066a6:	4946      	ldr	r1, [pc, #280]	; (80067c0 <main+0x238>)
 80066a8:	4844      	ldr	r0, [pc, #272]	; (80067bc <main+0x234>)
 80066aa:	f00c f821 	bl	80126f0 <HAL_UART_Receive_IT>
   * TIM7:  generate 0.5ms to use for 5ms main loop
   * TIM14: generate 255Hz pwm for Fan
   */

  //Start internal 1us timer
  HAL_TIM_Base_Start(&htim5);                // Start timer TIM5 for 1us timer
 80066ae:	4845      	ldr	r0, [pc, #276]	; (80067c4 <main+0x23c>)
 80066b0:	f00a fd14 	bl	80110dc <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start_IT(&htim7);             // Start timer TIM7 for half millisecond timer
 80066b4:	4844      	ldr	r0, [pc, #272]	; (80067c8 <main+0x240>)
 80066b6:	f00a fd81 	bl	80111bc <HAL_TIM_Base_Start_IT>
                                             // TIM7 is driven by APB1 clock of 108 MHz reload is set Prescale = 108, ARR= 499+1
                                             // for a 0.5 ms period (1/(10^6/500) * 10^3 = 0.5)

  //Start pwm for buzzer
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80066ba:	210c      	movs	r1, #12
 80066bc:	4843      	ldr	r0, [pc, #268]	; (80067cc <main+0x244>)
 80066be:	f00a fe57 	bl	8011370 <HAL_TIM_PWM_Start>

  //Start pwm for fan-ctrl
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80066c2:	2100      	movs	r1, #0
 80066c4:	4842      	ldr	r0, [pc, #264]	; (80067d0 <main+0x248>)
 80066c6:	f00a fe53 	bl	8011370 <HAL_TIM_PWM_Start>

  InitEepromTxQueue();
 80066ca:	f7fb fedd 	bl	8002488 <InitEepromTxQueue>

  InitUartTxQueue();     // Initialize queue for transmitting data to UART
 80066ce:	f7ff fa07 	bl	8005ae0 <InitUartTxQueue>

  UartPrintf("");
 80066d2:	4840      	ldr	r0, [pc, #256]	; (80067d4 <main+0x24c>)
 80066d4:	f7ff fb24 	bl	8005d20 <UartPrintf>

  InterpInit();          // Initialize command interpreter
 80066d8:	f7fe f996 	bl	8004a08 <InterpInit>

  RegisterAllCommands(); // Register commands with interpreter
 80066dc:	f7ff f870 	bl	80057c0 <RegisterAllCommands>

  PrintManagerInit();
 80066e0:	f7fe f9cc 	bl	8004a7c <PrintManagerInit>

  if( HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) !=  0xDEADBEEF )
 80066e4:	2100      	movs	r1, #0
 80066e6:	483c      	ldr	r0, [pc, #240]	; (80067d8 <main+0x250>)
 80066e8:	f009 f8b4 	bl	800f854 <HAL_RTCEx_BKUPRead>
 80066ec:	4603      	mov	r3, r0
 80066ee:	4a3b      	ldr	r2, [pc, #236]	; (80067dc <main+0x254>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d00a      	beq.n	800670a <main+0x182>
  {
	  Set_Time( 23, 15, 0 );
 80066f4:	2200      	movs	r2, #0
 80066f6:	210f      	movs	r1, #15
 80066f8:	2017      	movs	r0, #23
 80066fa:	f7ff fea9 	bl	8006450 <Set_Time>
	  Set_Date( RTC_WEEKDAY_TUESDAY, RTC_MONTH_SEPTEMBER, 28, 21 );
 80066fe:	2315      	movs	r3, #21
 8006700:	221c      	movs	r2, #28
 8006702:	2109      	movs	r1, #9
 8006704:	2002      	movs	r0, #2
 8006706:	f7ff fecf 	bl	80064a8 <Set_Date>
  }

  HAL_Delay(500);
 800670a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800670e:	f002 fd47 	bl	80091a0 <HAL_Delay>

  FRESULT res;                                          /* FatFs function common result code */
  uint32_t byteswritten;                                /* File write/read counts */
  uint8_t wtext[] = "Text line added at power up.\n";     /* File write buffer */
 8006712:	4b33      	ldr	r3, [pc, #204]	; (80067e0 <main+0x258>)
 8006714:	1d3c      	adds	r4, r7, #4
 8006716:	461d      	mov	r5, r3
 8006718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800671a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800671c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006720:	c407      	stmia	r4!, {r0, r1, r2}
 8006722:	8023      	strh	r3, [r4, #0]

  /*##-2- Register the file system object to the FatFs module ##############*/
  if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8006724:	2200      	movs	r2, #0
 8006726:	492f      	ldr	r1, [pc, #188]	; (80067e4 <main+0x25c>)
 8006728:	482f      	ldr	r0, [pc, #188]	; (80067e8 <main+0x260>)
 800672a:	f014 fbff 	bl	801af2c <f_mount>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d002      	beq.n	800673a <main+0x1b2>
  {
      /* FatFs Initialization Error */
	  Error_Handler();
 8006734:	f001 fb30 	bl	8007d98 <Error_Handler>
 8006738:	e06a      	b.n	8006810 <main+0x288>
  }
  else
  {
	  UartPrintf("File system Mounted Success!!!\r\n");
 800673a:	482c      	ldr	r0, [pc, #176]	; (80067ec <main+0x264>)
 800673c:	f7ff faf0 	bl	8005d20 <UartPrintf>
	  UartPrintf("Create, Open and Write text line to the file!!!\r\n");
 8006740:	482b      	ldr	r0, [pc, #172]	; (80067f0 <main+0x268>)
 8006742:	f7ff faed 	bl	8005d20 <UartPrintf>

	  /*##-4- Create and Open a new text file object with write access #####*/
	  res = f_open(&MyFile, "STM32.TXT", FA_OPEN_APPEND | FA_WRITE);
 8006746:	2232      	movs	r2, #50	; 0x32
 8006748:	492a      	ldr	r1, [pc, #168]	; (80067f4 <main+0x26c>)
 800674a:	482b      	ldr	r0, [pc, #172]	; (80067f8 <main+0x270>)
 800674c:	f014 fc34 	bl	801afb8 <f_open>
 8006750:	4603      	mov	r3, r0
 8006752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	  if( res != FR_OK)
 8006756:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800675a:	2b00      	cmp	r3, #0
 800675c:	d005      	beq.n	800676a <main+0x1e2>
	  {
	      /* 'STM32.TXT' file Open for write Error */
		  UartPrintf("File created error!!!\r\n");
 800675e:	4827      	ldr	r0, [pc, #156]	; (80067fc <main+0x274>)
 8006760:	f7ff fade 	bl	8005d20 <UartPrintf>
		  Error_Handler();
 8006764:	f001 fb18 	bl	8007d98 <Error_Handler>
 8006768:	e052      	b.n	8006810 <main+0x288>
	  }
	  else
	  {
		  /*##-5- Write data to the text file ################################*/
		  res = f_write(&MyFile, wtext, sizeof(wtext), (void *)&byteswritten);
 800676a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800676e:	1d39      	adds	r1, r7, #4
 8006770:	221e      	movs	r2, #30
 8006772:	4821      	ldr	r0, [pc, #132]	; (80067f8 <main+0x270>)
 8006774:	f014 fee8 	bl	801b548 <f_write>
 8006778:	4603      	mov	r3, r0
 800677a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		  if((byteswritten == 0) || (res != FR_OK))
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <main+0x204>
 8006784:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006788:	2b00      	cmp	r3, #0
 800678a:	d03b      	beq.n	8006804 <main+0x27c>
	      {
			  /* 'STM32.TXT' file Write or EOF Error */
			  UartPrintf("Card Write Error!!!\r\n");
 800678c:	481c      	ldr	r0, [pc, #112]	; (8006800 <main+0x278>)
 800678e:	f7ff fac7 	bl	8005d20 <UartPrintf>
			  Error_Handler();
 8006792:	f001 fb01 	bl	8007d98 <Error_Handler>
 8006796:	e03b      	b.n	8006810 <main+0x288>
 8006798:	2000710f 	.word	0x2000710f
 800679c:	20004100 	.word	0x20004100
 80067a0:	20004250 	.word	0x20004250
 80067a4:	08022628 	.word	0x08022628
 80067a8:	025dfbdf 	.word	0x025dfbdf
 80067ac:	20006b10 	.word	0x20006b10
 80067b0:	20004704 	.word	0x20004704
 80067b4:	20006910 	.word	0x20006910
 80067b8:	20006f10 	.word	0x20006f10
 80067bc:	2000480c 	.word	0x2000480c
 80067c0:	20006d10 	.word	0x20006d10
 80067c4:	20004574 	.word	0x20004574
 80067c8:	2000460c 	.word	0x2000460c
 80067cc:	20004528 	.word	0x20004528
 80067d0:	20004658 	.word	0x20004658
 80067d4:	08022458 	.word	0x08022458
 80067d8:	200042fc 	.word	0x200042fc
 80067dc:	deadbeef 	.word	0xdeadbeef
 80067e0:	080227a8 	.word	0x080227a8
 80067e4:	20007548 	.word	0x20007548
 80067e8:	20004890 	.word	0x20004890
 80067ec:	0802264c 	.word	0x0802264c
 80067f0:	08022670 	.word	0x08022670
 80067f4:	080226a4 	.word	0x080226a4
 80067f8:	200058c8 	.word	0x200058c8
 80067fc:	080226b0 	.word	0x080226b0
 8006800:	080226c8 	.word	0x080226c8
		  }
		  else
		  {
			  /*##-6- Close the open text file #################################*/
			  UartPrintf("Card Write Success and Close The File!!!\r\n");
 8006804:	48b1      	ldr	r0, [pc, #708]	; (8006acc <main+0x544>)
 8006806:	f7ff fa8b 	bl	8005d20 <UartPrintf>
			  f_close(&MyFile);
 800680a:	48b1      	ldr	r0, [pc, #708]	; (8006ad0 <main+0x548>)
 800680c:	f015 f8ae 	bl	801b96c <f_close>
		  }
	   }
  }

  Model_Init();
 8006810:	f7fd fca0 	bl	8004154 <Model_Init>

  Get_Time(); //get time from RTC to update the Model time and date
 8006814:	f7ff fe78 	bl	8006508 <Get_Time>

  Display_Init();
 8006818:	f7fb fbc8 	bl	8001fac <Display_Init>

  Set_Fan_ONOFF( true );
 800681c:	2001      	movs	r0, #1
 800681e:	f7fc fd9f 	bl	8003360 <Set_Fan_ONOFF>
  
  //Set_DAC_Voltage(1.8);  //GG 10/05/21 No need to Initialized DAC here

  UartPrintf("Initialization Complete -- Version: %s %s\n", swVersionStrings[CURRENT_SW_VERSION_ID], VERSION_DETAILS);
 8006822:	4bac      	ldr	r3, [pc, #688]	; (8006ad4 <main+0x54c>)
 8006824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006826:	4aac      	ldr	r2, [pc, #688]	; (8006ad8 <main+0x550>)
 8006828:	4619      	mov	r1, r3
 800682a:	48ac      	ldr	r0, [pc, #688]	; (8006adc <main+0x554>)
 800682c:	f7ff fa78 	bl	8005d20 <UartPrintf>
  UartPrintf("Minutes of In Services: %d\n", minuteCount);
 8006830:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006832:	48ab      	ldr	r0, [pc, #684]	; (8006ae0 <main+0x558>)
 8006834:	f7ff fa74 	bl	8005d20 <UartPrintf>
  
  fiveMsTick    = false; // Clear 5 ms tick right before entering while loop to ensure a full 5 ms between the first two
 8006838:	4baa      	ldr	r3, [pc, #680]	; (8006ae4 <main+0x55c>)
 800683a:	2200      	movs	r2, #0
 800683c:	701a      	strb	r2, [r3, #0]
  oneSecondTick = false;
 800683e:	4baa      	ldr	r3, [pc, #680]	; (8006ae8 <main+0x560>)
 8006840:	2200      	movs	r2, #0
 8006842:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//AIDAN CODE BEGINS HERE
	  tickNow = HAL_GetTick();
 8006844:	f002 fca0 	bl	8009188 <HAL_GetTick>
 8006848:	4603      	mov	r3, r0
 800684a:	4aa8      	ldr	r2, [pc, #672]	; (8006aec <main+0x564>)
 800684c:	6013      	str	r3, [r2, #0]
	  if (tickNow >= nextThOnTick) {
 800684e:	4ba7      	ldr	r3, [pc, #668]	; (8006aec <main+0x564>)
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	4ba7      	ldr	r3, [pc, #668]	; (8006af0 <main+0x568>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d31a      	bcc.n	8006890 <main+0x308>
		  Valve_1A_On();
 800685a:	f7fc fb41 	bl	8002ee0 <Valve_1A_On>
		  previousThOnTick = nextThOnTick;
 800685e:	4ba4      	ldr	r3, [pc, #656]	; (8006af0 <main+0x568>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4aa4      	ldr	r2, [pc, #656]	; (8006af4 <main+0x56c>)
 8006864:	6013      	str	r3, [r2, #0]
		  nextThOnTick = tickNow + period * 1000;
 8006866:	4ba1      	ldr	r3, [pc, #644]	; (8006aec <main+0x564>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	ee07 3a90 	vmov	s15, r3
 800686e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006872:	4ba1      	ldr	r3, [pc, #644]	; (8006af8 <main+0x570>)
 8006874:	edd3 7a00 	vldr	s15, [r3]
 8006878:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8006afc <main+0x574>
 800687c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006888:	ee17 2a90 	vmov	r2, s15
 800688c:	4b98      	ldr	r3, [pc, #608]	; (8006af0 <main+0x568>)
 800688e:	601a      	str	r2, [r3, #0]
	  }
	  if (tickNow >= nextThOffTick) {
 8006890:	4b96      	ldr	r3, [pc, #600]	; (8006aec <main+0x564>)
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	4b9a      	ldr	r3, [pc, #616]	; (8006b00 <main+0x578>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	429a      	cmp	r2, r3
 800689a:	d320      	bcc.n	80068de <main+0x356>
		  Valve_1A_Off();
 800689c:	f7fc fb32 	bl	8002f04 <Valve_1A_Off>
		  nextThOffTick = previousThOnTick + (period + period * thDutyCycle) * 1000;
 80068a0:	4b94      	ldr	r3, [pc, #592]	; (8006af4 <main+0x56c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	ee07 3a90 	vmov	s15, r3
 80068a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80068ac:	4b92      	ldr	r3, [pc, #584]	; (8006af8 <main+0x570>)
 80068ae:	edd3 6a00 	vldr	s13, [r3]
 80068b2:	4b94      	ldr	r3, [pc, #592]	; (8006b04 <main+0x57c>)
 80068b4:	edd3 7a00 	vldr	s15, [r3]
 80068b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80068bc:	4b8e      	ldr	r3, [pc, #568]	; (8006af8 <main+0x570>)
 80068be:	edd3 7a00 	vldr	s15, [r3]
 80068c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068c6:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8006afc <main+0x574>
 80068ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80068ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068d6:	ee17 2a90 	vmov	r2, s15
 80068da:	4b89      	ldr	r3, [pc, #548]	; (8006b00 <main+0x578>)
 80068dc:	601a      	str	r2, [r3, #0]
	  }
	  if (tickNow >= nextAbOnTick) {
 80068de:	4b83      	ldr	r3, [pc, #524]	; (8006aec <main+0x564>)
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	4b89      	ldr	r3, [pc, #548]	; (8006b08 <main+0x580>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d31f      	bcc.n	800692a <main+0x3a2>
		  Valve_1B_On();
 80068ea:	f7fc fb1d 	bl	8002f28 <Valve_1B_On>
		  nextAbOnTick = previousThOnTick + (period * (1 + abOffset)) * 1000;
 80068ee:	4b81      	ldr	r3, [pc, #516]	; (8006af4 <main+0x56c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	ee07 3a90 	vmov	s15, r3
 80068f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80068fa:	4b84      	ldr	r3, [pc, #528]	; (8006b0c <main+0x584>)
 80068fc:	edd3 7a00 	vldr	s15, [r3]
 8006900:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006904:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8006908:	4b7b      	ldr	r3, [pc, #492]	; (8006af8 <main+0x570>)
 800690a:	edd3 7a00 	vldr	s15, [r3]
 800690e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006912:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8006afc <main+0x574>
 8006916:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800691a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800691e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006922:	ee17 2a90 	vmov	r2, s15
 8006926:	4b78      	ldr	r3, [pc, #480]	; (8006b08 <main+0x580>)
 8006928:	601a      	str	r2, [r3, #0]
	  }
	  if (tickNow >= nextAbOffTick) {
 800692a:	4b70      	ldr	r3, [pc, #448]	; (8006aec <main+0x564>)
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	4b78      	ldr	r3, [pc, #480]	; (8006b10 <main+0x588>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d329      	bcc.n	800698a <main+0x402>
		  Valve_1B_Off();
 8006936:	f7fc fb0b 	bl	8002f50 <Valve_1B_Off>
		  nextAbOffTick = previousThOnTick + (period * (1 + abOffset) + period * thDutyCycle) * 1000;
 800693a:	4b6e      	ldr	r3, [pc, #440]	; (8006af4 <main+0x56c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	ee07 3a90 	vmov	s15, r3
 8006942:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006946:	4b71      	ldr	r3, [pc, #452]	; (8006b0c <main+0x584>)
 8006948:	edd3 7a00 	vldr	s15, [r3]
 800694c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006950:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8006954:	4b68      	ldr	r3, [pc, #416]	; (8006af8 <main+0x570>)
 8006956:	edd3 7a00 	vldr	s15, [r3]
 800695a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800695e:	4b66      	ldr	r3, [pc, #408]	; (8006af8 <main+0x570>)
 8006960:	ed93 6a00 	vldr	s12, [r3]
 8006964:	4b67      	ldr	r3, [pc, #412]	; (8006b04 <main+0x57c>)
 8006966:	edd3 7a00 	vldr	s15, [r3]
 800696a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800696e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006972:	eddf 6a62 	vldr	s13, [pc, #392]	; 8006afc <main+0x574>
 8006976:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800697a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800697e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006982:	ee17 2a90 	vmov	r2, s15
 8006986:	4b62      	ldr	r3, [pc, #392]	; (8006b10 <main+0x588>)
 8006988:	601a      	str	r2, [r3, #0]
	  }
//AIDAN CODE ENDS HERE
	  if( fiveMsTick == true ) // 5 ms processing
 800698a:	4b56      	ldr	r3, [pc, #344]	; (8006ae4 <main+0x55c>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d008      	beq.n	80069a4 <main+0x41c>
	  {
	      fiveMsTick = false;
 8006992:	4b54      	ldr	r3, [pc, #336]	; (8006ae4 <main+0x55c>)
 8006994:	2200      	movs	r2, #0
 8006996:	701a      	strb	r2, [r3, #0]

	      Monitor();
 8006998:	f7ff fdec 	bl	8006574 <Monitor>

	      Display_Manager();
 800699c:	f7fb fb2c 	bl	8001ff8 <Display_Manager>

	      PrintManager();
 80069a0:	f7fe f87e 	bl	8004aa0 <PrintManager>
	  }

	  if( oneSecondTick == true)
 80069a4:	4b50      	ldr	r3, [pc, #320]	; (8006ae8 <main+0x560>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d045      	beq.n	8006a38 <main+0x4b0>
	  {
		  oneSecondTick = false;
 80069ac:	4b4e      	ldr	r3, [pc, #312]	; (8006ae8 <main+0x560>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	701a      	strb	r2, [r3, #0]
		  Get_Time();
 80069b2:	f7ff fda9 	bl	8006508 <Get_Time>
		  Display_Request_Refresh();
 80069b6:	f7fb fcef 	bl	8002398 <Display_Request_Refresh>

		  if(gstModel.bDisplayTime == true)
 80069ba:	4b56      	ldr	r3, [pc, #344]	; (8006b14 <main+0x58c>)
 80069bc:	795b      	ldrb	r3, [r3, #5]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d007      	beq.n	80069d2 <main+0x44a>
		  {
			  UartPrintf("%s\n", gstModel.atime);
 80069c2:	4955      	ldr	r1, [pc, #340]	; (8006b18 <main+0x590>)
 80069c4:	4855      	ldr	r0, [pc, #340]	; (8006b1c <main+0x594>)
 80069c6:	f7ff f9ab 	bl	8005d20 <UartPrintf>
			  UartPrintf("%s\n", gstModel.adate);
 80069ca:	4955      	ldr	r1, [pc, #340]	; (8006b20 <main+0x598>)
 80069cc:	4853      	ldr	r0, [pc, #332]	; (8006b1c <main+0x594>)
 80069ce:	f7ff f9a7 	bl	8005d20 <UartPrintf>
		  }

		  if(gstModel.bPressureData == true)
 80069d2:	4b50      	ldr	r3, [pc, #320]	; (8006b14 <main+0x58c>)
 80069d4:	7a5b      	ldrb	r3, [r3, #9]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d02e      	beq.n	8006a38 <main+0x4b0>
		  {
			  //send back Pressure data from 4 sensors
			  GuiUartPrintf("%9.4f,%9.4f,%9.4f, %9.4f\n",
						     GetCalcMmhgSensorPressure1( ), GetCalcMmhgSensorPressure2( ),
 80069da:	f7fa fc8d 	bl	80012f8 <GetCalcMmhgSensorPressure1>
 80069de:	ee10 3a10 	vmov	r3, s0
			  GuiUartPrintf("%9.4f,%9.4f,%9.4f, %9.4f\n",
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7f9 fde8 	bl	80005b8 <__aeabi_f2d>
 80069e8:	4682      	mov	sl, r0
 80069ea:	468b      	mov	fp, r1
						     GetCalcMmhgSensorPressure1( ), GetCalcMmhgSensorPressure2( ),
 80069ec:	f7fa fbb8 	bl	8001160 <GetCalcMmhgSensorPressure2>
 80069f0:	ee10 3a10 	vmov	r3, s0
			  GuiUartPrintf("%9.4f,%9.4f,%9.4f, %9.4f\n",
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7f9 fddf 	bl	80005b8 <__aeabi_f2d>
 80069fa:	4604      	mov	r4, r0
 80069fc:	460d      	mov	r5, r1
						     GetCalcMmhgSensorPressure3( ), GetCalcMmhgSensorPressure4( ) );
 80069fe:	f7fa fbf3 	bl	80011e8 <GetCalcMmhgSensorPressure3>
 8006a02:	ee10 3a10 	vmov	r3, s0
			  GuiUartPrintf("%9.4f,%9.4f,%9.4f, %9.4f\n",
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7f9 fdd6 	bl	80005b8 <__aeabi_f2d>
 8006a0c:	4680      	mov	r8, r0
 8006a0e:	4689      	mov	r9, r1
						     GetCalcMmhgSensorPressure3( ), GetCalcMmhgSensorPressure4( ) );
 8006a10:	f7fa fc2e 	bl	8001270 <GetCalcMmhgSensorPressure4>
 8006a14:	ee10 3a10 	vmov	r3, s0
			  GuiUartPrintf("%9.4f,%9.4f,%9.4f, %9.4f\n",
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7f9 fdcd 	bl	80005b8 <__aeabi_f2d>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	460b      	mov	r3, r1
 8006a22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a26:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006a2a:	e9cd 4500 	strd	r4, r5, [sp]
 8006a2e:	4652      	mov	r2, sl
 8006a30:	465b      	mov	r3, fp
 8006a32:	483c      	ldr	r0, [pc, #240]	; (8006b24 <main+0x59c>)
 8006a34:	f7ff f9f2 	bl	8005e1c <GuiUartPrintf>
		  }
	  }


	  if(bPfcLoadEnable == true)
 8006a38:	4b3b      	ldr	r3, [pc, #236]	; (8006b28 <main+0x5a0>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d01f      	beq.n	8006a80 <main+0x4f8>
	  {
		  //Debounce PFC Load Enable signal for 30ms
		  if( uPfcLoadEnTimeDB && (Get_SysTick() - uPfcLoadEnTimeDB >= SIGNAL_DEBOUNCE_30MS))
 8006a40:	4b3a      	ldr	r3, [pc, #232]	; (8006b2c <main+0x5a4>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d01b      	beq.n	8006a80 <main+0x4f8>
 8006a48:	f7ff fa9e 	bl	8005f88 <Get_SysTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	4b37      	ldr	r3, [pc, #220]	; (8006b2c <main+0x5a4>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b1d      	cmp	r3, #29
 8006a56:	d913      	bls.n	8006a80 <main+0x4f8>
		  {
			  if(IsPfcLoadEnLow() == true)
 8006a58:	f7ff fa9e 	bl	8005f98 <IsPfcLoadEnLow>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d008      	beq.n	8006a74 <main+0x4ec>
			  {
				  SetPfcLoadEnable( true );
 8006a62:	2001      	movs	r0, #1
 8006a64:	f7fc fe1a 	bl	800369c <SetPfcLoadEnable>
				  HAL_GPIO_WritePin(GPIOD, LED_Y_Pin, true);  //added for troubleshoot purposes GG 100521
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a6e:	4830      	ldr	r0, [pc, #192]	; (8006b30 <main+0x5a8>)
 8006a70:	f004 f92c 	bl	800accc <HAL_GPIO_WritePin>
			  }

			  uPfcLoadEnTimeDB = 0;
 8006a74:	4b2d      	ldr	r3, [pc, #180]	; (8006b2c <main+0x5a4>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]
			  bPfcLoadEnable   = false;
 8006a7a:	4b2b      	ldr	r3, [pc, #172]	; (8006b28 <main+0x5a0>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(bPowerFailWarn == true)
 8006a80:	4b2c      	ldr	r3, [pc, #176]	; (8006b34 <main+0x5ac>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d019      	beq.n	8006abc <main+0x534>
	  {
		  //Debounce Power Failure Warning signal for 30ms
		  if( uPowerFailWarnTimeDB && (Get_SysTick() - uPowerFailWarnTimeDB >= SIGNAL_DEBOUNCE_30MS))
 8006a88:	4b2b      	ldr	r3, [pc, #172]	; (8006b38 <main+0x5b0>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d015      	beq.n	8006abc <main+0x534>
 8006a90:	f7ff fa7a 	bl	8005f88 <Get_SysTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	4b28      	ldr	r3, [pc, #160]	; (8006b38 <main+0x5b0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	2b1d      	cmp	r3, #29
 8006a9e:	d90d      	bls.n	8006abc <main+0x534>
		  {
			  if(IsPfcPowerFailWarnLow() == true)
 8006aa0:	f7ff fa8c 	bl	8005fbc <IsPfcPowerFailWarnLow>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <main+0x528>
			  {
				  SetPfcPowerFailWarn( true );
 8006aaa:	2001      	movs	r0, #1
 8006aac:	f7fc fde6 	bl	800367c <SetPfcPowerFailWarn>
			  }

			  uPowerFailWarnTimeDB = 0;
 8006ab0:	4b21      	ldr	r3, [pc, #132]	; (8006b38 <main+0x5b0>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]
			  bPowerFailWarn   = false;
 8006ab6:	4b1f      	ldr	r3, [pc, #124]	; (8006b34 <main+0x5ac>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	701a      	strb	r2, [r3, #0]
	  }

	  // Feed the dog.
	  //HAL_IWDG_Refresh( &hiwdg );
	  
	  Refresh_Hardware_WDT();
 8006abc:	f7ff fa90 	bl	8005fe0 <Refresh_Hardware_WDT>

	  //Debug command process
  	  CommandProcessing();
 8006ac0:	f7ff fabc 	bl	800603c <CommandProcessing>

  	  //Gui Command process
  	  GuiCommandProcessing();
 8006ac4:	f7ff fae8 	bl	8006098 <GuiCommandProcessing>
	  tickNow = HAL_GetTick();
 8006ac8:	e6bc      	b.n	8006844 <main+0x2bc>
 8006aca:	bf00      	nop
 8006acc:	080226e0 	.word	0x080226e0
 8006ad0:	200058c8 	.word	0x200058c8
 8006ad4:	20000200 	.word	0x20000200
 8006ad8:	0802270c 	.word	0x0802270c
 8006adc:	08022740 	.word	0x08022740
 8006ae0:	0802276c 	.word	0x0802276c
 8006ae4:	20007114 	.word	0x20007114
 8006ae8:	20007118 	.word	0x20007118
 8006aec:	200068f8 	.word	0x200068f8
 8006af0:	20006900 	.word	0x20006900
 8006af4:	200068fc 	.word	0x200068fc
 8006af8:	200001f4 	.word	0x200001f4
 8006afc:	447a0000 	.word	0x447a0000
 8006b00:	20006904 	.word	0x20006904
 8006b04:	200001f8 	.word	0x200001f8
 8006b08:	20006908 	.word	0x20006908
 8006b0c:	200001fc 	.word	0x200001fc
 8006b10:	2000690c 	.word	0x2000690c
 8006b14:	20000c60 	.word	0x20000c60
 8006b18:	20000c6b 	.word	0x20000c6b
 8006b1c:	08022788 	.word	0x08022788
 8006b20:	20000c75 	.word	0x20000c75
 8006b24:	0802278c 	.word	0x0802278c
 8006b28:	20007126 	.word	0x20007126
 8006b2c:	20007128 	.word	0x20007128
 8006b30:	40020c00 	.word	0x40020c00
 8006b34:	2000712c 	.word	0x2000712c
 8006b38:	20007130 	.word	0x20007130

08006b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b0b4      	sub	sp, #208	; 0xd0
 8006b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006b42:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006b46:	2230      	movs	r2, #48	; 0x30
 8006b48:	2100      	movs	r1, #0
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f015 fe34 	bl	801c7b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006b50:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006b54:	2200      	movs	r2, #0
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	605a      	str	r2, [r3, #4]
 8006b5a:	609a      	str	r2, [r3, #8]
 8006b5c:	60da      	str	r2, [r3, #12]
 8006b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006b60:	f107 030c 	add.w	r3, r7, #12
 8006b64:	2280      	movs	r2, #128	; 0x80
 8006b66:	2100      	movs	r1, #0
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f015 fe25 	bl	801c7b8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8006b6e:	f007 faad 	bl	800e0cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8006b72:	4b4a      	ldr	r3, [pc, #296]	; (8006c9c <SystemClock_Config+0x160>)
 8006b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b76:	4a49      	ldr	r2, [pc, #292]	; (8006c9c <SystemClock_Config+0x160>)
 8006b78:	f023 0318 	bic.w	r3, r3, #24
 8006b7c:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b7e:	4b47      	ldr	r3, [pc, #284]	; (8006c9c <SystemClock_Config+0x160>)
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	4a46      	ldr	r2, [pc, #280]	; (8006c9c <SystemClock_Config+0x160>)
 8006b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b88:	6413      	str	r3, [r2, #64]	; 0x40
 8006b8a:	4b44      	ldr	r3, [pc, #272]	; (8006c9c <SystemClock_Config+0x160>)
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b92:	60bb      	str	r3, [r7, #8]
 8006b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006b96:	4b42      	ldr	r3, [pc, #264]	; (8006ca0 <SystemClock_Config+0x164>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006b9e:	4a40      	ldr	r2, [pc, #256]	; (8006ca0 <SystemClock_Config+0x164>)
 8006ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ba4:	6013      	str	r3, [r2, #0]
 8006ba6:	4b3e      	ldr	r3, [pc, #248]	; (8006ca0 <SystemClock_Config+0x164>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006bae:	607b      	str	r3, [r7, #4]
 8006bb0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8006bb2:	2305      	movs	r3, #5
 8006bb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006bbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006bcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006bd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 108;
 8006bda:	236c      	movs	r3, #108	; 0x6c
 8006bdc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006be0:	2302      	movs	r3, #2
 8006be2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006be6:	2302      	movs	r3, #2
 8006be8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006bec:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f007 facb 	bl	800e18c <HAL_RCC_OscConfig>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8006bfc:	f001 f8cc 	bl	8007d98 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006c00:	f007 fa74 	bl	800e0ec <HAL_PWREx_EnableOverDrive>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8006c0a:	f001 f8c5 	bl	8007d98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006c0e:	230f      	movs	r3, #15
 8006c10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006c14:	2302      	movs	r3, #2
 8006c16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006c2e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006c32:	2103      	movs	r1, #3
 8006c34:	4618      	mov	r0, r3
 8006c36:	f007 fd4d 	bl	800e6d4 <HAL_RCC_ClockConfig>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8006c40:	f001 f8aa 	bl	8007d98 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART5
 8006c44:	4b17      	ldr	r3, [pc, #92]	; (8006ca4 <SystemClock_Config+0x168>)
 8006c46:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8006c48:	23c0      	movs	r3, #192	; 0xc0
 8006c4a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8006c50:	2303      	movs	r3, #3
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8006c54:	2301      	movs	r3, #1
 8006c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c5c:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8006c62:	2300      	movs	r3, #0
 8006c64:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8006c66:	2300      	movs	r3, #0
 8006c68:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8006c72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c80:	f107 030c 	add.w	r3, r7, #12
 8006c84:	4618      	mov	r0, r3
 8006c86:	f007 ff4b 	bl	800eb20 <HAL_RCCEx_PeriphCLKConfig>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8006c90:	f001 f882 	bl	8007d98 <Error_Handler>
  }
}
 8006c94:	bf00      	nop
 8006c96:	37d0      	adds	r7, #208	; 0xd0
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	40023800 	.word	0x40023800
 8006ca0:	40007000 	.word	0x40007000
 8006ca4:	0421b420 	.word	0x0421b420

08006ca8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006cae:	463b      	mov	r3, r7
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	605a      	str	r2, [r3, #4]
 8006cb6:	609a      	str	r2, [r3, #8]
 8006cb8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8006cba:	4b4b      	ldr	r3, [pc, #300]	; (8006de8 <MX_ADC1_Init+0x140>)
 8006cbc:	4a4b      	ldr	r2, [pc, #300]	; (8006dec <MX_ADC1_Init+0x144>)
 8006cbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006cc0:	4b49      	ldr	r3, [pc, #292]	; (8006de8 <MX_ADC1_Init+0x140>)
 8006cc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006cc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006cc8:	4b47      	ldr	r3, [pc, #284]	; (8006de8 <MX_ADC1_Init+0x140>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8006cce:	4b46      	ldr	r3, [pc, #280]	; (8006de8 <MX_ADC1_Init+0x140>)
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006cd4:	4b44      	ldr	r3, [pc, #272]	; (8006de8 <MX_ADC1_Init+0x140>)
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006cda:	4b43      	ldr	r3, [pc, #268]	; (8006de8 <MX_ADC1_Init+0x140>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006ce2:	4b41      	ldr	r3, [pc, #260]	; (8006de8 <MX_ADC1_Init+0x140>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006ce8:	4b3f      	ldr	r3, [pc, #252]	; (8006de8 <MX_ADC1_Init+0x140>)
 8006cea:	4a41      	ldr	r2, [pc, #260]	; (8006df0 <MX_ADC1_Init+0x148>)
 8006cec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006cee:	4b3e      	ldr	r3, [pc, #248]	; (8006de8 <MX_ADC1_Init+0x140>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8006cf4:	4b3c      	ldr	r3, [pc, #240]	; (8006de8 <MX_ADC1_Init+0x140>)
 8006cf6:	2207      	movs	r2, #7
 8006cf8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006cfa:	4b3b      	ldr	r3, [pc, #236]	; (8006de8 <MX_ADC1_Init+0x140>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006d02:	4b39      	ldr	r3, [pc, #228]	; (8006de8 <MX_ADC1_Init+0x140>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006d08:	4837      	ldr	r0, [pc, #220]	; (8006de8 <MX_ADC1_Init+0x140>)
 8006d0a:	f002 fa6d 	bl	80091e8 <HAL_ADC_Init>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8006d14:	f001 f840 	bl	8007d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006d18:	2305      	movs	r3, #5
 8006d1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006d20:	2300      	movs	r3, #0
 8006d22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006d24:	463b      	mov	r3, r7
 8006d26:	4619      	mov	r1, r3
 8006d28:	482f      	ldr	r0, [pc, #188]	; (8006de8 <MX_ADC1_Init+0x140>)
 8006d2a:	f002 fcd7 	bl	80096dc <HAL_ADC_ConfigChannel>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8006d34:	f001 f830 	bl	8007d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006d38:	2306      	movs	r3, #6
 8006d3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006d40:	463b      	mov	r3, r7
 8006d42:	4619      	mov	r1, r3
 8006d44:	4828      	ldr	r0, [pc, #160]	; (8006de8 <MX_ADC1_Init+0x140>)
 8006d46:	f002 fcc9 	bl	80096dc <HAL_ADC_ConfigChannel>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8006d50:	f001 f822 	bl	8007d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8006d54:	2307      	movs	r3, #7
 8006d56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006d5c:	463b      	mov	r3, r7
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4821      	ldr	r0, [pc, #132]	; (8006de8 <MX_ADC1_Init+0x140>)
 8006d62:	f002 fcbb 	bl	80096dc <HAL_ADC_ConfigChannel>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8006d6c:	f001 f814 	bl	8007d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006d70:	2308      	movs	r3, #8
 8006d72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8006d74:	2304      	movs	r3, #4
 8006d76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006d78:	463b      	mov	r3, r7
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	481a      	ldr	r0, [pc, #104]	; (8006de8 <MX_ADC1_Init+0x140>)
 8006d7e:	f002 fcad 	bl	80096dc <HAL_ADC_ConfigChannel>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8006d88:	f001 f806 	bl	8007d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8006d8c:	2309      	movs	r3, #9
 8006d8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8006d90:	2305      	movs	r3, #5
 8006d92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006d94:	463b      	mov	r3, r7
 8006d96:	4619      	mov	r1, r3
 8006d98:	4813      	ldr	r0, [pc, #76]	; (8006de8 <MX_ADC1_Init+0x140>)
 8006d9a:	f002 fc9f 	bl	80096dc <HAL_ADC_ConfigChannel>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8006da4:	f000 fff8 	bl	8007d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006da8:	230e      	movs	r3, #14
 8006daa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8006dac:	2306      	movs	r3, #6
 8006dae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006db0:	463b      	mov	r3, r7
 8006db2:	4619      	mov	r1, r3
 8006db4:	480c      	ldr	r0, [pc, #48]	; (8006de8 <MX_ADC1_Init+0x140>)
 8006db6:	f002 fc91 	bl	80096dc <HAL_ADC_ConfigChannel>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8006dc0:	f000 ffea 	bl	8007d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006dc4:	230f      	movs	r3, #15
 8006dc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8006dc8:	2307      	movs	r3, #7
 8006dca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006dcc:	463b      	mov	r3, r7
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4805      	ldr	r0, [pc, #20]	; (8006de8 <MX_ADC1_Init+0x140>)
 8006dd2:	f002 fc83 	bl	80096dc <HAL_ADC_ConfigChannel>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8006ddc:	f000 ffdc 	bl	8007d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006de0:	bf00      	nop
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	20004100 	.word	0x20004100
 8006dec:	40012000 	.word	0x40012000
 8006df0:	0f000001 	.word	0x0f000001

08006df4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b08a      	sub	sp, #40	; 0x28
 8006df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8006dfa:	f107 0310 	add.w	r3, r7, #16
 8006dfe:	2200      	movs	r2, #0
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	605a      	str	r2, [r3, #4]
 8006e04:	609a      	str	r2, [r3, #8]
 8006e06:	60da      	str	r2, [r3, #12]
 8006e08:	611a      	str	r2, [r3, #16]
 8006e0a:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006e0c:	463b      	mov	r3, r7
 8006e0e:	2200      	movs	r2, #0
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	605a      	str	r2, [r3, #4]
 8006e14:	609a      	str	r2, [r3, #8]
 8006e16:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8006e18:	4b5d      	ldr	r3, [pc, #372]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006e1a:	4a5e      	ldr	r2, [pc, #376]	; (8006f94 <MX_ADC3_Init+0x1a0>)
 8006e1c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006e1e:	4b5c      	ldr	r3, [pc, #368]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006e20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e24:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8006e26:	4b5a      	ldr	r3, [pc, #360]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8006e2c:	4b58      	ldr	r3, [pc, #352]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006e2e:	2201      	movs	r2, #1
 8006e30:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8006e32:	4b57      	ldr	r3, [pc, #348]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006e34:	2201      	movs	r2, #1
 8006e36:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8006e38:	4b55      	ldr	r3, [pc, #340]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006e40:	4b53      	ldr	r3, [pc, #332]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006e46:	4b52      	ldr	r3, [pc, #328]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006e48:	4a53      	ldr	r2, [pc, #332]	; (8006f98 <MX_ADC3_Init+0x1a4>)
 8006e4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006e4c:	4b50      	ldr	r3, [pc, #320]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 8;
 8006e52:	4b4f      	ldr	r3, [pc, #316]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006e54:	2208      	movs	r2, #8
 8006e56:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8006e58:	4b4d      	ldr	r3, [pc, #308]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006e60:	4b4b      	ldr	r3, [pc, #300]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006e62:	2200      	movs	r2, #0
 8006e64:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8006e66:	484a      	ldr	r0, [pc, #296]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006e68:	f002 f9be 	bl	80091e8 <HAL_ADC_Init>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 8006e72:	f000 ff91 	bl	8007d98 <Error_Handler>
  }
  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8006e76:	4b49      	ldr	r3, [pc, #292]	; (8006f9c <MX_ADC3_Init+0x1a8>)
 8006e78:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = 0;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 8006e82:	2300      	movs	r3, #0
 8006e84:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.ITMode = DISABLE;
 8006e86:	2300      	movs	r3, #0
 8006e88:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc3, &AnalogWDGConfig) != HAL_OK)
 8006e8c:	f107 0310 	add.w	r3, r7, #16
 8006e90:	4619      	mov	r1, r3
 8006e92:	483f      	ldr	r0, [pc, #252]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006e94:	f002 fd6c 	bl	8009970 <HAL_ADC_AnalogWDGConfig>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8006e9e:	f000 ff7b 	bl	8007d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006eae:	463b      	mov	r3, r7
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4837      	ldr	r0, [pc, #220]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006eb4:	f002 fc12 	bl	80096dc <HAL_ADC_ConfigChannel>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8006ebe:	f000 ff6b 	bl	8007d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006eca:	463b      	mov	r3, r7
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4830      	ldr	r0, [pc, #192]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006ed0:	f002 fc04 	bl	80096dc <HAL_ADC_ConfigChannel>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8006eda:	f000 ff5d 	bl	8007d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006ede:	2302      	movs	r3, #2
 8006ee0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006ee6:	463b      	mov	r3, r7
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4829      	ldr	r0, [pc, #164]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006eec:	f002 fbf6 	bl	80096dc <HAL_ADC_ConfigChannel>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8006ef6:	f000 ff4f 	bl	8007d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006efa:	2303      	movs	r3, #3
 8006efc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8006efe:	2304      	movs	r3, #4
 8006f00:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006f02:	463b      	mov	r3, r7
 8006f04:	4619      	mov	r1, r3
 8006f06:	4822      	ldr	r0, [pc, #136]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006f08:	f002 fbe8 	bl	80096dc <HAL_ADC_ConfigChannel>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <MX_ADC3_Init+0x122>
  {
    Error_Handler();
 8006f12:	f000 ff41 	bl	8007d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8006f16:	2309      	movs	r3, #9
 8006f18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8006f1a:	2305      	movs	r3, #5
 8006f1c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006f1e:	463b      	mov	r3, r7
 8006f20:	4619      	mov	r1, r3
 8006f22:	481b      	ldr	r0, [pc, #108]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006f24:	f002 fbda 	bl	80096dc <HAL_ADC_ConfigChannel>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <MX_ADC3_Init+0x13e>
  {
    Error_Handler();
 8006f2e:	f000 ff33 	bl	8007d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006f32:	230a      	movs	r3, #10
 8006f34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8006f36:	2306      	movs	r3, #6
 8006f38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006f3a:	463b      	mov	r3, r7
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	4814      	ldr	r0, [pc, #80]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006f40:	f002 fbcc 	bl	80096dc <HAL_ADC_ConfigChannel>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d001      	beq.n	8006f4e <MX_ADC3_Init+0x15a>
  {
    Error_Handler();
 8006f4a:	f000 ff25 	bl	8007d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8006f4e:	230b      	movs	r3, #11
 8006f50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8006f52:	2307      	movs	r3, #7
 8006f54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006f56:	463b      	mov	r3, r7
 8006f58:	4619      	mov	r1, r3
 8006f5a:	480d      	ldr	r0, [pc, #52]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006f5c:	f002 fbbe 	bl	80096dc <HAL_ADC_ConfigChannel>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <MX_ADC3_Init+0x176>
  {
    Error_Handler();
 8006f66:	f000 ff17 	bl	8007d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006f6a:	230e      	movs	r3, #14
 8006f6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8006f6e:	2308      	movs	r3, #8
 8006f70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006f72:	463b      	mov	r3, r7
 8006f74:	4619      	mov	r1, r3
 8006f76:	4806      	ldr	r0, [pc, #24]	; (8006f90 <MX_ADC3_Init+0x19c>)
 8006f78:	f002 fbb0 	bl	80096dc <HAL_ADC_ConfigChannel>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <MX_ADC3_Init+0x192>
  {
    Error_Handler();
 8006f82:	f000 ff09 	bl	8007d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8006f86:	bf00      	nop
 8006f88:	3728      	adds	r7, #40	; 0x28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	20004148 	.word	0x20004148
 8006f94:	40012200 	.word	0x40012200
 8006f98:	0f000001 	.word	0x0f000001
 8006f9c:	00800200 	.word	0x00800200

08006fa0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8006fa6:	463b      	mov	r3, r7
 8006fa8:	2200      	movs	r2, #0
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8006fae:	4b0f      	ldr	r3, [pc, #60]	; (8006fec <MX_DAC_Init+0x4c>)
 8006fb0:	4a0f      	ldr	r2, [pc, #60]	; (8006ff0 <MX_DAC_Init+0x50>)
 8006fb2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8006fb4:	480d      	ldr	r0, [pc, #52]	; (8006fec <MX_DAC_Init+0x4c>)
 8006fb6:	f002 ffc8 	bl	8009f4a <HAL_DAC_Init>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8006fc0:	f000 feea 	bl	8007d98 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006fcc:	463b      	mov	r3, r7
 8006fce:	2200      	movs	r2, #0
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4806      	ldr	r0, [pc, #24]	; (8006fec <MX_DAC_Init+0x4c>)
 8006fd4:	f003 f852 	bl	800a07c <HAL_DAC_ConfigChannel>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8006fde:	f000 fedb 	bl	8007d98 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8006fe2:	bf00      	nop
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20004250 	.word	0x20004250
 8006ff0:	40007400 	.word	0x40007400

08006ff4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */
  Switches_Power_Onoff(true);
 8006ff8:	2001      	movs	r0, #1
 8006ffa:	f7fd faa1 	bl	8004540 <Switches_Power_Onoff>
  LCD_Power_Onoff(true);
 8006ffe:	2001      	movs	r0, #1
 8007000:	f7fc fd8e 	bl	8003b20 <LCD_Power_Onoff>
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007004:	4b1b      	ldr	r3, [pc, #108]	; (8007074 <MX_I2C2_Init+0x80>)
 8007006:	4a1c      	ldr	r2, [pc, #112]	; (8007078 <MX_I2C2_Init+0x84>)
 8007008:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x306034D1;
 800700a:	4b1a      	ldr	r3, [pc, #104]	; (8007074 <MX_I2C2_Init+0x80>)
 800700c:	4a1b      	ldr	r2, [pc, #108]	; (800707c <MX_I2C2_Init+0x88>)
 800700e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8007010:	4b18      	ldr	r3, [pc, #96]	; (8007074 <MX_I2C2_Init+0x80>)
 8007012:	2200      	movs	r2, #0
 8007014:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007016:	4b17      	ldr	r3, [pc, #92]	; (8007074 <MX_I2C2_Init+0x80>)
 8007018:	2201      	movs	r2, #1
 800701a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800701c:	4b15      	ldr	r3, [pc, #84]	; (8007074 <MX_I2C2_Init+0x80>)
 800701e:	2200      	movs	r2, #0
 8007020:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8007022:	4b14      	ldr	r3, [pc, #80]	; (8007074 <MX_I2C2_Init+0x80>)
 8007024:	2200      	movs	r2, #0
 8007026:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007028:	4b12      	ldr	r3, [pc, #72]	; (8007074 <MX_I2C2_Init+0x80>)
 800702a:	2200      	movs	r2, #0
 800702c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800702e:	4b11      	ldr	r3, [pc, #68]	; (8007074 <MX_I2C2_Init+0x80>)
 8007030:	2200      	movs	r2, #0
 8007032:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007034:	4b0f      	ldr	r3, [pc, #60]	; (8007074 <MX_I2C2_Init+0x80>)
 8007036:	2200      	movs	r2, #0
 8007038:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800703a:	480e      	ldr	r0, [pc, #56]	; (8007074 <MX_I2C2_Init+0x80>)
 800703c:	f003 fe92 	bl	800ad64 <HAL_I2C_Init>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <MX_I2C2_Init+0x56>
  {
    Error_Handler();
 8007046:	f000 fea7 	bl	8007d98 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800704a:	2100      	movs	r1, #0
 800704c:	4809      	ldr	r0, [pc, #36]	; (8007074 <MX_I2C2_Init+0x80>)
 800704e:	f005 fdbb 	bl	800cbc8 <HAL_I2CEx_ConfigAnalogFilter>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <MX_I2C2_Init+0x68>
  {
    Error_Handler();
 8007058:	f000 fe9e 	bl	8007d98 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800705c:	2100      	movs	r1, #0
 800705e:	4805      	ldr	r0, [pc, #20]	; (8007074 <MX_I2C2_Init+0x80>)
 8007060:	f005 fdfd 	bl	800cc5e <HAL_I2CEx_ConfigDigitalFilter>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <MX_I2C2_Init+0x7a>
  {
    Error_Handler();
 800706a:	f000 fe95 	bl	8007d98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800706e:	bf00      	nop
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	20004264 	.word	0x20004264
 8007078:	40005800 	.word	0x40005800
 800707c:	306034d1 	.word	0x306034d1

08007080 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8007084:	4b1b      	ldr	r3, [pc, #108]	; (80070f4 <MX_I2C3_Init+0x74>)
 8007086:	4a1c      	ldr	r2, [pc, #112]	; (80070f8 <MX_I2C3_Init+0x78>)
 8007088:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 800708a:	4b1a      	ldr	r3, [pc, #104]	; (80070f4 <MX_I2C3_Init+0x74>)
 800708c:	4a1b      	ldr	r2, [pc, #108]	; (80070fc <MX_I2C3_Init+0x7c>)
 800708e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8007090:	4b18      	ldr	r3, [pc, #96]	; (80070f4 <MX_I2C3_Init+0x74>)
 8007092:	2200      	movs	r2, #0
 8007094:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007096:	4b17      	ldr	r3, [pc, #92]	; (80070f4 <MX_I2C3_Init+0x74>)
 8007098:	2201      	movs	r2, #1
 800709a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800709c:	4b15      	ldr	r3, [pc, #84]	; (80070f4 <MX_I2C3_Init+0x74>)
 800709e:	2200      	movs	r2, #0
 80070a0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80070a2:	4b14      	ldr	r3, [pc, #80]	; (80070f4 <MX_I2C3_Init+0x74>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80070a8:	4b12      	ldr	r3, [pc, #72]	; (80070f4 <MX_I2C3_Init+0x74>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80070ae:	4b11      	ldr	r3, [pc, #68]	; (80070f4 <MX_I2C3_Init+0x74>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80070b4:	4b0f      	ldr	r3, [pc, #60]	; (80070f4 <MX_I2C3_Init+0x74>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80070ba:	480e      	ldr	r0, [pc, #56]	; (80070f4 <MX_I2C3_Init+0x74>)
 80070bc:	f003 fe52 	bl	800ad64 <HAL_I2C_Init>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80070c6:	f000 fe67 	bl	8007d98 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80070ca:	2100      	movs	r1, #0
 80070cc:	4809      	ldr	r0, [pc, #36]	; (80070f4 <MX_I2C3_Init+0x74>)
 80070ce:	f005 fd7b 	bl	800cbc8 <HAL_I2CEx_ConfigAnalogFilter>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d001      	beq.n	80070dc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80070d8:	f000 fe5e 	bl	8007d98 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80070dc:	2100      	movs	r1, #0
 80070de:	4805      	ldr	r0, [pc, #20]	; (80070f4 <MX_I2C3_Init+0x74>)
 80070e0:	f005 fdbd 	bl	800cc5e <HAL_I2CEx_ConfigDigitalFilter>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80070ea:	f000 fe55 	bl	8007d98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80070ee:	bf00      	nop
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	200042b0 	.word	0x200042b0
 80070f8:	40005c00 	.word	0x40005c00
 80070fc:	20404768 	.word	0x20404768

08007100 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */
#endif
  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007104:	4b0f      	ldr	r3, [pc, #60]	; (8007144 <MX_RTC_Init+0x44>)
 8007106:	4a10      	ldr	r2, [pc, #64]	; (8007148 <MX_RTC_Init+0x48>)
 8007108:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800710a:	4b0e      	ldr	r3, [pc, #56]	; (8007144 <MX_RTC_Init+0x44>)
 800710c:	2200      	movs	r2, #0
 800710e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007110:	4b0c      	ldr	r3, [pc, #48]	; (8007144 <MX_RTC_Init+0x44>)
 8007112:	227f      	movs	r2, #127	; 0x7f
 8007114:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007116:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <MX_RTC_Init+0x44>)
 8007118:	22ff      	movs	r2, #255	; 0xff
 800711a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800711c:	4b09      	ldr	r3, [pc, #36]	; (8007144 <MX_RTC_Init+0x44>)
 800711e:	2200      	movs	r2, #0
 8007120:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007122:	4b08      	ldr	r3, [pc, #32]	; (8007144 <MX_RTC_Init+0x44>)
 8007124:	2200      	movs	r2, #0
 8007126:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007128:	4b06      	ldr	r3, [pc, #24]	; (8007144 <MX_RTC_Init+0x44>)
 800712a:	2200      	movs	r2, #0
 800712c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800712e:	4805      	ldr	r0, [pc, #20]	; (8007144 <MX_RTC_Init+0x44>)
 8007130:	f008 f840 	bl	800f1b4 <HAL_RTC_Init>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800713a:	f000 fe2d 	bl	8007d98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
#endif
  /* USER CODE END RTC_Init 2 */

}
 800713e:	bf00      	nop
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	200042fc 	.word	0x200042fc
 8007148:	40002800 	.word	0x40002800

0800714c <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 800714c:	b480      	push	{r7}
 800714e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8007150:	4b0d      	ldr	r3, [pc, #52]	; (8007188 <MX_SDMMC2_SD_Init+0x3c>)
 8007152:	4a0e      	ldr	r2, [pc, #56]	; (800718c <MX_SDMMC2_SD_Init+0x40>)
 8007154:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8007156:	4b0c      	ldr	r3, [pc, #48]	; (8007188 <MX_SDMMC2_SD_Init+0x3c>)
 8007158:	2200      	movs	r2, #0
 800715a:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800715c:	4b0a      	ldr	r3, [pc, #40]	; (8007188 <MX_SDMMC2_SD_Init+0x3c>)
 800715e:	2200      	movs	r2, #0
 8007160:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007162:	4b09      	ldr	r3, [pc, #36]	; (8007188 <MX_SDMMC2_SD_Init+0x3c>)
 8007164:	2200      	movs	r2, #0
 8007166:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8007168:	4b07      	ldr	r3, [pc, #28]	; (8007188 <MX_SDMMC2_SD_Init+0x3c>)
 800716a:	2200      	movs	r2, #0
 800716c:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 800716e:	4b06      	ldr	r3, [pc, #24]	; (8007188 <MX_SDMMC2_SD_Init+0x3c>)
 8007170:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007174:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 2;
 8007176:	4b04      	ldr	r3, [pc, #16]	; (8007188 <MX_SDMMC2_SD_Init+0x3c>)
 8007178:	2202      	movs	r2, #2
 800717a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800717c:	bf00      	nop
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	2000431c 	.word	0x2000431c
 800718c:	40011c00 	.word	0x40011c00

08007190 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007194:	4b1b      	ldr	r3, [pc, #108]	; (8007204 <MX_SPI1_Init+0x74>)
 8007196:	4a1c      	ldr	r2, [pc, #112]	; (8007208 <MX_SPI1_Init+0x78>)
 8007198:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800719a:	4b1a      	ldr	r3, [pc, #104]	; (8007204 <MX_SPI1_Init+0x74>)
 800719c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80071a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80071a2:	4b18      	ldr	r3, [pc, #96]	; (8007204 <MX_SPI1_Init+0x74>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80071a8:	4b16      	ldr	r3, [pc, #88]	; (8007204 <MX_SPI1_Init+0x74>)
 80071aa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80071ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80071b0:	4b14      	ldr	r3, [pc, #80]	; (8007204 <MX_SPI1_Init+0x74>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80071b6:	4b13      	ldr	r3, [pc, #76]	; (8007204 <MX_SPI1_Init+0x74>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80071bc:	4b11      	ldr	r3, [pc, #68]	; (8007204 <MX_SPI1_Init+0x74>)
 80071be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071c4:	4b0f      	ldr	r3, [pc, #60]	; (8007204 <MX_SPI1_Init+0x74>)
 80071c6:	2200      	movs	r2, #0
 80071c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80071ca:	4b0e      	ldr	r3, [pc, #56]	; (8007204 <MX_SPI1_Init+0x74>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80071d0:	4b0c      	ldr	r3, [pc, #48]	; (8007204 <MX_SPI1_Init+0x74>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071d6:	4b0b      	ldr	r3, [pc, #44]	; (8007204 <MX_SPI1_Init+0x74>)
 80071d8:	2200      	movs	r2, #0
 80071da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80071dc:	4b09      	ldr	r3, [pc, #36]	; (8007204 <MX_SPI1_Init+0x74>)
 80071de:	2207      	movs	r2, #7
 80071e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80071e2:	4b08      	ldr	r3, [pc, #32]	; (8007204 <MX_SPI1_Init+0x74>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80071e8:	4b06      	ldr	r3, [pc, #24]	; (8007204 <MX_SPI1_Init+0x74>)
 80071ea:	2208      	movs	r2, #8
 80071ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80071ee:	4805      	ldr	r0, [pc, #20]	; (8007204 <MX_SPI1_Init+0x74>)
 80071f0:	f009 fe71 	bl	8010ed6 <HAL_SPI_Init>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80071fa:	f000 fdcd 	bl	8007d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80071fe:	bf00      	nop
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	20004460 	.word	0x20004460
 8007208:	40013000 	.word	0x40013000

0800720c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8007210:	4b1b      	ldr	r3, [pc, #108]	; (8007280 <MX_SPI3_Init+0x74>)
 8007212:	4a1c      	ldr	r2, [pc, #112]	; (8007284 <MX_SPI3_Init+0x78>)
 8007214:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007216:	4b1a      	ldr	r3, [pc, #104]	; (8007280 <MX_SPI3_Init+0x74>)
 8007218:	f44f 7282 	mov.w	r2, #260	; 0x104
 800721c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800721e:	4b18      	ldr	r3, [pc, #96]	; (8007280 <MX_SPI3_Init+0x74>)
 8007220:	2200      	movs	r2, #0
 8007222:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8007224:	4b16      	ldr	r3, [pc, #88]	; (8007280 <MX_SPI3_Init+0x74>)
 8007226:	f44f 7240 	mov.w	r2, #768	; 0x300
 800722a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800722c:	4b14      	ldr	r3, [pc, #80]	; (8007280 <MX_SPI3_Init+0x74>)
 800722e:	2200      	movs	r2, #0
 8007230:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007232:	4b13      	ldr	r3, [pc, #76]	; (8007280 <MX_SPI3_Init+0x74>)
 8007234:	2200      	movs	r2, #0
 8007236:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007238:	4b11      	ldr	r3, [pc, #68]	; (8007280 <MX_SPI3_Init+0x74>)
 800723a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800723e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007240:	4b0f      	ldr	r3, [pc, #60]	; (8007280 <MX_SPI3_Init+0x74>)
 8007242:	2200      	movs	r2, #0
 8007244:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007246:	4b0e      	ldr	r3, [pc, #56]	; (8007280 <MX_SPI3_Init+0x74>)
 8007248:	2200      	movs	r2, #0
 800724a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800724c:	4b0c      	ldr	r3, [pc, #48]	; (8007280 <MX_SPI3_Init+0x74>)
 800724e:	2200      	movs	r2, #0
 8007250:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007252:	4b0b      	ldr	r3, [pc, #44]	; (8007280 <MX_SPI3_Init+0x74>)
 8007254:	2200      	movs	r2, #0
 8007256:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007258:	4b09      	ldr	r3, [pc, #36]	; (8007280 <MX_SPI3_Init+0x74>)
 800725a:	2207      	movs	r2, #7
 800725c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800725e:	4b08      	ldr	r3, [pc, #32]	; (8007280 <MX_SPI3_Init+0x74>)
 8007260:	2200      	movs	r2, #0
 8007262:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007264:	4b06      	ldr	r3, [pc, #24]	; (8007280 <MX_SPI3_Init+0x74>)
 8007266:	2208      	movs	r2, #8
 8007268:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800726a:	4805      	ldr	r0, [pc, #20]	; (8007280 <MX_SPI3_Init+0x74>)
 800726c:	f009 fe33 	bl	8010ed6 <HAL_SPI_Init>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007276:	f000 fd8f 	bl	8007d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800727a:	bf00      	nop
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	200044c4 	.word	0x200044c4
 8007284:	40003c00 	.word	0x40003c00

08007288 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b08e      	sub	sp, #56	; 0x38
 800728c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800728e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007292:	2200      	movs	r2, #0
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	605a      	str	r2, [r3, #4]
 8007298:	609a      	str	r2, [r3, #8]
 800729a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800729c:	f107 031c 	add.w	r3, r7, #28
 80072a0:	2200      	movs	r2, #0
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	605a      	str	r2, [r3, #4]
 80072a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80072a8:	463b      	mov	r3, r7
 80072aa:	2200      	movs	r2, #0
 80072ac:	601a      	str	r2, [r3, #0]
 80072ae:	605a      	str	r2, [r3, #4]
 80072b0:	609a      	str	r2, [r3, #8]
 80072b2:	60da      	str	r2, [r3, #12]
 80072b4:	611a      	str	r2, [r3, #16]
 80072b6:	615a      	str	r2, [r3, #20]
 80072b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80072ba:	4b2d      	ldr	r3, [pc, #180]	; (8007370 <MX_TIM2_Init+0xe8>)
 80072bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80072c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108;
 80072c2:	4b2b      	ldr	r3, [pc, #172]	; (8007370 <MX_TIM2_Init+0xe8>)
 80072c4:	226c      	movs	r2, #108	; 0x6c
 80072c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80072c8:	4b29      	ldr	r3, [pc, #164]	; (8007370 <MX_TIM2_Init+0xe8>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 80072ce:	4b28      	ldr	r3, [pc, #160]	; (8007370 <MX_TIM2_Init+0xe8>)
 80072d0:	22f9      	movs	r2, #249	; 0xf9
 80072d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80072d4:	4b26      	ldr	r3, [pc, #152]	; (8007370 <MX_TIM2_Init+0xe8>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80072da:	4b25      	ldr	r3, [pc, #148]	; (8007370 <MX_TIM2_Init+0xe8>)
 80072dc:	2200      	movs	r2, #0
 80072de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80072e0:	4823      	ldr	r0, [pc, #140]	; (8007370 <MX_TIM2_Init+0xe8>)
 80072e2:	f009 fea3 	bl	801102c <HAL_TIM_Base_Init>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80072ec:	f000 fd54 	bl	8007d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80072f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80072f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80072fa:	4619      	mov	r1, r3
 80072fc:	481c      	ldr	r0, [pc, #112]	; (8007370 <MX_TIM2_Init+0xe8>)
 80072fe:	f00a fb61 	bl	80119c4 <HAL_TIM_ConfigClockSource>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8007308:	f000 fd46 	bl	8007d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800730c:	4818      	ldr	r0, [pc, #96]	; (8007370 <MX_TIM2_Init+0xe8>)
 800730e:	f009 ffcd 	bl	80112ac <HAL_TIM_PWM_Init>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8007318:	f000 fd3e 	bl	8007d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800731c:	2300      	movs	r3, #0
 800731e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007320:	2300      	movs	r3, #0
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007324:	f107 031c 	add.w	r3, r7, #28
 8007328:	4619      	mov	r1, r3
 800732a:	4811      	ldr	r0, [pc, #68]	; (8007370 <MX_TIM2_Init+0xe8>)
 800732c:	f00a fff6 	bl	801231c <HAL_TIMEx_MasterConfigSynchronization>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8007336:	f000 fd2f 	bl	8007d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800733a:	2360      	movs	r3, #96	; 0x60
 800733c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007342:	2300      	movs	r3, #0
 8007344:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007346:	2300      	movs	r3, #0
 8007348:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800734a:	463b      	mov	r3, r7
 800734c:	220c      	movs	r2, #12
 800734e:	4619      	mov	r1, r3
 8007350:	4807      	ldr	r0, [pc, #28]	; (8007370 <MX_TIM2_Init+0xe8>)
 8007352:	f00a fa27 	bl	80117a4 <HAL_TIM_PWM_ConfigChannel>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800735c:	f000 fd1c 	bl	8007d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007360:	4803      	ldr	r0, [pc, #12]	; (8007370 <MX_TIM2_Init+0xe8>)
 8007362:	f001 f9cf 	bl	8008704 <HAL_TIM_MspPostInit>

}
 8007366:	bf00      	nop
 8007368:	3738      	adds	r7, #56	; 0x38
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	20004528 	.word	0x20004528

08007374 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b088      	sub	sp, #32
 8007378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800737a:	f107 0310 	add.w	r3, r7, #16
 800737e:	2200      	movs	r2, #0
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	605a      	str	r2, [r3, #4]
 8007384:	609a      	str	r2, [r3, #8]
 8007386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007388:	1d3b      	adds	r3, r7, #4
 800738a:	2200      	movs	r2, #0
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	605a      	str	r2, [r3, #4]
 8007390:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8007392:	4b1d      	ldr	r3, [pc, #116]	; (8007408 <MX_TIM5_Init+0x94>)
 8007394:	4a1d      	ldr	r2, [pc, #116]	; (800740c <MX_TIM5_Init+0x98>)
 8007396:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108;
 8007398:	4b1b      	ldr	r3, [pc, #108]	; (8007408 <MX_TIM5_Init+0x94>)
 800739a:	226c      	movs	r2, #108	; 0x6c
 800739c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800739e:	4b1a      	ldr	r3, [pc, #104]	; (8007408 <MX_TIM5_Init+0x94>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 80073a4:	4b18      	ldr	r3, [pc, #96]	; (8007408 <MX_TIM5_Init+0x94>)
 80073a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073aa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80073ac:	4b16      	ldr	r3, [pc, #88]	; (8007408 <MX_TIM5_Init+0x94>)
 80073ae:	2200      	movs	r2, #0
 80073b0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80073b2:	4b15      	ldr	r3, [pc, #84]	; (8007408 <MX_TIM5_Init+0x94>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80073b8:	4813      	ldr	r0, [pc, #76]	; (8007408 <MX_TIM5_Init+0x94>)
 80073ba:	f009 fe37 	bl	801102c <HAL_TIM_Base_Init>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80073c4:	f000 fce8 	bl	8007d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80073c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80073ce:	f107 0310 	add.w	r3, r7, #16
 80073d2:	4619      	mov	r1, r3
 80073d4:	480c      	ldr	r0, [pc, #48]	; (8007408 <MX_TIM5_Init+0x94>)
 80073d6:	f00a faf5 	bl	80119c4 <HAL_TIM_ConfigClockSource>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80073e0:	f000 fcda 	bl	8007d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80073e4:	2300      	movs	r3, #0
 80073e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80073e8:	2300      	movs	r3, #0
 80073ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80073ec:	1d3b      	adds	r3, r7, #4
 80073ee:	4619      	mov	r1, r3
 80073f0:	4805      	ldr	r0, [pc, #20]	; (8007408 <MX_TIM5_Init+0x94>)
 80073f2:	f00a ff93 	bl	801231c <HAL_TIMEx_MasterConfigSynchronization>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d001      	beq.n	8007400 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80073fc:	f000 fccc 	bl	8007d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8007400:	bf00      	nop
 8007402:	3720      	adds	r7, #32
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	20004574 	.word	0x20004574
 800740c:	40000c00 	.word	0x40000c00

08007410 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007416:	1d3b      	adds	r3, r7, #4
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	605a      	str	r2, [r3, #4]
 800741e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8007420:	4b15      	ldr	r3, [pc, #84]	; (8007478 <MX_TIM6_Init+0x68>)
 8007422:	4a16      	ldr	r2, [pc, #88]	; (800747c <MX_TIM6_Init+0x6c>)
 8007424:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 54000;
 8007426:	4b14      	ldr	r3, [pc, #80]	; (8007478 <MX_TIM6_Init+0x68>)
 8007428:	f24d 22f0 	movw	r2, #54000	; 0xd2f0
 800742c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800742e:	4b12      	ldr	r3, [pc, #72]	; (8007478 <MX_TIM6_Init+0x68>)
 8007430:	2200      	movs	r2, #0
 8007432:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8007434:	4b10      	ldr	r3, [pc, #64]	; (8007478 <MX_TIM6_Init+0x68>)
 8007436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800743a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800743c:	4b0e      	ldr	r3, [pc, #56]	; (8007478 <MX_TIM6_Init+0x68>)
 800743e:	2200      	movs	r2, #0
 8007440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007442:	480d      	ldr	r0, [pc, #52]	; (8007478 <MX_TIM6_Init+0x68>)
 8007444:	f009 fdf2 	bl	801102c <HAL_TIM_Base_Init>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800744e:	f000 fca3 	bl	8007d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007452:	2300      	movs	r3, #0
 8007454:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007456:	2300      	movs	r3, #0
 8007458:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800745a:	1d3b      	adds	r3, r7, #4
 800745c:	4619      	mov	r1, r3
 800745e:	4806      	ldr	r0, [pc, #24]	; (8007478 <MX_TIM6_Init+0x68>)
 8007460:	f00a ff5c 	bl	801231c <HAL_TIMEx_MasterConfigSynchronization>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800746a:	f000 fc95 	bl	8007d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800746e:	bf00      	nop
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	200045c0 	.word	0x200045c0
 800747c:	40001000 	.word	0x40001000

08007480 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007486:	1d3b      	adds	r3, r7, #4
 8007488:	2200      	movs	r2, #0
 800748a:	601a      	str	r2, [r3, #0]
 800748c:	605a      	str	r2, [r3, #4]
 800748e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8007490:	4b14      	ldr	r3, [pc, #80]	; (80074e4 <MX_TIM7_Init+0x64>)
 8007492:	4a15      	ldr	r2, [pc, #84]	; (80074e8 <MX_TIM7_Init+0x68>)
 8007494:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 108;
 8007496:	4b13      	ldr	r3, [pc, #76]	; (80074e4 <MX_TIM7_Init+0x64>)
 8007498:	226c      	movs	r2, #108	; 0x6c
 800749a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800749c:	4b11      	ldr	r3, [pc, #68]	; (80074e4 <MX_TIM7_Init+0x64>)
 800749e:	2200      	movs	r2, #0
 80074a0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 499;
 80074a2:	4b10      	ldr	r3, [pc, #64]	; (80074e4 <MX_TIM7_Init+0x64>)
 80074a4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80074a8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80074aa:	4b0e      	ldr	r3, [pc, #56]	; (80074e4 <MX_TIM7_Init+0x64>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80074b0:	480c      	ldr	r0, [pc, #48]	; (80074e4 <MX_TIM7_Init+0x64>)
 80074b2:	f009 fdbb 	bl	801102c <HAL_TIM_Base_Init>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80074bc:	f000 fc6c 	bl	8007d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80074c0:	2300      	movs	r3, #0
 80074c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80074c4:	2300      	movs	r3, #0
 80074c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80074c8:	1d3b      	adds	r3, r7, #4
 80074ca:	4619      	mov	r1, r3
 80074cc:	4805      	ldr	r0, [pc, #20]	; (80074e4 <MX_TIM7_Init+0x64>)
 80074ce:	f00a ff25 	bl	801231c <HAL_TIMEx_MasterConfigSynchronization>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80074d8:	f000 fc5e 	bl	8007d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80074dc:	bf00      	nop
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	2000460c 	.word	0x2000460c
 80074e8:	40001400 	.word	0x40001400

080074ec <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b088      	sub	sp, #32
 80074f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80074f2:	1d3b      	adds	r3, r7, #4
 80074f4:	2200      	movs	r2, #0
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	605a      	str	r2, [r3, #4]
 80074fa:	609a      	str	r2, [r3, #8]
 80074fc:	60da      	str	r2, [r3, #12]
 80074fe:	611a      	str	r2, [r3, #16]
 8007500:	615a      	str	r2, [r3, #20]
 8007502:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8007504:	4b1e      	ldr	r3, [pc, #120]	; (8007580 <MX_TIM14_Init+0x94>)
 8007506:	4a1f      	ldr	r2, [pc, #124]	; (8007584 <MX_TIM14_Init+0x98>)
 8007508:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 108;
 800750a:	4b1d      	ldr	r3, [pc, #116]	; (8007580 <MX_TIM14_Init+0x94>)
 800750c:	226c      	movs	r2, #108	; 0x6c
 800750e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007510:	4b1b      	ldr	r3, [pc, #108]	; (8007580 <MX_TIM14_Init+0x94>)
 8007512:	2200      	movs	r2, #0
 8007514:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 3920;
 8007516:	4b1a      	ldr	r3, [pc, #104]	; (8007580 <MX_TIM14_Init+0x94>)
 8007518:	f44f 6275 	mov.w	r2, #3920	; 0xf50
 800751c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800751e:	4b18      	ldr	r3, [pc, #96]	; (8007580 <MX_TIM14_Init+0x94>)
 8007520:	2200      	movs	r2, #0
 8007522:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007524:	4b16      	ldr	r3, [pc, #88]	; (8007580 <MX_TIM14_Init+0x94>)
 8007526:	2200      	movs	r2, #0
 8007528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800752a:	4815      	ldr	r0, [pc, #84]	; (8007580 <MX_TIM14_Init+0x94>)
 800752c:	f009 fd7e 	bl	801102c <HAL_TIM_Base_Init>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8007536:	f000 fc2f 	bl	8007d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800753a:	4811      	ldr	r0, [pc, #68]	; (8007580 <MX_TIM14_Init+0x94>)
 800753c:	f009 feb6 	bl	80112ac <HAL_TIM_PWM_Init>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8007546:	f000 fc27 	bl	8007d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800754a:	2360      	movs	r3, #96	; 0x60
 800754c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800754e:	2300      	movs	r3, #0
 8007550:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007552:	2300      	movs	r3, #0
 8007554:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007556:	2300      	movs	r3, #0
 8007558:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800755a:	1d3b      	adds	r3, r7, #4
 800755c:	2200      	movs	r2, #0
 800755e:	4619      	mov	r1, r3
 8007560:	4807      	ldr	r0, [pc, #28]	; (8007580 <MX_TIM14_Init+0x94>)
 8007562:	f00a f91f 	bl	80117a4 <HAL_TIM_PWM_ConfigChannel>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800756c:	f000 fc14 	bl	8007d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8007570:	4803      	ldr	r0, [pc, #12]	; (8007580 <MX_TIM14_Init+0x94>)
 8007572:	f001 f8c7 	bl	8008704 <HAL_TIM_MspPostInit>

}
 8007576:	bf00      	nop
 8007578:	3720      	adds	r7, #32
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20004658 	.word	0x20004658
 8007584:	40002000 	.word	0x40002000

08007588 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800758c:	4b14      	ldr	r3, [pc, #80]	; (80075e0 <MX_UART5_Init+0x58>)
 800758e:	4a15      	ldr	r2, [pc, #84]	; (80075e4 <MX_UART5_Init+0x5c>)
 8007590:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8007592:	4b13      	ldr	r3, [pc, #76]	; (80075e0 <MX_UART5_Init+0x58>)
 8007594:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007598:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800759a:	4b11      	ldr	r3, [pc, #68]	; (80075e0 <MX_UART5_Init+0x58>)
 800759c:	2200      	movs	r2, #0
 800759e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80075a0:	4b0f      	ldr	r3, [pc, #60]	; (80075e0 <MX_UART5_Init+0x58>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80075a6:	4b0e      	ldr	r3, [pc, #56]	; (80075e0 <MX_UART5_Init+0x58>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80075ac:	4b0c      	ldr	r3, [pc, #48]	; (80075e0 <MX_UART5_Init+0x58>)
 80075ae:	220c      	movs	r2, #12
 80075b0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80075b2:	4b0b      	ldr	r3, [pc, #44]	; (80075e0 <MX_UART5_Init+0x58>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80075b8:	4b09      	ldr	r3, [pc, #36]	; (80075e0 <MX_UART5_Init+0x58>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80075be:	4b08      	ldr	r3, [pc, #32]	; (80075e0 <MX_UART5_Init+0x58>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80075c4:	4b06      	ldr	r3, [pc, #24]	; (80075e0 <MX_UART5_Init+0x58>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80075ca:	4805      	ldr	r0, [pc, #20]	; (80075e0 <MX_UART5_Init+0x58>)
 80075cc:	f00a ff52 	bl	8012474 <HAL_UART_Init>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80075d6:	f000 fbdf 	bl	8007d98 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80075da:	bf00      	nop
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20004704 	.word	0x20004704
 80075e4:	40005000 	.word	0x40005000

080075e8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80075ec:	4b14      	ldr	r3, [pc, #80]	; (8007640 <MX_UART7_Init+0x58>)
 80075ee:	4a15      	ldr	r2, [pc, #84]	; (8007644 <MX_UART7_Init+0x5c>)
 80075f0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80075f2:	4b13      	ldr	r3, [pc, #76]	; (8007640 <MX_UART7_Init+0x58>)
 80075f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80075f8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80075fa:	4b11      	ldr	r3, [pc, #68]	; (8007640 <MX_UART7_Init+0x58>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8007600:	4b0f      	ldr	r3, [pc, #60]	; (8007640 <MX_UART7_Init+0x58>)
 8007602:	2200      	movs	r2, #0
 8007604:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8007606:	4b0e      	ldr	r3, [pc, #56]	; (8007640 <MX_UART7_Init+0x58>)
 8007608:	2200      	movs	r2, #0
 800760a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800760c:	4b0c      	ldr	r3, [pc, #48]	; (8007640 <MX_UART7_Init+0x58>)
 800760e:	220c      	movs	r2, #12
 8007610:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007612:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <MX_UART7_Init+0x58>)
 8007614:	2200      	movs	r2, #0
 8007616:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8007618:	4b09      	ldr	r3, [pc, #36]	; (8007640 <MX_UART7_Init+0x58>)
 800761a:	2200      	movs	r2, #0
 800761c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800761e:	4b08      	ldr	r3, [pc, #32]	; (8007640 <MX_UART7_Init+0x58>)
 8007620:	2200      	movs	r2, #0
 8007622:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007624:	4b06      	ldr	r3, [pc, #24]	; (8007640 <MX_UART7_Init+0x58>)
 8007626:	2200      	movs	r2, #0
 8007628:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800762a:	4805      	ldr	r0, [pc, #20]	; (8007640 <MX_UART7_Init+0x58>)
 800762c:	f00a ff22 	bl	8012474 <HAL_UART_Init>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8007636:	f000 fbaf 	bl	8007d98 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800763a:	bf00      	nop
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20004788 	.word	0x20004788
 8007644:	40007800 	.word	0x40007800

08007648 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800764c:	4b14      	ldr	r3, [pc, #80]	; (80076a0 <MX_UART8_Init+0x58>)
 800764e:	4a15      	ldr	r2, [pc, #84]	; (80076a4 <MX_UART8_Init+0x5c>)
 8007650:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8007652:	4b13      	ldr	r3, [pc, #76]	; (80076a0 <MX_UART8_Init+0x58>)
 8007654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007658:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800765a:	4b11      	ldr	r3, [pc, #68]	; (80076a0 <MX_UART8_Init+0x58>)
 800765c:	2200      	movs	r2, #0
 800765e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8007660:	4b0f      	ldr	r3, [pc, #60]	; (80076a0 <MX_UART8_Init+0x58>)
 8007662:	2200      	movs	r2, #0
 8007664:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8007666:	4b0e      	ldr	r3, [pc, #56]	; (80076a0 <MX_UART8_Init+0x58>)
 8007668:	2200      	movs	r2, #0
 800766a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800766c:	4b0c      	ldr	r3, [pc, #48]	; (80076a0 <MX_UART8_Init+0x58>)
 800766e:	220c      	movs	r2, #12
 8007670:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007672:	4b0b      	ldr	r3, [pc, #44]	; (80076a0 <MX_UART8_Init+0x58>)
 8007674:	2200      	movs	r2, #0
 8007676:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8007678:	4b09      	ldr	r3, [pc, #36]	; (80076a0 <MX_UART8_Init+0x58>)
 800767a:	2200      	movs	r2, #0
 800767c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800767e:	4b08      	ldr	r3, [pc, #32]	; (80076a0 <MX_UART8_Init+0x58>)
 8007680:	2200      	movs	r2, #0
 8007682:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007684:	4b06      	ldr	r3, [pc, #24]	; (80076a0 <MX_UART8_Init+0x58>)
 8007686:	2200      	movs	r2, #0
 8007688:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800768a:	4805      	ldr	r0, [pc, #20]	; (80076a0 <MX_UART8_Init+0x58>)
 800768c:	f00a fef2 	bl	8012474 <HAL_UART_Init>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8007696:	f000 fb7f 	bl	8007d98 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800769a:	bf00      	nop
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	2000480c 	.word	0x2000480c
 80076a4:	40007c00 	.word	0x40007c00

080076a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80076ae:	4b22      	ldr	r3, [pc, #136]	; (8007738 <MX_DMA_Init+0x90>)
 80076b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b2:	4a21      	ldr	r2, [pc, #132]	; (8007738 <MX_DMA_Init+0x90>)
 80076b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80076b8:	6313      	str	r3, [r2, #48]	; 0x30
 80076ba:	4b1f      	ldr	r3, [pc, #124]	; (8007738 <MX_DMA_Init+0x90>)
 80076bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076c2:	607b      	str	r3, [r7, #4]
 80076c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80076c6:	4b1c      	ldr	r3, [pc, #112]	; (8007738 <MX_DMA_Init+0x90>)
 80076c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ca:	4a1b      	ldr	r2, [pc, #108]	; (8007738 <MX_DMA_Init+0x90>)
 80076cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076d0:	6313      	str	r3, [r2, #48]	; 0x30
 80076d2:	4b19      	ldr	r3, [pc, #100]	; (8007738 <MX_DMA_Init+0x90>)
 80076d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076da:	603b      	str	r3, [r7, #0]
 80076dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80076de:	2200      	movs	r2, #0
 80076e0:	2100      	movs	r1, #0
 80076e2:	200c      	movs	r0, #12
 80076e4:	f002 fbfb 	bl	8009ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80076e8:	200c      	movs	r0, #12
 80076ea:	f002 fc14 	bl	8009f16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 80076ee:	2200      	movs	r2, #0
 80076f0:	2102      	movs	r1, #2
 80076f2:	2038      	movs	r0, #56	; 0x38
 80076f4:	f002 fbf3 	bl	8009ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80076f8:	2038      	movs	r0, #56	; 0x38
 80076fa:	f002 fc0c 	bl	8009f16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80076fe:	2200      	movs	r2, #0
 8007700:	2100      	movs	r1, #0
 8007702:	2039      	movs	r0, #57	; 0x39
 8007704:	f002 fbeb 	bl	8009ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8007708:	2039      	movs	r0, #57	; 0x39
 800770a:	f002 fc04 	bl	8009f16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800770e:	2200      	movs	r2, #0
 8007710:	2100      	movs	r1, #0
 8007712:	203c      	movs	r0, #60	; 0x3c
 8007714:	f002 fbe3 	bl	8009ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8007718:	203c      	movs	r0, #60	; 0x3c
 800771a:	f002 fbfc 	bl	8009f16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 2, 0);
 800771e:	2200      	movs	r2, #0
 8007720:	2102      	movs	r1, #2
 8007722:	2044      	movs	r0, #68	; 0x44
 8007724:	f002 fbdb 	bl	8009ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8007728:	2044      	movs	r0, #68	; 0x44
 800772a:	f002 fbf4 	bl	8009f16 <HAL_NVIC_EnableIRQ>

}
 800772e:	bf00      	nop
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	40023800 	.word	0x40023800

0800773c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08e      	sub	sp, #56	; 0x38
 8007740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007746:	2200      	movs	r2, #0
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	605a      	str	r2, [r3, #4]
 800774c:	609a      	str	r2, [r3, #8]
 800774e:	60da      	str	r2, [r3, #12]
 8007750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007752:	4bb0      	ldr	r3, [pc, #704]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 8007754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007756:	4aaf      	ldr	r2, [pc, #700]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 8007758:	f043 0310 	orr.w	r3, r3, #16
 800775c:	6313      	str	r3, [r2, #48]	; 0x30
 800775e:	4bad      	ldr	r3, [pc, #692]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 8007760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007762:	f003 0310 	and.w	r3, r3, #16
 8007766:	623b      	str	r3, [r7, #32]
 8007768:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800776a:	4baa      	ldr	r3, [pc, #680]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 800776c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776e:	4aa9      	ldr	r2, [pc, #676]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 8007770:	f043 0304 	orr.w	r3, r3, #4
 8007774:	6313      	str	r3, [r2, #48]	; 0x30
 8007776:	4ba7      	ldr	r3, [pc, #668]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 8007778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777a:	f003 0304 	and.w	r3, r3, #4
 800777e:	61fb      	str	r3, [r7, #28]
 8007780:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007782:	4ba4      	ldr	r3, [pc, #656]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 8007784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007786:	4aa3      	ldr	r2, [pc, #652]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 8007788:	f043 0320 	orr.w	r3, r3, #32
 800778c:	6313      	str	r3, [r2, #48]	; 0x30
 800778e:	4ba1      	ldr	r3, [pc, #644]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 8007790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007792:	f003 0320 	and.w	r3, r3, #32
 8007796:	61bb      	str	r3, [r7, #24]
 8007798:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800779a:	4b9e      	ldr	r3, [pc, #632]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 800779c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779e:	4a9d      	ldr	r2, [pc, #628]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 80077a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a4:	6313      	str	r3, [r2, #48]	; 0x30
 80077a6:	4b9b      	ldr	r3, [pc, #620]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 80077a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ae:	617b      	str	r3, [r7, #20]
 80077b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80077b2:	4b98      	ldr	r3, [pc, #608]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 80077b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b6:	4a97      	ldr	r2, [pc, #604]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 80077b8:	f043 0301 	orr.w	r3, r3, #1
 80077bc:	6313      	str	r3, [r2, #48]	; 0x30
 80077be:	4b95      	ldr	r3, [pc, #596]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 80077c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	613b      	str	r3, [r7, #16]
 80077c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80077ca:	4b92      	ldr	r3, [pc, #584]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 80077cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ce:	4a91      	ldr	r2, [pc, #580]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 80077d0:	f043 0302 	orr.w	r3, r3, #2
 80077d4:	6313      	str	r3, [r2, #48]	; 0x30
 80077d6:	4b8f      	ldr	r3, [pc, #572]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 80077d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80077e2:	4b8c      	ldr	r3, [pc, #560]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 80077e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e6:	4a8b      	ldr	r2, [pc, #556]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 80077e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ec:	6313      	str	r3, [r2, #48]	; 0x30
 80077ee:	4b89      	ldr	r3, [pc, #548]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 80077f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f6:	60bb      	str	r3, [r7, #8]
 80077f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80077fa:	4b86      	ldr	r3, [pc, #536]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 80077fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fe:	4a85      	ldr	r2, [pc, #532]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 8007800:	f043 0308 	orr.w	r3, r3, #8
 8007804:	6313      	str	r3, [r2, #48]	; 0x30
 8007806:	4b83      	ldr	r3, [pc, #524]	; (8007a14 <MX_GPIO_Init+0x2d8>)
 8007808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780a:	f003 0308 	and.w	r3, r3, #8
 800780e:	607b      	str	r3, [r7, #4]
 8007810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, COMPRESSOR_CTRL_Pin|PWRRELAY_CTRL_Pin|PFC_RLY_EN_Pin|PF_EN_Pin, GPIO_PIN_RESET);
 8007812:	2200      	movs	r2, #0
 8007814:	f44f 610e 	mov.w	r1, #2272	; 0x8e0
 8007818:	487f      	ldr	r0, [pc, #508]	; (8007a18 <MX_GPIO_Init+0x2dc>)
 800781a:	f003 fa57 	bl	800accc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ModBUS_Dir_Pin|WDI_Pin|TP34_Pin, GPIO_PIN_RESET);
 800781e:	2200      	movs	r2, #0
 8007820:	f246 0120 	movw	r1, #24608	; 0x6020
 8007824:	487d      	ldr	r0, [pc, #500]	; (8007a1c <MX_GPIO_Init+0x2e0>)
 8007826:	f003 fa51 	bl	800accc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_N_GPIO_Port, WIFI_RST_N_Pin, GPIO_PIN_RESET);
 800782a:	2200      	movs	r2, #0
 800782c:	2104      	movs	r1, #4
 800782e:	487c      	ldr	r0, [pc, #496]	; (8007a20 <MX_GPIO_Init+0x2e4>)
 8007830:	f003 fa4c 	bl	800accc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, VALVE_1A_CTRL_Pin|VALVE_1B_CTRL_Pin|VALVE_2A_CTRL_Pin|VALVE_2B_CTRL_Pin
 8007834:	2200      	movs	r2, #0
 8007836:	f244 11ff 	movw	r1, #16895	; 0x41ff
 800783a:	487a      	ldr	r0, [pc, #488]	; (8007a24 <MX_GPIO_Init+0x2e8>)
 800783c:	f003 fa46 	bl	800accc <HAL_GPIO_WritePin>
                          |ONBOARD_LED_Pin|VALVE_3A_CTRL_Pin|VALVE_3B_CTRL_Pin|VALVE_4A_CTRL_Pin
                          |VALVE_4B_CTRL_Pin|MEMB_POWER_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SYNC_OUT_Pin|TP32_Pin|TP33_Pin|TP36_Pin
 8007840:	2200      	movs	r2, #0
 8007842:	f24d 51c0 	movw	r1, #54720	; 0xd5c0
 8007846:	4878      	ldr	r0, [pc, #480]	; (8007a28 <MX_GPIO_Init+0x2ec>)
 8007848:	f003 fa40 	bl	800accc <HAL_GPIO_WritePin>
                          |TP29_Pin|TP30_Pin|TP31_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_BAT100_Pin|LED_BAT75_Pin|LED_Y_Pin|LED_G_Pin
 800784c:	2200      	movs	r2, #0
 800784e:	f64f 6130 	movw	r1, #65072	; 0xfe30
 8007852:	4876      	ldr	r0, [pc, #472]	; (8007a2c <MX_GPIO_Init+0x2f0>)
 8007854:	f003 fa3a 	bl	800accc <HAL_GPIO_WritePin>
                          |LED_R_Pin|LED_BAT50_Pin|LED_BAT25_Pin|TP26_Pin
                          |TP28_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_POWER_EN_Pin|WIFI_SPI3_EN_Pin, GPIO_PIN_RESET);
 8007858:	2200      	movs	r2, #0
 800785a:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 800785e:	4874      	ldr	r0, [pc, #464]	; (8007a30 <MX_GPIO_Init+0x2f4>)
 8007860:	f003 fa34 	bl	800accc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : N_MEMBRANE_INT_Pin MEMBRANESW_IN_Pin */
  GPIO_InitStruct.Pin = N_MEMBRANE_INT_Pin|MEMBRANESW_IN_Pin;
 8007864:	2314      	movs	r3, #20
 8007866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007868:	4b72      	ldr	r3, [pc, #456]	; (8007a34 <MX_GPIO_Init+0x2f8>)
 800786a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800786c:	2301      	movs	r3, #1
 800786e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007874:	4619      	mov	r1, r3
 8007876:	4868      	ldr	r0, [pc, #416]	; (8007a18 <MX_GPIO_Init+0x2dc>)
 8007878:	f003 f874 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : COMPRESSOR_CTRL_Pin PWRRELAY_CTRL_Pin PFC_RLY_EN_Pin PF_EN_Pin */
  GPIO_InitStruct.Pin = COMPRESSOR_CTRL_Pin|PWRRELAY_CTRL_Pin|PFC_RLY_EN_Pin|PF_EN_Pin;
 800787c:	f44f 630e 	mov.w	r3, #2272	; 0x8e0
 8007880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007882:	2301      	movs	r3, #1
 8007884:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007886:	2300      	movs	r3, #0
 8007888:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800788a:	2300      	movs	r3, #0
 800788c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800788e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007892:	4619      	mov	r1, r3
 8007894:	4860      	ldr	r0, [pc, #384]	; (8007a18 <MX_GPIO_Init+0x2dc>)
 8007896:	f003 f865 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : ModBUS_Dir_Pin WDI_Pin TP34_Pin */
  GPIO_InitStruct.Pin = ModBUS_Dir_Pin|WDI_Pin|TP34_Pin;
 800789a:	f246 0320 	movw	r3, #24608	; 0x6020
 800789e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078a0:	2301      	movs	r3, #1
 80078a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078a4:	2300      	movs	r3, #0
 80078a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078a8:	2300      	movs	r3, #0
 80078aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80078ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078b0:	4619      	mov	r1, r3
 80078b2:	485a      	ldr	r0, [pc, #360]	; (8007a1c <MX_GPIO_Init+0x2e0>)
 80078b4:	f003 f856 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_N_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_N_Pin;
 80078b8:	2304      	movs	r3, #4
 80078ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078bc:	2301      	movs	r3, #1
 80078be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80078c0:	2301      	movs	r3, #1
 80078c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80078c4:	2302      	movs	r3, #2
 80078c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WIFI_RST_N_GPIO_Port, &GPIO_InitStruct);
 80078c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078cc:	4619      	mov	r1, r3
 80078ce:	4854      	ldr	r0, [pc, #336]	; (8007a20 <MX_GPIO_Init+0x2e4>)
 80078d0:	f003 f848 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PFC_LoadEN_N_Pin */
  GPIO_InitStruct.Pin = PFC_LoadEN_N_Pin;
 80078d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80078da:	4b56      	ldr	r3, [pc, #344]	; (8007a34 <MX_GPIO_Init+0x2f8>)
 80078dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078de:	2300      	movs	r3, #0
 80078e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PFC_LoadEN_N_GPIO_Port, &GPIO_InitStruct);
 80078e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078e6:	4619      	mov	r1, r3
 80078e8:	484c      	ldr	r0, [pc, #304]	; (8007a1c <MX_GPIO_Init+0x2e0>)
 80078ea:	f003 f83b 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : VALVE_1A_CTRL_Pin VALVE_1B_CTRL_Pin VALVE_2A_CTRL_Pin VALVE_2B_CTRL_Pin
                           ONBOARD_LED_Pin VALVE_3A_CTRL_Pin VALVE_3B_CTRL_Pin VALVE_4A_CTRL_Pin
                           VALVE_4B_CTRL_Pin */
  GPIO_InitStruct.Pin = VALVE_1A_CTRL_Pin|VALVE_1B_CTRL_Pin|VALVE_2A_CTRL_Pin|VALVE_2B_CTRL_Pin
 80078ee:	f240 13ff 	movw	r3, #511	; 0x1ff
 80078f2:	627b      	str	r3, [r7, #36]	; 0x24
                          |ONBOARD_LED_Pin|VALVE_3A_CTRL_Pin|VALVE_3B_CTRL_Pin|VALVE_4A_CTRL_Pin
                          |VALVE_4B_CTRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078f4:	2301      	movs	r3, #1
 80078f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80078f8:	2302      	movs	r3, #2
 80078fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078fc:	2300      	movs	r3, #0
 80078fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007904:	4619      	mov	r1, r3
 8007906:	4847      	ldr	r0, [pc, #284]	; (8007a24 <MX_GPIO_Init+0x2e8>)
 8007908:	f003 f82c 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESTOP_ACTIVE_Pin */
  GPIO_InitStruct.Pin = ESTOP_ACTIVE_Pin;
 800790c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007912:	4b49      	ldr	r3, [pc, #292]	; (8007a38 <MX_GPIO_Init+0x2fc>)
 8007914:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007916:	2300      	movs	r3, #0
 8007918:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESTOP_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800791a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800791e:	4619      	mov	r1, r3
 8007920:	483d      	ldr	r0, [pc, #244]	; (8007a18 <MX_GPIO_Init+0x2dc>)
 8007922:	f003 f81f 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PFC_POWERFAILWARNNING_N_Pin */
  GPIO_InitStruct.Pin = PFC_POWERFAILWARNNING_N_Pin;
 8007926:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800792a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800792c:	4b41      	ldr	r3, [pc, #260]	; (8007a34 <MX_GPIO_Init+0x2f8>)
 800792e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007930:	2300      	movs	r3, #0
 8007932:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PFC_POWERFAILWARNNING_N_GPIO_Port, &GPIO_InitStruct);
 8007934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007938:	4619      	mov	r1, r3
 800793a:	4837      	ldr	r0, [pc, #220]	; (8007a18 <MX_GPIO_Init+0x2dc>)
 800793c:	f003 f812 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYNC_OUT_Pin TP32_Pin TP33_Pin TP36_Pin
                           TP29_Pin TP30_Pin TP31_Pin */
  GPIO_InitStruct.Pin = SYNC_OUT_Pin|TP32_Pin|TP33_Pin|TP36_Pin
 8007940:	f24d 53c0 	movw	r3, #54720	; 0xd5c0
 8007944:	627b      	str	r3, [r7, #36]	; 0x24
                          |TP29_Pin|TP30_Pin|TP31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007946:	2301      	movs	r3, #1
 8007948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800794a:	2300      	movs	r3, #0
 800794c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800794e:	2300      	movs	r3, #0
 8007950:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007956:	4619      	mov	r1, r3
 8007958:	4833      	ldr	r0, [pc, #204]	; (8007a28 <MX_GPIO_Init+0x2ec>)
 800795a:	f003 f803 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BAT100_Pin LED_BAT75_Pin LED_Y_Pin LED_G_Pin
                           LED_R_Pin LED_BAT50_Pin LED_BAT25_Pin TP26_Pin
                           TP28_Pin */
  GPIO_InitStruct.Pin = LED_BAT100_Pin|LED_BAT75_Pin|LED_Y_Pin|LED_G_Pin
 800795e:	f64f 6330 	movw	r3, #65072	; 0xfe30
 8007962:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED_R_Pin|LED_BAT50_Pin|LED_BAT25_Pin|TP26_Pin
                          |TP28_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007964:	2301      	movs	r3, #1
 8007966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007968:	2300      	movs	r3, #0
 800796a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800796c:	2300      	movs	r3, #0
 800796e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007974:	4619      	mov	r1, r3
 8007976:	482d      	ldr	r0, [pc, #180]	; (8007a2c <MX_GPIO_Init+0x2f0>)
 8007978:	f002 fff4 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_POWER_EN_Pin WIFI_SPI3_EN_Pin */
  GPIO_InitStruct.Pin = DISP_POWER_EN_Pin|WIFI_SPI3_EN_Pin;
 800797c:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8007980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007982:	2301      	movs	r3, #1
 8007984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007986:	2300      	movs	r3, #0
 8007988:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800798a:	2300      	movs	r3, #0
 800798c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800798e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007992:	4619      	mov	r1, r3
 8007994:	4826      	ldr	r0, [pc, #152]	; (8007a30 <MX_GPIO_Init+0x2f4>)
 8007996:	f002 ffe5 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_N_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_N_Pin;
 800799a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800799e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079a0:	2300      	movs	r3, #0
 80079a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079a4:	2300      	movs	r3, #0
 80079a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECT_N_GPIO_Port, &GPIO_InitStruct);
 80079a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079ac:	4619      	mov	r1, r3
 80079ae:	481d      	ldr	r0, [pc, #116]	; (8007a24 <MX_GPIO_Init+0x2e8>)
 80079b0:	f002 ffd8 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMB_POWER_EN_Pin */
  GPIO_InitStruct.Pin = MEMB_POWER_EN_Pin;
 80079b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80079b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079ba:	2301      	movs	r3, #1
 80079bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079be:	2300      	movs	r3, #0
 80079c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079c2:	2300      	movs	r3, #0
 80079c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MEMB_POWER_EN_GPIO_Port, &GPIO_InitStruct);
 80079c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079ca:	4619      	mov	r1, r3
 80079cc:	4815      	ldr	r0, [pc, #84]	; (8007a24 <MX_GPIO_Init+0x2e8>)
 80079ce:	f002 ffc9 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pin : SYNC_IN_N_Pin */
  GPIO_InitStruct.Pin = SYNC_IN_N_Pin;
 80079d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80079d8:	4b17      	ldr	r3, [pc, #92]	; (8007a38 <MX_GPIO_Init+0x2fc>)
 80079da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079dc:	2300      	movs	r3, #0
 80079de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SYNC_IN_N_GPIO_Port, &GPIO_InitStruct);
 80079e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079e4:	4619      	mov	r1, r3
 80079e6:	4810      	ldr	r0, [pc, #64]	; (8007a28 <MX_GPIO_Init+0x2ec>)
 80079e8:	f002 ffbc 	bl	800a964 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80079ec:	2200      	movs	r2, #0
 80079ee:	2100      	movs	r1, #0
 80079f0:	2008      	movs	r0, #8
 80079f2:	f002 fa74 	bl	8009ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80079f6:	2008      	movs	r0, #8
 80079f8:	f002 fa8d 	bl	8009f16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80079fc:	2200      	movs	r2, #0
 80079fe:	2100      	movs	r1, #0
 8007a00:	2028      	movs	r0, #40	; 0x28
 8007a02:	f002 fa6c 	bl	8009ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007a06:	2028      	movs	r0, #40	; 0x28
 8007a08:	f002 fa85 	bl	8009f16 <HAL_NVIC_EnableIRQ>

}
 8007a0c:	bf00      	nop
 8007a0e:	3738      	adds	r7, #56	; 0x38
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	40023800 	.word	0x40023800
 8007a18:	40021000 	.word	0x40021000
 8007a1c:	40021400 	.word	0x40021400
 8007a20:	40020800 	.word	0x40020800
 8007a24:	40021800 	.word	0x40021800
 8007a28:	40020400 	.word	0x40020400
 8007a2c:	40020c00 	.word	0x40020c00
 8007a30:	40020000 	.word	0x40020000
 8007a34:	10210000 	.word	0x10210000
 8007a38:	10110000 	.word	0x10110000

08007a3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
	// Counter reached end of period
	if (TIM7 == htim->Instance ) // Determine whether counter was TIM7 half millisecond counter
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a40      	ldr	r2, [pc, #256]	; (8007b4c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d179      	bne.n	8007b42 <HAL_TIM_PeriodElapsedCallback+0x106>
	{
		//Here is a frequency of 500uS
		if (wdi_flag)
 8007a4e:	4b40      	ldr	r3, [pc, #256]	; (8007b50 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d004      	beq.n	8007a62 <HAL_TIM_PeriodElapsedCallback+0x26>
		{
		   //Feeding the external watchdog timer here
			HAL_GPIO_TogglePin(GPIOF, WDI_Pin);  //This is PF13 on STM32 MCU
 8007a58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007a5c:	483d      	ldr	r0, [pc, #244]	; (8007b54 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8007a5e:	f003 f94e 	bl	800acfe <HAL_GPIO_TogglePin>
		}

		if(++fiveMsHalfMillisecondCnt >= 10)
 8007a62:	4b3d      	ldr	r3, [pc, #244]	; (8007b58 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	3301      	adds	r3, #1
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	4b3b      	ldr	r3, [pc, #236]	; (8007b58 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8007a6c:	801a      	strh	r2, [r3, #0]
 8007a6e:	4b3a      	ldr	r3, [pc, #232]	; (8007b58 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8007a70:	881b      	ldrh	r3, [r3, #0]
 8007a72:	2b09      	cmp	r3, #9
 8007a74:	d905      	bls.n	8007a82 <HAL_TIM_PeriodElapsedCallback+0x46>
		{
			fiveMsHalfMillisecondCnt = 0;
 8007a76:	4b38      	ldr	r3, [pc, #224]	; (8007b58 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	801a      	strh	r2, [r3, #0]
			fiveMsTick = true;
 8007a7c:	4b37      	ldr	r3, [pc, #220]	; (8007b5c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8007a7e:	2201      	movs	r2, #1
 8007a80:	701a      	strb	r2, [r3, #0]
		}

		if(++oneSecondHalfMillisecondCnt >= 2000)
 8007a82:	4b37      	ldr	r3, [pc, #220]	; (8007b60 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8007a84:	881b      	ldrh	r3, [r3, #0]
 8007a86:	3301      	adds	r3, #1
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	4b35      	ldr	r3, [pc, #212]	; (8007b60 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8007a8c:	801a      	strh	r2, [r3, #0]
 8007a8e:	4b34      	ldr	r3, [pc, #208]	; (8007b60 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007a96:	d305      	bcc.n	8007aa4 <HAL_TIM_PeriodElapsedCallback+0x68>
		{
			oneSecondHalfMillisecondCnt = 0;
 8007a98:	4b31      	ldr	r3, [pc, #196]	; (8007b60 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	801a      	strh	r2, [r3, #0]
			oneSecondTick = true;
 8007a9e:	4b31      	ldr	r3, [pc, #196]	; (8007b64 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	701a      	strb	r2, [r3, #0]

		}
		
		if(++oneMinuteHalfMillisecondCnt >= 120000)
 8007aa4:	4b30      	ldr	r3, [pc, #192]	; (8007b68 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	4a2f      	ldr	r2, [pc, #188]	; (8007b68 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8007aac:	6013      	str	r3, [r2, #0]
 8007aae:	4b2e      	ldr	r3, [pc, #184]	; (8007b68 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a2e      	ldr	r2, [pc, #184]	; (8007b6c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d90f      	bls.n	8007ad8 <HAL_TIM_PeriodElapsedCallback+0x9c>
		{
			oneMinuteHalfMillisecondCnt = 0;
 8007ab8:	4b2b      	ldr	r3, [pc, #172]	; (8007b68 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	601a      	str	r2, [r3, #0]
			oneMinuteTick = true;
 8007abe:	4b2c      	ldr	r3, [pc, #176]	; (8007b70 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	701a      	strb	r2, [r3, #0]
			minuteCntr++;
 8007ac4:	4b2b      	ldr	r3, [pc, #172]	; (8007b74 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	4a2a      	ldr	r2, [pc, #168]	; (8007b74 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8007acc:	6013      	str	r3, [r2, #0]

			StoreMinuteCntrInEeprom( minuteCntr );
 8007ace:	4b29      	ldr	r3, [pc, #164]	; (8007b74 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fa fec5 	bl	8002862 <StoreMinuteCntrInEeprom>
		}
		
		if( GetEepromWriteWait() != false )
 8007ad8:	f7fa fc6a 	bl	80023b0 <GetEepromWriteWait>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d011      	beq.n	8007b06 <HAL_TIM_PeriodElapsedCallback+0xca>
		{
			eepromWaitHalfMillisecondCnt++;
 8007ae2:	4b25      	ldr	r3, [pc, #148]	; (8007b78 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	4b23      	ldr	r3, [pc, #140]	; (8007b78 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8007aec:	801a      	strh	r2, [r3, #0]
			if(eepromWaitHalfMillisecondCnt >= 28)
 8007aee:	4b22      	ldr	r3, [pc, #136]	; (8007b78 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	2b1b      	cmp	r3, #27
 8007af4:	d907      	bls.n	8007b06 <HAL_TIM_PeriodElapsedCallback+0xca>
			{
				SetEepromWriteWait( false );
 8007af6:	2000      	movs	r0, #0
 8007af8:	f7fa fc66 	bl	80023c8 <SetEepromWriteWait>
				eepromWaitHalfMillisecondCnt = 0;
 8007afc:	4b1e      	ldr	r3, [pc, #120]	; (8007b78 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	801a      	strh	r2, [r3, #0]
				ReadTxEepromQueueAndWriteEeprom();
 8007b02:	f7fa fe47 	bl	8002794 <ReadTxEepromQueueAndWriteEeprom>
			}
		}

		if( GetClearScreenWait() != false )
 8007b06:	f7fb fdd9 	bl	80036bc <GetClearScreenWait>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d018      	beq.n	8007b42 <HAL_TIM_PeriodElapsedCallback+0x106>
		{
			clearScreenHalfMillisecondCnt++;
 8007b10:	4b1a      	ldr	r3, [pc, #104]	; (8007b7c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	3301      	adds	r3, #1
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	4b18      	ldr	r3, [pc, #96]	; (8007b7c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8007b1a:	801a      	strh	r2, [r3, #0]
			if(clearScreenHalfMillisecondCnt >= 6)
 8007b1c:	4b17      	ldr	r3, [pc, #92]	; (8007b7c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	2b05      	cmp	r3, #5
 8007b22:	d90e      	bls.n	8007b42 <HAL_TIM_PeriodElapsedCallback+0x106>
			{
				SetClearScreenWait( false );
 8007b24:	2000      	movs	r0, #0
 8007b26:	f7fb fdd5 	bl	80036d4 <SetClearScreenWait>
				clearScreenHalfMillisecondCnt = 0;
 8007b2a:	4b14      	ldr	r3, [pc, #80]	; (8007b7c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	801a      	strh	r2, [r3, #0]
				if(gstModel.bLCDResetRequest == false)
 8007b30:	4b13      	ldr	r3, [pc, #76]	; (8007b80 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8007b32:	789b      	ldrb	r3, [r3, #2]
 8007b34:	f083 0301 	eor.w	r3, r3, #1
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <HAL_TIM_PeriodElapsedCallback+0x106>
				{
				    ReadTxLcdQueueAndTransmit();
 8007b3e:	f7fb fe31 	bl	80037a4 <ReadTxLcdQueueAndTransmit>
				}
			}
		}
	}
}
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	40001400 	.word	0x40001400
 8007b50:	2000710f 	.word	0x2000710f
 8007b54:	40021400 	.word	0x40021400
 8007b58:	20007116 	.word	0x20007116
 8007b5c:	20007114 	.word	0x20007114
 8007b60:	20007120 	.word	0x20007120
 8007b64:	20007118 	.word	0x20007118
 8007b68:	2000711c 	.word	0x2000711c
 8007b6c:	0001d4bf 	.word	0x0001d4bf
 8007b70:	20007115 	.word	0x20007115
 8007b74:	20007110 	.word	0x20007110
 8007b78:	20007124 	.word	0x20007124
 8007b7c:	20007122 	.word	0x20007122
 8007b80:	20000c60 	.word	0x20000c60

08007b84 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == N_MEMBRANE_INT_Pin)
 8007b8e:	88fb      	ldrh	r3, [r7, #6]
 8007b90:	2b04      	cmp	r3, #4
 8007b92:	d106      	bne.n	8007ba2 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		UartPrintf("Membrane Pressed trigger\n");
 8007b94:	481c      	ldr	r0, [pc, #112]	; (8007c08 <HAL_GPIO_EXTI_Callback+0x84>)
 8007b96:	f7fe f8c3 	bl	8005d20 <UartPrintf>
		gstModel.bMembranePress = true;
 8007b9a:	4b1c      	ldr	r3, [pc, #112]	; (8007c0c <HAL_GPIO_EXTI_Callback+0x88>)
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	721a      	strb	r2, [r3, #8]
	}
	else
	{
		__NOP();
	}
}
 8007ba0:	e02e      	b.n	8007c00 <HAL_GPIO_EXTI_Callback+0x7c>
	else if(GPIO_Pin == PFC_LoadEN_N_Pin)
 8007ba2:	88fb      	ldrh	r3, [r7, #6]
 8007ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ba8:	d112      	bne.n	8007bd0 <HAL_GPIO_EXTI_Callback+0x4c>
		if(bPfcLoadEnable == false)
 8007baa:	4b19      	ldr	r3, [pc, #100]	; (8007c10 <HAL_GPIO_EXTI_Callback+0x8c>)
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	f083 0301 	eor.w	r3, r3, #1
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d023      	beq.n	8007c00 <HAL_GPIO_EXTI_Callback+0x7c>
		    UartPrintf("Load Enable trigger\n");
 8007bb8:	4816      	ldr	r0, [pc, #88]	; (8007c14 <HAL_GPIO_EXTI_Callback+0x90>)
 8007bba:	f7fe f8b1 	bl	8005d20 <UartPrintf>
		    bPfcLoadEnable = true;
 8007bbe:	4b14      	ldr	r3, [pc, #80]	; (8007c10 <HAL_GPIO_EXTI_Callback+0x8c>)
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	701a      	strb	r2, [r3, #0]
		    uPfcLoadEnTimeDB = Get_SysTick();
 8007bc4:	f7fe f9e0 	bl	8005f88 <Get_SysTick>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	4a13      	ldr	r2, [pc, #76]	; (8007c18 <HAL_GPIO_EXTI_Callback+0x94>)
 8007bcc:	6013      	str	r3, [r2, #0]
}
 8007bce:	e017      	b.n	8007c00 <HAL_GPIO_EXTI_Callback+0x7c>
	else if(GPIO_Pin == PFC_POWERFAILWARNNING_N_Pin)
 8007bd0:	88fb      	ldrh	r3, [r7, #6]
 8007bd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bd6:	d112      	bne.n	8007bfe <HAL_GPIO_EXTI_Callback+0x7a>
		if(bPowerFailWarn == false)
 8007bd8:	4b10      	ldr	r3, [pc, #64]	; (8007c1c <HAL_GPIO_EXTI_Callback+0x98>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	f083 0301 	eor.w	r3, r3, #1
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00c      	beq.n	8007c00 <HAL_GPIO_EXTI_Callback+0x7c>
		    UartPrintf("Power Fail Warn trigger\n");
 8007be6:	480e      	ldr	r0, [pc, #56]	; (8007c20 <HAL_GPIO_EXTI_Callback+0x9c>)
 8007be8:	f7fe f89a 	bl	8005d20 <UartPrintf>
		    bPowerFailWarn = true;
 8007bec:	4b0b      	ldr	r3, [pc, #44]	; (8007c1c <HAL_GPIO_EXTI_Callback+0x98>)
 8007bee:	2201      	movs	r2, #1
 8007bf0:	701a      	strb	r2, [r3, #0]
		    uPowerFailWarnTimeDB = Get_SysTick();
 8007bf2:	f7fe f9c9 	bl	8005f88 <Get_SysTick>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	4a0a      	ldr	r2, [pc, #40]	; (8007c24 <HAL_GPIO_EXTI_Callback+0xa0>)
 8007bfa:	6013      	str	r3, [r2, #0]
}
 8007bfc:	e000      	b.n	8007c00 <HAL_GPIO_EXTI_Callback+0x7c>
		__NOP();
 8007bfe:	bf00      	nop
}
 8007c00:	bf00      	nop
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	080227c8 	.word	0x080227c8
 8007c0c:	20000c60 	.word	0x20000c60
 8007c10:	20007126 	.word	0x20007126
 8007c14:	080227e4 	.word	0x080227e4
 8007c18:	20007128 	.word	0x20007128
 8007c1c:	2000712c 	.word	0x2000712c
 8007c20:	080227fc 	.word	0x080227fc
 8007c24:	20007130 	.word	0x20007130

08007c28 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef* hi2c)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
	// Reception of I2C data is complete
	if(I2C3 == hi2c->Instance)    // Determine whether complete is from I2C 3 EEPROM
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a04      	ldr	r2, [pc, #16]	; (8007c48 <HAL_I2C_MemRxCpltCallback+0x20>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d101      	bne.n	8007c3e <HAL_I2C_MemRxCpltCallback+0x16>
	{
        // Check for EEPROM log read processing
		ProcessEepromReadComplete();
 8007c3a:	f7fa ff7b 	bl	8002b34 <ProcessEepromReadComplete>
	}
}
 8007c3e:	bf00      	nop
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	40005c00 	.word	0x40005c00

08007c4c <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef* hi2c)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
	// Transmit of I2C data is complete
	if(I2C3 == hi2c->Instance)    // Determine whether complete is from I2C 3 EEPROM
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a04      	ldr	r2, [pc, #16]	; (8007c6c <HAL_I2C_MemTxCpltCallback+0x20>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d101      	bne.n	8007c62 <HAL_I2C_MemTxCpltCallback+0x16>
	{
		// Read next entry in Tx EEPROM queue, if any, and write EEPROM
		ReadTxEepromQueueAndWriteEeprom();
 8007c5e:	f7fa fd99 	bl	8002794 <ReadTxEepromQueueAndWriteEeprom>
	}
}
 8007c62:	bf00      	nop
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	40005c00 	.word	0x40005c00

08007c70 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef* hi2c)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
	// Receive of I2C data is complete
	if(I2C2 == hi2c->Instance)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a09      	ldr	r2, [pc, #36]	; (8007ca4 <HAL_I2C_MasterRxCpltCallback+0x34>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d10b      	bne.n	8007c9a <HAL_I2C_MasterRxCpltCallback+0x2a>
		//STMF7xx has no Device Address in the i2c instance
		//so we can't check for device address here
		//however, we are lucky that this bus only has LCD and keypad which is
		//the only one device on the bus we can read back the status
		//hence the RxCplt callback assume is from keypad read back
	    gstModel.bKeyCodeReady = true;
 8007c82:	4b09      	ldr	r3, [pc, #36]	; (8007ca8 <HAL_I2C_MasterRxCpltCallback+0x38>)
 8007c84:	2201      	movs	r2, #1
 8007c86:	711a      	strb	r2, [r3, #4]

	    if(gstModel.bLCDResetRequest == false)
 8007c88:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <HAL_I2C_MasterRxCpltCallback+0x38>)
 8007c8a:	789b      	ldrb	r3, [r3, #2]
 8007c8c:	f083 0301 	eor.w	r3, r3, #1
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <HAL_I2C_MasterRxCpltCallback+0x2a>
	    {
	       ReadTxLcdQueueAndTransmit();
 8007c96:	f7fb fd85 	bl	80037a4 <ReadTxLcdQueueAndTransmit>
	    }
	}
}
 8007c9a:	bf00      	nop
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	40005800 	.word	0x40005800
 8007ca8:	20000c60 	.word	0x20000c60

08007cac <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef* hi2c)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
	// Transmit of I2C data is complete

	if(I2C2 == hi2c->Instance)    // Determine whether complete is from I2C 2 LCD
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a07      	ldr	r2, [pc, #28]	; (8007cd8 <HAL_I2C_MasterTxCpltCallback+0x2c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d108      	bne.n	8007cd0 <HAL_I2C_MasterTxCpltCallback+0x24>
	{
		if(gstModel.bLCDResetRequest == false)
 8007cbe:	4b07      	ldr	r3, [pc, #28]	; (8007cdc <HAL_I2C_MasterTxCpltCallback+0x30>)
 8007cc0:	789b      	ldrb	r3, [r3, #2]
 8007cc2:	f083 0301 	eor.w	r3, r3, #1
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d001      	beq.n	8007cd0 <HAL_I2C_MasterTxCpltCallback+0x24>
		{
			ReadTxLcdQueueAndTransmit();
 8007ccc:	f7fb fd6a 	bl	80037a4 <ReadTxLcdQueueAndTransmit>
		}
	}
}
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	40005800 	.word	0x40005800
 8007cdc:	20000c60 	.word	0x20000c60

08007ce0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
	if(UART5 == huart->Instance)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a04      	ldr	r2, [pc, #16]	; (8007d00 <HAL_UART_TxCpltCallback+0x20>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d101      	bne.n	8007cf6 <HAL_UART_TxCpltCallback+0x16>
	{
		// Transmit of Debug UART data is complete
		// Read next entry in print Tx UART queue, if any, and transmit out Debug UART
		ReadTxUartQueueAndTransmit();
 8007cf2:	f7fd ff63 	bl	8005bbc <ReadTxUartQueueAndTransmit>
	}
}
 8007cf6:	bf00      	nop
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	40005000 	.word	0x40005000

08007d04 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
	if(ADC1 == hadc->Instance)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a09      	ldr	r2, [pc, #36]	; (8007d38 <HAL_ADC_ConvCpltCallback+0x34>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d103      	bne.n	8007d1e <HAL_ADC_ConvCpltCallback+0x1a>
	{
		SetAdc1CompleteFlag( true );
 8007d16:	2001      	movs	r0, #1
 8007d18:	f7f9 f9b8 	bl	800108c <SetAdc1CompleteFlag>
	}
	else if(ADC3 == hadc->Instance)
	{
		SetAdc3CompleteFlag( true );
	}
}
 8007d1c:	e007      	b.n	8007d2e <HAL_ADC_ConvCpltCallback+0x2a>
	else if(ADC3 == hadc->Instance)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a06      	ldr	r2, [pc, #24]	; (8007d3c <HAL_ADC_ConvCpltCallback+0x38>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d102      	bne.n	8007d2e <HAL_ADC_ConvCpltCallback+0x2a>
		SetAdc3CompleteFlag( true );
 8007d28:	2001      	movs	r0, #1
 8007d2a:	f7f9 fb63 	bl	80013f4 <SetAdc3CompleteFlag>
}
 8007d2e:	bf00      	nop
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	40012000 	.word	0x40012000
 8007d3c:	40012200 	.word	0x40012200

08007d40 <GetMinuteCount>:

uint32_t GetMinuteCount( )
{
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0
	return minuteCntr;
 8007d44:	4b03      	ldr	r3, [pc, #12]	; (8007d54 <GetMinuteCount+0x14>)
 8007d46:	681b      	ldr	r3, [r3, #0]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	20007110 	.word	0x20007110

08007d58 <SetMinuteCount>:
void SetMinuteCount( uint32_t minuteCount )
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
	minuteCntr = minuteCount;
 8007d60:	4a04      	ldr	r2, [pc, #16]	; (8007d74 <SetMinuteCount+0x1c>)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6013      	str	r3, [r2, #0]
}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	20007110 	.word	0x20007110

08007d78 <GetSwVersionString>:

const char * GetSwVersionString( uint32_t swVersionNumId )
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
	return swVersionStrings[swVersionNumId];
 8007d80:	4a04      	ldr	r2, [pc, #16]	; (8007d94 <GetSwVersionString+0x1c>)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	20000200 	.word	0x20000200

08007d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b0a0      	sub	sp, #128	; 0x80
 8007d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	uint8_t buf[128];
	sprintf((char*)buf, "Error_Handler called\r\n");
 8007d9e:	463b      	mov	r3, r7
 8007da0:	4909      	ldr	r1, [pc, #36]	; (8007dc8 <Error_Handler+0x30>)
 8007da2:	4618      	mov	r0, r3
 8007da4:	f015 fa9e 	bl	801d2e4 <siprintf>
	HAL_UART_Transmit(&debugUart, buf, strlen((char*)buf), 0x200);
 8007da8:	463b      	mov	r3, r7
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7f8 fa42 	bl	8000234 <strlen>
 8007db0:	4603      	mov	r3, r0
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	4639      	mov	r1, r7
 8007db6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dba:	4804      	ldr	r0, [pc, #16]	; (8007dcc <Error_Handler+0x34>)
 8007dbc:	f00a fba8 	bl	8012510 <HAL_UART_Transmit>

  /* USER CODE END Error_Handler_Debug */
}
 8007dc0:	bf00      	nop
 8007dc2:	3780      	adds	r7, #128	; 0x80
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	08022818 	.word	0x08022818
 8007dcc:	20004704 	.word	0x20004704

08007dd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007dd6:	4b0f      	ldr	r3, [pc, #60]	; (8007e14 <HAL_MspInit+0x44>)
 8007dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dda:	4a0e      	ldr	r2, [pc, #56]	; (8007e14 <HAL_MspInit+0x44>)
 8007ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007de0:	6413      	str	r3, [r2, #64]	; 0x40
 8007de2:	4b0c      	ldr	r3, [pc, #48]	; (8007e14 <HAL_MspInit+0x44>)
 8007de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dea:	607b      	str	r3, [r7, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dee:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <HAL_MspInit+0x44>)
 8007df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df2:	4a08      	ldr	r2, [pc, #32]	; (8007e14 <HAL_MspInit+0x44>)
 8007df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007df8:	6453      	str	r3, [r2, #68]	; 0x44
 8007dfa:	4b06      	ldr	r3, [pc, #24]	; (8007e14 <HAL_MspInit+0x44>)
 8007dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e02:	603b      	str	r3, [r7, #0]
 8007e04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007e06:	bf00      	nop
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	40023800 	.word	0x40023800

08007e18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b090      	sub	sp, #64	; 0x40
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007e24:	2200      	movs	r2, #0
 8007e26:	601a      	str	r2, [r3, #0]
 8007e28:	605a      	str	r2, [r3, #4]
 8007e2a:	609a      	str	r2, [r3, #8]
 8007e2c:	60da      	str	r2, [r3, #12]
 8007e2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a8a      	ldr	r2, [pc, #552]	; (8008060 <HAL_ADC_MspInit+0x248>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	f040 8084 	bne.w	8007f44 <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007e3c:	4b89      	ldr	r3, [pc, #548]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e40:	4a88      	ldr	r2, [pc, #544]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e46:	6453      	str	r3, [r2, #68]	; 0x44
 8007e48:	4b86      	ldr	r3, [pc, #536]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e52:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e54:	4b83      	ldr	r3, [pc, #524]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e58:	4a82      	ldr	r2, [pc, #520]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007e5a:	f043 0301 	orr.w	r3, r3, #1
 8007e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8007e60:	4b80      	ldr	r3, [pc, #512]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	627b      	str	r3, [r7, #36]	; 0x24
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e6c:	4b7d      	ldr	r3, [pc, #500]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e70:	4a7c      	ldr	r2, [pc, #496]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007e72:	f043 0304 	orr.w	r3, r3, #4
 8007e76:	6313      	str	r3, [r2, #48]	; 0x30
 8007e78:	4b7a      	ldr	r3, [pc, #488]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7c:	f003 0304 	and.w	r3, r3, #4
 8007e80:	623b      	str	r3, [r7, #32]
 8007e82:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e84:	4b77      	ldr	r3, [pc, #476]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e88:	4a76      	ldr	r2, [pc, #472]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007e8a:	f043 0302 	orr.w	r3, r3, #2
 8007e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8007e90:	4b74      	ldr	r3, [pc, #464]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e94:	f003 0302 	and.w	r3, r3, #2
 8007e98:	61fb      	str	r3, [r7, #28]
 8007e9a:	69fb      	ldr	r3, [r7, #28]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = PressureSensor3_ADC1_IN5_Pin|PressureSensor1_ADC1_IN6_Pin|PressureSensor2_ADC1_IN7_Pin;
 8007e9c:	23e0      	movs	r3, #224	; 0xe0
 8007e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007eac:	4619      	mov	r1, r3
 8007eae:	486e      	ldr	r0, [pc, #440]	; (8008068 <HAL_ADC_MspInit+0x250>)
 8007eb0:	f002 fd58 	bl	800a964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PressureSensor4_ADC1_IN14_Pin|CABTEMP_ADC1_IN15_Pin;
 8007eb4:	2330      	movs	r3, #48	; 0x30
 8007eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	4869      	ldr	r0, [pc, #420]	; (800806c <HAL_ADC_MspInit+0x254>)
 8007ec8:	f002 fd4c 	bl	800a964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_12V_ADC1_IN8_Pin|ADC_5VREF_ADC1_IN9_Pin;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ed8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007edc:	4619      	mov	r1, r3
 8007ede:	4864      	ldr	r0, [pc, #400]	; (8008070 <HAL_ADC_MspInit+0x258>)
 8007ee0:	f002 fd40 	bl	800a964 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8007ee4:	4b63      	ldr	r3, [pc, #396]	; (8008074 <HAL_ADC_MspInit+0x25c>)
 8007ee6:	4a64      	ldr	r2, [pc, #400]	; (8008078 <HAL_ADC_MspInit+0x260>)
 8007ee8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8007eea:	4b62      	ldr	r3, [pc, #392]	; (8008074 <HAL_ADC_MspInit+0x25c>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007ef0:	4b60      	ldr	r3, [pc, #384]	; (8008074 <HAL_ADC_MspInit+0x25c>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ef6:	4b5f      	ldr	r3, [pc, #380]	; (8008074 <HAL_ADC_MspInit+0x25c>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007efc:	4b5d      	ldr	r3, [pc, #372]	; (8008074 <HAL_ADC_MspInit+0x25c>)
 8007efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f02:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007f04:	4b5b      	ldr	r3, [pc, #364]	; (8008074 <HAL_ADC_MspInit+0x25c>)
 8007f06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007f0a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007f0c:	4b59      	ldr	r3, [pc, #356]	; (8008074 <HAL_ADC_MspInit+0x25c>)
 8007f0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007f12:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8007f14:	4b57      	ldr	r3, [pc, #348]	; (8008074 <HAL_ADC_MspInit+0x25c>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007f1a:	4b56      	ldr	r3, [pc, #344]	; (8008074 <HAL_ADC_MspInit+0x25c>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007f20:	4b54      	ldr	r3, [pc, #336]	; (8008074 <HAL_ADC_MspInit+0x25c>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007f26:	4853      	ldr	r0, [pc, #332]	; (8008074 <HAL_ADC_MspInit+0x25c>)
 8007f28:	f002 f8f8 	bl	800a11c <HAL_DMA_Init>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 8007f32:	f7ff ff31 	bl	8007d98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a4e      	ldr	r2, [pc, #312]	; (8008074 <HAL_ADC_MspInit+0x25c>)
 8007f3a:	639a      	str	r2, [r3, #56]	; 0x38
 8007f3c:	4a4d      	ldr	r2, [pc, #308]	; (8008074 <HAL_ADC_MspInit+0x25c>)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8007f42:	e089      	b.n	8008058 <HAL_ADC_MspInit+0x240>
  else if(hadc->Instance==ADC3)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a4c      	ldr	r2, [pc, #304]	; (800807c <HAL_ADC_MspInit+0x264>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	f040 8084 	bne.w	8008058 <HAL_ADC_MspInit+0x240>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8007f50:	4b44      	ldr	r3, [pc, #272]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f54:	4a43      	ldr	r2, [pc, #268]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007f56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f5a:	6453      	str	r3, [r2, #68]	; 0x44
 8007f5c:	4b41      	ldr	r3, [pc, #260]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f64:	61bb      	str	r3, [r7, #24]
 8007f66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007f68:	4b3e      	ldr	r3, [pc, #248]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6c:	4a3d      	ldr	r2, [pc, #244]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007f6e:	f043 0320 	orr.w	r3, r3, #32
 8007f72:	6313      	str	r3, [r2, #48]	; 0x30
 8007f74:	4b3b      	ldr	r3, [pc, #236]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f78:	f003 0320 	and.w	r3, r3, #32
 8007f7c:	617b      	str	r3, [r7, #20]
 8007f7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f80:	4b38      	ldr	r3, [pc, #224]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f84:	4a37      	ldr	r2, [pc, #220]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007f86:	f043 0304 	orr.w	r3, r3, #4
 8007f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8007f8c:	4b35      	ldr	r3, [pc, #212]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	613b      	str	r3, [r7, #16]
 8007f96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f98:	4b32      	ldr	r3, [pc, #200]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9c:	4a31      	ldr	r2, [pc, #196]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007f9e:	f043 0301 	orr.w	r3, r3, #1
 8007fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8007fa4:	4b2f      	ldr	r3, [pc, #188]	; (8008064 <HAL_ADC_MspInit+0x24c>)
 8007fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	60fb      	str	r3, [r7, #12]
 8007fae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FPCCurrMon_ADC3_IN9_Pin|FPCTempMon_ADC3_IN14_Pin;
 8007fb0:	2318      	movs	r3, #24
 8007fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	482f      	ldr	r0, [pc, #188]	; (8008080 <HAL_ADC_MspInit+0x268>)
 8007fc4:	f002 fcce 	bl	800a964 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUZ_ADC3_IN10_Pin|ADC_PFCVOMon_ADC3_11_Pin;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007fd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007fd8:	4619      	mov	r1, r3
 8007fda:	4824      	ldr	r0, [pc, #144]	; (800806c <HAL_ADC_MspInit+0x254>)
 8007fdc:	f002 fcc2 	bl	800a964 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MainPcba_Current_ADC3_IN0_Pin|Power_Voltage_ADC3_IN1_Pin|ADC_3V3_ADC3_IN2_Pin|ADC_5V_ADC3_IN3_Pin;
 8007fe0:	230f      	movs	r3, #15
 8007fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	481d      	ldr	r0, [pc, #116]	; (8008068 <HAL_ADC_MspInit+0x250>)
 8007ff4:	f002 fcb6 	bl	800a964 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8007ff8:	4b22      	ldr	r3, [pc, #136]	; (8008084 <HAL_ADC_MspInit+0x26c>)
 8007ffa:	4a23      	ldr	r2, [pc, #140]	; (8008088 <HAL_ADC_MspInit+0x270>)
 8007ffc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8007ffe:	4b21      	ldr	r3, [pc, #132]	; (8008084 <HAL_ADC_MspInit+0x26c>)
 8008000:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008004:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008006:	4b1f      	ldr	r3, [pc, #124]	; (8008084 <HAL_ADC_MspInit+0x26c>)
 8008008:	2200      	movs	r2, #0
 800800a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800800c:	4b1d      	ldr	r3, [pc, #116]	; (8008084 <HAL_ADC_MspInit+0x26c>)
 800800e:	2200      	movs	r2, #0
 8008010:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8008012:	4b1c      	ldr	r3, [pc, #112]	; (8008084 <HAL_ADC_MspInit+0x26c>)
 8008014:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008018:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800801a:	4b1a      	ldr	r3, [pc, #104]	; (8008084 <HAL_ADC_MspInit+0x26c>)
 800801c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008020:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008022:	4b18      	ldr	r3, [pc, #96]	; (8008084 <HAL_ADC_MspInit+0x26c>)
 8008024:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008028:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800802a:	4b16      	ldr	r3, [pc, #88]	; (8008084 <HAL_ADC_MspInit+0x26c>)
 800802c:	2200      	movs	r2, #0
 800802e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8008030:	4b14      	ldr	r3, [pc, #80]	; (8008084 <HAL_ADC_MspInit+0x26c>)
 8008032:	2200      	movs	r2, #0
 8008034:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008036:	4b13      	ldr	r3, [pc, #76]	; (8008084 <HAL_ADC_MspInit+0x26c>)
 8008038:	2200      	movs	r2, #0
 800803a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800803c:	4811      	ldr	r0, [pc, #68]	; (8008084 <HAL_ADC_MspInit+0x26c>)
 800803e:	f002 f86d 	bl	800a11c <HAL_DMA_Init>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d001      	beq.n	800804c <HAL_ADC_MspInit+0x234>
      Error_Handler();
 8008048:	f7ff fea6 	bl	8007d98 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a0d      	ldr	r2, [pc, #52]	; (8008084 <HAL_ADC_MspInit+0x26c>)
 8008050:	639a      	str	r2, [r3, #56]	; 0x38
 8008052:	4a0c      	ldr	r2, [pc, #48]	; (8008084 <HAL_ADC_MspInit+0x26c>)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008058:	bf00      	nop
 800805a:	3740      	adds	r7, #64	; 0x40
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	40012000 	.word	0x40012000
 8008064:	40023800 	.word	0x40023800
 8008068:	40020000 	.word	0x40020000
 800806c:	40020800 	.word	0x40020800
 8008070:	40020400 	.word	0x40020400
 8008074:	20004190 	.word	0x20004190
 8008078:	40026470 	.word	0x40026470
 800807c:	40012200 	.word	0x40012200
 8008080:	40021400 	.word	0x40021400
 8008084:	200041f0 	.word	0x200041f0
 8008088:	40026428 	.word	0x40026428

0800808c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08a      	sub	sp, #40	; 0x28
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008094:	f107 0314 	add.w	r3, r7, #20
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]
 800809c:	605a      	str	r2, [r3, #4]
 800809e:	609a      	str	r2, [r3, #8]
 80080a0:	60da      	str	r2, [r3, #12]
 80080a2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a15      	ldr	r2, [pc, #84]	; (8008100 <HAL_DAC_MspInit+0x74>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d123      	bne.n	80080f6 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80080ae:	4b15      	ldr	r3, [pc, #84]	; (8008104 <HAL_DAC_MspInit+0x78>)
 80080b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b2:	4a14      	ldr	r2, [pc, #80]	; (8008104 <HAL_DAC_MspInit+0x78>)
 80080b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080b8:	6413      	str	r3, [r2, #64]	; 0x40
 80080ba:	4b12      	ldr	r3, [pc, #72]	; (8008104 <HAL_DAC_MspInit+0x78>)
 80080bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080c2:	613b      	str	r3, [r7, #16]
 80080c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080c6:	4b0f      	ldr	r3, [pc, #60]	; (8008104 <HAL_DAC_MspInit+0x78>)
 80080c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ca:	4a0e      	ldr	r2, [pc, #56]	; (8008104 <HAL_DAC_MspInit+0x78>)
 80080cc:	f043 0301 	orr.w	r3, r3, #1
 80080d0:	6313      	str	r3, [r2, #48]	; 0x30
 80080d2:	4b0c      	ldr	r3, [pc, #48]	; (8008104 <HAL_DAC_MspInit+0x78>)
 80080d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	60fb      	str	r3, [r7, #12]
 80080dc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80080de:	2310      	movs	r3, #16
 80080e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80080e2:	2303      	movs	r3, #3
 80080e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080ea:	f107 0314 	add.w	r3, r7, #20
 80080ee:	4619      	mov	r1, r3
 80080f0:	4805      	ldr	r0, [pc, #20]	; (8008108 <HAL_DAC_MspInit+0x7c>)
 80080f2:	f002 fc37 	bl	800a964 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80080f6:	bf00      	nop
 80080f8:	3728      	adds	r7, #40	; 0x28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	40007400 	.word	0x40007400
 8008104:	40023800 	.word	0x40023800
 8008108:	40020000 	.word	0x40020000

0800810c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b08c      	sub	sp, #48	; 0x30
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008114:	f107 031c 	add.w	r3, r7, #28
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]
 800811c:	605a      	str	r2, [r3, #4]
 800811e:	609a      	str	r2, [r3, #8]
 8008120:	60da      	str	r2, [r3, #12]
 8008122:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a45      	ldr	r2, [pc, #276]	; (8008240 <HAL_I2C_MspInit+0x134>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d130      	bne.n	8008190 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800812e:	4b45      	ldr	r3, [pc, #276]	; (8008244 <HAL_I2C_MspInit+0x138>)
 8008130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008132:	4a44      	ldr	r2, [pc, #272]	; (8008244 <HAL_I2C_MspInit+0x138>)
 8008134:	f043 0320 	orr.w	r3, r3, #32
 8008138:	6313      	str	r3, [r2, #48]	; 0x30
 800813a:	4b42      	ldr	r3, [pc, #264]	; (8008244 <HAL_I2C_MspInit+0x138>)
 800813c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813e:	f003 0320 	and.w	r3, r3, #32
 8008142:	61bb      	str	r3, [r7, #24]
 8008144:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = UI_I2C2_SDA_Pin|UI_I2C2_SCL_Pin;
 8008146:	2303      	movs	r3, #3
 8008148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800814a:	2312      	movs	r3, #18
 800814c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800814e:	2301      	movs	r3, #1
 8008150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008152:	2303      	movs	r3, #3
 8008154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008156:	2304      	movs	r3, #4
 8008158:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800815a:	f107 031c 	add.w	r3, r7, #28
 800815e:	4619      	mov	r1, r3
 8008160:	4839      	ldr	r0, [pc, #228]	; (8008248 <HAL_I2C_MspInit+0x13c>)
 8008162:	f002 fbff 	bl	800a964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008166:	4b37      	ldr	r3, [pc, #220]	; (8008244 <HAL_I2C_MspInit+0x138>)
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	4a36      	ldr	r2, [pc, #216]	; (8008244 <HAL_I2C_MspInit+0x138>)
 800816c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008170:	6413      	str	r3, [r2, #64]	; 0x40
 8008172:	4b34      	ldr	r3, [pc, #208]	; (8008244 <HAL_I2C_MspInit+0x138>)
 8008174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800817a:	617b      	str	r3, [r7, #20]
 800817c:	697b      	ldr	r3, [r7, #20]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800817e:	2200      	movs	r2, #0
 8008180:	2100      	movs	r1, #0
 8008182:	2021      	movs	r0, #33	; 0x21
 8008184:	f001 feab 	bl	8009ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8008188:	2021      	movs	r0, #33	; 0x21
 800818a:	f001 fec4 	bl	8009f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800818e:	e052      	b.n	8008236 <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C3)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a2d      	ldr	r2, [pc, #180]	; (800824c <HAL_I2C_MspInit+0x140>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d14d      	bne.n	8008236 <HAL_I2C_MspInit+0x12a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800819a:	4b2a      	ldr	r3, [pc, #168]	; (8008244 <HAL_I2C_MspInit+0x138>)
 800819c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819e:	4a29      	ldr	r2, [pc, #164]	; (8008244 <HAL_I2C_MspInit+0x138>)
 80081a0:	f043 0304 	orr.w	r3, r3, #4
 80081a4:	6313      	str	r3, [r2, #48]	; 0x30
 80081a6:	4b27      	ldr	r3, [pc, #156]	; (8008244 <HAL_I2C_MspInit+0x138>)
 80081a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081aa:	f003 0304 	and.w	r3, r3, #4
 80081ae:	613b      	str	r3, [r7, #16]
 80081b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081b2:	4b24      	ldr	r3, [pc, #144]	; (8008244 <HAL_I2C_MspInit+0x138>)
 80081b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b6:	4a23      	ldr	r2, [pc, #140]	; (8008244 <HAL_I2C_MspInit+0x138>)
 80081b8:	f043 0301 	orr.w	r3, r3, #1
 80081bc:	6313      	str	r3, [r2, #48]	; 0x30
 80081be:	4b21      	ldr	r3, [pc, #132]	; (8008244 <HAL_I2C_MspInit+0x138>)
 80081c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	60fb      	str	r3, [r7, #12]
 80081c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SDA_EEPROM_Pin;
 80081ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80081d0:	2312      	movs	r3, #18
 80081d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80081d4:	2301      	movs	r3, #1
 80081d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081d8:	2303      	movs	r3, #3
 80081da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80081dc:	2304      	movs	r3, #4
 80081de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_EEPROM_GPIO_Port, &GPIO_InitStruct);
 80081e0:	f107 031c 	add.w	r3, r7, #28
 80081e4:	4619      	mov	r1, r3
 80081e6:	481a      	ldr	r0, [pc, #104]	; (8008250 <HAL_I2C_MspInit+0x144>)
 80081e8:	f002 fbbc 	bl	800a964 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_EEPROM_Pin;
 80081ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80081f2:	2312      	movs	r3, #18
 80081f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80081f6:	2301      	movs	r3, #1
 80081f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081fa:	2303      	movs	r3, #3
 80081fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80081fe:	2304      	movs	r3, #4
 8008200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8008202:	f107 031c 	add.w	r3, r7, #28
 8008206:	4619      	mov	r1, r3
 8008208:	4812      	ldr	r0, [pc, #72]	; (8008254 <HAL_I2C_MspInit+0x148>)
 800820a:	f002 fbab 	bl	800a964 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800820e:	4b0d      	ldr	r3, [pc, #52]	; (8008244 <HAL_I2C_MspInit+0x138>)
 8008210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008212:	4a0c      	ldr	r2, [pc, #48]	; (8008244 <HAL_I2C_MspInit+0x138>)
 8008214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008218:	6413      	str	r3, [r2, #64]	; 0x40
 800821a:	4b0a      	ldr	r3, [pc, #40]	; (8008244 <HAL_I2C_MspInit+0x138>)
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008222:	60bb      	str	r3, [r7, #8]
 8008224:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8008226:	2200      	movs	r2, #0
 8008228:	2100      	movs	r1, #0
 800822a:	2048      	movs	r0, #72	; 0x48
 800822c:	f001 fe57 	bl	8009ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8008230:	2048      	movs	r0, #72	; 0x48
 8008232:	f001 fe70 	bl	8009f16 <HAL_NVIC_EnableIRQ>
}
 8008236:	bf00      	nop
 8008238:	3730      	adds	r7, #48	; 0x30
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	40005800 	.word	0x40005800
 8008244:	40023800 	.word	0x40023800
 8008248:	40021400 	.word	0x40021400
 800824c:	40005c00 	.word	0x40005c00
 8008250:	40020800 	.word	0x40020800
 8008254:	40020000 	.word	0x40020000

08008258 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a07      	ldr	r2, [pc, #28]	; (8008284 <HAL_RTC_MspInit+0x2c>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d105      	bne.n	8008276 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800826a:	4b07      	ldr	r3, [pc, #28]	; (8008288 <HAL_RTC_MspInit+0x30>)
 800826c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826e:	4a06      	ldr	r2, [pc, #24]	; (8008288 <HAL_RTC_MspInit+0x30>)
 8008270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008274:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8008276:	bf00      	nop
 8008278:	370c      	adds	r7, #12
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	40002800 	.word	0x40002800
 8008288:	40023800 	.word	0x40023800

0800828c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b08a      	sub	sp, #40	; 0x28
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008294:	f107 0314 	add.w	r3, r7, #20
 8008298:	2200      	movs	r2, #0
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	605a      	str	r2, [r3, #4]
 800829e:	609a      	str	r2, [r3, #8]
 80082a0:	60da      	str	r2, [r3, #12]
 80082a2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a6d      	ldr	r2, [pc, #436]	; (8008460 <HAL_SD_MspInit+0x1d4>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	f040 80d4 	bne.w	8008458 <HAL_SD_MspInit+0x1cc>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 80082b0:	4b6c      	ldr	r3, [pc, #432]	; (8008464 <HAL_SD_MspInit+0x1d8>)
 80082b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b4:	4a6b      	ldr	r2, [pc, #428]	; (8008464 <HAL_SD_MspInit+0x1d8>)
 80082b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ba:	6453      	str	r3, [r2, #68]	; 0x44
 80082bc:	4b69      	ldr	r3, [pc, #420]	; (8008464 <HAL_SD_MspInit+0x1d8>)
 80082be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082c4:	613b      	str	r3, [r7, #16]
 80082c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80082c8:	4b66      	ldr	r3, [pc, #408]	; (8008464 <HAL_SD_MspInit+0x1d8>)
 80082ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082cc:	4a65      	ldr	r2, [pc, #404]	; (8008464 <HAL_SD_MspInit+0x1d8>)
 80082ce:	f043 0308 	orr.w	r3, r3, #8
 80082d2:	6313      	str	r3, [r2, #48]	; 0x30
 80082d4:	4b63      	ldr	r3, [pc, #396]	; (8008464 <HAL_SD_MspInit+0x1d8>)
 80082d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d8:	f003 0308 	and.w	r3, r3, #8
 80082dc:	60fb      	str	r3, [r7, #12]
 80082de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80082e0:	4b60      	ldr	r3, [pc, #384]	; (8008464 <HAL_SD_MspInit+0x1d8>)
 80082e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e4:	4a5f      	ldr	r2, [pc, #380]	; (8008464 <HAL_SD_MspInit+0x1d8>)
 80082e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ea:	6313      	str	r3, [r2, #48]	; 0x30
 80082ec:	4b5d      	ldr	r3, [pc, #372]	; (8008464 <HAL_SD_MspInit+0x1d8>)
 80082ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f4:	60bb      	str	r3, [r7, #8]
 80082f6:	68bb      	ldr	r3, [r7, #8]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = SDIO_SCK_Pin|SDIO_CMD_Pin;
 80082f8:	23c0      	movs	r3, #192	; 0xc0
 80082fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082fc:	2302      	movs	r3, #2
 80082fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008300:	2300      	movs	r3, #0
 8008302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008304:	2303      	movs	r3, #3
 8008306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8008308:	230b      	movs	r3, #11
 800830a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800830c:	f107 0314 	add.w	r3, r7, #20
 8008310:	4619      	mov	r1, r3
 8008312:	4855      	ldr	r0, [pc, #340]	; (8008468 <HAL_SD_MspInit+0x1dc>)
 8008314:	f002 fb26 	bl	800a964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO_D0_Pin|SDIO_D1_Pin|SDIO_D3_Pin;
 8008318:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 800831c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800831e:	2302      	movs	r3, #2
 8008320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008322:	2300      	movs	r3, #0
 8008324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008326:	2303      	movs	r3, #3
 8008328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800832a:	230b      	movs	r3, #11
 800832c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800832e:	f107 0314 	add.w	r3, r7, #20
 8008332:	4619      	mov	r1, r3
 8008334:	484d      	ldr	r0, [pc, #308]	; (800846c <HAL_SD_MspInit+0x1e0>)
 8008336:	f002 fb15 	bl	800a964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO_D2_Pin;
 800833a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800833e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008340:	2302      	movs	r3, #2
 8008342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008344:	2300      	movs	r3, #0
 8008346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008348:	2303      	movs	r3, #3
 800834a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800834c:	230a      	movs	r3, #10
 800834e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDIO_D2_GPIO_Port, &GPIO_InitStruct);
 8008350:	f107 0314 	add.w	r3, r7, #20
 8008354:	4619      	mov	r1, r3
 8008356:	4845      	ldr	r0, [pc, #276]	; (800846c <HAL_SD_MspInit+0x1e0>)
 8008358:	f002 fb04 	bl	800a964 <HAL_GPIO_Init>

    /* SDMMC2 DMA Init */
    /* SDMMC2_TX Init */
    hdma_sdmmc2_tx.Instance = DMA2_Stream0;
 800835c:	4b44      	ldr	r3, [pc, #272]	; (8008470 <HAL_SD_MspInit+0x1e4>)
 800835e:	4a45      	ldr	r2, [pc, #276]	; (8008474 <HAL_SD_MspInit+0x1e8>)
 8008360:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_tx.Init.Channel = DMA_CHANNEL_11;
 8008362:	4b43      	ldr	r3, [pc, #268]	; (8008470 <HAL_SD_MspInit+0x1e4>)
 8008364:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8008368:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800836a:	4b41      	ldr	r3, [pc, #260]	; (8008470 <HAL_SD_MspInit+0x1e4>)
 800836c:	2240      	movs	r2, #64	; 0x40
 800836e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008370:	4b3f      	ldr	r3, [pc, #252]	; (8008470 <HAL_SD_MspInit+0x1e4>)
 8008372:	2200      	movs	r2, #0
 8008374:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008376:	4b3e      	ldr	r3, [pc, #248]	; (8008470 <HAL_SD_MspInit+0x1e4>)
 8008378:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800837c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800837e:	4b3c      	ldr	r3, [pc, #240]	; (8008470 <HAL_SD_MspInit+0x1e4>)
 8008380:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008384:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008386:	4b3a      	ldr	r3, [pc, #232]	; (8008470 <HAL_SD_MspInit+0x1e4>)
 8008388:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800838c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 800838e:	4b38      	ldr	r3, [pc, #224]	; (8008470 <HAL_SD_MspInit+0x1e4>)
 8008390:	2220      	movs	r2, #32
 8008392:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008394:	4b36      	ldr	r3, [pc, #216]	; (8008470 <HAL_SD_MspInit+0x1e4>)
 8008396:	2200      	movs	r2, #0
 8008398:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800839a:	4b35      	ldr	r3, [pc, #212]	; (8008470 <HAL_SD_MspInit+0x1e4>)
 800839c:	2204      	movs	r2, #4
 800839e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80083a0:	4b33      	ldr	r3, [pc, #204]	; (8008470 <HAL_SD_MspInit+0x1e4>)
 80083a2:	2203      	movs	r2, #3
 80083a4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_tx.Init.MemBurst = DMA_MBURST_INC4;
 80083a6:	4b32      	ldr	r3, [pc, #200]	; (8008470 <HAL_SD_MspInit+0x1e4>)
 80083a8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80083ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80083ae:	4b30      	ldr	r3, [pc, #192]	; (8008470 <HAL_SD_MspInit+0x1e4>)
 80083b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80083b4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_tx) != HAL_OK)
 80083b6:	482e      	ldr	r0, [pc, #184]	; (8008470 <HAL_SD_MspInit+0x1e4>)
 80083b8:	f001 feb0 	bl	800a11c <HAL_DMA_Init>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 80083c2:	f7ff fce9 	bl	8007d98 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc2_tx);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a29      	ldr	r2, [pc, #164]	; (8008470 <HAL_SD_MspInit+0x1e4>)
 80083ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80083cc:	4a28      	ldr	r2, [pc, #160]	; (8008470 <HAL_SD_MspInit+0x1e4>)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2_RX Init */
    hdma_sdmmc2_rx.Instance = DMA2_Stream5;
 80083d2:	4b29      	ldr	r3, [pc, #164]	; (8008478 <HAL_SD_MspInit+0x1ec>)
 80083d4:	4a29      	ldr	r2, [pc, #164]	; (800847c <HAL_SD_MspInit+0x1f0>)
 80083d6:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
 80083d8:	4b27      	ldr	r3, [pc, #156]	; (8008478 <HAL_SD_MspInit+0x1ec>)
 80083da:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 80083de:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80083e0:	4b25      	ldr	r3, [pc, #148]	; (8008478 <HAL_SD_MspInit+0x1ec>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80083e6:	4b24      	ldr	r3, [pc, #144]	; (8008478 <HAL_SD_MspInit+0x1ec>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80083ec:	4b22      	ldr	r3, [pc, #136]	; (8008478 <HAL_SD_MspInit+0x1ec>)
 80083ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80083f2:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80083f4:	4b20      	ldr	r3, [pc, #128]	; (8008478 <HAL_SD_MspInit+0x1ec>)
 80083f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80083fa:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80083fc:	4b1e      	ldr	r3, [pc, #120]	; (8008478 <HAL_SD_MspInit+0x1ec>)
 80083fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008402:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_rx.Init.Mode = DMA_PFCTRL;
 8008404:	4b1c      	ldr	r3, [pc, #112]	; (8008478 <HAL_SD_MspInit+0x1ec>)
 8008406:	2220      	movs	r2, #32
 8008408:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800840a:	4b1b      	ldr	r3, [pc, #108]	; (8008478 <HAL_SD_MspInit+0x1ec>)
 800840c:	2200      	movs	r2, #0
 800840e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008410:	4b19      	ldr	r3, [pc, #100]	; (8008478 <HAL_SD_MspInit+0x1ec>)
 8008412:	2204      	movs	r2, #4
 8008414:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8008416:	4b18      	ldr	r3, [pc, #96]	; (8008478 <HAL_SD_MspInit+0x1ec>)
 8008418:	2203      	movs	r2, #3
 800841a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_rx.Init.MemBurst = DMA_MBURST_INC4;
 800841c:	4b16      	ldr	r3, [pc, #88]	; (8008478 <HAL_SD_MspInit+0x1ec>)
 800841e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008422:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8008424:	4b14      	ldr	r3, [pc, #80]	; (8008478 <HAL_SD_MspInit+0x1ec>)
 8008426:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800842a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_rx) != HAL_OK)
 800842c:	4812      	ldr	r0, [pc, #72]	; (8008478 <HAL_SD_MspInit+0x1ec>)
 800842e:	f001 fe75 	bl	800a11c <HAL_DMA_Init>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 8008438:	f7ff fcae 	bl	8007d98 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc2_rx);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a0e      	ldr	r2, [pc, #56]	; (8008478 <HAL_SD_MspInit+0x1ec>)
 8008440:	641a      	str	r2, [r3, #64]	; 0x40
 8008442:	4a0d      	ldr	r2, [pc, #52]	; (8008478 <HAL_SD_MspInit+0x1ec>)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 1, 0);
 8008448:	2200      	movs	r2, #0
 800844a:	2101      	movs	r1, #1
 800844c:	2067      	movs	r0, #103	; 0x67
 800844e:	f001 fd46 	bl	8009ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8008452:	2067      	movs	r0, #103	; 0x67
 8008454:	f001 fd5f 	bl	8009f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8008458:	bf00      	nop
 800845a:	3728      	adds	r7, #40	; 0x28
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	40011c00 	.word	0x40011c00
 8008464:	40023800 	.word	0x40023800
 8008468:	40020c00 	.word	0x40020c00
 800846c:	40021800 	.word	0x40021800
 8008470:	200043a0 	.word	0x200043a0
 8008474:	40026410 	.word	0x40026410
 8008478:	20004400 	.word	0x20004400
 800847c:	40026488 	.word	0x40026488

08008480 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08c      	sub	sp, #48	; 0x30
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008488:	f107 031c 	add.w	r3, r7, #28
 800848c:	2200      	movs	r2, #0
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	605a      	str	r2, [r3, #4]
 8008492:	609a      	str	r2, [r3, #8]
 8008494:	60da      	str	r2, [r3, #12]
 8008496:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a3c      	ldr	r2, [pc, #240]	; (8008590 <HAL_SPI_MspInit+0x110>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d128      	bne.n	80084f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80084a2:	4b3c      	ldr	r3, [pc, #240]	; (8008594 <HAL_SPI_MspInit+0x114>)
 80084a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a6:	4a3b      	ldr	r2, [pc, #236]	; (8008594 <HAL_SPI_MspInit+0x114>)
 80084a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80084ac:	6453      	str	r3, [r2, #68]	; 0x44
 80084ae:	4b39      	ldr	r3, [pc, #228]	; (8008594 <HAL_SPI_MspInit+0x114>)
 80084b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084b6:	61bb      	str	r3, [r7, #24]
 80084b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084ba:	4b36      	ldr	r3, [pc, #216]	; (8008594 <HAL_SPI_MspInit+0x114>)
 80084bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084be:	4a35      	ldr	r2, [pc, #212]	; (8008594 <HAL_SPI_MspInit+0x114>)
 80084c0:	f043 0302 	orr.w	r3, r3, #2
 80084c4:	6313      	str	r3, [r2, #48]	; 0x30
 80084c6:	4b33      	ldr	r3, [pc, #204]	; (8008594 <HAL_SPI_MspInit+0x114>)
 80084c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	617b      	str	r3, [r7, #20]
 80084d0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TP24_Pin|TP25_Pin|TP27_Pin;
 80084d2:	2338      	movs	r3, #56	; 0x38
 80084d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084d6:	2302      	movs	r3, #2
 80084d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084da:	2300      	movs	r3, #0
 80084dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084de:	2303      	movs	r3, #3
 80084e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80084e2:	2305      	movs	r3, #5
 80084e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084e6:	f107 031c 	add.w	r3, r7, #28
 80084ea:	4619      	mov	r1, r3
 80084ec:	482a      	ldr	r0, [pc, #168]	; (8008598 <HAL_SPI_MspInit+0x118>)
 80084ee:	f002 fa39 	bl	800a964 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80084f2:	e049      	b.n	8008588 <HAL_SPI_MspInit+0x108>
  else if(hspi->Instance==SPI3)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a28      	ldr	r2, [pc, #160]	; (800859c <HAL_SPI_MspInit+0x11c>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d144      	bne.n	8008588 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80084fe:	4b25      	ldr	r3, [pc, #148]	; (8008594 <HAL_SPI_MspInit+0x114>)
 8008500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008502:	4a24      	ldr	r2, [pc, #144]	; (8008594 <HAL_SPI_MspInit+0x114>)
 8008504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008508:	6413      	str	r3, [r2, #64]	; 0x40
 800850a:	4b22      	ldr	r3, [pc, #136]	; (8008594 <HAL_SPI_MspInit+0x114>)
 800850c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008512:	613b      	str	r3, [r7, #16]
 8008514:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008516:	4b1f      	ldr	r3, [pc, #124]	; (8008594 <HAL_SPI_MspInit+0x114>)
 8008518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851a:	4a1e      	ldr	r2, [pc, #120]	; (8008594 <HAL_SPI_MspInit+0x114>)
 800851c:	f043 0302 	orr.w	r3, r3, #2
 8008520:	6313      	str	r3, [r2, #48]	; 0x30
 8008522:	4b1c      	ldr	r3, [pc, #112]	; (8008594 <HAL_SPI_MspInit+0x114>)
 8008524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008526:	f003 0302 	and.w	r3, r3, #2
 800852a:	60fb      	str	r3, [r7, #12]
 800852c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800852e:	4b19      	ldr	r3, [pc, #100]	; (8008594 <HAL_SPI_MspInit+0x114>)
 8008530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008532:	4a18      	ldr	r2, [pc, #96]	; (8008594 <HAL_SPI_MspInit+0x114>)
 8008534:	f043 0304 	orr.w	r3, r3, #4
 8008538:	6313      	str	r3, [r2, #48]	; 0x30
 800853a:	4b16      	ldr	r3, [pc, #88]	; (8008594 <HAL_SPI_MspInit+0x114>)
 800853c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853e:	f003 0304 	and.w	r3, r3, #4
 8008542:	60bb      	str	r3, [r7, #8]
 8008544:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = WIFI_SPI3_MOSI_Pin;
 8008546:	2304      	movs	r3, #4
 8008548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800854a:	2302      	movs	r3, #2
 800854c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800854e:	2300      	movs	r3, #0
 8008550:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008552:	2303      	movs	r3, #3
 8008554:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8008556:	2307      	movs	r3, #7
 8008558:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(WIFI_SPI3_MOSI_GPIO_Port, &GPIO_InitStruct);
 800855a:	f107 031c 	add.w	r3, r7, #28
 800855e:	4619      	mov	r1, r3
 8008560:	480d      	ldr	r0, [pc, #52]	; (8008598 <HAL_SPI_MspInit+0x118>)
 8008562:	f002 f9ff 	bl	800a964 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = WIFI_SPI3_SCK_Pin|WIFI_SPI3_MISO_Pin;
 8008566:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800856a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800856c:	2302      	movs	r3, #2
 800856e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008570:	2300      	movs	r3, #0
 8008572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008574:	2303      	movs	r3, #3
 8008576:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008578:	2306      	movs	r3, #6
 800857a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800857c:	f107 031c 	add.w	r3, r7, #28
 8008580:	4619      	mov	r1, r3
 8008582:	4807      	ldr	r0, [pc, #28]	; (80085a0 <HAL_SPI_MspInit+0x120>)
 8008584:	f002 f9ee 	bl	800a964 <HAL_GPIO_Init>
}
 8008588:	bf00      	nop
 800858a:	3730      	adds	r7, #48	; 0x30
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	40013000 	.word	0x40013000
 8008594:	40023800 	.word	0x40023800
 8008598:	40020400 	.word	0x40020400
 800859c:	40003c00 	.word	0x40003c00
 80085a0:	40020800 	.word	0x40020800

080085a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b088      	sub	sp, #32
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085b4:	d114      	bne.n	80085e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80085b6:	4b4c      	ldr	r3, [pc, #304]	; (80086e8 <HAL_TIM_Base_MspInit+0x144>)
 80085b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ba:	4a4b      	ldr	r2, [pc, #300]	; (80086e8 <HAL_TIM_Base_MspInit+0x144>)
 80085bc:	f043 0301 	orr.w	r3, r3, #1
 80085c0:	6413      	str	r3, [r2, #64]	; 0x40
 80085c2:	4b49      	ldr	r3, [pc, #292]	; (80086e8 <HAL_TIM_Base_MspInit+0x144>)
 80085c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	61fb      	str	r3, [r7, #28]
 80085cc:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80085ce:	2200      	movs	r2, #0
 80085d0:	2100      	movs	r1, #0
 80085d2:	201c      	movs	r0, #28
 80085d4:	f001 fc83 	bl	8009ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80085d8:	201c      	movs	r0, #28
 80085da:	f001 fc9c 	bl	8009f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80085de:	e07e      	b.n	80086de <HAL_TIM_Base_MspInit+0x13a>
  else if(htim_base->Instance==TIM5)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a41      	ldr	r2, [pc, #260]	; (80086ec <HAL_TIM_Base_MspInit+0x148>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d10c      	bne.n	8008604 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80085ea:	4b3f      	ldr	r3, [pc, #252]	; (80086e8 <HAL_TIM_Base_MspInit+0x144>)
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	4a3e      	ldr	r2, [pc, #248]	; (80086e8 <HAL_TIM_Base_MspInit+0x144>)
 80085f0:	f043 0308 	orr.w	r3, r3, #8
 80085f4:	6413      	str	r3, [r2, #64]	; 0x40
 80085f6:	4b3c      	ldr	r3, [pc, #240]	; (80086e8 <HAL_TIM_Base_MspInit+0x144>)
 80085f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fa:	f003 0308 	and.w	r3, r3, #8
 80085fe:	61bb      	str	r3, [r7, #24]
 8008600:	69bb      	ldr	r3, [r7, #24]
}
 8008602:	e06c      	b.n	80086de <HAL_TIM_Base_MspInit+0x13a>
  else if(htim_base->Instance==TIM6)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a39      	ldr	r2, [pc, #228]	; (80086f0 <HAL_TIM_Base_MspInit+0x14c>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d13c      	bne.n	8008688 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800860e:	4b36      	ldr	r3, [pc, #216]	; (80086e8 <HAL_TIM_Base_MspInit+0x144>)
 8008610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008612:	4a35      	ldr	r2, [pc, #212]	; (80086e8 <HAL_TIM_Base_MspInit+0x144>)
 8008614:	f043 0310 	orr.w	r3, r3, #16
 8008618:	6413      	str	r3, [r2, #64]	; 0x40
 800861a:	4b33      	ldr	r3, [pc, #204]	; (80086e8 <HAL_TIM_Base_MspInit+0x144>)
 800861c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861e:	f003 0310 	and.w	r3, r3, #16
 8008622:	617b      	str	r3, [r7, #20]
 8008624:	697b      	ldr	r3, [r7, #20]
    hdma_tim6_up.Instance = DMA1_Stream1;
 8008626:	4b33      	ldr	r3, [pc, #204]	; (80086f4 <HAL_TIM_Base_MspInit+0x150>)
 8008628:	4a33      	ldr	r2, [pc, #204]	; (80086f8 <HAL_TIM_Base_MspInit+0x154>)
 800862a:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 800862c:	4b31      	ldr	r3, [pc, #196]	; (80086f4 <HAL_TIM_Base_MspInit+0x150>)
 800862e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8008632:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008634:	4b2f      	ldr	r3, [pc, #188]	; (80086f4 <HAL_TIM_Base_MspInit+0x150>)
 8008636:	2200      	movs	r2, #0
 8008638:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800863a:	4b2e      	ldr	r3, [pc, #184]	; (80086f4 <HAL_TIM_Base_MspInit+0x150>)
 800863c:	2200      	movs	r2, #0
 800863e:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8008640:	4b2c      	ldr	r3, [pc, #176]	; (80086f4 <HAL_TIM_Base_MspInit+0x150>)
 8008642:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008646:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008648:	4b2a      	ldr	r3, [pc, #168]	; (80086f4 <HAL_TIM_Base_MspInit+0x150>)
 800864a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800864e:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008650:	4b28      	ldr	r3, [pc, #160]	; (80086f4 <HAL_TIM_Base_MspInit+0x150>)
 8008652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008656:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 8008658:	4b26      	ldr	r3, [pc, #152]	; (80086f4 <HAL_TIM_Base_MspInit+0x150>)
 800865a:	2200      	movs	r2, #0
 800865c:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 800865e:	4b25      	ldr	r3, [pc, #148]	; (80086f4 <HAL_TIM_Base_MspInit+0x150>)
 8008660:	2200      	movs	r2, #0
 8008662:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008664:	4b23      	ldr	r3, [pc, #140]	; (80086f4 <HAL_TIM_Base_MspInit+0x150>)
 8008666:	2200      	movs	r2, #0
 8008668:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 800866a:	4822      	ldr	r0, [pc, #136]	; (80086f4 <HAL_TIM_Base_MspInit+0x150>)
 800866c:	f001 fd56 	bl	800a11c <HAL_DMA_Init>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <HAL_TIM_Base_MspInit+0xd6>
      Error_Handler();
 8008676:	f7ff fb8f 	bl	8007d98 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a1d      	ldr	r2, [pc, #116]	; (80086f4 <HAL_TIM_Base_MspInit+0x150>)
 800867e:	621a      	str	r2, [r3, #32]
 8008680:	4a1c      	ldr	r2, [pc, #112]	; (80086f4 <HAL_TIM_Base_MspInit+0x150>)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008686:	e02a      	b.n	80086de <HAL_TIM_Base_MspInit+0x13a>
  else if(htim_base->Instance==TIM7)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a1b      	ldr	r2, [pc, #108]	; (80086fc <HAL_TIM_Base_MspInit+0x158>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d114      	bne.n	80086bc <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8008692:	4b15      	ldr	r3, [pc, #84]	; (80086e8 <HAL_TIM_Base_MspInit+0x144>)
 8008694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008696:	4a14      	ldr	r2, [pc, #80]	; (80086e8 <HAL_TIM_Base_MspInit+0x144>)
 8008698:	f043 0320 	orr.w	r3, r3, #32
 800869c:	6413      	str	r3, [r2, #64]	; 0x40
 800869e:	4b12      	ldr	r3, [pc, #72]	; (80086e8 <HAL_TIM_Base_MspInit+0x144>)
 80086a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a2:	f003 0320 	and.w	r3, r3, #32
 80086a6:	613b      	str	r3, [r7, #16]
 80086a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80086aa:	2200      	movs	r2, #0
 80086ac:	2100      	movs	r1, #0
 80086ae:	2037      	movs	r0, #55	; 0x37
 80086b0:	f001 fc15 	bl	8009ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80086b4:	2037      	movs	r0, #55	; 0x37
 80086b6:	f001 fc2e 	bl	8009f16 <HAL_NVIC_EnableIRQ>
}
 80086ba:	e010      	b.n	80086de <HAL_TIM_Base_MspInit+0x13a>
  else if(htim_base->Instance==TIM14)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a0f      	ldr	r2, [pc, #60]	; (8008700 <HAL_TIM_Base_MspInit+0x15c>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d10b      	bne.n	80086de <HAL_TIM_Base_MspInit+0x13a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80086c6:	4b08      	ldr	r3, [pc, #32]	; (80086e8 <HAL_TIM_Base_MspInit+0x144>)
 80086c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ca:	4a07      	ldr	r2, [pc, #28]	; (80086e8 <HAL_TIM_Base_MspInit+0x144>)
 80086cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086d0:	6413      	str	r3, [r2, #64]	; 0x40
 80086d2:	4b05      	ldr	r3, [pc, #20]	; (80086e8 <HAL_TIM_Base_MspInit+0x144>)
 80086d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086da:	60fb      	str	r3, [r7, #12]
 80086dc:	68fb      	ldr	r3, [r7, #12]
}
 80086de:	bf00      	nop
 80086e0:	3720      	adds	r7, #32
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	40023800 	.word	0x40023800
 80086ec:	40000c00 	.word	0x40000c00
 80086f0:	40001000 	.word	0x40001000
 80086f4:	200046a4 	.word	0x200046a4
 80086f8:	40026028 	.word	0x40026028
 80086fc:	40001400 	.word	0x40001400
 8008700:	40002000 	.word	0x40002000

08008704 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b08a      	sub	sp, #40	; 0x28
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800870c:	f107 0314 	add.w	r3, r7, #20
 8008710:	2200      	movs	r2, #0
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	605a      	str	r2, [r3, #4]
 8008716:	609a      	str	r2, [r3, #8]
 8008718:	60da      	str	r2, [r3, #12]
 800871a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008724:	d11d      	bne.n	8008762 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008726:	4b22      	ldr	r3, [pc, #136]	; (80087b0 <HAL_TIM_MspPostInit+0xac>)
 8008728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872a:	4a21      	ldr	r2, [pc, #132]	; (80087b0 <HAL_TIM_MspPostInit+0xac>)
 800872c:	f043 0302 	orr.w	r3, r3, #2
 8008730:	6313      	str	r3, [r2, #48]	; 0x30
 8008732:	4b1f      	ldr	r3, [pc, #124]	; (80087b0 <HAL_TIM_MspPostInit+0xac>)
 8008734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	613b      	str	r3, [r7, #16]
 800873c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = BZR_PWM_Pin;
 800873e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008744:	2302      	movs	r3, #2
 8008746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008748:	2300      	movs	r3, #0
 800874a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800874c:	2300      	movs	r3, #0
 800874e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008750:	2301      	movs	r3, #1
 8008752:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BZR_PWM_GPIO_Port, &GPIO_InitStruct);
 8008754:	f107 0314 	add.w	r3, r7, #20
 8008758:	4619      	mov	r1, r3
 800875a:	4816      	ldr	r0, [pc, #88]	; (80087b4 <HAL_TIM_MspPostInit+0xb0>)
 800875c:	f002 f902 	bl	800a964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8008760:	e021      	b.n	80087a6 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM14)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a14      	ldr	r2, [pc, #80]	; (80087b8 <HAL_TIM_MspPostInit+0xb4>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d11c      	bne.n	80087a6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800876c:	4b10      	ldr	r3, [pc, #64]	; (80087b0 <HAL_TIM_MspPostInit+0xac>)
 800876e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008770:	4a0f      	ldr	r2, [pc, #60]	; (80087b0 <HAL_TIM_MspPostInit+0xac>)
 8008772:	f043 0320 	orr.w	r3, r3, #32
 8008776:	6313      	str	r3, [r2, #48]	; 0x30
 8008778:	4b0d      	ldr	r3, [pc, #52]	; (80087b0 <HAL_TIM_MspPostInit+0xac>)
 800877a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877c:	f003 0320 	and.w	r3, r3, #32
 8008780:	60fb      	str	r3, [r7, #12]
 8008782:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_CTRL_PWM_TIM14_Pin;
 8008784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800878a:	2302      	movs	r3, #2
 800878c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800878e:	2300      	movs	r3, #0
 8008790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008792:	2300      	movs	r3, #0
 8008794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8008796:	2309      	movs	r3, #9
 8008798:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_CTRL_PWM_TIM14_GPIO_Port, &GPIO_InitStruct);
 800879a:	f107 0314 	add.w	r3, r7, #20
 800879e:	4619      	mov	r1, r3
 80087a0:	4806      	ldr	r0, [pc, #24]	; (80087bc <HAL_TIM_MspPostInit+0xb8>)
 80087a2:	f002 f8df 	bl	800a964 <HAL_GPIO_Init>
}
 80087a6:	bf00      	nop
 80087a8:	3728      	adds	r7, #40	; 0x28
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	40023800 	.word	0x40023800
 80087b4:	40020400 	.word	0x40020400
 80087b8:	40002000 	.word	0x40002000
 80087bc:	40021400 	.word	0x40021400

080087c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b08e      	sub	sp, #56	; 0x38
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087cc:	2200      	movs	r2, #0
 80087ce:	601a      	str	r2, [r3, #0]
 80087d0:	605a      	str	r2, [r3, #4]
 80087d2:	609a      	str	r2, [r3, #8]
 80087d4:	60da      	str	r2, [r3, #12]
 80087d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a5b      	ldr	r2, [pc, #364]	; (800894c <HAL_UART_MspInit+0x18c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d14d      	bne.n	800887e <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80087e2:	4b5b      	ldr	r3, [pc, #364]	; (8008950 <HAL_UART_MspInit+0x190>)
 80087e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e6:	4a5a      	ldr	r2, [pc, #360]	; (8008950 <HAL_UART_MspInit+0x190>)
 80087e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087ec:	6413      	str	r3, [r2, #64]	; 0x40
 80087ee:	4b58      	ldr	r3, [pc, #352]	; (8008950 <HAL_UART_MspInit+0x190>)
 80087f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087f6:	623b      	str	r3, [r7, #32]
 80087f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80087fa:	4b55      	ldr	r3, [pc, #340]	; (8008950 <HAL_UART_MspInit+0x190>)
 80087fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fe:	4a54      	ldr	r2, [pc, #336]	; (8008950 <HAL_UART_MspInit+0x190>)
 8008800:	f043 0304 	orr.w	r3, r3, #4
 8008804:	6313      	str	r3, [r2, #48]	; 0x30
 8008806:	4b52      	ldr	r3, [pc, #328]	; (8008950 <HAL_UART_MspInit+0x190>)
 8008808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880a:	f003 0304 	and.w	r3, r3, #4
 800880e:	61fb      	str	r3, [r7, #28]
 8008810:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008812:	4b4f      	ldr	r3, [pc, #316]	; (8008950 <HAL_UART_MspInit+0x190>)
 8008814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008816:	4a4e      	ldr	r2, [pc, #312]	; (8008950 <HAL_UART_MspInit+0x190>)
 8008818:	f043 0308 	orr.w	r3, r3, #8
 800881c:	6313      	str	r3, [r2, #48]	; 0x30
 800881e:	4b4c      	ldr	r3, [pc, #304]	; (8008950 <HAL_UART_MspInit+0x190>)
 8008820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008822:	f003 0308 	and.w	r3, r3, #8
 8008826:	61bb      	str	r3, [r7, #24]
 8008828:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART5_TX_Pin;
 800882a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800882e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008830:	2302      	movs	r3, #2
 8008832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008834:	2300      	movs	r3, #0
 8008836:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008838:	2303      	movs	r3, #3
 800883a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800883c:	2308      	movs	r3, #8
 800883e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8008840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008844:	4619      	mov	r1, r3
 8008846:	4843      	ldr	r0, [pc, #268]	; (8008954 <HAL_UART_MspInit+0x194>)
 8008848:	f002 f88c 	bl	800a964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DEBUG_UART5_RX_Pin;
 800884c:	2304      	movs	r3, #4
 800884e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008850:	2302      	movs	r3, #2
 8008852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008854:	2300      	movs	r3, #0
 8008856:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008858:	2303      	movs	r3, #3
 800885a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800885c:	2308      	movs	r3, #8
 800885e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DEBUG_UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8008860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008864:	4619      	mov	r1, r3
 8008866:	483c      	ldr	r0, [pc, #240]	; (8008958 <HAL_UART_MspInit+0x198>)
 8008868:	f002 f87c 	bl	800a964 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800886c:	2200      	movs	r2, #0
 800886e:	2105      	movs	r1, #5
 8008870:	2035      	movs	r0, #53	; 0x35
 8008872:	f001 fb34 	bl	8009ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8008876:	2035      	movs	r0, #53	; 0x35
 8008878:	f001 fb4d 	bl	8009f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 800887c:	e062      	b.n	8008944 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==UART7)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a36      	ldr	r2, [pc, #216]	; (800895c <HAL_UART_MspInit+0x19c>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d128      	bne.n	80088da <HAL_UART_MspInit+0x11a>
    __HAL_RCC_UART7_CLK_ENABLE();
 8008888:	4b31      	ldr	r3, [pc, #196]	; (8008950 <HAL_UART_MspInit+0x190>)
 800888a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888c:	4a30      	ldr	r2, [pc, #192]	; (8008950 <HAL_UART_MspInit+0x190>)
 800888e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008892:	6413      	str	r3, [r2, #64]	; 0x40
 8008894:	4b2e      	ldr	r3, [pc, #184]	; (8008950 <HAL_UART_MspInit+0x190>)
 8008896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008898:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800889c:	617b      	str	r3, [r7, #20]
 800889e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80088a0:	4b2b      	ldr	r3, [pc, #172]	; (8008950 <HAL_UART_MspInit+0x190>)
 80088a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a4:	4a2a      	ldr	r2, [pc, #168]	; (8008950 <HAL_UART_MspInit+0x190>)
 80088a6:	f043 0320 	orr.w	r3, r3, #32
 80088aa:	6313      	str	r3, [r2, #48]	; 0x30
 80088ac:	4b28      	ldr	r3, [pc, #160]	; (8008950 <HAL_UART_MspInit+0x190>)
 80088ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b0:	f003 0320 	and.w	r3, r3, #32
 80088b4:	613b      	str	r3, [r7, #16]
 80088b6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART7_RX_Pin|UART7_TX_Pin;
 80088b8:	23c0      	movs	r3, #192	; 0xc0
 80088ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088bc:	2302      	movs	r3, #2
 80088be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088c0:	2300      	movs	r3, #0
 80088c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088c4:	2303      	movs	r3, #3
 80088c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80088c8:	2308      	movs	r3, #8
 80088ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80088cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088d0:	4619      	mov	r1, r3
 80088d2:	4823      	ldr	r0, [pc, #140]	; (8008960 <HAL_UART_MspInit+0x1a0>)
 80088d4:	f002 f846 	bl	800a964 <HAL_GPIO_Init>
}
 80088d8:	e034      	b.n	8008944 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==UART8)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a21      	ldr	r2, [pc, #132]	; (8008964 <HAL_UART_MspInit+0x1a4>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d12f      	bne.n	8008944 <HAL_UART_MspInit+0x184>
    __HAL_RCC_UART8_CLK_ENABLE();
 80088e4:	4b1a      	ldr	r3, [pc, #104]	; (8008950 <HAL_UART_MspInit+0x190>)
 80088e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e8:	4a19      	ldr	r2, [pc, #100]	; (8008950 <HAL_UART_MspInit+0x190>)
 80088ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088ee:	6413      	str	r3, [r2, #64]	; 0x40
 80088f0:	4b17      	ldr	r3, [pc, #92]	; (8008950 <HAL_UART_MspInit+0x190>)
 80088f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088f8:	60fb      	str	r3, [r7, #12]
 80088fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80088fc:	4b14      	ldr	r3, [pc, #80]	; (8008950 <HAL_UART_MspInit+0x190>)
 80088fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008900:	4a13      	ldr	r2, [pc, #76]	; (8008950 <HAL_UART_MspInit+0x190>)
 8008902:	f043 0310 	orr.w	r3, r3, #16
 8008906:	6313      	str	r3, [r2, #48]	; 0x30
 8008908:	4b11      	ldr	r3, [pc, #68]	; (8008950 <HAL_UART_MspInit+0x190>)
 800890a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890c:	f003 0310 	and.w	r3, r3, #16
 8008910:	60bb      	str	r3, [r7, #8]
 8008912:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GUI_UART8_RX_Pin|GUI_UART8_TX_Pin;
 8008914:	2303      	movs	r3, #3
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008918:	2302      	movs	r3, #2
 800891a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800891c:	2300      	movs	r3, #0
 800891e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008920:	2303      	movs	r3, #3
 8008922:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8008924:	2308      	movs	r3, #8
 8008926:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800892c:	4619      	mov	r1, r3
 800892e:	480e      	ldr	r0, [pc, #56]	; (8008968 <HAL_UART_MspInit+0x1a8>)
 8008930:	f002 f818 	bl	800a964 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8008934:	2200      	movs	r2, #0
 8008936:	2100      	movs	r1, #0
 8008938:	2053      	movs	r0, #83	; 0x53
 800893a:	f001 fad0 	bl	8009ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800893e:	2053      	movs	r0, #83	; 0x53
 8008940:	f001 fae9 	bl	8009f16 <HAL_NVIC_EnableIRQ>
}
 8008944:	bf00      	nop
 8008946:	3738      	adds	r7, #56	; 0x38
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	40005000 	.word	0x40005000
 8008950:	40023800 	.word	0x40023800
 8008954:	40020800 	.word	0x40020800
 8008958:	40020c00 	.word	0x40020c00
 800895c:	40007800 	.word	0x40007800
 8008960:	40021400 	.word	0x40021400
 8008964:	40007c00 	.word	0x40007c00
 8008968:	40021000 	.word	0x40021000

0800896c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800896c:	b480      	push	{r7}
 800896e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008970:	e7fe      	b.n	8008970 <NMI_Handler+0x4>

08008972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008972:	b480      	push	{r7}
 8008974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008976:	e7fe      	b.n	8008976 <HardFault_Handler+0x4>

08008978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008978:	b480      	push	{r7}
 800897a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800897c:	e7fe      	b.n	800897c <MemManage_Handler+0x4>

0800897e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800897e:	b480      	push	{r7}
 8008980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008982:	e7fe      	b.n	8008982 <BusFault_Handler+0x4>

08008984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008984:	b480      	push	{r7}
 8008986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008988:	e7fe      	b.n	8008988 <UsageFault_Handler+0x4>

0800898a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800898a:	b480      	push	{r7}
 800898c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800898e:	bf00      	nop
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008998:	b480      	push	{r7}
 800899a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800899c:	bf00      	nop
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80089a6:	b480      	push	{r7}
 80089a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80089aa:	bf00      	nop
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80089b8:	f000 fbd2 	bl	8009160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80089bc:	bf00      	nop
 80089be:	bd80      	pop	{r7, pc}

080089c0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80089c4:	2004      	movs	r0, #4
 80089c6:	f002 f9b5 	bl	800ad34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80089ca:	bf00      	nop
 80089cc:	bd80      	pop	{r7, pc}
	...

080089d0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 80089d4:	4802      	ldr	r0, [pc, #8]	; (80089e0 <DMA1_Stream1_IRQHandler+0x10>)
 80089d6:	f001 fd41 	bl	800a45c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80089da:	bf00      	nop
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	200046a4 	.word	0x200046a4

080089e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80089e8:	4802      	ldr	r0, [pc, #8]	; (80089f4 <TIM2_IRQHandler+0x10>)
 80089ea:	f008 fdbb 	bl	8011564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80089ee:	bf00      	nop
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	20004528 	.word	0x20004528

080089f8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80089fc:	4802      	ldr	r0, [pc, #8]	; (8008a08 <I2C2_EV_IRQHandler+0x10>)
 80089fe:	f002 fd3f 	bl	800b480 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8008a02:	bf00      	nop
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	20004264 	.word	0x20004264

08008a0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	uint32_t i = 0;    //added by GG 10/06/21
 8008a12:	2300      	movs	r3, #0
 8008a14:	607b      	str	r3, [r7, #4]
	if(__HAL_GPIO_EXTI_GET_FLAG(PFC_POWERFAILWARNNING_N_Pin))
 8008a16:	4b1f      	ldr	r3, [pc, #124]	; (8008a94 <EXTI15_10_IRQHandler+0x88>)
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d007      	beq.n	8008a32 <EXTI15_10_IRQHandler+0x26>
	{
		bPowerFailWarn = true;
 8008a22:	4b1d      	ldr	r3, [pc, #116]	; (8008a98 <EXTI15_10_IRQHandler+0x8c>)
 8008a24:	2201      	movs	r2, #1
 8008a26:	701a      	strb	r2, [r3, #0]
		uPowerFailWarnTimeDB = Get_SysTick();
 8008a28:	f7fd faae 	bl	8005f88 <Get_SysTick>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	4a1b      	ldr	r2, [pc, #108]	; (8008a9c <EXTI15_10_IRQHandler+0x90>)
 8008a30:	6013      	str	r3, [r2, #0]
	}
	if(__HAL_GPIO_EXTI_GET_FLAG(PFC_LoadEN_N_Pin))
 8008a32:	4b18      	ldr	r3, [pc, #96]	; (8008a94 <EXTI15_10_IRQHandler+0x88>)
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d01a      	beq.n	8008a74 <EXTI15_10_IRQHandler+0x68>
	{
		for (i=0; i<1000000; i++) { }  //stupid delay to avoid using HAL_delay inside interupt GG 10/05/21
 8008a3e:	2300      	movs	r3, #0
 8008a40:	607b      	str	r3, [r7, #4]
 8008a42:	e002      	b.n	8008a4a <EXTI15_10_IRQHandler+0x3e>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	3301      	adds	r3, #1
 8008a48:	607b      	str	r3, [r7, #4]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a14      	ldr	r2, [pc, #80]	; (8008aa0 <EXTI15_10_IRQHandler+0x94>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d9f8      	bls.n	8008a44 <EXTI15_10_IRQHandler+0x38>
                                       //we must delay to de-bounce signal here, not in the main! GG
		if (! HAL_GPIO_ReadPin(GPIOF, PFC_LoadEN_N_Pin))  //if signal is still low then set flag
 8008a52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008a56:	4813      	ldr	r0, [pc, #76]	; (8008aa4 <EXTI15_10_IRQHandler+0x98>)
 8008a58:	f002 f920 	bl	800ac9c <HAL_GPIO_ReadPin>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d108      	bne.n	8008a74 <EXTI15_10_IRQHandler+0x68>
		{
			SetPfcLoadEnable( true );
 8008a62:	2001      	movs	r0, #1
 8008a64:	f7fa fe1a 	bl	800369c <SetPfcLoadEnable>
			HAL_GPIO_WritePin(GPIOD, LED_Y_Pin, true);  //added for troubleshoot purposes GG 100521
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008a6e:	480e      	ldr	r0, [pc, #56]	; (8008aa8 <EXTI15_10_IRQHandler+0x9c>)
 8008a70:	f002 f92c 	bl	800accc <HAL_GPIO_WritePin>
		//bPfcLoadEnable = true;
	    //uPfcLoadEnTimeDB = Get_SysTick();
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8008a74:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008a78:	f002 f95c 	bl	800ad34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8008a7c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008a80:	f002 f958 	bl	800ad34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8008a84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008a88:	f002 f954 	bl	800ad34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008a8c:	bf00      	nop
 8008a8e:	3708      	adds	r7, #8
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	40013c00 	.word	0x40013c00
 8008a98:	2000712c 	.word	0x2000712c
 8008a9c:	20007130 	.word	0x20007130
 8008aa0:	000f423f 	.word	0x000f423f
 8008aa4:	40021400 	.word	0x40021400
 8008aa8:	40020c00 	.word	0x40020c00

08008aac <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8008ab0:	4803      	ldr	r0, [pc, #12]	; (8008ac0 <UART5_IRQHandler+0x14>)
 8008ab2:	f009 fedb 	bl	801286c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  USER_UART_IRQHandler(&debugUart);
 8008ab6:	4802      	ldr	r0, [pc, #8]	; (8008ac0 <UART5_IRQHandler+0x14>)
 8008ab8:	f000 f860 	bl	8008b7c <USER_UART_IRQHandler>
  /* USER CODE END UART5_IRQn 1 */
}
 8008abc:	bf00      	nop
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	20004704 	.word	0x20004704

08008ac4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008ac8:	4802      	ldr	r0, [pc, #8]	; (8008ad4 <TIM7_IRQHandler+0x10>)
 8008aca:	f008 fd4b 	bl	8011564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8008ace:	bf00      	nop
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	2000460c 	.word	0x2000460c

08008ad8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_tx);
 8008adc:	4802      	ldr	r0, [pc, #8]	; (8008ae8 <DMA2_Stream0_IRQHandler+0x10>)
 8008ade:	f001 fcbd 	bl	800a45c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008ae2:	bf00      	nop
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	200043a0 	.word	0x200043a0

08008aec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8008af0:	4802      	ldr	r0, [pc, #8]	; (8008afc <DMA2_Stream1_IRQHandler+0x10>)
 8008af2:	f001 fcb3 	bl	800a45c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8008af6:	bf00      	nop
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	200041f0 	.word	0x200041f0

08008b00 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008b04:	4802      	ldr	r0, [pc, #8]	; (8008b10 <DMA2_Stream4_IRQHandler+0x10>)
 8008b06:	f001 fca9 	bl	800a45c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8008b0a:	bf00      	nop
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	20004190 	.word	0x20004190

08008b14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008b18:	4802      	ldr	r0, [pc, #8]	; (8008b24 <OTG_FS_IRQHandler+0x10>)
 8008b1a:	f004 fa32 	bl	800cf82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008b1e:	bf00      	nop
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	20007a60 	.word	0x20007a60

08008b28 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_rx);
 8008b2c:	4802      	ldr	r0, [pc, #8]	; (8008b38 <DMA2_Stream5_IRQHandler+0x10>)
 8008b2e:	f001 fc95 	bl	800a45c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8008b32:	bf00      	nop
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	20004400 	.word	0x20004400

08008b3c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8008b40:	4802      	ldr	r0, [pc, #8]	; (8008b4c <I2C3_EV_IRQHandler+0x10>)
 8008b42:	f002 fc9d 	bl	800b480 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8008b46:	bf00      	nop
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	200042b0 	.word	0x200042b0

08008b50 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8008b54:	4803      	ldr	r0, [pc, #12]	; (8008b64 <UART8_IRQHandler+0x14>)
 8008b56:	f009 fe89 	bl	801286c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */
  USER_UART_IRQHandler(&guiUart);
 8008b5a:	4802      	ldr	r0, [pc, #8]	; (8008b64 <UART8_IRQHandler+0x14>)
 8008b5c:	f000 f80e 	bl	8008b7c <USER_UART_IRQHandler>
  /* USER CODE END UART8_IRQn 1 */
}
 8008b60:	bf00      	nop
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	2000480c 	.word	0x2000480c

08008b68 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8008b6c:	4802      	ldr	r0, [pc, #8]	; (8008b78 <SDMMC2_IRQHandler+0x10>)
 8008b6e:	f007 f907 	bl	800fd80 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8008b72:	bf00      	nop
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	2000431c 	.word	0x2000431c

08008b7c <USER_UART_IRQHandler>:

/* USER CODE BEGIN 1 */

void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
    if(UART5 == huart->Instance)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a13      	ldr	r2, [pc, #76]	; (8008bd8 <USER_UART_IRQHandler+0x5c>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d10d      	bne.n	8008baa <USER_UART_IRQHandler+0x2e>
    {
        if(RESET != __HAL_UART_GET_FLAG(&debugUart, UART_FLAG_IDLE))   // Determine whether idle interrupt is set
 8008b8e:	4b13      	ldr	r3, [pc, #76]	; (8008bdc <USER_UART_IRQHandler+0x60>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	69db      	ldr	r3, [r3, #28]
 8008b94:	f003 0310 	and.w	r3, r3, #16
 8008b98:	2b10      	cmp	r3, #16
 8008b9a:	d106      	bne.n	8008baa <USER_UART_IRQHandler+0x2e>
        {
            __HAL_UART_CLEAR_IDLEFLAG(&debugUart);                     // Clear idle interrupt (otherwise it will continue to enter interrupt)
 8008b9c:	4b0f      	ldr	r3, [pc, #60]	; (8008bdc <USER_UART_IRQHandler+0x60>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2210      	movs	r2, #16
 8008ba2:	621a      	str	r2, [r3, #32]
            USER_UART_IDLECallback(&debugUart);                             // Call UART idle interrupt handler
 8008ba4:	480d      	ldr	r0, [pc, #52]	; (8008bdc <USER_UART_IRQHandler+0x60>)
 8008ba6:	f000 f81f 	bl	8008be8 <USER_UART_IDLECallback>
        }
    }

    if(UART8 == huart->Instance)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a0c      	ldr	r2, [pc, #48]	; (8008be0 <USER_UART_IRQHandler+0x64>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d10d      	bne.n	8008bd0 <USER_UART_IRQHandler+0x54>
    {
        if(RESET != __HAL_UART_GET_FLAG(&guiUart, UART_FLAG_IDLE))   // Determine whether idle interrupt is set
 8008bb4:	4b0b      	ldr	r3, [pc, #44]	; (8008be4 <USER_UART_IRQHandler+0x68>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	f003 0310 	and.w	r3, r3, #16
 8008bbe:	2b10      	cmp	r3, #16
 8008bc0:	d106      	bne.n	8008bd0 <USER_UART_IRQHandler+0x54>
        {
            __HAL_UART_CLEAR_IDLEFLAG(&guiUart);                     // Clear idle interrupt (otherwise it will continue to enter interrupt)
 8008bc2:	4b08      	ldr	r3, [pc, #32]	; (8008be4 <USER_UART_IRQHandler+0x68>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2210      	movs	r2, #16
 8008bc8:	621a      	str	r2, [r3, #32]
            USER_UART8_IDLECallback(&guiUart);                             // Call UART idle interrupt handler
 8008bca:	4806      	ldr	r0, [pc, #24]	; (8008be4 <USER_UART_IRQHandler+0x68>)
 8008bcc:	f000 f8c6 	bl	8008d5c <USER_UART8_IDLECallback>
        }
    }
}
 8008bd0:	bf00      	nop
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	40005000 	.word	0x40005000
 8008bdc:	20004704 	.word	0x20004704
 8008be0:	40007c00 	.word	0x40007c00
 8008be4:	2000480c 	.word	0x2000480c

08008be8 <USER_UART_IDLECallback>:
const int8_t endOfCommandChar = '\r';
uint16_t unprocessedCommandInputLength = 0;
uint16_t uartRxXferCount;

void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
	if( commandReady != false )
 8008bf0:	4b53      	ldr	r3, [pc, #332]	; (8008d40 <USER_UART_IDLECallback+0x158>)
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f040 809f 	bne.w	8008d38 <USER_UART_IDLECallback+0x150>
		// Do not start assembling next command until previous command has been processed
		return;
	}

	// Get number of bytes received
	uartRxXferCount = UART_RX_DMA_BUFFER_SIZE - huart->RxXferCount;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	4b4e      	ldr	r3, [pc, #312]	; (8008d44 <USER_UART_IDLECallback+0x15c>)
 8008c0a:	801a      	strh	r2, [r3, #0]

	// Stop this UART reception
	HAL_UART_AbortReceive_IT(&debugUart);
 8008c0c:	484e      	ldr	r0, [pc, #312]	; (8008d48 <USER_UART_IDLECallback+0x160>)
 8008c0e:	f009 fdad 	bl	801276c <HAL_UART_AbortReceive_IT>

    // Calculate the length of the received data
    char * endOfCommandPos = strchr((char *)uartReceiveBuff, endOfCommandChar);
 8008c12:	230d      	movs	r3, #13
 8008c14:	4619      	mov	r1, r3
 8008c16:	484d      	ldr	r0, [pc, #308]	; (8008d4c <USER_UART_IDLECallback+0x164>)
 8008c18:	f014 fb84 	bl	801d324 <strchr>
 8008c1c:	60b8      	str	r0, [r7, #8]
    uint16_t rxMessageLength = uartRxXferCount;
 8008c1e:	4b49      	ldr	r3, [pc, #292]	; (8008d44 <USER_UART_IDLECallback+0x15c>)
 8008c20:	881b      	ldrh	r3, [r3, #0]
 8008c22:	81fb      	strh	r3, [r7, #14]
    if( endOfCommandPos != NULL )
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d005      	beq.n	8008c36 <USER_UART_IDLECallback+0x4e>
    {
    	rxMessageLength = (uint8_t *)endOfCommandPos - uartReceiveBuff + 1;
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	4a47      	ldr	r2, [pc, #284]	; (8008d4c <USER_UART_IDLECallback+0x164>)
 8008c2e:	1a9b      	subs	r3, r3, r2
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	3301      	adds	r3, #1
 8008c34:	81fb      	strh	r3, [r7, #14]
    }

    // Check that total command is not too long
    if (MAX_COMMAND_LENGTH <  (unprocessedCommandInputLength + rxMessageLength) )
 8008c36:	4b46      	ldr	r3, [pc, #280]	; (8008d50 <USER_UART_IDLECallback+0x168>)
 8008c38:	881b      	ldrh	r3, [r3, #0]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	89fb      	ldrh	r3, [r7, #14]
 8008c3e:	4413      	add	r3, r2
 8008c40:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8008c44:	dd15      	ble.n	8008c72 <USER_UART_IDLECallback+0x8a>
    {
    	// Command length exceeds maximum length -- discard current command and return
    	unprocessedCommandInputLength = 0;
 8008c46:	4b42      	ldr	r3, [pc, #264]	; (8008d50 <USER_UART_IDLECallback+0x168>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	801a      	strh	r2, [r3, #0]

    	// Clear Receive and temp command Buffers
    	memset(uartReceiveBuff, 0, MAX_COMMAND_LENGTH);
 8008c4c:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8008c50:	2100      	movs	r1, #0
 8008c52:	483e      	ldr	r0, [pc, #248]	; (8008d4c <USER_UART_IDLECallback+0x164>)
 8008c54:	f013 fdb0 	bl	801c7b8 <memset>
    	memset(commandBufTemp, '\0', MAX_COMMAND_LENGTH);
 8008c58:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	483d      	ldr	r0, [pc, #244]	; (8008d54 <USER_UART_IDLECallback+0x16c>)
 8008c60:	f013 fdaa 	bl	801c7b8 <memset>

    	// Restart to start IT transmission of UART_RX_DMA_BUFFER_SIZE bytes of data at a time
    	HAL_UART_Receive_IT(&debugUart, (uint8_t*)uartReceiveBuff, UART_RX_DMA_BUFFER_SIZE);
 8008c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c68:	4938      	ldr	r1, [pc, #224]	; (8008d4c <USER_UART_IDLECallback+0x164>)
 8008c6a:	4837      	ldr	r0, [pc, #220]	; (8008d48 <USER_UART_IDLECallback+0x160>)
 8008c6c:	f009 fd40 	bl	80126f0 <HAL_UART_Receive_IT>
    	return;
 8008c70:	e063      	b.n	8008d3a <USER_UART_IDLECallback+0x152>
    }

    // If end of command character is in rx buffer, command is complete and ready for processing
    if( endOfCommandPos != NULL )
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d045      	beq.n	8008d04 <USER_UART_IDLECallback+0x11c>
    {
    	// Command terminator found
    	// Copy rx buff to command buffer without end of command terminator
    	if( unprocessedCommandInputLength > 0 )
 8008c78:	4b35      	ldr	r3, [pc, #212]	; (8008d50 <USER_UART_IDLECallback+0x168>)
 8008c7a:	881b      	ldrh	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d010      	beq.n	8008ca2 <USER_UART_IDLECallback+0xba>
    	{
    		// Concatenate rx buffer with unprocessed command input
    		strncat( commandBufTemp, (char *)uartReceiveBuff, rxMessageLength );
 8008c80:	89fb      	ldrh	r3, [r7, #14]
 8008c82:	461a      	mov	r2, r3
 8008c84:	4931      	ldr	r1, [pc, #196]	; (8008d4c <USER_UART_IDLECallback+0x164>)
 8008c86:	4833      	ldr	r0, [pc, #204]	; (8008d54 <USER_UART_IDLECallback+0x16c>)
 8008c88:	f014 fb61 	bl	801d34e <strncat>

    		// Copy completed message in temp command buffer to command buffer for processing in background
        	strncpy( commandBuf, commandBufTemp, strlen(commandBufTemp) - 1);
 8008c8c:	4831      	ldr	r0, [pc, #196]	; (8008d54 <USER_UART_IDLECallback+0x16c>)
 8008c8e:	f7f7 fad1 	bl	8000234 <strlen>
 8008c92:	4603      	mov	r3, r0
 8008c94:	3b01      	subs	r3, #1
 8008c96:	461a      	mov	r2, r3
 8008c98:	492e      	ldr	r1, [pc, #184]	; (8008d54 <USER_UART_IDLECallback+0x16c>)
 8008c9a:	482f      	ldr	r0, [pc, #188]	; (8008d58 <USER_UART_IDLECallback+0x170>)
 8008c9c:	f014 fb6a 	bl	801d374 <strncpy>
 8008ca0:	e006      	b.n	8008cb0 <USER_UART_IDLECallback+0xc8>
    	}
    	else // No unprocessed command input, copy rx input directly to command buffer for processing in background
    	{
    		strncpy( commandBuf, (char *)uartReceiveBuff, rxMessageLength - 1);
 8008ca2:	89fb      	ldrh	r3, [r7, #14]
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	4928      	ldr	r1, [pc, #160]	; (8008d4c <USER_UART_IDLECallback+0x164>)
 8008caa:	482b      	ldr	r0, [pc, #172]	; (8008d58 <USER_UART_IDLECallback+0x170>)
 8008cac:	f014 fb62 	bl	801d374 <strncpy>
    	}

    	// Save any remaining rx input beyond the current command to temp buffer for processing when next rx input is received
    	if( rxMessageLength < uartRxXferCount )
 8008cb0:	4b24      	ldr	r3, [pc, #144]	; (8008d44 <USER_UART_IDLECallback+0x15c>)
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	89fa      	ldrh	r2, [r7, #14]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d213      	bcs.n	8008ce2 <USER_UART_IDLECallback+0xfa>
    	{
    		strncpy( commandBufTemp, (char *)(uartReceiveBuff + rxMessageLength), (uartRxXferCount - rxMessageLength) );
 8008cba:	89fb      	ldrh	r3, [r7, #14]
 8008cbc:	4a23      	ldr	r2, [pc, #140]	; (8008d4c <USER_UART_IDLECallback+0x164>)
 8008cbe:	1899      	adds	r1, r3, r2
 8008cc0:	4b20      	ldr	r3, [pc, #128]	; (8008d44 <USER_UART_IDLECallback+0x15c>)
 8008cc2:	881b      	ldrh	r3, [r3, #0]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	89fb      	ldrh	r3, [r7, #14]
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	461a      	mov	r2, r3
 8008ccc:	4821      	ldr	r0, [pc, #132]	; (8008d54 <USER_UART_IDLECallback+0x16c>)
 8008cce:	f014 fb51 	bl	801d374 <strncpy>

    		// Keep track of received unprocessed command size
    		unprocessedCommandInputLength = uartRxXferCount - rxMessageLength;
 8008cd2:	4b1c      	ldr	r3, [pc, #112]	; (8008d44 <USER_UART_IDLECallback+0x15c>)
 8008cd4:	881a      	ldrh	r2, [r3, #0]
 8008cd6:	89fb      	ldrh	r3, [r7, #14]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	4b1c      	ldr	r3, [pc, #112]	; (8008d50 <USER_UART_IDLECallback+0x168>)
 8008cde:	801a      	strh	r2, [r3, #0]
 8008ce0:	e00c      	b.n	8008cfc <USER_UART_IDLECallback+0x114>
    	}
    	else // No remaining rx input, clear temp buffer
    	{
    		memset(commandBufTemp, '\0', (unprocessedCommandInputLength + rxMessageLength));
 8008ce2:	4b1b      	ldr	r3, [pc, #108]	; (8008d50 <USER_UART_IDLECallback+0x168>)
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	89fb      	ldrh	r3, [r7, #14]
 8008cea:	4413      	add	r3, r2
 8008cec:	461a      	mov	r2, r3
 8008cee:	2100      	movs	r1, #0
 8008cf0:	4818      	ldr	r0, [pc, #96]	; (8008d54 <USER_UART_IDLECallback+0x16c>)
 8008cf2:	f013 fd61 	bl	801c7b8 <memset>

    		// Set unprocessed command length to 0
    		unprocessedCommandInputLength = 0;
 8008cf6:	4b16      	ldr	r3, [pc, #88]	; (8008d50 <USER_UART_IDLECallback+0x168>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	801a      	strh	r2, [r3, #0]
    	}

    	// Set flag for command processing by background task since full command has been received
    	commandReady = true;
 8008cfc:	4b10      	ldr	r3, [pc, #64]	; (8008d40 <USER_UART_IDLECallback+0x158>)
 8008cfe:	2201      	movs	r2, #1
 8008d00:	701a      	strb	r2, [r3, #0]
 8008d02:	e00c      	b.n	8008d1e <USER_UART_IDLECallback+0x136>
    }
    else
    {
    	// Command terminator not found
    	// Copy rx buff to temp command buffer for later processing since no terminator was found in rx buff
    	strncat( commandBufTemp, (char *)uartReceiveBuff, rxMessageLength);
 8008d04:	89fb      	ldrh	r3, [r7, #14]
 8008d06:	461a      	mov	r2, r3
 8008d08:	4910      	ldr	r1, [pc, #64]	; (8008d4c <USER_UART_IDLECallback+0x164>)
 8008d0a:	4812      	ldr	r0, [pc, #72]	; (8008d54 <USER_UART_IDLECallback+0x16c>)
 8008d0c:	f014 fb1f 	bl	801d34e <strncat>

    	// Keep track of received unprocessed command size
    	unprocessedCommandInputLength += rxMessageLength;
 8008d10:	4b0f      	ldr	r3, [pc, #60]	; (8008d50 <USER_UART_IDLECallback+0x168>)
 8008d12:	881a      	ldrh	r2, [r3, #0]
 8008d14:	89fb      	ldrh	r3, [r7, #14]
 8008d16:	4413      	add	r3, r2
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	4b0d      	ldr	r3, [pc, #52]	; (8008d50 <USER_UART_IDLECallback+0x168>)
 8008d1c:	801a      	strh	r2, [r3, #0]
    }

    // Zero UART Receive Buffer
    memset(uartReceiveBuff, 0, rxMessageLength);
 8008d1e:	89fb      	ldrh	r3, [r7, #14]
 8008d20:	461a      	mov	r2, r3
 8008d22:	2100      	movs	r1, #0
 8008d24:	4809      	ldr	r0, [pc, #36]	; (8008d4c <USER_UART_IDLECallback+0x164>)
 8008d26:	f013 fd47 	bl	801c7b8 <memset>

    // Restart IT reception of UART_RX_DMA_BUFFER_SIZE bytes of data at a time
    HAL_UART_Receive_IT(&debugUart, (uint8_t*)uartReceiveBuff, UART_RX_DMA_BUFFER_SIZE);
 8008d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d2e:	4907      	ldr	r1, [pc, #28]	; (8008d4c <USER_UART_IDLECallback+0x164>)
 8008d30:	4805      	ldr	r0, [pc, #20]	; (8008d48 <USER_UART_IDLECallback+0x160>)
 8008d32:	f009 fcdd 	bl	80126f0 <HAL_UART_Receive_IT>
 8008d36:	e000      	b.n	8008d3a <USER_UART_IDLECallback+0x152>
		return;
 8008d38:	bf00      	nop
}
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	20006d0e 	.word	0x20006d0e
 8008d44:	20007334 	.word	0x20007334
 8008d48:	20004704 	.word	0x20004704
 8008d4c:	20006910 	.word	0x20006910
 8008d50:	20007332 	.word	0x20007332
 8008d54:	20007134 	.word	0x20007134
 8008d58:	20006b10 	.word	0x20006b10

08008d5c <USER_UART8_IDLECallback>:
char guiCommandBufTemp[MAX_COMMAND_LENGTH];
uint16_t guiUnprocessedCommandInputLength = 0;
uint16_t guiUartRxXferCount;

void USER_UART8_IDLECallback(UART_HandleTypeDef *huart)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
	if( guiCommandReady != false )
 8008d64:	4b53      	ldr	r3, [pc, #332]	; (8008eb4 <USER_UART8_IDLECallback+0x158>)
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f040 809f 	bne.w	8008eac <USER_UART8_IDLECallback+0x150>
		// Do not start assembling next command until previous command has been processed
		return;
	}

	// Get number of bytes received
	guiUartRxXferCount = UART_RX_DMA_BUFFER_SIZE - huart->RxXferCount;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	4b4e      	ldr	r3, [pc, #312]	; (8008eb8 <USER_UART8_IDLECallback+0x15c>)
 8008d7e:	801a      	strh	r2, [r3, #0]

	// Stop this UART reception
	HAL_UART_AbortReceive_IT(&guiUart);
 8008d80:	484e      	ldr	r0, [pc, #312]	; (8008ebc <USER_UART8_IDLECallback+0x160>)
 8008d82:	f009 fcf3 	bl	801276c <HAL_UART_AbortReceive_IT>

    // Calculate the length of the received data
    char * endOfCommandPos = strchr((char *)guiUartReceiveBuff, endOfCommandChar);
 8008d86:	230d      	movs	r3, #13
 8008d88:	4619      	mov	r1, r3
 8008d8a:	484d      	ldr	r0, [pc, #308]	; (8008ec0 <USER_UART8_IDLECallback+0x164>)
 8008d8c:	f014 faca 	bl	801d324 <strchr>
 8008d90:	60b8      	str	r0, [r7, #8]
    uint16_t rxMessageLength = guiUartRxXferCount;
 8008d92:	4b49      	ldr	r3, [pc, #292]	; (8008eb8 <USER_UART8_IDLECallback+0x15c>)
 8008d94:	881b      	ldrh	r3, [r3, #0]
 8008d96:	81fb      	strh	r3, [r7, #14]
    if( endOfCommandPos != NULL )
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d005      	beq.n	8008daa <USER_UART8_IDLECallback+0x4e>
    {
    	rxMessageLength = (uint8_t *)endOfCommandPos - guiUartReceiveBuff + 1;
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	4a47      	ldr	r2, [pc, #284]	; (8008ec0 <USER_UART8_IDLECallback+0x164>)
 8008da2:	1a9b      	subs	r3, r3, r2
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	3301      	adds	r3, #1
 8008da8:	81fb      	strh	r3, [r7, #14]
    }

    // Check that total command is not too long
    if (MAX_COMMAND_LENGTH <  (guiUnprocessedCommandInputLength + rxMessageLength) )
 8008daa:	4b46      	ldr	r3, [pc, #280]	; (8008ec4 <USER_UART8_IDLECallback+0x168>)
 8008dac:	881b      	ldrh	r3, [r3, #0]
 8008dae:	461a      	mov	r2, r3
 8008db0:	89fb      	ldrh	r3, [r7, #14]
 8008db2:	4413      	add	r3, r2
 8008db4:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8008db8:	dd15      	ble.n	8008de6 <USER_UART8_IDLECallback+0x8a>
    {
    	// Command length exceeds maximum length -- discard current command and return
    	guiUnprocessedCommandInputLength = 0;
 8008dba:	4b42      	ldr	r3, [pc, #264]	; (8008ec4 <USER_UART8_IDLECallback+0x168>)
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	801a      	strh	r2, [r3, #0]

    	// Clear Receive and temp command Buffers
    	memset(guiUartReceiveBuff, 0, MAX_COMMAND_LENGTH);
 8008dc0:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	483e      	ldr	r0, [pc, #248]	; (8008ec0 <USER_UART8_IDLECallback+0x164>)
 8008dc8:	f013 fcf6 	bl	801c7b8 <memset>
    	memset(guiCommandBufTemp, '\0', MAX_COMMAND_LENGTH);
 8008dcc:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	483d      	ldr	r0, [pc, #244]	; (8008ec8 <USER_UART8_IDLECallback+0x16c>)
 8008dd4:	f013 fcf0 	bl	801c7b8 <memset>

    	// Restart to start IT transmission of UART_RX_DMA_BUFFER_SIZE bytes of data at a time
    	HAL_UART_Receive_IT(&guiUart, (uint8_t*)guiUartReceiveBuff, UART_RX_DMA_BUFFER_SIZE);
 8008dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ddc:	4938      	ldr	r1, [pc, #224]	; (8008ec0 <USER_UART8_IDLECallback+0x164>)
 8008dde:	4837      	ldr	r0, [pc, #220]	; (8008ebc <USER_UART8_IDLECallback+0x160>)
 8008de0:	f009 fc86 	bl	80126f0 <HAL_UART_Receive_IT>
    	return;
 8008de4:	e063      	b.n	8008eae <USER_UART8_IDLECallback+0x152>
    }

    // If end of command character is in rx buffer, command is complete and ready for processing
    if( endOfCommandPos != NULL )
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d045      	beq.n	8008e78 <USER_UART8_IDLECallback+0x11c>
    {
    	// Command terminator found
    	// Copy rx buff to command buffer without end of command terminator
    	if( guiUnprocessedCommandInputLength > 0 )
 8008dec:	4b35      	ldr	r3, [pc, #212]	; (8008ec4 <USER_UART8_IDLECallback+0x168>)
 8008dee:	881b      	ldrh	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d010      	beq.n	8008e16 <USER_UART8_IDLECallback+0xba>
    	{
    		// Concatenate rx buffer with unprocessed command input
    		strncat( guiCommandBufTemp, (char *)guiUartReceiveBuff, rxMessageLength );
 8008df4:	89fb      	ldrh	r3, [r7, #14]
 8008df6:	461a      	mov	r2, r3
 8008df8:	4931      	ldr	r1, [pc, #196]	; (8008ec0 <USER_UART8_IDLECallback+0x164>)
 8008dfa:	4833      	ldr	r0, [pc, #204]	; (8008ec8 <USER_UART8_IDLECallback+0x16c>)
 8008dfc:	f014 faa7 	bl	801d34e <strncat>

    		// Copy completed message in temp command buffer to command buffer for processing in background
        	strncpy( guiCommandBuf, guiCommandBufTemp, strlen(guiCommandBufTemp) - 1);
 8008e00:	4831      	ldr	r0, [pc, #196]	; (8008ec8 <USER_UART8_IDLECallback+0x16c>)
 8008e02:	f7f7 fa17 	bl	8000234 <strlen>
 8008e06:	4603      	mov	r3, r0
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	492e      	ldr	r1, [pc, #184]	; (8008ec8 <USER_UART8_IDLECallback+0x16c>)
 8008e0e:	482f      	ldr	r0, [pc, #188]	; (8008ecc <USER_UART8_IDLECallback+0x170>)
 8008e10:	f014 fab0 	bl	801d374 <strncpy>
 8008e14:	e006      	b.n	8008e24 <USER_UART8_IDLECallback+0xc8>
    	}
    	else // No unprocessed command input, copy rx input directly to command buffer for processing in background
    	{
    		strncpy( guiCommandBuf, (char *)guiUartReceiveBuff, rxMessageLength - 1);
 8008e16:	89fb      	ldrh	r3, [r7, #14]
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	4928      	ldr	r1, [pc, #160]	; (8008ec0 <USER_UART8_IDLECallback+0x164>)
 8008e1e:	482b      	ldr	r0, [pc, #172]	; (8008ecc <USER_UART8_IDLECallback+0x170>)
 8008e20:	f014 faa8 	bl	801d374 <strncpy>
    	}

    	// Save any remaining rx input beyond the current command to temp buffer for processing when next rx input is received
    	if( rxMessageLength < guiUartRxXferCount )
 8008e24:	4b24      	ldr	r3, [pc, #144]	; (8008eb8 <USER_UART8_IDLECallback+0x15c>)
 8008e26:	881b      	ldrh	r3, [r3, #0]
 8008e28:	89fa      	ldrh	r2, [r7, #14]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d213      	bcs.n	8008e56 <USER_UART8_IDLECallback+0xfa>
    	{
    		strncpy( guiCommandBufTemp, (char *)(guiUartReceiveBuff + rxMessageLength), (guiUartRxXferCount - rxMessageLength) );
 8008e2e:	89fb      	ldrh	r3, [r7, #14]
 8008e30:	4a23      	ldr	r2, [pc, #140]	; (8008ec0 <USER_UART8_IDLECallback+0x164>)
 8008e32:	1899      	adds	r1, r3, r2
 8008e34:	4b20      	ldr	r3, [pc, #128]	; (8008eb8 <USER_UART8_IDLECallback+0x15c>)
 8008e36:	881b      	ldrh	r3, [r3, #0]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	89fb      	ldrh	r3, [r7, #14]
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	461a      	mov	r2, r3
 8008e40:	4821      	ldr	r0, [pc, #132]	; (8008ec8 <USER_UART8_IDLECallback+0x16c>)
 8008e42:	f014 fa97 	bl	801d374 <strncpy>

    		// Keep track of received unprocessed command size
    		guiUnprocessedCommandInputLength = guiUartRxXferCount - rxMessageLength;
 8008e46:	4b1c      	ldr	r3, [pc, #112]	; (8008eb8 <USER_UART8_IDLECallback+0x15c>)
 8008e48:	881a      	ldrh	r2, [r3, #0]
 8008e4a:	89fb      	ldrh	r3, [r7, #14]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	4b1c      	ldr	r3, [pc, #112]	; (8008ec4 <USER_UART8_IDLECallback+0x168>)
 8008e52:	801a      	strh	r2, [r3, #0]
 8008e54:	e00c      	b.n	8008e70 <USER_UART8_IDLECallback+0x114>
    	}
    	else // No remaining rx input, clear temp buffer
    	{
    		memset(guiCommandBufTemp, '\0', (guiUnprocessedCommandInputLength + rxMessageLength));
 8008e56:	4b1b      	ldr	r3, [pc, #108]	; (8008ec4 <USER_UART8_IDLECallback+0x168>)
 8008e58:	881b      	ldrh	r3, [r3, #0]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	89fb      	ldrh	r3, [r7, #14]
 8008e5e:	4413      	add	r3, r2
 8008e60:	461a      	mov	r2, r3
 8008e62:	2100      	movs	r1, #0
 8008e64:	4818      	ldr	r0, [pc, #96]	; (8008ec8 <USER_UART8_IDLECallback+0x16c>)
 8008e66:	f013 fca7 	bl	801c7b8 <memset>

    		// Set unprocessed command length to 0
    		guiUnprocessedCommandInputLength = 0;
 8008e6a:	4b16      	ldr	r3, [pc, #88]	; (8008ec4 <USER_UART8_IDLECallback+0x168>)
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	801a      	strh	r2, [r3, #0]
    	}

    	// Set flag for command processing by background task since full command has been received
    	guiCommandReady = true;
 8008e70:	4b10      	ldr	r3, [pc, #64]	; (8008eb4 <USER_UART8_IDLECallback+0x158>)
 8008e72:	2201      	movs	r2, #1
 8008e74:	701a      	strb	r2, [r3, #0]
 8008e76:	e00c      	b.n	8008e92 <USER_UART8_IDLECallback+0x136>
    }
    else
    {
    	// Command terminator not found
    	// Copy rx buff to temp command buffer for later processing since no terminator was found in rx buff
    	strncat( guiCommandBufTemp, (char *)guiUartReceiveBuff, rxMessageLength);
 8008e78:	89fb      	ldrh	r3, [r7, #14]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	4910      	ldr	r1, [pc, #64]	; (8008ec0 <USER_UART8_IDLECallback+0x164>)
 8008e7e:	4812      	ldr	r0, [pc, #72]	; (8008ec8 <USER_UART8_IDLECallback+0x16c>)
 8008e80:	f014 fa65 	bl	801d34e <strncat>

    	// Keep track of received unprocessed command size
    	guiUnprocessedCommandInputLength += rxMessageLength;
 8008e84:	4b0f      	ldr	r3, [pc, #60]	; (8008ec4 <USER_UART8_IDLECallback+0x168>)
 8008e86:	881a      	ldrh	r2, [r3, #0]
 8008e88:	89fb      	ldrh	r3, [r7, #14]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	4b0d      	ldr	r3, [pc, #52]	; (8008ec4 <USER_UART8_IDLECallback+0x168>)
 8008e90:	801a      	strh	r2, [r3, #0]
    }

    // Zero UART Receive Buffer
    memset(guiUartReceiveBuff, 0, rxMessageLength);
 8008e92:	89fb      	ldrh	r3, [r7, #14]
 8008e94:	461a      	mov	r2, r3
 8008e96:	2100      	movs	r1, #0
 8008e98:	4809      	ldr	r0, [pc, #36]	; (8008ec0 <USER_UART8_IDLECallback+0x164>)
 8008e9a:	f013 fc8d 	bl	801c7b8 <memset>

    // Restart IT reception of UART_RX_DMA_BUFFER_SIZE bytes of data at a time
    HAL_UART_Receive_IT(&guiUart, (uint8_t*)guiUartReceiveBuff, UART_RX_DMA_BUFFER_SIZE);
 8008e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ea2:	4907      	ldr	r1, [pc, #28]	; (8008ec0 <USER_UART8_IDLECallback+0x164>)
 8008ea4:	4805      	ldr	r0, [pc, #20]	; (8008ebc <USER_UART8_IDLECallback+0x160>)
 8008ea6:	f009 fc23 	bl	80126f0 <HAL_UART_Receive_IT>
 8008eaa:	e000      	b.n	8008eae <USER_UART8_IDLECallback+0x152>
		return;
 8008eac:	bf00      	nop
}
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	2000710e 	.word	0x2000710e
 8008eb8:	20007538 	.word	0x20007538
 8008ebc:	2000480c 	.word	0x2000480c
 8008ec0:	20006d10 	.word	0x20006d10
 8008ec4:	20007536 	.word	0x20007536
 8008ec8:	20007338 	.word	0x20007338
 8008ecc:	20006f10 	.word	0x20006f10

08008ed0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	af00      	add	r7, sp, #0
	return 1;
 8008ed4:	2301      	movs	r3, #1
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <_kill>:

int _kill(int pid, int sig)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008eea:	f013 fc1d 	bl	801c728 <__errno>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2216      	movs	r2, #22
 8008ef2:	601a      	str	r2, [r3, #0]
	return -1;
 8008ef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <_exit>:

void _exit (int status)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008f08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f7ff ffe7 	bl	8008ee0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008f12:	e7fe      	b.n	8008f12 <_exit+0x12>

08008f14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f20:	2300      	movs	r3, #0
 8008f22:	617b      	str	r3, [r7, #20]
 8008f24:	e00a      	b.n	8008f3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008f26:	f3af 8000 	nop.w
 8008f2a:	4601      	mov	r1, r0
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	1c5a      	adds	r2, r3, #1
 8008f30:	60ba      	str	r2, [r7, #8]
 8008f32:	b2ca      	uxtb	r2, r1
 8008f34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	617b      	str	r3, [r7, #20]
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	dbf0      	blt.n	8008f26 <_read+0x12>
	}

return len;
 8008f44:	687b      	ldr	r3, [r7, #4]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3718      	adds	r7, #24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b086      	sub	sp, #24
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	60f8      	str	r0, [r7, #12]
 8008f56:	60b9      	str	r1, [r7, #8]
 8008f58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	617b      	str	r3, [r7, #20]
 8008f5e:	e009      	b.n	8008f74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	60ba      	str	r2, [r7, #8]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	3301      	adds	r3, #1
 8008f72:	617b      	str	r3, [r7, #20]
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	dbf1      	blt.n	8008f60 <_write+0x12>
	}
	return len;
 8008f7c:	687b      	ldr	r3, [r7, #4]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3718      	adds	r7, #24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <_close>:

int _close(int file)
{
 8008f86:	b480      	push	{r7}
 8008f88:	b083      	sub	sp, #12
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
	return -1;
 8008f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b083      	sub	sp, #12
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008fae:	605a      	str	r2, [r3, #4]
	return 0;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <_isatty>:

int _isatty(int file)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b083      	sub	sp, #12
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
	return 1;
 8008fc6:	2301      	movs	r3, #1
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
	return 0;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
	...

08008ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008ff8:	4a14      	ldr	r2, [pc, #80]	; (800904c <_sbrk+0x5c>)
 8008ffa:	4b15      	ldr	r3, [pc, #84]	; (8009050 <_sbrk+0x60>)
 8008ffc:	1ad3      	subs	r3, r2, r3
 8008ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009004:	4b13      	ldr	r3, [pc, #76]	; (8009054 <_sbrk+0x64>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d102      	bne.n	8009012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800900c:	4b11      	ldr	r3, [pc, #68]	; (8009054 <_sbrk+0x64>)
 800900e:	4a12      	ldr	r2, [pc, #72]	; (8009058 <_sbrk+0x68>)
 8009010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009012:	4b10      	ldr	r3, [pc, #64]	; (8009054 <_sbrk+0x64>)
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4413      	add	r3, r2
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	429a      	cmp	r2, r3
 800901e:	d207      	bcs.n	8009030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009020:	f013 fb82 	bl	801c728 <__errno>
 8009024:	4603      	mov	r3, r0
 8009026:	220c      	movs	r2, #12
 8009028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800902a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800902e:	e009      	b.n	8009044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009030:	4b08      	ldr	r3, [pc, #32]	; (8009054 <_sbrk+0x64>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009036:	4b07      	ldr	r3, [pc, #28]	; (8009054 <_sbrk+0x64>)
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4413      	add	r3, r2
 800903e:	4a05      	ldr	r2, [pc, #20]	; (8009054 <_sbrk+0x64>)
 8009040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009042:	68fb      	ldr	r3, [r7, #12]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3718      	adds	r7, #24
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	20040000 	.word	0x20040000
 8009050:	00001000 	.word	0x00001000
 8009054:	2000753c 	.word	0x2000753c
 8009058:	20007e78 	.word	0x20007e78

0800905c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800905c:	b480      	push	{r7}
 800905e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009060:	4b06      	ldr	r3, [pc, #24]	; (800907c <SystemInit+0x20>)
 8009062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009066:	4a05      	ldr	r2, [pc, #20]	; (800907c <SystemInit+0x20>)
 8009068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800906c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009070:	bf00      	nop
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	e000ed00 	.word	0xe000ed00

08009080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80090b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009084:	480d      	ldr	r0, [pc, #52]	; (80090bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8009086:	490e      	ldr	r1, [pc, #56]	; (80090c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8009088:	4a0e      	ldr	r2, [pc, #56]	; (80090c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800908a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800908c:	e002      	b.n	8009094 <LoopCopyDataInit>

0800908e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800908e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009092:	3304      	adds	r3, #4

08009094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009098:	d3f9      	bcc.n	800908e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800909a:	4a0b      	ldr	r2, [pc, #44]	; (80090c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800909c:	4c0b      	ldr	r4, [pc, #44]	; (80090cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800909e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80090a0:	e001      	b.n	80090a6 <LoopFillZerobss>

080090a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80090a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80090a4:	3204      	adds	r2, #4

080090a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80090a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80090a8:	d3fb      	bcc.n	80090a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80090aa:	f7ff ffd7 	bl	800905c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80090ae:	f013 fb41 	bl	801c734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80090b2:	f7fd fa69 	bl	8006588 <main>
  bx  lr    
 80090b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80090b8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80090bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80090c0:	20000578 	.word	0x20000578
  ldr r2, =_sidata
 80090c4:	08023204 	.word	0x08023204
  ldr r2, =_sbss
 80090c8:	20000578 	.word	0x20000578
  ldr r4, =_ebss
 80090cc:	20007e74 	.word	0x20007e74

080090d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80090d0:	e7fe      	b.n	80090d0 <ADC_IRQHandler>
	...

080090d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80090d8:	4b08      	ldr	r3, [pc, #32]	; (80090fc <HAL_Init+0x28>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a07      	ldr	r2, [pc, #28]	; (80090fc <HAL_Init+0x28>)
 80090de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80090e2:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80090e4:	2003      	movs	r0, #3
 80090e6:	f000 feef 	bl	8009ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80090ea:	2000      	movs	r0, #0
 80090ec:	f000 f808 	bl	8009100 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80090f0:	f7fe fe6e 	bl	8007dd0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	40023c00 	.word	0x40023c00

08009100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009108:	4b12      	ldr	r3, [pc, #72]	; (8009154 <HAL_InitTick+0x54>)
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	4b12      	ldr	r3, [pc, #72]	; (8009158 <HAL_InitTick+0x58>)
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	4619      	mov	r1, r3
 8009112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009116:	fbb3 f3f1 	udiv	r3, r3, r1
 800911a:	fbb2 f3f3 	udiv	r3, r2, r3
 800911e:	4618      	mov	r0, r3
 8009120:	f000 ff07 	bl	8009f32 <HAL_SYSTICK_Config>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e00e      	b.n	800914c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2b0f      	cmp	r3, #15
 8009132:	d80a      	bhi.n	800914a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009134:	2200      	movs	r2, #0
 8009136:	6879      	ldr	r1, [r7, #4]
 8009138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800913c:	f000 fecf 	bl	8009ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009140:	4a06      	ldr	r2, [pc, #24]	; (800915c <HAL_InitTick+0x5c>)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	e000      	b.n	800914c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
}
 800914c:	4618      	mov	r0, r3
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	20000230 	.word	0x20000230
 8009158:	20000238 	.word	0x20000238
 800915c:	20000234 	.word	0x20000234

08009160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009160:	b480      	push	{r7}
 8009162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009164:	4b06      	ldr	r3, [pc, #24]	; (8009180 <HAL_IncTick+0x20>)
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	461a      	mov	r2, r3
 800916a:	4b06      	ldr	r3, [pc, #24]	; (8009184 <HAL_IncTick+0x24>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4413      	add	r3, r2
 8009170:	4a04      	ldr	r2, [pc, #16]	; (8009184 <HAL_IncTick+0x24>)
 8009172:	6013      	str	r3, [r2, #0]
}
 8009174:	bf00      	nop
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	20000238 	.word	0x20000238
 8009184:	20007540 	.word	0x20007540

08009188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009188:	b480      	push	{r7}
 800918a:	af00      	add	r7, sp, #0
  return uwTick;
 800918c:	4b03      	ldr	r3, [pc, #12]	; (800919c <HAL_GetTick+0x14>)
 800918e:	681b      	ldr	r3, [r3, #0]
}
 8009190:	4618      	mov	r0, r3
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	20007540 	.word	0x20007540

080091a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80091a8:	f7ff ffee 	bl	8009188 <HAL_GetTick>
 80091ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091b8:	d005      	beq.n	80091c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80091ba:	4b0a      	ldr	r3, [pc, #40]	; (80091e4 <HAL_Delay+0x44>)
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	461a      	mov	r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	4413      	add	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80091c6:	bf00      	nop
 80091c8:	f7ff ffde 	bl	8009188 <HAL_GetTick>
 80091cc:	4602      	mov	r2, r0
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d8f7      	bhi.n	80091c8 <HAL_Delay+0x28>
  {
  }
}
 80091d8:	bf00      	nop
 80091da:	bf00      	nop
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	20000238 	.word	0x20000238

080091e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e031      	b.n	8009262 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009202:	2b00      	cmp	r3, #0
 8009204:	d109      	bne.n	800921a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f7fe fe06 	bl	8007e18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921e:	f003 0310 	and.w	r3, r3, #16
 8009222:	2b00      	cmp	r3, #0
 8009224:	d116      	bne.n	8009254 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800922a:	4b10      	ldr	r3, [pc, #64]	; (800926c <HAL_ADC_Init+0x84>)
 800922c:	4013      	ands	r3, r2
 800922e:	f043 0202 	orr.w	r2, r3, #2
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fbfa 	bl	8009a30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009246:	f023 0303 	bic.w	r3, r3, #3
 800924a:	f043 0201 	orr.w	r2, r3, #1
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	641a      	str	r2, [r3, #64]	; 0x40
 8009252:	e001      	b.n	8009258 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009260:	7bfb      	ldrb	r3, [r7, #15]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	ffffeefd 	.word	0xffffeefd

08009270 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8009278:	2300      	movs	r3, #0
 800927a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009282:	2b01      	cmp	r3, #1
 8009284:	d101      	bne.n	800928a <HAL_ADC_Start+0x1a>
 8009286:	2302      	movs	r3, #2
 8009288:	e0ad      	b.n	80093e6 <HAL_ADC_Start+0x176>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	f003 0301 	and.w	r3, r3, #1
 800929c:	2b01      	cmp	r3, #1
 800929e:	d018      	beq.n	80092d2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	689a      	ldr	r2, [r3, #8]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f042 0201 	orr.w	r2, r2, #1
 80092ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80092b0:	4b50      	ldr	r3, [pc, #320]	; (80093f4 <HAL_ADC_Start+0x184>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a50      	ldr	r2, [pc, #320]	; (80093f8 <HAL_ADC_Start+0x188>)
 80092b6:	fba2 2303 	umull	r2, r3, r2, r3
 80092ba:	0c9a      	lsrs	r2, r3, #18
 80092bc:	4613      	mov	r3, r2
 80092be:	005b      	lsls	r3, r3, #1
 80092c0:	4413      	add	r3, r2
 80092c2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80092c4:	e002      	b.n	80092cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3b01      	subs	r3, #1
 80092ca:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1f9      	bne.n	80092c6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	f003 0301 	and.w	r3, r3, #1
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d175      	bne.n	80093cc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092e4:	4b45      	ldr	r3, [pc, #276]	; (80093fc <HAL_ADC_Start+0x18c>)
 80092e6:	4013      	ands	r3, r2
 80092e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d007      	beq.n	800930e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009302:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009306:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800931a:	d106      	bne.n	800932a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009320:	f023 0206 	bic.w	r2, r3, #6
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	645a      	str	r2, [r3, #68]	; 0x44
 8009328:	e002      	b.n	8009330 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009340:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8009342:	4b2f      	ldr	r3, [pc, #188]	; (8009400 <HAL_ADC_Start+0x190>)
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	f003 031f 	and.w	r3, r3, #31
 800934a:	2b00      	cmp	r3, #0
 800934c:	d10f      	bne.n	800936e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d143      	bne.n	80093e4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	689a      	ldr	r2, [r3, #8]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800936a:	609a      	str	r2, [r3, #8]
 800936c:	e03a      	b.n	80093e4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a24      	ldr	r2, [pc, #144]	; (8009404 <HAL_ADC_Start+0x194>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d10e      	bne.n	8009396 <HAL_ADC_Start+0x126>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009382:	2b00      	cmp	r3, #0
 8009384:	d107      	bne.n	8009396 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	689a      	ldr	r2, [r3, #8]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009394:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8009396:	4b1a      	ldr	r3, [pc, #104]	; (8009400 <HAL_ADC_Start+0x190>)
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	f003 0310 	and.w	r3, r3, #16
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d120      	bne.n	80093e4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a18      	ldr	r2, [pc, #96]	; (8009408 <HAL_ADC_Start+0x198>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d11b      	bne.n	80093e4 <HAL_ADC_Start+0x174>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d114      	bne.n	80093e4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	689a      	ldr	r2, [r3, #8]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80093c8:	609a      	str	r2, [r3, #8]
 80093ca:	e00b      	b.n	80093e4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d0:	f043 0210 	orr.w	r2, r3, #16
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093dc:	f043 0201 	orr.w	r2, r3, #1
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	20000230 	.word	0x20000230
 80093f8:	431bde83 	.word	0x431bde83
 80093fc:	fffff8fe 	.word	0xfffff8fe
 8009400:	40012300 	.word	0x40012300
 8009404:	40012000 	.word	0x40012000
 8009408:	40012200 	.word	0x40012200

0800940c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8009418:	2300      	movs	r3, #0
 800941a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009422:	2b01      	cmp	r3, #1
 8009424:	d101      	bne.n	800942a <HAL_ADC_Start_DMA+0x1e>
 8009426:	2302      	movs	r3, #2
 8009428:	e0d4      	b.n	80095d4 <HAL_ADC_Start_DMA+0x1c8>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	f003 0301 	and.w	r3, r3, #1
 800943c:	2b01      	cmp	r3, #1
 800943e:	d018      	beq.n	8009472 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689a      	ldr	r2, [r3, #8]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f042 0201 	orr.w	r2, r2, #1
 800944e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8009450:	4b62      	ldr	r3, [pc, #392]	; (80095dc <HAL_ADC_Start_DMA+0x1d0>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a62      	ldr	r2, [pc, #392]	; (80095e0 <HAL_ADC_Start_DMA+0x1d4>)
 8009456:	fba2 2303 	umull	r2, r3, r2, r3
 800945a:	0c9a      	lsrs	r2, r3, #18
 800945c:	4613      	mov	r3, r2
 800945e:	005b      	lsls	r3, r3, #1
 8009460:	4413      	add	r3, r2
 8009462:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8009464:	e002      	b.n	800946c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	3b01      	subs	r3, #1
 800946a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1f9      	bne.n	8009466 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	f003 0301 	and.w	r3, r3, #1
 800947c:	2b01      	cmp	r3, #1
 800947e:	f040 809c 	bne.w	80095ba <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009486:	4b57      	ldr	r3, [pc, #348]	; (80095e4 <HAL_ADC_Start_DMA+0x1d8>)
 8009488:	4013      	ands	r3, r2
 800948a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800949c:	2b00      	cmp	r3, #0
 800949e:	d007      	beq.n	80094b0 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80094a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094bc:	d106      	bne.n	80094cc <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c2:	f023 0206 	bic.w	r2, r3, #6
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	645a      	str	r2, [r3, #68]	; 0x44
 80094ca:	e002      	b.n	80094d2 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094de:	4a42      	ldr	r2, [pc, #264]	; (80095e8 <HAL_ADC_Start_DMA+0x1dc>)
 80094e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e6:	4a41      	ldr	r2, [pc, #260]	; (80095ec <HAL_ADC_Start_DMA+0x1e0>)
 80094e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ee:	4a40      	ldr	r2, [pc, #256]	; (80095f0 <HAL_ADC_Start_DMA+0x1e4>)
 80094f0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80094fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	685a      	ldr	r2, [r3, #4]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800950a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	689a      	ldr	r2, [r3, #8]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800951a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	334c      	adds	r3, #76	; 0x4c
 8009526:	4619      	mov	r1, r3
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f000 fea4 	bl	800a278 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8009530:	4b30      	ldr	r3, [pc, #192]	; (80095f4 <HAL_ADC_Start_DMA+0x1e8>)
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	f003 031f 	and.w	r3, r3, #31
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10f      	bne.n	800955c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d143      	bne.n	80095d2 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	689a      	ldr	r2, [r3, #8]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009558:	609a      	str	r2, [r3, #8]
 800955a:	e03a      	b.n	80095d2 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a25      	ldr	r2, [pc, #148]	; (80095f8 <HAL_ADC_Start_DMA+0x1ec>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d10e      	bne.n	8009584 <HAL_ADC_Start_DMA+0x178>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009570:	2b00      	cmp	r3, #0
 8009572:	d107      	bne.n	8009584 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	689a      	ldr	r2, [r3, #8]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009582:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8009584:	4b1b      	ldr	r3, [pc, #108]	; (80095f4 <HAL_ADC_Start_DMA+0x1e8>)
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	f003 0310 	and.w	r3, r3, #16
 800958c:	2b00      	cmp	r3, #0
 800958e:	d120      	bne.n	80095d2 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a19      	ldr	r2, [pc, #100]	; (80095fc <HAL_ADC_Start_DMA+0x1f0>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d11b      	bne.n	80095d2 <HAL_ADC_Start_DMA+0x1c6>
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d114      	bne.n	80095d2 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	689a      	ldr	r2, [r3, #8]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80095b6:	609a      	str	r2, [r3, #8]
 80095b8:	e00b      	b.n	80095d2 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095be:	f043 0210 	orr.w	r2, r3, #16
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ca:	f043 0201 	orr.w	r2, r3, #1
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	20000230 	.word	0x20000230
 80095e0:	431bde83 	.word	0x431bde83
 80095e4:	fffff8fe 	.word	0xfffff8fe
 80095e8:	08009c25 	.word	0x08009c25
 80095ec:	08009cdf 	.word	0x08009cdf
 80095f0:	08009cfb 	.word	0x08009cfb
 80095f4:	40012300 	.word	0x40012300
 80095f8:	40012000 	.word	0x40012000
 80095fc:	40012200 	.word	0x40012200

08009600 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009612:	2b01      	cmp	r3, #1
 8009614:	d101      	bne.n	800961a <HAL_ADC_Stop_DMA+0x1a>
 8009616:	2302      	movs	r3, #2
 8009618:	e046      	b.n	80096a8 <HAL_ADC_Stop_DMA+0xa8>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689a      	ldr	r2, [r3, #8]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f022 0201 	bic.w	r2, r2, #1
 8009630:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	f003 0301 	and.w	r3, r3, #1
 800963c:	2b00      	cmp	r3, #0
 800963e:	d12e      	bne.n	800969e <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	689a      	ldr	r2, [r3, #8]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800964e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009658:	b2db      	uxtb	r3, r3
 800965a:	2b02      	cmp	r3, #2
 800965c:	d10f      	bne.n	800967e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009662:	4618      	mov	r0, r3
 8009664:	f000 fe68 	bl	800a338 <HAL_DMA_Abort>
 8009668:	4603      	mov	r3, r0
 800966a:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800966c:	7bfb      	ldrb	r3, [r7, #15]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d005      	beq.n	800967e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009676:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800968c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009692:	4b07      	ldr	r3, [pc, #28]	; (80096b0 <HAL_ADC_Stop_DMA+0xb0>)
 8009694:	4013      	ands	r3, r2
 8009696:	f043 0201 	orr.w	r2, r3, #1
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80096a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	ffffeefe 	.word	0xffffeefe

080096b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80096d0:	bf00      	nop
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80096e6:	2300      	movs	r3, #0
 80096e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d101      	bne.n	80096f8 <HAL_ADC_ConfigChannel+0x1c>
 80096f4:	2302      	movs	r3, #2
 80096f6:	e12a      	b.n	800994e <HAL_ADC_ConfigChannel+0x272>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b09      	cmp	r3, #9
 8009706:	d93a      	bls.n	800977e <HAL_ADC_ConfigChannel+0xa2>
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009710:	d035      	beq.n	800977e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68d9      	ldr	r1, [r3, #12]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	b29b      	uxth	r3, r3
 800971e:	461a      	mov	r2, r3
 8009720:	4613      	mov	r3, r2
 8009722:	005b      	lsls	r3, r3, #1
 8009724:	4413      	add	r3, r2
 8009726:	3b1e      	subs	r3, #30
 8009728:	2207      	movs	r2, #7
 800972a:	fa02 f303 	lsl.w	r3, r2, r3
 800972e:	43da      	mvns	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	400a      	ands	r2, r1
 8009736:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a87      	ldr	r2, [pc, #540]	; (800995c <HAL_ADC_ConfigChannel+0x280>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d10a      	bne.n	8009758 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68d9      	ldr	r1, [r3, #12]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	061a      	lsls	r2, r3, #24
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	430a      	orrs	r2, r1
 8009754:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009756:	e035      	b.n	80097c4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68d9      	ldr	r1, [r3, #12]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	689a      	ldr	r2, [r3, #8]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	b29b      	uxth	r3, r3
 8009768:	4618      	mov	r0, r3
 800976a:	4603      	mov	r3, r0
 800976c:	005b      	lsls	r3, r3, #1
 800976e:	4403      	add	r3, r0
 8009770:	3b1e      	subs	r3, #30
 8009772:	409a      	lsls	r2, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	430a      	orrs	r2, r1
 800977a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800977c:	e022      	b.n	80097c4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	6919      	ldr	r1, [r3, #16]
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	b29b      	uxth	r3, r3
 800978a:	461a      	mov	r2, r3
 800978c:	4613      	mov	r3, r2
 800978e:	005b      	lsls	r3, r3, #1
 8009790:	4413      	add	r3, r2
 8009792:	2207      	movs	r2, #7
 8009794:	fa02 f303 	lsl.w	r3, r2, r3
 8009798:	43da      	mvns	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	400a      	ands	r2, r1
 80097a0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	6919      	ldr	r1, [r3, #16]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	689a      	ldr	r2, [r3, #8]
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	4618      	mov	r0, r3
 80097b4:	4603      	mov	r3, r0
 80097b6:	005b      	lsls	r3, r3, #1
 80097b8:	4403      	add	r3, r0
 80097ba:	409a      	lsls	r2, r3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	430a      	orrs	r2, r1
 80097c2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	2b06      	cmp	r3, #6
 80097ca:	d824      	bhi.n	8009816 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	685a      	ldr	r2, [r3, #4]
 80097d6:	4613      	mov	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4413      	add	r3, r2
 80097dc:	3b05      	subs	r3, #5
 80097de:	221f      	movs	r2, #31
 80097e0:	fa02 f303 	lsl.w	r3, r2, r3
 80097e4:	43da      	mvns	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	400a      	ands	r2, r1
 80097ec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	4618      	mov	r0, r3
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	4613      	mov	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4413      	add	r3, r2
 8009806:	3b05      	subs	r3, #5
 8009808:	fa00 f203 	lsl.w	r2, r0, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	430a      	orrs	r2, r1
 8009812:	635a      	str	r2, [r3, #52]	; 0x34
 8009814:	e04c      	b.n	80098b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	2b0c      	cmp	r3, #12
 800981c:	d824      	bhi.n	8009868 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	4613      	mov	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	4413      	add	r3, r2
 800982e:	3b23      	subs	r3, #35	; 0x23
 8009830:	221f      	movs	r2, #31
 8009832:	fa02 f303 	lsl.w	r3, r2, r3
 8009836:	43da      	mvns	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	400a      	ands	r2, r1
 800983e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	b29b      	uxth	r3, r3
 800984c:	4618      	mov	r0, r3
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	685a      	ldr	r2, [r3, #4]
 8009852:	4613      	mov	r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4413      	add	r3, r2
 8009858:	3b23      	subs	r3, #35	; 0x23
 800985a:	fa00 f203 	lsl.w	r2, r0, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	631a      	str	r2, [r3, #48]	; 0x30
 8009866:	e023      	b.n	80098b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	685a      	ldr	r2, [r3, #4]
 8009872:	4613      	mov	r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	4413      	add	r3, r2
 8009878:	3b41      	subs	r3, #65	; 0x41
 800987a:	221f      	movs	r2, #31
 800987c:	fa02 f303 	lsl.w	r3, r2, r3
 8009880:	43da      	mvns	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	400a      	ands	r2, r1
 8009888:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	b29b      	uxth	r3, r3
 8009896:	4618      	mov	r0, r3
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	4613      	mov	r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	4413      	add	r3, r2
 80098a2:	3b41      	subs	r3, #65	; 0x41
 80098a4:	fa00 f203 	lsl.w	r2, r0, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	430a      	orrs	r2, r1
 80098ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a2a      	ldr	r2, [pc, #168]	; (8009960 <HAL_ADC_ConfigChannel+0x284>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d10a      	bne.n	80098d0 <HAL_ADC_ConfigChannel+0x1f4>
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098c2:	d105      	bne.n	80098d0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80098c4:	4b27      	ldr	r3, [pc, #156]	; (8009964 <HAL_ADC_ConfigChannel+0x288>)
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	4a26      	ldr	r2, [pc, #152]	; (8009964 <HAL_ADC_ConfigChannel+0x288>)
 80098ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80098ce:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a22      	ldr	r2, [pc, #136]	; (8009960 <HAL_ADC_ConfigChannel+0x284>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d109      	bne.n	80098ee <HAL_ADC_ConfigChannel+0x212>
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b12      	cmp	r3, #18
 80098e0:	d105      	bne.n	80098ee <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80098e2:	4b20      	ldr	r3, [pc, #128]	; (8009964 <HAL_ADC_ConfigChannel+0x288>)
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	4a1f      	ldr	r2, [pc, #124]	; (8009964 <HAL_ADC_ConfigChannel+0x288>)
 80098e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80098ec:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a1b      	ldr	r2, [pc, #108]	; (8009960 <HAL_ADC_ConfigChannel+0x284>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d125      	bne.n	8009944 <HAL_ADC_ConfigChannel+0x268>
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a17      	ldr	r2, [pc, #92]	; (800995c <HAL_ADC_ConfigChannel+0x280>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d003      	beq.n	800990a <HAL_ADC_ConfigChannel+0x22e>
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2b11      	cmp	r3, #17
 8009908:	d11c      	bne.n	8009944 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800990a:	4b16      	ldr	r3, [pc, #88]	; (8009964 <HAL_ADC_ConfigChannel+0x288>)
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	4a15      	ldr	r2, [pc, #84]	; (8009964 <HAL_ADC_ConfigChannel+0x288>)
 8009910:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009914:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a10      	ldr	r2, [pc, #64]	; (800995c <HAL_ADC_ConfigChannel+0x280>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d111      	bne.n	8009944 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8009920:	4b11      	ldr	r3, [pc, #68]	; (8009968 <HAL_ADC_ConfigChannel+0x28c>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a11      	ldr	r2, [pc, #68]	; (800996c <HAL_ADC_ConfigChannel+0x290>)
 8009926:	fba2 2303 	umull	r2, r3, r2, r3
 800992a:	0c9a      	lsrs	r2, r3, #18
 800992c:	4613      	mov	r3, r2
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	4413      	add	r3, r2
 8009932:	005b      	lsls	r3, r3, #1
 8009934:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8009936:	e002      	b.n	800993e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	3b01      	subs	r3, #1
 800993c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d1f9      	bne.n	8009938 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3714      	adds	r7, #20
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	10000012 	.word	0x10000012
 8009960:	40012000 	.word	0x40012000
 8009964:	40012300 	.word	0x40012300
 8009968:	20000230 	.word	0x20000230
 800996c:	431bde83 	.word	0x431bde83

08009970 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009980:	2b01      	cmp	r3, #1
 8009982:	d101      	bne.n	8009988 <HAL_ADC_AnalogWDGConfig+0x18>
 8009984:	2302      	movs	r3, #2
 8009986:	e04b      	b.n	8009a20 <HAL_ADC_AnalogWDGConfig+0xb0>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	7c1b      	ldrb	r3, [r3, #16]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d108      	bne.n	80099aa <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	685a      	ldr	r2, [r3, #4]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099a6:	605a      	str	r2, [r3, #4]
 80099a8:	e007      	b.n	80099ba <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	685a      	ldr	r2, [r3, #4]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099b8:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	6859      	ldr	r1, [r3, #4]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	4b19      	ldr	r3, [pc, #100]	; (8009a2c <HAL_ADC_AnalogWDGConfig+0xbc>)
 80099c6:	400b      	ands	r3, r1
 80099c8:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	6859      	ldr	r1, [r3, #4]
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	430a      	orrs	r2, r1
 80099da:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	683a      	ldr	r2, [r7, #0]
 80099e2:	6852      	ldr	r2, [r2, #4]
 80099e4:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	6892      	ldr	r2, [r2, #8]
 80099ee:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f022 021f 	bic.w	r2, r2, #31
 80099fe:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	685a      	ldr	r2, [r3, #4]
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	430a      	orrs	r2, r1
 8009a14:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr
 8009a2c:	ff3ffdff 	.word	0xff3ffdff

08009a30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8009a38:	4b78      	ldr	r3, [pc, #480]	; (8009c1c <ADC_Init+0x1ec>)
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	4a77      	ldr	r2, [pc, #476]	; (8009c1c <ADC_Init+0x1ec>)
 8009a3e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009a42:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8009a44:	4b75      	ldr	r3, [pc, #468]	; (8009c1c <ADC_Init+0x1ec>)
 8009a46:	685a      	ldr	r2, [r3, #4]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	4973      	ldr	r1, [pc, #460]	; (8009c1c <ADC_Init+0x1ec>)
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	685a      	ldr	r2, [r3, #4]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	6859      	ldr	r1, [r3, #4]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	021a      	lsls	r2, r3, #8
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	430a      	orrs	r2, r1
 8009a74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009a84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	6859      	ldr	r1, [r3, #4]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	689a      	ldr	r2, [r3, #8]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	430a      	orrs	r2, r1
 8009a96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	689a      	ldr	r2, [r3, #8]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009aa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6899      	ldr	r1, [r3, #8]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68da      	ldr	r2, [r3, #12]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	430a      	orrs	r2, r1
 8009ab8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009abe:	4a58      	ldr	r2, [pc, #352]	; (8009c20 <ADC_Init+0x1f0>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d022      	beq.n	8009b0a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689a      	ldr	r2, [r3, #8]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009ad2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6899      	ldr	r1, [r3, #8]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	430a      	orrs	r2, r1
 8009ae4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	689a      	ldr	r2, [r3, #8]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009af4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	6899      	ldr	r1, [r3, #8]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	430a      	orrs	r2, r1
 8009b06:	609a      	str	r2, [r3, #8]
 8009b08:	e00f      	b.n	8009b2a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	689a      	ldr	r2, [r3, #8]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009b18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	689a      	ldr	r2, [r3, #8]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009b28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	689a      	ldr	r2, [r3, #8]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f022 0202 	bic.w	r2, r2, #2
 8009b38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	6899      	ldr	r1, [r3, #8]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	699b      	ldr	r3, [r3, #24]
 8009b44:	005a      	lsls	r2, r3, #1
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	430a      	orrs	r2, r1
 8009b4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d01b      	beq.n	8009b90 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	685a      	ldr	r2, [r3, #4]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	685a      	ldr	r2, [r3, #4]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009b76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	6859      	ldr	r1, [r3, #4]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b82:	3b01      	subs	r3, #1
 8009b84:	035a      	lsls	r2, r3, #13
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	605a      	str	r2, [r3, #4]
 8009b8e:	e007      	b.n	8009ba0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	685a      	ldr	r2, [r3, #4]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	69db      	ldr	r3, [r3, #28]
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	051a      	lsls	r2, r3, #20
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	689a      	ldr	r2, [r3, #8]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009bd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	6899      	ldr	r1, [r3, #8]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009be2:	025a      	lsls	r2, r3, #9
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	430a      	orrs	r2, r1
 8009bea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	689a      	ldr	r2, [r3, #8]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	6899      	ldr	r1, [r3, #8]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	029a      	lsls	r2, r3, #10
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	430a      	orrs	r2, r1
 8009c0e:	609a      	str	r2, [r3, #8]
}
 8009c10:	bf00      	nop
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr
 8009c1c:	40012300 	.word	0x40012300
 8009c20:	0f000001 	.word	0x0f000001

08009c24 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c30:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d13c      	bne.n	8009cb8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d12b      	bne.n	8009cb0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d127      	bne.n	8009cb0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d006      	beq.n	8009c7c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d119      	bne.n	8009cb0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	685a      	ldr	r2, [r3, #4]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f022 0220 	bic.w	r2, r2, #32
 8009c8a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d105      	bne.n	8009cb0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca8:	f043 0201 	orr.w	r2, r3, #1
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f7fe f827 	bl	8007d04 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009cb6:	e00e      	b.n	8009cd6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cbc:	f003 0310 	and.w	r3, r3, #16
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d003      	beq.n	8009ccc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f7ff fcff 	bl	80096c8 <HAL_ADC_ErrorCallback>
}
 8009cca:	e004      	b.n	8009cd6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	4798      	blx	r3
}
 8009cd6:	bf00      	nop
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b084      	sub	sp, #16
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f7ff fce1 	bl	80096b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009cf2:	bf00      	nop
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b084      	sub	sp, #16
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d06:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2240      	movs	r2, #64	; 0x40
 8009d0c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d12:	f043 0204 	orr.w	r2, r3, #4
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f7ff fcd4 	bl	80096c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009d20:	bf00      	nop
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f003 0307 	and.w	r3, r3, #7
 8009d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009d38:	4b0b      	ldr	r3, [pc, #44]	; (8009d68 <__NVIC_SetPriorityGrouping+0x40>)
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009d44:	4013      	ands	r3, r2
 8009d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009d50:	4b06      	ldr	r3, [pc, #24]	; (8009d6c <__NVIC_SetPriorityGrouping+0x44>)
 8009d52:	4313      	orrs	r3, r2
 8009d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009d56:	4a04      	ldr	r2, [pc, #16]	; (8009d68 <__NVIC_SetPriorityGrouping+0x40>)
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	60d3      	str	r3, [r2, #12]
}
 8009d5c:	bf00      	nop
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	e000ed00 	.word	0xe000ed00
 8009d6c:	05fa0000 	.word	0x05fa0000

08009d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009d70:	b480      	push	{r7}
 8009d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009d74:	4b04      	ldr	r3, [pc, #16]	; (8009d88 <__NVIC_GetPriorityGrouping+0x18>)
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	0a1b      	lsrs	r3, r3, #8
 8009d7a:	f003 0307 	and.w	r3, r3, #7
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	e000ed00 	.word	0xe000ed00

08009d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	4603      	mov	r3, r0
 8009d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	db0b      	blt.n	8009db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009d9e:	79fb      	ldrb	r3, [r7, #7]
 8009da0:	f003 021f 	and.w	r2, r3, #31
 8009da4:	4907      	ldr	r1, [pc, #28]	; (8009dc4 <__NVIC_EnableIRQ+0x38>)
 8009da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009daa:	095b      	lsrs	r3, r3, #5
 8009dac:	2001      	movs	r0, #1
 8009dae:	fa00 f202 	lsl.w	r2, r0, r2
 8009db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009db6:	bf00      	nop
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	e000e100 	.word	0xe000e100

08009dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	6039      	str	r1, [r7, #0]
 8009dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	db0a      	blt.n	8009df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	490c      	ldr	r1, [pc, #48]	; (8009e14 <__NVIC_SetPriority+0x4c>)
 8009de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009de6:	0112      	lsls	r2, r2, #4
 8009de8:	b2d2      	uxtb	r2, r2
 8009dea:	440b      	add	r3, r1
 8009dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009df0:	e00a      	b.n	8009e08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	4908      	ldr	r1, [pc, #32]	; (8009e18 <__NVIC_SetPriority+0x50>)
 8009df8:	79fb      	ldrb	r3, [r7, #7]
 8009dfa:	f003 030f 	and.w	r3, r3, #15
 8009dfe:	3b04      	subs	r3, #4
 8009e00:	0112      	lsls	r2, r2, #4
 8009e02:	b2d2      	uxtb	r2, r2
 8009e04:	440b      	add	r3, r1
 8009e06:	761a      	strb	r2, [r3, #24]
}
 8009e08:	bf00      	nop
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr
 8009e14:	e000e100 	.word	0xe000e100
 8009e18:	e000ed00 	.word	0xe000ed00

08009e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b089      	sub	sp, #36	; 0x24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f003 0307 	and.w	r3, r3, #7
 8009e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	f1c3 0307 	rsb	r3, r3, #7
 8009e36:	2b04      	cmp	r3, #4
 8009e38:	bf28      	it	cs
 8009e3a:	2304      	movcs	r3, #4
 8009e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	3304      	adds	r3, #4
 8009e42:	2b06      	cmp	r3, #6
 8009e44:	d902      	bls.n	8009e4c <NVIC_EncodePriority+0x30>
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	3b03      	subs	r3, #3
 8009e4a:	e000      	b.n	8009e4e <NVIC_EncodePriority+0x32>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	fa02 f303 	lsl.w	r3, r2, r3
 8009e5a:	43da      	mvns	r2, r3
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	401a      	ands	r2, r3
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009e64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e6e:	43d9      	mvns	r1, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e74:	4313      	orrs	r3, r2
         );
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3724      	adds	r7, #36	; 0x24
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
	...

08009e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e94:	d301      	bcc.n	8009e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009e96:	2301      	movs	r3, #1
 8009e98:	e00f      	b.n	8009eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009e9a:	4a0a      	ldr	r2, [pc, #40]	; (8009ec4 <SysTick_Config+0x40>)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009ea2:	210f      	movs	r1, #15
 8009ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ea8:	f7ff ff8e 	bl	8009dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009eac:	4b05      	ldr	r3, [pc, #20]	; (8009ec4 <SysTick_Config+0x40>)
 8009eae:	2200      	movs	r2, #0
 8009eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009eb2:	4b04      	ldr	r3, [pc, #16]	; (8009ec4 <SysTick_Config+0x40>)
 8009eb4:	2207      	movs	r2, #7
 8009eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	e000e010 	.word	0xe000e010

08009ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f7ff ff29 	bl	8009d28 <__NVIC_SetPriorityGrouping>
}
 8009ed6:	bf00      	nop
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b086      	sub	sp, #24
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	60b9      	str	r1, [r7, #8]
 8009ee8:	607a      	str	r2, [r7, #4]
 8009eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009eec:	2300      	movs	r3, #0
 8009eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009ef0:	f7ff ff3e 	bl	8009d70 <__NVIC_GetPriorityGrouping>
 8009ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	68b9      	ldr	r1, [r7, #8]
 8009efa:	6978      	ldr	r0, [r7, #20]
 8009efc:	f7ff ff8e 	bl	8009e1c <NVIC_EncodePriority>
 8009f00:	4602      	mov	r2, r0
 8009f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f06:	4611      	mov	r1, r2
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7ff ff5d 	bl	8009dc8 <__NVIC_SetPriority>
}
 8009f0e:	bf00      	nop
 8009f10:	3718      	adds	r7, #24
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b082      	sub	sp, #8
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7ff ff31 	bl	8009d8c <__NVIC_EnableIRQ>
}
 8009f2a:	bf00      	nop
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b082      	sub	sp, #8
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f7ff ffa2 	bl	8009e84 <SysTick_Config>
 8009f40:	4603      	mov	r3, r0
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3708      	adds	r7, #8
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b082      	sub	sp, #8
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d101      	bne.n	8009f5c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e014      	b.n	8009f86 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	791b      	ldrb	r3, [r3, #4]
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d105      	bne.n	8009f72 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f7fe f88d 	bl	800808c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2202      	movs	r2, #2
 8009f76:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3708      	adds	r7, #8
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b083      	sub	sp, #12
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	795b      	ldrb	r3, [r3, #5]
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d101      	bne.n	8009fa4 <HAL_DAC_Start+0x16>
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	e040      	b.n	800a026 <HAL_DAC_Start+0x98>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2202      	movs	r2, #2
 8009fae:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	6819      	ldr	r1, [r3, #0]
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	f003 0310 	and.w	r3, r3, #16
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	409a      	lsls	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	430a      	orrs	r2, r1
 8009fc6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d10f      	bne.n	8009fee <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8009fd8:	2b3c      	cmp	r3, #60	; 0x3c
 8009fda:	d11d      	bne.n	800a018 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685a      	ldr	r2, [r3, #4]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f042 0201 	orr.w	r2, r2, #1
 8009fea:	605a      	str	r2, [r3, #4]
 8009fec:	e014      	b.n	800a018 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	f003 0310 	and.w	r3, r3, #16
 8009ffe:	213c      	movs	r1, #60	; 0x3c
 800a000:	fa01 f303 	lsl.w	r3, r1, r3
 800a004:	429a      	cmp	r2, r3
 800a006:	d107      	bne.n	800a018 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	685a      	ldr	r2, [r3, #4]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f042 0202 	orr.w	r2, r2, #2
 800a016:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr

0800a032 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800a032:	b480      	push	{r7}
 800a034:	b087      	sub	sp, #28
 800a036:	af00      	add	r7, sp, #0
 800a038:	60f8      	str	r0, [r7, #12]
 800a03a:	60b9      	str	r1, [r7, #8]
 800a03c:	607a      	str	r2, [r7, #4]
 800a03e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800a040:	2300      	movs	r3, #0
 800a042:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d105      	bne.n	800a05c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4413      	add	r3, r2
 800a056:	3308      	adds	r3, #8
 800a058:	617b      	str	r3, [r7, #20]
 800a05a:	e004      	b.n	800a066 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800a05c:	697a      	ldr	r2, [r7, #20]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4413      	add	r3, r2
 800a062:	3314      	adds	r3, #20
 800a064:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	461a      	mov	r2, r3
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	371c      	adds	r7, #28
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b087      	sub	sp, #28
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	795b      	ldrb	r3, [r3, #5]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d101      	bne.n	800a094 <HAL_DAC_ConfigChannel+0x18>
 800a090:	2302      	movs	r3, #2
 800a092:	e03c      	b.n	800a10e <HAL_DAC_ConfigChannel+0x92>
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2201      	movs	r2, #1
 800a098:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2202      	movs	r2, #2
 800a09e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f003 0310 	and.w	r3, r3, #16
 800a0ae:	f640 72fe 	movw	r2, #4094	; 0xffe
 800a0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b6:	43db      	mvns	r3, r3
 800a0b8:	697a      	ldr	r2, [r7, #20]
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f003 0310 	and.w	r3, r3, #16
 800a0d0:	693a      	ldr	r2, [r7, #16]
 800a0d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	697a      	ldr	r2, [r7, #20]
 800a0e2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6819      	ldr	r1, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f003 0310 	and.w	r3, r3, #16
 800a0f0:	22c0      	movs	r2, #192	; 0xc0
 800a0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f6:	43da      	mvns	r2, r3
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	400a      	ands	r2, r1
 800a0fe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2201      	movs	r2, #1
 800a104:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2200      	movs	r2, #0
 800a10a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	371c      	adds	r7, #28
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
	...

0800a11c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b086      	sub	sp, #24
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a124:	2300      	movs	r3, #0
 800a126:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a128:	f7ff f82e 	bl	8009188 <HAL_GetTick>
 800a12c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d101      	bne.n	800a138 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	e099      	b.n	800a26c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2202      	movs	r2, #2
 800a144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f022 0201 	bic.w	r2, r2, #1
 800a156:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a158:	e00f      	b.n	800a17a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a15a:	f7ff f815 	bl	8009188 <HAL_GetTick>
 800a15e:	4602      	mov	r2, r0
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	1ad3      	subs	r3, r2, r3
 800a164:	2b05      	cmp	r3, #5
 800a166:	d908      	bls.n	800a17a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2220      	movs	r2, #32
 800a16c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2203      	movs	r2, #3
 800a172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a176:	2303      	movs	r3, #3
 800a178:	e078      	b.n	800a26c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 0301 	and.w	r3, r3, #1
 800a184:	2b00      	cmp	r3, #0
 800a186:	d1e8      	bne.n	800a15a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a190:	697a      	ldr	r2, [r7, #20]
 800a192:	4b38      	ldr	r3, [pc, #224]	; (800a274 <HAL_DMA_Init+0x158>)
 800a194:	4013      	ands	r3, r2
 800a196:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	685a      	ldr	r2, [r3, #4]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6a1b      	ldr	r3, [r3, #32]
 800a1c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1c6:	697a      	ldr	r2, [r7, #20]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d0:	2b04      	cmp	r3, #4
 800a1d2:	d107      	bne.n	800a1e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	697a      	ldr	r2, [r7, #20]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	697a      	ldr	r2, [r7, #20]
 800a1ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	695b      	ldr	r3, [r3, #20]
 800a1f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	f023 0307 	bic.w	r3, r3, #7
 800a1fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a200:	697a      	ldr	r2, [r7, #20]
 800a202:	4313      	orrs	r3, r2
 800a204:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20a:	2b04      	cmp	r3, #4
 800a20c:	d117      	bne.n	800a23e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a212:	697a      	ldr	r2, [r7, #20]
 800a214:	4313      	orrs	r3, r2
 800a216:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00e      	beq.n	800a23e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 fb23 	bl	800a86c <DMA_CheckFifoParam>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d008      	beq.n	800a23e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2240      	movs	r2, #64	; 0x40
 800a230:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2201      	movs	r2, #1
 800a236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a23a:	2301      	movs	r3, #1
 800a23c:	e016      	b.n	800a26c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	697a      	ldr	r2, [r7, #20]
 800a244:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fada 	bl	800a800 <DMA_CalcBaseAndBitshift>
 800a24c:	4603      	mov	r3, r0
 800a24e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a254:	223f      	movs	r2, #63	; 0x3f
 800a256:	409a      	lsls	r2, r3
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3718      	adds	r7, #24
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	e010803f 	.word	0xe010803f

0800a278 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
 800a284:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a286:	2300      	movs	r3, #0
 800a288:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a28e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a296:	2b01      	cmp	r3, #1
 800a298:	d101      	bne.n	800a29e <HAL_DMA_Start_IT+0x26>
 800a29a:	2302      	movs	r3, #2
 800a29c:	e048      	b.n	800a330 <HAL_DMA_Start_IT+0xb8>
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d137      	bne.n	800a322 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2202      	movs	r2, #2
 800a2b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	68b9      	ldr	r1, [r7, #8]
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f000 fa6c 	bl	800a7a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2d0:	223f      	movs	r2, #63	; 0x3f
 800a2d2:	409a      	lsls	r2, r3
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f042 0216 	orr.w	r2, r2, #22
 800a2e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	695a      	ldr	r2, [r3, #20]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a2f6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d007      	beq.n	800a310 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f042 0208 	orr.w	r2, r2, #8
 800a30e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f042 0201 	orr.w	r2, r2, #1
 800a31e:	601a      	str	r2, [r3, #0]
 800a320:	e005      	b.n	800a32e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a32a:	2302      	movs	r3, #2
 800a32c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a32e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3718      	adds	r7, #24
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a344:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a346:	f7fe ff1f 	bl	8009188 <HAL_GetTick>
 800a34a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a352:	b2db      	uxtb	r3, r3
 800a354:	2b02      	cmp	r3, #2
 800a356:	d008      	beq.n	800a36a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2280      	movs	r2, #128	; 0x80
 800a35c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e052      	b.n	800a410 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f022 0216 	bic.w	r2, r2, #22
 800a378:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	695a      	ldr	r2, [r3, #20]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a388:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d103      	bne.n	800a39a <HAL_DMA_Abort+0x62>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a396:	2b00      	cmp	r3, #0
 800a398:	d007      	beq.n	800a3aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f022 0208 	bic.w	r2, r2, #8
 800a3a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f022 0201 	bic.w	r2, r2, #1
 800a3b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a3ba:	e013      	b.n	800a3e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a3bc:	f7fe fee4 	bl	8009188 <HAL_GetTick>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	1ad3      	subs	r3, r2, r3
 800a3c6:	2b05      	cmp	r3, #5
 800a3c8:	d90c      	bls.n	800a3e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2220      	movs	r2, #32
 800a3ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2203      	movs	r2, #3
 800a3dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	e015      	b.n	800a410 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 0301 	and.w	r3, r3, #1
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1e4      	bne.n	800a3bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3f6:	223f      	movs	r2, #63	; 0x3f
 800a3f8:	409a      	lsls	r2, r3
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2201      	movs	r2, #1
 800a40a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a426:	b2db      	uxtb	r3, r3
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d004      	beq.n	800a436 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2280      	movs	r2, #128	; 0x80
 800a430:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	e00c      	b.n	800a450 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2205      	movs	r2, #5
 800a43a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f022 0201 	bic.w	r2, r2, #1
 800a44c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800a464:	2300      	movs	r3, #0
 800a466:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800a468:	4b8e      	ldr	r3, [pc, #568]	; (800a6a4 <HAL_DMA_IRQHandler+0x248>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a8e      	ldr	r2, [pc, #568]	; (800a6a8 <HAL_DMA_IRQHandler+0x24c>)
 800a46e:	fba2 2303 	umull	r2, r3, r2, r3
 800a472:	0a9b      	lsrs	r3, r3, #10
 800a474:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a47a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a486:	2208      	movs	r2, #8
 800a488:	409a      	lsls	r2, r3
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	4013      	ands	r3, r2
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d01a      	beq.n	800a4c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 0304 	and.w	r3, r3, #4
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d013      	beq.n	800a4c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f022 0204 	bic.w	r2, r2, #4
 800a4ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4b4:	2208      	movs	r2, #8
 800a4b6:	409a      	lsls	r2, r3
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c0:	f043 0201 	orr.w	r2, r3, #1
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	409a      	lsls	r2, r3
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	4013      	ands	r3, r2
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d012      	beq.n	800a4fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	695b      	ldr	r3, [r3, #20]
 800a4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00b      	beq.n	800a4fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	409a      	lsls	r2, r3
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4f6:	f043 0202 	orr.w	r2, r3, #2
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a502:	2204      	movs	r2, #4
 800a504:	409a      	lsls	r2, r3
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	4013      	ands	r3, r2
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d012      	beq.n	800a534 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 0302 	and.w	r3, r3, #2
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00b      	beq.n	800a534 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a520:	2204      	movs	r2, #4
 800a522:	409a      	lsls	r2, r3
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a52c:	f043 0204 	orr.w	r2, r3, #4
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a538:	2210      	movs	r2, #16
 800a53a:	409a      	lsls	r2, r3
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	4013      	ands	r3, r2
 800a540:	2b00      	cmp	r3, #0
 800a542:	d043      	beq.n	800a5cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f003 0308 	and.w	r3, r3, #8
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d03c      	beq.n	800a5cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a556:	2210      	movs	r2, #16
 800a558:	409a      	lsls	r2, r3
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d018      	beq.n	800a59e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a576:	2b00      	cmp	r3, #0
 800a578:	d108      	bne.n	800a58c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d024      	beq.n	800a5cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	4798      	blx	r3
 800a58a:	e01f      	b.n	800a5cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a590:	2b00      	cmp	r3, #0
 800a592:	d01b      	beq.n	800a5cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	4798      	blx	r3
 800a59c:	e016      	b.n	800a5cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d107      	bne.n	800a5bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f022 0208 	bic.w	r2, r2, #8
 800a5ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d003      	beq.n	800a5cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5d0:	2220      	movs	r2, #32
 800a5d2:	409a      	lsls	r2, r3
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	4013      	ands	r3, r2
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	f000 808f 	beq.w	800a6fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 0310 	and.w	r3, r3, #16
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f000 8087 	beq.w	800a6fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5f2:	2220      	movs	r2, #32
 800a5f4:	409a      	lsls	r2, r3
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a600:	b2db      	uxtb	r3, r3
 800a602:	2b05      	cmp	r3, #5
 800a604:	d136      	bne.n	800a674 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f022 0216 	bic.w	r2, r2, #22
 800a614:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	695a      	ldr	r2, [r3, #20]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a624:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d103      	bne.n	800a636 <HAL_DMA_IRQHandler+0x1da>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a632:	2b00      	cmp	r3, #0
 800a634:	d007      	beq.n	800a646 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f022 0208 	bic.w	r2, r2, #8
 800a644:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a64a:	223f      	movs	r2, #63	; 0x3f
 800a64c:	409a      	lsls	r2, r3
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2201      	movs	r2, #1
 800a65e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a666:	2b00      	cmp	r3, #0
 800a668:	d07e      	beq.n	800a768 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	4798      	blx	r3
        }
        return;
 800a672:	e079      	b.n	800a768 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d01d      	beq.n	800a6be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10d      	bne.n	800a6ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a694:	2b00      	cmp	r3, #0
 800a696:	d031      	beq.n	800a6fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	4798      	blx	r3
 800a6a0:	e02c      	b.n	800a6fc <HAL_DMA_IRQHandler+0x2a0>
 800a6a2:	bf00      	nop
 800a6a4:	20000230 	.word	0x20000230
 800a6a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d023      	beq.n	800a6fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	4798      	blx	r3
 800a6bc:	e01e      	b.n	800a6fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10f      	bne.n	800a6ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f022 0210 	bic.w	r2, r2, #16
 800a6da:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d003      	beq.n	800a6fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a700:	2b00      	cmp	r3, #0
 800a702:	d032      	beq.n	800a76a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d022      	beq.n	800a756 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2205      	movs	r2, #5
 800a714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f022 0201 	bic.w	r2, r2, #1
 800a726:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	3301      	adds	r3, #1
 800a72c:	60bb      	str	r3, [r7, #8]
 800a72e:	697a      	ldr	r2, [r7, #20]
 800a730:	429a      	cmp	r2, r3
 800a732:	d307      	bcc.n	800a744 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f003 0301 	and.w	r3, r3, #1
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1f2      	bne.n	800a728 <HAL_DMA_IRQHandler+0x2cc>
 800a742:	e000      	b.n	800a746 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800a744:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2201      	movs	r2, #1
 800a752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d005      	beq.n	800a76a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	4798      	blx	r3
 800a766:	e000      	b.n	800a76a <HAL_DMA_IRQHandler+0x30e>
        return;
 800a768:	bf00      	nop
    }
  }
}
 800a76a:	3718      	adds	r7, #24
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a77e:	b2db      	uxtb	r3, r3
}
 800a780:	4618      	mov	r0, r3
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a798:	4618      	mov	r0, r3
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	607a      	str	r2, [r7, #4]
 800a7b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a7c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	2b40      	cmp	r3, #64	; 0x40
 800a7d0:	d108      	bne.n	800a7e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	68ba      	ldr	r2, [r7, #8]
 800a7e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a7e2:	e007      	b.n	800a7f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	60da      	str	r2, [r3, #12]
}
 800a7f4:	bf00      	nop
 800a7f6:	3714      	adds	r7, #20
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	3b10      	subs	r3, #16
 800a810:	4a13      	ldr	r2, [pc, #76]	; (800a860 <DMA_CalcBaseAndBitshift+0x60>)
 800a812:	fba2 2303 	umull	r2, r3, r2, r3
 800a816:	091b      	lsrs	r3, r3, #4
 800a818:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a81a:	4a12      	ldr	r2, [pc, #72]	; (800a864 <DMA_CalcBaseAndBitshift+0x64>)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	4413      	add	r3, r2
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	461a      	mov	r2, r3
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2b03      	cmp	r3, #3
 800a82c:	d908      	bls.n	800a840 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	461a      	mov	r2, r3
 800a834:	4b0c      	ldr	r3, [pc, #48]	; (800a868 <DMA_CalcBaseAndBitshift+0x68>)
 800a836:	4013      	ands	r3, r2
 800a838:	1d1a      	adds	r2, r3, #4
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	659a      	str	r2, [r3, #88]	; 0x58
 800a83e:	e006      	b.n	800a84e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	461a      	mov	r2, r3
 800a846:	4b08      	ldr	r3, [pc, #32]	; (800a868 <DMA_CalcBaseAndBitshift+0x68>)
 800a848:	4013      	ands	r3, r2
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a852:	4618      	mov	r0, r3
 800a854:	3714      	adds	r7, #20
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	aaaaaaab 	.word	0xaaaaaaab
 800a864:	080228d4 	.word	0x080228d4
 800a868:	fffffc00 	.word	0xfffffc00

0800a86c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a874:	2300      	movs	r3, #0
 800a876:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a87c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d11f      	bne.n	800a8c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	2b03      	cmp	r3, #3
 800a88a:	d856      	bhi.n	800a93a <DMA_CheckFifoParam+0xce>
 800a88c:	a201      	add	r2, pc, #4	; (adr r2, 800a894 <DMA_CheckFifoParam+0x28>)
 800a88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a892:	bf00      	nop
 800a894:	0800a8a5 	.word	0x0800a8a5
 800a898:	0800a8b7 	.word	0x0800a8b7
 800a89c:	0800a8a5 	.word	0x0800a8a5
 800a8a0:	0800a93b 	.word	0x0800a93b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d046      	beq.n	800a93e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a8b4:	e043      	b.n	800a93e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a8be:	d140      	bne.n	800a942 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a8c4:	e03d      	b.n	800a942 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	699b      	ldr	r3, [r3, #24]
 800a8ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8ce:	d121      	bne.n	800a914 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	2b03      	cmp	r3, #3
 800a8d4:	d837      	bhi.n	800a946 <DMA_CheckFifoParam+0xda>
 800a8d6:	a201      	add	r2, pc, #4	; (adr r2, 800a8dc <DMA_CheckFifoParam+0x70>)
 800a8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8dc:	0800a8ed 	.word	0x0800a8ed
 800a8e0:	0800a8f3 	.word	0x0800a8f3
 800a8e4:	0800a8ed 	.word	0x0800a8ed
 800a8e8:	0800a905 	.word	0x0800a905
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	73fb      	strb	r3, [r7, #15]
      break;
 800a8f0:	e030      	b.n	800a954 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d025      	beq.n	800a94a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a902:	e022      	b.n	800a94a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a908:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a90c:	d11f      	bne.n	800a94e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a912:	e01c      	b.n	800a94e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	2b02      	cmp	r3, #2
 800a918:	d903      	bls.n	800a922 <DMA_CheckFifoParam+0xb6>
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	2b03      	cmp	r3, #3
 800a91e:	d003      	beq.n	800a928 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a920:	e018      	b.n	800a954 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	73fb      	strb	r3, [r7, #15]
      break;
 800a926:	e015      	b.n	800a954 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00e      	beq.n	800a952 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	73fb      	strb	r3, [r7, #15]
      break;
 800a938:	e00b      	b.n	800a952 <DMA_CheckFifoParam+0xe6>
      break;
 800a93a:	bf00      	nop
 800a93c:	e00a      	b.n	800a954 <DMA_CheckFifoParam+0xe8>
      break;
 800a93e:	bf00      	nop
 800a940:	e008      	b.n	800a954 <DMA_CheckFifoParam+0xe8>
      break;
 800a942:	bf00      	nop
 800a944:	e006      	b.n	800a954 <DMA_CheckFifoParam+0xe8>
      break;
 800a946:	bf00      	nop
 800a948:	e004      	b.n	800a954 <DMA_CheckFifoParam+0xe8>
      break;
 800a94a:	bf00      	nop
 800a94c:	e002      	b.n	800a954 <DMA_CheckFifoParam+0xe8>
      break;   
 800a94e:	bf00      	nop
 800a950:	e000      	b.n	800a954 <DMA_CheckFifoParam+0xe8>
      break;
 800a952:	bf00      	nop
    }
  } 
  
  return status; 
 800a954:	7bfb      	ldrb	r3, [r7, #15]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3714      	adds	r7, #20
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop

0800a964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a964:	b480      	push	{r7}
 800a966:	b089      	sub	sp, #36	; 0x24
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800a96e:	2300      	movs	r3, #0
 800a970:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800a972:	2300      	movs	r3, #0
 800a974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800a976:	2300      	movs	r3, #0
 800a978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800a97a:	2300      	movs	r3, #0
 800a97c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a97e:	2300      	movs	r3, #0
 800a980:	61fb      	str	r3, [r7, #28]
 800a982:	e169      	b.n	800ac58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a984:	2201      	movs	r2, #1
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	fa02 f303 	lsl.w	r3, r2, r3
 800a98c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	4013      	ands	r3, r2
 800a996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a998:	693a      	ldr	r2, [r7, #16]
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	f040 8158 	bne.w	800ac52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d00b      	beq.n	800a9c2 <HAL_GPIO_Init+0x5e>
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	d007      	beq.n	800a9c2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a9b6:	2b11      	cmp	r3, #17
 800a9b8:	d003      	beq.n	800a9c2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	2b12      	cmp	r3, #18
 800a9c0:	d130      	bne.n	800aa24 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	689b      	ldr	r3, [r3, #8]
 800a9c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	005b      	lsls	r3, r3, #1
 800a9cc:	2203      	movs	r2, #3
 800a9ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d2:	43db      	mvns	r3, r3
 800a9d4:	69ba      	ldr	r2, [r7, #24]
 800a9d6:	4013      	ands	r3, r2
 800a9d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	68da      	ldr	r2, [r3, #12]
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	005b      	lsls	r3, r3, #1
 800a9e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e6:	69ba      	ldr	r2, [r7, #24]
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	69ba      	ldr	r2, [r7, #24]
 800a9f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	fa02 f303 	lsl.w	r3, r2, r3
 800aa00:	43db      	mvns	r3, r3
 800aa02:	69ba      	ldr	r2, [r7, #24]
 800aa04:	4013      	ands	r3, r2
 800aa06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	091b      	lsrs	r3, r3, #4
 800aa0e:	f003 0201 	and.w	r2, r3, #1
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	fa02 f303 	lsl.w	r3, r2, r3
 800aa18:	69ba      	ldr	r2, [r7, #24]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	69ba      	ldr	r2, [r7, #24]
 800aa22:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	005b      	lsls	r3, r3, #1
 800aa2e:	2203      	movs	r2, #3
 800aa30:	fa02 f303 	lsl.w	r3, r2, r3
 800aa34:	43db      	mvns	r3, r3
 800aa36:	69ba      	ldr	r2, [r7, #24]
 800aa38:	4013      	ands	r3, r2
 800aa3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	689a      	ldr	r2, [r3, #8]
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	005b      	lsls	r3, r3, #1
 800aa44:	fa02 f303 	lsl.w	r3, r2, r3
 800aa48:	69ba      	ldr	r2, [r7, #24]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	69ba      	ldr	r2, [r7, #24]
 800aa52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	2b02      	cmp	r3, #2
 800aa5a:	d003      	beq.n	800aa64 <HAL_GPIO_Init+0x100>
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	2b12      	cmp	r3, #18
 800aa62:	d123      	bne.n	800aaac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	08da      	lsrs	r2, r3, #3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	3208      	adds	r2, #8
 800aa6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	f003 0307 	and.w	r3, r3, #7
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	220f      	movs	r2, #15
 800aa7c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa80:	43db      	mvns	r3, r3
 800aa82:	69ba      	ldr	r2, [r7, #24]
 800aa84:	4013      	ands	r3, r2
 800aa86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	691a      	ldr	r2, [r3, #16]
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	f003 0307 	and.w	r3, r3, #7
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	fa02 f303 	lsl.w	r3, r2, r3
 800aa98:	69ba      	ldr	r2, [r7, #24]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	08da      	lsrs	r2, r3, #3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	3208      	adds	r2, #8
 800aaa6:	69b9      	ldr	r1, [r7, #24]
 800aaa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	005b      	lsls	r3, r3, #1
 800aab6:	2203      	movs	r2, #3
 800aab8:	fa02 f303 	lsl.w	r3, r2, r3
 800aabc:	43db      	mvns	r3, r3
 800aabe:	69ba      	ldr	r2, [r7, #24]
 800aac0:	4013      	ands	r3, r2
 800aac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	f003 0203 	and.w	r2, r3, #3
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	005b      	lsls	r3, r3, #1
 800aad0:	fa02 f303 	lsl.w	r3, r2, r3
 800aad4:	69ba      	ldr	r2, [r7, #24]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	69ba      	ldr	r2, [r7, #24]
 800aade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f000 80b2 	beq.w	800ac52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aaee:	4b60      	ldr	r3, [pc, #384]	; (800ac70 <HAL_GPIO_Init+0x30c>)
 800aaf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaf2:	4a5f      	ldr	r2, [pc, #380]	; (800ac70 <HAL_GPIO_Init+0x30c>)
 800aaf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aaf8:	6453      	str	r3, [r2, #68]	; 0x44
 800aafa:	4b5d      	ldr	r3, [pc, #372]	; (800ac70 <HAL_GPIO_Init+0x30c>)
 800aafc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aafe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab02:	60fb      	str	r3, [r7, #12]
 800ab04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800ab06:	4a5b      	ldr	r2, [pc, #364]	; (800ac74 <HAL_GPIO_Init+0x310>)
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	089b      	lsrs	r3, r3, #2
 800ab0c:	3302      	adds	r3, #2
 800ab0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	f003 0303 	and.w	r3, r3, #3
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	220f      	movs	r2, #15
 800ab1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab22:	43db      	mvns	r3, r3
 800ab24:	69ba      	ldr	r2, [r7, #24]
 800ab26:	4013      	ands	r3, r2
 800ab28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a52      	ldr	r2, [pc, #328]	; (800ac78 <HAL_GPIO_Init+0x314>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d02b      	beq.n	800ab8a <HAL_GPIO_Init+0x226>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a51      	ldr	r2, [pc, #324]	; (800ac7c <HAL_GPIO_Init+0x318>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d025      	beq.n	800ab86 <HAL_GPIO_Init+0x222>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a50      	ldr	r2, [pc, #320]	; (800ac80 <HAL_GPIO_Init+0x31c>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d01f      	beq.n	800ab82 <HAL_GPIO_Init+0x21e>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a4f      	ldr	r2, [pc, #316]	; (800ac84 <HAL_GPIO_Init+0x320>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d019      	beq.n	800ab7e <HAL_GPIO_Init+0x21a>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a4e      	ldr	r2, [pc, #312]	; (800ac88 <HAL_GPIO_Init+0x324>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d013      	beq.n	800ab7a <HAL_GPIO_Init+0x216>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a4d      	ldr	r2, [pc, #308]	; (800ac8c <HAL_GPIO_Init+0x328>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d00d      	beq.n	800ab76 <HAL_GPIO_Init+0x212>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a4c      	ldr	r2, [pc, #304]	; (800ac90 <HAL_GPIO_Init+0x32c>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d007      	beq.n	800ab72 <HAL_GPIO_Init+0x20e>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a4b      	ldr	r2, [pc, #300]	; (800ac94 <HAL_GPIO_Init+0x330>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d101      	bne.n	800ab6e <HAL_GPIO_Init+0x20a>
 800ab6a:	2307      	movs	r3, #7
 800ab6c:	e00e      	b.n	800ab8c <HAL_GPIO_Init+0x228>
 800ab6e:	2308      	movs	r3, #8
 800ab70:	e00c      	b.n	800ab8c <HAL_GPIO_Init+0x228>
 800ab72:	2306      	movs	r3, #6
 800ab74:	e00a      	b.n	800ab8c <HAL_GPIO_Init+0x228>
 800ab76:	2305      	movs	r3, #5
 800ab78:	e008      	b.n	800ab8c <HAL_GPIO_Init+0x228>
 800ab7a:	2304      	movs	r3, #4
 800ab7c:	e006      	b.n	800ab8c <HAL_GPIO_Init+0x228>
 800ab7e:	2303      	movs	r3, #3
 800ab80:	e004      	b.n	800ab8c <HAL_GPIO_Init+0x228>
 800ab82:	2302      	movs	r3, #2
 800ab84:	e002      	b.n	800ab8c <HAL_GPIO_Init+0x228>
 800ab86:	2301      	movs	r3, #1
 800ab88:	e000      	b.n	800ab8c <HAL_GPIO_Init+0x228>
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	69fa      	ldr	r2, [r7, #28]
 800ab8e:	f002 0203 	and.w	r2, r2, #3
 800ab92:	0092      	lsls	r2, r2, #2
 800ab94:	4093      	lsls	r3, r2
 800ab96:	69ba      	ldr	r2, [r7, #24]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800ab9c:	4935      	ldr	r1, [pc, #212]	; (800ac74 <HAL_GPIO_Init+0x310>)
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	089b      	lsrs	r3, r3, #2
 800aba2:	3302      	adds	r3, #2
 800aba4:	69ba      	ldr	r2, [r7, #24]
 800aba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800abaa:	4b3b      	ldr	r3, [pc, #236]	; (800ac98 <HAL_GPIO_Init+0x334>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	43db      	mvns	r3, r3
 800abb4:	69ba      	ldr	r2, [r7, #24]
 800abb6:	4013      	ands	r3, r2
 800abb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d003      	beq.n	800abce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800abc6:	69ba      	ldr	r2, [r7, #24]
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	4313      	orrs	r3, r2
 800abcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800abce:	4a32      	ldr	r2, [pc, #200]	; (800ac98 <HAL_GPIO_Init+0x334>)
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800abd4:	4b30      	ldr	r3, [pc, #192]	; (800ac98 <HAL_GPIO_Init+0x334>)
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	43db      	mvns	r3, r3
 800abde:	69ba      	ldr	r2, [r7, #24]
 800abe0:	4013      	ands	r3, r2
 800abe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abec:	2b00      	cmp	r3, #0
 800abee:	d003      	beq.n	800abf8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800abf0:	69ba      	ldr	r2, [r7, #24]
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	4313      	orrs	r3, r2
 800abf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800abf8:	4a27      	ldr	r2, [pc, #156]	; (800ac98 <HAL_GPIO_Init+0x334>)
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800abfe:	4b26      	ldr	r3, [pc, #152]	; (800ac98 <HAL_GPIO_Init+0x334>)
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	43db      	mvns	r3, r3
 800ac08:	69ba      	ldr	r2, [r7, #24]
 800ac0a:	4013      	ands	r3, r2
 800ac0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d003      	beq.n	800ac22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800ac1a:	69ba      	ldr	r2, [r7, #24]
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ac22:	4a1d      	ldr	r2, [pc, #116]	; (800ac98 <HAL_GPIO_Init+0x334>)
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ac28:	4b1b      	ldr	r3, [pc, #108]	; (800ac98 <HAL_GPIO_Init+0x334>)
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	43db      	mvns	r3, r3
 800ac32:	69ba      	ldr	r2, [r7, #24]
 800ac34:	4013      	ands	r3, r2
 800ac36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d003      	beq.n	800ac4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800ac44:	69ba      	ldr	r2, [r7, #24]
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ac4c:	4a12      	ldr	r2, [pc, #72]	; (800ac98 <HAL_GPIO_Init+0x334>)
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	3301      	adds	r3, #1
 800ac56:	61fb      	str	r3, [r7, #28]
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	2b0f      	cmp	r3, #15
 800ac5c:	f67f ae92 	bls.w	800a984 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800ac60:	bf00      	nop
 800ac62:	bf00      	nop
 800ac64:	3724      	adds	r7, #36	; 0x24
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	40023800 	.word	0x40023800
 800ac74:	40013800 	.word	0x40013800
 800ac78:	40020000 	.word	0x40020000
 800ac7c:	40020400 	.word	0x40020400
 800ac80:	40020800 	.word	0x40020800
 800ac84:	40020c00 	.word	0x40020c00
 800ac88:	40021000 	.word	0x40021000
 800ac8c:	40021400 	.word	0x40021400
 800ac90:	40021800 	.word	0x40021800
 800ac94:	40021c00 	.word	0x40021c00
 800ac98:	40013c00 	.word	0x40013c00

0800ac9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	460b      	mov	r3, r1
 800aca6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	691a      	ldr	r2, [r3, #16]
 800acac:	887b      	ldrh	r3, [r7, #2]
 800acae:	4013      	ands	r3, r2
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d002      	beq.n	800acba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800acb4:	2301      	movs	r3, #1
 800acb6:	73fb      	strb	r3, [r7, #15]
 800acb8:	e001      	b.n	800acbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800acba:	2300      	movs	r3, #0
 800acbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800acbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3714      	adds	r7, #20
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	460b      	mov	r3, r1
 800acd6:	807b      	strh	r3, [r7, #2]
 800acd8:	4613      	mov	r3, r2
 800acda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800acdc:	787b      	ldrb	r3, [r7, #1]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d003      	beq.n	800acea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ace2:	887a      	ldrh	r2, [r7, #2]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800ace8:	e003      	b.n	800acf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800acea:	887b      	ldrh	r3, [r7, #2]
 800acec:	041a      	lsls	r2, r3, #16
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	619a      	str	r2, [r3, #24]
}
 800acf2:	bf00      	nop
 800acf4:	370c      	adds	r7, #12
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800acfe:	b480      	push	{r7}
 800ad00:	b085      	sub	sp, #20
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	460b      	mov	r3, r1
 800ad08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	695b      	ldr	r3, [r3, #20]
 800ad0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ad10:	887a      	ldrh	r2, [r7, #2]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	4013      	ands	r3, r2
 800ad16:	041a      	lsls	r2, r3, #16
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	43d9      	mvns	r1, r3
 800ad1c:	887b      	ldrh	r3, [r7, #2]
 800ad1e:	400b      	ands	r3, r1
 800ad20:	431a      	orrs	r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	619a      	str	r2, [r3, #24]
}
 800ad26:	bf00      	nop
 800ad28:	3714      	adds	r7, #20
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
	...

0800ad34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ad3e:	4b08      	ldr	r3, [pc, #32]	; (800ad60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ad40:	695a      	ldr	r2, [r3, #20]
 800ad42:	88fb      	ldrh	r3, [r7, #6]
 800ad44:	4013      	ands	r3, r2
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d006      	beq.n	800ad58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ad4a:	4a05      	ldr	r2, [pc, #20]	; (800ad60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ad4c:	88fb      	ldrh	r3, [r7, #6]
 800ad4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ad50:	88fb      	ldrh	r3, [r7, #6]
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fc ff16 	bl	8007b84 <HAL_GPIO_EXTI_Callback>
  }
}
 800ad58:	bf00      	nop
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	40013c00 	.word	0x40013c00

0800ad64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d101      	bne.n	800ad76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ad72:	2301      	movs	r3, #1
 800ad74:	e07f      	b.n	800ae76 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d106      	bne.n	800ad90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f7fd f9be 	bl	800810c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2224      	movs	r2, #36	; 0x24
 800ad94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f022 0201 	bic.w	r2, r2, #1
 800ada6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800adb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	689a      	ldr	r2, [r3, #8]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800adc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d107      	bne.n	800adde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	689a      	ldr	r2, [r3, #8]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800adda:	609a      	str	r2, [r3, #8]
 800addc:	e006      	b.n	800adec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	689a      	ldr	r2, [r3, #8]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800adea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d104      	bne.n	800adfe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800adfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	6859      	ldr	r1, [r3, #4]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	4b1d      	ldr	r3, [pc, #116]	; (800ae80 <HAL_I2C_Init+0x11c>)
 800ae0a:	430b      	orrs	r3, r1
 800ae0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	68da      	ldr	r2, [r3, #12]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ae1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	691a      	ldr	r2, [r3, #16]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	695b      	ldr	r3, [r3, #20]
 800ae26:	ea42 0103 	orr.w	r1, r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	021a      	lsls	r2, r3, #8
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	430a      	orrs	r2, r1
 800ae36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	69d9      	ldr	r1, [r3, #28]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a1a      	ldr	r2, [r3, #32]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	430a      	orrs	r2, r1
 800ae46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f042 0201 	orr.w	r2, r2, #1
 800ae56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2220      	movs	r2, #32
 800ae62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3708      	adds	r7, #8
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	02008000 	.word	0x02008000

0800ae84 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b088      	sub	sp, #32
 800ae88:	af02      	add	r7, sp, #8
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	607a      	str	r2, [r7, #4]
 800ae8e:	461a      	mov	r2, r3
 800ae90:	460b      	mov	r3, r1
 800ae92:	817b      	strh	r3, [r7, #10]
 800ae94:	4613      	mov	r3, r2
 800ae96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	2b20      	cmp	r3, #32
 800aea2:	f040 80da 	bne.w	800b05a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d101      	bne.n	800aeb4 <HAL_I2C_Master_Transmit+0x30>
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	e0d3      	b.n	800b05c <HAL_I2C_Master_Transmit+0x1d8>
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aebc:	f7fe f964 	bl	8009188 <HAL_GetTick>
 800aec0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	9300      	str	r3, [sp, #0]
 800aec6:	2319      	movs	r3, #25
 800aec8:	2201      	movs	r2, #1
 800aeca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f001 fc67 	bl	800c7a2 <I2C_WaitOnFlagUntilTimeout>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d001      	beq.n	800aede <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	e0be      	b.n	800b05c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2221      	movs	r2, #33	; 0x21
 800aee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2210      	movs	r2, #16
 800aeea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2200      	movs	r2, #0
 800aef2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	893a      	ldrh	r2, [r7, #8]
 800aefe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2200      	movs	r2, #0
 800af04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	2bff      	cmp	r3, #255	; 0xff
 800af0e:	d90e      	bls.n	800af2e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	22ff      	movs	r2, #255	; 0xff
 800af14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af1a:	b2da      	uxtb	r2, r3
 800af1c:	8979      	ldrh	r1, [r7, #10]
 800af1e:	4b51      	ldr	r3, [pc, #324]	; (800b064 <HAL_I2C_Master_Transmit+0x1e0>)
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af26:	68f8      	ldr	r0, [r7, #12]
 800af28:	f001 fd5e 	bl	800c9e8 <I2C_TransferConfig>
 800af2c:	e06c      	b.n	800b008 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af32:	b29a      	uxth	r2, r3
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af3c:	b2da      	uxtb	r2, r3
 800af3e:	8979      	ldrh	r1, [r7, #10]
 800af40:	4b48      	ldr	r3, [pc, #288]	; (800b064 <HAL_I2C_Master_Transmit+0x1e0>)
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800af48:	68f8      	ldr	r0, [r7, #12]
 800af4a:	f001 fd4d 	bl	800c9e8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800af4e:	e05b      	b.n	800b008 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af50:	697a      	ldr	r2, [r7, #20]
 800af52:	6a39      	ldr	r1, [r7, #32]
 800af54:	68f8      	ldr	r0, [r7, #12]
 800af56:	f001 fc64 	bl	800c822 <I2C_WaitOnTXISFlagUntilTimeout>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d001      	beq.n	800af64 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	e07b      	b.n	800b05c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af68:	781a      	ldrb	r2, [r3, #0]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af74:	1c5a      	adds	r2, r3, #1
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af7e:	b29b      	uxth	r3, r3
 800af80:	3b01      	subs	r3, #1
 800af82:	b29a      	uxth	r2, r3
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af8c:	3b01      	subs	r3, #1
 800af8e:	b29a      	uxth	r2, r3
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af98:	b29b      	uxth	r3, r3
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d034      	beq.n	800b008 <HAL_I2C_Master_Transmit+0x184>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d130      	bne.n	800b008 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	6a3b      	ldr	r3, [r7, #32]
 800afac:	2200      	movs	r2, #0
 800afae:	2180      	movs	r1, #128	; 0x80
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f001 fbf6 	bl	800c7a2 <I2C_WaitOnFlagUntilTimeout>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d001      	beq.n	800afc0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	e04d      	b.n	800b05c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	2bff      	cmp	r3, #255	; 0xff
 800afc8:	d90e      	bls.n	800afe8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	22ff      	movs	r2, #255	; 0xff
 800afce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afd4:	b2da      	uxtb	r2, r3
 800afd6:	8979      	ldrh	r1, [r7, #10]
 800afd8:	2300      	movs	r3, #0
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f001 fd01 	bl	800c9e8 <I2C_TransferConfig>
 800afe6:	e00f      	b.n	800b008 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afec:	b29a      	uxth	r2, r3
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aff6:	b2da      	uxtb	r2, r3
 800aff8:	8979      	ldrh	r1, [r7, #10]
 800affa:	2300      	movs	r3, #0
 800affc:	9300      	str	r3, [sp, #0]
 800affe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f001 fcf0 	bl	800c9e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d19e      	bne.n	800af50 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b012:	697a      	ldr	r2, [r7, #20]
 800b014:	6a39      	ldr	r1, [r7, #32]
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f001 fc43 	bl	800c8a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	e01a      	b.n	800b05c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2220      	movs	r2, #32
 800b02c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	6859      	ldr	r1, [r3, #4]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	4b0b      	ldr	r3, [pc, #44]	; (800b068 <HAL_I2C_Master_Transmit+0x1e4>)
 800b03a:	400b      	ands	r3, r1
 800b03c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2220      	movs	r2, #32
 800b042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2200      	movs	r2, #0
 800b04a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2200      	movs	r2, #0
 800b052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b056:	2300      	movs	r3, #0
 800b058:	e000      	b.n	800b05c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800b05a:	2302      	movs	r3, #2
  }
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3718      	adds	r7, #24
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	80002000 	.word	0x80002000
 800b068:	fe00e800 	.word	0xfe00e800

0800b06c <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b088      	sub	sp, #32
 800b070:	af02      	add	r7, sp, #8
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	607a      	str	r2, [r7, #4]
 800b076:	461a      	mov	r2, r3
 800b078:	460b      	mov	r3, r1
 800b07a:	817b      	strh	r3, [r7, #10]
 800b07c:	4613      	mov	r3, r2
 800b07e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b086:	b2db      	uxtb	r3, r3
 800b088:	2b20      	cmp	r3, #32
 800b08a:	d153      	bne.n	800b134 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	699b      	ldr	r3, [r3, #24]
 800b092:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b09a:	d101      	bne.n	800b0a0 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 800b09c:	2302      	movs	r3, #2
 800b09e:	e04a      	b.n	800b136 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d101      	bne.n	800b0ae <HAL_I2C_Master_Transmit_IT+0x42>
 800b0aa:	2302      	movs	r3, #2
 800b0ac:	e043      	b.n	800b136 <HAL_I2C_Master_Transmit_IT+0xca>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2221      	movs	r2, #33	; 0x21
 800b0ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2210      	movs	r2, #16
 800b0c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	893a      	ldrh	r2, [r7, #8]
 800b0d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	4a19      	ldr	r2, [pc, #100]	; (800b140 <HAL_I2C_Master_Transmit_IT+0xd4>)
 800b0dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	4a18      	ldr	r2, [pc, #96]	; (800b144 <HAL_I2C_Master_Transmit_IT+0xd8>)
 800b0e2:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	2bff      	cmp	r3, #255	; 0xff
 800b0ec:	d906      	bls.n	800b0fc <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	22ff      	movs	r2, #255	; 0xff
 800b0f2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b0f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b0f8:	617b      	str	r3, [r7, #20]
 800b0fa:	e007      	b.n	800b10c <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b100:	b29a      	uxth	r2, r3
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b10a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b110:	b2da      	uxtb	r2, r3
 800b112:	8979      	ldrh	r1, [r7, #10]
 800b114:	4b0c      	ldr	r3, [pc, #48]	; (800b148 <HAL_I2C_Master_Transmit_IT+0xdc>)
 800b116:	9300      	str	r3, [sp, #0]
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f001 fc64 	bl	800c9e8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2200      	movs	r2, #0
 800b124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b128:	2101      	movs	r1, #1
 800b12a:	68f8      	ldr	r0, [r7, #12]
 800b12c:	f001 fc8a 	bl	800ca44 <I2C_Enable_IRQ>

    return HAL_OK;
 800b130:	2300      	movs	r3, #0
 800b132:	e000      	b.n	800b136 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 800b134:	2302      	movs	r3, #2
  }
}
 800b136:	4618      	mov	r0, r3
 800b138:	3718      	adds	r7, #24
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	ffff0000 	.word	0xffff0000
 800b144:	0800b551 	.word	0x0800b551
 800b148:	80002000 	.word	0x80002000

0800b14c <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b088      	sub	sp, #32
 800b150:	af02      	add	r7, sp, #8
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	607a      	str	r2, [r7, #4]
 800b156:	461a      	mov	r2, r3
 800b158:	460b      	mov	r3, r1
 800b15a:	817b      	strh	r3, [r7, #10]
 800b15c:	4613      	mov	r3, r2
 800b15e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b166:	b2db      	uxtb	r3, r3
 800b168:	2b20      	cmp	r3, #32
 800b16a:	d153      	bne.n	800b214 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	699b      	ldr	r3, [r3, #24]
 800b172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b17a:	d101      	bne.n	800b180 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 800b17c:	2302      	movs	r3, #2
 800b17e:	e04a      	b.n	800b216 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b186:	2b01      	cmp	r3, #1
 800b188:	d101      	bne.n	800b18e <HAL_I2C_Master_Receive_IT+0x42>
 800b18a:	2302      	movs	r3, #2
 800b18c:	e043      	b.n	800b216 <HAL_I2C_Master_Receive_IT+0xca>
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2201      	movs	r2, #1
 800b192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2222      	movs	r2, #34	; 0x22
 800b19a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2210      	movs	r2, #16
 800b1a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	893a      	ldrh	r2, [r7, #8]
 800b1b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	4a19      	ldr	r2, [pc, #100]	; (800b220 <HAL_I2C_Master_Receive_IT+0xd4>)
 800b1bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	4a18      	ldr	r2, [pc, #96]	; (800b224 <HAL_I2C_Master_Receive_IT+0xd8>)
 800b1c2:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	2bff      	cmp	r3, #255	; 0xff
 800b1cc:	d906      	bls.n	800b1dc <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	22ff      	movs	r2, #255	; 0xff
 800b1d2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b1d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b1d8:	617b      	str	r3, [r7, #20]
 800b1da:	e007      	b.n	800b1ec <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b1e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b1ea:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1f0:	b2da      	uxtb	r2, r3
 800b1f2:	8979      	ldrh	r1, [r7, #10]
 800b1f4:	4b0c      	ldr	r3, [pc, #48]	; (800b228 <HAL_I2C_Master_Receive_IT+0xdc>)
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f001 fbf4 	bl	800c9e8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2200      	movs	r2, #0
 800b204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b208:	2102      	movs	r1, #2
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f001 fc1a 	bl	800ca44 <I2C_Enable_IRQ>

    return HAL_OK;
 800b210:	2300      	movs	r3, #0
 800b212:	e000      	b.n	800b216 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 800b214:	2302      	movs	r3, #2
  }
}
 800b216:	4618      	mov	r0, r3
 800b218:	3718      	adds	r7, #24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	ffff0000 	.word	0xffff0000
 800b224:	0800b551 	.word	0x0800b551
 800b228:	80002400 	.word	0x80002400

0800b22c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b088      	sub	sp, #32
 800b230:	af02      	add	r7, sp, #8
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	4608      	mov	r0, r1
 800b236:	4611      	mov	r1, r2
 800b238:	461a      	mov	r2, r3
 800b23a:	4603      	mov	r3, r0
 800b23c:	817b      	strh	r3, [r7, #10]
 800b23e:	460b      	mov	r3, r1
 800b240:	813b      	strh	r3, [r7, #8]
 800b242:	4613      	mov	r3, r2
 800b244:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	2b20      	cmp	r3, #32
 800b250:	d176      	bne.n	800b340 <HAL_I2C_Mem_Write_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800b252:	6a3b      	ldr	r3, [r7, #32]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d002      	beq.n	800b25e <HAL_I2C_Mem_Write_IT+0x32>
 800b258:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d105      	bne.n	800b26a <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b264:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b266:	2301      	movs	r3, #1
 800b268:	e06b      	b.n	800b342 <HAL_I2C_Mem_Write_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	699b      	ldr	r3, [r3, #24]
 800b270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b278:	d101      	bne.n	800b27e <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800b27a:	2302      	movs	r3, #2
 800b27c:	e061      	b.n	800b342 <HAL_I2C_Mem_Write_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b284:	2b01      	cmp	r3, #1
 800b286:	d101      	bne.n	800b28c <HAL_I2C_Mem_Write_IT+0x60>
 800b288:	2302      	movs	r3, #2
 800b28a:	e05a      	b.n	800b342 <HAL_I2C_Mem_Write_IT+0x116>
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2201      	movs	r2, #1
 800b290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b294:	f7fd ff78 	bl	8009188 <HAL_GetTick>
 800b298:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2221      	movs	r2, #33	; 0x21
 800b29e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2240      	movs	r2, #64	; 0x40
 800b2a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6a3a      	ldr	r2, [r7, #32]
 800b2b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b2ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	4a23      	ldr	r2, [pc, #140]	; (800b34c <HAL_I2C_Mem_Write_IT+0x120>)
 800b2c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	4a22      	ldr	r2, [pc, #136]	; (800b350 <HAL_I2C_Mem_Write_IT+0x124>)
 800b2c6:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	2bff      	cmp	r3, #255	; 0xff
 800b2d0:	d906      	bls.n	800b2e0 <HAL_I2C_Mem_Write_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	22ff      	movs	r2, #255	; 0xff
 800b2d6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b2d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b2dc:	617b      	str	r3, [r7, #20]
 800b2de:	e007      	b.n	800b2f0 <HAL_I2C_Mem_Write_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2e4:	b29a      	uxth	r2, r3
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b2ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b2ee:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800b2f0:	88f8      	ldrh	r0, [r7, #6]
 800b2f2:	893a      	ldrh	r2, [r7, #8]
 800b2f4:	8979      	ldrh	r1, [r7, #10]
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	9301      	str	r3, [sp, #4]
 800b2fa:	2319      	movs	r3, #25
 800b2fc:	9300      	str	r3, [sp, #0]
 800b2fe:	4603      	mov	r3, r0
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f000 fd23 	bl	800bd4c <I2C_RequestMemoryWrite>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d005      	beq.n	800b318 <HAL_I2C_Mem_Write_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2200      	movs	r2, #0
 800b310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b314:	2301      	movs	r3, #1
 800b316:	e014      	b.n	800b342 <HAL_I2C_Mem_Write_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b31c:	b2da      	uxtb	r2, r3
 800b31e:	8979      	ldrh	r1, [r7, #10]
 800b320:	2300      	movs	r3, #0
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f001 fb5e 	bl	800c9e8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2200      	movs	r2, #0
 800b330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b334:	2101      	movs	r1, #1
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f001 fb84 	bl	800ca44 <I2C_Enable_IRQ>

    return HAL_OK;
 800b33c:	2300      	movs	r3, #0
 800b33e:	e000      	b.n	800b342 <HAL_I2C_Mem_Write_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 800b340:	2302      	movs	r3, #2
  }
}
 800b342:	4618      	mov	r0, r3
 800b344:	3718      	adds	r7, #24
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	ffff0000 	.word	0xffff0000
 800b350:	0800b551 	.word	0x0800b551

0800b354 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b088      	sub	sp, #32
 800b358:	af02      	add	r7, sp, #8
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	4608      	mov	r0, r1
 800b35e:	4611      	mov	r1, r2
 800b360:	461a      	mov	r2, r3
 800b362:	4603      	mov	r3, r0
 800b364:	817b      	strh	r3, [r7, #10]
 800b366:	460b      	mov	r3, r1
 800b368:	813b      	strh	r3, [r7, #8]
 800b36a:	4613      	mov	r3, r2
 800b36c:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b374:	b2db      	uxtb	r3, r3
 800b376:	2b20      	cmp	r3, #32
 800b378:	d176      	bne.n	800b468 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800b37a:	6a3b      	ldr	r3, [r7, #32]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d002      	beq.n	800b386 <HAL_I2C_Mem_Read_IT+0x32>
 800b380:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b382:	2b00      	cmp	r3, #0
 800b384:	d105      	bne.n	800b392 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b38c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b38e:	2301      	movs	r3, #1
 800b390:	e06b      	b.n	800b46a <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	699b      	ldr	r3, [r3, #24]
 800b398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b39c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3a0:	d101      	bne.n	800b3a6 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800b3a2:	2302      	movs	r3, #2
 800b3a4:	e061      	b.n	800b46a <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d101      	bne.n	800b3b4 <HAL_I2C_Mem_Read_IT+0x60>
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	e05a      	b.n	800b46a <HAL_I2C_Mem_Read_IT+0x116>
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b3bc:	f7fd fee4 	bl	8009188 <HAL_GetTick>
 800b3c0:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2222      	movs	r2, #34	; 0x22
 800b3c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2240      	movs	r2, #64	; 0x40
 800b3ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6a3a      	ldr	r2, [r7, #32]
 800b3dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b3e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	4a23      	ldr	r2, [pc, #140]	; (800b474 <HAL_I2C_Mem_Read_IT+0x120>)
 800b3e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	4a22      	ldr	r2, [pc, #136]	; (800b478 <HAL_I2C_Mem_Read_IT+0x124>)
 800b3ee:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	2bff      	cmp	r3, #255	; 0xff
 800b3f8:	d906      	bls.n	800b408 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	22ff      	movs	r2, #255	; 0xff
 800b3fe:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b404:	617b      	str	r3, [r7, #20]
 800b406:	e007      	b.n	800b418 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b40c:	b29a      	uxth	r2, r3
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b416:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800b418:	88f8      	ldrh	r0, [r7, #6]
 800b41a:	893a      	ldrh	r2, [r7, #8]
 800b41c:	8979      	ldrh	r1, [r7, #10]
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	9301      	str	r3, [sp, #4]
 800b422:	2319      	movs	r3, #25
 800b424:	9300      	str	r3, [sp, #0]
 800b426:	4603      	mov	r3, r0
 800b428:	68f8      	ldr	r0, [r7, #12]
 800b42a:	f000 fce3 	bl	800bdf4 <I2C_RequestMemoryRead>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	d005      	beq.n	800b440 <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2200      	movs	r2, #0
 800b438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b43c:	2301      	movs	r3, #1
 800b43e:	e014      	b.n	800b46a <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b444:	b2da      	uxtb	r2, r3
 800b446:	8979      	ldrh	r1, [r7, #10]
 800b448:	4b0c      	ldr	r3, [pc, #48]	; (800b47c <HAL_I2C_Mem_Read_IT+0x128>)
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f001 faca 	bl	800c9e8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2200      	movs	r2, #0
 800b458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b45c:	2102      	movs	r1, #2
 800b45e:	68f8      	ldr	r0, [r7, #12]
 800b460:	f001 faf0 	bl	800ca44 <I2C_Enable_IRQ>

    return HAL_OK;
 800b464:	2300      	movs	r3, #0
 800b466:	e000      	b.n	800b46a <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 800b468:	2302      	movs	r3, #2
  }
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3718      	adds	r7, #24
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	ffff0000 	.word	0xffff0000
 800b478:	0800b551 	.word	0x0800b551
 800b47c:	80002400 	.word	0x80002400

0800b480 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	699b      	ldr	r3, [r3, #24]
 800b48e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d005      	beq.n	800b4ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4a4:	68ba      	ldr	r2, [r7, #8]
 800b4a6:	68f9      	ldr	r1, [r7, #12]
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	4798      	blx	r3
  }
}
 800b4ac:	bf00      	nop
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b4bc:	bf00      	nop
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b4d0:	bf00      	nop
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	70fb      	strb	r3, [r7, #3]
 800b4e8:	4613      	mov	r3, r2
 800b4ea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b4ec:	bf00      	nop
 800b4ee:	370c      	adds	r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800b500:	bf00      	nop
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b514:	bf00      	nop
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b528:	bf00      	nop
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b542:	b2db      	uxtb	r3, r3
}
 800b544:	4618      	mov	r0, r3
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b088      	sub	sp, #32
 800b554:	af02      	add	r7, sp, #8
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b566:	2b01      	cmp	r3, #1
 800b568:	d101      	bne.n	800b56e <I2C_Master_ISR_IT+0x1e>
 800b56a:	2302      	movs	r3, #2
 800b56c:	e114      	b.n	800b798 <I2C_Master_ISR_IT+0x248>
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2201      	movs	r2, #1
 800b572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	091b      	lsrs	r3, r3, #4
 800b57a:	f003 0301 	and.w	r3, r3, #1
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d013      	beq.n	800b5aa <I2C_Master_ISR_IT+0x5a>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	091b      	lsrs	r3, r3, #4
 800b586:	f003 0301 	and.w	r3, r3, #1
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00d      	beq.n	800b5aa <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	2210      	movs	r2, #16
 800b594:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b59a:	f043 0204 	orr.w	r2, r3, #4
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f001 f8bb 	bl	800c71e <I2C_Flush_TXDR>
 800b5a8:	e0e1      	b.n	800b76e <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	089b      	lsrs	r3, r3, #2
 800b5ae:	f003 0301 	and.w	r3, r3, #1
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d023      	beq.n	800b5fe <I2C_Master_ISR_IT+0xae>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	089b      	lsrs	r3, r3, #2
 800b5ba:	f003 0301 	and.w	r3, r3, #1
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d01d      	beq.n	800b5fe <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	f023 0304 	bic.w	r3, r3, #4
 800b5c8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d4:	b2d2      	uxtb	r2, r2
 800b5d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5dc:	1c5a      	adds	r2, r3, #1
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	b29a      	uxth	r2, r3
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b5fc:	e0b7      	b.n	800b76e <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	085b      	lsrs	r3, r3, #1
 800b602:	f003 0301 	and.w	r3, r3, #1
 800b606:	2b00      	cmp	r3, #0
 800b608:	d01e      	beq.n	800b648 <I2C_Master_ISR_IT+0xf8>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	085b      	lsrs	r3, r3, #1
 800b60e:	f003 0301 	and.w	r3, r3, #1
 800b612:	2b00      	cmp	r3, #0
 800b614:	d018      	beq.n	800b648 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61a:	781a      	ldrb	r2, [r3, #0]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b626:	1c5a      	adds	r2, r3, #1
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b630:	3b01      	subs	r3, #1
 800b632:	b29a      	uxth	r2, r3
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	3b01      	subs	r3, #1
 800b640:	b29a      	uxth	r2, r3
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b646:	e092      	b.n	800b76e <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	09db      	lsrs	r3, r3, #7
 800b64c:	f003 0301 	and.w	r3, r3, #1
 800b650:	2b00      	cmp	r3, #0
 800b652:	d05d      	beq.n	800b710 <I2C_Master_ISR_IT+0x1c0>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	099b      	lsrs	r3, r3, #6
 800b658:	f003 0301 	and.w	r3, r3, #1
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d057      	beq.n	800b710 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b664:	b29b      	uxth	r3, r3
 800b666:	2b00      	cmp	r3, #0
 800b668:	d040      	beq.n	800b6ec <I2C_Master_ISR_IT+0x19c>
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d13c      	bne.n	800b6ec <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	b29b      	uxth	r3, r3
 800b67a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b67e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b684:	b29b      	uxth	r3, r3
 800b686:	2bff      	cmp	r3, #255	; 0xff
 800b688:	d90e      	bls.n	800b6a8 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	22ff      	movs	r2, #255	; 0xff
 800b68e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b694:	b2da      	uxtb	r2, r3
 800b696:	8a79      	ldrh	r1, [r7, #18]
 800b698:	2300      	movs	r3, #0
 800b69a:	9300      	str	r3, [sp, #0]
 800b69c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f001 f9a1 	bl	800c9e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6a6:	e032      	b.n	800b70e <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6ac:	b29a      	uxth	r2, r3
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b6ba:	d00b      	beq.n	800b6d4 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6c0:	b2da      	uxtb	r2, r3
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c6:	8a79      	ldrh	r1, [r7, #18]
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	9000      	str	r0, [sp, #0]
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f001 f98b 	bl	800c9e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6d2:	e01c      	b.n	800b70e <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6d8:	b2da      	uxtb	r2, r3
 800b6da:	8a79      	ldrh	r1, [r7, #18]
 800b6dc:	2300      	movs	r3, #0
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f001 f97f 	bl	800c9e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6ea:	e010      	b.n	800b70e <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6fa:	d003      	beq.n	800b704 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	f000 fc51 	bl	800bfa4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b702:	e034      	b.n	800b76e <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b704:	2140      	movs	r1, #64	; 0x40
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f000 ff12 	bl	800c530 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b70c:	e02f      	b.n	800b76e <I2C_Master_ISR_IT+0x21e>
 800b70e:	e02e      	b.n	800b76e <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	099b      	lsrs	r3, r3, #6
 800b714:	f003 0301 	and.w	r3, r3, #1
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d028      	beq.n	800b76e <I2C_Master_ISR_IT+0x21e>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	099b      	lsrs	r3, r3, #6
 800b720:	f003 0301 	and.w	r3, r3, #1
 800b724:	2b00      	cmp	r3, #0
 800b726:	d022      	beq.n	800b76e <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d119      	bne.n	800b766 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b73c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b740:	d015      	beq.n	800b76e <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b746:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b74a:	d108      	bne.n	800b75e <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	685a      	ldr	r2, [r3, #4]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b75a:	605a      	str	r2, [r3, #4]
 800b75c:	e007      	b.n	800b76e <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f000 fc20 	bl	800bfa4 <I2C_ITMasterSeqCplt>
 800b764:	e003      	b.n	800b76e <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b766:	2140      	movs	r1, #64	; 0x40
 800b768:	68f8      	ldr	r0, [r7, #12]
 800b76a:	f000 fee1 	bl	800c530 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	095b      	lsrs	r3, r3, #5
 800b772:	f003 0301 	and.w	r3, r3, #1
 800b776:	2b00      	cmp	r3, #0
 800b778:	d009      	beq.n	800b78e <I2C_Master_ISR_IT+0x23e>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	095b      	lsrs	r3, r3, #5
 800b77e:	f003 0301 	and.w	r3, r3, #1
 800b782:	2b00      	cmp	r3, #0
 800b784:	d003      	beq.n	800b78e <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800b786:	6979      	ldr	r1, [r7, #20]
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f000 fca7 	bl	800c0dc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2200      	movs	r2, #0
 800b792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3718      	adds	r7, #24
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d101      	bne.n	800b7c4 <I2C_Slave_ISR_IT+0x24>
 800b7c0:	2302      	movs	r3, #2
 800b7c2:	e0ec      	b.n	800b99e <I2C_Slave_ISR_IT+0x1fe>
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	095b      	lsrs	r3, r3, #5
 800b7d0:	f003 0301 	and.w	r3, r3, #1
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d009      	beq.n	800b7ec <I2C_Slave_ISR_IT+0x4c>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	095b      	lsrs	r3, r3, #5
 800b7dc:	f003 0301 	and.w	r3, r3, #1
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d003      	beq.n	800b7ec <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800b7e4:	6939      	ldr	r1, [r7, #16]
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	f000 fd42 	bl	800c270 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	091b      	lsrs	r3, r3, #4
 800b7f0:	f003 0301 	and.w	r3, r3, #1
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d04d      	beq.n	800b894 <I2C_Slave_ISR_IT+0xf4>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	091b      	lsrs	r3, r3, #4
 800b7fc:	f003 0301 	and.w	r3, r3, #1
 800b800:	2b00      	cmp	r3, #0
 800b802:	d047      	beq.n	800b894 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b808:	b29b      	uxth	r3, r3
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d128      	bne.n	800b860 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b814:	b2db      	uxtb	r3, r3
 800b816:	2b28      	cmp	r3, #40	; 0x28
 800b818:	d108      	bne.n	800b82c <I2C_Slave_ISR_IT+0x8c>
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b820:	d104      	bne.n	800b82c <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b822:	6939      	ldr	r1, [r7, #16]
 800b824:	68f8      	ldr	r0, [r7, #12]
 800b826:	f000 fe2d 	bl	800c484 <I2C_ITListenCplt>
 800b82a:	e032      	b.n	800b892 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b832:	b2db      	uxtb	r3, r3
 800b834:	2b29      	cmp	r3, #41	; 0x29
 800b836:	d10e      	bne.n	800b856 <I2C_Slave_ISR_IT+0xb6>
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b83e:	d00a      	beq.n	800b856 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2210      	movs	r2, #16
 800b846:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f000 ff68 	bl	800c71e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b84e:	68f8      	ldr	r0, [r7, #12]
 800b850:	f000 fbe5 	bl	800c01e <I2C_ITSlaveSeqCplt>
 800b854:	e01d      	b.n	800b892 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2210      	movs	r2, #16
 800b85c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800b85e:	e096      	b.n	800b98e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2210      	movs	r2, #16
 800b866:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b86c:	f043 0204 	orr.w	r2, r3, #4
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d004      	beq.n	800b884 <I2C_Slave_ISR_IT+0xe4>
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b880:	f040 8085 	bne.w	800b98e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b888:	4619      	mov	r1, r3
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f000 fe50 	bl	800c530 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b890:	e07d      	b.n	800b98e <I2C_Slave_ISR_IT+0x1ee>
 800b892:	e07c      	b.n	800b98e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	089b      	lsrs	r3, r3, #2
 800b898:	f003 0301 	and.w	r3, r3, #1
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d030      	beq.n	800b902 <I2C_Slave_ISR_IT+0x162>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	089b      	lsrs	r3, r3, #2
 800b8a4:	f003 0301 	and.w	r3, r3, #1
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d02a      	beq.n	800b902 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d018      	beq.n	800b8e8 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c0:	b2d2      	uxtb	r2, r2
 800b8c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c8:	1c5a      	adds	r2, r3, #1
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	b29a      	uxth	r2, r3
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d14f      	bne.n	800b992 <I2C_Slave_ISR_IT+0x1f2>
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b8f8:	d04b      	beq.n	800b992 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f000 fb8f 	bl	800c01e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800b900:	e047      	b.n	800b992 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	08db      	lsrs	r3, r3, #3
 800b906:	f003 0301 	and.w	r3, r3, #1
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d00a      	beq.n	800b924 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	08db      	lsrs	r3, r3, #3
 800b912:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b916:	2b00      	cmp	r3, #0
 800b918:	d004      	beq.n	800b924 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800b91a:	6939      	ldr	r1, [r7, #16]
 800b91c:	68f8      	ldr	r0, [r7, #12]
 800b91e:	f000 fabd 	bl	800be9c <I2C_ITAddrCplt>
 800b922:	e037      	b.n	800b994 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	085b      	lsrs	r3, r3, #1
 800b928:	f003 0301 	and.w	r3, r3, #1
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d031      	beq.n	800b994 <I2C_Slave_ISR_IT+0x1f4>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	085b      	lsrs	r3, r3, #1
 800b934:	f003 0301 	and.w	r3, r3, #1
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d02b      	beq.n	800b994 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b940:	b29b      	uxth	r3, r3
 800b942:	2b00      	cmp	r3, #0
 800b944:	d018      	beq.n	800b978 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94a:	781a      	ldrb	r2, [r3, #0]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b956:	1c5a      	adds	r2, r3, #1
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b960:	b29b      	uxth	r3, r3
 800b962:	3b01      	subs	r3, #1
 800b964:	b29a      	uxth	r2, r3
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b96e:	3b01      	subs	r3, #1
 800b970:	b29a      	uxth	r2, r3
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	851a      	strh	r2, [r3, #40]	; 0x28
 800b976:	e00d      	b.n	800b994 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b97e:	d002      	beq.n	800b986 <I2C_Slave_ISR_IT+0x1e6>
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d106      	bne.n	800b994 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f000 fb49 	bl	800c01e <I2C_ITSlaveSeqCplt>
 800b98c:	e002      	b.n	800b994 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800b98e:	bf00      	nop
 800b990:	e000      	b.n	800b994 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800b992:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3718      	adds	r7, #24
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b088      	sub	sp, #32
 800b9aa:	af02      	add	r7, sp, #8
 800b9ac:	60f8      	str	r0, [r7, #12]
 800b9ae:	60b9      	str	r1, [r7, #8]
 800b9b0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d101      	bne.n	800b9c0 <I2C_Master_ISR_DMA+0x1a>
 800b9bc:	2302      	movs	r3, #2
 800b9be:	e0e1      	b.n	800bb84 <I2C_Master_ISR_DMA+0x1de>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	091b      	lsrs	r3, r3, #4
 800b9cc:	f003 0301 	and.w	r3, r3, #1
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d017      	beq.n	800ba04 <I2C_Master_ISR_DMA+0x5e>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	091b      	lsrs	r3, r3, #4
 800b9d8:	f003 0301 	and.w	r3, r3, #1
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d011      	beq.n	800ba04 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2210      	movs	r2, #16
 800b9e6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ec:	f043 0204 	orr.w	r2, r3, #4
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b9f4:	2120      	movs	r1, #32
 800b9f6:	68f8      	ldr	r0, [r7, #12]
 800b9f8:	f001 f824 	bl	800ca44 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b9fc:	68f8      	ldr	r0, [r7, #12]
 800b9fe:	f000 fe8e 	bl	800c71e <I2C_Flush_TXDR>
 800ba02:	e0ba      	b.n	800bb7a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	09db      	lsrs	r3, r3, #7
 800ba08:	f003 0301 	and.w	r3, r3, #1
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d072      	beq.n	800baf6 <I2C_Master_ISR_DMA+0x150>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	099b      	lsrs	r3, r3, #6
 800ba14:	f003 0301 	and.w	r3, r3, #1
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d06c      	beq.n	800baf6 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba2a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d04e      	beq.n	800bad4 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba42:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	2bff      	cmp	r3, #255	; 0xff
 800ba4c:	d906      	bls.n	800ba5c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	22ff      	movs	r2, #255	; 0xff
 800ba52:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800ba54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ba58:	617b      	str	r3, [r7, #20]
 800ba5a:	e010      	b.n	800ba7e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ba6e:	d003      	beq.n	800ba78 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba74:	617b      	str	r3, [r7, #20]
 800ba76:	e002      	b.n	800ba7e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800ba78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ba7c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba82:	b2da      	uxtb	r2, r3
 800ba84:	8a79      	ldrh	r1, [r7, #18]
 800ba86:	2300      	movs	r3, #0
 800ba88:	9300      	str	r3, [sp, #0]
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	68f8      	ldr	r0, [r7, #12]
 800ba8e:	f000 ffab 	bl	800c9e8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba9c:	1ad3      	subs	r3, r2, r3
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b22      	cmp	r3, #34	; 0x22
 800baae:	d108      	bne.n	800bac2 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800babe:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bac0:	e05b      	b.n	800bb7a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bad0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bad2:	e052      	b.n	800bb7a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bade:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bae2:	d003      	beq.n	800baec <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	f000 fa5d 	bl	800bfa4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800baea:	e046      	b.n	800bb7a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800baec:	2140      	movs	r1, #64	; 0x40
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f000 fd1e 	bl	800c530 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800baf4:	e041      	b.n	800bb7a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	099b      	lsrs	r3, r3, #6
 800bafa:	f003 0301 	and.w	r3, r3, #1
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d029      	beq.n	800bb56 <I2C_Master_ISR_DMA+0x1b0>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	099b      	lsrs	r3, r3, #6
 800bb06:	f003 0301 	and.w	r3, r3, #1
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d023      	beq.n	800bb56 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d119      	bne.n	800bb4c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb26:	d027      	beq.n	800bb78 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bb30:	d108      	bne.n	800bb44 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	685a      	ldr	r2, [r3, #4]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb40:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800bb42:	e019      	b.n	800bb78 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bb44:	68f8      	ldr	r0, [r7, #12]
 800bb46:	f000 fa2d 	bl	800bfa4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800bb4a:	e015      	b.n	800bb78 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bb4c:	2140      	movs	r1, #64	; 0x40
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f000 fcee 	bl	800c530 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bb54:	e010      	b.n	800bb78 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	095b      	lsrs	r3, r3, #5
 800bb5a:	f003 0301 	and.w	r3, r3, #1
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d00b      	beq.n	800bb7a <I2C_Master_ISR_DMA+0x1d4>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	095b      	lsrs	r3, r3, #5
 800bb66:	f003 0301 	and.w	r3, r3, #1
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d005      	beq.n	800bb7a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800bb6e:	68b9      	ldr	r1, [r7, #8]
 800bb70:	68f8      	ldr	r0, [r7, #12]
 800bb72:	f000 fab3 	bl	800c0dc <I2C_ITMasterCplt>
 800bb76:	e000      	b.n	800bb7a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800bb78:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bb82:	2300      	movs	r3, #0
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3718      	adds	r7, #24
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b088      	sub	sp, #32
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb9c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d101      	bne.n	800bbb0 <I2C_Slave_ISR_DMA+0x24>
 800bbac:	2302      	movs	r3, #2
 800bbae:	e0c9      	b.n	800bd44 <I2C_Slave_ISR_DMA+0x1b8>
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	095b      	lsrs	r3, r3, #5
 800bbbc:	f003 0301 	and.w	r3, r3, #1
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d009      	beq.n	800bbd8 <I2C_Slave_ISR_DMA+0x4c>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	095b      	lsrs	r3, r3, #5
 800bbc8:	f003 0301 	and.w	r3, r3, #1
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d003      	beq.n	800bbd8 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800bbd0:	68b9      	ldr	r1, [r7, #8]
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f000 fb4c 	bl	800c270 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	091b      	lsrs	r3, r3, #4
 800bbdc:	f003 0301 	and.w	r3, r3, #1
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	f000 809a 	beq.w	800bd1a <I2C_Slave_ISR_DMA+0x18e>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	091b      	lsrs	r3, r3, #4
 800bbea:	f003 0301 	and.w	r3, r3, #1
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	f000 8093 	beq.w	800bd1a <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	0b9b      	lsrs	r3, r3, #14
 800bbf8:	f003 0301 	and.w	r3, r3, #1
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d105      	bne.n	800bc0c <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	0bdb      	lsrs	r3, r3, #15
 800bc04:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d07f      	beq.n	800bd0c <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00d      	beq.n	800bc30 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	0bdb      	lsrs	r3, r3, #15
 800bc18:	f003 0301 	and.w	r3, r3, #1
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d007      	beq.n	800bc30 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d101      	bne.n	800bc30 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00d      	beq.n	800bc54 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	0b9b      	lsrs	r3, r3, #14
 800bc3c:	f003 0301 	and.w	r3, r3, #1
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d007      	beq.n	800bc54 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d101      	bne.n	800bc54 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800bc50:	2301      	movs	r3, #1
 800bc52:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800bc54:	69fb      	ldr	r3, [r7, #28]
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d128      	bne.n	800bcac <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	2b28      	cmp	r3, #40	; 0x28
 800bc64:	d108      	bne.n	800bc78 <I2C_Slave_ISR_DMA+0xec>
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc6c:	d104      	bne.n	800bc78 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800bc6e:	68b9      	ldr	r1, [r7, #8]
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f000 fc07 	bl	800c484 <I2C_ITListenCplt>
 800bc76:	e048      	b.n	800bd0a <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	2b29      	cmp	r3, #41	; 0x29
 800bc82:	d10e      	bne.n	800bca2 <I2C_Slave_ISR_DMA+0x116>
 800bc84:	69bb      	ldr	r3, [r7, #24]
 800bc86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bc8a:	d00a      	beq.n	800bca2 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2210      	movs	r2, #16
 800bc92:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f000 fd42 	bl	800c71e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f000 f9bf 	bl	800c01e <I2C_ITSlaveSeqCplt>
 800bca0:	e033      	b.n	800bd0a <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2210      	movs	r2, #16
 800bca8:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800bcaa:	e034      	b.n	800bd16 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2210      	movs	r2, #16
 800bcb2:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcb8:	f043 0204 	orr.w	r2, r3, #4
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcc6:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800bcc8:	69bb      	ldr	r3, [r7, #24]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d003      	beq.n	800bcd6 <I2C_Slave_ISR_DMA+0x14a>
 800bcce:	69bb      	ldr	r3, [r7, #24]
 800bcd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bcd4:	d11f      	bne.n	800bd16 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
 800bcd8:	2b21      	cmp	r3, #33	; 0x21
 800bcda:	d002      	beq.n	800bce2 <I2C_Slave_ISR_DMA+0x156>
 800bcdc:	7dfb      	ldrb	r3, [r7, #23]
 800bcde:	2b29      	cmp	r3, #41	; 0x29
 800bce0:	d103      	bne.n	800bcea <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2221      	movs	r2, #33	; 0x21
 800bce6:	631a      	str	r2, [r3, #48]	; 0x30
 800bce8:	e008      	b.n	800bcfc <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800bcea:	7dfb      	ldrb	r3, [r7, #23]
 800bcec:	2b22      	cmp	r3, #34	; 0x22
 800bcee:	d002      	beq.n	800bcf6 <I2C_Slave_ISR_DMA+0x16a>
 800bcf0:	7dfb      	ldrb	r3, [r7, #23]
 800bcf2:	2b2a      	cmp	r3, #42	; 0x2a
 800bcf4:	d102      	bne.n	800bcfc <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2222      	movs	r2, #34	; 0x22
 800bcfa:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd00:	4619      	mov	r1, r3
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f000 fc14 	bl	800c530 <I2C_ITError>
      if (treatdmanack == 1U)
 800bd08:	e005      	b.n	800bd16 <I2C_Slave_ISR_DMA+0x18a>
 800bd0a:	e004      	b.n	800bd16 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2210      	movs	r2, #16
 800bd12:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800bd14:	e011      	b.n	800bd3a <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800bd16:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800bd18:	e00f      	b.n	800bd3a <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	08db      	lsrs	r3, r3, #3
 800bd1e:	f003 0301 	and.w	r3, r3, #1
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d009      	beq.n	800bd3a <I2C_Slave_ISR_DMA+0x1ae>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	08db      	lsrs	r3, r3, #3
 800bd2a:	f003 0301 	and.w	r3, r3, #1
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d003      	beq.n	800bd3a <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800bd32:	68b9      	ldr	r1, [r7, #8]
 800bd34:	68f8      	ldr	r0, [r7, #12]
 800bd36:	f000 f8b1 	bl	800be9c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3720      	adds	r7, #32
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b086      	sub	sp, #24
 800bd50:	af02      	add	r7, sp, #8
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	4608      	mov	r0, r1
 800bd56:	4611      	mov	r1, r2
 800bd58:	461a      	mov	r2, r3
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	817b      	strh	r3, [r7, #10]
 800bd5e:	460b      	mov	r3, r1
 800bd60:	813b      	strh	r3, [r7, #8]
 800bd62:	4613      	mov	r3, r2
 800bd64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bd66:	88fb      	ldrh	r3, [r7, #6]
 800bd68:	b2da      	uxtb	r2, r3
 800bd6a:	8979      	ldrh	r1, [r7, #10]
 800bd6c:	4b20      	ldr	r3, [pc, #128]	; (800bdf0 <I2C_RequestMemoryWrite+0xa4>)
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bd74:	68f8      	ldr	r0, [r7, #12]
 800bd76:	f000 fe37 	bl	800c9e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd7a:	69fa      	ldr	r2, [r7, #28]
 800bd7c:	69b9      	ldr	r1, [r7, #24]
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f000 fd4f 	bl	800c822 <I2C_WaitOnTXISFlagUntilTimeout>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d001      	beq.n	800bd8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e02c      	b.n	800bde8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bd8e:	88fb      	ldrh	r3, [r7, #6]
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d105      	bne.n	800bda0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd94:	893b      	ldrh	r3, [r7, #8]
 800bd96:	b2da      	uxtb	r2, r3
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	629a      	str	r2, [r3, #40]	; 0x28
 800bd9e:	e015      	b.n	800bdcc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bda0:	893b      	ldrh	r3, [r7, #8]
 800bda2:	0a1b      	lsrs	r3, r3, #8
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	b2da      	uxtb	r2, r3
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bdae:	69fa      	ldr	r2, [r7, #28]
 800bdb0:	69b9      	ldr	r1, [r7, #24]
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f000 fd35 	bl	800c822 <I2C_WaitOnTXISFlagUntilTimeout>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d001      	beq.n	800bdc2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e012      	b.n	800bde8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bdc2:	893b      	ldrh	r3, [r7, #8]
 800bdc4:	b2da      	uxtb	r2, r3
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	69bb      	ldr	r3, [r7, #24]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	2180      	movs	r1, #128	; 0x80
 800bdd6:	68f8      	ldr	r0, [r7, #12]
 800bdd8:	f000 fce3 	bl	800c7a2 <I2C_WaitOnFlagUntilTimeout>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d001      	beq.n	800bde6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800bde2:	2301      	movs	r3, #1
 800bde4:	e000      	b.n	800bde8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800bde6:	2300      	movs	r3, #0
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3710      	adds	r7, #16
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	80002000 	.word	0x80002000

0800bdf4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b086      	sub	sp, #24
 800bdf8:	af02      	add	r7, sp, #8
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	4608      	mov	r0, r1
 800bdfe:	4611      	mov	r1, r2
 800be00:	461a      	mov	r2, r3
 800be02:	4603      	mov	r3, r0
 800be04:	817b      	strh	r3, [r7, #10]
 800be06:	460b      	mov	r3, r1
 800be08:	813b      	strh	r3, [r7, #8]
 800be0a:	4613      	mov	r3, r2
 800be0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800be0e:	88fb      	ldrh	r3, [r7, #6]
 800be10:	b2da      	uxtb	r2, r3
 800be12:	8979      	ldrh	r1, [r7, #10]
 800be14:	4b20      	ldr	r3, [pc, #128]	; (800be98 <I2C_RequestMemoryRead+0xa4>)
 800be16:	9300      	str	r3, [sp, #0]
 800be18:	2300      	movs	r3, #0
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f000 fde4 	bl	800c9e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be20:	69fa      	ldr	r2, [r7, #28]
 800be22:	69b9      	ldr	r1, [r7, #24]
 800be24:	68f8      	ldr	r0, [r7, #12]
 800be26:	f000 fcfc 	bl	800c822 <I2C_WaitOnTXISFlagUntilTimeout>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d001      	beq.n	800be34 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800be30:	2301      	movs	r3, #1
 800be32:	e02c      	b.n	800be8e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800be34:	88fb      	ldrh	r3, [r7, #6]
 800be36:	2b01      	cmp	r3, #1
 800be38:	d105      	bne.n	800be46 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800be3a:	893b      	ldrh	r3, [r7, #8]
 800be3c:	b2da      	uxtb	r2, r3
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	629a      	str	r2, [r3, #40]	; 0x28
 800be44:	e015      	b.n	800be72 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800be46:	893b      	ldrh	r3, [r7, #8]
 800be48:	0a1b      	lsrs	r3, r3, #8
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	b2da      	uxtb	r2, r3
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be54:	69fa      	ldr	r2, [r7, #28]
 800be56:	69b9      	ldr	r1, [r7, #24]
 800be58:	68f8      	ldr	r0, [r7, #12]
 800be5a:	f000 fce2 	bl	800c822 <I2C_WaitOnTXISFlagUntilTimeout>
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d001      	beq.n	800be68 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800be64:	2301      	movs	r3, #1
 800be66:	e012      	b.n	800be8e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800be68:	893b      	ldrh	r3, [r7, #8]
 800be6a:	b2da      	uxtb	r2, r3
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800be72:	69fb      	ldr	r3, [r7, #28]
 800be74:	9300      	str	r3, [sp, #0]
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	2200      	movs	r2, #0
 800be7a:	2140      	movs	r1, #64	; 0x40
 800be7c:	68f8      	ldr	r0, [r7, #12]
 800be7e:	f000 fc90 	bl	800c7a2 <I2C_WaitOnFlagUntilTimeout>
 800be82:	4603      	mov	r3, r0
 800be84:	2b00      	cmp	r3, #0
 800be86:	d001      	beq.n	800be8c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800be88:	2301      	movs	r3, #1
 800be8a:	e000      	b.n	800be8e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800be8c:	2300      	movs	r3, #0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	80002000 	.word	0x80002000

0800be9c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800beac:	b2db      	uxtb	r3, r3
 800beae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800beb2:	2b28      	cmp	r3, #40	; 0x28
 800beb4:	d16a      	bne.n	800bf8c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	699b      	ldr	r3, [r3, #24]
 800bebc:	0c1b      	lsrs	r3, r3, #16
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	f003 0301 	and.w	r3, r3, #1
 800bec4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	0c1b      	lsrs	r3, r3, #16
 800bece:	b29b      	uxth	r3, r3
 800bed0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800bed4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	b29b      	uxth	r3, r3
 800bede:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bee2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	b29b      	uxth	r3, r3
 800beec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800bef0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	2b02      	cmp	r3, #2
 800bef8:	d138      	bne.n	800bf6c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800befa:	897b      	ldrh	r3, [r7, #10]
 800befc:	09db      	lsrs	r3, r3, #7
 800befe:	b29a      	uxth	r2, r3
 800bf00:	89bb      	ldrh	r3, [r7, #12]
 800bf02:	4053      	eors	r3, r2
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	f003 0306 	and.w	r3, r3, #6
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d11c      	bne.n	800bf48 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800bf0e:	897b      	ldrh	r3, [r7, #10]
 800bf10:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf16:	1c5a      	adds	r2, r3, #1
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d13b      	bne.n	800bf9c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	2208      	movs	r2, #8
 800bf30:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bf3a:	89ba      	ldrh	r2, [r7, #12]
 800bf3c:	7bfb      	ldrb	r3, [r7, #15]
 800bf3e:	4619      	mov	r1, r3
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f7ff facb 	bl	800b4dc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800bf46:	e029      	b.n	800bf9c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800bf48:	893b      	ldrh	r3, [r7, #8]
 800bf4a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800bf4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 fddb 	bl	800cb0c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bf5e:	89ba      	ldrh	r2, [r7, #12]
 800bf60:	7bfb      	ldrb	r3, [r7, #15]
 800bf62:	4619      	mov	r1, r3
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f7ff fab9 	bl	800b4dc <HAL_I2C_AddrCallback>
}
 800bf6a:	e017      	b.n	800bf9c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800bf6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fdcb 	bl	800cb0c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bf7e:	89ba      	ldrh	r2, [r7, #12]
 800bf80:	7bfb      	ldrb	r3, [r7, #15]
 800bf82:	4619      	mov	r1, r3
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f7ff faa9 	bl	800b4dc <HAL_I2C_AddrCallback>
}
 800bf8a:	e007      	b.n	800bf9c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	2208      	movs	r2, #8
 800bf92:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800bf9c:	bf00      	nop
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	2b21      	cmp	r3, #33	; 0x21
 800bfbe:	d115      	bne.n	800bfec <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2220      	movs	r2, #32
 800bfc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2211      	movs	r2, #17
 800bfcc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bfd4:	2101      	movs	r1, #1
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 fd98 	bl	800cb0c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f7fb fe61 	bl	8007cac <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bfea:	e014      	b.n	800c016 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2220      	movs	r2, #32
 800bff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2212      	movs	r2, #18
 800bff8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c000:	2102      	movs	r1, #2
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 fd82 	bl	800cb0c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f7fb fe2d 	bl	8007c70 <HAL_I2C_MasterRxCpltCallback>
}
 800c016:	bf00      	nop
 800c018:	3708      	adds	r7, #8
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b084      	sub	sp, #16
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2200      	movs	r2, #0
 800c032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	0b9b      	lsrs	r3, r3, #14
 800c03a:	f003 0301 	and.w	r3, r3, #1
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d008      	beq.n	800c054 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c050:	601a      	str	r2, [r3, #0]
 800c052:	e00d      	b.n	800c070 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	0bdb      	lsrs	r3, r3, #15
 800c058:	f003 0301 	and.w	r3, r3, #1
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d007      	beq.n	800c070 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c06e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c076:	b2db      	uxtb	r3, r3
 800c078:	2b29      	cmp	r3, #41	; 0x29
 800c07a:	d112      	bne.n	800c0a2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2228      	movs	r2, #40	; 0x28
 800c080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2221      	movs	r2, #33	; 0x21
 800c088:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c08a:	2101      	movs	r1, #1
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 fd3d 	bl	800cb0c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2200      	movs	r2, #0
 800c096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f7ff fa0a 	bl	800b4b4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c0a0:	e017      	b.n	800c0d2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c0ac:	d111      	bne.n	800c0d2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2228      	movs	r2, #40	; 0x28
 800c0b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2222      	movs	r2, #34	; 0x22
 800c0ba:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c0bc:	2102      	movs	r1, #2
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 fd24 	bl	800cb0c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f7ff f9fb 	bl	800b4c8 <HAL_I2C_SlaveRxCpltCallback>
}
 800c0d2:	bf00      	nop
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
	...

0800c0dc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b086      	sub	sp, #24
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2220      	movs	r2, #32
 800c0f0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	2b21      	cmp	r3, #33	; 0x21
 800c0fc:	d107      	bne.n	800c10e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c0fe:	2101      	movs	r1, #1
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 fd03 	bl	800cb0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2211      	movs	r2, #17
 800c10a:	631a      	str	r2, [r3, #48]	; 0x30
 800c10c:	e00c      	b.n	800c128 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c114:	b2db      	uxtb	r3, r3
 800c116:	2b22      	cmp	r3, #34	; 0x22
 800c118:	d106      	bne.n	800c128 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c11a:	2102      	movs	r1, #2
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 fcf5 	bl	800cb0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2212      	movs	r2, #18
 800c126:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	6859      	ldr	r1, [r3, #4]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	4b4d      	ldr	r3, [pc, #308]	; (800c268 <I2C_ITMasterCplt+0x18c>)
 800c134:	400b      	ands	r3, r1
 800c136:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4a4a      	ldr	r2, [pc, #296]	; (800c26c <I2C_ITMasterCplt+0x190>)
 800c142:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	091b      	lsrs	r3, r3, #4
 800c148:	f003 0301 	and.w	r3, r3, #1
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d009      	beq.n	800c164 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2210      	movs	r2, #16
 800c156:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c15c:	f043 0204 	orr.w	r2, r3, #4
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	2b60      	cmp	r3, #96	; 0x60
 800c16e:	d10b      	bne.n	800c188 <I2C_ITMasterCplt+0xac>
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	089b      	lsrs	r3, r3, #2
 800c174:	f003 0301 	and.w	r3, r3, #1
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d005      	beq.n	800c188 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c182:	b2db      	uxtb	r3, r3
 800c184:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800c186:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fac8 	bl	800c71e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c192:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	2b60      	cmp	r3, #96	; 0x60
 800c19e:	d002      	beq.n	800c1a6 <I2C_ITMasterCplt+0xca>
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d006      	beq.n	800c1b4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 f9bf 	bl	800c530 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c1b2:	e054      	b.n	800c25e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	2b21      	cmp	r3, #33	; 0x21
 800c1be:	d124      	bne.n	800c20a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2220      	movs	r2, #32
 800c1c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	2b40      	cmp	r3, #64	; 0x40
 800c1d8:	d10b      	bne.n	800c1f2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f7fb fd2e 	bl	8007c4c <HAL_I2C_MemTxCpltCallback>
}
 800c1f0:	e035      	b.n	800c25e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f7fb fd52 	bl	8007cac <HAL_I2C_MasterTxCpltCallback>
}
 800c208:	e029      	b.n	800c25e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c210:	b2db      	uxtb	r3, r3
 800c212:	2b22      	cmp	r3, #34	; 0x22
 800c214:	d123      	bne.n	800c25e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2220      	movs	r2, #32
 800c21a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	2b40      	cmp	r3, #64	; 0x40
 800c22e:	d10b      	bne.n	800c248 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f7fb fcf1 	bl	8007c28 <HAL_I2C_MemRxCpltCallback>
}
 800c246:	e00a      	b.n	800c25e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f7fb fd09 	bl	8007c70 <HAL_I2C_MasterRxCpltCallback>
}
 800c25e:	bf00      	nop
 800c260:	3718      	adds	r7, #24
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	fe00e800 	.word	0xfe00e800
 800c26c:	ffff0000 	.word	0xffff0000

0800c270 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c28c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2220      	movs	r2, #32
 800c294:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c296:	7bfb      	ldrb	r3, [r7, #15]
 800c298:	2b21      	cmp	r3, #33	; 0x21
 800c29a:	d002      	beq.n	800c2a2 <I2C_ITSlaveCplt+0x32>
 800c29c:	7bfb      	ldrb	r3, [r7, #15]
 800c29e:	2b29      	cmp	r3, #41	; 0x29
 800c2a0:	d108      	bne.n	800c2b4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800c2a2:	f248 0101 	movw	r1, #32769	; 0x8001
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 fc30 	bl	800cb0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2221      	movs	r2, #33	; 0x21
 800c2b0:	631a      	str	r2, [r3, #48]	; 0x30
 800c2b2:	e00d      	b.n	800c2d0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c2b4:	7bfb      	ldrb	r3, [r7, #15]
 800c2b6:	2b22      	cmp	r3, #34	; 0x22
 800c2b8:	d002      	beq.n	800c2c0 <I2C_ITSlaveCplt+0x50>
 800c2ba:	7bfb      	ldrb	r3, [r7, #15]
 800c2bc:	2b2a      	cmp	r3, #42	; 0x2a
 800c2be:	d107      	bne.n	800c2d0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800c2c0:	f248 0102 	movw	r1, #32770	; 0x8002
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 fc21 	bl	800cb0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2222      	movs	r2, #34	; 0x22
 800c2ce:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	685a      	ldr	r2, [r3, #4]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c2de:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	6859      	ldr	r1, [r3, #4]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	4b64      	ldr	r3, [pc, #400]	; (800c47c <I2C_ITSlaveCplt+0x20c>)
 800c2ec:	400b      	ands	r3, r1
 800c2ee:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fa14 	bl	800c71e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	0b9b      	lsrs	r3, r3, #14
 800c2fa:	f003 0301 	and.w	r3, r3, #1
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d013      	beq.n	800c32a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	681a      	ldr	r2, [r3, #0]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c310:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c316:	2b00      	cmp	r3, #0
 800c318:	d020      	beq.n	800c35c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	b29a      	uxth	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c328:	e018      	b.n	800c35c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	0bdb      	lsrs	r3, r3, #15
 800c32e:	f003 0301 	and.w	r3, r3, #1
 800c332:	2b00      	cmp	r3, #0
 800c334:	d012      	beq.n	800c35c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c344:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d006      	beq.n	800c35c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	b29a      	uxth	r2, r3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	089b      	lsrs	r3, r3, #2
 800c360:	f003 0301 	and.w	r3, r3, #1
 800c364:	2b00      	cmp	r3, #0
 800c366:	d020      	beq.n	800c3aa <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	f023 0304 	bic.w	r3, r3, #4
 800c36e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c37a:	b2d2      	uxtb	r2, r2
 800c37c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c382:	1c5a      	adds	r2, r3, #1
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00c      	beq.n	800c3aa <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c394:	3b01      	subs	r3, #1
 800c396:	b29a      	uxth	r2, r3
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3a0:	b29b      	uxth	r3, r3
 800c3a2:	3b01      	subs	r3, #1
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d005      	beq.n	800c3c0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3b8:	f043 0204 	orr.w	r2, r3, #4
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d010      	beq.n	800c3f8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3da:	4619      	mov	r1, r3
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 f8a7 	bl	800c530 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	2b28      	cmp	r3, #40	; 0x28
 800c3ec:	d141      	bne.n	800c472 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800c3ee:	6979      	ldr	r1, [r7, #20]
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 f847 	bl	800c484 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c3f6:	e03c      	b.n	800c472 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c400:	d014      	beq.n	800c42c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f7ff fe0b 	bl	800c01e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	4a1d      	ldr	r2, [pc, #116]	; (800c480 <I2C_ITSlaveCplt+0x210>)
 800c40c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2220      	movs	r2, #32
 800c412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2200      	movs	r2, #0
 800c420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f7ff f867 	bl	800b4f8 <HAL_I2C_ListenCpltCallback>
}
 800c42a:	e022      	b.n	800c472 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c432:	b2db      	uxtb	r3, r3
 800c434:	2b22      	cmp	r3, #34	; 0x22
 800c436:	d10e      	bne.n	800c456 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2220      	movs	r2, #32
 800c43c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2200      	movs	r2, #0
 800c44a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f7ff f83a 	bl	800b4c8 <HAL_I2C_SlaveRxCpltCallback>
}
 800c454:	e00d      	b.n	800c472 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2220      	movs	r2, #32
 800c45a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f7ff f821 	bl	800b4b4 <HAL_I2C_SlaveTxCpltCallback>
}
 800c472:	bf00      	nop
 800c474:	3718      	adds	r7, #24
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	fe00e800 	.word	0xfe00e800
 800c480:	ffff0000 	.word	0xffff0000

0800c484 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a26      	ldr	r2, [pc, #152]	; (800c52c <I2C_ITListenCplt+0xa8>)
 800c492:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2200      	movs	r2, #0
 800c498:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2220      	movs	r2, #32
 800c49e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	089b      	lsrs	r3, r3, #2
 800c4b4:	f003 0301 	and.w	r3, r3, #1
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d022      	beq.n	800c502 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c6:	b2d2      	uxtb	r2, r2
 800c4c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ce:	1c5a      	adds	r2, r3, #1
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d012      	beq.n	800c502 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4e0:	3b01      	subs	r3, #1
 800c4e2:	b29a      	uxth	r2, r3
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	3b01      	subs	r3, #1
 800c4f0:	b29a      	uxth	r2, r3
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4fa:	f043 0204 	orr.w	r2, r3, #4
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c502:	f248 0103 	movw	r1, #32771	; 0x8003
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fb00 	bl	800cb0c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2210      	movs	r2, #16
 800c512:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2200      	movs	r2, #0
 800c518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f7fe ffeb 	bl	800b4f8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800c522:	bf00      	nop
 800c524:	3708      	adds	r7, #8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	ffff0000 	.word	0xffff0000

0800c530 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2200      	movs	r2, #0
 800c546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4a5d      	ldr	r2, [pc, #372]	; (800c6c4 <I2C_ITError+0x194>)
 800c54e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2200      	movs	r2, #0
 800c554:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	431a      	orrs	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800c562:	7bfb      	ldrb	r3, [r7, #15]
 800c564:	2b28      	cmp	r3, #40	; 0x28
 800c566:	d005      	beq.n	800c574 <I2C_ITError+0x44>
 800c568:	7bfb      	ldrb	r3, [r7, #15]
 800c56a:	2b29      	cmp	r3, #41	; 0x29
 800c56c:	d002      	beq.n	800c574 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800c56e:	7bfb      	ldrb	r3, [r7, #15]
 800c570:	2b2a      	cmp	r3, #42	; 0x2a
 800c572:	d10b      	bne.n	800c58c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c574:	2103      	movs	r1, #3
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 fac8 	bl	800cb0c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2228      	movs	r2, #40	; 0x28
 800c580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	4a50      	ldr	r2, [pc, #320]	; (800c6c8 <I2C_ITError+0x198>)
 800c588:	635a      	str	r2, [r3, #52]	; 0x34
 800c58a:	e011      	b.n	800c5b0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c58c:	f248 0103 	movw	r1, #32771	; 0x8003
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 fabb 	bl	800cb0c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c59c:	b2db      	uxtb	r3, r3
 800c59e:	2b60      	cmp	r3, #96	; 0x60
 800c5a0:	d003      	beq.n	800c5aa <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2220      	movs	r2, #32
 800c5a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5b4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d039      	beq.n	800c632 <I2C_ITError+0x102>
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	2b11      	cmp	r3, #17
 800c5c2:	d002      	beq.n	800c5ca <I2C_ITError+0x9a>
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	2b21      	cmp	r3, #33	; 0x21
 800c5c8:	d133      	bne.n	800c632 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c5d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5d8:	d107      	bne.n	800c5ea <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c5e8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7fe f8be 	bl	800a770 <HAL_DMA_GetState>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	d017      	beq.n	800c62a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5fe:	4a33      	ldr	r2, [pc, #204]	; (800c6cc <I2C_ITError+0x19c>)
 800c600:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2200      	movs	r2, #0
 800c606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fd ff02 	bl	800a418 <HAL_DMA_Abort_IT>
 800c614:	4603      	mov	r3, r0
 800c616:	2b00      	cmp	r3, #0
 800c618:	d04d      	beq.n	800c6b6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c61e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c624:	4610      	mov	r0, r2
 800c626:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c628:	e045      	b.n	800c6b6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 f850 	bl	800c6d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c630:	e041      	b.n	800c6b6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c636:	2b00      	cmp	r3, #0
 800c638:	d039      	beq.n	800c6ae <I2C_ITError+0x17e>
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	2b12      	cmp	r3, #18
 800c63e:	d002      	beq.n	800c646 <I2C_ITError+0x116>
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	2b22      	cmp	r3, #34	; 0x22
 800c644:	d133      	bne.n	800c6ae <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c654:	d107      	bne.n	800c666 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c664:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7fe f880 	bl	800a770 <HAL_DMA_GetState>
 800c670:	4603      	mov	r3, r0
 800c672:	2b01      	cmp	r3, #1
 800c674:	d017      	beq.n	800c6a6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c67a:	4a14      	ldr	r2, [pc, #80]	; (800c6cc <I2C_ITError+0x19c>)
 800c67c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2200      	movs	r2, #0
 800c682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7fd fec4 	bl	800a418 <HAL_DMA_Abort_IT>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d011      	beq.n	800c6ba <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c69a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c6a0:	4610      	mov	r0, r2
 800c6a2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c6a4:	e009      	b.n	800c6ba <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 f812 	bl	800c6d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c6ac:	e005      	b.n	800c6ba <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 f80e 	bl	800c6d0 <I2C_TreatErrorCallback>
  }
}
 800c6b4:	e002      	b.n	800c6bc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c6b6:	bf00      	nop
 800c6b8:	e000      	b.n	800c6bc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c6ba:	bf00      	nop
}
 800c6bc:	bf00      	nop
 800c6be:	3710      	adds	r7, #16
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	ffff0000 	.word	0xffff0000
 800c6c8:	0800b7a1 	.word	0x0800b7a1
 800c6cc:	0800c767 	.word	0x0800c767

0800c6d0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	2b60      	cmp	r3, #96	; 0x60
 800c6e2:	d10e      	bne.n	800c702 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2220      	movs	r2, #32
 800c6e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f7fe ff10 	bl	800b520 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c700:	e009      	b.n	800c716 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f7fe fefb 	bl	800b50c <HAL_I2C_ErrorCallback>
}
 800c716:	bf00      	nop
 800c718:	3708      	adds	r7, #8
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}

0800c71e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c71e:	b480      	push	{r7}
 800c720:	b083      	sub	sp, #12
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	699b      	ldr	r3, [r3, #24]
 800c72c:	f003 0302 	and.w	r3, r3, #2
 800c730:	2b02      	cmp	r3, #2
 800c732:	d103      	bne.n	800c73c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2200      	movs	r2, #0
 800c73a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	699b      	ldr	r3, [r3, #24]
 800c742:	f003 0301 	and.w	r3, r3, #1
 800c746:	2b01      	cmp	r3, #1
 800c748:	d007      	beq.n	800c75a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	699a      	ldr	r2, [r3, #24]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f042 0201 	orr.w	r2, r2, #1
 800c758:	619a      	str	r2, [r3, #24]
  }
}
 800c75a:	bf00      	nop
 800c75c:	370c      	adds	r7, #12
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr

0800c766 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c766:	b580      	push	{r7, lr}
 800c768:	b084      	sub	sp, #16
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c772:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d003      	beq.n	800c784 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c780:	2200      	movs	r2, #0
 800c782:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d003      	beq.n	800c794 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c790:	2200      	movs	r2, #0
 800c792:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800c794:	68f8      	ldr	r0, [r7, #12]
 800c796:	f7ff ff9b 	bl	800c6d0 <I2C_TreatErrorCallback>
}
 800c79a:	bf00      	nop
 800c79c:	3710      	adds	r7, #16
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}

0800c7a2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b084      	sub	sp, #16
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	60f8      	str	r0, [r7, #12]
 800c7aa:	60b9      	str	r1, [r7, #8]
 800c7ac:	603b      	str	r3, [r7, #0]
 800c7ae:	4613      	mov	r3, r2
 800c7b0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c7b2:	e022      	b.n	800c7fa <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7ba:	d01e      	beq.n	800c7fa <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7bc:	f7fc fce4 	bl	8009188 <HAL_GetTick>
 800c7c0:	4602      	mov	r2, r0
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	1ad3      	subs	r3, r2, r3
 800c7c6:	683a      	ldr	r2, [r7, #0]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d302      	bcc.n	800c7d2 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d113      	bne.n	800c7fa <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7d6:	f043 0220 	orr.w	r2, r3, #32
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2220      	movs	r2, #32
 800c7e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e00f      	b.n	800c81a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	699a      	ldr	r2, [r3, #24]
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	4013      	ands	r3, r2
 800c804:	68ba      	ldr	r2, [r7, #8]
 800c806:	429a      	cmp	r2, r3
 800c808:	bf0c      	ite	eq
 800c80a:	2301      	moveq	r3, #1
 800c80c:	2300      	movne	r3, #0
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	461a      	mov	r2, r3
 800c812:	79fb      	ldrb	r3, [r7, #7]
 800c814:	429a      	cmp	r2, r3
 800c816:	d0cd      	beq.n	800c7b4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c818:	2300      	movs	r3, #0
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3710      	adds	r7, #16
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b084      	sub	sp, #16
 800c826:	af00      	add	r7, sp, #0
 800c828:	60f8      	str	r0, [r7, #12]
 800c82a:	60b9      	str	r1, [r7, #8]
 800c82c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c82e:	e02c      	b.n	800c88a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c830:	687a      	ldr	r2, [r7, #4]
 800c832:	68b9      	ldr	r1, [r7, #8]
 800c834:	68f8      	ldr	r0, [r7, #12]
 800c836:	f000 f871 	bl	800c91c <I2C_IsAcknowledgeFailed>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d001      	beq.n	800c844 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c840:	2301      	movs	r3, #1
 800c842:	e02a      	b.n	800c89a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c84a:	d01e      	beq.n	800c88a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c84c:	f7fc fc9c 	bl	8009188 <HAL_GetTick>
 800c850:	4602      	mov	r2, r0
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	1ad3      	subs	r3, r2, r3
 800c856:	68ba      	ldr	r2, [r7, #8]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d302      	bcc.n	800c862 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d113      	bne.n	800c88a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c866:	f043 0220 	orr.w	r2, r3, #32
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2220      	movs	r2, #32
 800c872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2200      	movs	r2, #0
 800c87a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2200      	movs	r2, #0
 800c882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c886:	2301      	movs	r3, #1
 800c888:	e007      	b.n	800c89a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	699b      	ldr	r3, [r3, #24]
 800c890:	f003 0302 	and.w	r3, r3, #2
 800c894:	2b02      	cmp	r3, #2
 800c896:	d1cb      	bne.n	800c830 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b084      	sub	sp, #16
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	60f8      	str	r0, [r7, #12]
 800c8aa:	60b9      	str	r1, [r7, #8]
 800c8ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c8ae:	e028      	b.n	800c902 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	68b9      	ldr	r1, [r7, #8]
 800c8b4:	68f8      	ldr	r0, [r7, #12]
 800c8b6:	f000 f831 	bl	800c91c <I2C_IsAcknowledgeFailed>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d001      	beq.n	800c8c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	e026      	b.n	800c912 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8c4:	f7fc fc60 	bl	8009188 <HAL_GetTick>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	1ad3      	subs	r3, r2, r3
 800c8ce:	68ba      	ldr	r2, [r7, #8]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d302      	bcc.n	800c8da <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d113      	bne.n	800c902 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8de:	f043 0220 	orr.w	r2, r3, #32
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2220      	movs	r2, #32
 800c8ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c8fe:	2301      	movs	r3, #1
 800c900:	e007      	b.n	800c912 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	699b      	ldr	r3, [r3, #24]
 800c908:	f003 0320 	and.w	r3, r3, #32
 800c90c:	2b20      	cmp	r3, #32
 800c90e:	d1cf      	bne.n	800c8b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c910:	2300      	movs	r3, #0
}
 800c912:	4618      	mov	r0, r3
 800c914:	3710      	adds	r7, #16
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
	...

0800c91c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	60f8      	str	r0, [r7, #12]
 800c924:	60b9      	str	r1, [r7, #8]
 800c926:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	699b      	ldr	r3, [r3, #24]
 800c92e:	f003 0310 	and.w	r3, r3, #16
 800c932:	2b10      	cmp	r3, #16
 800c934:	d151      	bne.n	800c9da <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c936:	e022      	b.n	800c97e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c93e:	d01e      	beq.n	800c97e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c940:	f7fc fc22 	bl	8009188 <HAL_GetTick>
 800c944:	4602      	mov	r2, r0
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	1ad3      	subs	r3, r2, r3
 800c94a:	68ba      	ldr	r2, [r7, #8]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d302      	bcc.n	800c956 <I2C_IsAcknowledgeFailed+0x3a>
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d113      	bne.n	800c97e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c95a:	f043 0220 	orr.w	r2, r3, #32
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2220      	movs	r2, #32
 800c966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2200      	movs	r2, #0
 800c96e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2200      	movs	r2, #0
 800c976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800c97a:	2301      	movs	r3, #1
 800c97c:	e02e      	b.n	800c9dc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	699b      	ldr	r3, [r3, #24]
 800c984:	f003 0320 	and.w	r3, r3, #32
 800c988:	2b20      	cmp	r3, #32
 800c98a:	d1d5      	bne.n	800c938 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2210      	movs	r2, #16
 800c992:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	2220      	movs	r2, #32
 800c99a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c99c:	68f8      	ldr	r0, [r7, #12]
 800c99e:	f7ff febe 	bl	800c71e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	6859      	ldr	r1, [r3, #4]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	4b0d      	ldr	r3, [pc, #52]	; (800c9e4 <I2C_IsAcknowledgeFailed+0xc8>)
 800c9ae:	400b      	ands	r3, r1
 800c9b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9b6:	f043 0204 	orr.w	r2, r3, #4
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2220      	movs	r2, #32
 800c9c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	e000      	b.n	800c9dc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800c9da:	2300      	movs	r3, #0
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3710      	adds	r7, #16
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	fe00e800 	.word	0xfe00e800

0800c9e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	607b      	str	r3, [r7, #4]
 800c9f2:	460b      	mov	r3, r1
 800c9f4:	817b      	strh	r3, [r7, #10]
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	685a      	ldr	r2, [r3, #4]
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	0d5b      	lsrs	r3, r3, #21
 800ca04:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ca08:	4b0d      	ldr	r3, [pc, #52]	; (800ca40 <I2C_TransferConfig+0x58>)
 800ca0a:	430b      	orrs	r3, r1
 800ca0c:	43db      	mvns	r3, r3
 800ca0e:	ea02 0103 	and.w	r1, r2, r3
 800ca12:	897b      	ldrh	r3, [r7, #10]
 800ca14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ca18:	7a7b      	ldrb	r3, [r7, #9]
 800ca1a:	041b      	lsls	r3, r3, #16
 800ca1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ca20:	431a      	orrs	r2, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	431a      	orrs	r2, r3
 800ca26:	69bb      	ldr	r3, [r7, #24]
 800ca28:	431a      	orrs	r2, r3
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	430a      	orrs	r2, r1
 800ca30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800ca32:	bf00      	nop
 800ca34:	3714      	adds	r7, #20
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr
 800ca3e:	bf00      	nop
 800ca40:	03ff63ff 	.word	0x03ff63ff

0800ca44 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b085      	sub	sp, #20
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800ca50:	2300      	movs	r3, #0
 800ca52:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca58:	4a2a      	ldr	r2, [pc, #168]	; (800cb04 <I2C_Enable_IRQ+0xc0>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d004      	beq.n	800ca68 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800ca62:	4a29      	ldr	r2, [pc, #164]	; (800cb08 <I2C_Enable_IRQ+0xc4>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d11d      	bne.n	800caa4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ca68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	da03      	bge.n	800ca78 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800ca76:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ca78:	887b      	ldrh	r3, [r7, #2]
 800ca7a:	2b10      	cmp	r3, #16
 800ca7c:	d103      	bne.n	800ca86 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800ca84:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ca86:	887b      	ldrh	r3, [r7, #2]
 800ca88:	2b20      	cmp	r3, #32
 800ca8a:	d103      	bne.n	800ca94 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ca92:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ca94:	887b      	ldrh	r3, [r7, #2]
 800ca96:	2b40      	cmp	r3, #64	; 0x40
 800ca98:	d125      	bne.n	800cae6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caa0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800caa2:	e020      	b.n	800cae6 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800caa4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	da03      	bge.n	800cab4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800cab2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800cab4:	887b      	ldrh	r3, [r7, #2]
 800cab6:	f003 0301 	and.w	r3, r3, #1
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d003      	beq.n	800cac6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800cac4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800cac6:	887b      	ldrh	r3, [r7, #2]
 800cac8:	f003 0302 	and.w	r3, r3, #2
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d003      	beq.n	800cad8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800cad6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800cad8:	887b      	ldrh	r3, [r7, #2]
 800cada:	2b20      	cmp	r3, #32
 800cadc:	d103      	bne.n	800cae6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f043 0320 	orr.w	r3, r3, #32
 800cae4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	6819      	ldr	r1, [r3, #0]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	430a      	orrs	r2, r1
 800caf4:	601a      	str	r2, [r3, #0]
}
 800caf6:	bf00      	nop
 800caf8:	3714      	adds	r7, #20
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr
 800cb02:	bf00      	nop
 800cb04:	0800b9a7 	.word	0x0800b9a7
 800cb08:	0800bb8d 	.word	0x0800bb8d

0800cb0c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b085      	sub	sp, #20
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	460b      	mov	r3, r1
 800cb16:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800cb1c:	887b      	ldrh	r3, [r7, #2]
 800cb1e:	f003 0301 	and.w	r3, r3, #1
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d00f      	beq.n	800cb46 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800cb2c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cb3a:	2b28      	cmp	r3, #40	; 0x28
 800cb3c:	d003      	beq.n	800cb46 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800cb44:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800cb46:	887b      	ldrh	r3, [r7, #2]
 800cb48:	f003 0302 	and.w	r3, r3, #2
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d00f      	beq.n	800cb70 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800cb56:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cb64:	2b28      	cmp	r3, #40	; 0x28
 800cb66:	d003      	beq.n	800cb70 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800cb6e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800cb70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	da03      	bge.n	800cb80 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800cb7e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800cb80:	887b      	ldrh	r3, [r7, #2]
 800cb82:	2b10      	cmp	r3, #16
 800cb84:	d103      	bne.n	800cb8e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800cb8c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800cb8e:	887b      	ldrh	r3, [r7, #2]
 800cb90:	2b20      	cmp	r3, #32
 800cb92:	d103      	bne.n	800cb9c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f043 0320 	orr.w	r3, r3, #32
 800cb9a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800cb9c:	887b      	ldrh	r3, [r7, #2]
 800cb9e:	2b40      	cmp	r3, #64	; 0x40
 800cba0:	d103      	bne.n	800cbaa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cba8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	6819      	ldr	r1, [r3, #0]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	43da      	mvns	r2, r3
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	400a      	ands	r2, r1
 800cbba:	601a      	str	r2, [r3, #0]
}
 800cbbc:	bf00      	nop
 800cbbe:	3714      	adds	r7, #20
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b083      	sub	sp, #12
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	2b20      	cmp	r3, #32
 800cbdc:	d138      	bne.n	800cc50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d101      	bne.n	800cbec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800cbe8:	2302      	movs	r3, #2
 800cbea:	e032      	b.n	800cc52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2201      	movs	r2, #1
 800cbf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2224      	movs	r2, #36	; 0x24
 800cbf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f022 0201 	bic.w	r2, r2, #1
 800cc0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	681a      	ldr	r2, [r3, #0]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cc1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	6819      	ldr	r1, [r3, #0]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	683a      	ldr	r2, [r7, #0]
 800cc28:	430a      	orrs	r2, r1
 800cc2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f042 0201 	orr.w	r2, r2, #1
 800cc3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2220      	movs	r2, #32
 800cc40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	e000      	b.n	800cc52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cc50:	2302      	movs	r3, #2
  }
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	370c      	adds	r7, #12
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr

0800cc5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800cc5e:	b480      	push	{r7}
 800cc60:	b085      	sub	sp, #20
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
 800cc66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	2b20      	cmp	r3, #32
 800cc72:	d139      	bne.n	800cce8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	d101      	bne.n	800cc82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800cc7e:	2302      	movs	r3, #2
 800cc80:	e033      	b.n	800ccea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2201      	movs	r2, #1
 800cc86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2224      	movs	r2, #36	; 0x24
 800cc8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f022 0201 	bic.w	r2, r2, #1
 800cca0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ccb0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	021b      	lsls	r3, r3, #8
 800ccb6:	68fa      	ldr	r2, [r7, #12]
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f042 0201 	orr.w	r2, r2, #1
 800ccd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2220      	movs	r2, #32
 800ccd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2200      	movs	r2, #0
 800cce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cce4:	2300      	movs	r3, #0
 800cce6:	e000      	b.n	800ccea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800cce8:	2302      	movs	r3, #2
  }
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3714      	adds	r7, #20
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr

0800ccf6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ccf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccf8:	b08f      	sub	sp, #60	; 0x3c
 800ccfa:	af0a      	add	r7, sp, #40	; 0x28
 800ccfc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d101      	bne.n	800cd08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800cd04:	2301      	movs	r3, #1
 800cd06:	e116      	b.n	800cf36 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d106      	bne.n	800cd28 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f00f f97c 	bl	801c020 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2203      	movs	r2, #3
 800cd2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d102      	bne.n	800cd42 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4618      	mov	r0, r3
 800cd48:	f007 fc3d 	bl	80145c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	603b      	str	r3, [r7, #0]
 800cd52:	687e      	ldr	r6, [r7, #4]
 800cd54:	466d      	mov	r5, sp
 800cd56:	f106 0410 	add.w	r4, r6, #16
 800cd5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cd5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cd62:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cd66:	e885 0003 	stmia.w	r5, {r0, r1}
 800cd6a:	1d33      	adds	r3, r6, #4
 800cd6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cd6e:	6838      	ldr	r0, [r7, #0]
 800cd70:	f007 fb18 	bl	80143a4 <USB_CoreInit>
 800cd74:	4603      	mov	r3, r0
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d005      	beq.n	800cd86 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2202      	movs	r2, #2
 800cd7e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800cd82:	2301      	movs	r3, #1
 800cd84:	e0d7      	b.n	800cf36 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	2100      	movs	r1, #0
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f007 fc2b 	bl	80145e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cd92:	2300      	movs	r3, #0
 800cd94:	73fb      	strb	r3, [r7, #15]
 800cd96:	e04a      	b.n	800ce2e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800cd98:	7bfa      	ldrb	r2, [r7, #15]
 800cd9a:	6879      	ldr	r1, [r7, #4]
 800cd9c:	4613      	mov	r3, r2
 800cd9e:	00db      	lsls	r3, r3, #3
 800cda0:	1a9b      	subs	r3, r3, r2
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	440b      	add	r3, r1
 800cda6:	333d      	adds	r3, #61	; 0x3d
 800cda8:	2201      	movs	r2, #1
 800cdaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800cdac:	7bfa      	ldrb	r2, [r7, #15]
 800cdae:	6879      	ldr	r1, [r7, #4]
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	00db      	lsls	r3, r3, #3
 800cdb4:	1a9b      	subs	r3, r3, r2
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	440b      	add	r3, r1
 800cdba:	333c      	adds	r3, #60	; 0x3c
 800cdbc:	7bfa      	ldrb	r2, [r7, #15]
 800cdbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800cdc0:	7bfa      	ldrb	r2, [r7, #15]
 800cdc2:	7bfb      	ldrb	r3, [r7, #15]
 800cdc4:	b298      	uxth	r0, r3
 800cdc6:	6879      	ldr	r1, [r7, #4]
 800cdc8:	4613      	mov	r3, r2
 800cdca:	00db      	lsls	r3, r3, #3
 800cdcc:	1a9b      	subs	r3, r3, r2
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	440b      	add	r3, r1
 800cdd2:	3342      	adds	r3, #66	; 0x42
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800cdd8:	7bfa      	ldrb	r2, [r7, #15]
 800cdda:	6879      	ldr	r1, [r7, #4]
 800cddc:	4613      	mov	r3, r2
 800cdde:	00db      	lsls	r3, r3, #3
 800cde0:	1a9b      	subs	r3, r3, r2
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	440b      	add	r3, r1
 800cde6:	333f      	adds	r3, #63	; 0x3f
 800cde8:	2200      	movs	r2, #0
 800cdea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800cdec:	7bfa      	ldrb	r2, [r7, #15]
 800cdee:	6879      	ldr	r1, [r7, #4]
 800cdf0:	4613      	mov	r3, r2
 800cdf2:	00db      	lsls	r3, r3, #3
 800cdf4:	1a9b      	subs	r3, r3, r2
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	440b      	add	r3, r1
 800cdfa:	3344      	adds	r3, #68	; 0x44
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ce00:	7bfa      	ldrb	r2, [r7, #15]
 800ce02:	6879      	ldr	r1, [r7, #4]
 800ce04:	4613      	mov	r3, r2
 800ce06:	00db      	lsls	r3, r3, #3
 800ce08:	1a9b      	subs	r3, r3, r2
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	440b      	add	r3, r1
 800ce0e:	3348      	adds	r3, #72	; 0x48
 800ce10:	2200      	movs	r2, #0
 800ce12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ce14:	7bfa      	ldrb	r2, [r7, #15]
 800ce16:	6879      	ldr	r1, [r7, #4]
 800ce18:	4613      	mov	r3, r2
 800ce1a:	00db      	lsls	r3, r3, #3
 800ce1c:	1a9b      	subs	r3, r3, r2
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	440b      	add	r3, r1
 800ce22:	3350      	adds	r3, #80	; 0x50
 800ce24:	2200      	movs	r2, #0
 800ce26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ce28:	7bfb      	ldrb	r3, [r7, #15]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	73fb      	strb	r3, [r7, #15]
 800ce2e:	7bfa      	ldrb	r2, [r7, #15]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d3af      	bcc.n	800cd98 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ce38:	2300      	movs	r3, #0
 800ce3a:	73fb      	strb	r3, [r7, #15]
 800ce3c:	e044      	b.n	800cec8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ce3e:	7bfa      	ldrb	r2, [r7, #15]
 800ce40:	6879      	ldr	r1, [r7, #4]
 800ce42:	4613      	mov	r3, r2
 800ce44:	00db      	lsls	r3, r3, #3
 800ce46:	1a9b      	subs	r3, r3, r2
 800ce48:	009b      	lsls	r3, r3, #2
 800ce4a:	440b      	add	r3, r1
 800ce4c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800ce50:	2200      	movs	r2, #0
 800ce52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ce54:	7bfa      	ldrb	r2, [r7, #15]
 800ce56:	6879      	ldr	r1, [r7, #4]
 800ce58:	4613      	mov	r3, r2
 800ce5a:	00db      	lsls	r3, r3, #3
 800ce5c:	1a9b      	subs	r3, r3, r2
 800ce5e:	009b      	lsls	r3, r3, #2
 800ce60:	440b      	add	r3, r1
 800ce62:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800ce66:	7bfa      	ldrb	r2, [r7, #15]
 800ce68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ce6a:	7bfa      	ldrb	r2, [r7, #15]
 800ce6c:	6879      	ldr	r1, [r7, #4]
 800ce6e:	4613      	mov	r3, r2
 800ce70:	00db      	lsls	r3, r3, #3
 800ce72:	1a9b      	subs	r3, r3, r2
 800ce74:	009b      	lsls	r3, r3, #2
 800ce76:	440b      	add	r3, r1
 800ce78:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ce80:	7bfa      	ldrb	r2, [r7, #15]
 800ce82:	6879      	ldr	r1, [r7, #4]
 800ce84:	4613      	mov	r3, r2
 800ce86:	00db      	lsls	r3, r3, #3
 800ce88:	1a9b      	subs	r3, r3, r2
 800ce8a:	009b      	lsls	r3, r3, #2
 800ce8c:	440b      	add	r3, r1
 800ce8e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ce92:	2200      	movs	r2, #0
 800ce94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ce96:	7bfa      	ldrb	r2, [r7, #15]
 800ce98:	6879      	ldr	r1, [r7, #4]
 800ce9a:	4613      	mov	r3, r2
 800ce9c:	00db      	lsls	r3, r3, #3
 800ce9e:	1a9b      	subs	r3, r3, r2
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	440b      	add	r3, r1
 800cea4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cea8:	2200      	movs	r2, #0
 800ceaa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ceac:	7bfa      	ldrb	r2, [r7, #15]
 800ceae:	6879      	ldr	r1, [r7, #4]
 800ceb0:	4613      	mov	r3, r2
 800ceb2:	00db      	lsls	r3, r3, #3
 800ceb4:	1a9b      	subs	r3, r3, r2
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	440b      	add	r3, r1
 800ceba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800cebe:	2200      	movs	r2, #0
 800cec0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cec2:	7bfb      	ldrb	r3, [r7, #15]
 800cec4:	3301      	adds	r3, #1
 800cec6:	73fb      	strb	r3, [r7, #15]
 800cec8:	7bfa      	ldrb	r2, [r7, #15]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	429a      	cmp	r2, r3
 800ced0:	d3b5      	bcc.n	800ce3e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	603b      	str	r3, [r7, #0]
 800ced8:	687e      	ldr	r6, [r7, #4]
 800ceda:	466d      	mov	r5, sp
 800cedc:	f106 0410 	add.w	r4, r6, #16
 800cee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cee2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cee6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cee8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ceec:	e885 0003 	stmia.w	r5, {r0, r1}
 800cef0:	1d33      	adds	r3, r6, #4
 800cef2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cef4:	6838      	ldr	r0, [r7, #0]
 800cef6:	f007 fba1 	bl	801463c <USB_DevInit>
 800cefa:	4603      	mov	r3, r0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d005      	beq.n	800cf0c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2202      	movs	r2, #2
 800cf04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	e014      	b.n	800cf36 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2201      	movs	r2, #1
 800cf18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d102      	bne.n	800cf2a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f001 f8ad 	bl	800e084 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f008 fbf9 	bl	8015726 <USB_DevDisconnect>

  return HAL_OK;
 800cf34:	2300      	movs	r3, #0
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3714      	adds	r7, #20
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cf3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b082      	sub	sp, #8
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d101      	bne.n	800cf54 <HAL_PCD_Start+0x16>
 800cf50:	2302      	movs	r3, #2
 800cf52:	e012      	b.n	800cf7a <HAL_PCD_Start+0x3c>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2201      	movs	r2, #1
 800cf58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4618      	mov	r0, r3
 800cf62:	f007 fb1f 	bl	80145a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f008 fbba 	bl	80156e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3708      	adds	r7, #8
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800cf82:	b590      	push	{r4, r7, lr}
 800cf84:	b08d      	sub	sp, #52	; 0x34
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf90:	6a3b      	ldr	r3, [r7, #32]
 800cf92:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f008 fc78 	bl	801588e <USB_GetMode>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	f040 83ca 	bne.w	800d73a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f008 fbdc 	bl	8015768 <USB_ReadInterrupts>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	f000 83c0 	beq.w	800d738 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f008 fbd3 	bl	8015768 <USB_ReadInterrupts>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	f003 0302 	and.w	r3, r3, #2
 800cfc8:	2b02      	cmp	r3, #2
 800cfca:	d107      	bne.n	800cfdc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	695a      	ldr	r2, [r3, #20]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f002 0202 	and.w	r2, r2, #2
 800cfda:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f008 fbc1 	bl	8015768 <USB_ReadInterrupts>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	f003 0310 	and.w	r3, r3, #16
 800cfec:	2b10      	cmp	r3, #16
 800cfee:	d161      	bne.n	800d0b4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	699a      	ldr	r2, [r3, #24]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f022 0210 	bic.w	r2, r2, #16
 800cffe:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800d000:	6a3b      	ldr	r3, [r7, #32]
 800d002:	6a1b      	ldr	r3, [r3, #32]
 800d004:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800d006:	69bb      	ldr	r3, [r7, #24]
 800d008:	f003 020f 	and.w	r2, r3, #15
 800d00c:	4613      	mov	r3, r2
 800d00e:	00db      	lsls	r3, r3, #3
 800d010:	1a9b      	subs	r3, r3, r2
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	4413      	add	r3, r2
 800d01c:	3304      	adds	r3, #4
 800d01e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800d020:	69bb      	ldr	r3, [r7, #24]
 800d022:	0c5b      	lsrs	r3, r3, #17
 800d024:	f003 030f 	and.w	r3, r3, #15
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d124      	bne.n	800d076 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800d02c:	69ba      	ldr	r2, [r7, #24]
 800d02e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800d032:	4013      	ands	r3, r2
 800d034:	2b00      	cmp	r3, #0
 800d036:	d035      	beq.n	800d0a4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800d03c:	69bb      	ldr	r3, [r7, #24]
 800d03e:	091b      	lsrs	r3, r3, #4
 800d040:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d042:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d046:	b29b      	uxth	r3, r3
 800d048:	461a      	mov	r2, r3
 800d04a:	6a38      	ldr	r0, [r7, #32]
 800d04c:	f008 fa27 	bl	801549e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	68da      	ldr	r2, [r3, #12]
 800d054:	69bb      	ldr	r3, [r7, #24]
 800d056:	091b      	lsrs	r3, r3, #4
 800d058:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d05c:	441a      	add	r2, r3
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	699a      	ldr	r2, [r3, #24]
 800d066:	69bb      	ldr	r3, [r7, #24]
 800d068:	091b      	lsrs	r3, r3, #4
 800d06a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d06e:	441a      	add	r2, r3
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	619a      	str	r2, [r3, #24]
 800d074:	e016      	b.n	800d0a4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	0c5b      	lsrs	r3, r3, #17
 800d07a:	f003 030f 	and.w	r3, r3, #15
 800d07e:	2b06      	cmp	r3, #6
 800d080:	d110      	bne.n	800d0a4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d088:	2208      	movs	r2, #8
 800d08a:	4619      	mov	r1, r3
 800d08c:	6a38      	ldr	r0, [r7, #32]
 800d08e:	f008 fa06 	bl	801549e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	699a      	ldr	r2, [r3, #24]
 800d096:	69bb      	ldr	r3, [r7, #24]
 800d098:	091b      	lsrs	r3, r3, #4
 800d09a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d09e:	441a      	add	r2, r3
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	699a      	ldr	r2, [r3, #24]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f042 0210 	orr.w	r2, r2, #16
 800d0b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f008 fb55 	bl	8015768 <USB_ReadInterrupts>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d0c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d0c8:	d16e      	bne.n	800d1a8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f008 fb5b 	bl	801578e <USB_ReadDevAllOutEpInterrupt>
 800d0d8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800d0da:	e062      	b.n	800d1a2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800d0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0de:	f003 0301 	and.w	r3, r3, #1
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d057      	beq.n	800d196 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ec:	b2d2      	uxtb	r2, r2
 800d0ee:	4611      	mov	r1, r2
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f008 fb80 	bl	80157f6 <USB_ReadDevOutEPInterrupt>
 800d0f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	f003 0301 	and.w	r3, r3, #1
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d00c      	beq.n	800d11c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800d102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d104:	015a      	lsls	r2, r3, #5
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	4413      	add	r3, r2
 800d10a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d10e:	461a      	mov	r2, r3
 800d110:	2301      	movs	r3, #1
 800d112:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800d114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f000 fe0a 	bl	800dd30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	f003 0308 	and.w	r3, r3, #8
 800d122:	2b00      	cmp	r3, #0
 800d124:	d00c      	beq.n	800d140 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800d126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d128:	015a      	lsls	r2, r3, #5
 800d12a:	69fb      	ldr	r3, [r7, #28]
 800d12c:	4413      	add	r3, r2
 800d12e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d132:	461a      	mov	r2, r3
 800d134:	2308      	movs	r3, #8
 800d136:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800d138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f000 ff04 	bl	800df48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	f003 0310 	and.w	r3, r3, #16
 800d146:	2b00      	cmp	r3, #0
 800d148:	d008      	beq.n	800d15c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800d14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14c:	015a      	lsls	r2, r3, #5
 800d14e:	69fb      	ldr	r3, [r7, #28]
 800d150:	4413      	add	r3, r2
 800d152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d156:	461a      	mov	r2, r3
 800d158:	2310      	movs	r3, #16
 800d15a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	f003 0320 	and.w	r3, r3, #32
 800d162:	2b00      	cmp	r3, #0
 800d164:	d008      	beq.n	800d178 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d168:	015a      	lsls	r2, r3, #5
 800d16a:	69fb      	ldr	r3, [r7, #28]
 800d16c:	4413      	add	r3, r2
 800d16e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d172:	461a      	mov	r2, r3
 800d174:	2320      	movs	r3, #32
 800d176:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d009      	beq.n	800d196 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800d182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d184:	015a      	lsls	r2, r3, #5
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	4413      	add	r3, r2
 800d18a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d18e:	461a      	mov	r2, r3
 800d190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d194:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800d196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d198:	3301      	adds	r3, #1
 800d19a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800d19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19e:	085b      	lsrs	r3, r3, #1
 800d1a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800d1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d199      	bne.n	800d0dc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f008 fadb 	bl	8015768 <USB_ReadInterrupts>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d1b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d1bc:	f040 80c0 	bne.w	800d340 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f008 fafc 	bl	80157c2 <USB_ReadDevAllInEpInterrupt>
 800d1ca:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800d1d0:	e0b2      	b.n	800d338 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800d1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d4:	f003 0301 	and.w	r3, r3, #1
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	f000 80a7 	beq.w	800d32c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1e4:	b2d2      	uxtb	r2, r2
 800d1e6:	4611      	mov	r1, r2
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f008 fb22 	bl	8015832 <USB_ReadDevInEPInterrupt>
 800d1ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	f003 0301 	and.w	r3, r3, #1
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d057      	beq.n	800d2aa <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fc:	f003 030f 	and.w	r3, r3, #15
 800d200:	2201      	movs	r2, #1
 800d202:	fa02 f303 	lsl.w	r3, r2, r3
 800d206:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d20e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	43db      	mvns	r3, r3
 800d214:	69f9      	ldr	r1, [r7, #28]
 800d216:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d21a:	4013      	ands	r3, r2
 800d21c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800d21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d220:	015a      	lsls	r2, r3, #5
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	4413      	add	r3, r2
 800d226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d22a:	461a      	mov	r2, r3
 800d22c:	2301      	movs	r3, #1
 800d22e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	691b      	ldr	r3, [r3, #16]
 800d234:	2b01      	cmp	r3, #1
 800d236:	d132      	bne.n	800d29e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800d238:	6879      	ldr	r1, [r7, #4]
 800d23a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d23c:	4613      	mov	r3, r2
 800d23e:	00db      	lsls	r3, r3, #3
 800d240:	1a9b      	subs	r3, r3, r2
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	440b      	add	r3, r1
 800d246:	3348      	adds	r3, #72	; 0x48
 800d248:	6819      	ldr	r1, [r3, #0]
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d24e:	4613      	mov	r3, r2
 800d250:	00db      	lsls	r3, r3, #3
 800d252:	1a9b      	subs	r3, r3, r2
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	4403      	add	r3, r0
 800d258:	3344      	adds	r3, #68	; 0x44
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4419      	add	r1, r3
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d262:	4613      	mov	r3, r2
 800d264:	00db      	lsls	r3, r3, #3
 800d266:	1a9b      	subs	r3, r3, r2
 800d268:	009b      	lsls	r3, r3, #2
 800d26a:	4403      	add	r3, r0
 800d26c:	3348      	adds	r3, #72	; 0x48
 800d26e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800d270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d272:	2b00      	cmp	r3, #0
 800d274:	d113      	bne.n	800d29e <HAL_PCD_IRQHandler+0x31c>
 800d276:	6879      	ldr	r1, [r7, #4]
 800d278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d27a:	4613      	mov	r3, r2
 800d27c:	00db      	lsls	r3, r3, #3
 800d27e:	1a9b      	subs	r3, r3, r2
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	440b      	add	r3, r1
 800d284:	3350      	adds	r3, #80	; 0x50
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d108      	bne.n	800d29e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6818      	ldr	r0, [r3, #0]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d296:	461a      	mov	r2, r3
 800d298:	2101      	movs	r1, #1
 800d29a:	f008 fb2b 	bl	80158f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800d29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a0:	b2db      	uxtb	r3, r3
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f00e ff4c 	bl	801c142 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	f003 0308 	and.w	r3, r3, #8
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d008      	beq.n	800d2c6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800d2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b6:	015a      	lsls	r2, r3, #5
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	2308      	movs	r3, #8
 800d2c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	f003 0310 	and.w	r3, r3, #16
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d008      	beq.n	800d2e2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800d2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d2:	015a      	lsls	r2, r3, #5
 800d2d4:	69fb      	ldr	r3, [r7, #28]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2dc:	461a      	mov	r2, r3
 800d2de:	2310      	movs	r3, #16
 800d2e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d008      	beq.n	800d2fe <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ee:	015a      	lsls	r2, r3, #5
 800d2f0:	69fb      	ldr	r3, [r7, #28]
 800d2f2:	4413      	add	r3, r2
 800d2f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	2340      	movs	r3, #64	; 0x40
 800d2fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	f003 0302 	and.w	r3, r3, #2
 800d304:	2b00      	cmp	r3, #0
 800d306:	d008      	beq.n	800d31a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800d308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30a:	015a      	lsls	r2, r3, #5
 800d30c:	69fb      	ldr	r3, [r7, #28]
 800d30e:	4413      	add	r3, r2
 800d310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d314:	461a      	mov	r2, r3
 800d316:	2302      	movs	r3, #2
 800d318:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d320:	2b00      	cmp	r3, #0
 800d322:	d003      	beq.n	800d32c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800d324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 fc75 	bl	800dc16 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800d32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32e:	3301      	adds	r3, #1
 800d330:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800d332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d334:	085b      	lsrs	r3, r3, #1
 800d336:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800d338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	f47f af49 	bne.w	800d1d2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	4618      	mov	r0, r3
 800d346:	f008 fa0f 	bl	8015768 <USB_ReadInterrupts>
 800d34a:	4603      	mov	r3, r0
 800d34c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d354:	d122      	bne.n	800d39c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d356:	69fb      	ldr	r3, [r7, #28]
 800d358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	69fa      	ldr	r2, [r7, #28]
 800d360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d364:	f023 0301 	bic.w	r3, r3, #1
 800d368:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800d370:	2b01      	cmp	r3, #1
 800d372:	d108      	bne.n	800d386 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2200      	movs	r2, #0
 800d378:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800d37c:	2100      	movs	r1, #0
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f00f f94e 	bl	801c620 <HAL_PCDEx_LPM_Callback>
 800d384:	e002      	b.n	800d38c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f00e ff52 	bl	801c230 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	695a      	ldr	r2, [r3, #20]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800d39a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f008 f9e1 	bl	8015768 <USB_ReadInterrupts>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d3ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d3b0:	d112      	bne.n	800d3d8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800d3b2:	69fb      	ldr	r3, [r7, #28]
 800d3b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	f003 0301 	and.w	r3, r3, #1
 800d3be:	2b01      	cmp	r3, #1
 800d3c0:	d102      	bne.n	800d3c8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f00e ff0e 	bl	801c1e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	695a      	ldr	r2, [r3, #20]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800d3d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f008 f9c3 	bl	8015768 <USB_ReadInterrupts>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d3ec:	d121      	bne.n	800d432 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	695a      	ldr	r2, [r3, #20]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800d3fc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800d404:	2b00      	cmp	r3, #0
 800d406:	d111      	bne.n	800d42c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2201      	movs	r2, #1
 800d40c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d416:	089b      	lsrs	r3, r3, #2
 800d418:	f003 020f 	and.w	r2, r3, #15
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800d422:	2101      	movs	r1, #1
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f00f f8fb 	bl	801c620 <HAL_PCDEx_LPM_Callback>
 800d42a:	e002      	b.n	800d432 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f00e fed9 	bl	801c1e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4618      	mov	r0, r3
 800d438:	f008 f996 	bl	8015768 <USB_ReadInterrupts>
 800d43c:	4603      	mov	r3, r0
 800d43e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d446:	f040 80c7 	bne.w	800d5d8 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d44a:	69fb      	ldr	r3, [r7, #28]
 800d44c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	69fa      	ldr	r2, [r7, #28]
 800d454:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d458:	f023 0301 	bic.w	r3, r3, #1
 800d45c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	2110      	movs	r1, #16
 800d464:	4618      	mov	r0, r3
 800d466:	f007 fa57 	bl	8014918 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d46a:	2300      	movs	r3, #0
 800d46c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d46e:	e056      	b.n	800d51e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800d470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d472:	015a      	lsls	r2, r3, #5
 800d474:	69fb      	ldr	r3, [r7, #28]
 800d476:	4413      	add	r3, r2
 800d478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d47c:	461a      	mov	r2, r3
 800d47e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d482:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d486:	015a      	lsls	r2, r3, #5
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	4413      	add	r3, r2
 800d48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d494:	0151      	lsls	r1, r2, #5
 800d496:	69fa      	ldr	r2, [r7, #28]
 800d498:	440a      	add	r2, r1
 800d49a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d49e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d4a2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a6:	015a      	lsls	r2, r3, #5
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4b4:	0151      	lsls	r1, r2, #5
 800d4b6:	69fa      	ldr	r2, [r7, #28]
 800d4b8:	440a      	add	r2, r1
 800d4ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d4c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800d4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c6:	015a      	lsls	r2, r3, #5
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	4413      	add	r3, r2
 800d4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4d0:	461a      	mov	r2, r3
 800d4d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d4d6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4da:	015a      	lsls	r2, r3, #5
 800d4dc:	69fb      	ldr	r3, [r7, #28]
 800d4de:	4413      	add	r3, r2
 800d4e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4e8:	0151      	lsls	r1, r2, #5
 800d4ea:	69fa      	ldr	r2, [r7, #28]
 800d4ec:	440a      	add	r2, r1
 800d4ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d4f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fa:	015a      	lsls	r2, r3, #5
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	4413      	add	r3, r2
 800d500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d508:	0151      	lsls	r1, r2, #5
 800d50a:	69fa      	ldr	r2, [r7, #28]
 800d50c:	440a      	add	r2, r1
 800d50e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d512:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d516:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51a:	3301      	adds	r3, #1
 800d51c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d524:	429a      	cmp	r2, r3
 800d526:	d3a3      	bcc.n	800d470 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800d528:	69fb      	ldr	r3, [r7, #28]
 800d52a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d52e:	69db      	ldr	r3, [r3, #28]
 800d530:	69fa      	ldr	r2, [r7, #28]
 800d532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d536:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800d53a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d540:	2b00      	cmp	r3, #0
 800d542:	d016      	beq.n	800d572 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800d544:	69fb      	ldr	r3, [r7, #28]
 800d546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d54a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d54e:	69fa      	ldr	r2, [r7, #28]
 800d550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d554:	f043 030b 	orr.w	r3, r3, #11
 800d558:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d564:	69fa      	ldr	r2, [r7, #28]
 800d566:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d56a:	f043 030b 	orr.w	r3, r3, #11
 800d56e:	6453      	str	r3, [r2, #68]	; 0x44
 800d570:	e015      	b.n	800d59e <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d578:	695a      	ldr	r2, [r3, #20]
 800d57a:	69fb      	ldr	r3, [r7, #28]
 800d57c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d580:	4619      	mov	r1, r3
 800d582:	f242 032b 	movw	r3, #8235	; 0x202b
 800d586:	4313      	orrs	r3, r2
 800d588:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800d58a:	69fb      	ldr	r3, [r7, #28]
 800d58c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d590:	691b      	ldr	r3, [r3, #16]
 800d592:	69fa      	ldr	r2, [r7, #28]
 800d594:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d598:	f043 030b 	orr.w	r3, r3, #11
 800d59c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800d59e:	69fb      	ldr	r3, [r7, #28]
 800d5a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	69fa      	ldr	r2, [r7, #28]
 800d5a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d5ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d5b0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6818      	ldr	r0, [r3, #0]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	691b      	ldr	r3, [r3, #16]
 800d5ba:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	f008 f996 	bl	80158f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	695a      	ldr	r2, [r3, #20]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800d5d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f008 f8c3 	bl	8015768 <USB_ReadInterrupts>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d5e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5ec:	d124      	bne.n	800d638 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f008 f95a 	bl	80158ac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f007 f9ec 	bl	80149da <USB_GetDevSpeed>
 800d602:	4603      	mov	r3, r0
 800d604:	461a      	mov	r2, r3
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681c      	ldr	r4, [r3, #0]
 800d60e:	f001 fa53 	bl	800eab8 <HAL_RCC_GetHCLKFreq>
 800d612:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d618:	b2db      	uxtb	r3, r3
 800d61a:	461a      	mov	r2, r3
 800d61c:	4620      	mov	r0, r4
 800d61e:	f006 ff1f 	bl	8014460 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f00e fdb5 	bl	801c192 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	695a      	ldr	r2, [r3, #20]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800d636:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	4618      	mov	r0, r3
 800d63e:	f008 f893 	bl	8015768 <USB_ReadInterrupts>
 800d642:	4603      	mov	r3, r0
 800d644:	f003 0308 	and.w	r3, r3, #8
 800d648:	2b08      	cmp	r3, #8
 800d64a:	d10a      	bne.n	800d662 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f00e fd92 	bl	801c176 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	695a      	ldr	r2, [r3, #20]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f002 0208 	and.w	r2, r2, #8
 800d660:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	4618      	mov	r0, r3
 800d668:	f008 f87e 	bl	8015768 <USB_ReadInterrupts>
 800d66c:	4603      	mov	r3, r0
 800d66e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d676:	d10f      	bne.n	800d698 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800d678:	2300      	movs	r3, #0
 800d67a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800d67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	4619      	mov	r1, r3
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f00e fdf4 	bl	801c270 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	695a      	ldr	r2, [r3, #20]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800d696:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	4618      	mov	r0, r3
 800d69e:	f008 f863 	bl	8015768 <USB_ReadInterrupts>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d6a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d6ac:	d10f      	bne.n	800d6ce <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800d6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b4:	b2db      	uxtb	r3, r3
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f00e fdc7 	bl	801c24c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	695a      	ldr	r2, [r3, #20]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800d6cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f008 f848 	bl	8015768 <USB_ReadInterrupts>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d6de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6e2:	d10a      	bne.n	800d6fa <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f00e fdd5 	bl	801c294 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	695a      	ldr	r2, [r3, #20]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800d6f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	4618      	mov	r0, r3
 800d700:	f008 f832 	bl	8015768 <USB_ReadInterrupts>
 800d704:	4603      	mov	r3, r0
 800d706:	f003 0304 	and.w	r3, r3, #4
 800d70a:	2b04      	cmp	r3, #4
 800d70c:	d115      	bne.n	800d73a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800d716:	69bb      	ldr	r3, [r7, #24]
 800d718:	f003 0304 	and.w	r3, r3, #4
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d002      	beq.n	800d726 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f00e fdc5 	bl	801c2b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	6859      	ldr	r1, [r3, #4]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	69ba      	ldr	r2, [r7, #24]
 800d732:	430a      	orrs	r2, r1
 800d734:	605a      	str	r2, [r3, #4]
 800d736:	e000      	b.n	800d73a <HAL_PCD_IRQHandler+0x7b8>
      return;
 800d738:	bf00      	nop
    }
  }
}
 800d73a:	3734      	adds	r7, #52	; 0x34
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd90      	pop	{r4, r7, pc}

0800d740 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	460b      	mov	r3, r1
 800d74a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d752:	2b01      	cmp	r3, #1
 800d754:	d101      	bne.n	800d75a <HAL_PCD_SetAddress+0x1a>
 800d756:	2302      	movs	r3, #2
 800d758:	e013      	b.n	800d782 <HAL_PCD_SetAddress+0x42>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2201      	movs	r2, #1
 800d75e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	78fa      	ldrb	r2, [r7, #3]
 800d766:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	78fa      	ldrb	r2, [r7, #3]
 800d770:	4611      	mov	r1, r2
 800d772:	4618      	mov	r0, r3
 800d774:	f007 ff90 	bl	8015698 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2200      	movs	r2, #0
 800d77c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d780:	2300      	movs	r3, #0
}
 800d782:	4618      	mov	r0, r3
 800d784:	3708      	adds	r7, #8
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}

0800d78a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800d78a:	b580      	push	{r7, lr}
 800d78c:	b084      	sub	sp, #16
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
 800d792:	4608      	mov	r0, r1
 800d794:	4611      	mov	r1, r2
 800d796:	461a      	mov	r2, r3
 800d798:	4603      	mov	r3, r0
 800d79a:	70fb      	strb	r3, [r7, #3]
 800d79c:	460b      	mov	r3, r1
 800d79e:	803b      	strh	r3, [r7, #0]
 800d7a0:	4613      	mov	r3, r2
 800d7a2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d7a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	da0f      	bge.n	800d7d0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d7b0:	78fb      	ldrb	r3, [r7, #3]
 800d7b2:	f003 020f 	and.w	r2, r3, #15
 800d7b6:	4613      	mov	r3, r2
 800d7b8:	00db      	lsls	r3, r3, #3
 800d7ba:	1a9b      	subs	r3, r3, r2
 800d7bc:	009b      	lsls	r3, r3, #2
 800d7be:	3338      	adds	r3, #56	; 0x38
 800d7c0:	687a      	ldr	r2, [r7, #4]
 800d7c2:	4413      	add	r3, r2
 800d7c4:	3304      	adds	r3, #4
 800d7c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	705a      	strb	r2, [r3, #1]
 800d7ce:	e00f      	b.n	800d7f0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d7d0:	78fb      	ldrb	r3, [r7, #3]
 800d7d2:	f003 020f 	and.w	r2, r3, #15
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	00db      	lsls	r3, r3, #3
 800d7da:	1a9b      	subs	r3, r3, r2
 800d7dc:	009b      	lsls	r3, r3, #2
 800d7de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	4413      	add	r3, r2
 800d7e6:	3304      	adds	r3, #4
 800d7e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d7f0:	78fb      	ldrb	r3, [r7, #3]
 800d7f2:	f003 030f 	and.w	r3, r3, #15
 800d7f6:	b2da      	uxtb	r2, r3
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800d7fc:	883a      	ldrh	r2, [r7, #0]
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	78ba      	ldrb	r2, [r7, #2]
 800d806:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	785b      	ldrb	r3, [r3, #1]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d004      	beq.n	800d81a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	b29a      	uxth	r2, r3
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d81a:	78bb      	ldrb	r3, [r7, #2]
 800d81c:	2b02      	cmp	r3, #2
 800d81e:	d102      	bne.n	800d826 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	2200      	movs	r2, #0
 800d824:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	d101      	bne.n	800d834 <HAL_PCD_EP_Open+0xaa>
 800d830:	2302      	movs	r3, #2
 800d832:	e00e      	b.n	800d852 <HAL_PCD_EP_Open+0xc8>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2201      	movs	r2, #1
 800d838:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	68f9      	ldr	r1, [r7, #12]
 800d842:	4618      	mov	r0, r3
 800d844:	f007 f8ee 	bl	8014a24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2200      	movs	r2, #0
 800d84c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800d850:	7afb      	ldrb	r3, [r7, #11]
}
 800d852:	4618      	mov	r0, r3
 800d854:	3710      	adds	r7, #16
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}

0800d85a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d85a:	b580      	push	{r7, lr}
 800d85c:	b084      	sub	sp, #16
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]
 800d862:	460b      	mov	r3, r1
 800d864:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d866:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	da0f      	bge.n	800d88e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d86e:	78fb      	ldrb	r3, [r7, #3]
 800d870:	f003 020f 	and.w	r2, r3, #15
 800d874:	4613      	mov	r3, r2
 800d876:	00db      	lsls	r3, r3, #3
 800d878:	1a9b      	subs	r3, r3, r2
 800d87a:	009b      	lsls	r3, r3, #2
 800d87c:	3338      	adds	r3, #56	; 0x38
 800d87e:	687a      	ldr	r2, [r7, #4]
 800d880:	4413      	add	r3, r2
 800d882:	3304      	adds	r3, #4
 800d884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2201      	movs	r2, #1
 800d88a:	705a      	strb	r2, [r3, #1]
 800d88c:	e00f      	b.n	800d8ae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d88e:	78fb      	ldrb	r3, [r7, #3]
 800d890:	f003 020f 	and.w	r2, r3, #15
 800d894:	4613      	mov	r3, r2
 800d896:	00db      	lsls	r3, r3, #3
 800d898:	1a9b      	subs	r3, r3, r2
 800d89a:	009b      	lsls	r3, r3, #2
 800d89c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	4413      	add	r3, r2
 800d8a4:	3304      	adds	r3, #4
 800d8a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800d8ae:	78fb      	ldrb	r3, [r7, #3]
 800d8b0:	f003 030f 	and.w	r3, r3, #15
 800d8b4:	b2da      	uxtb	r2, r3
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d101      	bne.n	800d8c8 <HAL_PCD_EP_Close+0x6e>
 800d8c4:	2302      	movs	r3, #2
 800d8c6:	e00e      	b.n	800d8e6 <HAL_PCD_EP_Close+0x8c>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	68f9      	ldr	r1, [r7, #12]
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f007 f92c 	bl	8014b34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800d8e4:	2300      	movs	r3, #0
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3710      	adds	r7, #16
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}

0800d8ee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d8ee:	b580      	push	{r7, lr}
 800d8f0:	b086      	sub	sp, #24
 800d8f2:	af00      	add	r7, sp, #0
 800d8f4:	60f8      	str	r0, [r7, #12]
 800d8f6:	607a      	str	r2, [r7, #4]
 800d8f8:	603b      	str	r3, [r7, #0]
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d8fe:	7afb      	ldrb	r3, [r7, #11]
 800d900:	f003 020f 	and.w	r2, r3, #15
 800d904:	4613      	mov	r3, r2
 800d906:	00db      	lsls	r3, r3, #3
 800d908:	1a9b      	subs	r3, r3, r2
 800d90a:	009b      	lsls	r3, r3, #2
 800d90c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d910:	68fa      	ldr	r2, [r7, #12]
 800d912:	4413      	add	r3, r2
 800d914:	3304      	adds	r3, #4
 800d916:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	683a      	ldr	r2, [r7, #0]
 800d922:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	2200      	movs	r2, #0
 800d928:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	2200      	movs	r2, #0
 800d92e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d930:	7afb      	ldrb	r3, [r7, #11]
 800d932:	f003 030f 	and.w	r3, r3, #15
 800d936:	b2da      	uxtb	r2, r3
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	691b      	ldr	r3, [r3, #16]
 800d940:	2b01      	cmp	r3, #1
 800d942:	d102      	bne.n	800d94a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d94a:	7afb      	ldrb	r3, [r7, #11]
 800d94c:	f003 030f 	and.w	r3, r3, #15
 800d950:	2b00      	cmp	r3, #0
 800d952:	d109      	bne.n	800d968 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	6818      	ldr	r0, [r3, #0]
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	691b      	ldr	r3, [r3, #16]
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	461a      	mov	r2, r3
 800d960:	6979      	ldr	r1, [r7, #20]
 800d962:	f007 fc0f 	bl	8015184 <USB_EP0StartXfer>
 800d966:	e008      	b.n	800d97a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	6818      	ldr	r0, [r3, #0]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	691b      	ldr	r3, [r3, #16]
 800d970:	b2db      	uxtb	r3, r3
 800d972:	461a      	mov	r2, r3
 800d974:	6979      	ldr	r1, [r7, #20]
 800d976:	f007 f9b9 	bl	8014cec <USB_EPStartXfer>
  }

  return HAL_OK;
 800d97a:	2300      	movs	r3, #0
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3718      	adds	r7, #24
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}

0800d984 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d984:	b480      	push	{r7}
 800d986:	b083      	sub	sp, #12
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	460b      	mov	r3, r1
 800d98e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d990:	78fb      	ldrb	r3, [r7, #3]
 800d992:	f003 020f 	and.w	r2, r3, #15
 800d996:	6879      	ldr	r1, [r7, #4]
 800d998:	4613      	mov	r3, r2
 800d99a:	00db      	lsls	r3, r3, #3
 800d99c:	1a9b      	subs	r3, r3, r2
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	440b      	add	r3, r1
 800d9a2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d9a6:	681b      	ldr	r3, [r3, #0]
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	370c      	adds	r7, #12
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr

0800d9b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b086      	sub	sp, #24
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	607a      	str	r2, [r7, #4]
 800d9be:	603b      	str	r3, [r7, #0]
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d9c4:	7afb      	ldrb	r3, [r7, #11]
 800d9c6:	f003 020f 	and.w	r2, r3, #15
 800d9ca:	4613      	mov	r3, r2
 800d9cc:	00db      	lsls	r3, r3, #3
 800d9ce:	1a9b      	subs	r3, r3, r2
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	3338      	adds	r3, #56	; 0x38
 800d9d4:	68fa      	ldr	r2, [r7, #12]
 800d9d6:	4413      	add	r3, r2
 800d9d8:	3304      	adds	r3, #4
 800d9da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	683a      	ldr	r2, [r7, #0]
 800d9e6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d9f4:	7afb      	ldrb	r3, [r7, #11]
 800d9f6:	f003 030f 	and.w	r3, r3, #15
 800d9fa:	b2da      	uxtb	r2, r3
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	691b      	ldr	r3, [r3, #16]
 800da04:	2b01      	cmp	r3, #1
 800da06:	d102      	bne.n	800da0e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800da0e:	7afb      	ldrb	r3, [r7, #11]
 800da10:	f003 030f 	and.w	r3, r3, #15
 800da14:	2b00      	cmp	r3, #0
 800da16:	d109      	bne.n	800da2c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	6818      	ldr	r0, [r3, #0]
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	691b      	ldr	r3, [r3, #16]
 800da20:	b2db      	uxtb	r3, r3
 800da22:	461a      	mov	r2, r3
 800da24:	6979      	ldr	r1, [r7, #20]
 800da26:	f007 fbad 	bl	8015184 <USB_EP0StartXfer>
 800da2a:	e008      	b.n	800da3e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6818      	ldr	r0, [r3, #0]
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	691b      	ldr	r3, [r3, #16]
 800da34:	b2db      	uxtb	r3, r3
 800da36:	461a      	mov	r2, r3
 800da38:	6979      	ldr	r1, [r7, #20]
 800da3a:	f007 f957 	bl	8014cec <USB_EPStartXfer>
  }

  return HAL_OK;
 800da3e:	2300      	movs	r3, #0
}
 800da40:	4618      	mov	r0, r3
 800da42:	3718      	adds	r7, #24
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	460b      	mov	r3, r1
 800da52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800da54:	78fb      	ldrb	r3, [r7, #3]
 800da56:	f003 020f 	and.w	r2, r3, #15
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d901      	bls.n	800da66 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800da62:	2301      	movs	r3, #1
 800da64:	e050      	b.n	800db08 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800da66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	da0f      	bge.n	800da8e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800da6e:	78fb      	ldrb	r3, [r7, #3]
 800da70:	f003 020f 	and.w	r2, r3, #15
 800da74:	4613      	mov	r3, r2
 800da76:	00db      	lsls	r3, r3, #3
 800da78:	1a9b      	subs	r3, r3, r2
 800da7a:	009b      	lsls	r3, r3, #2
 800da7c:	3338      	adds	r3, #56	; 0x38
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	4413      	add	r3, r2
 800da82:	3304      	adds	r3, #4
 800da84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2201      	movs	r2, #1
 800da8a:	705a      	strb	r2, [r3, #1]
 800da8c:	e00d      	b.n	800daaa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800da8e:	78fa      	ldrb	r2, [r7, #3]
 800da90:	4613      	mov	r3, r2
 800da92:	00db      	lsls	r3, r3, #3
 800da94:	1a9b      	subs	r3, r3, r2
 800da96:	009b      	lsls	r3, r3, #2
 800da98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	4413      	add	r3, r2
 800daa0:	3304      	adds	r3, #4
 800daa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2200      	movs	r2, #0
 800daa8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2201      	movs	r2, #1
 800daae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800dab0:	78fb      	ldrb	r3, [r7, #3]
 800dab2:	f003 030f 	and.w	r3, r3, #15
 800dab6:	b2da      	uxtb	r2, r3
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d101      	bne.n	800daca <HAL_PCD_EP_SetStall+0x82>
 800dac6:	2302      	movs	r3, #2
 800dac8:	e01e      	b.n	800db08 <HAL_PCD_EP_SetStall+0xc0>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2201      	movs	r2, #1
 800dace:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	68f9      	ldr	r1, [r7, #12]
 800dad8:	4618      	mov	r0, r3
 800dada:	f007 fd09 	bl	80154f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800dade:	78fb      	ldrb	r3, [r7, #3]
 800dae0:	f003 030f 	and.w	r3, r3, #15
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d10a      	bne.n	800dafe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6818      	ldr	r0, [r3, #0]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	691b      	ldr	r3, [r3, #16]
 800daf0:	b2d9      	uxtb	r1, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800daf8:	461a      	mov	r2, r3
 800dafa:	f007 fefb 	bl	80158f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800db06:	2300      	movs	r3, #0
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3710      	adds	r7, #16
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	460b      	mov	r3, r1
 800db1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800db1c:	78fb      	ldrb	r3, [r7, #3]
 800db1e:	f003 020f 	and.w	r2, r3, #15
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	429a      	cmp	r2, r3
 800db28:	d901      	bls.n	800db2e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800db2a:	2301      	movs	r3, #1
 800db2c:	e042      	b.n	800dbb4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800db2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db32:	2b00      	cmp	r3, #0
 800db34:	da0f      	bge.n	800db56 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800db36:	78fb      	ldrb	r3, [r7, #3]
 800db38:	f003 020f 	and.w	r2, r3, #15
 800db3c:	4613      	mov	r3, r2
 800db3e:	00db      	lsls	r3, r3, #3
 800db40:	1a9b      	subs	r3, r3, r2
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	3338      	adds	r3, #56	; 0x38
 800db46:	687a      	ldr	r2, [r7, #4]
 800db48:	4413      	add	r3, r2
 800db4a:	3304      	adds	r3, #4
 800db4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2201      	movs	r2, #1
 800db52:	705a      	strb	r2, [r3, #1]
 800db54:	e00f      	b.n	800db76 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800db56:	78fb      	ldrb	r3, [r7, #3]
 800db58:	f003 020f 	and.w	r2, r3, #15
 800db5c:	4613      	mov	r3, r2
 800db5e:	00db      	lsls	r3, r3, #3
 800db60:	1a9b      	subs	r3, r3, r2
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	4413      	add	r3, r2
 800db6c:	3304      	adds	r3, #4
 800db6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2200      	movs	r2, #0
 800db74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2200      	movs	r2, #0
 800db7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800db7c:	78fb      	ldrb	r3, [r7, #3]
 800db7e:	f003 030f 	and.w	r3, r3, #15
 800db82:	b2da      	uxtb	r2, r3
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800db8e:	2b01      	cmp	r3, #1
 800db90:	d101      	bne.n	800db96 <HAL_PCD_EP_ClrStall+0x86>
 800db92:	2302      	movs	r3, #2
 800db94:	e00e      	b.n	800dbb4 <HAL_PCD_EP_ClrStall+0xa4>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2201      	movs	r2, #1
 800db9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	68f9      	ldr	r1, [r7, #12]
 800dba4:	4618      	mov	r0, r3
 800dba6:	f007 fd11 	bl	80155cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2200      	movs	r2, #0
 800dbae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800dbb2:	2300      	movs	r3, #0
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3710      	adds	r7, #16
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b082      	sub	sp, #8
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800dbce:	2b01      	cmp	r3, #1
 800dbd0:	d101      	bne.n	800dbd6 <HAL_PCD_EP_Flush+0x1a>
 800dbd2:	2302      	movs	r3, #2
 800dbd4:	e01b      	b.n	800dc0e <HAL_PCD_EP_Flush+0x52>
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2201      	movs	r2, #1
 800dbda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800dbde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	da09      	bge.n	800dbfa <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	78fb      	ldrb	r3, [r7, #3]
 800dbec:	f003 030f 	and.w	r3, r3, #15
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	4610      	mov	r0, r2
 800dbf4:	f006 fe90 	bl	8014918 <USB_FlushTxFifo>
 800dbf8:	e004      	b.n	800dc04 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f006 feb0 	bl	8014964 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2200      	movs	r2, #0
 800dc08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800dc0c:	2300      	movs	r3, #0
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3708      	adds	r7, #8
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}

0800dc16 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b08a      	sub	sp, #40	; 0x28
 800dc1a:	af02      	add	r7, sp, #8
 800dc1c:	6078      	str	r0, [r7, #4]
 800dc1e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800dc2a:	683a      	ldr	r2, [r7, #0]
 800dc2c:	4613      	mov	r3, r2
 800dc2e:	00db      	lsls	r3, r3, #3
 800dc30:	1a9b      	subs	r3, r3, r2
 800dc32:	009b      	lsls	r3, r3, #2
 800dc34:	3338      	adds	r3, #56	; 0x38
 800dc36:	687a      	ldr	r2, [r7, #4]
 800dc38:	4413      	add	r3, r2
 800dc3a:	3304      	adds	r3, #4
 800dc3c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	699a      	ldr	r2, [r3, #24]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	695b      	ldr	r3, [r3, #20]
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d901      	bls.n	800dc4e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	e06c      	b.n	800dd28 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	695a      	ldr	r2, [r3, #20]
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	699b      	ldr	r3, [r3, #24]
 800dc56:	1ad3      	subs	r3, r2, r3
 800dc58:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	689b      	ldr	r3, [r3, #8]
 800dc5e:	69fa      	ldr	r2, [r7, #28]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d902      	bls.n	800dc6a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	689b      	ldr	r3, [r3, #8]
 800dc68:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800dc6a:	69fb      	ldr	r3, [r7, #28]
 800dc6c:	3303      	adds	r3, #3
 800dc6e:	089b      	lsrs	r3, r3, #2
 800dc70:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800dc72:	e02b      	b.n	800dccc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	695a      	ldr	r2, [r3, #20]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	699b      	ldr	r3, [r3, #24]
 800dc7c:	1ad3      	subs	r3, r2, r3
 800dc7e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	689b      	ldr	r3, [r3, #8]
 800dc84:	69fa      	ldr	r2, [r7, #28]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d902      	bls.n	800dc90 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	689b      	ldr	r3, [r3, #8]
 800dc8e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800dc90:	69fb      	ldr	r3, [r7, #28]
 800dc92:	3303      	adds	r3, #3
 800dc94:	089b      	lsrs	r3, r3, #2
 800dc96:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	68d9      	ldr	r1, [r3, #12]
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	b2da      	uxtb	r2, r3
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	9300      	str	r3, [sp, #0]
 800dcac:	4603      	mov	r3, r0
 800dcae:	6978      	ldr	r0, [r7, #20]
 800dcb0:	f007 fbc0 	bl	8015434 <USB_WritePacket>

    ep->xfer_buff  += len;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	68da      	ldr	r2, [r3, #12]
 800dcb8:	69fb      	ldr	r3, [r7, #28]
 800dcba:	441a      	add	r2, r3
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	699a      	ldr	r2, [r3, #24]
 800dcc4:	69fb      	ldr	r3, [r7, #28]
 800dcc6:	441a      	add	r2, r3
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	015a      	lsls	r2, r3, #5
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	4413      	add	r3, r2
 800dcd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcd8:	699b      	ldr	r3, [r3, #24]
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	69ba      	ldr	r2, [r7, #24]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d809      	bhi.n	800dcf6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	699a      	ldr	r2, [r3, #24]
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d203      	bcs.n	800dcf6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	695b      	ldr	r3, [r3, #20]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d1be      	bne.n	800dc74 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	695a      	ldr	r2, [r3, #20]
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	699b      	ldr	r3, [r3, #24]
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d811      	bhi.n	800dd26 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	f003 030f 	and.w	r3, r3, #15
 800dd08:	2201      	movs	r2, #1
 800dd0a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd0e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	43db      	mvns	r3, r3
 800dd1c:	6939      	ldr	r1, [r7, #16]
 800dd1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd22:	4013      	ands	r3, r2
 800dd24:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800dd26:	2300      	movs	r3, #0
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3720      	adds	r7, #32
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b086      	sub	sp, #24
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	333c      	adds	r3, #60	; 0x3c
 800dd48:	3304      	adds	r3, #4
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	015a      	lsls	r2, r3, #5
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	4413      	add	r3, r2
 800dd56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd5a:	689b      	ldr	r3, [r3, #8]
 800dd5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	691b      	ldr	r3, [r3, #16]
 800dd62:	2b01      	cmp	r3, #1
 800dd64:	f040 80a0 	bne.w	800dea8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	f003 0308 	and.w	r3, r3, #8
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d015      	beq.n	800dd9e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	4a72      	ldr	r2, [pc, #456]	; (800df40 <PCD_EP_OutXfrComplete_int+0x210>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	f240 80dd 	bls.w	800df36 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	f000 80d7 	beq.w	800df36 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	015a      	lsls	r2, r3, #5
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	4413      	add	r3, r2
 800dd90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd94:	461a      	mov	r2, r3
 800dd96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd9a:	6093      	str	r3, [r2, #8]
 800dd9c:	e0cb      	b.n	800df36 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	f003 0320 	and.w	r3, r3, #32
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d009      	beq.n	800ddbc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	015a      	lsls	r2, r3, #5
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	4413      	add	r3, r2
 800ddb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	2320      	movs	r3, #32
 800ddb8:	6093      	str	r3, [r2, #8]
 800ddba:	e0bc      	b.n	800df36 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	f040 80b7 	bne.w	800df36 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	4a5d      	ldr	r2, [pc, #372]	; (800df40 <PCD_EP_OutXfrComplete_int+0x210>)
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d90f      	bls.n	800ddf0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d00a      	beq.n	800ddf0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	015a      	lsls	r2, r3, #5
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	4413      	add	r3, r2
 800dde2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dde6:	461a      	mov	r2, r3
 800dde8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ddec:	6093      	str	r3, [r2, #8]
 800ddee:	e0a2      	b.n	800df36 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800ddf0:	6879      	ldr	r1, [r7, #4]
 800ddf2:	683a      	ldr	r2, [r7, #0]
 800ddf4:	4613      	mov	r3, r2
 800ddf6:	00db      	lsls	r3, r3, #3
 800ddf8:	1a9b      	subs	r3, r3, r2
 800ddfa:	009b      	lsls	r3, r3, #2
 800ddfc:	440b      	add	r3, r1
 800ddfe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800de02:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	0159      	lsls	r1, r3, #5
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	440b      	add	r3, r1
 800de0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de10:	691b      	ldr	r3, [r3, #16]
 800de12:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800de16:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	683a      	ldr	r2, [r7, #0]
 800de1c:	4613      	mov	r3, r2
 800de1e:	00db      	lsls	r3, r3, #3
 800de20:	1a9b      	subs	r3, r3, r2
 800de22:	009b      	lsls	r3, r3, #2
 800de24:	4403      	add	r3, r0
 800de26:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800de2a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800de2c:	6879      	ldr	r1, [r7, #4]
 800de2e:	683a      	ldr	r2, [r7, #0]
 800de30:	4613      	mov	r3, r2
 800de32:	00db      	lsls	r3, r3, #3
 800de34:	1a9b      	subs	r3, r3, r2
 800de36:	009b      	lsls	r3, r3, #2
 800de38:	440b      	add	r3, r1
 800de3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800de3e:	6819      	ldr	r1, [r3, #0]
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	683a      	ldr	r2, [r7, #0]
 800de44:	4613      	mov	r3, r2
 800de46:	00db      	lsls	r3, r3, #3
 800de48:	1a9b      	subs	r3, r3, r2
 800de4a:	009b      	lsls	r3, r3, #2
 800de4c:	4403      	add	r3, r0
 800de4e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	4419      	add	r1, r3
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	683a      	ldr	r2, [r7, #0]
 800de5a:	4613      	mov	r3, r2
 800de5c:	00db      	lsls	r3, r3, #3
 800de5e:	1a9b      	subs	r3, r3, r2
 800de60:	009b      	lsls	r3, r3, #2
 800de62:	4403      	add	r3, r0
 800de64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800de68:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d114      	bne.n	800de9a <PCD_EP_OutXfrComplete_int+0x16a>
 800de70:	6879      	ldr	r1, [r7, #4]
 800de72:	683a      	ldr	r2, [r7, #0]
 800de74:	4613      	mov	r3, r2
 800de76:	00db      	lsls	r3, r3, #3
 800de78:	1a9b      	subs	r3, r3, r2
 800de7a:	009b      	lsls	r3, r3, #2
 800de7c:	440b      	add	r3, r1
 800de7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d108      	bne.n	800de9a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6818      	ldr	r0, [r3, #0]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800de92:	461a      	mov	r2, r3
 800de94:	2101      	movs	r1, #1
 800de96:	f007 fd2d 	bl	80158f4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	4619      	mov	r1, r3
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f00e f933 	bl	801c10c <HAL_PCD_DataOutStageCallback>
 800dea6:	e046      	b.n	800df36 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	4a26      	ldr	r2, [pc, #152]	; (800df44 <PCD_EP_OutXfrComplete_int+0x214>)
 800deac:	4293      	cmp	r3, r2
 800deae:	d124      	bne.n	800defa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d00a      	beq.n	800ded0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	015a      	lsls	r2, r3, #5
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	4413      	add	r3, r2
 800dec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dec6:	461a      	mov	r2, r3
 800dec8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800decc:	6093      	str	r3, [r2, #8]
 800dece:	e032      	b.n	800df36 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	f003 0320 	and.w	r3, r3, #32
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d008      	beq.n	800deec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	015a      	lsls	r2, r3, #5
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	4413      	add	r3, r2
 800dee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dee6:	461a      	mov	r2, r3
 800dee8:	2320      	movs	r3, #32
 800deea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	b2db      	uxtb	r3, r3
 800def0:	4619      	mov	r1, r3
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f00e f90a 	bl	801c10c <HAL_PCD_DataOutStageCallback>
 800def8:	e01d      	b.n	800df36 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d114      	bne.n	800df2a <PCD_EP_OutXfrComplete_int+0x1fa>
 800df00:	6879      	ldr	r1, [r7, #4]
 800df02:	683a      	ldr	r2, [r7, #0]
 800df04:	4613      	mov	r3, r2
 800df06:	00db      	lsls	r3, r3, #3
 800df08:	1a9b      	subs	r3, r3, r2
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	440b      	add	r3, r1
 800df0e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d108      	bne.n	800df2a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6818      	ldr	r0, [r3, #0]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800df22:	461a      	mov	r2, r3
 800df24:	2100      	movs	r1, #0
 800df26:	f007 fce5 	bl	80158f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	4619      	mov	r1, r3
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f00e f8eb 	bl	801c10c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800df36:	2300      	movs	r3, #0
}
 800df38:	4618      	mov	r0, r3
 800df3a:	3718      	adds	r7, #24
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}
 800df40:	4f54300a 	.word	0x4f54300a
 800df44:	4f54310a 	.word	0x4f54310a

0800df48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b086      	sub	sp, #24
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	333c      	adds	r3, #60	; 0x3c
 800df60:	3304      	adds	r3, #4
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	015a      	lsls	r2, r3, #5
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	4413      	add	r3, r2
 800df6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df72:	689b      	ldr	r3, [r3, #8]
 800df74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	4a15      	ldr	r2, [pc, #84]	; (800dfd0 <PCD_EP_OutSetupPacket_int+0x88>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d90e      	bls.n	800df9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800df84:	2b00      	cmp	r3, #0
 800df86:	d009      	beq.n	800df9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	015a      	lsls	r2, r3, #5
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	4413      	add	r3, r2
 800df90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df94:	461a      	mov	r2, r3
 800df96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f00e f8a3 	bl	801c0e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	4a0a      	ldr	r2, [pc, #40]	; (800dfd0 <PCD_EP_OutSetupPacket_int+0x88>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d90c      	bls.n	800dfc4 <PCD_EP_OutSetupPacket_int+0x7c>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	691b      	ldr	r3, [r3, #16]
 800dfae:	2b01      	cmp	r3, #1
 800dfb0:	d108      	bne.n	800dfc4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6818      	ldr	r0, [r3, #0]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	2101      	movs	r1, #1
 800dfc0:	f007 fc98 	bl	80158f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800dfc4:	2300      	movs	r3, #0
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3718      	adds	r7, #24
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
 800dfce:	bf00      	nop
 800dfd0:	4f54300a 	.word	0x4f54300a

0800dfd4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b085      	sub	sp, #20
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
 800dfdc:	460b      	mov	r3, r1
 800dfde:	70fb      	strb	r3, [r7, #3]
 800dfe0:	4613      	mov	r3, r2
 800dfe2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800dfec:	78fb      	ldrb	r3, [r7, #3]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d107      	bne.n	800e002 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800dff2:	883b      	ldrh	r3, [r7, #0]
 800dff4:	0419      	lsls	r1, r3, #16
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	430a      	orrs	r2, r1
 800dffe:	629a      	str	r2, [r3, #40]	; 0x28
 800e000:	e028      	b.n	800e054 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e008:	0c1b      	lsrs	r3, r3, #16
 800e00a:	68ba      	ldr	r2, [r7, #8]
 800e00c:	4413      	add	r3, r2
 800e00e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800e010:	2300      	movs	r3, #0
 800e012:	73fb      	strb	r3, [r7, #15]
 800e014:	e00d      	b.n	800e032 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681a      	ldr	r2, [r3, #0]
 800e01a:	7bfb      	ldrb	r3, [r7, #15]
 800e01c:	3340      	adds	r3, #64	; 0x40
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	4413      	add	r3, r2
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	0c1b      	lsrs	r3, r3, #16
 800e026:	68ba      	ldr	r2, [r7, #8]
 800e028:	4413      	add	r3, r2
 800e02a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800e02c:	7bfb      	ldrb	r3, [r7, #15]
 800e02e:	3301      	adds	r3, #1
 800e030:	73fb      	strb	r3, [r7, #15]
 800e032:	7bfa      	ldrb	r2, [r7, #15]
 800e034:	78fb      	ldrb	r3, [r7, #3]
 800e036:	3b01      	subs	r3, #1
 800e038:	429a      	cmp	r2, r3
 800e03a:	d3ec      	bcc.n	800e016 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800e03c:	883b      	ldrh	r3, [r7, #0]
 800e03e:	0418      	lsls	r0, r3, #16
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6819      	ldr	r1, [r3, #0]
 800e044:	78fb      	ldrb	r3, [r7, #3]
 800e046:	3b01      	subs	r3, #1
 800e048:	68ba      	ldr	r2, [r7, #8]
 800e04a:	4302      	orrs	r2, r0
 800e04c:	3340      	adds	r3, #64	; 0x40
 800e04e:	009b      	lsls	r3, r3, #2
 800e050:	440b      	add	r3, r1
 800e052:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800e054:	2300      	movs	r3, #0
}
 800e056:	4618      	mov	r0, r3
 800e058:	3714      	adds	r7, #20
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr

0800e062 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800e062:	b480      	push	{r7}
 800e064:	b083      	sub	sp, #12
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
 800e06a:	460b      	mov	r3, r1
 800e06c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	887a      	ldrh	r2, [r7, #2]
 800e074:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800e076:	2300      	movs	r3, #0
}
 800e078:	4618      	mov	r0, r3
 800e07a:	370c      	adds	r7, #12
 800e07c:	46bd      	mov	sp, r7
 800e07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e082:	4770      	bx	lr

0800e084 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800e084:	b480      	push	{r7}
 800e086:	b085      	sub	sp, #20
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2201      	movs	r2, #1
 800e096:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2200      	movs	r2, #0
 800e09e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	699b      	ldr	r3, [r3, #24]
 800e0a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e0b2:	4b05      	ldr	r3, [pc, #20]	; (800e0c8 <HAL_PCDEx_ActivateLPM+0x44>)
 800e0b4:	4313      	orrs	r3, r2
 800e0b6:	68fa      	ldr	r2, [r7, #12]
 800e0b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800e0ba:	2300      	movs	r3, #0
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3714      	adds	r7, #20
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr
 800e0c8:	10000003 	.word	0x10000003

0800e0cc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e0d0:	4b05      	ldr	r3, [pc, #20]	; (800e0e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	4a04      	ldr	r2, [pc, #16]	; (800e0e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e0d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e0da:	6013      	str	r3, [r2, #0]
}
 800e0dc:	bf00      	nop
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e4:	4770      	bx	lr
 800e0e6:	bf00      	nop
 800e0e8:	40007000 	.word	0x40007000

0800e0ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b082      	sub	sp, #8
 800e0f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800e0f6:	4b23      	ldr	r3, [pc, #140]	; (800e184 <HAL_PWREx_EnableOverDrive+0x98>)
 800e0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0fa:	4a22      	ldr	r2, [pc, #136]	; (800e184 <HAL_PWREx_EnableOverDrive+0x98>)
 800e0fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e100:	6413      	str	r3, [r2, #64]	; 0x40
 800e102:	4b20      	ldr	r3, [pc, #128]	; (800e184 <HAL_PWREx_EnableOverDrive+0x98>)
 800e104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e10a:	603b      	str	r3, [r7, #0]
 800e10c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800e10e:	4b1e      	ldr	r3, [pc, #120]	; (800e188 <HAL_PWREx_EnableOverDrive+0x9c>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	4a1d      	ldr	r2, [pc, #116]	; (800e188 <HAL_PWREx_EnableOverDrive+0x9c>)
 800e114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e118:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e11a:	f7fb f835 	bl	8009188 <HAL_GetTick>
 800e11e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e120:	e009      	b.n	800e136 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e122:	f7fb f831 	bl	8009188 <HAL_GetTick>
 800e126:	4602      	mov	r2, r0
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	1ad3      	subs	r3, r2, r3
 800e12c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e130:	d901      	bls.n	800e136 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800e132:	2303      	movs	r3, #3
 800e134:	e022      	b.n	800e17c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e136:	4b14      	ldr	r3, [pc, #80]	; (800e188 <HAL_PWREx_EnableOverDrive+0x9c>)
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e13e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e142:	d1ee      	bne.n	800e122 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e144:	4b10      	ldr	r3, [pc, #64]	; (800e188 <HAL_PWREx_EnableOverDrive+0x9c>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	4a0f      	ldr	r2, [pc, #60]	; (800e188 <HAL_PWREx_EnableOverDrive+0x9c>)
 800e14a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e14e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e150:	f7fb f81a 	bl	8009188 <HAL_GetTick>
 800e154:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e156:	e009      	b.n	800e16c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e158:	f7fb f816 	bl	8009188 <HAL_GetTick>
 800e15c:	4602      	mov	r2, r0
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	1ad3      	subs	r3, r2, r3
 800e162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e166:	d901      	bls.n	800e16c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800e168:	2303      	movs	r3, #3
 800e16a:	e007      	b.n	800e17c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e16c:	4b06      	ldr	r3, [pc, #24]	; (800e188 <HAL_PWREx_EnableOverDrive+0x9c>)
 800e16e:	685b      	ldr	r3, [r3, #4]
 800e170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e174:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e178:	d1ee      	bne.n	800e158 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800e17a:	2300      	movs	r3, #0
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3708      	adds	r7, #8
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	40023800 	.word	0x40023800
 800e188:	40007000 	.word	0x40007000

0800e18c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b086      	sub	sp, #24
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800e194:	2300      	movs	r3, #0
 800e196:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d101      	bne.n	800e1a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800e19e:	2301      	movs	r3, #1
 800e1a0:	e291      	b.n	800e6c6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	f003 0301 	and.w	r3, r3, #1
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	f000 8087 	beq.w	800e2be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e1b0:	4b96      	ldr	r3, [pc, #600]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e1b2:	689b      	ldr	r3, [r3, #8]
 800e1b4:	f003 030c 	and.w	r3, r3, #12
 800e1b8:	2b04      	cmp	r3, #4
 800e1ba:	d00c      	beq.n	800e1d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e1bc:	4b93      	ldr	r3, [pc, #588]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e1be:	689b      	ldr	r3, [r3, #8]
 800e1c0:	f003 030c 	and.w	r3, r3, #12
 800e1c4:	2b08      	cmp	r3, #8
 800e1c6:	d112      	bne.n	800e1ee <HAL_RCC_OscConfig+0x62>
 800e1c8:	4b90      	ldr	r3, [pc, #576]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e1ca:	685b      	ldr	r3, [r3, #4]
 800e1cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e1d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e1d4:	d10b      	bne.n	800e1ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e1d6:	4b8d      	ldr	r3, [pc, #564]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d06c      	beq.n	800e2bc <HAL_RCC_OscConfig+0x130>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d168      	bne.n	800e2bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	e26b      	b.n	800e6c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	685b      	ldr	r3, [r3, #4]
 800e1f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1f6:	d106      	bne.n	800e206 <HAL_RCC_OscConfig+0x7a>
 800e1f8:	4b84      	ldr	r3, [pc, #528]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	4a83      	ldr	r2, [pc, #524]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e1fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e202:	6013      	str	r3, [r2, #0]
 800e204:	e02e      	b.n	800e264 <HAL_RCC_OscConfig+0xd8>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d10c      	bne.n	800e228 <HAL_RCC_OscConfig+0x9c>
 800e20e:	4b7f      	ldr	r3, [pc, #508]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4a7e      	ldr	r2, [pc, #504]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e218:	6013      	str	r3, [r2, #0]
 800e21a:	4b7c      	ldr	r3, [pc, #496]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	4a7b      	ldr	r2, [pc, #492]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e224:	6013      	str	r3, [r2, #0]
 800e226:	e01d      	b.n	800e264 <HAL_RCC_OscConfig+0xd8>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	685b      	ldr	r3, [r3, #4]
 800e22c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e230:	d10c      	bne.n	800e24c <HAL_RCC_OscConfig+0xc0>
 800e232:	4b76      	ldr	r3, [pc, #472]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4a75      	ldr	r2, [pc, #468]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e23c:	6013      	str	r3, [r2, #0]
 800e23e:	4b73      	ldr	r3, [pc, #460]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	4a72      	ldr	r2, [pc, #456]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e248:	6013      	str	r3, [r2, #0]
 800e24a:	e00b      	b.n	800e264 <HAL_RCC_OscConfig+0xd8>
 800e24c:	4b6f      	ldr	r3, [pc, #444]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4a6e      	ldr	r2, [pc, #440]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e256:	6013      	str	r3, [r2, #0]
 800e258:	4b6c      	ldr	r3, [pc, #432]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	4a6b      	ldr	r2, [pc, #428]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e25e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d013      	beq.n	800e294 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e26c:	f7fa ff8c 	bl	8009188 <HAL_GetTick>
 800e270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e272:	e008      	b.n	800e286 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e274:	f7fa ff88 	bl	8009188 <HAL_GetTick>
 800e278:	4602      	mov	r2, r0
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	1ad3      	subs	r3, r2, r3
 800e27e:	2b64      	cmp	r3, #100	; 0x64
 800e280:	d901      	bls.n	800e286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e282:	2303      	movs	r3, #3
 800e284:	e21f      	b.n	800e6c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e286:	4b61      	ldr	r3, [pc, #388]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d0f0      	beq.n	800e274 <HAL_RCC_OscConfig+0xe8>
 800e292:	e014      	b.n	800e2be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e294:	f7fa ff78 	bl	8009188 <HAL_GetTick>
 800e298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e29a:	e008      	b.n	800e2ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e29c:	f7fa ff74 	bl	8009188 <HAL_GetTick>
 800e2a0:	4602      	mov	r2, r0
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	1ad3      	subs	r3, r2, r3
 800e2a6:	2b64      	cmp	r3, #100	; 0x64
 800e2a8:	d901      	bls.n	800e2ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800e2aa:	2303      	movs	r3, #3
 800e2ac:	e20b      	b.n	800e6c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e2ae:	4b57      	ldr	r3, [pc, #348]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d1f0      	bne.n	800e29c <HAL_RCC_OscConfig+0x110>
 800e2ba:	e000      	b.n	800e2be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e2bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	f003 0302 	and.w	r3, r3, #2
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d069      	beq.n	800e39e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e2ca:	4b50      	ldr	r3, [pc, #320]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e2cc:	689b      	ldr	r3, [r3, #8]
 800e2ce:	f003 030c 	and.w	r3, r3, #12
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00b      	beq.n	800e2ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e2d6:	4b4d      	ldr	r3, [pc, #308]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e2d8:	689b      	ldr	r3, [r3, #8]
 800e2da:	f003 030c 	and.w	r3, r3, #12
 800e2de:	2b08      	cmp	r3, #8
 800e2e0:	d11c      	bne.n	800e31c <HAL_RCC_OscConfig+0x190>
 800e2e2:	4b4a      	ldr	r3, [pc, #296]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d116      	bne.n	800e31c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e2ee:	4b47      	ldr	r3, [pc, #284]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	f003 0302 	and.w	r3, r3, #2
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d005      	beq.n	800e306 <HAL_RCC_OscConfig+0x17a>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	68db      	ldr	r3, [r3, #12]
 800e2fe:	2b01      	cmp	r3, #1
 800e300:	d001      	beq.n	800e306 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800e302:	2301      	movs	r3, #1
 800e304:	e1df      	b.n	800e6c6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e306:	4b41      	ldr	r3, [pc, #260]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	691b      	ldr	r3, [r3, #16]
 800e312:	00db      	lsls	r3, r3, #3
 800e314:	493d      	ldr	r1, [pc, #244]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e316:	4313      	orrs	r3, r2
 800e318:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e31a:	e040      	b.n	800e39e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d023      	beq.n	800e36c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e324:	4b39      	ldr	r3, [pc, #228]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a38      	ldr	r2, [pc, #224]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e32a:	f043 0301 	orr.w	r3, r3, #1
 800e32e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e330:	f7fa ff2a 	bl	8009188 <HAL_GetTick>
 800e334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e336:	e008      	b.n	800e34a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e338:	f7fa ff26 	bl	8009188 <HAL_GetTick>
 800e33c:	4602      	mov	r2, r0
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	1ad3      	subs	r3, r2, r3
 800e342:	2b02      	cmp	r3, #2
 800e344:	d901      	bls.n	800e34a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800e346:	2303      	movs	r3, #3
 800e348:	e1bd      	b.n	800e6c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e34a:	4b30      	ldr	r3, [pc, #192]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f003 0302 	and.w	r3, r3, #2
 800e352:	2b00      	cmp	r3, #0
 800e354:	d0f0      	beq.n	800e338 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e356:	4b2d      	ldr	r3, [pc, #180]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	691b      	ldr	r3, [r3, #16]
 800e362:	00db      	lsls	r3, r3, #3
 800e364:	4929      	ldr	r1, [pc, #164]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e366:	4313      	orrs	r3, r2
 800e368:	600b      	str	r3, [r1, #0]
 800e36a:	e018      	b.n	800e39e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e36c:	4b27      	ldr	r3, [pc, #156]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a26      	ldr	r2, [pc, #152]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e372:	f023 0301 	bic.w	r3, r3, #1
 800e376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e378:	f7fa ff06 	bl	8009188 <HAL_GetTick>
 800e37c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e37e:	e008      	b.n	800e392 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e380:	f7fa ff02 	bl	8009188 <HAL_GetTick>
 800e384:	4602      	mov	r2, r0
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	1ad3      	subs	r3, r2, r3
 800e38a:	2b02      	cmp	r3, #2
 800e38c:	d901      	bls.n	800e392 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800e38e:	2303      	movs	r3, #3
 800e390:	e199      	b.n	800e6c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e392:	4b1e      	ldr	r3, [pc, #120]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f003 0302 	and.w	r3, r3, #2
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d1f0      	bne.n	800e380 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f003 0308 	and.w	r3, r3, #8
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d038      	beq.n	800e41c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	695b      	ldr	r3, [r3, #20]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d019      	beq.n	800e3e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e3b2:	4b16      	ldr	r3, [pc, #88]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e3b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3b6:	4a15      	ldr	r2, [pc, #84]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e3b8:	f043 0301 	orr.w	r3, r3, #1
 800e3bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e3be:	f7fa fee3 	bl	8009188 <HAL_GetTick>
 800e3c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e3c4:	e008      	b.n	800e3d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e3c6:	f7fa fedf 	bl	8009188 <HAL_GetTick>
 800e3ca:	4602      	mov	r2, r0
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	1ad3      	subs	r3, r2, r3
 800e3d0:	2b02      	cmp	r3, #2
 800e3d2:	d901      	bls.n	800e3d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800e3d4:	2303      	movs	r3, #3
 800e3d6:	e176      	b.n	800e6c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e3d8:	4b0c      	ldr	r3, [pc, #48]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e3da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3dc:	f003 0302 	and.w	r3, r3, #2
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d0f0      	beq.n	800e3c6 <HAL_RCC_OscConfig+0x23a>
 800e3e4:	e01a      	b.n	800e41c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e3e6:	4b09      	ldr	r3, [pc, #36]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e3e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3ea:	4a08      	ldr	r2, [pc, #32]	; (800e40c <HAL_RCC_OscConfig+0x280>)
 800e3ec:	f023 0301 	bic.w	r3, r3, #1
 800e3f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e3f2:	f7fa fec9 	bl	8009188 <HAL_GetTick>
 800e3f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e3f8:	e00a      	b.n	800e410 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e3fa:	f7fa fec5 	bl	8009188 <HAL_GetTick>
 800e3fe:	4602      	mov	r2, r0
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	1ad3      	subs	r3, r2, r3
 800e404:	2b02      	cmp	r3, #2
 800e406:	d903      	bls.n	800e410 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800e408:	2303      	movs	r3, #3
 800e40a:	e15c      	b.n	800e6c6 <HAL_RCC_OscConfig+0x53a>
 800e40c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e410:	4b91      	ldr	r3, [pc, #580]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e414:	f003 0302 	and.w	r3, r3, #2
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d1ee      	bne.n	800e3fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f003 0304 	and.w	r3, r3, #4
 800e424:	2b00      	cmp	r3, #0
 800e426:	f000 80a4 	beq.w	800e572 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e42a:	4b8b      	ldr	r3, [pc, #556]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e42e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e432:	2b00      	cmp	r3, #0
 800e434:	d10d      	bne.n	800e452 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800e436:	4b88      	ldr	r3, [pc, #544]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e43a:	4a87      	ldr	r2, [pc, #540]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e43c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e440:	6413      	str	r3, [r2, #64]	; 0x40
 800e442:	4b85      	ldr	r3, [pc, #532]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e44a:	60bb      	str	r3, [r7, #8]
 800e44c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e44e:	2301      	movs	r3, #1
 800e450:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e452:	4b82      	ldr	r3, [pc, #520]	; (800e65c <HAL_RCC_OscConfig+0x4d0>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d118      	bne.n	800e490 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800e45e:	4b7f      	ldr	r3, [pc, #508]	; (800e65c <HAL_RCC_OscConfig+0x4d0>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	4a7e      	ldr	r2, [pc, #504]	; (800e65c <HAL_RCC_OscConfig+0x4d0>)
 800e464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e46a:	f7fa fe8d 	bl	8009188 <HAL_GetTick>
 800e46e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e470:	e008      	b.n	800e484 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e472:	f7fa fe89 	bl	8009188 <HAL_GetTick>
 800e476:	4602      	mov	r2, r0
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	1ad3      	subs	r3, r2, r3
 800e47c:	2b64      	cmp	r3, #100	; 0x64
 800e47e:	d901      	bls.n	800e484 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800e480:	2303      	movs	r3, #3
 800e482:	e120      	b.n	800e6c6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e484:	4b75      	ldr	r3, [pc, #468]	; (800e65c <HAL_RCC_OscConfig+0x4d0>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d0f0      	beq.n	800e472 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	689b      	ldr	r3, [r3, #8]
 800e494:	2b01      	cmp	r3, #1
 800e496:	d106      	bne.n	800e4a6 <HAL_RCC_OscConfig+0x31a>
 800e498:	4b6f      	ldr	r3, [pc, #444]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e49a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e49c:	4a6e      	ldr	r2, [pc, #440]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e49e:	f043 0301 	orr.w	r3, r3, #1
 800e4a2:	6713      	str	r3, [r2, #112]	; 0x70
 800e4a4:	e02d      	b.n	800e502 <HAL_RCC_OscConfig+0x376>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	689b      	ldr	r3, [r3, #8]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d10c      	bne.n	800e4c8 <HAL_RCC_OscConfig+0x33c>
 800e4ae:	4b6a      	ldr	r3, [pc, #424]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e4b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4b2:	4a69      	ldr	r2, [pc, #420]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e4b4:	f023 0301 	bic.w	r3, r3, #1
 800e4b8:	6713      	str	r3, [r2, #112]	; 0x70
 800e4ba:	4b67      	ldr	r3, [pc, #412]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e4bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4be:	4a66      	ldr	r2, [pc, #408]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e4c0:	f023 0304 	bic.w	r3, r3, #4
 800e4c4:	6713      	str	r3, [r2, #112]	; 0x70
 800e4c6:	e01c      	b.n	800e502 <HAL_RCC_OscConfig+0x376>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	689b      	ldr	r3, [r3, #8]
 800e4cc:	2b05      	cmp	r3, #5
 800e4ce:	d10c      	bne.n	800e4ea <HAL_RCC_OscConfig+0x35e>
 800e4d0:	4b61      	ldr	r3, [pc, #388]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e4d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4d4:	4a60      	ldr	r2, [pc, #384]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e4d6:	f043 0304 	orr.w	r3, r3, #4
 800e4da:	6713      	str	r3, [r2, #112]	; 0x70
 800e4dc:	4b5e      	ldr	r3, [pc, #376]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e4de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4e0:	4a5d      	ldr	r2, [pc, #372]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e4e2:	f043 0301 	orr.w	r3, r3, #1
 800e4e6:	6713      	str	r3, [r2, #112]	; 0x70
 800e4e8:	e00b      	b.n	800e502 <HAL_RCC_OscConfig+0x376>
 800e4ea:	4b5b      	ldr	r3, [pc, #364]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4ee:	4a5a      	ldr	r2, [pc, #360]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e4f0:	f023 0301 	bic.w	r3, r3, #1
 800e4f4:	6713      	str	r3, [r2, #112]	; 0x70
 800e4f6:	4b58      	ldr	r3, [pc, #352]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e4f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4fa:	4a57      	ldr	r2, [pc, #348]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e4fc:	f023 0304 	bic.w	r3, r3, #4
 800e500:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	689b      	ldr	r3, [r3, #8]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d015      	beq.n	800e536 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e50a:	f7fa fe3d 	bl	8009188 <HAL_GetTick>
 800e50e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e510:	e00a      	b.n	800e528 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e512:	f7fa fe39 	bl	8009188 <HAL_GetTick>
 800e516:	4602      	mov	r2, r0
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	1ad3      	subs	r3, r2, r3
 800e51c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e520:	4293      	cmp	r3, r2
 800e522:	d901      	bls.n	800e528 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800e524:	2303      	movs	r3, #3
 800e526:	e0ce      	b.n	800e6c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e528:	4b4b      	ldr	r3, [pc, #300]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e52a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e52c:	f003 0302 	and.w	r3, r3, #2
 800e530:	2b00      	cmp	r3, #0
 800e532:	d0ee      	beq.n	800e512 <HAL_RCC_OscConfig+0x386>
 800e534:	e014      	b.n	800e560 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e536:	f7fa fe27 	bl	8009188 <HAL_GetTick>
 800e53a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e53c:	e00a      	b.n	800e554 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e53e:	f7fa fe23 	bl	8009188 <HAL_GetTick>
 800e542:	4602      	mov	r2, r0
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	1ad3      	subs	r3, r2, r3
 800e548:	f241 3288 	movw	r2, #5000	; 0x1388
 800e54c:	4293      	cmp	r3, r2
 800e54e:	d901      	bls.n	800e554 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800e550:	2303      	movs	r3, #3
 800e552:	e0b8      	b.n	800e6c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e554:	4b40      	ldr	r3, [pc, #256]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e558:	f003 0302 	and.w	r3, r3, #2
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d1ee      	bne.n	800e53e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e560:	7dfb      	ldrb	r3, [r7, #23]
 800e562:	2b01      	cmp	r3, #1
 800e564:	d105      	bne.n	800e572 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e566:	4b3c      	ldr	r3, [pc, #240]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e56a:	4a3b      	ldr	r2, [pc, #236]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e56c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e570:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	699b      	ldr	r3, [r3, #24]
 800e576:	2b00      	cmp	r3, #0
 800e578:	f000 80a4 	beq.w	800e6c4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e57c:	4b36      	ldr	r3, [pc, #216]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e57e:	689b      	ldr	r3, [r3, #8]
 800e580:	f003 030c 	and.w	r3, r3, #12
 800e584:	2b08      	cmp	r3, #8
 800e586:	d06b      	beq.n	800e660 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	699b      	ldr	r3, [r3, #24]
 800e58c:	2b02      	cmp	r3, #2
 800e58e:	d149      	bne.n	800e624 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e590:	4b31      	ldr	r3, [pc, #196]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	4a30      	ldr	r2, [pc, #192]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e596:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e59a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e59c:	f7fa fdf4 	bl	8009188 <HAL_GetTick>
 800e5a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e5a2:	e008      	b.n	800e5b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e5a4:	f7fa fdf0 	bl	8009188 <HAL_GetTick>
 800e5a8:	4602      	mov	r2, r0
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	1ad3      	subs	r3, r2, r3
 800e5ae:	2b02      	cmp	r3, #2
 800e5b0:	d901      	bls.n	800e5b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800e5b2:	2303      	movs	r3, #3
 800e5b4:	e087      	b.n	800e6c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e5b6:	4b28      	ldr	r3, [pc, #160]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d1f0      	bne.n	800e5a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	69da      	ldr	r2, [r3, #28]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6a1b      	ldr	r3, [r3, #32]
 800e5ca:	431a      	orrs	r2, r3
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d0:	019b      	lsls	r3, r3, #6
 800e5d2:	431a      	orrs	r2, r3
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5d8:	085b      	lsrs	r3, r3, #1
 800e5da:	3b01      	subs	r3, #1
 800e5dc:	041b      	lsls	r3, r3, #16
 800e5de:	431a      	orrs	r2, r3
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e4:	061b      	lsls	r3, r3, #24
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	4a1b      	ldr	r2, [pc, #108]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e5ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e5ee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e5f0:	4b19      	ldr	r3, [pc, #100]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4a18      	ldr	r2, [pc, #96]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e5f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e5fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5fc:	f7fa fdc4 	bl	8009188 <HAL_GetTick>
 800e600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e602:	e008      	b.n	800e616 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e604:	f7fa fdc0 	bl	8009188 <HAL_GetTick>
 800e608:	4602      	mov	r2, r0
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	1ad3      	subs	r3, r2, r3
 800e60e:	2b02      	cmp	r3, #2
 800e610:	d901      	bls.n	800e616 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800e612:	2303      	movs	r3, #3
 800e614:	e057      	b.n	800e6c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e616:	4b10      	ldr	r3, [pc, #64]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d0f0      	beq.n	800e604 <HAL_RCC_OscConfig+0x478>
 800e622:	e04f      	b.n	800e6c4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e624:	4b0c      	ldr	r3, [pc, #48]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	4a0b      	ldr	r2, [pc, #44]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e62a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e62e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e630:	f7fa fdaa 	bl	8009188 <HAL_GetTick>
 800e634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e636:	e008      	b.n	800e64a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e638:	f7fa fda6 	bl	8009188 <HAL_GetTick>
 800e63c:	4602      	mov	r2, r0
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	1ad3      	subs	r3, r2, r3
 800e642:	2b02      	cmp	r3, #2
 800e644:	d901      	bls.n	800e64a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800e646:	2303      	movs	r3, #3
 800e648:	e03d      	b.n	800e6c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e64a:	4b03      	ldr	r3, [pc, #12]	; (800e658 <HAL_RCC_OscConfig+0x4cc>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e652:	2b00      	cmp	r3, #0
 800e654:	d1f0      	bne.n	800e638 <HAL_RCC_OscConfig+0x4ac>
 800e656:	e035      	b.n	800e6c4 <HAL_RCC_OscConfig+0x538>
 800e658:	40023800 	.word	0x40023800
 800e65c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800e660:	4b1b      	ldr	r3, [pc, #108]	; (800e6d0 <HAL_RCC_OscConfig+0x544>)
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	699b      	ldr	r3, [r3, #24]
 800e66a:	2b01      	cmp	r3, #1
 800e66c:	d028      	beq.n	800e6c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e678:	429a      	cmp	r2, r3
 800e67a:	d121      	bne.n	800e6c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e686:	429a      	cmp	r2, r3
 800e688:	d11a      	bne.n	800e6c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e68a:	68fa      	ldr	r2, [r7, #12]
 800e68c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e690:	4013      	ands	r3, r2
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e696:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e698:	4293      	cmp	r3, r2
 800e69a:	d111      	bne.n	800e6c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6a6:	085b      	lsrs	r3, r3, #1
 800e6a8:	3b01      	subs	r3, #1
 800e6aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d107      	bne.n	800e6c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d001      	beq.n	800e6c4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	e000      	b.n	800e6c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800e6c4:	2300      	movs	r3, #0
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3718      	adds	r7, #24
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	40023800 	.word	0x40023800

0800e6d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d101      	bne.n	800e6ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	e0d0      	b.n	800e88e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e6ec:	4b6a      	ldr	r3, [pc, #424]	; (800e898 <HAL_RCC_ClockConfig+0x1c4>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f003 030f 	and.w	r3, r3, #15
 800e6f4:	683a      	ldr	r2, [r7, #0]
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d910      	bls.n	800e71c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e6fa:	4b67      	ldr	r3, [pc, #412]	; (800e898 <HAL_RCC_ClockConfig+0x1c4>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f023 020f 	bic.w	r2, r3, #15
 800e702:	4965      	ldr	r1, [pc, #404]	; (800e898 <HAL_RCC_ClockConfig+0x1c4>)
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	4313      	orrs	r3, r2
 800e708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e70a:	4b63      	ldr	r3, [pc, #396]	; (800e898 <HAL_RCC_ClockConfig+0x1c4>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f003 030f 	and.w	r3, r3, #15
 800e712:	683a      	ldr	r2, [r7, #0]
 800e714:	429a      	cmp	r2, r3
 800e716:	d001      	beq.n	800e71c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800e718:	2301      	movs	r3, #1
 800e71a:	e0b8      	b.n	800e88e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f003 0302 	and.w	r3, r3, #2
 800e724:	2b00      	cmp	r3, #0
 800e726:	d020      	beq.n	800e76a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	f003 0304 	and.w	r3, r3, #4
 800e730:	2b00      	cmp	r3, #0
 800e732:	d005      	beq.n	800e740 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e734:	4b59      	ldr	r3, [pc, #356]	; (800e89c <HAL_RCC_ClockConfig+0x1c8>)
 800e736:	689b      	ldr	r3, [r3, #8]
 800e738:	4a58      	ldr	r2, [pc, #352]	; (800e89c <HAL_RCC_ClockConfig+0x1c8>)
 800e73a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e73e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f003 0308 	and.w	r3, r3, #8
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d005      	beq.n	800e758 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e74c:	4b53      	ldr	r3, [pc, #332]	; (800e89c <HAL_RCC_ClockConfig+0x1c8>)
 800e74e:	689b      	ldr	r3, [r3, #8]
 800e750:	4a52      	ldr	r2, [pc, #328]	; (800e89c <HAL_RCC_ClockConfig+0x1c8>)
 800e752:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e756:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e758:	4b50      	ldr	r3, [pc, #320]	; (800e89c <HAL_RCC_ClockConfig+0x1c8>)
 800e75a:	689b      	ldr	r3, [r3, #8]
 800e75c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	689b      	ldr	r3, [r3, #8]
 800e764:	494d      	ldr	r1, [pc, #308]	; (800e89c <HAL_RCC_ClockConfig+0x1c8>)
 800e766:	4313      	orrs	r3, r2
 800e768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f003 0301 	and.w	r3, r3, #1
 800e772:	2b00      	cmp	r3, #0
 800e774:	d040      	beq.n	800e7f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	d107      	bne.n	800e78e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e77e:	4b47      	ldr	r3, [pc, #284]	; (800e89c <HAL_RCC_ClockConfig+0x1c8>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e786:	2b00      	cmp	r3, #0
 800e788:	d115      	bne.n	800e7b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e78a:	2301      	movs	r3, #1
 800e78c:	e07f      	b.n	800e88e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	685b      	ldr	r3, [r3, #4]
 800e792:	2b02      	cmp	r3, #2
 800e794:	d107      	bne.n	800e7a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e796:	4b41      	ldr	r3, [pc, #260]	; (800e89c <HAL_RCC_ClockConfig+0x1c8>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d109      	bne.n	800e7b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	e073      	b.n	800e88e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e7a6:	4b3d      	ldr	r3, [pc, #244]	; (800e89c <HAL_RCC_ClockConfig+0x1c8>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f003 0302 	and.w	r3, r3, #2
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d101      	bne.n	800e7b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	e06b      	b.n	800e88e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e7b6:	4b39      	ldr	r3, [pc, #228]	; (800e89c <HAL_RCC_ClockConfig+0x1c8>)
 800e7b8:	689b      	ldr	r3, [r3, #8]
 800e7ba:	f023 0203 	bic.w	r2, r3, #3
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	685b      	ldr	r3, [r3, #4]
 800e7c2:	4936      	ldr	r1, [pc, #216]	; (800e89c <HAL_RCC_ClockConfig+0x1c8>)
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e7c8:	f7fa fcde 	bl	8009188 <HAL_GetTick>
 800e7cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e7ce:	e00a      	b.n	800e7e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e7d0:	f7fa fcda 	bl	8009188 <HAL_GetTick>
 800e7d4:	4602      	mov	r2, r0
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	1ad3      	subs	r3, r2, r3
 800e7da:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d901      	bls.n	800e7e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800e7e2:	2303      	movs	r3, #3
 800e7e4:	e053      	b.n	800e88e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e7e6:	4b2d      	ldr	r3, [pc, #180]	; (800e89c <HAL_RCC_ClockConfig+0x1c8>)
 800e7e8:	689b      	ldr	r3, [r3, #8]
 800e7ea:	f003 020c 	and.w	r2, r3, #12
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	685b      	ldr	r3, [r3, #4]
 800e7f2:	009b      	lsls	r3, r3, #2
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d1eb      	bne.n	800e7d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e7f8:	4b27      	ldr	r3, [pc, #156]	; (800e898 <HAL_RCC_ClockConfig+0x1c4>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f003 030f 	and.w	r3, r3, #15
 800e800:	683a      	ldr	r2, [r7, #0]
 800e802:	429a      	cmp	r2, r3
 800e804:	d210      	bcs.n	800e828 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e806:	4b24      	ldr	r3, [pc, #144]	; (800e898 <HAL_RCC_ClockConfig+0x1c4>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f023 020f 	bic.w	r2, r3, #15
 800e80e:	4922      	ldr	r1, [pc, #136]	; (800e898 <HAL_RCC_ClockConfig+0x1c4>)
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	4313      	orrs	r3, r2
 800e814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e816:	4b20      	ldr	r3, [pc, #128]	; (800e898 <HAL_RCC_ClockConfig+0x1c4>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f003 030f 	and.w	r3, r3, #15
 800e81e:	683a      	ldr	r2, [r7, #0]
 800e820:	429a      	cmp	r2, r3
 800e822:	d001      	beq.n	800e828 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800e824:	2301      	movs	r3, #1
 800e826:	e032      	b.n	800e88e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f003 0304 	and.w	r3, r3, #4
 800e830:	2b00      	cmp	r3, #0
 800e832:	d008      	beq.n	800e846 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e834:	4b19      	ldr	r3, [pc, #100]	; (800e89c <HAL_RCC_ClockConfig+0x1c8>)
 800e836:	689b      	ldr	r3, [r3, #8]
 800e838:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	68db      	ldr	r3, [r3, #12]
 800e840:	4916      	ldr	r1, [pc, #88]	; (800e89c <HAL_RCC_ClockConfig+0x1c8>)
 800e842:	4313      	orrs	r3, r2
 800e844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	f003 0308 	and.w	r3, r3, #8
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d009      	beq.n	800e866 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800e852:	4b12      	ldr	r3, [pc, #72]	; (800e89c <HAL_RCC_ClockConfig+0x1c8>)
 800e854:	689b      	ldr	r3, [r3, #8]
 800e856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	691b      	ldr	r3, [r3, #16]
 800e85e:	00db      	lsls	r3, r3, #3
 800e860:	490e      	ldr	r1, [pc, #56]	; (800e89c <HAL_RCC_ClockConfig+0x1c8>)
 800e862:	4313      	orrs	r3, r2
 800e864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800e866:	f000 f821 	bl	800e8ac <HAL_RCC_GetSysClockFreq>
 800e86a:	4602      	mov	r2, r0
 800e86c:	4b0b      	ldr	r3, [pc, #44]	; (800e89c <HAL_RCC_ClockConfig+0x1c8>)
 800e86e:	689b      	ldr	r3, [r3, #8]
 800e870:	091b      	lsrs	r3, r3, #4
 800e872:	f003 030f 	and.w	r3, r3, #15
 800e876:	490a      	ldr	r1, [pc, #40]	; (800e8a0 <HAL_RCC_ClockConfig+0x1cc>)
 800e878:	5ccb      	ldrb	r3, [r1, r3]
 800e87a:	fa22 f303 	lsr.w	r3, r2, r3
 800e87e:	4a09      	ldr	r2, [pc, #36]	; (800e8a4 <HAL_RCC_ClockConfig+0x1d0>)
 800e880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800e882:	4b09      	ldr	r3, [pc, #36]	; (800e8a8 <HAL_RCC_ClockConfig+0x1d4>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	4618      	mov	r0, r3
 800e888:	f7fa fc3a 	bl	8009100 <HAL_InitTick>

  return HAL_OK;
 800e88c:	2300      	movs	r3, #0
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3710      	adds	r7, #16
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	40023c00 	.word	0x40023c00
 800e89c:	40023800 	.word	0x40023800
 800e8a0:	080228bc 	.word	0x080228bc
 800e8a4:	20000230 	.word	0x20000230
 800e8a8:	20000234 	.word	0x20000234

0800e8ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e8ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e8b0:	b094      	sub	sp, #80	; 0x50
 800e8b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	647b      	str	r3, [r7, #68]	; 0x44
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e8bc:	2300      	movs	r3, #0
 800e8be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e8c4:	4b79      	ldr	r3, [pc, #484]	; (800eaac <HAL_RCC_GetSysClockFreq+0x200>)
 800e8c6:	689b      	ldr	r3, [r3, #8]
 800e8c8:	f003 030c 	and.w	r3, r3, #12
 800e8cc:	2b08      	cmp	r3, #8
 800e8ce:	d00d      	beq.n	800e8ec <HAL_RCC_GetSysClockFreq+0x40>
 800e8d0:	2b08      	cmp	r3, #8
 800e8d2:	f200 80e1 	bhi.w	800ea98 <HAL_RCC_GetSysClockFreq+0x1ec>
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d002      	beq.n	800e8e0 <HAL_RCC_GetSysClockFreq+0x34>
 800e8da:	2b04      	cmp	r3, #4
 800e8dc:	d003      	beq.n	800e8e6 <HAL_RCC_GetSysClockFreq+0x3a>
 800e8de:	e0db      	b.n	800ea98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e8e0:	4b73      	ldr	r3, [pc, #460]	; (800eab0 <HAL_RCC_GetSysClockFreq+0x204>)
 800e8e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800e8e4:	e0db      	b.n	800ea9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e8e6:	4b73      	ldr	r3, [pc, #460]	; (800eab4 <HAL_RCC_GetSysClockFreq+0x208>)
 800e8e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800e8ea:	e0d8      	b.n	800ea9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e8ec:	4b6f      	ldr	r3, [pc, #444]	; (800eaac <HAL_RCC_GetSysClockFreq+0x200>)
 800e8ee:	685b      	ldr	r3, [r3, #4]
 800e8f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e8f4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800e8f6:	4b6d      	ldr	r3, [pc, #436]	; (800eaac <HAL_RCC_GetSysClockFreq+0x200>)
 800e8f8:	685b      	ldr	r3, [r3, #4]
 800e8fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d063      	beq.n	800e9ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e902:	4b6a      	ldr	r3, [pc, #424]	; (800eaac <HAL_RCC_GetSysClockFreq+0x200>)
 800e904:	685b      	ldr	r3, [r3, #4]
 800e906:	099b      	lsrs	r3, r3, #6
 800e908:	2200      	movs	r2, #0
 800e90a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e90c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e914:	633b      	str	r3, [r7, #48]	; 0x30
 800e916:	2300      	movs	r3, #0
 800e918:	637b      	str	r3, [r7, #52]	; 0x34
 800e91a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e91e:	4622      	mov	r2, r4
 800e920:	462b      	mov	r3, r5
 800e922:	f04f 0000 	mov.w	r0, #0
 800e926:	f04f 0100 	mov.w	r1, #0
 800e92a:	0159      	lsls	r1, r3, #5
 800e92c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e930:	0150      	lsls	r0, r2, #5
 800e932:	4602      	mov	r2, r0
 800e934:	460b      	mov	r3, r1
 800e936:	4621      	mov	r1, r4
 800e938:	1a51      	subs	r1, r2, r1
 800e93a:	6139      	str	r1, [r7, #16]
 800e93c:	4629      	mov	r1, r5
 800e93e:	eb63 0301 	sbc.w	r3, r3, r1
 800e942:	617b      	str	r3, [r7, #20]
 800e944:	f04f 0200 	mov.w	r2, #0
 800e948:	f04f 0300 	mov.w	r3, #0
 800e94c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e950:	4659      	mov	r1, fp
 800e952:	018b      	lsls	r3, r1, #6
 800e954:	4651      	mov	r1, sl
 800e956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e95a:	4651      	mov	r1, sl
 800e95c:	018a      	lsls	r2, r1, #6
 800e95e:	4651      	mov	r1, sl
 800e960:	ebb2 0801 	subs.w	r8, r2, r1
 800e964:	4659      	mov	r1, fp
 800e966:	eb63 0901 	sbc.w	r9, r3, r1
 800e96a:	f04f 0200 	mov.w	r2, #0
 800e96e:	f04f 0300 	mov.w	r3, #0
 800e972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e97a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e97e:	4690      	mov	r8, r2
 800e980:	4699      	mov	r9, r3
 800e982:	4623      	mov	r3, r4
 800e984:	eb18 0303 	adds.w	r3, r8, r3
 800e988:	60bb      	str	r3, [r7, #8]
 800e98a:	462b      	mov	r3, r5
 800e98c:	eb49 0303 	adc.w	r3, r9, r3
 800e990:	60fb      	str	r3, [r7, #12]
 800e992:	f04f 0200 	mov.w	r2, #0
 800e996:	f04f 0300 	mov.w	r3, #0
 800e99a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e99e:	4629      	mov	r1, r5
 800e9a0:	024b      	lsls	r3, r1, #9
 800e9a2:	4621      	mov	r1, r4
 800e9a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e9a8:	4621      	mov	r1, r4
 800e9aa:	024a      	lsls	r2, r1, #9
 800e9ac:	4610      	mov	r0, r2
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e9b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e9bc:	f7f2 f99c 	bl	8000cf8 <__aeabi_uldivmod>
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	460b      	mov	r3, r1
 800e9c4:	4613      	mov	r3, r2
 800e9c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e9c8:	e058      	b.n	800ea7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e9ca:	4b38      	ldr	r3, [pc, #224]	; (800eaac <HAL_RCC_GetSysClockFreq+0x200>)
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	099b      	lsrs	r3, r3, #6
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	4611      	mov	r1, r2
 800e9d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e9da:	623b      	str	r3, [r7, #32]
 800e9dc:	2300      	movs	r3, #0
 800e9de:	627b      	str	r3, [r7, #36]	; 0x24
 800e9e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800e9e4:	4642      	mov	r2, r8
 800e9e6:	464b      	mov	r3, r9
 800e9e8:	f04f 0000 	mov.w	r0, #0
 800e9ec:	f04f 0100 	mov.w	r1, #0
 800e9f0:	0159      	lsls	r1, r3, #5
 800e9f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e9f6:	0150      	lsls	r0, r2, #5
 800e9f8:	4602      	mov	r2, r0
 800e9fa:	460b      	mov	r3, r1
 800e9fc:	4641      	mov	r1, r8
 800e9fe:	ebb2 0a01 	subs.w	sl, r2, r1
 800ea02:	4649      	mov	r1, r9
 800ea04:	eb63 0b01 	sbc.w	fp, r3, r1
 800ea08:	f04f 0200 	mov.w	r2, #0
 800ea0c:	f04f 0300 	mov.w	r3, #0
 800ea10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800ea14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800ea18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800ea1c:	ebb2 040a 	subs.w	r4, r2, sl
 800ea20:	eb63 050b 	sbc.w	r5, r3, fp
 800ea24:	f04f 0200 	mov.w	r2, #0
 800ea28:	f04f 0300 	mov.w	r3, #0
 800ea2c:	00eb      	lsls	r3, r5, #3
 800ea2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ea32:	00e2      	lsls	r2, r4, #3
 800ea34:	4614      	mov	r4, r2
 800ea36:	461d      	mov	r5, r3
 800ea38:	4643      	mov	r3, r8
 800ea3a:	18e3      	adds	r3, r4, r3
 800ea3c:	603b      	str	r3, [r7, #0]
 800ea3e:	464b      	mov	r3, r9
 800ea40:	eb45 0303 	adc.w	r3, r5, r3
 800ea44:	607b      	str	r3, [r7, #4]
 800ea46:	f04f 0200 	mov.w	r2, #0
 800ea4a:	f04f 0300 	mov.w	r3, #0
 800ea4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ea52:	4629      	mov	r1, r5
 800ea54:	028b      	lsls	r3, r1, #10
 800ea56:	4621      	mov	r1, r4
 800ea58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ea5c:	4621      	mov	r1, r4
 800ea5e:	028a      	lsls	r2, r1, #10
 800ea60:	4610      	mov	r0, r2
 800ea62:	4619      	mov	r1, r3
 800ea64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea66:	2200      	movs	r2, #0
 800ea68:	61bb      	str	r3, [r7, #24]
 800ea6a:	61fa      	str	r2, [r7, #28]
 800ea6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ea70:	f7f2 f942 	bl	8000cf8 <__aeabi_uldivmod>
 800ea74:	4602      	mov	r2, r0
 800ea76:	460b      	mov	r3, r1
 800ea78:	4613      	mov	r3, r2
 800ea7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ea7c:	4b0b      	ldr	r3, [pc, #44]	; (800eaac <HAL_RCC_GetSysClockFreq+0x200>)
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	0c1b      	lsrs	r3, r3, #16
 800ea82:	f003 0303 	and.w	r3, r3, #3
 800ea86:	3301      	adds	r3, #1
 800ea88:	005b      	lsls	r3, r3, #1
 800ea8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800ea8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ea8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea90:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ea96:	e002      	b.n	800ea9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ea98:	4b05      	ldr	r3, [pc, #20]	; (800eab0 <HAL_RCC_GetSysClockFreq+0x204>)
 800ea9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ea9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ea9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3750      	adds	r7, #80	; 0x50
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eaaa:	bf00      	nop
 800eaac:	40023800 	.word	0x40023800
 800eab0:	00f42400 	.word	0x00f42400
 800eab4:	007a1200 	.word	0x007a1200

0800eab8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800eab8:	b480      	push	{r7}
 800eaba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800eabc:	4b03      	ldr	r3, [pc, #12]	; (800eacc <HAL_RCC_GetHCLKFreq+0x14>)
 800eabe:	681b      	ldr	r3, [r3, #0]
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	46bd      	mov	sp, r7
 800eac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop
 800eacc:	20000230 	.word	0x20000230

0800ead0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ead4:	f7ff fff0 	bl	800eab8 <HAL_RCC_GetHCLKFreq>
 800ead8:	4602      	mov	r2, r0
 800eada:	4b05      	ldr	r3, [pc, #20]	; (800eaf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800eadc:	689b      	ldr	r3, [r3, #8]
 800eade:	0a9b      	lsrs	r3, r3, #10
 800eae0:	f003 0307 	and.w	r3, r3, #7
 800eae4:	4903      	ldr	r1, [pc, #12]	; (800eaf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800eae6:	5ccb      	ldrb	r3, [r1, r3]
 800eae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	40023800 	.word	0x40023800
 800eaf4:	080228cc 	.word	0x080228cc

0800eaf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800eafc:	f7ff ffdc 	bl	800eab8 <HAL_RCC_GetHCLKFreq>
 800eb00:	4602      	mov	r2, r0
 800eb02:	4b05      	ldr	r3, [pc, #20]	; (800eb18 <HAL_RCC_GetPCLK2Freq+0x20>)
 800eb04:	689b      	ldr	r3, [r3, #8]
 800eb06:	0b5b      	lsrs	r3, r3, #13
 800eb08:	f003 0307 	and.w	r3, r3, #7
 800eb0c:	4903      	ldr	r1, [pc, #12]	; (800eb1c <HAL_RCC_GetPCLK2Freq+0x24>)
 800eb0e:	5ccb      	ldrb	r3, [r1, r3]
 800eb10:	fa22 f303 	lsr.w	r3, r2, r3
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	40023800 	.word	0x40023800
 800eb1c:	080228cc 	.word	0x080228cc

0800eb20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b088      	sub	sp, #32
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800eb30:	2300      	movs	r3, #0
 800eb32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800eb34:	2300      	movs	r3, #0
 800eb36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f003 0301 	and.w	r3, r3, #1
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d012      	beq.n	800eb6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800eb44:	4b65      	ldr	r3, [pc, #404]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800eb46:	689b      	ldr	r3, [r3, #8]
 800eb48:	4a64      	ldr	r2, [pc, #400]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800eb4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800eb4e:	6093      	str	r3, [r2, #8]
 800eb50:	4b62      	ldr	r3, [pc, #392]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800eb52:	689a      	ldr	r2, [r3, #8]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb58:	4960      	ldr	r1, [pc, #384]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d101      	bne.n	800eb6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800eb66:	2301      	movs	r3, #1
 800eb68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d017      	beq.n	800eba6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800eb76:	4b59      	ldr	r3, [pc, #356]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800eb78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb84:	4955      	ldr	r1, [pc, #340]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800eb86:	4313      	orrs	r3, r2
 800eb88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb94:	d101      	bne.n	800eb9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800eb96:	2301      	movs	r3, #1
 800eb98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d101      	bne.n	800eba6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800eba2:	2301      	movs	r3, #1
 800eba4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d017      	beq.n	800ebe2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ebb2:	4b4a      	ldr	r3, [pc, #296]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ebb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebc0:	4946      	ldr	r1, [pc, #280]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ebd0:	d101      	bne.n	800ebd6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d101      	bne.n	800ebe2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800ebde:	2301      	movs	r3, #1
 800ebe0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f003 0320 	and.w	r3, r3, #32
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	f000 808b 	beq.w	800ed06 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ebf0:	4b3a      	ldr	r3, [pc, #232]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ebf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebf4:	4a39      	ldr	r2, [pc, #228]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ebf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ebfa:	6413      	str	r3, [r2, #64]	; 0x40
 800ebfc:	4b37      	ldr	r3, [pc, #220]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ebfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ec04:	60fb      	str	r3, [r7, #12]
 800ec06:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ec08:	4b35      	ldr	r3, [pc, #212]	; (800ece0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4a34      	ldr	r2, [pc, #208]	; (800ece0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800ec0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ec12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ec14:	f7fa fab8 	bl	8009188 <HAL_GetTick>
 800ec18:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ec1a:	e008      	b.n	800ec2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ec1c:	f7fa fab4 	bl	8009188 <HAL_GetTick>
 800ec20:	4602      	mov	r2, r0
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	1ad3      	subs	r3, r2, r3
 800ec26:	2b64      	cmp	r3, #100	; 0x64
 800ec28:	d901      	bls.n	800ec2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ec2a:	2303      	movs	r3, #3
 800ec2c:	e2bc      	b.n	800f1a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ec2e:	4b2c      	ldr	r3, [pc, #176]	; (800ece0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d0f0      	beq.n	800ec1c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ec3a:	4b28      	ldr	r3, [pc, #160]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ec3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec42:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d035      	beq.n	800ecb6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec52:	693a      	ldr	r2, [r7, #16]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d02e      	beq.n	800ecb6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ec58:	4b20      	ldr	r3, [pc, #128]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ec5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec60:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ec62:	4b1e      	ldr	r3, [pc, #120]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ec64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec66:	4a1d      	ldr	r2, [pc, #116]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ec68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ec6c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ec6e:	4b1b      	ldr	r3, [pc, #108]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ec70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec72:	4a1a      	ldr	r2, [pc, #104]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ec74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ec78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800ec7a:	4a18      	ldr	r2, [pc, #96]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ec80:	4b16      	ldr	r3, [pc, #88]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ec82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec84:	f003 0301 	and.w	r3, r3, #1
 800ec88:	2b01      	cmp	r3, #1
 800ec8a:	d114      	bne.n	800ecb6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec8c:	f7fa fa7c 	bl	8009188 <HAL_GetTick>
 800ec90:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ec92:	e00a      	b.n	800ecaa <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ec94:	f7fa fa78 	bl	8009188 <HAL_GetTick>
 800ec98:	4602      	mov	r2, r0
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	1ad3      	subs	r3, r2, r3
 800ec9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d901      	bls.n	800ecaa <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800eca6:	2303      	movs	r3, #3
 800eca8:	e27e      	b.n	800f1a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ecaa:	4b0c      	ldr	r3, [pc, #48]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ecac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecae:	f003 0302 	and.w	r3, r3, #2
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d0ee      	beq.n	800ec94 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ecbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ecc2:	d111      	bne.n	800ece8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800ecc4:	4b05      	ldr	r3, [pc, #20]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ecc6:	689b      	ldr	r3, [r3, #8]
 800ecc8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800ecd0:	4b04      	ldr	r3, [pc, #16]	; (800ece4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ecd2:	400b      	ands	r3, r1
 800ecd4:	4901      	ldr	r1, [pc, #4]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	608b      	str	r3, [r1, #8]
 800ecda:	e00b      	b.n	800ecf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800ecdc:	40023800 	.word	0x40023800
 800ece0:	40007000 	.word	0x40007000
 800ece4:	0ffffcff 	.word	0x0ffffcff
 800ece8:	4ba4      	ldr	r3, [pc, #656]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ecea:	689b      	ldr	r3, [r3, #8]
 800ecec:	4aa3      	ldr	r2, [pc, #652]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ecee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ecf2:	6093      	str	r3, [r2, #8]
 800ecf4:	4ba1      	ldr	r3, [pc, #644]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ecf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ed00:	499e      	ldr	r1, [pc, #632]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ed02:	4313      	orrs	r3, r2
 800ed04:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f003 0310 	and.w	r3, r3, #16
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d010      	beq.n	800ed34 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ed12:	4b9a      	ldr	r3, [pc, #616]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ed14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed18:	4a98      	ldr	r2, [pc, #608]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ed1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ed1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800ed22:	4b96      	ldr	r3, [pc, #600]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ed24:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed2c:	4993      	ldr	r1, [pc, #588]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ed2e:	4313      	orrs	r3, r2
 800ed30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d00a      	beq.n	800ed56 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ed40:	4b8e      	ldr	r3, [pc, #568]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ed42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed4e:	498b      	ldr	r1, [pc, #556]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ed50:	4313      	orrs	r3, r2
 800ed52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d00a      	beq.n	800ed78 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ed62:	4b86      	ldr	r3, [pc, #536]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ed64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed70:	4982      	ldr	r1, [pc, #520]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ed72:	4313      	orrs	r3, r2
 800ed74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d00a      	beq.n	800ed9a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ed84:	4b7d      	ldr	r3, [pc, #500]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ed86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed92:	497a      	ldr	r1, [pc, #488]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ed94:	4313      	orrs	r3, r2
 800ed96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d00a      	beq.n	800edbc <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800eda6:	4b75      	ldr	r3, [pc, #468]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eda8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edac:	f023 0203 	bic.w	r2, r3, #3
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edb4:	4971      	ldr	r1, [pc, #452]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800edb6:	4313      	orrs	r3, r2
 800edb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d00a      	beq.n	800edde <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800edc8:	4b6c      	ldr	r3, [pc, #432]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800edca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edce:	f023 020c 	bic.w	r2, r3, #12
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edd6:	4969      	ldr	r1, [pc, #420]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800edd8:	4313      	orrs	r3, r2
 800edda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d00a      	beq.n	800ee00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800edea:	4b64      	ldr	r3, [pc, #400]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800edec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edf0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edf8:	4960      	ldr	r1, [pc, #384]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800edfa:	4313      	orrs	r3, r2
 800edfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d00a      	beq.n	800ee22 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ee0c:	4b5b      	ldr	r3, [pc, #364]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ee0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee1a:	4958      	ldr	r1, [pc, #352]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ee1c:	4313      	orrs	r3, r2
 800ee1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d00a      	beq.n	800ee44 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ee2e:	4b53      	ldr	r3, [pc, #332]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ee30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee3c:	494f      	ldr	r1, [pc, #316]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ee3e:	4313      	orrs	r3, r2
 800ee40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d00a      	beq.n	800ee66 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ee50:	4b4a      	ldr	r3, [pc, #296]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ee52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee5e:	4947      	ldr	r1, [pc, #284]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ee60:	4313      	orrs	r3, r2
 800ee62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d00a      	beq.n	800ee88 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800ee72:	4b42      	ldr	r3, [pc, #264]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ee74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee80:	493e      	ldr	r1, [pc, #248]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ee82:	4313      	orrs	r3, r2
 800ee84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d00a      	beq.n	800eeaa <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800ee94:	4b39      	ldr	r3, [pc, #228]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ee96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eea2:	4936      	ldr	r1, [pc, #216]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eea4:	4313      	orrs	r3, r2
 800eea6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d011      	beq.n	800eeda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800eeb6:	4b31      	ldr	r3, [pc, #196]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eeb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eebc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eec4:	492d      	ldr	r1, [pc, #180]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eec6:	4313      	orrs	r3, r2
 800eec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eed0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eed4:	d101      	bne.n	800eeda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800eed6:	2301      	movs	r3, #1
 800eed8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d00a      	beq.n	800eefc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800eee6:	4b25      	ldr	r3, [pc, #148]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eeec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eef4:	4921      	ldr	r1, [pc, #132]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eef6:	4313      	orrs	r3, r2
 800eef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d00a      	beq.n	800ef1e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ef08:	4b1c      	ldr	r3, [pc, #112]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ef0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef16:	4919      	ldr	r1, [pc, #100]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ef18:	4313      	orrs	r3, r2
 800ef1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d00a      	beq.n	800ef40 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800ef2a:	4b14      	ldr	r3, [pc, #80]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ef2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef30:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef38:	4910      	ldr	r1, [pc, #64]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ef3a:	4313      	orrs	r3, r2
 800ef3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ef40:	69fb      	ldr	r3, [r7, #28]
 800ef42:	2b01      	cmp	r3, #1
 800ef44:	d006      	beq.n	800ef54 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	f000 809d 	beq.w	800f08e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ef54:	4b09      	ldr	r3, [pc, #36]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	4a08      	ldr	r2, [pc, #32]	; (800ef7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ef5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ef5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ef60:	f7fa f912 	bl	8009188 <HAL_GetTick>
 800ef64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ef66:	e00b      	b.n	800ef80 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ef68:	f7fa f90e 	bl	8009188 <HAL_GetTick>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	1ad3      	subs	r3, r2, r3
 800ef72:	2b64      	cmp	r3, #100	; 0x64
 800ef74:	d904      	bls.n	800ef80 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ef76:	2303      	movs	r3, #3
 800ef78:	e116      	b.n	800f1a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800ef7a:	bf00      	nop
 800ef7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ef80:	4b8b      	ldr	r3, [pc, #556]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d1ed      	bne.n	800ef68 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	f003 0301 	and.w	r3, r3, #1
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d017      	beq.n	800efc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d113      	bne.n	800efc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800efa0:	4b83      	ldr	r3, [pc, #524]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800efa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efa6:	0e1b      	lsrs	r3, r3, #24
 800efa8:	f003 030f 	and.w	r3, r3, #15
 800efac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	019a      	lsls	r2, r3, #6
 800efb4:	693b      	ldr	r3, [r7, #16]
 800efb6:	061b      	lsls	r3, r3, #24
 800efb8:	431a      	orrs	r2, r3
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	689b      	ldr	r3, [r3, #8]
 800efbe:	071b      	lsls	r3, r3, #28
 800efc0:	497b      	ldr	r1, [pc, #492]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800efc2:	4313      	orrs	r3, r2
 800efc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d004      	beq.n	800efde <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800efdc:	d00a      	beq.n	800eff4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d024      	beq.n	800f034 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eff2:	d11f      	bne.n	800f034 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800eff4:	4b6e      	ldr	r3, [pc, #440]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800eff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800effa:	0f1b      	lsrs	r3, r3, #28
 800effc:	f003 0307 	and.w	r3, r3, #7
 800f000:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	685b      	ldr	r3, [r3, #4]
 800f006:	019a      	lsls	r2, r3, #6
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	68db      	ldr	r3, [r3, #12]
 800f00c:	061b      	lsls	r3, r3, #24
 800f00e:	431a      	orrs	r2, r3
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	071b      	lsls	r3, r3, #28
 800f014:	4966      	ldr	r1, [pc, #408]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800f016:	4313      	orrs	r3, r2
 800f018:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800f01c:	4b64      	ldr	r3, [pc, #400]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800f01e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f022:	f023 021f 	bic.w	r2, r3, #31
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	69db      	ldr	r3, [r3, #28]
 800f02a:	3b01      	subs	r3, #1
 800f02c:	4960      	ldr	r1, [pc, #384]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800f02e:	4313      	orrs	r3, r2
 800f030:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d00d      	beq.n	800f05c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	019a      	lsls	r2, r3, #6
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	68db      	ldr	r3, [r3, #12]
 800f04a:	061b      	lsls	r3, r3, #24
 800f04c:	431a      	orrs	r2, r3
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	689b      	ldr	r3, [r3, #8]
 800f052:	071b      	lsls	r3, r3, #28
 800f054:	4956      	ldr	r1, [pc, #344]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800f056:	4313      	orrs	r3, r2
 800f058:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800f05c:	4b54      	ldr	r3, [pc, #336]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	4a53      	ldr	r2, [pc, #332]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800f062:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f068:	f7fa f88e 	bl	8009188 <HAL_GetTick>
 800f06c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f06e:	e008      	b.n	800f082 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800f070:	f7fa f88a 	bl	8009188 <HAL_GetTick>
 800f074:	4602      	mov	r2, r0
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	1ad3      	subs	r3, r2, r3
 800f07a:	2b64      	cmp	r3, #100	; 0x64
 800f07c:	d901      	bls.n	800f082 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f07e:	2303      	movs	r3, #3
 800f080:	e092      	b.n	800f1a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f082:	4b4b      	ldr	r3, [pc, #300]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d0f0      	beq.n	800f070 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800f08e:	69bb      	ldr	r3, [r7, #24]
 800f090:	2b01      	cmp	r3, #1
 800f092:	f040 8088 	bne.w	800f1a6 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800f096:	4b46      	ldr	r3, [pc, #280]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	4a45      	ldr	r2, [pc, #276]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800f09c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f0a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f0a2:	f7fa f871 	bl	8009188 <HAL_GetTick>
 800f0a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f0a8:	e008      	b.n	800f0bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800f0aa:	f7fa f86d 	bl	8009188 <HAL_GetTick>
 800f0ae:	4602      	mov	r2, r0
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	1ad3      	subs	r3, r2, r3
 800f0b4:	2b64      	cmp	r3, #100	; 0x64
 800f0b6:	d901      	bls.n	800f0bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f0b8:	2303      	movs	r3, #3
 800f0ba:	e075      	b.n	800f1a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f0bc:	4b3c      	ldr	r3, [pc, #240]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f0c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f0c8:	d0ef      	beq.n	800f0aa <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d003      	beq.n	800f0de <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d009      	beq.n	800f0f2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d024      	beq.n	800f134 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d120      	bne.n	800f134 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800f0f2:	4b2f      	ldr	r3, [pc, #188]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800f0f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0f8:	0c1b      	lsrs	r3, r3, #16
 800f0fa:	f003 0303 	and.w	r3, r3, #3
 800f0fe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	691b      	ldr	r3, [r3, #16]
 800f104:	019a      	lsls	r2, r3, #6
 800f106:	693b      	ldr	r3, [r7, #16]
 800f108:	041b      	lsls	r3, r3, #16
 800f10a:	431a      	orrs	r2, r3
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	695b      	ldr	r3, [r3, #20]
 800f110:	061b      	lsls	r3, r3, #24
 800f112:	4927      	ldr	r1, [pc, #156]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800f114:	4313      	orrs	r3, r2
 800f116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800f11a:	4b25      	ldr	r3, [pc, #148]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800f11c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f120:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6a1b      	ldr	r3, [r3, #32]
 800f128:	3b01      	subs	r3, #1
 800f12a:	021b      	lsls	r3, r3, #8
 800f12c:	4920      	ldr	r1, [pc, #128]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800f12e:	4313      	orrs	r3, r2
 800f130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d018      	beq.n	800f172 <HAL_RCCEx_PeriphCLKConfig+0x652>
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f148:	d113      	bne.n	800f172 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f14a:	4b19      	ldr	r3, [pc, #100]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800f14c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f150:	0e1b      	lsrs	r3, r3, #24
 800f152:	f003 030f 	and.w	r3, r3, #15
 800f156:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	691b      	ldr	r3, [r3, #16]
 800f15c:	019a      	lsls	r2, r3, #6
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	699b      	ldr	r3, [r3, #24]
 800f162:	041b      	lsls	r3, r3, #16
 800f164:	431a      	orrs	r2, r3
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	061b      	lsls	r3, r3, #24
 800f16a:	4911      	ldr	r1, [pc, #68]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800f16c:	4313      	orrs	r3, r2
 800f16e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800f172:	4b0f      	ldr	r3, [pc, #60]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	4a0e      	ldr	r2, [pc, #56]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800f178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f17c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f17e:	f7fa f803 	bl	8009188 <HAL_GetTick>
 800f182:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800f184:	e008      	b.n	800f198 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800f186:	f7f9 ffff 	bl	8009188 <HAL_GetTick>
 800f18a:	4602      	mov	r2, r0
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	1ad3      	subs	r3, r2, r3
 800f190:	2b64      	cmp	r3, #100	; 0x64
 800f192:	d901      	bls.n	800f198 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f194:	2303      	movs	r3, #3
 800f196:	e007      	b.n	800f1a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800f198:	4b05      	ldr	r3, [pc, #20]	; (800f1b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f1a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f1a4:	d1ef      	bne.n	800f186 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800f1a6:	2300      	movs	r3, #0
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3720      	adds	r7, #32
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}
 800f1b0:	40023800 	.word	0x40023800

0800f1b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d101      	bne.n	800f1c6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	e081      	b.n	800f2ca <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	7f5b      	ldrb	r3, [r3, #29]
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d105      	bne.n	800f1dc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f7f9 f83e 	bl	8008258 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2202      	movs	r2, #2
 800f1e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	22ca      	movs	r2, #202	; 0xca
 800f1e8:	625a      	str	r2, [r3, #36]	; 0x24
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	2253      	movs	r2, #83	; 0x53
 800f1f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f000 faac 	bl	800f750 <RTC_EnterInitMode>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d008      	beq.n	800f210 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	22ff      	movs	r2, #255	; 0xff
 800f204:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2204      	movs	r2, #4
 800f20a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800f20c:	2301      	movs	r3, #1
 800f20e:	e05c      	b.n	800f2ca <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	6899      	ldr	r1, [r3, #8]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	4b2e      	ldr	r3, [pc, #184]	; (800f2d4 <HAL_RTC_Init+0x120>)
 800f21c:	400b      	ands	r3, r1
 800f21e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	6899      	ldr	r1, [r3, #8]
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	685a      	ldr	r2, [r3, #4]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	691b      	ldr	r3, [r3, #16]
 800f22e:	431a      	orrs	r2, r3
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	695b      	ldr	r3, [r3, #20]
 800f234:	431a      	orrs	r2, r3
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	430a      	orrs	r2, r1
 800f23c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	687a      	ldr	r2, [r7, #4]
 800f244:	68d2      	ldr	r2, [r2, #12]
 800f246:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	6919      	ldr	r1, [r3, #16]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	689b      	ldr	r3, [r3, #8]
 800f252:	041a      	lsls	r2, r3, #16
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	430a      	orrs	r2, r1
 800f25a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	68da      	ldr	r2, [r3, #12]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f26a:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	689b      	ldr	r3, [r3, #8]
 800f272:	f003 0320 	and.w	r3, r3, #32
 800f276:	2b00      	cmp	r3, #0
 800f278:	d10e      	bne.n	800f298 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f000 fa40 	bl	800f700 <HAL_RTC_WaitForSynchro>
 800f280:	4603      	mov	r3, r0
 800f282:	2b00      	cmp	r3, #0
 800f284:	d008      	beq.n	800f298 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	22ff      	movs	r2, #255	; 0xff
 800f28c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2204      	movs	r2, #4
 800f292:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800f294:	2301      	movs	r3, #1
 800f296:	e018      	b.n	800f2ca <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f022 0208 	bic.w	r2, r2, #8
 800f2a6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	699a      	ldr	r2, [r3, #24]
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	430a      	orrs	r2, r1
 800f2b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	22ff      	movs	r2, #255	; 0xff
 800f2c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2201      	movs	r2, #1
 800f2c6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800f2c8:	2300      	movs	r3, #0
  }
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3708      	adds	r7, #8
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}
 800f2d2:	bf00      	nop
 800f2d4:	ff8fffbf 	.word	0xff8fffbf

0800f2d8 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f2d8:	b590      	push	{r4, r7, lr}
 800f2da:	b087      	sub	sp, #28
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	7f1b      	ldrb	r3, [r3, #28]
 800f2ec:	2b01      	cmp	r3, #1
 800f2ee:	d101      	bne.n	800f2f4 <HAL_RTC_SetTime+0x1c>
 800f2f0:	2302      	movs	r3, #2
 800f2f2:	e0a8      	b.n	800f446 <HAL_RTC_SetTime+0x16e>
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	2202      	movs	r2, #2
 800f2fe:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d126      	bne.n	800f354 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	689b      	ldr	r3, [r3, #8]
 800f30c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f310:	2b00      	cmp	r3, #0
 800f312:	d102      	bne.n	800f31a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	2200      	movs	r2, #0
 800f318:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	4618      	mov	r0, r3
 800f320:	f000 fa42 	bl	800f7a8 <RTC_ByteToBcd2>
 800f324:	4603      	mov	r3, r0
 800f326:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	785b      	ldrb	r3, [r3, #1]
 800f32c:	4618      	mov	r0, r3
 800f32e:	f000 fa3b 	bl	800f7a8 <RTC_ByteToBcd2>
 800f332:	4603      	mov	r3, r0
 800f334:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800f336:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	789b      	ldrb	r3, [r3, #2]
 800f33c:	4618      	mov	r0, r3
 800f33e:	f000 fa33 	bl	800f7a8 <RTC_ByteToBcd2>
 800f342:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800f344:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	7b1b      	ldrb	r3, [r3, #12]
 800f34c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800f34e:	4313      	orrs	r3, r2
 800f350:	617b      	str	r3, [r7, #20]
 800f352:	e018      	b.n	800f386 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	689b      	ldr	r3, [r3, #8]
 800f35a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d102      	bne.n	800f368 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	2200      	movs	r2, #0
 800f366:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	785b      	ldrb	r3, [r3, #1]
 800f372:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800f374:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800f376:	68ba      	ldr	r2, [r7, #8]
 800f378:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800f37a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	7b1b      	ldrb	r3, [r3, #12]
 800f380:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800f382:	4313      	orrs	r3, r2
 800f384:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	22ca      	movs	r2, #202	; 0xca
 800f38c:	625a      	str	r2, [r3, #36]	; 0x24
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	2253      	movs	r2, #83	; 0x53
 800f394:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800f396:	68f8      	ldr	r0, [r7, #12]
 800f398:	f000 f9da 	bl	800f750 <RTC_EnterInitMode>
 800f39c:	4603      	mov	r3, r0
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d00b      	beq.n	800f3ba <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	22ff      	movs	r2, #255	; 0xff
 800f3a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	2204      	movs	r2, #4
 800f3ae:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	e045      	b.n	800f446 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681a      	ldr	r2, [r3, #0]
 800f3be:	6979      	ldr	r1, [r7, #20]
 800f3c0:	4b23      	ldr	r3, [pc, #140]	; (800f450 <HAL_RTC_SetTime+0x178>)
 800f3c2:	400b      	ands	r3, r1
 800f3c4:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	689a      	ldr	r2, [r3, #8]
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f3d4:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	6899      	ldr	r1, [r3, #8]
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	691a      	ldr	r2, [r3, #16]
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	695b      	ldr	r3, [r3, #20]
 800f3e4:	431a      	orrs	r2, r3
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	430a      	orrs	r2, r1
 800f3ec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	68da      	ldr	r2, [r3, #12]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f3fc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	689b      	ldr	r3, [r3, #8]
 800f404:	f003 0320 	and.w	r3, r3, #32
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d111      	bne.n	800f430 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f40c:	68f8      	ldr	r0, [r7, #12]
 800f40e:	f000 f977 	bl	800f700 <HAL_RTC_WaitForSynchro>
 800f412:	4603      	mov	r3, r0
 800f414:	2b00      	cmp	r3, #0
 800f416:	d00b      	beq.n	800f430 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	22ff      	movs	r2, #255	; 0xff
 800f41e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2204      	movs	r2, #4
 800f424:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2200      	movs	r2, #0
 800f42a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800f42c:	2301      	movs	r3, #1
 800f42e:	e00a      	b.n	800f446 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	22ff      	movs	r2, #255	; 0xff
 800f436:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	2201      	movs	r2, #1
 800f43c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	2200      	movs	r2, #0
 800f442:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800f444:	2300      	movs	r3, #0
  }
}
 800f446:	4618      	mov	r0, r3
 800f448:	371c      	adds	r7, #28
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd90      	pop	{r4, r7, pc}
 800f44e:	bf00      	nop
 800f450:	007f7f7f 	.word	0x007f7f7f

0800f454 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b086      	sub	sp, #24
 800f458:	af00      	add	r7, sp, #0
 800f45a:	60f8      	str	r0, [r7, #12]
 800f45c:	60b9      	str	r1, [r7, #8]
 800f45e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800f460:	2300      	movs	r3, #0
 800f462:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	691b      	ldr	r3, [r3, #16]
 800f474:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	681a      	ldr	r2, [r3, #0]
 800f482:	4b22      	ldr	r3, [pc, #136]	; (800f50c <HAL_RTC_GetTime+0xb8>)
 800f484:	4013      	ands	r3, r2
 800f486:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	0c1b      	lsrs	r3, r3, #16
 800f48c:	b2db      	uxtb	r3, r3
 800f48e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f492:	b2da      	uxtb	r2, r3
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	0a1b      	lsrs	r3, r3, #8
 800f49c:	b2db      	uxtb	r3, r3
 800f49e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4a2:	b2da      	uxtb	r2, r3
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	b2db      	uxtb	r3, r3
 800f4ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4b0:	b2da      	uxtb	r2, r3
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	0c1b      	lsrs	r3, r3, #16
 800f4ba:	b2db      	uxtb	r3, r3
 800f4bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4c0:	b2da      	uxtb	r2, r3
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d11a      	bne.n	800f502 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	781b      	ldrb	r3, [r3, #0]
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f000 f987 	bl	800f7e4 <RTC_Bcd2ToByte>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	461a      	mov	r2, r3
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	785b      	ldrb	r3, [r3, #1]
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f000 f97e 	bl	800f7e4 <RTC_Bcd2ToByte>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	461a      	mov	r2, r3
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	789b      	ldrb	r3, [r3, #2]
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f000 f975 	bl	800f7e4 <RTC_Bcd2ToByte>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800f502:	2300      	movs	r3, #0
}
 800f504:	4618      	mov	r0, r3
 800f506:	3718      	adds	r7, #24
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}
 800f50c:	007f7f7f 	.word	0x007f7f7f

0800f510 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f510:	b590      	push	{r4, r7, lr}
 800f512:	b087      	sub	sp, #28
 800f514:	af00      	add	r7, sp, #0
 800f516:	60f8      	str	r0, [r7, #12]
 800f518:	60b9      	str	r1, [r7, #8]
 800f51a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800f51c:	2300      	movs	r3, #0
 800f51e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	7f1b      	ldrb	r3, [r3, #28]
 800f524:	2b01      	cmp	r3, #1
 800f526:	d101      	bne.n	800f52c <HAL_RTC_SetDate+0x1c>
 800f528:	2302      	movs	r3, #2
 800f52a:	e092      	b.n	800f652 <HAL_RTC_SetDate+0x142>
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	2201      	movs	r2, #1
 800f530:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	2202      	movs	r2, #2
 800f536:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d10e      	bne.n	800f55c <HAL_RTC_SetDate+0x4c>
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	785b      	ldrb	r3, [r3, #1]
 800f542:	f003 0310 	and.w	r3, r3, #16
 800f546:	2b00      	cmp	r3, #0
 800f548:	d008      	beq.n	800f55c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	785b      	ldrb	r3, [r3, #1]
 800f54e:	f023 0310 	bic.w	r3, r3, #16
 800f552:	b2db      	uxtb	r3, r3
 800f554:	330a      	adds	r3, #10
 800f556:	b2da      	uxtb	r2, r3
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d11c      	bne.n	800f59c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	78db      	ldrb	r3, [r3, #3]
 800f566:	4618      	mov	r0, r3
 800f568:	f000 f91e 	bl	800f7a8 <RTC_ByteToBcd2>
 800f56c:	4603      	mov	r3, r0
 800f56e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	785b      	ldrb	r3, [r3, #1]
 800f574:	4618      	mov	r0, r3
 800f576:	f000 f917 	bl	800f7a8 <RTC_ByteToBcd2>
 800f57a:	4603      	mov	r3, r0
 800f57c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800f57e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	789b      	ldrb	r3, [r3, #2]
 800f584:	4618      	mov	r0, r3
 800f586:	f000 f90f 	bl	800f7a8 <RTC_ByteToBcd2>
 800f58a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800f58c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800f596:	4313      	orrs	r3, r2
 800f598:	617b      	str	r3, [r7, #20]
 800f59a:	e00e      	b.n	800f5ba <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	78db      	ldrb	r3, [r3, #3]
 800f5a0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	785b      	ldrb	r3, [r3, #1]
 800f5a6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800f5a8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800f5aa:	68ba      	ldr	r2, [r7, #8]
 800f5ac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800f5ae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800f5b6:	4313      	orrs	r3, r2
 800f5b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	22ca      	movs	r2, #202	; 0xca
 800f5c0:	625a      	str	r2, [r3, #36]	; 0x24
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	2253      	movs	r2, #83	; 0x53
 800f5c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800f5ca:	68f8      	ldr	r0, [r7, #12]
 800f5cc:	f000 f8c0 	bl	800f750 <RTC_EnterInitMode>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d00b      	beq.n	800f5ee <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	22ff      	movs	r2, #255	; 0xff
 800f5dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2204      	movs	r2, #4
 800f5e2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	e031      	b.n	800f652 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	681a      	ldr	r2, [r3, #0]
 800f5f2:	6979      	ldr	r1, [r7, #20]
 800f5f4:	4b19      	ldr	r3, [pc, #100]	; (800f65c <HAL_RTC_SetDate+0x14c>)
 800f5f6:	400b      	ands	r3, r1
 800f5f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	68da      	ldr	r2, [r3, #12]
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f608:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	689b      	ldr	r3, [r3, #8]
 800f610:	f003 0320 	and.w	r3, r3, #32
 800f614:	2b00      	cmp	r3, #0
 800f616:	d111      	bne.n	800f63c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f618:	68f8      	ldr	r0, [r7, #12]
 800f61a:	f000 f871 	bl	800f700 <HAL_RTC_WaitForSynchro>
 800f61e:	4603      	mov	r3, r0
 800f620:	2b00      	cmp	r3, #0
 800f622:	d00b      	beq.n	800f63c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	22ff      	movs	r2, #255	; 0xff
 800f62a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2204      	movs	r2, #4
 800f630:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	2200      	movs	r2, #0
 800f636:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800f638:	2301      	movs	r3, #1
 800f63a:	e00a      	b.n	800f652 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	22ff      	movs	r2, #255	; 0xff
 800f642:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	2201      	movs	r2, #1
 800f648:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	2200      	movs	r2, #0
 800f64e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800f650:	2300      	movs	r3, #0
  }
}
 800f652:	4618      	mov	r0, r3
 800f654:	371c      	adds	r7, #28
 800f656:	46bd      	mov	sp, r7
 800f658:	bd90      	pop	{r4, r7, pc}
 800f65a:	bf00      	nop
 800f65c:	00ffff3f 	.word	0x00ffff3f

0800f660 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b086      	sub	sp, #24
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800f66c:	2300      	movs	r3, #0
 800f66e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	685a      	ldr	r2, [r3, #4]
 800f676:	4b21      	ldr	r3, [pc, #132]	; (800f6fc <HAL_RTC_GetDate+0x9c>)
 800f678:	4013      	ands	r3, r2
 800f67a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	0c1b      	lsrs	r3, r3, #16
 800f680:	b2da      	uxtb	r2, r3
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	0a1b      	lsrs	r3, r3, #8
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	f003 031f 	and.w	r3, r3, #31
 800f690:	b2da      	uxtb	r2, r3
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	b2db      	uxtb	r3, r3
 800f69a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f69e:	b2da      	uxtb	r2, r3
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	0b5b      	lsrs	r3, r3, #13
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	f003 0307 	and.w	r3, r3, #7
 800f6ae:	b2da      	uxtb	r2, r3
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d11a      	bne.n	800f6f0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	78db      	ldrb	r3, [r3, #3]
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f000 f890 	bl	800f7e4 <RTC_Bcd2ToByte>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	461a      	mov	r2, r3
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	785b      	ldrb	r3, [r3, #1]
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f000 f887 	bl	800f7e4 <RTC_Bcd2ToByte>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	461a      	mov	r2, r3
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	789b      	ldrb	r3, [r3, #2]
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f000 f87e 	bl	800f7e4 <RTC_Bcd2ToByte>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800f6f0:	2300      	movs	r3, #0
}
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	3718      	adds	r7, #24
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
 800f6fa:	bf00      	nop
 800f6fc:	00ffff3f 	.word	0x00ffff3f

0800f700 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800f708:	2300      	movs	r3, #0
 800f70a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	68da      	ldr	r2, [r3, #12]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800f71a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f71c:	f7f9 fd34 	bl	8009188 <HAL_GetTick>
 800f720:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800f722:	e009      	b.n	800f738 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800f724:	f7f9 fd30 	bl	8009188 <HAL_GetTick>
 800f728:	4602      	mov	r2, r0
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	1ad3      	subs	r3, r2, r3
 800f72e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f732:	d901      	bls.n	800f738 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800f734:	2303      	movs	r3, #3
 800f736:	e007      	b.n	800f748 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	68db      	ldr	r3, [r3, #12]
 800f73e:	f003 0320 	and.w	r3, r3, #32
 800f742:	2b00      	cmp	r3, #0
 800f744:	d0ee      	beq.n	800f724 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800f746:	2300      	movs	r3, #0
}
 800f748:	4618      	mov	r0, r3
 800f74a:	3710      	adds	r7, #16
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}

0800f750 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b084      	sub	sp, #16
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800f758:	2300      	movs	r3, #0
 800f75a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	68db      	ldr	r3, [r3, #12]
 800f762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f766:	2b00      	cmp	r3, #0
 800f768:	d119      	bne.n	800f79e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f772:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f774:	f7f9 fd08 	bl	8009188 <HAL_GetTick>
 800f778:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800f77a:	e009      	b.n	800f790 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800f77c:	f7f9 fd04 	bl	8009188 <HAL_GetTick>
 800f780:	4602      	mov	r2, r0
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	1ad3      	subs	r3, r2, r3
 800f786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f78a:	d901      	bls.n	800f790 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800f78c:	2303      	movs	r3, #3
 800f78e:	e007      	b.n	800f7a0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	68db      	ldr	r3, [r3, #12]
 800f796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d0ee      	beq.n	800f77c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800f79e:	2300      	movs	r3, #0
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3710      	adds	r7, #16
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}

0800f7a8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b085      	sub	sp, #20
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800f7b6:	e005      	b.n	800f7c4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800f7be:	79fb      	ldrb	r3, [r7, #7]
 800f7c0:	3b0a      	subs	r3, #10
 800f7c2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800f7c4:	79fb      	ldrb	r3, [r7, #7]
 800f7c6:	2b09      	cmp	r3, #9
 800f7c8:	d8f6      	bhi.n	800f7b8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	011b      	lsls	r3, r3, #4
 800f7d0:	b2da      	uxtb	r2, r3
 800f7d2:	79fb      	ldrb	r3, [r7, #7]
 800f7d4:	4313      	orrs	r3, r2
 800f7d6:	b2db      	uxtb	r3, r3
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	3714      	adds	r7, #20
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e2:	4770      	bx	lr

0800f7e4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b085      	sub	sp, #20
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800f7f2:	79fb      	ldrb	r3, [r7, #7]
 800f7f4:	091b      	lsrs	r3, r3, #4
 800f7f6:	b2db      	uxtb	r3, r3
 800f7f8:	461a      	mov	r2, r3
 800f7fa:	4613      	mov	r3, r2
 800f7fc:	009b      	lsls	r3, r3, #2
 800f7fe:	4413      	add	r3, r2
 800f800:	005b      	lsls	r3, r3, #1
 800f802:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800f804:	79fb      	ldrb	r3, [r7, #7]
 800f806:	f003 030f 	and.w	r3, r3, #15
 800f80a:	b2da      	uxtb	r2, r3
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	b2db      	uxtb	r3, r3
 800f810:	4413      	add	r3, r2
 800f812:	b2db      	uxtb	r3, r3
}
 800f814:	4618      	mov	r0, r3
 800f816:	3714      	adds	r7, #20
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr

0800f820 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800f820:	b480      	push	{r7}
 800f822:	b087      	sub	sp, #28
 800f824:	af00      	add	r7, sp, #0
 800f826:	60f8      	str	r0, [r7, #12]
 800f828:	60b9      	str	r1, [r7, #8]
 800f82a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 800f82c:	2300      	movs	r3, #0
 800f82e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	3350      	adds	r3, #80	; 0x50
 800f836:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4);
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	009b      	lsls	r3, r3, #2
 800f83c:	697a      	ldr	r2, [r7, #20]
 800f83e:	4413      	add	r3, r2
 800f840:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	687a      	ldr	r2, [r7, #4]
 800f846:	601a      	str	r2, [r3, #0]
}
 800f848:	bf00      	nop
 800f84a:	371c      	adds	r7, #28
 800f84c:	46bd      	mov	sp, r7
 800f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f852:	4770      	bx	lr

0800f854 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800f854:	b480      	push	{r7}
 800f856:	b085      	sub	sp, #20
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 800f85e:	2300      	movs	r3, #0
 800f860:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	3350      	adds	r3, #80	; 0x50
 800f868:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4);
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	009b      	lsls	r3, r3, #2
 800f86e:	68fa      	ldr	r2, [r7, #12]
 800f870:	4413      	add	r3, r2
 800f872:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	681b      	ldr	r3, [r3, #0]
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3714      	adds	r7, #20
 800f87c:	46bd      	mov	sp, r7
 800f87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f882:	4770      	bx	lr

0800f884 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b082      	sub	sp, #8
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d101      	bne.n	800f896 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800f892:	2301      	movs	r3, #1
 800f894:	e022      	b.n	800f8dc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f89c:	b2db      	uxtb	r3, r3
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d105      	bne.n	800f8ae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f7f8 fcef 	bl	800828c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2203      	movs	r2, #3
 800f8b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f000 f814 	bl	800f8e4 <HAL_SD_InitCard>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d001      	beq.n	800f8c6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	e00a      	b.n	800f8dc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800f8da:	2300      	movs	r3, #0
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3708      	adds	r7, #8
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f8e4:	b5b0      	push	{r4, r5, r7, lr}
 800f8e6:	b08e      	sub	sp, #56	; 0x38
 800f8e8:	af04      	add	r7, sp, #16
 800f8ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800f900:	2376      	movs	r3, #118	; 0x76
 800f902:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681d      	ldr	r5, [r3, #0]
 800f908:	466c      	mov	r4, sp
 800f90a:	f107 0314 	add.w	r3, r7, #20
 800f90e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f912:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f916:	f107 0308 	add.w	r3, r7, #8
 800f91a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f91c:	4628      	mov	r0, r5
 800f91e:	f003 ffc9 	bl	80138b4 <SDMMC_Init>
 800f922:	4603      	mov	r3, r0
 800f924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800f928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d001      	beq.n	800f934 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800f930:	2301      	movs	r3, #1
 800f932:	e056      	b.n	800f9e2 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	685a      	ldr	r2, [r3, #4]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f942:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	4618      	mov	r0, r3
 800f94a:	f003 fffd 	bl	8013948 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	685a      	ldr	r2, [r3, #4]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f95c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f000 fff4 	bl	801094c <SD_PowerON>
 800f964:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f966:	6a3b      	ldr	r3, [r7, #32]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d00b      	beq.n	800f984 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2201      	movs	r2, #1
 800f970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f978:	6a3b      	ldr	r3, [r7, #32]
 800f97a:	431a      	orrs	r2, r3
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f980:	2301      	movs	r3, #1
 800f982:	e02e      	b.n	800f9e2 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f000 ff13 	bl	80107b0 <SD_InitCard>
 800f98a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f98c:	6a3b      	ldr	r3, [r7, #32]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d00b      	beq.n	800f9aa <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2201      	movs	r2, #1
 800f996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f99e:	6a3b      	ldr	r3, [r7, #32]
 800f9a0:	431a      	orrs	r2, r3
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	e01b      	b.n	800f9e2 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f004 f85c 	bl	8013a70 <SDMMC_CmdBlockLength>
 800f9b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f9ba:	6a3b      	ldr	r3, [r7, #32]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d00f      	beq.n	800f9e0 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	4a09      	ldr	r2, [pc, #36]	; (800f9ec <HAL_SD_InitCard+0x108>)
 800f9c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f9cc:	6a3b      	ldr	r3, [r7, #32]
 800f9ce:	431a      	orrs	r2, r3
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f9dc:	2301      	movs	r3, #1
 800f9de:	e000      	b.n	800f9e2 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800f9e0:	2300      	movs	r3, #0
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3728      	adds	r7, #40	; 0x28
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bdb0      	pop	{r4, r5, r7, pc}
 800f9ea:	bf00      	nop
 800f9ec:	004005ff 	.word	0x004005ff

0800f9f0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b08c      	sub	sp, #48	; 0x30
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	60f8      	str	r0, [r7, #12]
 800f9f8:	60b9      	str	r1, [r7, #8]
 800f9fa:	607a      	str	r2, [r7, #4]
 800f9fc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d107      	bne.n	800fa18 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa0c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800fa14:	2301      	movs	r3, #1
 800fa16:	e0c3      	b.n	800fba0 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fa1e:	b2db      	uxtb	r3, r3
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	f040 80bc 	bne.w	800fb9e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800fa2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	441a      	add	r2, r3
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d907      	bls.n	800fa4a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa3e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800fa46:	2301      	movs	r3, #1
 800fa48:	e0aa      	b.n	800fba0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	2203      	movs	r2, #3
 800fa4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	2200      	movs	r2, #0
 800fa58:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800fa68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa6e:	4a4e      	ldr	r2, [pc, #312]	; (800fba8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800fa70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa76:	4a4d      	ldr	r2, [pc, #308]	; (800fbac <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800fa78:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa7e:	2200      	movs	r2, #0
 800fa80:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa86:	2200      	movs	r2, #0
 800fa88:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa9a:	689a      	ldr	r2, [r3, #8]
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	430a      	orrs	r2, r1
 800faa4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	3380      	adds	r3, #128	; 0x80
 800fab0:	4619      	mov	r1, r3
 800fab2:	68ba      	ldr	r2, [r7, #8]
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	025b      	lsls	r3, r3, #9
 800fab8:	089b      	lsrs	r3, r3, #2
 800faba:	f7fa fbdd 	bl	800a278 <HAL_DMA_Start_IT>
 800fabe:	4603      	mov	r3, r0
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d017      	beq.n	800faf4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800fad2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	4a35      	ldr	r2, [pc, #212]	; (800fbb0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800fada:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fae0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2201      	movs	r2, #1
 800faec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800faf0:	2301      	movs	r3, #1
 800faf2:	e055      	b.n	800fba0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	f042 0208 	orr.w	r2, r2, #8
 800fb02:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb08:	2b01      	cmp	r3, #1
 800fb0a:	d002      	beq.n	800fb12 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800fb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb0e:	025b      	lsls	r3, r3, #9
 800fb10:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800fb12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb16:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	025b      	lsls	r3, r3, #9
 800fb1c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800fb1e:	2390      	movs	r3, #144	; 0x90
 800fb20:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800fb22:	2302      	movs	r3, #2
 800fb24:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800fb26:	2300      	movs	r3, #0
 800fb28:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	f107 0210 	add.w	r2, r7, #16
 800fb36:	4611      	mov	r1, r2
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f003 ff6d 	bl	8013a18 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	2b01      	cmp	r3, #1
 800fb42:	d90a      	bls.n	800fb5a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	2282      	movs	r2, #130	; 0x82
 800fb48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb50:	4618      	mov	r0, r3
 800fb52:	f003 ffd1 	bl	8013af8 <SDMMC_CmdReadMultiBlock>
 800fb56:	62f8      	str	r0, [r7, #44]	; 0x2c
 800fb58:	e009      	b.n	800fb6e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	2281      	movs	r2, #129	; 0x81
 800fb5e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb66:	4618      	mov	r0, r3
 800fb68:	f003 ffa4 	bl	8013ab4 <SDMMC_CmdReadSingleBlock>
 800fb6c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800fb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d012      	beq.n	800fb9a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	4a0d      	ldr	r2, [pc, #52]	; (800fbb0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800fb7a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb82:	431a      	orrs	r2, r3
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	2200      	movs	r2, #0
 800fb94:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800fb96:	2301      	movs	r3, #1
 800fb98:	e002      	b.n	800fba0 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	e000      	b.n	800fba0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800fb9e:	2302      	movs	r3, #2
  }
}
 800fba0:	4618      	mov	r0, r3
 800fba2:	3730      	adds	r7, #48	; 0x30
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}
 800fba8:	080105bf 	.word	0x080105bf
 800fbac:	08010631 	.word	0x08010631
 800fbb0:	004005ff 	.word	0x004005ff

0800fbb4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b08c      	sub	sp, #48	; 0x30
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	60f8      	str	r0, [r7, #12]
 800fbbc:	60b9      	str	r1, [r7, #8]
 800fbbe:	607a      	str	r2, [r7, #4]
 800fbc0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d107      	bne.n	800fbdc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbd0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800fbd8:	2301      	movs	r3, #1
 800fbda:	e0c6      	b.n	800fd6a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fbe2:	b2db      	uxtb	r3, r3
 800fbe4:	2b01      	cmp	r3, #1
 800fbe6:	f040 80bf 	bne.w	800fd68 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	2200      	movs	r2, #0
 800fbee:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800fbf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	441a      	add	r2, r3
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d907      	bls.n	800fc0e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc02:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	e0ad      	b.n	800fd6a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	2203      	movs	r2, #3
 800fc12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	f042 021a 	orr.w	r2, r2, #26
 800fc2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc32:	4a50      	ldr	r2, [pc, #320]	; (800fd74 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800fc34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc3a:	4a4f      	ldr	r2, [pc, #316]	; (800fd78 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800fc3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc42:	2200      	movs	r2, #0
 800fc44:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc4a:	2b01      	cmp	r3, #1
 800fc4c:	d002      	beq.n	800fc54 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800fc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc50:	025b      	lsls	r3, r3, #9
 800fc52:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	2b01      	cmp	r3, #1
 800fc58:	d90a      	bls.n	800fc70 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	22a0      	movs	r2, #160	; 0xa0
 800fc5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc66:	4618      	mov	r0, r3
 800fc68:	f003 ff8a 	bl	8013b80 <SDMMC_CmdWriteMultiBlock>
 800fc6c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800fc6e:	e009      	b.n	800fc84 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	2290      	movs	r2, #144	; 0x90
 800fc74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f003 ff5d 	bl	8013b3c <SDMMC_CmdWriteSingleBlock>
 800fc82:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800fc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d012      	beq.n	800fcb0 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	4a3b      	ldr	r2, [pc, #236]	; (800fd7c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800fc90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc98:	431a      	orrs	r2, r3
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	2201      	movs	r2, #1
 800fca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800fcac:	2301      	movs	r3, #1
 800fcae:	e05c      	b.n	800fd6a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f042 0208 	orr.w	r2, r2, #8
 800fcbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcc4:	2240      	movs	r2, #64	; 0x40
 800fcc6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcd8:	689a      	ldr	r2, [r3, #8]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	430a      	orrs	r2, r1
 800fce2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800fce8:	68b9      	ldr	r1, [r7, #8]
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	3380      	adds	r3, #128	; 0x80
 800fcf0:	461a      	mov	r2, r3
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	025b      	lsls	r3, r3, #9
 800fcf6:	089b      	lsrs	r3, r3, #2
 800fcf8:	f7fa fabe 	bl	800a278 <HAL_DMA_Start_IT>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d01a      	beq.n	800fd38 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	f022 021a 	bic.w	r2, r2, #26
 800fd10:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	4a19      	ldr	r2, [pc, #100]	; (800fd7c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800fd18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	2201      	movs	r2, #1
 800fd2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	2200      	movs	r2, #0
 800fd32:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800fd34:	2301      	movs	r3, #1
 800fd36:	e018      	b.n	800fd6a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800fd38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd3c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	025b      	lsls	r3, r3, #9
 800fd42:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800fd44:	2390      	movs	r3, #144	; 0x90
 800fd46:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800fd48:	2300      	movs	r3, #0
 800fd4a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800fd50:	2301      	movs	r3, #1
 800fd52:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	f107 0210 	add.w	r2, r7, #16
 800fd5c:	4611      	mov	r1, r2
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f003 fe5a 	bl	8013a18 <SDMMC_ConfigData>

      return HAL_OK;
 800fd64:	2300      	movs	r3, #0
 800fd66:	e000      	b.n	800fd6a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800fd68:	2302      	movs	r3, #2
  }
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3730      	adds	r7, #48	; 0x30
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	08010595 	.word	0x08010595
 800fd78:	08010631 	.word	0x08010631
 800fd7c:	004005ff 	.word	0x004005ff

0800fd80 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b084      	sub	sp, #16
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd8c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d008      	beq.n	800fdae <HAL_SD_IRQHandler+0x2e>
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f003 0308 	and.w	r3, r3, #8
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d003      	beq.n	800fdae <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f000 ffef 	bl	8010d8a <SD_Read_IT>
 800fdac:	e15a      	b.n	8010064 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	f000 808d 	beq.w	800fed8 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fdc6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681a      	ldr	r2, [r3, #0]
 800fdd2:	4b9a      	ldr	r3, [pc, #616]	; (801003c <HAL_SD_IRQHandler+0x2bc>)
 800fdd4:	400b      	ands	r3, r1
 800fdd6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	f022 0201 	bic.w	r2, r2, #1
 800fde6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	f003 0308 	and.w	r3, r3, #8
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d039      	beq.n	800fe66 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	f003 0302 	and.w	r3, r3, #2
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d104      	bne.n	800fe06 <HAL_SD_IRQHandler+0x86>
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	f003 0320 	and.w	r3, r3, #32
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d011      	beq.n	800fe2a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f003 feda 	bl	8013bc4 <SDMMC_CmdStopTransfer>
 800fe10:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d008      	beq.n	800fe2a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	431a      	orrs	r2, r3
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f000 f921 	bl	801006c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	f240 523a 	movw	r2, #1338	; 0x53a
 800fe32:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2201      	movs	r2, #1
 800fe38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2200      	movs	r2, #0
 800fe40:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	f003 0301 	and.w	r3, r3, #1
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d104      	bne.n	800fe56 <HAL_SD_IRQHandler+0xd6>
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	f003 0302 	and.w	r3, r3, #2
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d003      	beq.n	800fe5e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f005 fe84 	bl	8015b64 <HAL_SD_RxCpltCallback>
 800fe5c:	e102      	b.n	8010064 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f005 fe76 	bl	8015b50 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fe64:	e0fe      	b.n	8010064 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	f000 80f9 	beq.w	8010064 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	f003 0320 	and.w	r3, r3, #32
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d011      	beq.n	800fea0 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	4618      	mov	r0, r3
 800fe82:	f003 fe9f 	bl	8013bc4 <SDMMC_CmdStopTransfer>
 800fe86:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d008      	beq.n	800fea0 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	431a      	orrs	r2, r3
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f000 f8e6 	bl	801006c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f003 0301 	and.w	r3, r3, #1
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	f040 80dc 	bne.w	8010064 <HAL_SD_IRQHandler+0x2e4>
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	f003 0302 	and.w	r3, r3, #2
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	f040 80d6 	bne.w	8010064 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	f022 0208 	bic.w	r2, r2, #8
 800fec6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2201      	movs	r2, #1
 800fecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f005 fe3d 	bl	8015b50 <HAL_SD_TxCpltCallback>
}
 800fed6:	e0c5      	b.n	8010064 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d008      	beq.n	800fef8 <HAL_SD_IRQHandler+0x178>
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	f003 0308 	and.w	r3, r3, #8
 800feec:	2b00      	cmp	r3, #0
 800feee:	d003      	beq.n	800fef8 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f000 ff9b 	bl	8010e2c <SD_Write_IT>
 800fef6:	e0b5      	b.n	8010064 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fefe:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	f000 80ae 	beq.w	8010064 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff0e:	f003 0302 	and.w	r3, r3, #2
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d005      	beq.n	800ff22 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff1a:	f043 0202 	orr.w	r2, r3, #2
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff28:	f003 0308 	and.w	r3, r3, #8
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d005      	beq.n	800ff3c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff34:	f043 0208 	orr.w	r2, r3, #8
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff42:	f003 0320 	and.w	r3, r3, #32
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d005      	beq.n	800ff56 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff4e:	f043 0220 	orr.w	r2, r3, #32
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff5c:	f003 0310 	and.w	r3, r3, #16
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d005      	beq.n	800ff70 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff68:	f043 0210 	orr.w	r2, r3, #16
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	f240 523a 	movw	r2, #1338	; 0x53a
 800ff78:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ff88:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f003 fe18 	bl	8013bc4 <SDMMC_CmdStopTransfer>
 800ff94:	4602      	mov	r2, r0
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff9a:	431a      	orrs	r2, r3
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	f003 0308 	and.w	r3, r3, #8
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d00a      	beq.n	800ffc0 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2201      	movs	r2, #1
 800ffae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f000 f857 	bl	801006c <HAL_SD_ErrorCallback>
}
 800ffbe:	e051      	b.n	8010064 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d04c      	beq.n	8010064 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	f003 0310 	and.w	r3, r3, #16
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d104      	bne.n	800ffde <HAL_SD_IRQHandler+0x25e>
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	f003 0320 	and.w	r3, r3, #32
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d011      	beq.n	8010002 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffe2:	4a17      	ldr	r2, [pc, #92]	; (8010040 <HAL_SD_IRQHandler+0x2c0>)
 800ffe4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7fa fa14 	bl	800a418 <HAL_DMA_Abort_IT>
 800fff0:	4603      	mov	r3, r0
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d036      	beq.n	8010064 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fffa:	4618      	mov	r0, r3
 800fffc:	f000 fb6a 	bl	80106d4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8010000:	e030      	b.n	8010064 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	f003 0301 	and.w	r3, r3, #1
 8010008:	2b00      	cmp	r3, #0
 801000a:	d104      	bne.n	8010016 <HAL_SD_IRQHandler+0x296>
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	f003 0302 	and.w	r3, r3, #2
 8010012:	2b00      	cmp	r3, #0
 8010014:	d018      	beq.n	8010048 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801001a:	4a0a      	ldr	r2, [pc, #40]	; (8010044 <HAL_SD_IRQHandler+0x2c4>)
 801001c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010022:	4618      	mov	r0, r3
 8010024:	f7fa f9f8 	bl	800a418 <HAL_DMA_Abort_IT>
 8010028:	4603      	mov	r3, r0
 801002a:	2b00      	cmp	r3, #0
 801002c:	d01a      	beq.n	8010064 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010032:	4618      	mov	r0, r3
 8010034:	f000 fb85 	bl	8010742 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8010038:	e014      	b.n	8010064 <HAL_SD_IRQHandler+0x2e4>
 801003a:	bf00      	nop
 801003c:	ffff3ec5 	.word	0xffff3ec5
 8010040:	080106d5 	.word	0x080106d5
 8010044:	08010743 	.word	0x08010743
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2200      	movs	r2, #0
 801004c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2201      	movs	r2, #1
 8010052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	2200      	movs	r2, #0
 801005a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f005 fd6d 	bl	8015b3c <HAL_SD_AbortCallback>
}
 8010062:	e7ff      	b.n	8010064 <HAL_SD_IRQHandler+0x2e4>
 8010064:	bf00      	nop
 8010066:	3710      	adds	r7, #16
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}

0801006c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 801006c:	b480      	push	{r7}
 801006e:	b083      	sub	sp, #12
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8010074:	bf00      	nop
 8010076:	370c      	adds	r7, #12
 8010078:	46bd      	mov	sp, r7
 801007a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007e:	4770      	bx	lr

08010080 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8010080:	b480      	push	{r7}
 8010082:	b083      	sub	sp, #12
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801008e:	0f9b      	lsrs	r3, r3, #30
 8010090:	b2da      	uxtb	r2, r3
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801009a:	0e9b      	lsrs	r3, r3, #26
 801009c:	b2db      	uxtb	r3, r3
 801009e:	f003 030f 	and.w	r3, r3, #15
 80100a2:	b2da      	uxtb	r2, r3
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100ac:	0e1b      	lsrs	r3, r3, #24
 80100ae:	b2db      	uxtb	r3, r3
 80100b0:	f003 0303 	and.w	r3, r3, #3
 80100b4:	b2da      	uxtb	r2, r3
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100be:	0c1b      	lsrs	r3, r3, #16
 80100c0:	b2da      	uxtb	r2, r3
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100ca:	0a1b      	lsrs	r3, r3, #8
 80100cc:	b2da      	uxtb	r2, r3
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100d6:	b2da      	uxtb	r2, r3
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80100e0:	0d1b      	lsrs	r3, r3, #20
 80100e2:	b29a      	uxth	r2, r3
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80100ec:	0c1b      	lsrs	r3, r3, #16
 80100ee:	b2db      	uxtb	r3, r3
 80100f0:	f003 030f 	and.w	r3, r3, #15
 80100f4:	b2da      	uxtb	r2, r3
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80100fe:	0bdb      	lsrs	r3, r3, #15
 8010100:	b2db      	uxtb	r3, r3
 8010102:	f003 0301 	and.w	r3, r3, #1
 8010106:	b2da      	uxtb	r2, r3
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010110:	0b9b      	lsrs	r3, r3, #14
 8010112:	b2db      	uxtb	r3, r3
 8010114:	f003 0301 	and.w	r3, r3, #1
 8010118:	b2da      	uxtb	r2, r3
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010122:	0b5b      	lsrs	r3, r3, #13
 8010124:	b2db      	uxtb	r3, r3
 8010126:	f003 0301 	and.w	r3, r3, #1
 801012a:	b2da      	uxtb	r2, r3
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010134:	0b1b      	lsrs	r3, r3, #12
 8010136:	b2db      	uxtb	r3, r3
 8010138:	f003 0301 	and.w	r3, r3, #1
 801013c:	b2da      	uxtb	r2, r3
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	2200      	movs	r2, #0
 8010146:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801014c:	2b00      	cmp	r3, #0
 801014e:	d163      	bne.n	8010218 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010154:	009a      	lsls	r2, r3, #2
 8010156:	f640 73fc 	movw	r3, #4092	; 0xffc
 801015a:	4013      	ands	r3, r2
 801015c:	687a      	ldr	r2, [r7, #4]
 801015e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8010160:	0f92      	lsrs	r2, r2, #30
 8010162:	431a      	orrs	r2, r3
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801016c:	0edb      	lsrs	r3, r3, #27
 801016e:	b2db      	uxtb	r3, r3
 8010170:	f003 0307 	and.w	r3, r3, #7
 8010174:	b2da      	uxtb	r2, r3
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801017e:	0e1b      	lsrs	r3, r3, #24
 8010180:	b2db      	uxtb	r3, r3
 8010182:	f003 0307 	and.w	r3, r3, #7
 8010186:	b2da      	uxtb	r2, r3
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010190:	0d5b      	lsrs	r3, r3, #21
 8010192:	b2db      	uxtb	r3, r3
 8010194:	f003 0307 	and.w	r3, r3, #7
 8010198:	b2da      	uxtb	r2, r3
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101a2:	0c9b      	lsrs	r3, r3, #18
 80101a4:	b2db      	uxtb	r3, r3
 80101a6:	f003 0307 	and.w	r3, r3, #7
 80101aa:	b2da      	uxtb	r2, r3
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101b4:	0bdb      	lsrs	r3, r3, #15
 80101b6:	b2db      	uxtb	r3, r3
 80101b8:	f003 0307 	and.w	r3, r3, #7
 80101bc:	b2da      	uxtb	r2, r3
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	691b      	ldr	r3, [r3, #16]
 80101c6:	1c5a      	adds	r2, r3, #1
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	7e1b      	ldrb	r3, [r3, #24]
 80101d0:	b2db      	uxtb	r3, r3
 80101d2:	f003 0307 	and.w	r3, r3, #7
 80101d6:	3302      	adds	r3, #2
 80101d8:	2201      	movs	r2, #1
 80101da:	fa02 f303 	lsl.w	r3, r2, r3
 80101de:	687a      	ldr	r2, [r7, #4]
 80101e0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80101e2:	fb03 f202 	mul.w	r2, r3, r2
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	7a1b      	ldrb	r3, [r3, #8]
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	f003 030f 	and.w	r3, r3, #15
 80101f4:	2201      	movs	r2, #1
 80101f6:	409a      	lsls	r2, r3
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010200:	687a      	ldr	r2, [r7, #4]
 8010202:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8010204:	0a52      	lsrs	r2, r2, #9
 8010206:	fb03 f202 	mul.w	r2, r3, r2
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010214:	661a      	str	r2, [r3, #96]	; 0x60
 8010216:	e031      	b.n	801027c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801021c:	2b01      	cmp	r3, #1
 801021e:	d11d      	bne.n	801025c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010224:	041b      	lsls	r3, r3, #16
 8010226:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801022e:	0c1b      	lsrs	r3, r3, #16
 8010230:	431a      	orrs	r2, r3
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	691b      	ldr	r3, [r3, #16]
 801023a:	3301      	adds	r3, #1
 801023c:	029a      	lsls	r2, r3, #10
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010250:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	661a      	str	r2, [r3, #96]	; 0x60
 801025a:	e00f      	b.n	801027c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	4a58      	ldr	r2, [pc, #352]	; (80103c4 <HAL_SD_GetCardCSD+0x344>)
 8010262:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010268:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2201      	movs	r2, #1
 8010274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010278:	2301      	movs	r3, #1
 801027a:	e09d      	b.n	80103b8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010280:	0b9b      	lsrs	r3, r3, #14
 8010282:	b2db      	uxtb	r3, r3
 8010284:	f003 0301 	and.w	r3, r3, #1
 8010288:	b2da      	uxtb	r2, r3
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010292:	09db      	lsrs	r3, r3, #7
 8010294:	b2db      	uxtb	r3, r3
 8010296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801029a:	b2da      	uxtb	r2, r3
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102a4:	b2db      	uxtb	r3, r3
 80102a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102aa:	b2da      	uxtb	r2, r3
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102b4:	0fdb      	lsrs	r3, r3, #31
 80102b6:	b2da      	uxtb	r2, r3
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102c0:	0f5b      	lsrs	r3, r3, #29
 80102c2:	b2db      	uxtb	r3, r3
 80102c4:	f003 0303 	and.w	r3, r3, #3
 80102c8:	b2da      	uxtb	r2, r3
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102d2:	0e9b      	lsrs	r3, r3, #26
 80102d4:	b2db      	uxtb	r3, r3
 80102d6:	f003 0307 	and.w	r3, r3, #7
 80102da:	b2da      	uxtb	r2, r3
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102e4:	0d9b      	lsrs	r3, r3, #22
 80102e6:	b2db      	uxtb	r3, r3
 80102e8:	f003 030f 	and.w	r3, r3, #15
 80102ec:	b2da      	uxtb	r2, r3
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102f6:	0d5b      	lsrs	r3, r3, #21
 80102f8:	b2db      	uxtb	r3, r3
 80102fa:	f003 0301 	and.w	r3, r3, #1
 80102fe:	b2da      	uxtb	r2, r3
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	2200      	movs	r2, #0
 801030a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010312:	0c1b      	lsrs	r3, r3, #16
 8010314:	b2db      	uxtb	r3, r3
 8010316:	f003 0301 	and.w	r3, r3, #1
 801031a:	b2da      	uxtb	r2, r3
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010326:	0bdb      	lsrs	r3, r3, #15
 8010328:	b2db      	uxtb	r3, r3
 801032a:	f003 0301 	and.w	r3, r3, #1
 801032e:	b2da      	uxtb	r2, r3
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801033a:	0b9b      	lsrs	r3, r3, #14
 801033c:	b2db      	uxtb	r3, r3
 801033e:	f003 0301 	and.w	r3, r3, #1
 8010342:	b2da      	uxtb	r2, r3
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801034e:	0b5b      	lsrs	r3, r3, #13
 8010350:	b2db      	uxtb	r3, r3
 8010352:	f003 0301 	and.w	r3, r3, #1
 8010356:	b2da      	uxtb	r2, r3
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010362:	0b1b      	lsrs	r3, r3, #12
 8010364:	b2db      	uxtb	r3, r3
 8010366:	f003 0301 	and.w	r3, r3, #1
 801036a:	b2da      	uxtb	r2, r3
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010376:	0a9b      	lsrs	r3, r3, #10
 8010378:	b2db      	uxtb	r3, r3
 801037a:	f003 0303 	and.w	r3, r3, #3
 801037e:	b2da      	uxtb	r2, r3
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801038a:	0a1b      	lsrs	r3, r3, #8
 801038c:	b2db      	uxtb	r3, r3
 801038e:	f003 0303 	and.w	r3, r3, #3
 8010392:	b2da      	uxtb	r2, r3
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801039e:	085b      	lsrs	r3, r3, #1
 80103a0:	b2db      	uxtb	r3, r3
 80103a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103a6:	b2da      	uxtb	r2, r3
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	2201      	movs	r2, #1
 80103b2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80103b6:	2300      	movs	r3, #0
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	370c      	adds	r7, #12
 80103bc:	46bd      	mov	sp, r7
 80103be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c2:	4770      	bx	lr
 80103c4:	004005ff 	.word	0x004005ff

080103c8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80103c8:	b480      	push	{r7}
 80103ca:	b083      	sub	sp, #12
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8010412:	2300      	movs	r3, #0
}
 8010414:	4618      	mov	r0, r3
 8010416:	370c      	adds	r7, #12
 8010418:	46bd      	mov	sp, r7
 801041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041e:	4770      	bx	lr

08010420 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8010420:	b5b0      	push	{r4, r5, r7, lr}
 8010422:	b08e      	sub	sp, #56	; 0x38
 8010424:	af04      	add	r7, sp, #16
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 801042a:	2300      	movs	r3, #0
 801042c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2203      	movs	r2, #3
 8010434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801043c:	2b03      	cmp	r3, #3
 801043e:	d02e      	beq.n	801049e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010446:	d106      	bne.n	8010456 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801044c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	639a      	str	r2, [r3, #56]	; 0x38
 8010454:	e029      	b.n	80104aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801045c:	d10a      	bne.n	8010474 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f000 fb2a 	bl	8010ab8 <SD_WideBus_Enable>
 8010464:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801046a:	6a3b      	ldr	r3, [r7, #32]
 801046c:	431a      	orrs	r2, r3
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	639a      	str	r2, [r3, #56]	; 0x38
 8010472:	e01a      	b.n	80104aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d10a      	bne.n	8010490 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f000 fb67 	bl	8010b4e <SD_WideBus_Disable>
 8010480:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010486:	6a3b      	ldr	r3, [r7, #32]
 8010488:	431a      	orrs	r2, r3
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	639a      	str	r2, [r3, #56]	; 0x38
 801048e:	e00c      	b.n	80104aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010494:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	639a      	str	r2, [r3, #56]	; 0x38
 801049c:	e005      	b.n	80104aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104a2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d00b      	beq.n	80104ca <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	4a26      	ldr	r2, [pc, #152]	; (8010550 <HAL_SD_ConfigWideBusOperation+0x130>)
 80104b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2201      	movs	r2, #1
 80104be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80104c2:	2301      	movs	r3, #1
 80104c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80104c8:	e01f      	b.n	801050a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	689b      	ldr	r3, [r3, #8]
 80104d4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	68db      	ldr	r3, [r3, #12]
 80104da:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	695b      	ldr	r3, [r3, #20]
 80104e4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	699b      	ldr	r3, [r3, #24]
 80104ea:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681d      	ldr	r5, [r3, #0]
 80104f0:	466c      	mov	r4, sp
 80104f2:	f107 0314 	add.w	r3, r7, #20
 80104f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80104fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80104fe:	f107 0308 	add.w	r3, r7, #8
 8010502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010504:	4628      	mov	r0, r5
 8010506:	f003 f9d5 	bl	80138b4 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010512:	4618      	mov	r0, r3
 8010514:	f003 faac 	bl	8013a70 <SDMMC_CmdBlockLength>
 8010518:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801051a:	6a3b      	ldr	r3, [r7, #32]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d00c      	beq.n	801053a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	4a0a      	ldr	r2, [pc, #40]	; (8010550 <HAL_SD_ConfigWideBusOperation+0x130>)
 8010526:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801052c:	6a3b      	ldr	r3, [r7, #32]
 801052e:	431a      	orrs	r2, r3
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8010534:	2301      	movs	r3, #1
 8010536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	2201      	movs	r2, #1
 801053e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8010542:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010546:	4618      	mov	r0, r3
 8010548:	3728      	adds	r7, #40	; 0x28
 801054a:	46bd      	mov	sp, r7
 801054c:	bdb0      	pop	{r4, r5, r7, pc}
 801054e:	bf00      	nop
 8010550:	004005ff 	.word	0x004005ff

08010554 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b086      	sub	sp, #24
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 801055c:	2300      	movs	r3, #0
 801055e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8010560:	f107 030c 	add.w	r3, r7, #12
 8010564:	4619      	mov	r1, r3
 8010566:	6878      	ldr	r0, [r7, #4]
 8010568:	f000 fa7e 	bl	8010a68 <SD_SendStatus>
 801056c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d005      	beq.n	8010580 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	431a      	orrs	r2, r3
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	0a5b      	lsrs	r3, r3, #9
 8010584:	f003 030f 	and.w	r3, r3, #15
 8010588:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 801058a:	693b      	ldr	r3, [r7, #16]
}
 801058c:	4618      	mov	r0, r3
 801058e:	3718      	adds	r7, #24
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}

08010594 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010594:	b480      	push	{r7}
 8010596:	b085      	sub	sp, #20
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105a0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80105b0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80105b2:	bf00      	nop
 80105b4:	3714      	adds	r7, #20
 80105b6:	46bd      	mov	sp, r7
 80105b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105bc:	4770      	bx	lr

080105be <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80105be:	b580      	push	{r7, lr}
 80105c0:	b084      	sub	sp, #16
 80105c2:	af00      	add	r7, sp, #0
 80105c4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105ca:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105d0:	2b82      	cmp	r3, #130	; 0x82
 80105d2:	d111      	bne.n	80105f8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	4618      	mov	r0, r3
 80105da:	f003 faf3 	bl	8013bc4 <SDMMC_CmdStopTransfer>
 80105de:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d008      	beq.n	80105f8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	431a      	orrs	r2, r3
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80105f2:	68f8      	ldr	r0, [r7, #12]
 80105f4:	f7ff fd3a 	bl	801006c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	f022 0208 	bic.w	r2, r2, #8
 8010606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f240 523a 	movw	r2, #1338	; 0x53a
 8010610:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	2201      	movs	r2, #1
 8010616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	2200      	movs	r2, #0
 801061e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8010620:	68f8      	ldr	r0, [r7, #12]
 8010622:	f005 fa9f 	bl	8015b64 <HAL_SD_RxCpltCallback>
#endif
}
 8010626:	bf00      	nop
 8010628:	3710      	adds	r7, #16
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}
	...

08010630 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b086      	sub	sp, #24
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801063c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f7fa f8a4 	bl	800a78c <HAL_DMA_GetError>
 8010644:	4603      	mov	r3, r0
 8010646:	2b02      	cmp	r3, #2
 8010648:	d03e      	beq.n	80106c8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 801064a:	697b      	ldr	r3, [r7, #20]
 801064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801064e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010650:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8010652:	697b      	ldr	r3, [r7, #20]
 8010654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010658:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	2b01      	cmp	r3, #1
 801065e:	d002      	beq.n	8010666 <SD_DMAError+0x36>
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	2b01      	cmp	r3, #1
 8010664:	d12d      	bne.n	80106c2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	4a19      	ldr	r2, [pc, #100]	; (80106d0 <SD_DMAError+0xa0>)
 801066c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 801067c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 801067e:	697b      	ldr	r3, [r7, #20]
 8010680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010682:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 801068a:	6978      	ldr	r0, [r7, #20]
 801068c:	f7ff ff62 	bl	8010554 <HAL_SD_GetCardState>
 8010690:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	2b06      	cmp	r3, #6
 8010696:	d002      	beq.n	801069e <SD_DMAError+0x6e>
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	2b05      	cmp	r3, #5
 801069c:	d10a      	bne.n	80106b4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	4618      	mov	r0, r3
 80106a4:	f003 fa8e 	bl	8013bc4 <SDMMC_CmdStopTransfer>
 80106a8:	4602      	mov	r2, r0
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106ae:	431a      	orrs	r2, r3
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	2201      	movs	r2, #1
 80106b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	2200      	movs	r2, #0
 80106c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80106c2:	6978      	ldr	r0, [r7, #20]
 80106c4:	f7ff fcd2 	bl	801006c <HAL_SD_ErrorCallback>
#endif
  }
}
 80106c8:	bf00      	nop
 80106ca:	3718      	adds	r7, #24
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}
 80106d0:	004005ff 	.word	0x004005ff

080106d4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b084      	sub	sp, #16
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106e0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	f240 523a 	movw	r2, #1338	; 0x53a
 80106ea:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80106ec:	68f8      	ldr	r0, [r7, #12]
 80106ee:	f7ff ff31 	bl	8010554 <HAL_SD_GetCardState>
 80106f2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	2201      	movs	r2, #1
 80106f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	2200      	movs	r2, #0
 8010700:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8010702:	68bb      	ldr	r3, [r7, #8]
 8010704:	2b06      	cmp	r3, #6
 8010706:	d002      	beq.n	801070e <SD_DMATxAbort+0x3a>
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	2b05      	cmp	r3, #5
 801070c:	d10a      	bne.n	8010724 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	4618      	mov	r0, r3
 8010714:	f003 fa56 	bl	8013bc4 <SDMMC_CmdStopTransfer>
 8010718:	4602      	mov	r2, r0
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801071e:	431a      	orrs	r2, r3
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010728:	2b00      	cmp	r3, #0
 801072a:	d103      	bne.n	8010734 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 801072c:	68f8      	ldr	r0, [r7, #12]
 801072e:	f005 fa05 	bl	8015b3c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8010732:	e002      	b.n	801073a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8010734:	68f8      	ldr	r0, [r7, #12]
 8010736:	f7ff fc99 	bl	801006c <HAL_SD_ErrorCallback>
}
 801073a:	bf00      	nop
 801073c:	3710      	adds	r7, #16
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}

08010742 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8010742:	b580      	push	{r7, lr}
 8010744:	b084      	sub	sp, #16
 8010746:	af00      	add	r7, sp, #0
 8010748:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801074e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	f240 523a 	movw	r2, #1338	; 0x53a
 8010758:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 801075a:	68f8      	ldr	r0, [r7, #12]
 801075c:	f7ff fefa 	bl	8010554 <HAL_SD_GetCardState>
 8010760:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	2201      	movs	r2, #1
 8010766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	2200      	movs	r2, #0
 801076e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	2b06      	cmp	r3, #6
 8010774:	d002      	beq.n	801077c <SD_DMARxAbort+0x3a>
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	2b05      	cmp	r3, #5
 801077a:	d10a      	bne.n	8010792 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	4618      	mov	r0, r3
 8010782:	f003 fa1f 	bl	8013bc4 <SDMMC_CmdStopTransfer>
 8010786:	4602      	mov	r2, r0
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801078c:	431a      	orrs	r2, r3
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010796:	2b00      	cmp	r3, #0
 8010798:	d103      	bne.n	80107a2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 801079a:	68f8      	ldr	r0, [r7, #12]
 801079c:	f005 f9ce 	bl	8015b3c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80107a0:	e002      	b.n	80107a8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80107a2:	68f8      	ldr	r0, [r7, #12]
 80107a4:	f7ff fc62 	bl	801006c <HAL_SD_ErrorCallback>
}
 80107a8:	bf00      	nop
 80107aa:	3710      	adds	r7, #16
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}

080107b0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80107b0:	b5b0      	push	{r4, r5, r7, lr}
 80107b2:	b094      	sub	sp, #80	; 0x50
 80107b4:	af04      	add	r7, sp, #16
 80107b6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80107b8:	2301      	movs	r3, #1
 80107ba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	4618      	mov	r0, r3
 80107c2:	f003 f8d0 	bl	8013966 <SDMMC_GetPowerState>
 80107c6:	4603      	mov	r3, r0
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d102      	bne.n	80107d2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80107cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80107d0:	e0b8      	b.n	8010944 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107d6:	2b03      	cmp	r3, #3
 80107d8:	d02f      	beq.n	801083a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	4618      	mov	r0, r3
 80107e0:	f003 fafb 	bl	8013dda <SDMMC_CmdSendCID>
 80107e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80107e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d001      	beq.n	80107f0 <SD_InitCard+0x40>
    {
      return errorstate;
 80107ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107ee:	e0a9      	b.n	8010944 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	2100      	movs	r1, #0
 80107f6:	4618      	mov	r0, r3
 80107f8:	f003 f8fb 	bl	80139f2 <SDMMC_GetResponse>
 80107fc:	4602      	mov	r2, r0
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	2104      	movs	r1, #4
 8010808:	4618      	mov	r0, r3
 801080a:	f003 f8f2 	bl	80139f2 <SDMMC_GetResponse>
 801080e:	4602      	mov	r2, r0
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	2108      	movs	r1, #8
 801081a:	4618      	mov	r0, r3
 801081c:	f003 f8e9 	bl	80139f2 <SDMMC_GetResponse>
 8010820:	4602      	mov	r2, r0
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	210c      	movs	r1, #12
 801082c:	4618      	mov	r0, r3
 801082e:	f003 f8e0 	bl	80139f2 <SDMMC_GetResponse>
 8010832:	4602      	mov	r2, r0
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801083e:	2b03      	cmp	r3, #3
 8010840:	d00d      	beq.n	801085e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	f107 020e 	add.w	r2, r7, #14
 801084a:	4611      	mov	r1, r2
 801084c:	4618      	mov	r0, r3
 801084e:	f003 fb01 	bl	8013e54 <SDMMC_CmdSetRelAdd>
 8010852:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8010854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010856:	2b00      	cmp	r3, #0
 8010858:	d001      	beq.n	801085e <SD_InitCard+0xae>
    {
      return errorstate;
 801085a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801085c:	e072      	b.n	8010944 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010862:	2b03      	cmp	r3, #3
 8010864:	d036      	beq.n	80108d4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8010866:	89fb      	ldrh	r3, [r7, #14]
 8010868:	461a      	mov	r2, r3
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681a      	ldr	r2, [r3, #0]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010876:	041b      	lsls	r3, r3, #16
 8010878:	4619      	mov	r1, r3
 801087a:	4610      	mov	r0, r2
 801087c:	f003 facb 	bl	8013e16 <SDMMC_CmdSendCSD>
 8010880:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8010882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010884:	2b00      	cmp	r3, #0
 8010886:	d001      	beq.n	801088c <SD_InitCard+0xdc>
    {
      return errorstate;
 8010888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801088a:	e05b      	b.n	8010944 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	2100      	movs	r1, #0
 8010892:	4618      	mov	r0, r3
 8010894:	f003 f8ad 	bl	80139f2 <SDMMC_GetResponse>
 8010898:	4602      	mov	r2, r0
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	2104      	movs	r1, #4
 80108a4:	4618      	mov	r0, r3
 80108a6:	f003 f8a4 	bl	80139f2 <SDMMC_GetResponse>
 80108aa:	4602      	mov	r2, r0
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	2108      	movs	r1, #8
 80108b6:	4618      	mov	r0, r3
 80108b8:	f003 f89b 	bl	80139f2 <SDMMC_GetResponse>
 80108bc:	4602      	mov	r2, r0
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	210c      	movs	r1, #12
 80108c8:	4618      	mov	r0, r3
 80108ca:	f003 f892 	bl	80139f2 <SDMMC_GetResponse>
 80108ce:	4602      	mov	r2, r0
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	2104      	movs	r1, #4
 80108da:	4618      	mov	r0, r3
 80108dc:	f003 f889 	bl	80139f2 <SDMMC_GetResponse>
 80108e0:	4603      	mov	r3, r0
 80108e2:	0d1a      	lsrs	r2, r3, #20
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80108e8:	f107 0310 	add.w	r3, r7, #16
 80108ec:	4619      	mov	r1, r3
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f7ff fbc6 	bl	8010080 <HAL_SD_GetCardCSD>
 80108f4:	4603      	mov	r3, r0
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d002      	beq.n	8010900 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80108fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80108fe:	e021      	b.n	8010944 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6819      	ldr	r1, [r3, #0]
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010908:	041b      	lsls	r3, r3, #16
 801090a:	2200      	movs	r2, #0
 801090c:	461c      	mov	r4, r3
 801090e:	4615      	mov	r5, r2
 8010910:	4622      	mov	r2, r4
 8010912:	462b      	mov	r3, r5
 8010914:	4608      	mov	r0, r1
 8010916:	f003 f977 	bl	8013c08 <SDMMC_CmdSelDesel>
 801091a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 801091c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801091e:	2b00      	cmp	r3, #0
 8010920:	d001      	beq.n	8010926 <SD_InitCard+0x176>
  {
    return errorstate;
 8010922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010924:	e00e      	b.n	8010944 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681d      	ldr	r5, [r3, #0]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	466c      	mov	r4, sp
 801092e:	f103 0210 	add.w	r2, r3, #16
 8010932:	ca07      	ldmia	r2, {r0, r1, r2}
 8010934:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010938:	3304      	adds	r3, #4
 801093a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801093c:	4628      	mov	r0, r5
 801093e:	f002 ffb9 	bl	80138b4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8010942:	2300      	movs	r3, #0
}
 8010944:	4618      	mov	r0, r3
 8010946:	3740      	adds	r7, #64	; 0x40
 8010948:	46bd      	mov	sp, r7
 801094a:	bdb0      	pop	{r4, r5, r7, pc}

0801094c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b086      	sub	sp, #24
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010954:	2300      	movs	r3, #0
 8010956:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8010958:	2300      	movs	r3, #0
 801095a:	617b      	str	r3, [r7, #20]
 801095c:	2300      	movs	r3, #0
 801095e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	4618      	mov	r0, r3
 8010966:	f003 f972 	bl	8013c4e <SDMMC_CmdGoIdleState>
 801096a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d001      	beq.n	8010976 <SD_PowerON+0x2a>
  {
    return errorstate;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	e072      	b.n	8010a5c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	4618      	mov	r0, r3
 801097c:	f003 f985 	bl	8013c8a <SDMMC_CmdOperCond>
 8010980:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d00d      	beq.n	80109a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2200      	movs	r2, #0
 801098c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	4618      	mov	r0, r3
 8010994:	f003 f95b 	bl	8013c4e <SDMMC_CmdGoIdleState>
 8010998:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d004      	beq.n	80109aa <SD_PowerON+0x5e>
    {
      return errorstate;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	e05b      	b.n	8010a5c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2201      	movs	r2, #1
 80109a8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109ae:	2b01      	cmp	r3, #1
 80109b0:	d137      	bne.n	8010a22 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	2100      	movs	r1, #0
 80109b8:	4618      	mov	r0, r3
 80109ba:	f003 f985 	bl	8013cc8 <SDMMC_CmdAppCommand>
 80109be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d02d      	beq.n	8010a22 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80109c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80109ca:	e047      	b.n	8010a5c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	2100      	movs	r1, #0
 80109d2:	4618      	mov	r0, r3
 80109d4:	f003 f978 	bl	8013cc8 <SDMMC_CmdAppCommand>
 80109d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d001      	beq.n	80109e4 <SD_PowerON+0x98>
    {
      return errorstate;
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	e03b      	b.n	8010a5c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	491e      	ldr	r1, [pc, #120]	; (8010a64 <SD_PowerON+0x118>)
 80109ea:	4618      	mov	r0, r3
 80109ec:	f003 f98e 	bl	8013d0c <SDMMC_CmdAppOperCommand>
 80109f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d002      	beq.n	80109fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80109f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80109fc:	e02e      	b.n	8010a5c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	2100      	movs	r1, #0
 8010a04:	4618      	mov	r0, r3
 8010a06:	f002 fff4 	bl	80139f2 <SDMMC_GetResponse>
 8010a0a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	0fdb      	lsrs	r3, r3, #31
 8010a10:	2b01      	cmp	r3, #1
 8010a12:	d101      	bne.n	8010a18 <SD_PowerON+0xcc>
 8010a14:	2301      	movs	r3, #1
 8010a16:	e000      	b.n	8010a1a <SD_PowerON+0xce>
 8010a18:	2300      	movs	r3, #0
 8010a1a:	613b      	str	r3, [r7, #16]

    count++;
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	3301      	adds	r3, #1
 8010a20:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010a28:	4293      	cmp	r3, r2
 8010a2a:	d802      	bhi.n	8010a32 <SD_PowerON+0xe6>
 8010a2c:	693b      	ldr	r3, [r7, #16]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d0cc      	beq.n	80109cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010a38:	4293      	cmp	r3, r2
 8010a3a:	d902      	bls.n	8010a42 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8010a3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010a40:	e00c      	b.n	8010a5c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d003      	beq.n	8010a54 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2201      	movs	r2, #1
 8010a50:	645a      	str	r2, [r3, #68]	; 0x44
 8010a52:	e002      	b.n	8010a5a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2200      	movs	r2, #0
 8010a58:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8010a5a:	2300      	movs	r3, #0
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3718      	adds	r7, #24
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}
 8010a64:	c1100000 	.word	0xc1100000

08010a68 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b084      	sub	sp, #16
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
 8010a70:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d102      	bne.n	8010a7e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8010a78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010a7c:	e018      	b.n	8010ab0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681a      	ldr	r2, [r3, #0]
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a86:	041b      	lsls	r3, r3, #16
 8010a88:	4619      	mov	r1, r3
 8010a8a:	4610      	mov	r0, r2
 8010a8c:	f003 fa03 	bl	8013e96 <SDMMC_CmdSendStatus>
 8010a90:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d001      	beq.n	8010a9c <SD_SendStatus+0x34>
  {
    return errorstate;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	e009      	b.n	8010ab0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	2100      	movs	r1, #0
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f002 ffa5 	bl	80139f2 <SDMMC_GetResponse>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	683b      	ldr	r3, [r7, #0]
 8010aac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8010aae:	2300      	movs	r3, #0
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3710      	adds	r7, #16
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}

08010ab8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b086      	sub	sp, #24
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	60fb      	str	r3, [r7, #12]
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	2100      	movs	r1, #0
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f002 ff8f 	bl	80139f2 <SDMMC_GetResponse>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010ada:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010ade:	d102      	bne.n	8010ae6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010ae0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010ae4:	e02f      	b.n	8010b46 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010ae6:	f107 030c 	add.w	r3, r7, #12
 8010aea:	4619      	mov	r1, r3
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f000 f879 	bl	8010be4 <SD_FindSCR>
 8010af2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d001      	beq.n	8010afe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	e023      	b.n	8010b46 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8010afe:	693b      	ldr	r3, [r7, #16]
 8010b00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d01c      	beq.n	8010b42 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681a      	ldr	r2, [r3, #0]
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b10:	041b      	lsls	r3, r3, #16
 8010b12:	4619      	mov	r1, r3
 8010b14:	4610      	mov	r0, r2
 8010b16:	f003 f8d7 	bl	8013cc8 <SDMMC_CmdAppCommand>
 8010b1a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010b1c:	697b      	ldr	r3, [r7, #20]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d001      	beq.n	8010b26 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	e00f      	b.n	8010b46 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	2102      	movs	r1, #2
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f003 f911 	bl	8013d54 <SDMMC_CmdBusWidth>
 8010b32:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d001      	beq.n	8010b3e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	e003      	b.n	8010b46 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	e001      	b.n	8010b46 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010b42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	3718      	adds	r7, #24
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}

08010b4e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8010b4e:	b580      	push	{r7, lr}
 8010b50:	b086      	sub	sp, #24
 8010b52:	af00      	add	r7, sp, #0
 8010b54:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8010b56:	2300      	movs	r3, #0
 8010b58:	60fb      	str	r3, [r7, #12]
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	2100      	movs	r1, #0
 8010b64:	4618      	mov	r0, r3
 8010b66:	f002 ff44 	bl	80139f2 <SDMMC_GetResponse>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010b70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010b74:	d102      	bne.n	8010b7c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010b76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010b7a:	e02f      	b.n	8010bdc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010b7c:	f107 030c 	add.w	r3, r7, #12
 8010b80:	4619      	mov	r1, r3
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	f000 f82e 	bl	8010be4 <SD_FindSCR>
 8010b88:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d001      	beq.n	8010b94 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	e023      	b.n	8010bdc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d01c      	beq.n	8010bd8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ba6:	041b      	lsls	r3, r3, #16
 8010ba8:	4619      	mov	r1, r3
 8010baa:	4610      	mov	r0, r2
 8010bac:	f003 f88c 	bl	8013cc8 <SDMMC_CmdAppCommand>
 8010bb0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d001      	beq.n	8010bbc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	e00f      	b.n	8010bdc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	2100      	movs	r1, #0
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f003 f8c6 	bl	8013d54 <SDMMC_CmdBusWidth>
 8010bc8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d001      	beq.n	8010bd4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	e003      	b.n	8010bdc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	e001      	b.n	8010bdc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010bd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3718      	adds	r7, #24
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}

08010be4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8010be4:	b590      	push	{r4, r7, lr}
 8010be6:	b08f      	sub	sp, #60	; 0x3c
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8010bee:	f7f8 facb 	bl	8009188 <HAL_GetTick>
 8010bf2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	60bb      	str	r3, [r7, #8]
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	2108      	movs	r1, #8
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f002 ff30 	bl	8013a70 <SDMMC_CmdBlockLength>
 8010c10:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8010c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d001      	beq.n	8010c1c <SD_FindSCR+0x38>
  {
    return errorstate;
 8010c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c1a:	e0b2      	b.n	8010d82 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681a      	ldr	r2, [r3, #0]
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c24:	041b      	lsls	r3, r3, #16
 8010c26:	4619      	mov	r1, r3
 8010c28:	4610      	mov	r0, r2
 8010c2a:	f003 f84d 	bl	8013cc8 <SDMMC_CmdAppCommand>
 8010c2e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8010c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d001      	beq.n	8010c3a <SD_FindSCR+0x56>
  {
    return errorstate;
 8010c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c38:	e0a3      	b.n	8010d82 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c3e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8010c40:	2308      	movs	r3, #8
 8010c42:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8010c44:	2330      	movs	r3, #48	; 0x30
 8010c46:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010c48:	2302      	movs	r3, #2
 8010c4a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8010c50:	2301      	movs	r3, #1
 8010c52:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	f107 0210 	add.w	r2, r7, #16
 8010c5c:	4611      	mov	r1, r2
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f002 feda 	bl	8013a18 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f003 f895 	bl	8013d98 <SDMMC_CmdSendSCR>
 8010c6e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8010c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d02a      	beq.n	8010ccc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8010c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c78:	e083      	b.n	8010d82 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d00f      	beq.n	8010ca8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6819      	ldr	r1, [r3, #0]
 8010c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c8e:	009b      	lsls	r3, r3, #2
 8010c90:	f107 0208 	add.w	r2, r7, #8
 8010c94:	18d4      	adds	r4, r2, r3
 8010c96:	4608      	mov	r0, r1
 8010c98:	f002 fe38 	bl	801390c <SDMMC_ReadFIFO>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	6023      	str	r3, [r4, #0]
      index++;
 8010ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8010ca6:	e006      	b.n	8010cb6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d012      	beq.n	8010cdc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8010cb6:	f7f8 fa67 	bl	8009188 <HAL_GetTick>
 8010cba:	4602      	mov	r2, r0
 8010cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cbe:	1ad3      	subs	r3, r2, r3
 8010cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010cc4:	d102      	bne.n	8010ccc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8010cc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010cca:	e05a      	b.n	8010d82 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cd2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d0cf      	beq.n	8010c7a <SD_FindSCR+0x96>
 8010cda:	e000      	b.n	8010cde <SD_FindSCR+0xfa>
      break;
 8010cdc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ce4:	f003 0308 	and.w	r3, r3, #8
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d005      	beq.n	8010cf8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	2208      	movs	r2, #8
 8010cf2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8010cf4:	2308      	movs	r3, #8
 8010cf6:	e044      	b.n	8010d82 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cfe:	f003 0302 	and.w	r3, r3, #2
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d005      	beq.n	8010d12 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	2202      	movs	r2, #2
 8010d0c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8010d0e:	2302      	movs	r3, #2
 8010d10:	e037      	b.n	8010d82 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d18:	f003 0320 	and.w	r3, r3, #32
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d005      	beq.n	8010d2c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	2220      	movs	r2, #32
 8010d26:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8010d28:	2320      	movs	r3, #32
 8010d2a:	e02a      	b.n	8010d82 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	f240 523a 	movw	r2, #1338	; 0x53a
 8010d34:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	061a      	lsls	r2, r3, #24
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	021b      	lsls	r3, r3, #8
 8010d3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010d42:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	0a1b      	lsrs	r3, r3, #8
 8010d48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010d4c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	0e1b      	lsrs	r3, r3, #24
 8010d52:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d56:	601a      	str	r2, [r3, #0]
    scr++;
 8010d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d5a:	3304      	adds	r3, #4
 8010d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	061a      	lsls	r2, r3, #24
 8010d62:	68bb      	ldr	r3, [r7, #8]
 8010d64:	021b      	lsls	r3, r3, #8
 8010d66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010d6a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	0a1b      	lsrs	r3, r3, #8
 8010d70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8010d74:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010d76:	68bb      	ldr	r3, [r7, #8]
 8010d78:	0e1b      	lsrs	r3, r3, #24
 8010d7a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8010d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d7e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8010d80:	2300      	movs	r3, #0
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	373c      	adds	r7, #60	; 0x3c
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd90      	pop	{r4, r7, pc}

08010d8a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8010d8a:	b580      	push	{r7, lr}
 8010d8c:	b086      	sub	sp, #24
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d96:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d9c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8010d9e:	693b      	ldr	r3, [r7, #16]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d03f      	beq.n	8010e24 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8010da4:	2300      	movs	r3, #0
 8010da6:	617b      	str	r3, [r7, #20]
 8010da8:	e033      	b.n	8010e12 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	4618      	mov	r0, r3
 8010db0:	f002 fdac 	bl	801390c <SDMMC_ReadFIFO>
 8010db4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	b2da      	uxtb	r2, r3
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	3301      	adds	r3, #1
 8010dc2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010dc4:	693b      	ldr	r3, [r7, #16]
 8010dc6:	3b01      	subs	r3, #1
 8010dc8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	0a1b      	lsrs	r3, r3, #8
 8010dce:	b2da      	uxtb	r2, r3
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010dda:	693b      	ldr	r3, [r7, #16]
 8010ddc:	3b01      	subs	r3, #1
 8010dde:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	0c1b      	lsrs	r3, r3, #16
 8010de4:	b2da      	uxtb	r2, r3
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	3301      	adds	r3, #1
 8010dee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010df0:	693b      	ldr	r3, [r7, #16]
 8010df2:	3b01      	subs	r3, #1
 8010df4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	0e1b      	lsrs	r3, r3, #24
 8010dfa:	b2da      	uxtb	r2, r3
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	3301      	adds	r3, #1
 8010e04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010e06:	693b      	ldr	r3, [r7, #16]
 8010e08:	3b01      	subs	r3, #1
 8010e0a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	3301      	adds	r3, #1
 8010e10:	617b      	str	r3, [r7, #20]
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	2b07      	cmp	r3, #7
 8010e16:	d9c8      	bls.n	8010daa <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	68fa      	ldr	r2, [r7, #12]
 8010e1c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	693a      	ldr	r2, [r7, #16]
 8010e22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8010e24:	bf00      	nop
 8010e26:	3718      	adds	r7, #24
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}

08010e2c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b086      	sub	sp, #24
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6a1b      	ldr	r3, [r3, #32]
 8010e38:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e3e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8010e40:	693b      	ldr	r3, [r7, #16]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d043      	beq.n	8010ece <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8010e46:	2300      	movs	r3, #0
 8010e48:	617b      	str	r3, [r7, #20]
 8010e4a:	e037      	b.n	8010ebc <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	781b      	ldrb	r3, [r3, #0]
 8010e50:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	3301      	adds	r3, #1
 8010e56:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010e58:	693b      	ldr	r3, [r7, #16]
 8010e5a:	3b01      	subs	r3, #1
 8010e5c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	781b      	ldrb	r3, [r3, #0]
 8010e62:	021a      	lsls	r2, r3, #8
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	4313      	orrs	r3, r2
 8010e68:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010e70:	693b      	ldr	r3, [r7, #16]
 8010e72:	3b01      	subs	r3, #1
 8010e74:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	781b      	ldrb	r3, [r3, #0]
 8010e7a:	041a      	lsls	r2, r3, #16
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	4313      	orrs	r3, r2
 8010e80:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	3301      	adds	r3, #1
 8010e86:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010e88:	693b      	ldr	r3, [r7, #16]
 8010e8a:	3b01      	subs	r3, #1
 8010e8c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	781b      	ldrb	r3, [r3, #0]
 8010e92:	061a      	lsls	r2, r3, #24
 8010e94:	68bb      	ldr	r3, [r7, #8]
 8010e96:	4313      	orrs	r3, r2
 8010e98:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	3301      	adds	r3, #1
 8010e9e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010ea0:	693b      	ldr	r3, [r7, #16]
 8010ea2:	3b01      	subs	r3, #1
 8010ea4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	f107 0208 	add.w	r2, r7, #8
 8010eae:	4611      	mov	r1, r2
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f002 fd38 	bl	8013926 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	3301      	adds	r3, #1
 8010eba:	617b      	str	r3, [r7, #20]
 8010ebc:	697b      	ldr	r3, [r7, #20]
 8010ebe:	2b07      	cmp	r3, #7
 8010ec0:	d9c4      	bls.n	8010e4c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	68fa      	ldr	r2, [r7, #12]
 8010ec6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	693a      	ldr	r2, [r7, #16]
 8010ecc:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8010ece:	bf00      	nop
 8010ed0:	3718      	adds	r7, #24
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}

08010ed6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010ed6:	b580      	push	{r7, lr}
 8010ed8:	b084      	sub	sp, #16
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d101      	bne.n	8010ee8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	e09d      	b.n	8011024 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d108      	bne.n	8010f02 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	685b      	ldr	r3, [r3, #4]
 8010ef4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010ef8:	d009      	beq.n	8010f0e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2200      	movs	r2, #0
 8010efe:	61da      	str	r2, [r3, #28]
 8010f00:	e005      	b.n	8010f0e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2200      	movs	r2, #0
 8010f06:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2200      	movs	r2, #0
 8010f12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d106      	bne.n	8010f2e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2200      	movs	r2, #0
 8010f24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010f28:	6878      	ldr	r0, [r7, #4]
 8010f2a:	f7f7 faa9 	bl	8008480 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2202      	movs	r2, #2
 8010f32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	681a      	ldr	r2, [r3, #0]
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010f44:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	68db      	ldr	r3, [r3, #12]
 8010f4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010f4e:	d902      	bls.n	8010f56 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8010f50:	2300      	movs	r3, #0
 8010f52:	60fb      	str	r3, [r7, #12]
 8010f54:	e002      	b.n	8010f5c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8010f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f5a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	68db      	ldr	r3, [r3, #12]
 8010f60:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8010f64:	d007      	beq.n	8010f76 <HAL_SPI_Init+0xa0>
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	68db      	ldr	r3, [r3, #12]
 8010f6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010f6e:	d002      	beq.n	8010f76 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2200      	movs	r2, #0
 8010f74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	685b      	ldr	r3, [r3, #4]
 8010f7a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	689b      	ldr	r3, [r3, #8]
 8010f82:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8010f86:	431a      	orrs	r2, r3
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	691b      	ldr	r3, [r3, #16]
 8010f8c:	f003 0302 	and.w	r3, r3, #2
 8010f90:	431a      	orrs	r2, r3
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	695b      	ldr	r3, [r3, #20]
 8010f96:	f003 0301 	and.w	r3, r3, #1
 8010f9a:	431a      	orrs	r2, r3
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	699b      	ldr	r3, [r3, #24]
 8010fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010fa4:	431a      	orrs	r2, r3
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	69db      	ldr	r3, [r3, #28]
 8010faa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010fae:	431a      	orrs	r2, r3
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6a1b      	ldr	r3, [r3, #32]
 8010fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010fb8:	ea42 0103 	orr.w	r1, r2, r3
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	430a      	orrs	r2, r1
 8010fca:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	699b      	ldr	r3, [r3, #24]
 8010fd0:	0c1b      	lsrs	r3, r3, #16
 8010fd2:	f003 0204 	and.w	r2, r3, #4
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fda:	f003 0310 	and.w	r3, r3, #16
 8010fde:	431a      	orrs	r2, r3
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fe4:	f003 0308 	and.w	r3, r3, #8
 8010fe8:	431a      	orrs	r2, r3
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	68db      	ldr	r3, [r3, #12]
 8010fee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8010ff2:	ea42 0103 	orr.w	r1, r2, r3
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	430a      	orrs	r2, r1
 8011002:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	69da      	ldr	r2, [r3, #28]
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011012:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2200      	movs	r2, #0
 8011018:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	2201      	movs	r2, #1
 801101e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8011022:	2300      	movs	r3, #0
}
 8011024:	4618      	mov	r0, r3
 8011026:	3710      	adds	r7, #16
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}

0801102c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d101      	bne.n	801103e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801103a:	2301      	movs	r3, #1
 801103c:	e049      	b.n	80110d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011044:	b2db      	uxtb	r3, r3
 8011046:	2b00      	cmp	r3, #0
 8011048:	d106      	bne.n	8011058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2200      	movs	r2, #0
 801104e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f7f7 faa6 	bl	80085a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2202      	movs	r2, #2
 801105c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681a      	ldr	r2, [r3, #0]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	3304      	adds	r3, #4
 8011068:	4619      	mov	r1, r3
 801106a:	4610      	mov	r0, r2
 801106c:	f000 fd98 	bl	8011ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2201      	movs	r2, #1
 8011074:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2201      	movs	r2, #1
 801107c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2201      	movs	r2, #1
 8011084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2201      	movs	r2, #1
 801108c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2201      	movs	r2, #1
 8011094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2201      	movs	r2, #1
 801109c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2201      	movs	r2, #1
 80110a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2201      	movs	r2, #1
 80110ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2201      	movs	r2, #1
 80110b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2201      	movs	r2, #1
 80110bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2201      	movs	r2, #1
 80110c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2201      	movs	r2, #1
 80110cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80110d0:	2300      	movs	r3, #0
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3708      	adds	r7, #8
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
	...

080110dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80110dc:	b480      	push	{r7}
 80110de:	b085      	sub	sp, #20
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80110ea:	b2db      	uxtb	r3, r3
 80110ec:	2b01      	cmp	r3, #1
 80110ee:	d001      	beq.n	80110f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80110f0:	2301      	movs	r3, #1
 80110f2:	e04c      	b.n	801118e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2202      	movs	r2, #2
 80110f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	4a26      	ldr	r2, [pc, #152]	; (801119c <HAL_TIM_Base_Start+0xc0>)
 8011102:	4293      	cmp	r3, r2
 8011104:	d022      	beq.n	801114c <HAL_TIM_Base_Start+0x70>
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801110e:	d01d      	beq.n	801114c <HAL_TIM_Base_Start+0x70>
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	4a22      	ldr	r2, [pc, #136]	; (80111a0 <HAL_TIM_Base_Start+0xc4>)
 8011116:	4293      	cmp	r3, r2
 8011118:	d018      	beq.n	801114c <HAL_TIM_Base_Start+0x70>
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	4a21      	ldr	r2, [pc, #132]	; (80111a4 <HAL_TIM_Base_Start+0xc8>)
 8011120:	4293      	cmp	r3, r2
 8011122:	d013      	beq.n	801114c <HAL_TIM_Base_Start+0x70>
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	4a1f      	ldr	r2, [pc, #124]	; (80111a8 <HAL_TIM_Base_Start+0xcc>)
 801112a:	4293      	cmp	r3, r2
 801112c:	d00e      	beq.n	801114c <HAL_TIM_Base_Start+0x70>
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	4a1e      	ldr	r2, [pc, #120]	; (80111ac <HAL_TIM_Base_Start+0xd0>)
 8011134:	4293      	cmp	r3, r2
 8011136:	d009      	beq.n	801114c <HAL_TIM_Base_Start+0x70>
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	4a1c      	ldr	r2, [pc, #112]	; (80111b0 <HAL_TIM_Base_Start+0xd4>)
 801113e:	4293      	cmp	r3, r2
 8011140:	d004      	beq.n	801114c <HAL_TIM_Base_Start+0x70>
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	4a1b      	ldr	r2, [pc, #108]	; (80111b4 <HAL_TIM_Base_Start+0xd8>)
 8011148:	4293      	cmp	r3, r2
 801114a:	d115      	bne.n	8011178 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	689a      	ldr	r2, [r3, #8]
 8011152:	4b19      	ldr	r3, [pc, #100]	; (80111b8 <HAL_TIM_Base_Start+0xdc>)
 8011154:	4013      	ands	r3, r2
 8011156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2b06      	cmp	r3, #6
 801115c:	d015      	beq.n	801118a <HAL_TIM_Base_Start+0xae>
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011164:	d011      	beq.n	801118a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	681a      	ldr	r2, [r3, #0]
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	f042 0201 	orr.w	r2, r2, #1
 8011174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011176:	e008      	b.n	801118a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	681a      	ldr	r2, [r3, #0]
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	f042 0201 	orr.w	r2, r2, #1
 8011186:	601a      	str	r2, [r3, #0]
 8011188:	e000      	b.n	801118c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801118a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801118c:	2300      	movs	r3, #0
}
 801118e:	4618      	mov	r0, r3
 8011190:	3714      	adds	r7, #20
 8011192:	46bd      	mov	sp, r7
 8011194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011198:	4770      	bx	lr
 801119a:	bf00      	nop
 801119c:	40010000 	.word	0x40010000
 80111a0:	40000400 	.word	0x40000400
 80111a4:	40000800 	.word	0x40000800
 80111a8:	40000c00 	.word	0x40000c00
 80111ac:	40010400 	.word	0x40010400
 80111b0:	40014000 	.word	0x40014000
 80111b4:	40001800 	.word	0x40001800
 80111b8:	00010007 	.word	0x00010007

080111bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80111bc:	b480      	push	{r7}
 80111be:	b085      	sub	sp, #20
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80111ca:	b2db      	uxtb	r3, r3
 80111cc:	2b01      	cmp	r3, #1
 80111ce:	d001      	beq.n	80111d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80111d0:	2301      	movs	r3, #1
 80111d2:	e054      	b.n	801127e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2202      	movs	r2, #2
 80111d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	68da      	ldr	r2, [r3, #12]
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	f042 0201 	orr.w	r2, r2, #1
 80111ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	4a26      	ldr	r2, [pc, #152]	; (801128c <HAL_TIM_Base_Start_IT+0xd0>)
 80111f2:	4293      	cmp	r3, r2
 80111f4:	d022      	beq.n	801123c <HAL_TIM_Base_Start_IT+0x80>
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80111fe:	d01d      	beq.n	801123c <HAL_TIM_Base_Start_IT+0x80>
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	4a22      	ldr	r2, [pc, #136]	; (8011290 <HAL_TIM_Base_Start_IT+0xd4>)
 8011206:	4293      	cmp	r3, r2
 8011208:	d018      	beq.n	801123c <HAL_TIM_Base_Start_IT+0x80>
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	4a21      	ldr	r2, [pc, #132]	; (8011294 <HAL_TIM_Base_Start_IT+0xd8>)
 8011210:	4293      	cmp	r3, r2
 8011212:	d013      	beq.n	801123c <HAL_TIM_Base_Start_IT+0x80>
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	4a1f      	ldr	r2, [pc, #124]	; (8011298 <HAL_TIM_Base_Start_IT+0xdc>)
 801121a:	4293      	cmp	r3, r2
 801121c:	d00e      	beq.n	801123c <HAL_TIM_Base_Start_IT+0x80>
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	4a1e      	ldr	r2, [pc, #120]	; (801129c <HAL_TIM_Base_Start_IT+0xe0>)
 8011224:	4293      	cmp	r3, r2
 8011226:	d009      	beq.n	801123c <HAL_TIM_Base_Start_IT+0x80>
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	4a1c      	ldr	r2, [pc, #112]	; (80112a0 <HAL_TIM_Base_Start_IT+0xe4>)
 801122e:	4293      	cmp	r3, r2
 8011230:	d004      	beq.n	801123c <HAL_TIM_Base_Start_IT+0x80>
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	4a1b      	ldr	r2, [pc, #108]	; (80112a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8011238:	4293      	cmp	r3, r2
 801123a:	d115      	bne.n	8011268 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	689a      	ldr	r2, [r3, #8]
 8011242:	4b19      	ldr	r3, [pc, #100]	; (80112a8 <HAL_TIM_Base_Start_IT+0xec>)
 8011244:	4013      	ands	r3, r2
 8011246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	2b06      	cmp	r3, #6
 801124c:	d015      	beq.n	801127a <HAL_TIM_Base_Start_IT+0xbe>
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011254:	d011      	beq.n	801127a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	681a      	ldr	r2, [r3, #0]
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	f042 0201 	orr.w	r2, r2, #1
 8011264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011266:	e008      	b.n	801127a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	681a      	ldr	r2, [r3, #0]
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	f042 0201 	orr.w	r2, r2, #1
 8011276:	601a      	str	r2, [r3, #0]
 8011278:	e000      	b.n	801127c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801127a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801127c:	2300      	movs	r3, #0
}
 801127e:	4618      	mov	r0, r3
 8011280:	3714      	adds	r7, #20
 8011282:	46bd      	mov	sp, r7
 8011284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011288:	4770      	bx	lr
 801128a:	bf00      	nop
 801128c:	40010000 	.word	0x40010000
 8011290:	40000400 	.word	0x40000400
 8011294:	40000800 	.word	0x40000800
 8011298:	40000c00 	.word	0x40000c00
 801129c:	40010400 	.word	0x40010400
 80112a0:	40014000 	.word	0x40014000
 80112a4:	40001800 	.word	0x40001800
 80112a8:	00010007 	.word	0x00010007

080112ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b082      	sub	sp, #8
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d101      	bne.n	80112be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80112ba:	2301      	movs	r3, #1
 80112bc:	e049      	b.n	8011352 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80112c4:	b2db      	uxtb	r3, r3
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d106      	bne.n	80112d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	2200      	movs	r2, #0
 80112ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f000 f841 	bl	801135a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2202      	movs	r2, #2
 80112dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681a      	ldr	r2, [r3, #0]
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	3304      	adds	r3, #4
 80112e8:	4619      	mov	r1, r3
 80112ea:	4610      	mov	r0, r2
 80112ec:	f000 fc58 	bl	8011ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2201      	movs	r2, #1
 80112f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2201      	movs	r2, #1
 80112fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2201      	movs	r2, #1
 8011304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2201      	movs	r2, #1
 801130c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2201      	movs	r2, #1
 8011314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2201      	movs	r2, #1
 801131c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2201      	movs	r2, #1
 8011324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2201      	movs	r2, #1
 801132c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2201      	movs	r2, #1
 8011334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2201      	movs	r2, #1
 801133c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	2201      	movs	r2, #1
 8011344:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2201      	movs	r2, #1
 801134c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011350:	2300      	movs	r3, #0
}
 8011352:	4618      	mov	r0, r3
 8011354:	3708      	adds	r7, #8
 8011356:	46bd      	mov	sp, r7
 8011358:	bd80      	pop	{r7, pc}

0801135a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801135a:	b480      	push	{r7}
 801135c:	b083      	sub	sp, #12
 801135e:	af00      	add	r7, sp, #0
 8011360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8011362:	bf00      	nop
 8011364:	370c      	adds	r7, #12
 8011366:	46bd      	mov	sp, r7
 8011368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136c:	4770      	bx	lr
	...

08011370 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b084      	sub	sp, #16
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
 8011378:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d109      	bne.n	8011394 <HAL_TIM_PWM_Start+0x24>
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011386:	b2db      	uxtb	r3, r3
 8011388:	2b01      	cmp	r3, #1
 801138a:	bf14      	ite	ne
 801138c:	2301      	movne	r3, #1
 801138e:	2300      	moveq	r3, #0
 8011390:	b2db      	uxtb	r3, r3
 8011392:	e03c      	b.n	801140e <HAL_TIM_PWM_Start+0x9e>
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	2b04      	cmp	r3, #4
 8011398:	d109      	bne.n	80113ae <HAL_TIM_PWM_Start+0x3e>
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80113a0:	b2db      	uxtb	r3, r3
 80113a2:	2b01      	cmp	r3, #1
 80113a4:	bf14      	ite	ne
 80113a6:	2301      	movne	r3, #1
 80113a8:	2300      	moveq	r3, #0
 80113aa:	b2db      	uxtb	r3, r3
 80113ac:	e02f      	b.n	801140e <HAL_TIM_PWM_Start+0x9e>
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	2b08      	cmp	r3, #8
 80113b2:	d109      	bne.n	80113c8 <HAL_TIM_PWM_Start+0x58>
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80113ba:	b2db      	uxtb	r3, r3
 80113bc:	2b01      	cmp	r3, #1
 80113be:	bf14      	ite	ne
 80113c0:	2301      	movne	r3, #1
 80113c2:	2300      	moveq	r3, #0
 80113c4:	b2db      	uxtb	r3, r3
 80113c6:	e022      	b.n	801140e <HAL_TIM_PWM_Start+0x9e>
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	2b0c      	cmp	r3, #12
 80113cc:	d109      	bne.n	80113e2 <HAL_TIM_PWM_Start+0x72>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80113d4:	b2db      	uxtb	r3, r3
 80113d6:	2b01      	cmp	r3, #1
 80113d8:	bf14      	ite	ne
 80113da:	2301      	movne	r3, #1
 80113dc:	2300      	moveq	r3, #0
 80113de:	b2db      	uxtb	r3, r3
 80113e0:	e015      	b.n	801140e <HAL_TIM_PWM_Start+0x9e>
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	2b10      	cmp	r3, #16
 80113e6:	d109      	bne.n	80113fc <HAL_TIM_PWM_Start+0x8c>
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80113ee:	b2db      	uxtb	r3, r3
 80113f0:	2b01      	cmp	r3, #1
 80113f2:	bf14      	ite	ne
 80113f4:	2301      	movne	r3, #1
 80113f6:	2300      	moveq	r3, #0
 80113f8:	b2db      	uxtb	r3, r3
 80113fa:	e008      	b.n	801140e <HAL_TIM_PWM_Start+0x9e>
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011402:	b2db      	uxtb	r3, r3
 8011404:	2b01      	cmp	r3, #1
 8011406:	bf14      	ite	ne
 8011408:	2301      	movne	r3, #1
 801140a:	2300      	moveq	r3, #0
 801140c:	b2db      	uxtb	r3, r3
 801140e:	2b00      	cmp	r3, #0
 8011410:	d001      	beq.n	8011416 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8011412:	2301      	movs	r3, #1
 8011414:	e092      	b.n	801153c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d104      	bne.n	8011426 <HAL_TIM_PWM_Start+0xb6>
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2202      	movs	r2, #2
 8011420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011424:	e023      	b.n	801146e <HAL_TIM_PWM_Start+0xfe>
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	2b04      	cmp	r3, #4
 801142a:	d104      	bne.n	8011436 <HAL_TIM_PWM_Start+0xc6>
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	2202      	movs	r2, #2
 8011430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011434:	e01b      	b.n	801146e <HAL_TIM_PWM_Start+0xfe>
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	2b08      	cmp	r3, #8
 801143a:	d104      	bne.n	8011446 <HAL_TIM_PWM_Start+0xd6>
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2202      	movs	r2, #2
 8011440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011444:	e013      	b.n	801146e <HAL_TIM_PWM_Start+0xfe>
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	2b0c      	cmp	r3, #12
 801144a:	d104      	bne.n	8011456 <HAL_TIM_PWM_Start+0xe6>
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2202      	movs	r2, #2
 8011450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011454:	e00b      	b.n	801146e <HAL_TIM_PWM_Start+0xfe>
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	2b10      	cmp	r3, #16
 801145a:	d104      	bne.n	8011466 <HAL_TIM_PWM_Start+0xf6>
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2202      	movs	r2, #2
 8011460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011464:	e003      	b.n	801146e <HAL_TIM_PWM_Start+0xfe>
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	2202      	movs	r2, #2
 801146a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	2201      	movs	r2, #1
 8011474:	6839      	ldr	r1, [r7, #0]
 8011476:	4618      	mov	r0, r3
 8011478:	f000 ff2a 	bl	80122d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	4a30      	ldr	r2, [pc, #192]	; (8011544 <HAL_TIM_PWM_Start+0x1d4>)
 8011482:	4293      	cmp	r3, r2
 8011484:	d004      	beq.n	8011490 <HAL_TIM_PWM_Start+0x120>
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	4a2f      	ldr	r2, [pc, #188]	; (8011548 <HAL_TIM_PWM_Start+0x1d8>)
 801148c:	4293      	cmp	r3, r2
 801148e:	d101      	bne.n	8011494 <HAL_TIM_PWM_Start+0x124>
 8011490:	2301      	movs	r3, #1
 8011492:	e000      	b.n	8011496 <HAL_TIM_PWM_Start+0x126>
 8011494:	2300      	movs	r3, #0
 8011496:	2b00      	cmp	r3, #0
 8011498:	d007      	beq.n	80114aa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80114a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	4a25      	ldr	r2, [pc, #148]	; (8011544 <HAL_TIM_PWM_Start+0x1d4>)
 80114b0:	4293      	cmp	r3, r2
 80114b2:	d022      	beq.n	80114fa <HAL_TIM_PWM_Start+0x18a>
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80114bc:	d01d      	beq.n	80114fa <HAL_TIM_PWM_Start+0x18a>
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	4a22      	ldr	r2, [pc, #136]	; (801154c <HAL_TIM_PWM_Start+0x1dc>)
 80114c4:	4293      	cmp	r3, r2
 80114c6:	d018      	beq.n	80114fa <HAL_TIM_PWM_Start+0x18a>
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	4a20      	ldr	r2, [pc, #128]	; (8011550 <HAL_TIM_PWM_Start+0x1e0>)
 80114ce:	4293      	cmp	r3, r2
 80114d0:	d013      	beq.n	80114fa <HAL_TIM_PWM_Start+0x18a>
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	4a1f      	ldr	r2, [pc, #124]	; (8011554 <HAL_TIM_PWM_Start+0x1e4>)
 80114d8:	4293      	cmp	r3, r2
 80114da:	d00e      	beq.n	80114fa <HAL_TIM_PWM_Start+0x18a>
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	4a19      	ldr	r2, [pc, #100]	; (8011548 <HAL_TIM_PWM_Start+0x1d8>)
 80114e2:	4293      	cmp	r3, r2
 80114e4:	d009      	beq.n	80114fa <HAL_TIM_PWM_Start+0x18a>
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	4a1b      	ldr	r2, [pc, #108]	; (8011558 <HAL_TIM_PWM_Start+0x1e8>)
 80114ec:	4293      	cmp	r3, r2
 80114ee:	d004      	beq.n	80114fa <HAL_TIM_PWM_Start+0x18a>
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	4a19      	ldr	r2, [pc, #100]	; (801155c <HAL_TIM_PWM_Start+0x1ec>)
 80114f6:	4293      	cmp	r3, r2
 80114f8:	d115      	bne.n	8011526 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	689a      	ldr	r2, [r3, #8]
 8011500:	4b17      	ldr	r3, [pc, #92]	; (8011560 <HAL_TIM_PWM_Start+0x1f0>)
 8011502:	4013      	ands	r3, r2
 8011504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	2b06      	cmp	r3, #6
 801150a:	d015      	beq.n	8011538 <HAL_TIM_PWM_Start+0x1c8>
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011512:	d011      	beq.n	8011538 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	681a      	ldr	r2, [r3, #0]
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	f042 0201 	orr.w	r2, r2, #1
 8011522:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011524:	e008      	b.n	8011538 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	681a      	ldr	r2, [r3, #0]
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	f042 0201 	orr.w	r2, r2, #1
 8011534:	601a      	str	r2, [r3, #0]
 8011536:	e000      	b.n	801153a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011538:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801153a:	2300      	movs	r3, #0
}
 801153c:	4618      	mov	r0, r3
 801153e:	3710      	adds	r7, #16
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}
 8011544:	40010000 	.word	0x40010000
 8011548:	40010400 	.word	0x40010400
 801154c:	40000400 	.word	0x40000400
 8011550:	40000800 	.word	0x40000800
 8011554:	40000c00 	.word	0x40000c00
 8011558:	40014000 	.word	0x40014000
 801155c:	40001800 	.word	0x40001800
 8011560:	00010007 	.word	0x00010007

08011564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b082      	sub	sp, #8
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	691b      	ldr	r3, [r3, #16]
 8011572:	f003 0302 	and.w	r3, r3, #2
 8011576:	2b02      	cmp	r3, #2
 8011578:	d122      	bne.n	80115c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	68db      	ldr	r3, [r3, #12]
 8011580:	f003 0302 	and.w	r3, r3, #2
 8011584:	2b02      	cmp	r3, #2
 8011586:	d11b      	bne.n	80115c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	f06f 0202 	mvn.w	r2, #2
 8011590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	2201      	movs	r2, #1
 8011596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	699b      	ldr	r3, [r3, #24]
 801159e:	f003 0303 	and.w	r3, r3, #3
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d003      	beq.n	80115ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80115a6:	6878      	ldr	r0, [r7, #4]
 80115a8:	f000 fadc 	bl	8011b64 <HAL_TIM_IC_CaptureCallback>
 80115ac:	e005      	b.n	80115ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f000 face 	bl	8011b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80115b4:	6878      	ldr	r0, [r7, #4]
 80115b6:	f000 fadf 	bl	8011b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2200      	movs	r2, #0
 80115be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	691b      	ldr	r3, [r3, #16]
 80115c6:	f003 0304 	and.w	r3, r3, #4
 80115ca:	2b04      	cmp	r3, #4
 80115cc:	d122      	bne.n	8011614 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	68db      	ldr	r3, [r3, #12]
 80115d4:	f003 0304 	and.w	r3, r3, #4
 80115d8:	2b04      	cmp	r3, #4
 80115da:	d11b      	bne.n	8011614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	f06f 0204 	mvn.w	r2, #4
 80115e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	2202      	movs	r2, #2
 80115ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	699b      	ldr	r3, [r3, #24]
 80115f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d003      	beq.n	8011602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f000 fab2 	bl	8011b64 <HAL_TIM_IC_CaptureCallback>
 8011600:	e005      	b.n	801160e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f000 faa4 	bl	8011b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011608:	6878      	ldr	r0, [r7, #4]
 801160a:	f000 fab5 	bl	8011b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	2200      	movs	r2, #0
 8011612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	691b      	ldr	r3, [r3, #16]
 801161a:	f003 0308 	and.w	r3, r3, #8
 801161e:	2b08      	cmp	r3, #8
 8011620:	d122      	bne.n	8011668 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	68db      	ldr	r3, [r3, #12]
 8011628:	f003 0308 	and.w	r3, r3, #8
 801162c:	2b08      	cmp	r3, #8
 801162e:	d11b      	bne.n	8011668 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	f06f 0208 	mvn.w	r2, #8
 8011638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2204      	movs	r2, #4
 801163e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	69db      	ldr	r3, [r3, #28]
 8011646:	f003 0303 	and.w	r3, r3, #3
 801164a:	2b00      	cmp	r3, #0
 801164c:	d003      	beq.n	8011656 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801164e:	6878      	ldr	r0, [r7, #4]
 8011650:	f000 fa88 	bl	8011b64 <HAL_TIM_IC_CaptureCallback>
 8011654:	e005      	b.n	8011662 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011656:	6878      	ldr	r0, [r7, #4]
 8011658:	f000 fa7a 	bl	8011b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f000 fa8b 	bl	8011b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2200      	movs	r2, #0
 8011666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	691b      	ldr	r3, [r3, #16]
 801166e:	f003 0310 	and.w	r3, r3, #16
 8011672:	2b10      	cmp	r3, #16
 8011674:	d122      	bne.n	80116bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	68db      	ldr	r3, [r3, #12]
 801167c:	f003 0310 	and.w	r3, r3, #16
 8011680:	2b10      	cmp	r3, #16
 8011682:	d11b      	bne.n	80116bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	f06f 0210 	mvn.w	r2, #16
 801168c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2208      	movs	r2, #8
 8011692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	69db      	ldr	r3, [r3, #28]
 801169a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d003      	beq.n	80116aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80116a2:	6878      	ldr	r0, [r7, #4]
 80116a4:	f000 fa5e 	bl	8011b64 <HAL_TIM_IC_CaptureCallback>
 80116a8:	e005      	b.n	80116b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	f000 fa50 	bl	8011b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f000 fa61 	bl	8011b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2200      	movs	r2, #0
 80116ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	691b      	ldr	r3, [r3, #16]
 80116c2:	f003 0301 	and.w	r3, r3, #1
 80116c6:	2b01      	cmp	r3, #1
 80116c8:	d10e      	bne.n	80116e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	68db      	ldr	r3, [r3, #12]
 80116d0:	f003 0301 	and.w	r3, r3, #1
 80116d4:	2b01      	cmp	r3, #1
 80116d6:	d107      	bne.n	80116e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	f06f 0201 	mvn.w	r2, #1
 80116e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80116e2:	6878      	ldr	r0, [r7, #4]
 80116e4:	f7f6 f9aa 	bl	8007a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	691b      	ldr	r3, [r3, #16]
 80116ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116f2:	2b80      	cmp	r3, #128	; 0x80
 80116f4:	d10e      	bne.n	8011714 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	68db      	ldr	r3, [r3, #12]
 80116fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011700:	2b80      	cmp	r3, #128	; 0x80
 8011702:	d107      	bne.n	8011714 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801170c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801170e:	6878      	ldr	r0, [r7, #4]
 8011710:	f000 fe9c 	bl	801244c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	691b      	ldr	r3, [r3, #16]
 801171a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801171e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011722:	d10e      	bne.n	8011742 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	68db      	ldr	r3, [r3, #12]
 801172a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801172e:	2b80      	cmp	r3, #128	; 0x80
 8011730:	d107      	bne.n	8011742 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801173a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	f000 fe8f 	bl	8012460 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	691b      	ldr	r3, [r3, #16]
 8011748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801174c:	2b40      	cmp	r3, #64	; 0x40
 801174e:	d10e      	bne.n	801176e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	68db      	ldr	r3, [r3, #12]
 8011756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801175a:	2b40      	cmp	r3, #64	; 0x40
 801175c:	d107      	bne.n	801176e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011768:	6878      	ldr	r0, [r7, #4]
 801176a:	f000 fa0f 	bl	8011b8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	691b      	ldr	r3, [r3, #16]
 8011774:	f003 0320 	and.w	r3, r3, #32
 8011778:	2b20      	cmp	r3, #32
 801177a:	d10e      	bne.n	801179a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	68db      	ldr	r3, [r3, #12]
 8011782:	f003 0320 	and.w	r3, r3, #32
 8011786:	2b20      	cmp	r3, #32
 8011788:	d107      	bne.n	801179a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	f06f 0220 	mvn.w	r2, #32
 8011792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011794:	6878      	ldr	r0, [r7, #4]
 8011796:	f000 fe4f 	bl	8012438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801179a:	bf00      	nop
 801179c:	3708      	adds	r7, #8
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}
	...

080117a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b084      	sub	sp, #16
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	60f8      	str	r0, [r7, #12]
 80117ac:	60b9      	str	r1, [r7, #8]
 80117ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80117b6:	2b01      	cmp	r3, #1
 80117b8:	d101      	bne.n	80117be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80117ba:	2302      	movs	r3, #2
 80117bc:	e0fd      	b.n	80119ba <HAL_TIM_PWM_ConfigChannel+0x216>
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	2201      	movs	r2, #1
 80117c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2b14      	cmp	r3, #20
 80117ca:	f200 80f0 	bhi.w	80119ae <HAL_TIM_PWM_ConfigChannel+0x20a>
 80117ce:	a201      	add	r2, pc, #4	; (adr r2, 80117d4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80117d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117d4:	08011829 	.word	0x08011829
 80117d8:	080119af 	.word	0x080119af
 80117dc:	080119af 	.word	0x080119af
 80117e0:	080119af 	.word	0x080119af
 80117e4:	08011869 	.word	0x08011869
 80117e8:	080119af 	.word	0x080119af
 80117ec:	080119af 	.word	0x080119af
 80117f0:	080119af 	.word	0x080119af
 80117f4:	080118ab 	.word	0x080118ab
 80117f8:	080119af 	.word	0x080119af
 80117fc:	080119af 	.word	0x080119af
 8011800:	080119af 	.word	0x080119af
 8011804:	080118eb 	.word	0x080118eb
 8011808:	080119af 	.word	0x080119af
 801180c:	080119af 	.word	0x080119af
 8011810:	080119af 	.word	0x080119af
 8011814:	0801192d 	.word	0x0801192d
 8011818:	080119af 	.word	0x080119af
 801181c:	080119af 	.word	0x080119af
 8011820:	080119af 	.word	0x080119af
 8011824:	0801196d 	.word	0x0801196d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	68b9      	ldr	r1, [r7, #8]
 801182e:	4618      	mov	r0, r3
 8011830:	f000 fa56 	bl	8011ce0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	699a      	ldr	r2, [r3, #24]
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	f042 0208 	orr.w	r2, r2, #8
 8011842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	699a      	ldr	r2, [r3, #24]
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	f022 0204 	bic.w	r2, r2, #4
 8011852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	6999      	ldr	r1, [r3, #24]
 801185a:	68bb      	ldr	r3, [r7, #8]
 801185c:	691a      	ldr	r2, [r3, #16]
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	430a      	orrs	r2, r1
 8011864:	619a      	str	r2, [r3, #24]
      break;
 8011866:	e0a3      	b.n	80119b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	68b9      	ldr	r1, [r7, #8]
 801186e:	4618      	mov	r0, r3
 8011870:	f000 faa8 	bl	8011dc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	699a      	ldr	r2, [r3, #24]
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	699a      	ldr	r2, [r3, #24]
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	6999      	ldr	r1, [r3, #24]
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	691b      	ldr	r3, [r3, #16]
 801189e:	021a      	lsls	r2, r3, #8
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	430a      	orrs	r2, r1
 80118a6:	619a      	str	r2, [r3, #24]
      break;
 80118a8:	e082      	b.n	80119b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	68b9      	ldr	r1, [r7, #8]
 80118b0:	4618      	mov	r0, r3
 80118b2:	f000 faff 	bl	8011eb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	69da      	ldr	r2, [r3, #28]
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	f042 0208 	orr.w	r2, r2, #8
 80118c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	69da      	ldr	r2, [r3, #28]
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	f022 0204 	bic.w	r2, r2, #4
 80118d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	69d9      	ldr	r1, [r3, #28]
 80118dc:	68bb      	ldr	r3, [r7, #8]
 80118de:	691a      	ldr	r2, [r3, #16]
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	430a      	orrs	r2, r1
 80118e6:	61da      	str	r2, [r3, #28]
      break;
 80118e8:	e062      	b.n	80119b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	68b9      	ldr	r1, [r7, #8]
 80118f0:	4618      	mov	r0, r3
 80118f2:	f000 fb55 	bl	8011fa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	69da      	ldr	r2, [r3, #28]
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	69da      	ldr	r2, [r3, #28]
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	69d9      	ldr	r1, [r3, #28]
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	691b      	ldr	r3, [r3, #16]
 8011920:	021a      	lsls	r2, r3, #8
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	430a      	orrs	r2, r1
 8011928:	61da      	str	r2, [r3, #28]
      break;
 801192a:	e041      	b.n	80119b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	68b9      	ldr	r1, [r7, #8]
 8011932:	4618      	mov	r0, r3
 8011934:	f000 fb8c 	bl	8012050 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	f042 0208 	orr.w	r2, r2, #8
 8011946:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	f022 0204 	bic.w	r2, r2, #4
 8011956:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801195e:	68bb      	ldr	r3, [r7, #8]
 8011960:	691a      	ldr	r2, [r3, #16]
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	430a      	orrs	r2, r1
 8011968:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801196a:	e021      	b.n	80119b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	68b9      	ldr	r1, [r7, #8]
 8011972:	4618      	mov	r0, r3
 8011974:	f000 fbbe 	bl	80120f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011986:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011996:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	691b      	ldr	r3, [r3, #16]
 80119a2:	021a      	lsls	r2, r3, #8
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	430a      	orrs	r2, r1
 80119aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80119ac:	e000      	b.n	80119b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80119ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	2200      	movs	r2, #0
 80119b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80119b8:	2300      	movs	r3, #0
}
 80119ba:	4618      	mov	r0, r3
 80119bc:	3710      	adds	r7, #16
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}
 80119c2:	bf00      	nop

080119c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b084      	sub	sp, #16
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80119d4:	2b01      	cmp	r3, #1
 80119d6:	d101      	bne.n	80119dc <HAL_TIM_ConfigClockSource+0x18>
 80119d8:	2302      	movs	r3, #2
 80119da:	e0b3      	b.n	8011b44 <HAL_TIM_ConfigClockSource+0x180>
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	2201      	movs	r2, #1
 80119e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2202      	movs	r2, #2
 80119e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	689b      	ldr	r3, [r3, #8]
 80119f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80119f4:	68fa      	ldr	r2, [r7, #12]
 80119f6:	4b55      	ldr	r3, [pc, #340]	; (8011b4c <HAL_TIM_ConfigClockSource+0x188>)
 80119f8:	4013      	ands	r3, r2
 80119fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011a02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	68fa      	ldr	r2, [r7, #12]
 8011a0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011a14:	d03e      	beq.n	8011a94 <HAL_TIM_ConfigClockSource+0xd0>
 8011a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011a1a:	f200 8087 	bhi.w	8011b2c <HAL_TIM_ConfigClockSource+0x168>
 8011a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a22:	f000 8085 	beq.w	8011b30 <HAL_TIM_ConfigClockSource+0x16c>
 8011a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a2a:	d87f      	bhi.n	8011b2c <HAL_TIM_ConfigClockSource+0x168>
 8011a2c:	2b70      	cmp	r3, #112	; 0x70
 8011a2e:	d01a      	beq.n	8011a66 <HAL_TIM_ConfigClockSource+0xa2>
 8011a30:	2b70      	cmp	r3, #112	; 0x70
 8011a32:	d87b      	bhi.n	8011b2c <HAL_TIM_ConfigClockSource+0x168>
 8011a34:	2b60      	cmp	r3, #96	; 0x60
 8011a36:	d050      	beq.n	8011ada <HAL_TIM_ConfigClockSource+0x116>
 8011a38:	2b60      	cmp	r3, #96	; 0x60
 8011a3a:	d877      	bhi.n	8011b2c <HAL_TIM_ConfigClockSource+0x168>
 8011a3c:	2b50      	cmp	r3, #80	; 0x50
 8011a3e:	d03c      	beq.n	8011aba <HAL_TIM_ConfigClockSource+0xf6>
 8011a40:	2b50      	cmp	r3, #80	; 0x50
 8011a42:	d873      	bhi.n	8011b2c <HAL_TIM_ConfigClockSource+0x168>
 8011a44:	2b40      	cmp	r3, #64	; 0x40
 8011a46:	d058      	beq.n	8011afa <HAL_TIM_ConfigClockSource+0x136>
 8011a48:	2b40      	cmp	r3, #64	; 0x40
 8011a4a:	d86f      	bhi.n	8011b2c <HAL_TIM_ConfigClockSource+0x168>
 8011a4c:	2b30      	cmp	r3, #48	; 0x30
 8011a4e:	d064      	beq.n	8011b1a <HAL_TIM_ConfigClockSource+0x156>
 8011a50:	2b30      	cmp	r3, #48	; 0x30
 8011a52:	d86b      	bhi.n	8011b2c <HAL_TIM_ConfigClockSource+0x168>
 8011a54:	2b20      	cmp	r3, #32
 8011a56:	d060      	beq.n	8011b1a <HAL_TIM_ConfigClockSource+0x156>
 8011a58:	2b20      	cmp	r3, #32
 8011a5a:	d867      	bhi.n	8011b2c <HAL_TIM_ConfigClockSource+0x168>
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d05c      	beq.n	8011b1a <HAL_TIM_ConfigClockSource+0x156>
 8011a60:	2b10      	cmp	r3, #16
 8011a62:	d05a      	beq.n	8011b1a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8011a64:	e062      	b.n	8011b2c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	6818      	ldr	r0, [r3, #0]
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	6899      	ldr	r1, [r3, #8]
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	685a      	ldr	r2, [r3, #4]
 8011a72:	683b      	ldr	r3, [r7, #0]
 8011a74:	68db      	ldr	r3, [r3, #12]
 8011a76:	f000 fc0b 	bl	8012290 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	689b      	ldr	r3, [r3, #8]
 8011a80:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011a88:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	68fa      	ldr	r2, [r7, #12]
 8011a90:	609a      	str	r2, [r3, #8]
      break;
 8011a92:	e04e      	b.n	8011b32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	6818      	ldr	r0, [r3, #0]
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	6899      	ldr	r1, [r3, #8]
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	685a      	ldr	r2, [r3, #4]
 8011aa0:	683b      	ldr	r3, [r7, #0]
 8011aa2:	68db      	ldr	r3, [r3, #12]
 8011aa4:	f000 fbf4 	bl	8012290 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	689a      	ldr	r2, [r3, #8]
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011ab6:	609a      	str	r2, [r3, #8]
      break;
 8011ab8:	e03b      	b.n	8011b32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	6818      	ldr	r0, [r3, #0]
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	6859      	ldr	r1, [r3, #4]
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	68db      	ldr	r3, [r3, #12]
 8011ac6:	461a      	mov	r2, r3
 8011ac8:	f000 fb68 	bl	801219c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	2150      	movs	r1, #80	; 0x50
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f000 fbc1 	bl	801225a <TIM_ITRx_SetConfig>
      break;
 8011ad8:	e02b      	b.n	8011b32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	6818      	ldr	r0, [r3, #0]
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	6859      	ldr	r1, [r3, #4]
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	68db      	ldr	r3, [r3, #12]
 8011ae6:	461a      	mov	r2, r3
 8011ae8:	f000 fb87 	bl	80121fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	2160      	movs	r1, #96	; 0x60
 8011af2:	4618      	mov	r0, r3
 8011af4:	f000 fbb1 	bl	801225a <TIM_ITRx_SetConfig>
      break;
 8011af8:	e01b      	b.n	8011b32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	6818      	ldr	r0, [r3, #0]
 8011afe:	683b      	ldr	r3, [r7, #0]
 8011b00:	6859      	ldr	r1, [r3, #4]
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	68db      	ldr	r3, [r3, #12]
 8011b06:	461a      	mov	r2, r3
 8011b08:	f000 fb48 	bl	801219c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	2140      	movs	r1, #64	; 0x40
 8011b12:	4618      	mov	r0, r3
 8011b14:	f000 fba1 	bl	801225a <TIM_ITRx_SetConfig>
      break;
 8011b18:	e00b      	b.n	8011b32 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681a      	ldr	r2, [r3, #0]
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	4619      	mov	r1, r3
 8011b24:	4610      	mov	r0, r2
 8011b26:	f000 fb98 	bl	801225a <TIM_ITRx_SetConfig>
        break;
 8011b2a:	e002      	b.n	8011b32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8011b2c:	bf00      	nop
 8011b2e:	e000      	b.n	8011b32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8011b30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2201      	movs	r2, #1
 8011b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011b42:	2300      	movs	r3, #0
}
 8011b44:	4618      	mov	r0, r3
 8011b46:	3710      	adds	r7, #16
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}
 8011b4c:	fffeff88 	.word	0xfffeff88

08011b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011b50:	b480      	push	{r7}
 8011b52:	b083      	sub	sp, #12
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011b58:	bf00      	nop
 8011b5a:	370c      	adds	r7, #12
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b62:	4770      	bx	lr

08011b64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011b64:	b480      	push	{r7}
 8011b66:	b083      	sub	sp, #12
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011b6c:	bf00      	nop
 8011b6e:	370c      	adds	r7, #12
 8011b70:	46bd      	mov	sp, r7
 8011b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b76:	4770      	bx	lr

08011b78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011b78:	b480      	push	{r7}
 8011b7a:	b083      	sub	sp, #12
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011b80:	bf00      	nop
 8011b82:	370c      	adds	r7, #12
 8011b84:	46bd      	mov	sp, r7
 8011b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8a:	4770      	bx	lr

08011b8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011b8c:	b480      	push	{r7}
 8011b8e:	b083      	sub	sp, #12
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011b94:	bf00      	nop
 8011b96:	370c      	adds	r7, #12
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9e:	4770      	bx	lr

08011ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8011ba0:	b480      	push	{r7}
 8011ba2:	b085      	sub	sp, #20
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
 8011ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	4a40      	ldr	r2, [pc, #256]	; (8011cb4 <TIM_Base_SetConfig+0x114>)
 8011bb4:	4293      	cmp	r3, r2
 8011bb6:	d013      	beq.n	8011be0 <TIM_Base_SetConfig+0x40>
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011bbe:	d00f      	beq.n	8011be0 <TIM_Base_SetConfig+0x40>
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	4a3d      	ldr	r2, [pc, #244]	; (8011cb8 <TIM_Base_SetConfig+0x118>)
 8011bc4:	4293      	cmp	r3, r2
 8011bc6:	d00b      	beq.n	8011be0 <TIM_Base_SetConfig+0x40>
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	4a3c      	ldr	r2, [pc, #240]	; (8011cbc <TIM_Base_SetConfig+0x11c>)
 8011bcc:	4293      	cmp	r3, r2
 8011bce:	d007      	beq.n	8011be0 <TIM_Base_SetConfig+0x40>
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	4a3b      	ldr	r2, [pc, #236]	; (8011cc0 <TIM_Base_SetConfig+0x120>)
 8011bd4:	4293      	cmp	r3, r2
 8011bd6:	d003      	beq.n	8011be0 <TIM_Base_SetConfig+0x40>
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	4a3a      	ldr	r2, [pc, #232]	; (8011cc4 <TIM_Base_SetConfig+0x124>)
 8011bdc:	4293      	cmp	r3, r2
 8011bde:	d108      	bne.n	8011bf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	685b      	ldr	r3, [r3, #4]
 8011bec:	68fa      	ldr	r2, [r7, #12]
 8011bee:	4313      	orrs	r3, r2
 8011bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	4a2f      	ldr	r2, [pc, #188]	; (8011cb4 <TIM_Base_SetConfig+0x114>)
 8011bf6:	4293      	cmp	r3, r2
 8011bf8:	d02b      	beq.n	8011c52 <TIM_Base_SetConfig+0xb2>
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011c00:	d027      	beq.n	8011c52 <TIM_Base_SetConfig+0xb2>
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	4a2c      	ldr	r2, [pc, #176]	; (8011cb8 <TIM_Base_SetConfig+0x118>)
 8011c06:	4293      	cmp	r3, r2
 8011c08:	d023      	beq.n	8011c52 <TIM_Base_SetConfig+0xb2>
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	4a2b      	ldr	r2, [pc, #172]	; (8011cbc <TIM_Base_SetConfig+0x11c>)
 8011c0e:	4293      	cmp	r3, r2
 8011c10:	d01f      	beq.n	8011c52 <TIM_Base_SetConfig+0xb2>
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	4a2a      	ldr	r2, [pc, #168]	; (8011cc0 <TIM_Base_SetConfig+0x120>)
 8011c16:	4293      	cmp	r3, r2
 8011c18:	d01b      	beq.n	8011c52 <TIM_Base_SetConfig+0xb2>
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	4a29      	ldr	r2, [pc, #164]	; (8011cc4 <TIM_Base_SetConfig+0x124>)
 8011c1e:	4293      	cmp	r3, r2
 8011c20:	d017      	beq.n	8011c52 <TIM_Base_SetConfig+0xb2>
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	4a28      	ldr	r2, [pc, #160]	; (8011cc8 <TIM_Base_SetConfig+0x128>)
 8011c26:	4293      	cmp	r3, r2
 8011c28:	d013      	beq.n	8011c52 <TIM_Base_SetConfig+0xb2>
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	4a27      	ldr	r2, [pc, #156]	; (8011ccc <TIM_Base_SetConfig+0x12c>)
 8011c2e:	4293      	cmp	r3, r2
 8011c30:	d00f      	beq.n	8011c52 <TIM_Base_SetConfig+0xb2>
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	4a26      	ldr	r2, [pc, #152]	; (8011cd0 <TIM_Base_SetConfig+0x130>)
 8011c36:	4293      	cmp	r3, r2
 8011c38:	d00b      	beq.n	8011c52 <TIM_Base_SetConfig+0xb2>
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	4a25      	ldr	r2, [pc, #148]	; (8011cd4 <TIM_Base_SetConfig+0x134>)
 8011c3e:	4293      	cmp	r3, r2
 8011c40:	d007      	beq.n	8011c52 <TIM_Base_SetConfig+0xb2>
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	4a24      	ldr	r2, [pc, #144]	; (8011cd8 <TIM_Base_SetConfig+0x138>)
 8011c46:	4293      	cmp	r3, r2
 8011c48:	d003      	beq.n	8011c52 <TIM_Base_SetConfig+0xb2>
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	4a23      	ldr	r2, [pc, #140]	; (8011cdc <TIM_Base_SetConfig+0x13c>)
 8011c4e:	4293      	cmp	r3, r2
 8011c50:	d108      	bne.n	8011c64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	68db      	ldr	r3, [r3, #12]
 8011c5e:	68fa      	ldr	r2, [r7, #12]
 8011c60:	4313      	orrs	r3, r2
 8011c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	695b      	ldr	r3, [r3, #20]
 8011c6e:	4313      	orrs	r3, r2
 8011c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	68fa      	ldr	r2, [r7, #12]
 8011c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	689a      	ldr	r2, [r3, #8]
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011c80:	683b      	ldr	r3, [r7, #0]
 8011c82:	681a      	ldr	r2, [r3, #0]
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	4a0a      	ldr	r2, [pc, #40]	; (8011cb4 <TIM_Base_SetConfig+0x114>)
 8011c8c:	4293      	cmp	r3, r2
 8011c8e:	d003      	beq.n	8011c98 <TIM_Base_SetConfig+0xf8>
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	4a0c      	ldr	r2, [pc, #48]	; (8011cc4 <TIM_Base_SetConfig+0x124>)
 8011c94:	4293      	cmp	r3, r2
 8011c96:	d103      	bne.n	8011ca0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	691a      	ldr	r2, [r3, #16]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2201      	movs	r2, #1
 8011ca4:	615a      	str	r2, [r3, #20]
}
 8011ca6:	bf00      	nop
 8011ca8:	3714      	adds	r7, #20
 8011caa:	46bd      	mov	sp, r7
 8011cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb0:	4770      	bx	lr
 8011cb2:	bf00      	nop
 8011cb4:	40010000 	.word	0x40010000
 8011cb8:	40000400 	.word	0x40000400
 8011cbc:	40000800 	.word	0x40000800
 8011cc0:	40000c00 	.word	0x40000c00
 8011cc4:	40010400 	.word	0x40010400
 8011cc8:	40014000 	.word	0x40014000
 8011ccc:	40014400 	.word	0x40014400
 8011cd0:	40014800 	.word	0x40014800
 8011cd4:	40001800 	.word	0x40001800
 8011cd8:	40001c00 	.word	0x40001c00
 8011cdc:	40002000 	.word	0x40002000

08011ce0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011ce0:	b480      	push	{r7}
 8011ce2:	b087      	sub	sp, #28
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	6a1b      	ldr	r3, [r3, #32]
 8011cee:	f023 0201 	bic.w	r2, r3, #1
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6a1b      	ldr	r3, [r3, #32]
 8011cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	685b      	ldr	r3, [r3, #4]
 8011d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	699b      	ldr	r3, [r3, #24]
 8011d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011d08:	68fa      	ldr	r2, [r7, #12]
 8011d0a:	4b2b      	ldr	r3, [pc, #172]	; (8011db8 <TIM_OC1_SetConfig+0xd8>)
 8011d0c:	4013      	ands	r3, r2
 8011d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	f023 0303 	bic.w	r3, r3, #3
 8011d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	68fa      	ldr	r2, [r7, #12]
 8011d1e:	4313      	orrs	r3, r2
 8011d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011d22:	697b      	ldr	r3, [r7, #20]
 8011d24:	f023 0302 	bic.w	r3, r3, #2
 8011d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	689b      	ldr	r3, [r3, #8]
 8011d2e:	697a      	ldr	r2, [r7, #20]
 8011d30:	4313      	orrs	r3, r2
 8011d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	4a21      	ldr	r2, [pc, #132]	; (8011dbc <TIM_OC1_SetConfig+0xdc>)
 8011d38:	4293      	cmp	r3, r2
 8011d3a:	d003      	beq.n	8011d44 <TIM_OC1_SetConfig+0x64>
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	4a20      	ldr	r2, [pc, #128]	; (8011dc0 <TIM_OC1_SetConfig+0xe0>)
 8011d40:	4293      	cmp	r3, r2
 8011d42:	d10c      	bne.n	8011d5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	f023 0308 	bic.w	r3, r3, #8
 8011d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	68db      	ldr	r3, [r3, #12]
 8011d50:	697a      	ldr	r2, [r7, #20]
 8011d52:	4313      	orrs	r3, r2
 8011d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011d56:	697b      	ldr	r3, [r7, #20]
 8011d58:	f023 0304 	bic.w	r3, r3, #4
 8011d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	4a16      	ldr	r2, [pc, #88]	; (8011dbc <TIM_OC1_SetConfig+0xdc>)
 8011d62:	4293      	cmp	r3, r2
 8011d64:	d003      	beq.n	8011d6e <TIM_OC1_SetConfig+0x8e>
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	4a15      	ldr	r2, [pc, #84]	; (8011dc0 <TIM_OC1_SetConfig+0xe0>)
 8011d6a:	4293      	cmp	r3, r2
 8011d6c:	d111      	bne.n	8011d92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011d76:	693b      	ldr	r3, [r7, #16]
 8011d78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	695b      	ldr	r3, [r3, #20]
 8011d82:	693a      	ldr	r2, [r7, #16]
 8011d84:	4313      	orrs	r3, r2
 8011d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011d88:	683b      	ldr	r3, [r7, #0]
 8011d8a:	699b      	ldr	r3, [r3, #24]
 8011d8c:	693a      	ldr	r2, [r7, #16]
 8011d8e:	4313      	orrs	r3, r2
 8011d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	693a      	ldr	r2, [r7, #16]
 8011d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	68fa      	ldr	r2, [r7, #12]
 8011d9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	685a      	ldr	r2, [r3, #4]
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	697a      	ldr	r2, [r7, #20]
 8011daa:	621a      	str	r2, [r3, #32]
}
 8011dac:	bf00      	nop
 8011dae:	371c      	adds	r7, #28
 8011db0:	46bd      	mov	sp, r7
 8011db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db6:	4770      	bx	lr
 8011db8:	fffeff8f 	.word	0xfffeff8f
 8011dbc:	40010000 	.word	0x40010000
 8011dc0:	40010400 	.word	0x40010400

08011dc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011dc4:	b480      	push	{r7}
 8011dc6:	b087      	sub	sp, #28
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6a1b      	ldr	r3, [r3, #32]
 8011dd2:	f023 0210 	bic.w	r2, r3, #16
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	6a1b      	ldr	r3, [r3, #32]
 8011dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	685b      	ldr	r3, [r3, #4]
 8011de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	699b      	ldr	r3, [r3, #24]
 8011dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011dec:	68fa      	ldr	r2, [r7, #12]
 8011dee:	4b2e      	ldr	r3, [pc, #184]	; (8011ea8 <TIM_OC2_SetConfig+0xe4>)
 8011df0:	4013      	ands	r3, r2
 8011df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	021b      	lsls	r3, r3, #8
 8011e02:	68fa      	ldr	r2, [r7, #12]
 8011e04:	4313      	orrs	r3, r2
 8011e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	f023 0320 	bic.w	r3, r3, #32
 8011e0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	689b      	ldr	r3, [r3, #8]
 8011e14:	011b      	lsls	r3, r3, #4
 8011e16:	697a      	ldr	r2, [r7, #20]
 8011e18:	4313      	orrs	r3, r2
 8011e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	4a23      	ldr	r2, [pc, #140]	; (8011eac <TIM_OC2_SetConfig+0xe8>)
 8011e20:	4293      	cmp	r3, r2
 8011e22:	d003      	beq.n	8011e2c <TIM_OC2_SetConfig+0x68>
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	4a22      	ldr	r2, [pc, #136]	; (8011eb0 <TIM_OC2_SetConfig+0xec>)
 8011e28:	4293      	cmp	r3, r2
 8011e2a:	d10d      	bne.n	8011e48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	68db      	ldr	r3, [r3, #12]
 8011e38:	011b      	lsls	r3, r3, #4
 8011e3a:	697a      	ldr	r2, [r7, #20]
 8011e3c:	4313      	orrs	r3, r2
 8011e3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011e40:	697b      	ldr	r3, [r7, #20]
 8011e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011e46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	4a18      	ldr	r2, [pc, #96]	; (8011eac <TIM_OC2_SetConfig+0xe8>)
 8011e4c:	4293      	cmp	r3, r2
 8011e4e:	d003      	beq.n	8011e58 <TIM_OC2_SetConfig+0x94>
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	4a17      	ldr	r2, [pc, #92]	; (8011eb0 <TIM_OC2_SetConfig+0xec>)
 8011e54:	4293      	cmp	r3, r2
 8011e56:	d113      	bne.n	8011e80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011e58:	693b      	ldr	r3, [r7, #16]
 8011e5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011e5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011e60:	693b      	ldr	r3, [r7, #16]
 8011e62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011e66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	695b      	ldr	r3, [r3, #20]
 8011e6c:	009b      	lsls	r3, r3, #2
 8011e6e:	693a      	ldr	r2, [r7, #16]
 8011e70:	4313      	orrs	r3, r2
 8011e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011e74:	683b      	ldr	r3, [r7, #0]
 8011e76:	699b      	ldr	r3, [r3, #24]
 8011e78:	009b      	lsls	r3, r3, #2
 8011e7a:	693a      	ldr	r2, [r7, #16]
 8011e7c:	4313      	orrs	r3, r2
 8011e7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	693a      	ldr	r2, [r7, #16]
 8011e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	68fa      	ldr	r2, [r7, #12]
 8011e8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011e8c:	683b      	ldr	r3, [r7, #0]
 8011e8e:	685a      	ldr	r2, [r3, #4]
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	697a      	ldr	r2, [r7, #20]
 8011e98:	621a      	str	r2, [r3, #32]
}
 8011e9a:	bf00      	nop
 8011e9c:	371c      	adds	r7, #28
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea4:	4770      	bx	lr
 8011ea6:	bf00      	nop
 8011ea8:	feff8fff 	.word	0xfeff8fff
 8011eac:	40010000 	.word	0x40010000
 8011eb0:	40010400 	.word	0x40010400

08011eb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011eb4:	b480      	push	{r7}
 8011eb6:	b087      	sub	sp, #28
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
 8011ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6a1b      	ldr	r3, [r3, #32]
 8011ec2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6a1b      	ldr	r3, [r3, #32]
 8011ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	685b      	ldr	r3, [r3, #4]
 8011ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	69db      	ldr	r3, [r3, #28]
 8011eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011edc:	68fa      	ldr	r2, [r7, #12]
 8011ede:	4b2d      	ldr	r3, [pc, #180]	; (8011f94 <TIM_OC3_SetConfig+0xe0>)
 8011ee0:	4013      	ands	r3, r2
 8011ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	f023 0303 	bic.w	r3, r3, #3
 8011eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	68fa      	ldr	r2, [r7, #12]
 8011ef2:	4313      	orrs	r3, r2
 8011ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011ef6:	697b      	ldr	r3, [r7, #20]
 8011ef8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	689b      	ldr	r3, [r3, #8]
 8011f02:	021b      	lsls	r3, r3, #8
 8011f04:	697a      	ldr	r2, [r7, #20]
 8011f06:	4313      	orrs	r3, r2
 8011f08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	4a22      	ldr	r2, [pc, #136]	; (8011f98 <TIM_OC3_SetConfig+0xe4>)
 8011f0e:	4293      	cmp	r3, r2
 8011f10:	d003      	beq.n	8011f1a <TIM_OC3_SetConfig+0x66>
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	4a21      	ldr	r2, [pc, #132]	; (8011f9c <TIM_OC3_SetConfig+0xe8>)
 8011f16:	4293      	cmp	r3, r2
 8011f18:	d10d      	bne.n	8011f36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011f1a:	697b      	ldr	r3, [r7, #20]
 8011f1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011f20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	68db      	ldr	r3, [r3, #12]
 8011f26:	021b      	lsls	r3, r3, #8
 8011f28:	697a      	ldr	r2, [r7, #20]
 8011f2a:	4313      	orrs	r3, r2
 8011f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011f2e:	697b      	ldr	r3, [r7, #20]
 8011f30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	4a17      	ldr	r2, [pc, #92]	; (8011f98 <TIM_OC3_SetConfig+0xe4>)
 8011f3a:	4293      	cmp	r3, r2
 8011f3c:	d003      	beq.n	8011f46 <TIM_OC3_SetConfig+0x92>
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	4a16      	ldr	r2, [pc, #88]	; (8011f9c <TIM_OC3_SetConfig+0xe8>)
 8011f42:	4293      	cmp	r3, r2
 8011f44:	d113      	bne.n	8011f6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011f46:	693b      	ldr	r3, [r7, #16]
 8011f48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011f4e:	693b      	ldr	r3, [r7, #16]
 8011f50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	695b      	ldr	r3, [r3, #20]
 8011f5a:	011b      	lsls	r3, r3, #4
 8011f5c:	693a      	ldr	r2, [r7, #16]
 8011f5e:	4313      	orrs	r3, r2
 8011f60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	699b      	ldr	r3, [r3, #24]
 8011f66:	011b      	lsls	r3, r3, #4
 8011f68:	693a      	ldr	r2, [r7, #16]
 8011f6a:	4313      	orrs	r3, r2
 8011f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	693a      	ldr	r2, [r7, #16]
 8011f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	68fa      	ldr	r2, [r7, #12]
 8011f78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	685a      	ldr	r2, [r3, #4]
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	697a      	ldr	r2, [r7, #20]
 8011f86:	621a      	str	r2, [r3, #32]
}
 8011f88:	bf00      	nop
 8011f8a:	371c      	adds	r7, #28
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f92:	4770      	bx	lr
 8011f94:	fffeff8f 	.word	0xfffeff8f
 8011f98:	40010000 	.word	0x40010000
 8011f9c:	40010400 	.word	0x40010400

08011fa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011fa0:	b480      	push	{r7}
 8011fa2:	b087      	sub	sp, #28
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
 8011fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6a1b      	ldr	r3, [r3, #32]
 8011fae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6a1b      	ldr	r3, [r3, #32]
 8011fba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	685b      	ldr	r3, [r3, #4]
 8011fc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	69db      	ldr	r3, [r3, #28]
 8011fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011fc8:	68fa      	ldr	r2, [r7, #12]
 8011fca:	4b1e      	ldr	r3, [pc, #120]	; (8012044 <TIM_OC4_SetConfig+0xa4>)
 8011fcc:	4013      	ands	r3, r2
 8011fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	021b      	lsls	r3, r3, #8
 8011fde:	68fa      	ldr	r2, [r7, #12]
 8011fe0:	4313      	orrs	r3, r2
 8011fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011fe4:	693b      	ldr	r3, [r7, #16]
 8011fe6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011fea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	689b      	ldr	r3, [r3, #8]
 8011ff0:	031b      	lsls	r3, r3, #12
 8011ff2:	693a      	ldr	r2, [r7, #16]
 8011ff4:	4313      	orrs	r3, r2
 8011ff6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	4a13      	ldr	r2, [pc, #76]	; (8012048 <TIM_OC4_SetConfig+0xa8>)
 8011ffc:	4293      	cmp	r3, r2
 8011ffe:	d003      	beq.n	8012008 <TIM_OC4_SetConfig+0x68>
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	4a12      	ldr	r2, [pc, #72]	; (801204c <TIM_OC4_SetConfig+0xac>)
 8012004:	4293      	cmp	r3, r2
 8012006:	d109      	bne.n	801201c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012008:	697b      	ldr	r3, [r7, #20]
 801200a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801200e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	695b      	ldr	r3, [r3, #20]
 8012014:	019b      	lsls	r3, r3, #6
 8012016:	697a      	ldr	r2, [r7, #20]
 8012018:	4313      	orrs	r3, r2
 801201a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	697a      	ldr	r2, [r7, #20]
 8012020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	68fa      	ldr	r2, [r7, #12]
 8012026:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	685a      	ldr	r2, [r3, #4]
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	693a      	ldr	r2, [r7, #16]
 8012034:	621a      	str	r2, [r3, #32]
}
 8012036:	bf00      	nop
 8012038:	371c      	adds	r7, #28
 801203a:	46bd      	mov	sp, r7
 801203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012040:	4770      	bx	lr
 8012042:	bf00      	nop
 8012044:	feff8fff 	.word	0xfeff8fff
 8012048:	40010000 	.word	0x40010000
 801204c:	40010400 	.word	0x40010400

08012050 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8012050:	b480      	push	{r7}
 8012052:	b087      	sub	sp, #28
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
 8012058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	6a1b      	ldr	r3, [r3, #32]
 801205e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	6a1b      	ldr	r3, [r3, #32]
 801206a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	685b      	ldr	r3, [r3, #4]
 8012070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012078:	68fa      	ldr	r2, [r7, #12]
 801207a:	4b1b      	ldr	r3, [pc, #108]	; (80120e8 <TIM_OC5_SetConfig+0x98>)
 801207c:	4013      	ands	r3, r2
 801207e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	68fa      	ldr	r2, [r7, #12]
 8012086:	4313      	orrs	r3, r2
 8012088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801208a:	693b      	ldr	r3, [r7, #16]
 801208c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8012090:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	689b      	ldr	r3, [r3, #8]
 8012096:	041b      	lsls	r3, r3, #16
 8012098:	693a      	ldr	r2, [r7, #16]
 801209a:	4313      	orrs	r3, r2
 801209c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	4a12      	ldr	r2, [pc, #72]	; (80120ec <TIM_OC5_SetConfig+0x9c>)
 80120a2:	4293      	cmp	r3, r2
 80120a4:	d003      	beq.n	80120ae <TIM_OC5_SetConfig+0x5e>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	4a11      	ldr	r2, [pc, #68]	; (80120f0 <TIM_OC5_SetConfig+0xa0>)
 80120aa:	4293      	cmp	r3, r2
 80120ac:	d109      	bne.n	80120c2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80120b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	695b      	ldr	r3, [r3, #20]
 80120ba:	021b      	lsls	r3, r3, #8
 80120bc:	697a      	ldr	r2, [r7, #20]
 80120be:	4313      	orrs	r3, r2
 80120c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	697a      	ldr	r2, [r7, #20]
 80120c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	68fa      	ldr	r2, [r7, #12]
 80120cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	685a      	ldr	r2, [r3, #4]
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	693a      	ldr	r2, [r7, #16]
 80120da:	621a      	str	r2, [r3, #32]
}
 80120dc:	bf00      	nop
 80120de:	371c      	adds	r7, #28
 80120e0:	46bd      	mov	sp, r7
 80120e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e6:	4770      	bx	lr
 80120e8:	fffeff8f 	.word	0xfffeff8f
 80120ec:	40010000 	.word	0x40010000
 80120f0:	40010400 	.word	0x40010400

080120f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80120f4:	b480      	push	{r7}
 80120f6:	b087      	sub	sp, #28
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
 80120fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6a1b      	ldr	r3, [r3, #32]
 8012102:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6a1b      	ldr	r3, [r3, #32]
 801210e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	685b      	ldr	r3, [r3, #4]
 8012114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801211a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801211c:	68fa      	ldr	r2, [r7, #12]
 801211e:	4b1c      	ldr	r3, [pc, #112]	; (8012190 <TIM_OC6_SetConfig+0x9c>)
 8012120:	4013      	ands	r3, r2
 8012122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	021b      	lsls	r3, r3, #8
 801212a:	68fa      	ldr	r2, [r7, #12]
 801212c:	4313      	orrs	r3, r2
 801212e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	689b      	ldr	r3, [r3, #8]
 801213c:	051b      	lsls	r3, r3, #20
 801213e:	693a      	ldr	r2, [r7, #16]
 8012140:	4313      	orrs	r3, r2
 8012142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	4a13      	ldr	r2, [pc, #76]	; (8012194 <TIM_OC6_SetConfig+0xa0>)
 8012148:	4293      	cmp	r3, r2
 801214a:	d003      	beq.n	8012154 <TIM_OC6_SetConfig+0x60>
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	4a12      	ldr	r2, [pc, #72]	; (8012198 <TIM_OC6_SetConfig+0xa4>)
 8012150:	4293      	cmp	r3, r2
 8012152:	d109      	bne.n	8012168 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8012154:	697b      	ldr	r3, [r7, #20]
 8012156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801215a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	695b      	ldr	r3, [r3, #20]
 8012160:	029b      	lsls	r3, r3, #10
 8012162:	697a      	ldr	r2, [r7, #20]
 8012164:	4313      	orrs	r3, r2
 8012166:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	697a      	ldr	r2, [r7, #20]
 801216c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	68fa      	ldr	r2, [r7, #12]
 8012172:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	685a      	ldr	r2, [r3, #4]
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	693a      	ldr	r2, [r7, #16]
 8012180:	621a      	str	r2, [r3, #32]
}
 8012182:	bf00      	nop
 8012184:	371c      	adds	r7, #28
 8012186:	46bd      	mov	sp, r7
 8012188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218c:	4770      	bx	lr
 801218e:	bf00      	nop
 8012190:	feff8fff 	.word	0xfeff8fff
 8012194:	40010000 	.word	0x40010000
 8012198:	40010400 	.word	0x40010400

0801219c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801219c:	b480      	push	{r7}
 801219e:	b087      	sub	sp, #28
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	6a1b      	ldr	r3, [r3, #32]
 80121ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	6a1b      	ldr	r3, [r3, #32]
 80121b2:	f023 0201 	bic.w	r2, r3, #1
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	699b      	ldr	r3, [r3, #24]
 80121be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80121c0:	693b      	ldr	r3, [r7, #16]
 80121c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80121c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	011b      	lsls	r3, r3, #4
 80121cc:	693a      	ldr	r2, [r7, #16]
 80121ce:	4313      	orrs	r3, r2
 80121d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80121d2:	697b      	ldr	r3, [r7, #20]
 80121d4:	f023 030a 	bic.w	r3, r3, #10
 80121d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80121da:	697a      	ldr	r2, [r7, #20]
 80121dc:	68bb      	ldr	r3, [r7, #8]
 80121de:	4313      	orrs	r3, r2
 80121e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	693a      	ldr	r2, [r7, #16]
 80121e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	697a      	ldr	r2, [r7, #20]
 80121ec:	621a      	str	r2, [r3, #32]
}
 80121ee:	bf00      	nop
 80121f0:	371c      	adds	r7, #28
 80121f2:	46bd      	mov	sp, r7
 80121f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f8:	4770      	bx	lr

080121fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80121fa:	b480      	push	{r7}
 80121fc:	b087      	sub	sp, #28
 80121fe:	af00      	add	r7, sp, #0
 8012200:	60f8      	str	r0, [r7, #12]
 8012202:	60b9      	str	r1, [r7, #8]
 8012204:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	6a1b      	ldr	r3, [r3, #32]
 801220a:	f023 0210 	bic.w	r2, r3, #16
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	699b      	ldr	r3, [r3, #24]
 8012216:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	6a1b      	ldr	r3, [r3, #32]
 801221c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801221e:	697b      	ldr	r3, [r7, #20]
 8012220:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012224:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	031b      	lsls	r3, r3, #12
 801222a:	697a      	ldr	r2, [r7, #20]
 801222c:	4313      	orrs	r3, r2
 801222e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012230:	693b      	ldr	r3, [r7, #16]
 8012232:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012236:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012238:	68bb      	ldr	r3, [r7, #8]
 801223a:	011b      	lsls	r3, r3, #4
 801223c:	693a      	ldr	r2, [r7, #16]
 801223e:	4313      	orrs	r3, r2
 8012240:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	697a      	ldr	r2, [r7, #20]
 8012246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	693a      	ldr	r2, [r7, #16]
 801224c:	621a      	str	r2, [r3, #32]
}
 801224e:	bf00      	nop
 8012250:	371c      	adds	r7, #28
 8012252:	46bd      	mov	sp, r7
 8012254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012258:	4770      	bx	lr

0801225a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801225a:	b480      	push	{r7}
 801225c:	b085      	sub	sp, #20
 801225e:	af00      	add	r7, sp, #0
 8012260:	6078      	str	r0, [r7, #4]
 8012262:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	689b      	ldr	r3, [r3, #8]
 8012268:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012270:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012272:	683a      	ldr	r2, [r7, #0]
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	4313      	orrs	r3, r2
 8012278:	f043 0307 	orr.w	r3, r3, #7
 801227c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	68fa      	ldr	r2, [r7, #12]
 8012282:	609a      	str	r2, [r3, #8]
}
 8012284:	bf00      	nop
 8012286:	3714      	adds	r7, #20
 8012288:	46bd      	mov	sp, r7
 801228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228e:	4770      	bx	lr

08012290 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012290:	b480      	push	{r7}
 8012292:	b087      	sub	sp, #28
 8012294:	af00      	add	r7, sp, #0
 8012296:	60f8      	str	r0, [r7, #12]
 8012298:	60b9      	str	r1, [r7, #8]
 801229a:	607a      	str	r2, [r7, #4]
 801229c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	689b      	ldr	r3, [r3, #8]
 80122a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80122aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80122ac:	683b      	ldr	r3, [r7, #0]
 80122ae:	021a      	lsls	r2, r3, #8
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	431a      	orrs	r2, r3
 80122b4:	68bb      	ldr	r3, [r7, #8]
 80122b6:	4313      	orrs	r3, r2
 80122b8:	697a      	ldr	r2, [r7, #20]
 80122ba:	4313      	orrs	r3, r2
 80122bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	697a      	ldr	r2, [r7, #20]
 80122c2:	609a      	str	r2, [r3, #8]
}
 80122c4:	bf00      	nop
 80122c6:	371c      	adds	r7, #28
 80122c8:	46bd      	mov	sp, r7
 80122ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ce:	4770      	bx	lr

080122d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80122d0:	b480      	push	{r7}
 80122d2:	b087      	sub	sp, #28
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	60f8      	str	r0, [r7, #12]
 80122d8:	60b9      	str	r1, [r7, #8]
 80122da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80122dc:	68bb      	ldr	r3, [r7, #8]
 80122de:	f003 031f 	and.w	r3, r3, #31
 80122e2:	2201      	movs	r2, #1
 80122e4:	fa02 f303 	lsl.w	r3, r2, r3
 80122e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	6a1a      	ldr	r2, [r3, #32]
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	43db      	mvns	r3, r3
 80122f2:	401a      	ands	r2, r3
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	6a1a      	ldr	r2, [r3, #32]
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	f003 031f 	and.w	r3, r3, #31
 8012302:	6879      	ldr	r1, [r7, #4]
 8012304:	fa01 f303 	lsl.w	r3, r1, r3
 8012308:	431a      	orrs	r2, r3
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	621a      	str	r2, [r3, #32]
}
 801230e:	bf00      	nop
 8012310:	371c      	adds	r7, #28
 8012312:	46bd      	mov	sp, r7
 8012314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012318:	4770      	bx	lr
	...

0801231c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801231c:	b480      	push	{r7}
 801231e:	b085      	sub	sp, #20
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
 8012324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801232c:	2b01      	cmp	r3, #1
 801232e:	d101      	bne.n	8012334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012330:	2302      	movs	r3, #2
 8012332:	e06d      	b.n	8012410 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	2201      	movs	r2, #1
 8012338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	2202      	movs	r2, #2
 8012340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	685b      	ldr	r3, [r3, #4]
 801234a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	689b      	ldr	r3, [r3, #8]
 8012352:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	4a30      	ldr	r2, [pc, #192]	; (801241c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801235a:	4293      	cmp	r3, r2
 801235c:	d004      	beq.n	8012368 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	4a2f      	ldr	r2, [pc, #188]	; (8012420 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012364:	4293      	cmp	r3, r2
 8012366:	d108      	bne.n	801237a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801236e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012370:	683b      	ldr	r3, [r7, #0]
 8012372:	685b      	ldr	r3, [r3, #4]
 8012374:	68fa      	ldr	r2, [r7, #12]
 8012376:	4313      	orrs	r3, r2
 8012378:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012380:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012382:	683b      	ldr	r3, [r7, #0]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	68fa      	ldr	r2, [r7, #12]
 8012388:	4313      	orrs	r3, r2
 801238a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	68fa      	ldr	r2, [r7, #12]
 8012392:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	4a20      	ldr	r2, [pc, #128]	; (801241c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801239a:	4293      	cmp	r3, r2
 801239c:	d022      	beq.n	80123e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80123a6:	d01d      	beq.n	80123e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	4a1d      	ldr	r2, [pc, #116]	; (8012424 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80123ae:	4293      	cmp	r3, r2
 80123b0:	d018      	beq.n	80123e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	4a1c      	ldr	r2, [pc, #112]	; (8012428 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80123b8:	4293      	cmp	r3, r2
 80123ba:	d013      	beq.n	80123e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	4a1a      	ldr	r2, [pc, #104]	; (801242c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80123c2:	4293      	cmp	r3, r2
 80123c4:	d00e      	beq.n	80123e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	4a15      	ldr	r2, [pc, #84]	; (8012420 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80123cc:	4293      	cmp	r3, r2
 80123ce:	d009      	beq.n	80123e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	4a16      	ldr	r2, [pc, #88]	; (8012430 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80123d6:	4293      	cmp	r3, r2
 80123d8:	d004      	beq.n	80123e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	4a15      	ldr	r2, [pc, #84]	; (8012434 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80123e0:	4293      	cmp	r3, r2
 80123e2:	d10c      	bne.n	80123fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80123ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	689b      	ldr	r3, [r3, #8]
 80123f0:	68ba      	ldr	r2, [r7, #8]
 80123f2:	4313      	orrs	r3, r2
 80123f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	68ba      	ldr	r2, [r7, #8]
 80123fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2201      	movs	r2, #1
 8012402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2200      	movs	r2, #0
 801240a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801240e:	2300      	movs	r3, #0
}
 8012410:	4618      	mov	r0, r3
 8012412:	3714      	adds	r7, #20
 8012414:	46bd      	mov	sp, r7
 8012416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241a:	4770      	bx	lr
 801241c:	40010000 	.word	0x40010000
 8012420:	40010400 	.word	0x40010400
 8012424:	40000400 	.word	0x40000400
 8012428:	40000800 	.word	0x40000800
 801242c:	40000c00 	.word	0x40000c00
 8012430:	40014000 	.word	0x40014000
 8012434:	40001800 	.word	0x40001800

08012438 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012438:	b480      	push	{r7}
 801243a:	b083      	sub	sp, #12
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012440:	bf00      	nop
 8012442:	370c      	adds	r7, #12
 8012444:	46bd      	mov	sp, r7
 8012446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244a:	4770      	bx	lr

0801244c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801244c:	b480      	push	{r7}
 801244e:	b083      	sub	sp, #12
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012454:	bf00      	nop
 8012456:	370c      	adds	r7, #12
 8012458:	46bd      	mov	sp, r7
 801245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245e:	4770      	bx	lr

08012460 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012460:	b480      	push	{r7}
 8012462:	b083      	sub	sp, #12
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012468:	bf00      	nop
 801246a:	370c      	adds	r7, #12
 801246c:	46bd      	mov	sp, r7
 801246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012472:	4770      	bx	lr

08012474 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b082      	sub	sp, #8
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d101      	bne.n	8012486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012482:	2301      	movs	r3, #1
 8012484:	e040      	b.n	8012508 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801248a:	2b00      	cmp	r3, #0
 801248c:	d106      	bne.n	801249c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	2200      	movs	r2, #0
 8012492:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012496:	6878      	ldr	r0, [r7, #4]
 8012498:	f7f6 f992 	bl	80087c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2224      	movs	r2, #36	; 0x24
 80124a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	681a      	ldr	r2, [r3, #0]
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	f022 0201 	bic.w	r2, r2, #1
 80124b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f000 fbf2 	bl	8012c9c <UART_SetConfig>
 80124b8:	4603      	mov	r3, r0
 80124ba:	2b01      	cmp	r3, #1
 80124bc:	d101      	bne.n	80124c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80124be:	2301      	movs	r3, #1
 80124c0:	e022      	b.n	8012508 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d002      	beq.n	80124d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80124ca:	6878      	ldr	r0, [r7, #4]
 80124cc:	f000 fe4a 	bl	8013164 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	685a      	ldr	r2, [r3, #4]
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80124de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	689a      	ldr	r2, [r3, #8]
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80124ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	681a      	ldr	r2, [r3, #0]
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	f042 0201 	orr.w	r2, r2, #1
 80124fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012500:	6878      	ldr	r0, [r7, #4]
 8012502:	f000 fed1 	bl	80132a8 <UART_CheckIdleState>
 8012506:	4603      	mov	r3, r0
}
 8012508:	4618      	mov	r0, r3
 801250a:	3708      	adds	r7, #8
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}

08012510 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b08a      	sub	sp, #40	; 0x28
 8012514:	af02      	add	r7, sp, #8
 8012516:	60f8      	str	r0, [r7, #12]
 8012518:	60b9      	str	r1, [r7, #8]
 801251a:	603b      	str	r3, [r7, #0]
 801251c:	4613      	mov	r3, r2
 801251e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012524:	2b20      	cmp	r3, #32
 8012526:	f040 8081 	bne.w	801262c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d002      	beq.n	8012536 <HAL_UART_Transmit+0x26>
 8012530:	88fb      	ldrh	r3, [r7, #6]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d101      	bne.n	801253a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8012536:	2301      	movs	r3, #1
 8012538:	e079      	b.n	801262e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012540:	2b01      	cmp	r3, #1
 8012542:	d101      	bne.n	8012548 <HAL_UART_Transmit+0x38>
 8012544:	2302      	movs	r3, #2
 8012546:	e072      	b.n	801262e <HAL_UART_Transmit+0x11e>
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	2201      	movs	r2, #1
 801254c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	2200      	movs	r2, #0
 8012554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	2221      	movs	r2, #33	; 0x21
 801255c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801255e:	f7f6 fe13 	bl	8009188 <HAL_GetTick>
 8012562:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	88fa      	ldrh	r2, [r7, #6]
 8012568:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	88fa      	ldrh	r2, [r7, #6]
 8012570:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	689b      	ldr	r3, [r3, #8]
 8012578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801257c:	d108      	bne.n	8012590 <HAL_UART_Transmit+0x80>
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	691b      	ldr	r3, [r3, #16]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d104      	bne.n	8012590 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8012586:	2300      	movs	r3, #0
 8012588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801258a:	68bb      	ldr	r3, [r7, #8]
 801258c:	61bb      	str	r3, [r7, #24]
 801258e:	e003      	b.n	8012598 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8012590:	68bb      	ldr	r3, [r7, #8]
 8012592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012594:	2300      	movs	r3, #0
 8012596:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	2200      	movs	r2, #0
 801259c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80125a0:	e02c      	b.n	80125fc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80125a2:	683b      	ldr	r3, [r7, #0]
 80125a4:	9300      	str	r3, [sp, #0]
 80125a6:	697b      	ldr	r3, [r7, #20]
 80125a8:	2200      	movs	r2, #0
 80125aa:	2180      	movs	r1, #128	; 0x80
 80125ac:	68f8      	ldr	r0, [r7, #12]
 80125ae:	f000 feae 	bl	801330e <UART_WaitOnFlagUntilTimeout>
 80125b2:	4603      	mov	r3, r0
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d001      	beq.n	80125bc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80125b8:	2303      	movs	r3, #3
 80125ba:	e038      	b.n	801262e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80125bc:	69fb      	ldr	r3, [r7, #28]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d10b      	bne.n	80125da <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80125c2:	69bb      	ldr	r3, [r7, #24]
 80125c4:	881b      	ldrh	r3, [r3, #0]
 80125c6:	461a      	mov	r2, r3
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80125d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80125d2:	69bb      	ldr	r3, [r7, #24]
 80125d4:	3302      	adds	r3, #2
 80125d6:	61bb      	str	r3, [r7, #24]
 80125d8:	e007      	b.n	80125ea <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80125da:	69fb      	ldr	r3, [r7, #28]
 80125dc:	781a      	ldrb	r2, [r3, #0]
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80125e4:	69fb      	ldr	r3, [r7, #28]
 80125e6:	3301      	adds	r3, #1
 80125e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80125f0:	b29b      	uxth	r3, r3
 80125f2:	3b01      	subs	r3, #1
 80125f4:	b29a      	uxth	r2, r3
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8012602:	b29b      	uxth	r3, r3
 8012604:	2b00      	cmp	r3, #0
 8012606:	d1cc      	bne.n	80125a2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012608:	683b      	ldr	r3, [r7, #0]
 801260a:	9300      	str	r3, [sp, #0]
 801260c:	697b      	ldr	r3, [r7, #20]
 801260e:	2200      	movs	r2, #0
 8012610:	2140      	movs	r1, #64	; 0x40
 8012612:	68f8      	ldr	r0, [r7, #12]
 8012614:	f000 fe7b 	bl	801330e <UART_WaitOnFlagUntilTimeout>
 8012618:	4603      	mov	r3, r0
 801261a:	2b00      	cmp	r3, #0
 801261c:	d001      	beq.n	8012622 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 801261e:	2303      	movs	r3, #3
 8012620:	e005      	b.n	801262e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	2220      	movs	r2, #32
 8012626:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8012628:	2300      	movs	r3, #0
 801262a:	e000      	b.n	801262e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 801262c:	2302      	movs	r3, #2
  }
}
 801262e:	4618      	mov	r0, r3
 8012630:	3720      	adds	r7, #32
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}
	...

08012638 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012638:	b480      	push	{r7}
 801263a:	b085      	sub	sp, #20
 801263c:	af00      	add	r7, sp, #0
 801263e:	60f8      	str	r0, [r7, #12]
 8012640:	60b9      	str	r1, [r7, #8]
 8012642:	4613      	mov	r3, r2
 8012644:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801264a:	2b20      	cmp	r3, #32
 801264c:	d145      	bne.n	80126da <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d002      	beq.n	801265a <HAL_UART_Transmit_IT+0x22>
 8012654:	88fb      	ldrh	r3, [r7, #6]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d101      	bne.n	801265e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 801265a:	2301      	movs	r3, #1
 801265c:	e03e      	b.n	80126dc <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012664:	2b01      	cmp	r3, #1
 8012666:	d101      	bne.n	801266c <HAL_UART_Transmit_IT+0x34>
 8012668:	2302      	movs	r3, #2
 801266a:	e037      	b.n	80126dc <HAL_UART_Transmit_IT+0xa4>
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	2201      	movs	r2, #1
 8012670:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	68ba      	ldr	r2, [r7, #8]
 8012678:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	88fa      	ldrh	r2, [r7, #6]
 801267e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	88fa      	ldrh	r2, [r7, #6]
 8012686:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	2200      	movs	r2, #0
 801268e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	2200      	movs	r2, #0
 8012694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	2221      	movs	r2, #33	; 0x21
 801269c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	689b      	ldr	r3, [r3, #8]
 80126a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80126a6:	d107      	bne.n	80126b8 <HAL_UART_Transmit_IT+0x80>
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	691b      	ldr	r3, [r3, #16]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d103      	bne.n	80126b8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	4a0d      	ldr	r2, [pc, #52]	; (80126e8 <HAL_UART_Transmit_IT+0xb0>)
 80126b4:	669a      	str	r2, [r3, #104]	; 0x68
 80126b6:	e002      	b.n	80126be <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	4a0c      	ldr	r2, [pc, #48]	; (80126ec <HAL_UART_Transmit_IT+0xb4>)
 80126bc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	2200      	movs	r2, #0
 80126c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	681a      	ldr	r2, [r3, #0]
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80126d4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80126d6:	2300      	movs	r3, #0
 80126d8:	e000      	b.n	80126dc <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 80126da:	2302      	movs	r3, #2
  }
}
 80126dc:	4618      	mov	r0, r3
 80126de:	3714      	adds	r7, #20
 80126e0:	46bd      	mov	sp, r7
 80126e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e6:	4770      	bx	lr
 80126e8:	0801365d 	.word	0x0801365d
 80126ec:	080135eb 	.word	0x080135eb

080126f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b084      	sub	sp, #16
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	60f8      	str	r0, [r7, #12]
 80126f8:	60b9      	str	r1, [r7, #8]
 80126fa:	4613      	mov	r3, r2
 80126fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012702:	2b20      	cmp	r3, #32
 8012704:	d12c      	bne.n	8012760 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8012706:	68bb      	ldr	r3, [r7, #8]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d002      	beq.n	8012712 <HAL_UART_Receive_IT+0x22>
 801270c:	88fb      	ldrh	r3, [r7, #6]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d101      	bne.n	8012716 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8012712:	2301      	movs	r3, #1
 8012714:	e025      	b.n	8012762 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801271c:	2b01      	cmp	r3, #1
 801271e:	d101      	bne.n	8012724 <HAL_UART_Receive_IT+0x34>
 8012720:	2302      	movs	r3, #2
 8012722:	e01e      	b.n	8012762 <HAL_UART_Receive_IT+0x72>
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	2201      	movs	r2, #1
 8012728:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	2200      	movs	r2, #0
 8012730:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	685b      	ldr	r3, [r3, #4]
 8012738:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801273c:	2b00      	cmp	r3, #0
 801273e:	d007      	beq.n	8012750 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	681a      	ldr	r2, [r3, #0]
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801274e:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8012750:	88fb      	ldrh	r3, [r7, #6]
 8012752:	461a      	mov	r2, r3
 8012754:	68b9      	ldr	r1, [r7, #8]
 8012756:	68f8      	ldr	r0, [r7, #12]
 8012758:	f000 fe56 	bl	8013408 <UART_Start_Receive_IT>
 801275c:	4603      	mov	r3, r0
 801275e:	e000      	b.n	8012762 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8012760:	2302      	movs	r3, #2
  }
}
 8012762:	4618      	mov	r0, r3
 8012764:	3710      	adds	r7, #16
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}
	...

0801276c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b082      	sub	sp, #8
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	681a      	ldr	r2, [r3, #0]
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8012782:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	689a      	ldr	r2, [r3, #8]
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	f022 0201 	bic.w	r2, r2, #1
 8012792:	609a      	str	r2, [r3, #8]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012798:	2b01      	cmp	r3, #1
 801279a:	d107      	bne.n	80127ac <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	681a      	ldr	r2, [r3, #0]
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	f022 0210 	bic.w	r2, r2, #16
 80127aa:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	689b      	ldr	r3, [r3, #8]
 80127b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127b6:	2b40      	cmp	r3, #64	; 0x40
 80127b8:	d13c      	bne.n	8012834 <HAL_UART_AbortReceive_IT+0xc8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	689a      	ldr	r2, [r3, #8]
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80127c8:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d013      	beq.n	80127fa <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127d6:	4a24      	ldr	r2, [pc, #144]	; (8012868 <HAL_UART_AbortReceive_IT+0xfc>)
 80127d8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127de:	4618      	mov	r0, r3
 80127e0:	f7f7 fe1a 	bl	800a418 <HAL_DMA_Abort_IT>
 80127e4:	4603      	mov	r3, r0
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d038      	beq.n	801285c <HAL_UART_AbortReceive_IT+0xf0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80127f0:	687a      	ldr	r2, [r7, #4]
 80127f2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80127f4:	4610      	mov	r0, r2
 80127f6:	4798      	blx	r3
 80127f8:	e030      	b.n	801285c <HAL_UART_AbortReceive_IT+0xf0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	2200      	movs	r2, #0
 80127fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	2200      	movs	r2, #0
 8012806:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	220f      	movs	r2, #15
 801280e:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	699a      	ldr	r2, [r3, #24]
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	f042 0208 	orr.w	r2, r2, #8
 801281e:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	2220      	movs	r2, #32
 8012824:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	2200      	movs	r2, #0
 801282a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 801282c:	6878      	ldr	r0, [r7, #4]
 801282e:	f000 fa1f 	bl	8012c70 <HAL_UART_AbortReceiveCpltCallback>
 8012832:	e013      	b.n	801285c <HAL_UART_AbortReceive_IT+0xf0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2200      	movs	r2, #0
 8012838:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2200      	movs	r2, #0
 8012840:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	220f      	movs	r2, #15
 8012848:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	2220      	movs	r2, #32
 801284e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	2200      	movs	r2, #0
 8012854:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8012856:	6878      	ldr	r0, [r7, #4]
 8012858:	f000 fa0a 	bl	8012c70 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 801285c:	2300      	movs	r3, #0
}
 801285e:	4618      	mov	r0, r3
 8012860:	3708      	adds	r7, #8
 8012862:	46bd      	mov	sp, r7
 8012864:	bd80      	pop	{r7, pc}
 8012866:	bf00      	nop
 8012868:	080135a3 	.word	0x080135a3

0801286c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b088      	sub	sp, #32
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	69db      	ldr	r3, [r3, #28]
 801287a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	689b      	ldr	r3, [r3, #8]
 801288a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801288c:	69fa      	ldr	r2, [r7, #28]
 801288e:	f640 030f 	movw	r3, #2063	; 0x80f
 8012892:	4013      	ands	r3, r2
 8012894:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8012896:	693b      	ldr	r3, [r7, #16]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d113      	bne.n	80128c4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801289c:	69fb      	ldr	r3, [r7, #28]
 801289e:	f003 0320 	and.w	r3, r3, #32
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d00e      	beq.n	80128c4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80128a6:	69bb      	ldr	r3, [r7, #24]
 80128a8:	f003 0320 	and.w	r3, r3, #32
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d009      	beq.n	80128c4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	f000 81ba 	beq.w	8012c2e <HAL_UART_IRQHandler+0x3c2>
      {
        huart->RxISR(huart);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80128be:	6878      	ldr	r0, [r7, #4]
 80128c0:	4798      	blx	r3
      }
      return;
 80128c2:	e1b4      	b.n	8012c2e <HAL_UART_IRQHandler+0x3c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80128c4:	693b      	ldr	r3, [r7, #16]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	f000 80e8 	beq.w	8012a9c <HAL_UART_IRQHandler+0x230>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	f003 0301 	and.w	r3, r3, #1
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d105      	bne.n	80128e2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80128d6:	69ba      	ldr	r2, [r7, #24]
 80128d8:	4b6e      	ldr	r3, [pc, #440]	; (8012a94 <HAL_UART_IRQHandler+0x228>)
 80128da:	4013      	ands	r3, r2
 80128dc:	2b00      	cmp	r3, #0
 80128de:	f000 80dd 	beq.w	8012a9c <HAL_UART_IRQHandler+0x230>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80128e2:	69fb      	ldr	r3, [r7, #28]
 80128e4:	f003 0301 	and.w	r3, r3, #1
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d010      	beq.n	801290e <HAL_UART_IRQHandler+0xa2>
 80128ec:	69bb      	ldr	r3, [r7, #24]
 80128ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d00b      	beq.n	801290e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	2201      	movs	r2, #1
 80128fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012904:	f043 0201 	orr.w	r2, r3, #1
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801290e:	69fb      	ldr	r3, [r7, #28]
 8012910:	f003 0302 	and.w	r3, r3, #2
 8012914:	2b00      	cmp	r3, #0
 8012916:	d010      	beq.n	801293a <HAL_UART_IRQHandler+0xce>
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	f003 0301 	and.w	r3, r3, #1
 801291e:	2b00      	cmp	r3, #0
 8012920:	d00b      	beq.n	801293a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	2202      	movs	r2, #2
 8012928:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012930:	f043 0204 	orr.w	r2, r3, #4
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801293a:	69fb      	ldr	r3, [r7, #28]
 801293c:	f003 0304 	and.w	r3, r3, #4
 8012940:	2b00      	cmp	r3, #0
 8012942:	d010      	beq.n	8012966 <HAL_UART_IRQHandler+0xfa>
 8012944:	697b      	ldr	r3, [r7, #20]
 8012946:	f003 0301 	and.w	r3, r3, #1
 801294a:	2b00      	cmp	r3, #0
 801294c:	d00b      	beq.n	8012966 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	2204      	movs	r2, #4
 8012954:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801295c:	f043 0202 	orr.w	r2, r3, #2
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012966:	69fb      	ldr	r3, [r7, #28]
 8012968:	f003 0308 	and.w	r3, r3, #8
 801296c:	2b00      	cmp	r3, #0
 801296e:	d015      	beq.n	801299c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8012970:	69bb      	ldr	r3, [r7, #24]
 8012972:	f003 0320 	and.w	r3, r3, #32
 8012976:	2b00      	cmp	r3, #0
 8012978:	d104      	bne.n	8012984 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8012980:	2b00      	cmp	r3, #0
 8012982:	d00b      	beq.n	801299c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	2208      	movs	r2, #8
 801298a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012992:	f043 0208 	orr.w	r2, r3, #8
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801299c:	69fb      	ldr	r3, [r7, #28]
 801299e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d011      	beq.n	80129ca <HAL_UART_IRQHandler+0x15e>
 80129a6:	69bb      	ldr	r3, [r7, #24]
 80129a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d00c      	beq.n	80129ca <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80129b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80129c0:	f043 0220 	orr.w	r2, r3, #32
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	f000 812e 	beq.w	8012c32 <HAL_UART_IRQHandler+0x3c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80129d6:	69fb      	ldr	r3, [r7, #28]
 80129d8:	f003 0320 	and.w	r3, r3, #32
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d00c      	beq.n	80129fa <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80129e0:	69bb      	ldr	r3, [r7, #24]
 80129e2:	f003 0320 	and.w	r3, r3, #32
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d007      	beq.n	80129fa <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d003      	beq.n	80129fa <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80129f6:	6878      	ldr	r0, [r7, #4]
 80129f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a00:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	689b      	ldr	r3, [r3, #8]
 8012a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a0c:	2b40      	cmp	r3, #64	; 0x40
 8012a0e:	d004      	beq.n	8012a1a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d031      	beq.n	8012a7e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012a1a:	6878      	ldr	r0, [r7, #4]
 8012a1c:	f000 fd7c 	bl	8013518 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	689b      	ldr	r3, [r3, #8]
 8012a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a2a:	2b40      	cmp	r3, #64	; 0x40
 8012a2c:	d123      	bne.n	8012a76 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	689a      	ldr	r2, [r3, #8]
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012a3c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d013      	beq.n	8012a6e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a4a:	4a13      	ldr	r2, [pc, #76]	; (8012a98 <HAL_UART_IRQHandler+0x22c>)
 8012a4c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a52:	4618      	mov	r0, r3
 8012a54:	f7f7 fce0 	bl	800a418 <HAL_DMA_Abort_IT>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d017      	beq.n	8012a8e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a64:	687a      	ldr	r2, [r7, #4]
 8012a66:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8012a68:	4610      	mov	r0, r2
 8012a6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012a6c:	e00f      	b.n	8012a8e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f000 f8f4 	bl	8012c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012a74:	e00b      	b.n	8012a8e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012a76:	6878      	ldr	r0, [r7, #4]
 8012a78:	f000 f8f0 	bl	8012c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012a7c:	e007      	b.n	8012a8e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012a7e:	6878      	ldr	r0, [r7, #4]
 8012a80:	f000 f8ec 	bl	8012c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	2200      	movs	r2, #0
 8012a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8012a8c:	e0d1      	b.n	8012c32 <HAL_UART_IRQHandler+0x3c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012a8e:	bf00      	nop
    return;
 8012a90:	e0cf      	b.n	8012c32 <HAL_UART_IRQHandler+0x3c6>
 8012a92:	bf00      	nop
 8012a94:	04000120 	.word	0x04000120
 8012a98:	08013577 	.word	0x08013577

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012aa0:	2b01      	cmp	r3, #1
 8012aa2:	f040 80a3 	bne.w	8012bec <HAL_UART_IRQHandler+0x380>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012aa6:	69fb      	ldr	r3, [r7, #28]
 8012aa8:	f003 0310 	and.w	r3, r3, #16
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	f000 809d 	beq.w	8012bec <HAL_UART_IRQHandler+0x380>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012ab2:	69bb      	ldr	r3, [r7, #24]
 8012ab4:	f003 0310 	and.w	r3, r3, #16
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	f000 8097 	beq.w	8012bec <HAL_UART_IRQHandler+0x380>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	2210      	movs	r2, #16
 8012ac4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	689b      	ldr	r3, [r3, #8]
 8012acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ad0:	2b40      	cmp	r3, #64	; 0x40
 8012ad2:	d152      	bne.n	8012b7a <HAL_UART_IRQHandler+0x30e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	685b      	ldr	r3, [r3, #4]
 8012adc:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8012ade:	893b      	ldrh	r3, [r7, #8]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	f000 80a8 	beq.w	8012c36 <HAL_UART_IRQHandler+0x3ca>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012aec:	893a      	ldrh	r2, [r7, #8]
 8012aee:	429a      	cmp	r2, r3
 8012af0:	f080 80a1 	bcs.w	8012c36 <HAL_UART_IRQHandler+0x3ca>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	893a      	ldrh	r2, [r7, #8]
 8012af8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b00:	69db      	ldr	r3, [r3, #28]
 8012b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b06:	d02a      	beq.n	8012b5e <HAL_UART_IRQHandler+0x2f2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	681a      	ldr	r2, [r3, #0]
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012b16:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	689a      	ldr	r2, [r3, #8]
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	f022 0201 	bic.w	r2, r2, #1
 8012b26:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	689a      	ldr	r2, [r3, #8]
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012b36:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2220      	movs	r2, #32
 8012b3c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	2200      	movs	r2, #0
 8012b42:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	681a      	ldr	r2, [r3, #0]
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	f022 0210 	bic.w	r2, r2, #16
 8012b52:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f7f7 fbed 	bl	800a338 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012b6a:	b29b      	uxth	r3, r3
 8012b6c:	1ad3      	subs	r3, r2, r3
 8012b6e:	b29b      	uxth	r3, r3
 8012b70:	4619      	mov	r1, r3
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	f000 f886 	bl	8012c84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012b78:	e05d      	b.n	8012c36 <HAL_UART_IRQHandler+0x3ca>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012b86:	b29b      	uxth	r3, r3
 8012b88:	1ad3      	subs	r3, r2, r3
 8012b8a:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012b92:	b29b      	uxth	r3, r3
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d050      	beq.n	8012c3a <HAL_UART_IRQHandler+0x3ce>
          && (nb_rx_data > 0U))
 8012b98:	897b      	ldrh	r3, [r7, #10]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d04d      	beq.n	8012c3a <HAL_UART_IRQHandler+0x3ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	681a      	ldr	r2, [r3, #0]
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8012bac:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	689a      	ldr	r2, [r3, #8]
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	f022 0201 	bic.w	r2, r2, #1
 8012bbc:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2220      	movs	r2, #32
 8012bc2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2200      	movs	r2, #0
 8012bce:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	681a      	ldr	r2, [r3, #0]
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	f022 0210 	bic.w	r2, r2, #16
 8012bde:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012be0:	897b      	ldrh	r3, [r7, #10]
 8012be2:	4619      	mov	r1, r3
 8012be4:	6878      	ldr	r0, [r7, #4]
 8012be6:	f000 f84d 	bl	8012c84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012bea:	e026      	b.n	8012c3a <HAL_UART_IRQHandler+0x3ce>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8012bec:	69fb      	ldr	r3, [r7, #28]
 8012bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d00d      	beq.n	8012c12 <HAL_UART_IRQHandler+0x3a6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8012bf6:	69bb      	ldr	r3, [r7, #24]
 8012bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d008      	beq.n	8012c12 <HAL_UART_IRQHandler+0x3a6>
  {
    if (huart->TxISR != NULL)
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d01a      	beq.n	8012c3e <HAL_UART_IRQHandler+0x3d2>
    {
      huart->TxISR(huart);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	4798      	blx	r3
    }
    return;
 8012c10:	e015      	b.n	8012c3e <HAL_UART_IRQHandler+0x3d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012c12:	69fb      	ldr	r3, [r7, #28]
 8012c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d011      	beq.n	8012c40 <HAL_UART_IRQHandler+0x3d4>
 8012c1c:	69bb      	ldr	r3, [r7, #24]
 8012c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d00c      	beq.n	8012c40 <HAL_UART_IRQHandler+0x3d4>
  {
    UART_EndTransmit_IT(huart);
 8012c26:	6878      	ldr	r0, [r7, #4]
 8012c28:	f000 fd56 	bl	80136d8 <UART_EndTransmit_IT>
    return;
 8012c2c:	e008      	b.n	8012c40 <HAL_UART_IRQHandler+0x3d4>
      return;
 8012c2e:	bf00      	nop
 8012c30:	e006      	b.n	8012c40 <HAL_UART_IRQHandler+0x3d4>
    return;
 8012c32:	bf00      	nop
 8012c34:	e004      	b.n	8012c40 <HAL_UART_IRQHandler+0x3d4>
      return;
 8012c36:	bf00      	nop
 8012c38:	e002      	b.n	8012c40 <HAL_UART_IRQHandler+0x3d4>
      return;
 8012c3a:	bf00      	nop
 8012c3c:	e000      	b.n	8012c40 <HAL_UART_IRQHandler+0x3d4>
    return;
 8012c3e:	bf00      	nop
  }

}
 8012c40:	3720      	adds	r7, #32
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bd80      	pop	{r7, pc}
 8012c46:	bf00      	nop

08012c48 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8012c48:	b480      	push	{r7}
 8012c4a:	b083      	sub	sp, #12
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8012c50:	bf00      	nop
 8012c52:	370c      	adds	r7, #12
 8012c54:	46bd      	mov	sp, r7
 8012c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5a:	4770      	bx	lr

08012c5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012c5c:	b480      	push	{r7}
 8012c5e:	b083      	sub	sp, #12
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012c64:	bf00      	nop
 8012c66:	370c      	adds	r7, #12
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6e:	4770      	bx	lr

08012c70 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8012c70:	b480      	push	{r7}
 8012c72:	b083      	sub	sp, #12
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8012c78:	bf00      	nop
 8012c7a:	370c      	adds	r7, #12
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c82:	4770      	bx	lr

08012c84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012c84:	b480      	push	{r7}
 8012c86:	b083      	sub	sp, #12
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
 8012c8c:	460b      	mov	r3, r1
 8012c8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012c90:	bf00      	nop
 8012c92:	370c      	adds	r7, #12
 8012c94:	46bd      	mov	sp, r7
 8012c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9a:	4770      	bx	lr

08012c9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b088      	sub	sp, #32
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	689a      	ldr	r2, [r3, #8]
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	691b      	ldr	r3, [r3, #16]
 8012cb0:	431a      	orrs	r2, r3
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	695b      	ldr	r3, [r3, #20]
 8012cb6:	431a      	orrs	r2, r3
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	69db      	ldr	r3, [r3, #28]
 8012cbc:	4313      	orrs	r3, r2
 8012cbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	681a      	ldr	r2, [r3, #0]
 8012cc6:	4ba6      	ldr	r3, [pc, #664]	; (8012f60 <UART_SetConfig+0x2c4>)
 8012cc8:	4013      	ands	r3, r2
 8012cca:	687a      	ldr	r2, [r7, #4]
 8012ccc:	6812      	ldr	r2, [r2, #0]
 8012cce:	6979      	ldr	r1, [r7, #20]
 8012cd0:	430b      	orrs	r3, r1
 8012cd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	685b      	ldr	r3, [r3, #4]
 8012cda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	68da      	ldr	r2, [r3, #12]
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	430a      	orrs	r2, r1
 8012ce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	699b      	ldr	r3, [r3, #24]
 8012cee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	6a1b      	ldr	r3, [r3, #32]
 8012cf4:	697a      	ldr	r2, [r7, #20]
 8012cf6:	4313      	orrs	r3, r2
 8012cf8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	689b      	ldr	r3, [r3, #8]
 8012d00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	697a      	ldr	r2, [r7, #20]
 8012d0a:	430a      	orrs	r2, r1
 8012d0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	4a94      	ldr	r2, [pc, #592]	; (8012f64 <UART_SetConfig+0x2c8>)
 8012d14:	4293      	cmp	r3, r2
 8012d16:	d120      	bne.n	8012d5a <UART_SetConfig+0xbe>
 8012d18:	4b93      	ldr	r3, [pc, #588]	; (8012f68 <UART_SetConfig+0x2cc>)
 8012d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012d1e:	f003 0303 	and.w	r3, r3, #3
 8012d22:	2b03      	cmp	r3, #3
 8012d24:	d816      	bhi.n	8012d54 <UART_SetConfig+0xb8>
 8012d26:	a201      	add	r2, pc, #4	; (adr r2, 8012d2c <UART_SetConfig+0x90>)
 8012d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d2c:	08012d3d 	.word	0x08012d3d
 8012d30:	08012d49 	.word	0x08012d49
 8012d34:	08012d43 	.word	0x08012d43
 8012d38:	08012d4f 	.word	0x08012d4f
 8012d3c:	2301      	movs	r3, #1
 8012d3e:	77fb      	strb	r3, [r7, #31]
 8012d40:	e150      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012d42:	2302      	movs	r3, #2
 8012d44:	77fb      	strb	r3, [r7, #31]
 8012d46:	e14d      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012d48:	2304      	movs	r3, #4
 8012d4a:	77fb      	strb	r3, [r7, #31]
 8012d4c:	e14a      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012d4e:	2308      	movs	r3, #8
 8012d50:	77fb      	strb	r3, [r7, #31]
 8012d52:	e147      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012d54:	2310      	movs	r3, #16
 8012d56:	77fb      	strb	r3, [r7, #31]
 8012d58:	e144      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	4a83      	ldr	r2, [pc, #524]	; (8012f6c <UART_SetConfig+0x2d0>)
 8012d60:	4293      	cmp	r3, r2
 8012d62:	d132      	bne.n	8012dca <UART_SetConfig+0x12e>
 8012d64:	4b80      	ldr	r3, [pc, #512]	; (8012f68 <UART_SetConfig+0x2cc>)
 8012d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012d6a:	f003 030c 	and.w	r3, r3, #12
 8012d6e:	2b0c      	cmp	r3, #12
 8012d70:	d828      	bhi.n	8012dc4 <UART_SetConfig+0x128>
 8012d72:	a201      	add	r2, pc, #4	; (adr r2, 8012d78 <UART_SetConfig+0xdc>)
 8012d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d78:	08012dad 	.word	0x08012dad
 8012d7c:	08012dc5 	.word	0x08012dc5
 8012d80:	08012dc5 	.word	0x08012dc5
 8012d84:	08012dc5 	.word	0x08012dc5
 8012d88:	08012db9 	.word	0x08012db9
 8012d8c:	08012dc5 	.word	0x08012dc5
 8012d90:	08012dc5 	.word	0x08012dc5
 8012d94:	08012dc5 	.word	0x08012dc5
 8012d98:	08012db3 	.word	0x08012db3
 8012d9c:	08012dc5 	.word	0x08012dc5
 8012da0:	08012dc5 	.word	0x08012dc5
 8012da4:	08012dc5 	.word	0x08012dc5
 8012da8:	08012dbf 	.word	0x08012dbf
 8012dac:	2300      	movs	r3, #0
 8012dae:	77fb      	strb	r3, [r7, #31]
 8012db0:	e118      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012db2:	2302      	movs	r3, #2
 8012db4:	77fb      	strb	r3, [r7, #31]
 8012db6:	e115      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012db8:	2304      	movs	r3, #4
 8012dba:	77fb      	strb	r3, [r7, #31]
 8012dbc:	e112      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012dbe:	2308      	movs	r3, #8
 8012dc0:	77fb      	strb	r3, [r7, #31]
 8012dc2:	e10f      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012dc4:	2310      	movs	r3, #16
 8012dc6:	77fb      	strb	r3, [r7, #31]
 8012dc8:	e10c      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	4a68      	ldr	r2, [pc, #416]	; (8012f70 <UART_SetConfig+0x2d4>)
 8012dd0:	4293      	cmp	r3, r2
 8012dd2:	d120      	bne.n	8012e16 <UART_SetConfig+0x17a>
 8012dd4:	4b64      	ldr	r3, [pc, #400]	; (8012f68 <UART_SetConfig+0x2cc>)
 8012dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012dda:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012dde:	2b30      	cmp	r3, #48	; 0x30
 8012de0:	d013      	beq.n	8012e0a <UART_SetConfig+0x16e>
 8012de2:	2b30      	cmp	r3, #48	; 0x30
 8012de4:	d814      	bhi.n	8012e10 <UART_SetConfig+0x174>
 8012de6:	2b20      	cmp	r3, #32
 8012de8:	d009      	beq.n	8012dfe <UART_SetConfig+0x162>
 8012dea:	2b20      	cmp	r3, #32
 8012dec:	d810      	bhi.n	8012e10 <UART_SetConfig+0x174>
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d002      	beq.n	8012df8 <UART_SetConfig+0x15c>
 8012df2:	2b10      	cmp	r3, #16
 8012df4:	d006      	beq.n	8012e04 <UART_SetConfig+0x168>
 8012df6:	e00b      	b.n	8012e10 <UART_SetConfig+0x174>
 8012df8:	2300      	movs	r3, #0
 8012dfa:	77fb      	strb	r3, [r7, #31]
 8012dfc:	e0f2      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012dfe:	2302      	movs	r3, #2
 8012e00:	77fb      	strb	r3, [r7, #31]
 8012e02:	e0ef      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012e04:	2304      	movs	r3, #4
 8012e06:	77fb      	strb	r3, [r7, #31]
 8012e08:	e0ec      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012e0a:	2308      	movs	r3, #8
 8012e0c:	77fb      	strb	r3, [r7, #31]
 8012e0e:	e0e9      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012e10:	2310      	movs	r3, #16
 8012e12:	77fb      	strb	r3, [r7, #31]
 8012e14:	e0e6      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	4a56      	ldr	r2, [pc, #344]	; (8012f74 <UART_SetConfig+0x2d8>)
 8012e1c:	4293      	cmp	r3, r2
 8012e1e:	d120      	bne.n	8012e62 <UART_SetConfig+0x1c6>
 8012e20:	4b51      	ldr	r3, [pc, #324]	; (8012f68 <UART_SetConfig+0x2cc>)
 8012e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012e2a:	2bc0      	cmp	r3, #192	; 0xc0
 8012e2c:	d013      	beq.n	8012e56 <UART_SetConfig+0x1ba>
 8012e2e:	2bc0      	cmp	r3, #192	; 0xc0
 8012e30:	d814      	bhi.n	8012e5c <UART_SetConfig+0x1c0>
 8012e32:	2b80      	cmp	r3, #128	; 0x80
 8012e34:	d009      	beq.n	8012e4a <UART_SetConfig+0x1ae>
 8012e36:	2b80      	cmp	r3, #128	; 0x80
 8012e38:	d810      	bhi.n	8012e5c <UART_SetConfig+0x1c0>
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d002      	beq.n	8012e44 <UART_SetConfig+0x1a8>
 8012e3e:	2b40      	cmp	r3, #64	; 0x40
 8012e40:	d006      	beq.n	8012e50 <UART_SetConfig+0x1b4>
 8012e42:	e00b      	b.n	8012e5c <UART_SetConfig+0x1c0>
 8012e44:	2300      	movs	r3, #0
 8012e46:	77fb      	strb	r3, [r7, #31]
 8012e48:	e0cc      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012e4a:	2302      	movs	r3, #2
 8012e4c:	77fb      	strb	r3, [r7, #31]
 8012e4e:	e0c9      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012e50:	2304      	movs	r3, #4
 8012e52:	77fb      	strb	r3, [r7, #31]
 8012e54:	e0c6      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012e56:	2308      	movs	r3, #8
 8012e58:	77fb      	strb	r3, [r7, #31]
 8012e5a:	e0c3      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012e5c:	2310      	movs	r3, #16
 8012e5e:	77fb      	strb	r3, [r7, #31]
 8012e60:	e0c0      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	4a44      	ldr	r2, [pc, #272]	; (8012f78 <UART_SetConfig+0x2dc>)
 8012e68:	4293      	cmp	r3, r2
 8012e6a:	d125      	bne.n	8012eb8 <UART_SetConfig+0x21c>
 8012e6c:	4b3e      	ldr	r3, [pc, #248]	; (8012f68 <UART_SetConfig+0x2cc>)
 8012e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012e7a:	d017      	beq.n	8012eac <UART_SetConfig+0x210>
 8012e7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012e80:	d817      	bhi.n	8012eb2 <UART_SetConfig+0x216>
 8012e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e86:	d00b      	beq.n	8012ea0 <UART_SetConfig+0x204>
 8012e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e8c:	d811      	bhi.n	8012eb2 <UART_SetConfig+0x216>
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d003      	beq.n	8012e9a <UART_SetConfig+0x1fe>
 8012e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e96:	d006      	beq.n	8012ea6 <UART_SetConfig+0x20a>
 8012e98:	e00b      	b.n	8012eb2 <UART_SetConfig+0x216>
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	77fb      	strb	r3, [r7, #31]
 8012e9e:	e0a1      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012ea0:	2302      	movs	r3, #2
 8012ea2:	77fb      	strb	r3, [r7, #31]
 8012ea4:	e09e      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012ea6:	2304      	movs	r3, #4
 8012ea8:	77fb      	strb	r3, [r7, #31]
 8012eaa:	e09b      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012eac:	2308      	movs	r3, #8
 8012eae:	77fb      	strb	r3, [r7, #31]
 8012eb0:	e098      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012eb2:	2310      	movs	r3, #16
 8012eb4:	77fb      	strb	r3, [r7, #31]
 8012eb6:	e095      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	4a2f      	ldr	r2, [pc, #188]	; (8012f7c <UART_SetConfig+0x2e0>)
 8012ebe:	4293      	cmp	r3, r2
 8012ec0:	d125      	bne.n	8012f0e <UART_SetConfig+0x272>
 8012ec2:	4b29      	ldr	r3, [pc, #164]	; (8012f68 <UART_SetConfig+0x2cc>)
 8012ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ec8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8012ecc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012ed0:	d017      	beq.n	8012f02 <UART_SetConfig+0x266>
 8012ed2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012ed6:	d817      	bhi.n	8012f08 <UART_SetConfig+0x26c>
 8012ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012edc:	d00b      	beq.n	8012ef6 <UART_SetConfig+0x25a>
 8012ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012ee2:	d811      	bhi.n	8012f08 <UART_SetConfig+0x26c>
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d003      	beq.n	8012ef0 <UART_SetConfig+0x254>
 8012ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012eec:	d006      	beq.n	8012efc <UART_SetConfig+0x260>
 8012eee:	e00b      	b.n	8012f08 <UART_SetConfig+0x26c>
 8012ef0:	2301      	movs	r3, #1
 8012ef2:	77fb      	strb	r3, [r7, #31]
 8012ef4:	e076      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012ef6:	2302      	movs	r3, #2
 8012ef8:	77fb      	strb	r3, [r7, #31]
 8012efa:	e073      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012efc:	2304      	movs	r3, #4
 8012efe:	77fb      	strb	r3, [r7, #31]
 8012f00:	e070      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012f02:	2308      	movs	r3, #8
 8012f04:	77fb      	strb	r3, [r7, #31]
 8012f06:	e06d      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012f08:	2310      	movs	r3, #16
 8012f0a:	77fb      	strb	r3, [r7, #31]
 8012f0c:	e06a      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	4a1b      	ldr	r2, [pc, #108]	; (8012f80 <UART_SetConfig+0x2e4>)
 8012f14:	4293      	cmp	r3, r2
 8012f16:	d138      	bne.n	8012f8a <UART_SetConfig+0x2ee>
 8012f18:	4b13      	ldr	r3, [pc, #76]	; (8012f68 <UART_SetConfig+0x2cc>)
 8012f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012f1e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8012f22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012f26:	d017      	beq.n	8012f58 <UART_SetConfig+0x2bc>
 8012f28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012f2c:	d82a      	bhi.n	8012f84 <UART_SetConfig+0x2e8>
 8012f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012f32:	d00b      	beq.n	8012f4c <UART_SetConfig+0x2b0>
 8012f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012f38:	d824      	bhi.n	8012f84 <UART_SetConfig+0x2e8>
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d003      	beq.n	8012f46 <UART_SetConfig+0x2aa>
 8012f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012f42:	d006      	beq.n	8012f52 <UART_SetConfig+0x2b6>
 8012f44:	e01e      	b.n	8012f84 <UART_SetConfig+0x2e8>
 8012f46:	2300      	movs	r3, #0
 8012f48:	77fb      	strb	r3, [r7, #31]
 8012f4a:	e04b      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012f4c:	2302      	movs	r3, #2
 8012f4e:	77fb      	strb	r3, [r7, #31]
 8012f50:	e048      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012f52:	2304      	movs	r3, #4
 8012f54:	77fb      	strb	r3, [r7, #31]
 8012f56:	e045      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012f58:	2308      	movs	r3, #8
 8012f5a:	77fb      	strb	r3, [r7, #31]
 8012f5c:	e042      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012f5e:	bf00      	nop
 8012f60:	efff69f3 	.word	0xefff69f3
 8012f64:	40011000 	.word	0x40011000
 8012f68:	40023800 	.word	0x40023800
 8012f6c:	40004400 	.word	0x40004400
 8012f70:	40004800 	.word	0x40004800
 8012f74:	40004c00 	.word	0x40004c00
 8012f78:	40005000 	.word	0x40005000
 8012f7c:	40011400 	.word	0x40011400
 8012f80:	40007800 	.word	0x40007800
 8012f84:	2310      	movs	r3, #16
 8012f86:	77fb      	strb	r3, [r7, #31]
 8012f88:	e02c      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	4a72      	ldr	r2, [pc, #456]	; (8013158 <UART_SetConfig+0x4bc>)
 8012f90:	4293      	cmp	r3, r2
 8012f92:	d125      	bne.n	8012fe0 <UART_SetConfig+0x344>
 8012f94:	4b71      	ldr	r3, [pc, #452]	; (801315c <UART_SetConfig+0x4c0>)
 8012f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012f9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012f9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012fa2:	d017      	beq.n	8012fd4 <UART_SetConfig+0x338>
 8012fa4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012fa8:	d817      	bhi.n	8012fda <UART_SetConfig+0x33e>
 8012faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012fae:	d00b      	beq.n	8012fc8 <UART_SetConfig+0x32c>
 8012fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012fb4:	d811      	bhi.n	8012fda <UART_SetConfig+0x33e>
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d003      	beq.n	8012fc2 <UART_SetConfig+0x326>
 8012fba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012fbe:	d006      	beq.n	8012fce <UART_SetConfig+0x332>
 8012fc0:	e00b      	b.n	8012fda <UART_SetConfig+0x33e>
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	77fb      	strb	r3, [r7, #31]
 8012fc6:	e00d      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012fc8:	2302      	movs	r3, #2
 8012fca:	77fb      	strb	r3, [r7, #31]
 8012fcc:	e00a      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012fce:	2304      	movs	r3, #4
 8012fd0:	77fb      	strb	r3, [r7, #31]
 8012fd2:	e007      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012fd4:	2308      	movs	r3, #8
 8012fd6:	77fb      	strb	r3, [r7, #31]
 8012fd8:	e004      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012fda:	2310      	movs	r3, #16
 8012fdc:	77fb      	strb	r3, [r7, #31]
 8012fde:	e001      	b.n	8012fe4 <UART_SetConfig+0x348>
 8012fe0:	2310      	movs	r3, #16
 8012fe2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	69db      	ldr	r3, [r3, #28]
 8012fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012fec:	d15c      	bne.n	80130a8 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8012fee:	7ffb      	ldrb	r3, [r7, #31]
 8012ff0:	2b08      	cmp	r3, #8
 8012ff2:	d828      	bhi.n	8013046 <UART_SetConfig+0x3aa>
 8012ff4:	a201      	add	r2, pc, #4	; (adr r2, 8012ffc <UART_SetConfig+0x360>)
 8012ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ffa:	bf00      	nop
 8012ffc:	08013021 	.word	0x08013021
 8013000:	08013029 	.word	0x08013029
 8013004:	08013031 	.word	0x08013031
 8013008:	08013047 	.word	0x08013047
 801300c:	08013037 	.word	0x08013037
 8013010:	08013047 	.word	0x08013047
 8013014:	08013047 	.word	0x08013047
 8013018:	08013047 	.word	0x08013047
 801301c:	0801303f 	.word	0x0801303f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013020:	f7fb fd56 	bl	800ead0 <HAL_RCC_GetPCLK1Freq>
 8013024:	61b8      	str	r0, [r7, #24]
        break;
 8013026:	e013      	b.n	8013050 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013028:	f7fb fd66 	bl	800eaf8 <HAL_RCC_GetPCLK2Freq>
 801302c:	61b8      	str	r0, [r7, #24]
        break;
 801302e:	e00f      	b.n	8013050 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013030:	4b4b      	ldr	r3, [pc, #300]	; (8013160 <UART_SetConfig+0x4c4>)
 8013032:	61bb      	str	r3, [r7, #24]
        break;
 8013034:	e00c      	b.n	8013050 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013036:	f7fb fc39 	bl	800e8ac <HAL_RCC_GetSysClockFreq>
 801303a:	61b8      	str	r0, [r7, #24]
        break;
 801303c:	e008      	b.n	8013050 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801303e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013042:	61bb      	str	r3, [r7, #24]
        break;
 8013044:	e004      	b.n	8013050 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8013046:	2300      	movs	r3, #0
 8013048:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801304a:	2301      	movs	r3, #1
 801304c:	77bb      	strb	r3, [r7, #30]
        break;
 801304e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013050:	69bb      	ldr	r3, [r7, #24]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d074      	beq.n	8013140 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8013056:	69bb      	ldr	r3, [r7, #24]
 8013058:	005a      	lsls	r2, r3, #1
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	685b      	ldr	r3, [r3, #4]
 801305e:	085b      	lsrs	r3, r3, #1
 8013060:	441a      	add	r2, r3
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	685b      	ldr	r3, [r3, #4]
 8013066:	fbb2 f3f3 	udiv	r3, r2, r3
 801306a:	b29b      	uxth	r3, r3
 801306c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	2b0f      	cmp	r3, #15
 8013072:	d916      	bls.n	80130a2 <UART_SetConfig+0x406>
 8013074:	693b      	ldr	r3, [r7, #16]
 8013076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801307a:	d212      	bcs.n	80130a2 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801307c:	693b      	ldr	r3, [r7, #16]
 801307e:	b29b      	uxth	r3, r3
 8013080:	f023 030f 	bic.w	r3, r3, #15
 8013084:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013086:	693b      	ldr	r3, [r7, #16]
 8013088:	085b      	lsrs	r3, r3, #1
 801308a:	b29b      	uxth	r3, r3
 801308c:	f003 0307 	and.w	r3, r3, #7
 8013090:	b29a      	uxth	r2, r3
 8013092:	89fb      	ldrh	r3, [r7, #14]
 8013094:	4313      	orrs	r3, r2
 8013096:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	89fa      	ldrh	r2, [r7, #14]
 801309e:	60da      	str	r2, [r3, #12]
 80130a0:	e04e      	b.n	8013140 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80130a2:	2301      	movs	r3, #1
 80130a4:	77bb      	strb	r3, [r7, #30]
 80130a6:	e04b      	b.n	8013140 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80130a8:	7ffb      	ldrb	r3, [r7, #31]
 80130aa:	2b08      	cmp	r3, #8
 80130ac:	d827      	bhi.n	80130fe <UART_SetConfig+0x462>
 80130ae:	a201      	add	r2, pc, #4	; (adr r2, 80130b4 <UART_SetConfig+0x418>)
 80130b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130b4:	080130d9 	.word	0x080130d9
 80130b8:	080130e1 	.word	0x080130e1
 80130bc:	080130e9 	.word	0x080130e9
 80130c0:	080130ff 	.word	0x080130ff
 80130c4:	080130ef 	.word	0x080130ef
 80130c8:	080130ff 	.word	0x080130ff
 80130cc:	080130ff 	.word	0x080130ff
 80130d0:	080130ff 	.word	0x080130ff
 80130d4:	080130f7 	.word	0x080130f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80130d8:	f7fb fcfa 	bl	800ead0 <HAL_RCC_GetPCLK1Freq>
 80130dc:	61b8      	str	r0, [r7, #24]
        break;
 80130de:	e013      	b.n	8013108 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80130e0:	f7fb fd0a 	bl	800eaf8 <HAL_RCC_GetPCLK2Freq>
 80130e4:	61b8      	str	r0, [r7, #24]
        break;
 80130e6:	e00f      	b.n	8013108 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80130e8:	4b1d      	ldr	r3, [pc, #116]	; (8013160 <UART_SetConfig+0x4c4>)
 80130ea:	61bb      	str	r3, [r7, #24]
        break;
 80130ec:	e00c      	b.n	8013108 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80130ee:	f7fb fbdd 	bl	800e8ac <HAL_RCC_GetSysClockFreq>
 80130f2:	61b8      	str	r0, [r7, #24]
        break;
 80130f4:	e008      	b.n	8013108 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80130f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80130fa:	61bb      	str	r3, [r7, #24]
        break;
 80130fc:	e004      	b.n	8013108 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80130fe:	2300      	movs	r3, #0
 8013100:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8013102:	2301      	movs	r3, #1
 8013104:	77bb      	strb	r3, [r7, #30]
        break;
 8013106:	bf00      	nop
    }

    if (pclk != 0U)
 8013108:	69bb      	ldr	r3, [r7, #24]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d018      	beq.n	8013140 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	685b      	ldr	r3, [r3, #4]
 8013112:	085a      	lsrs	r2, r3, #1
 8013114:	69bb      	ldr	r3, [r7, #24]
 8013116:	441a      	add	r2, r3
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	685b      	ldr	r3, [r3, #4]
 801311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013120:	b29b      	uxth	r3, r3
 8013122:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013124:	693b      	ldr	r3, [r7, #16]
 8013126:	2b0f      	cmp	r3, #15
 8013128:	d908      	bls.n	801313c <UART_SetConfig+0x4a0>
 801312a:	693b      	ldr	r3, [r7, #16]
 801312c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013130:	d204      	bcs.n	801313c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	693a      	ldr	r2, [r7, #16]
 8013138:	60da      	str	r2, [r3, #12]
 801313a:	e001      	b.n	8013140 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801313c:	2301      	movs	r3, #1
 801313e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2200      	movs	r2, #0
 8013144:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2200      	movs	r2, #0
 801314a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 801314c:	7fbb      	ldrb	r3, [r7, #30]
}
 801314e:	4618      	mov	r0, r3
 8013150:	3720      	adds	r7, #32
 8013152:	46bd      	mov	sp, r7
 8013154:	bd80      	pop	{r7, pc}
 8013156:	bf00      	nop
 8013158:	40007c00 	.word	0x40007c00
 801315c:	40023800 	.word	0x40023800
 8013160:	00f42400 	.word	0x00f42400

08013164 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013164:	b480      	push	{r7}
 8013166:	b083      	sub	sp, #12
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013170:	f003 0301 	and.w	r3, r3, #1
 8013174:	2b00      	cmp	r3, #0
 8013176:	d00a      	beq.n	801318e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	685b      	ldr	r3, [r3, #4]
 801317e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	430a      	orrs	r2, r1
 801318c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013192:	f003 0302 	and.w	r3, r3, #2
 8013196:	2b00      	cmp	r3, #0
 8013198:	d00a      	beq.n	80131b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	685b      	ldr	r3, [r3, #4]
 80131a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	430a      	orrs	r2, r1
 80131ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131b4:	f003 0304 	and.w	r3, r3, #4
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d00a      	beq.n	80131d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	685b      	ldr	r3, [r3, #4]
 80131c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	430a      	orrs	r2, r1
 80131d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131d6:	f003 0308 	and.w	r3, r3, #8
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d00a      	beq.n	80131f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	685b      	ldr	r3, [r3, #4]
 80131e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	430a      	orrs	r2, r1
 80131f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131f8:	f003 0310 	and.w	r3, r3, #16
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d00a      	beq.n	8013216 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	689b      	ldr	r3, [r3, #8]
 8013206:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	430a      	orrs	r2, r1
 8013214:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801321a:	f003 0320 	and.w	r3, r3, #32
 801321e:	2b00      	cmp	r3, #0
 8013220:	d00a      	beq.n	8013238 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	689b      	ldr	r3, [r3, #8]
 8013228:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	430a      	orrs	r2, r1
 8013236:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801323c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013240:	2b00      	cmp	r3, #0
 8013242:	d01a      	beq.n	801327a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	685b      	ldr	r3, [r3, #4]
 801324a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	430a      	orrs	r2, r1
 8013258:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801325e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013262:	d10a      	bne.n	801327a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	685b      	ldr	r3, [r3, #4]
 801326a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	430a      	orrs	r2, r1
 8013278:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013282:	2b00      	cmp	r3, #0
 8013284:	d00a      	beq.n	801329c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	685b      	ldr	r3, [r3, #4]
 801328c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	430a      	orrs	r2, r1
 801329a:	605a      	str	r2, [r3, #4]
  }
}
 801329c:	bf00      	nop
 801329e:	370c      	adds	r7, #12
 80132a0:	46bd      	mov	sp, r7
 80132a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a6:	4770      	bx	lr

080132a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b086      	sub	sp, #24
 80132ac:	af02      	add	r7, sp, #8
 80132ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	2200      	movs	r2, #0
 80132b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80132b8:	f7f5 ff66 	bl	8009188 <HAL_GetTick>
 80132bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	f003 0308 	and.w	r3, r3, #8
 80132c8:	2b08      	cmp	r3, #8
 80132ca:	d10e      	bne.n	80132ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80132cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80132d0:	9300      	str	r3, [sp, #0]
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	2200      	movs	r2, #0
 80132d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80132da:	6878      	ldr	r0, [r7, #4]
 80132dc:	f000 f817 	bl	801330e <UART_WaitOnFlagUntilTimeout>
 80132e0:	4603      	mov	r3, r0
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d001      	beq.n	80132ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80132e6:	2303      	movs	r3, #3
 80132e8:	e00d      	b.n	8013306 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	2220      	movs	r2, #32
 80132ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	2220      	movs	r2, #32
 80132f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	2200      	movs	r2, #0
 80132fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	2200      	movs	r2, #0
 8013300:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8013304:	2300      	movs	r3, #0
}
 8013306:	4618      	mov	r0, r3
 8013308:	3710      	adds	r7, #16
 801330a:	46bd      	mov	sp, r7
 801330c:	bd80      	pop	{r7, pc}

0801330e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801330e:	b580      	push	{r7, lr}
 8013310:	b084      	sub	sp, #16
 8013312:	af00      	add	r7, sp, #0
 8013314:	60f8      	str	r0, [r7, #12]
 8013316:	60b9      	str	r1, [r7, #8]
 8013318:	603b      	str	r3, [r7, #0]
 801331a:	4613      	mov	r3, r2
 801331c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801331e:	e05e      	b.n	80133de <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013320:	69bb      	ldr	r3, [r7, #24]
 8013322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013326:	d05a      	beq.n	80133de <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013328:	f7f5 ff2e 	bl	8009188 <HAL_GetTick>
 801332c:	4602      	mov	r2, r0
 801332e:	683b      	ldr	r3, [r7, #0]
 8013330:	1ad3      	subs	r3, r2, r3
 8013332:	69ba      	ldr	r2, [r7, #24]
 8013334:	429a      	cmp	r2, r3
 8013336:	d302      	bcc.n	801333e <UART_WaitOnFlagUntilTimeout+0x30>
 8013338:	69bb      	ldr	r3, [r7, #24]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d11b      	bne.n	8013376 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	681a      	ldr	r2, [r3, #0]
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801334c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	689a      	ldr	r2, [r3, #8]
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	f022 0201 	bic.w	r2, r2, #1
 801335c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	2220      	movs	r2, #32
 8013362:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	2220      	movs	r2, #32
 8013368:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	2200      	movs	r2, #0
 801336e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8013372:	2303      	movs	r3, #3
 8013374:	e043      	b.n	80133fe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	f003 0304 	and.w	r3, r3, #4
 8013380:	2b00      	cmp	r3, #0
 8013382:	d02c      	beq.n	80133de <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	69db      	ldr	r3, [r3, #28]
 801338a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801338e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013392:	d124      	bne.n	80133de <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801339c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	681a      	ldr	r2, [r3, #0]
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80133ac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	689a      	ldr	r2, [r3, #8]
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	f022 0201 	bic.w	r2, r2, #1
 80133bc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	2220      	movs	r2, #32
 80133c2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	2220      	movs	r2, #32
 80133c8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	2220      	movs	r2, #32
 80133ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	2200      	movs	r2, #0
 80133d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80133da:	2303      	movs	r3, #3
 80133dc:	e00f      	b.n	80133fe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	69da      	ldr	r2, [r3, #28]
 80133e4:	68bb      	ldr	r3, [r7, #8]
 80133e6:	4013      	ands	r3, r2
 80133e8:	68ba      	ldr	r2, [r7, #8]
 80133ea:	429a      	cmp	r2, r3
 80133ec:	bf0c      	ite	eq
 80133ee:	2301      	moveq	r3, #1
 80133f0:	2300      	movne	r3, #0
 80133f2:	b2db      	uxtb	r3, r3
 80133f4:	461a      	mov	r2, r3
 80133f6:	79fb      	ldrb	r3, [r7, #7]
 80133f8:	429a      	cmp	r2, r3
 80133fa:	d091      	beq.n	8013320 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80133fc:	2300      	movs	r3, #0
}
 80133fe:	4618      	mov	r0, r3
 8013400:	3710      	adds	r7, #16
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}
	...

08013408 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013408:	b480      	push	{r7}
 801340a:	b085      	sub	sp, #20
 801340c:	af00      	add	r7, sp, #0
 801340e:	60f8      	str	r0, [r7, #12]
 8013410:	60b9      	str	r1, [r7, #8]
 8013412:	4613      	mov	r3, r2
 8013414:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	68ba      	ldr	r2, [r7, #8]
 801341a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	88fa      	ldrh	r2, [r7, #6]
 8013420:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	88fa      	ldrh	r2, [r7, #6]
 8013428:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	2200      	movs	r2, #0
 8013430:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	689b      	ldr	r3, [r3, #8]
 8013436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801343a:	d10e      	bne.n	801345a <UART_Start_Receive_IT+0x52>
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	691b      	ldr	r3, [r3, #16]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d105      	bne.n	8013450 <UART_Start_Receive_IT+0x48>
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	f240 12ff 	movw	r2, #511	; 0x1ff
 801344a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801344e:	e02d      	b.n	80134ac <UART_Start_Receive_IT+0xa4>
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	22ff      	movs	r2, #255	; 0xff
 8013454:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8013458:	e028      	b.n	80134ac <UART_Start_Receive_IT+0xa4>
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	689b      	ldr	r3, [r3, #8]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d10d      	bne.n	801347e <UART_Start_Receive_IT+0x76>
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	691b      	ldr	r3, [r3, #16]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d104      	bne.n	8013474 <UART_Start_Receive_IT+0x6c>
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	22ff      	movs	r2, #255	; 0xff
 801346e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8013472:	e01b      	b.n	80134ac <UART_Start_Receive_IT+0xa4>
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	227f      	movs	r2, #127	; 0x7f
 8013478:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801347c:	e016      	b.n	80134ac <UART_Start_Receive_IT+0xa4>
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	689b      	ldr	r3, [r3, #8]
 8013482:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013486:	d10d      	bne.n	80134a4 <UART_Start_Receive_IT+0x9c>
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	691b      	ldr	r3, [r3, #16]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d104      	bne.n	801349a <UART_Start_Receive_IT+0x92>
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	227f      	movs	r2, #127	; 0x7f
 8013494:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8013498:	e008      	b.n	80134ac <UART_Start_Receive_IT+0xa4>
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	223f      	movs	r2, #63	; 0x3f
 801349e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80134a2:	e003      	b.n	80134ac <UART_Start_Receive_IT+0xa4>
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	2200      	movs	r2, #0
 80134a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	2200      	movs	r2, #0
 80134b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	2222      	movs	r2, #34	; 0x22
 80134b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	689a      	ldr	r2, [r3, #8]
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	f042 0201 	orr.w	r2, r2, #1
 80134c8:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	689b      	ldr	r3, [r3, #8]
 80134ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80134d2:	d107      	bne.n	80134e4 <UART_Start_Receive_IT+0xdc>
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	691b      	ldr	r3, [r3, #16]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d103      	bne.n	80134e4 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	4a0c      	ldr	r2, [pc, #48]	; (8013510 <UART_Start_Receive_IT+0x108>)
 80134e0:	665a      	str	r2, [r3, #100]	; 0x64
 80134e2:	e002      	b.n	80134ea <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	4a0b      	ldr	r2, [pc, #44]	; (8013514 <UART_Start_Receive_IT+0x10c>)
 80134e8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	2200      	movs	r2, #0
 80134ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	681a      	ldr	r2, [r3, #0]
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8013500:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8013502:	2300      	movs	r3, #0
}
 8013504:	4618      	mov	r0, r3
 8013506:	3714      	adds	r7, #20
 8013508:	46bd      	mov	sp, r7
 801350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350e:	4770      	bx	lr
 8013510:	080137df 	.word	0x080137df
 8013514:	0801370b 	.word	0x0801370b

08013518 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013518:	b480      	push	{r7}
 801351a:	b083      	sub	sp, #12
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	681a      	ldr	r2, [r3, #0]
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801352e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	689a      	ldr	r2, [r3, #8]
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	f022 0201 	bic.w	r2, r2, #1
 801353e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013544:	2b01      	cmp	r3, #1
 8013546:	d107      	bne.n	8013558 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	681a      	ldr	r2, [r3, #0]
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	f022 0210 	bic.w	r2, r2, #16
 8013556:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	2220      	movs	r2, #32
 801355c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2200      	movs	r2, #0
 8013562:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	2200      	movs	r2, #0
 8013568:	665a      	str	r2, [r3, #100]	; 0x64
}
 801356a:	bf00      	nop
 801356c:	370c      	adds	r7, #12
 801356e:	46bd      	mov	sp, r7
 8013570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013574:	4770      	bx	lr

08013576 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013576:	b580      	push	{r7, lr}
 8013578:	b084      	sub	sp, #16
 801357a:	af00      	add	r7, sp, #0
 801357c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013582:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	2200      	movs	r2, #0
 8013588:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	2200      	movs	r2, #0
 8013590:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013594:	68f8      	ldr	r0, [r7, #12]
 8013596:	f7ff fb61 	bl	8012c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801359a:	bf00      	nop
 801359c:	3710      	adds	r7, #16
 801359e:	46bd      	mov	sp, r7
 80135a0:	bd80      	pop	{r7, pc}

080135a2 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80135a2:	b580      	push	{r7, lr}
 80135a4:	b084      	sub	sp, #16
 80135a6:	af00      	add	r7, sp, #0
 80135a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135ae:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	2200      	movs	r2, #0
 80135b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	220f      	movs	r2, #15
 80135be:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	699a      	ldr	r2, [r3, #24]
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	f042 0208 	orr.w	r2, r2, #8
 80135ce:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	2220      	movs	r2, #32
 80135d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	2200      	movs	r2, #0
 80135da:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80135dc:	68f8      	ldr	r0, [r7, #12]
 80135de:	f7ff fb47 	bl	8012c70 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80135e2:	bf00      	nop
 80135e4:	3710      	adds	r7, #16
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd80      	pop	{r7, pc}

080135ea <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80135ea:	b480      	push	{r7}
 80135ec:	b083      	sub	sp, #12
 80135ee:	af00      	add	r7, sp, #0
 80135f0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80135f6:	2b21      	cmp	r3, #33	; 0x21
 80135f8:	d12a      	bne.n	8013650 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8013600:	b29b      	uxth	r3, r3
 8013602:	2b00      	cmp	r3, #0
 8013604:	d110      	bne.n	8013628 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	681a      	ldr	r2, [r3, #0]
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013614:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	681a      	ldr	r2, [r3, #0]
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013624:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8013626:	e013      	b.n	8013650 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801362c:	781a      	ldrb	r2, [r3, #0]
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013638:	1c5a      	adds	r2, r3, #1
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8013644:	b29b      	uxth	r3, r3
 8013646:	3b01      	subs	r3, #1
 8013648:	b29a      	uxth	r2, r3
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8013650:	bf00      	nop
 8013652:	370c      	adds	r7, #12
 8013654:	46bd      	mov	sp, r7
 8013656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365a:	4770      	bx	lr

0801365c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 801365c:	b480      	push	{r7}
 801365e:	b085      	sub	sp, #20
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013668:	2b21      	cmp	r3, #33	; 0x21
 801366a:	d12f      	bne.n	80136cc <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8013672:	b29b      	uxth	r3, r3
 8013674:	2b00      	cmp	r3, #0
 8013676:	d110      	bne.n	801369a <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	681a      	ldr	r2, [r3, #0]
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013686:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	681a      	ldr	r2, [r3, #0]
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013696:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8013698:	e018      	b.n	80136cc <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801369e:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	881b      	ldrh	r3, [r3, #0]
 80136a4:	461a      	mov	r2, r3
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80136ae:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80136b4:	1c9a      	adds	r2, r3, #2
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80136c0:	b29b      	uxth	r3, r3
 80136c2:	3b01      	subs	r3, #1
 80136c4:	b29a      	uxth	r2, r3
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80136cc:	bf00      	nop
 80136ce:	3714      	adds	r7, #20
 80136d0:	46bd      	mov	sp, r7
 80136d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d6:	4770      	bx	lr

080136d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80136d8:	b580      	push	{r7, lr}
 80136da:	b082      	sub	sp, #8
 80136dc:	af00      	add	r7, sp, #0
 80136de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	681a      	ldr	r2, [r3, #0]
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80136ee:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	2220      	movs	r2, #32
 80136f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	2200      	movs	r2, #0
 80136fa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80136fc:	6878      	ldr	r0, [r7, #4]
 80136fe:	f7f4 faef 	bl	8007ce0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013702:	bf00      	nop
 8013704:	3708      	adds	r7, #8
 8013706:	46bd      	mov	sp, r7
 8013708:	bd80      	pop	{r7, pc}

0801370a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801370a:	b580      	push	{r7, lr}
 801370c:	b084      	sub	sp, #16
 801370e:	af00      	add	r7, sp, #0
 8013710:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013718:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801371e:	2b22      	cmp	r3, #34	; 0x22
 8013720:	d151      	bne.n	80137c6 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013728:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801372a:	89bb      	ldrh	r3, [r7, #12]
 801372c:	b2d9      	uxtb	r1, r3
 801372e:	89fb      	ldrh	r3, [r7, #14]
 8013730:	b2da      	uxtb	r2, r3
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013736:	400a      	ands	r2, r1
 8013738:	b2d2      	uxtb	r2, r2
 801373a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013740:	1c5a      	adds	r2, r3, #1
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801374c:	b29b      	uxth	r3, r3
 801374e:	3b01      	subs	r3, #1
 8013750:	b29a      	uxth	r2, r3
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801375e:	b29b      	uxth	r3, r3
 8013760:	2b00      	cmp	r3, #0
 8013762:	d138      	bne.n	80137d6 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	681a      	ldr	r2, [r3, #0]
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8013772:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	689a      	ldr	r2, [r3, #8]
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	f022 0201 	bic.w	r2, r2, #1
 8013782:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2220      	movs	r2, #32
 8013788:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	2200      	movs	r2, #0
 801378e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013794:	2b01      	cmp	r3, #1
 8013796:	d10f      	bne.n	80137b8 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	681a      	ldr	r2, [r3, #0]
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	f022 0210 	bic.w	r2, r2, #16
 80137a6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80137ae:	4619      	mov	r1, r3
 80137b0:	6878      	ldr	r0, [r7, #4]
 80137b2:	f7ff fa67 	bl	8012c84 <HAL_UARTEx_RxEventCallback>
 80137b6:	e002      	b.n	80137be <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f7ff fa45 	bl	8012c48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	2200      	movs	r2, #0
 80137c2:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80137c4:	e007      	b.n	80137d6 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	699a      	ldr	r2, [r3, #24]
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	f042 0208 	orr.w	r2, r2, #8
 80137d4:	619a      	str	r2, [r3, #24]
}
 80137d6:	bf00      	nop
 80137d8:	3710      	adds	r7, #16
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}

080137de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80137de:	b580      	push	{r7, lr}
 80137e0:	b084      	sub	sp, #16
 80137e2:	af00      	add	r7, sp, #0
 80137e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80137ec:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80137f2:	2b22      	cmp	r3, #34	; 0x22
 80137f4:	d151      	bne.n	801389a <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137fc:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013802:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8013804:	89ba      	ldrh	r2, [r7, #12]
 8013806:	89fb      	ldrh	r3, [r7, #14]
 8013808:	4013      	ands	r3, r2
 801380a:	b29a      	uxth	r2, r3
 801380c:	68bb      	ldr	r3, [r7, #8]
 801380e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013814:	1c9a      	adds	r2, r3, #2
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8013820:	b29b      	uxth	r3, r3
 8013822:	3b01      	subs	r3, #1
 8013824:	b29a      	uxth	r2, r3
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8013832:	b29b      	uxth	r3, r3
 8013834:	2b00      	cmp	r3, #0
 8013836:	d138      	bne.n	80138aa <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	681a      	ldr	r2, [r3, #0]
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8013846:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	689a      	ldr	r2, [r3, #8]
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	f022 0201 	bic.w	r2, r2, #1
 8013856:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	2220      	movs	r2, #32
 801385c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	2200      	movs	r2, #0
 8013862:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013868:	2b01      	cmp	r3, #1
 801386a:	d10f      	bne.n	801388c <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	681a      	ldr	r2, [r3, #0]
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	f022 0210 	bic.w	r2, r2, #16
 801387a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8013882:	4619      	mov	r1, r3
 8013884:	6878      	ldr	r0, [r7, #4]
 8013886:	f7ff f9fd 	bl	8012c84 <HAL_UARTEx_RxEventCallback>
 801388a:	e002      	b.n	8013892 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	f7ff f9db 	bl	8012c48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	2200      	movs	r2, #0
 8013896:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013898:	e007      	b.n	80138aa <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	699a      	ldr	r2, [r3, #24]
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	f042 0208 	orr.w	r2, r2, #8
 80138a8:	619a      	str	r2, [r3, #24]
}
 80138aa:	bf00      	nop
 80138ac:	3710      	adds	r7, #16
 80138ae:	46bd      	mov	sp, r7
 80138b0:	bd80      	pop	{r7, pc}
	...

080138b4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80138b4:	b084      	sub	sp, #16
 80138b6:	b480      	push	{r7}
 80138b8:	b085      	sub	sp, #20
 80138ba:	af00      	add	r7, sp, #0
 80138bc:	6078      	str	r0, [r7, #4]
 80138be:	f107 001c 	add.w	r0, r7, #28
 80138c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80138c6:	2300      	movs	r3, #0
 80138c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80138ca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80138cc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80138ce:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80138d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80138d2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80138d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80138d6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80138d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80138da:	431a      	orrs	r2, r3
             Init.ClockDiv
 80138dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80138de:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80138e0:	68fa      	ldr	r2, [r7, #12]
 80138e2:	4313      	orrs	r3, r2
 80138e4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	685a      	ldr	r2, [r3, #4]
 80138ea:	4b07      	ldr	r3, [pc, #28]	; (8013908 <SDMMC_Init+0x54>)
 80138ec:	4013      	ands	r3, r2
 80138ee:	68fa      	ldr	r2, [r7, #12]
 80138f0:	431a      	orrs	r2, r3
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80138f6:	2300      	movs	r3, #0
}
 80138f8:	4618      	mov	r0, r3
 80138fa:	3714      	adds	r7, #20
 80138fc:	46bd      	mov	sp, r7
 80138fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013902:	b004      	add	sp, #16
 8013904:	4770      	bx	lr
 8013906:	bf00      	nop
 8013908:	ffff8100 	.word	0xffff8100

0801390c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 801390c:	b480      	push	{r7}
 801390e:	b083      	sub	sp, #12
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801391a:	4618      	mov	r0, r3
 801391c:	370c      	adds	r7, #12
 801391e:	46bd      	mov	sp, r7
 8013920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013924:	4770      	bx	lr

08013926 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8013926:	b480      	push	{r7}
 8013928:	b083      	sub	sp, #12
 801392a:	af00      	add	r7, sp, #0
 801392c:	6078      	str	r0, [r7, #4]
 801392e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8013930:	683b      	ldr	r3, [r7, #0]
 8013932:	681a      	ldr	r2, [r3, #0]
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801393a:	2300      	movs	r3, #0
}
 801393c:	4618      	mov	r0, r3
 801393e:	370c      	adds	r7, #12
 8013940:	46bd      	mov	sp, r7
 8013942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013946:	4770      	bx	lr

08013948 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8013948:	b580      	push	{r7, lr}
 801394a:	b082      	sub	sp, #8
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	2203      	movs	r2, #3
 8013954:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8013956:	2002      	movs	r0, #2
 8013958:	f7f5 fc22 	bl	80091a0 <HAL_Delay>
  
  return HAL_OK;
 801395c:	2300      	movs	r3, #0
}
 801395e:	4618      	mov	r0, r3
 8013960:	3708      	adds	r7, #8
 8013962:	46bd      	mov	sp, r7
 8013964:	bd80      	pop	{r7, pc}

08013966 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8013966:	b480      	push	{r7}
 8013968:	b083      	sub	sp, #12
 801396a:	af00      	add	r7, sp, #0
 801396c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	f003 0303 	and.w	r3, r3, #3
}
 8013976:	4618      	mov	r0, r3
 8013978:	370c      	adds	r7, #12
 801397a:	46bd      	mov	sp, r7
 801397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013980:	4770      	bx	lr
	...

08013984 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8013984:	b480      	push	{r7}
 8013986:	b085      	sub	sp, #20
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
 801398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801398e:	2300      	movs	r3, #0
 8013990:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8013992:	683b      	ldr	r3, [r7, #0]
 8013994:	681a      	ldr	r2, [r3, #0]
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801399a:	683b      	ldr	r3, [r7, #0]
 801399c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80139a2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80139a8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80139ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80139b0:	68fa      	ldr	r2, [r7, #12]
 80139b2:	4313      	orrs	r3, r2
 80139b4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	68da      	ldr	r2, [r3, #12]
 80139ba:	4b06      	ldr	r3, [pc, #24]	; (80139d4 <SDMMC_SendCommand+0x50>)
 80139bc:	4013      	ands	r3, r2
 80139be:	68fa      	ldr	r2, [r7, #12]
 80139c0:	431a      	orrs	r2, r3
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80139c6:	2300      	movs	r3, #0
}
 80139c8:	4618      	mov	r0, r3
 80139ca:	3714      	adds	r7, #20
 80139cc:	46bd      	mov	sp, r7
 80139ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d2:	4770      	bx	lr
 80139d4:	fffff000 	.word	0xfffff000

080139d8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80139d8:	b480      	push	{r7}
 80139da:	b083      	sub	sp, #12
 80139dc:	af00      	add	r7, sp, #0
 80139de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	691b      	ldr	r3, [r3, #16]
 80139e4:	b2db      	uxtb	r3, r3
}
 80139e6:	4618      	mov	r0, r3
 80139e8:	370c      	adds	r7, #12
 80139ea:	46bd      	mov	sp, r7
 80139ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f0:	4770      	bx	lr

080139f2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80139f2:	b480      	push	{r7}
 80139f4:	b085      	sub	sp, #20
 80139f6:	af00      	add	r7, sp, #0
 80139f8:	6078      	str	r0, [r7, #4]
 80139fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	3314      	adds	r3, #20
 8013a00:	461a      	mov	r2, r3
 8013a02:	683b      	ldr	r3, [r7, #0]
 8013a04:	4413      	add	r3, r2
 8013a06:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	681b      	ldr	r3, [r3, #0]
}  
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	3714      	adds	r7, #20
 8013a10:	46bd      	mov	sp, r7
 8013a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a16:	4770      	bx	lr

08013a18 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8013a18:	b480      	push	{r7}
 8013a1a:	b085      	sub	sp, #20
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
 8013a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013a22:	2300      	movs	r3, #0
 8013a24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8013a26:	683b      	ldr	r3, [r7, #0]
 8013a28:	681a      	ldr	r2, [r3, #0]
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8013a2e:	683b      	ldr	r3, [r7, #0]
 8013a30:	685a      	ldr	r2, [r3, #4]
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8013a36:	683b      	ldr	r3, [r7, #0]
 8013a38:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8013a3a:	683b      	ldr	r3, [r7, #0]
 8013a3c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8013a3e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8013a40:	683b      	ldr	r3, [r7, #0]
 8013a42:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8013a44:	431a      	orrs	r2, r3
                       Data->DPSM);
 8013a46:	683b      	ldr	r3, [r7, #0]
 8013a48:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8013a4a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8013a4c:	68fa      	ldr	r2, [r7, #12]
 8013a4e:	4313      	orrs	r3, r2
 8013a50:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a56:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	431a      	orrs	r2, r3
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8013a62:	2300      	movs	r3, #0

}
 8013a64:	4618      	mov	r0, r3
 8013a66:	3714      	adds	r7, #20
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6e:	4770      	bx	lr

08013a70 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b088      	sub	sp, #32
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
 8013a78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8013a7a:	683b      	ldr	r3, [r7, #0]
 8013a7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8013a7e:	2310      	movs	r3, #16
 8013a80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013a82:	2340      	movs	r3, #64	; 0x40
 8013a84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013a86:	2300      	movs	r3, #0
 8013a88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013a8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013a90:	f107 0308 	add.w	r3, r7, #8
 8013a94:	4619      	mov	r1, r3
 8013a96:	6878      	ldr	r0, [r7, #4]
 8013a98:	f7ff ff74 	bl	8013984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8013a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013aa0:	2110      	movs	r1, #16
 8013aa2:	6878      	ldr	r0, [r7, #4]
 8013aa4:	f000 fa46 	bl	8013f34 <SDMMC_GetCmdResp1>
 8013aa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013aaa:	69fb      	ldr	r3, [r7, #28]
}
 8013aac:	4618      	mov	r0, r3
 8013aae:	3720      	adds	r7, #32
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	bd80      	pop	{r7, pc}

08013ab4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b088      	sub	sp, #32
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
 8013abc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8013ac2:	2311      	movs	r3, #17
 8013ac4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013ac6:	2340      	movs	r3, #64	; 0x40
 8013ac8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013aca:	2300      	movs	r3, #0
 8013acc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013ad2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013ad4:	f107 0308 	add.w	r3, r7, #8
 8013ad8:	4619      	mov	r1, r3
 8013ada:	6878      	ldr	r0, [r7, #4]
 8013adc:	f7ff ff52 	bl	8013984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ae4:	2111      	movs	r1, #17
 8013ae6:	6878      	ldr	r0, [r7, #4]
 8013ae8:	f000 fa24 	bl	8013f34 <SDMMC_GetCmdResp1>
 8013aec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013aee:	69fb      	ldr	r3, [r7, #28]
}
 8013af0:	4618      	mov	r0, r3
 8013af2:	3720      	adds	r7, #32
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}

08013af8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b088      	sub	sp, #32
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
 8013b00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013b02:	683b      	ldr	r3, [r7, #0]
 8013b04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8013b06:	2312      	movs	r3, #18
 8013b08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013b0a:	2340      	movs	r3, #64	; 0x40
 8013b0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013b0e:	2300      	movs	r3, #0
 8013b10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013b18:	f107 0308 	add.w	r3, r7, #8
 8013b1c:	4619      	mov	r1, r3
 8013b1e:	6878      	ldr	r0, [r7, #4]
 8013b20:	f7ff ff30 	bl	8013984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8013b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8013b28:	2112      	movs	r1, #18
 8013b2a:	6878      	ldr	r0, [r7, #4]
 8013b2c:	f000 fa02 	bl	8013f34 <SDMMC_GetCmdResp1>
 8013b30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013b32:	69fb      	ldr	r3, [r7, #28]
}
 8013b34:	4618      	mov	r0, r3
 8013b36:	3720      	adds	r7, #32
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bd80      	pop	{r7, pc}

08013b3c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b088      	sub	sp, #32
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
 8013b44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013b46:	683b      	ldr	r3, [r7, #0]
 8013b48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8013b4a:	2318      	movs	r3, #24
 8013b4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013b4e:	2340      	movs	r3, #64	; 0x40
 8013b50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013b52:	2300      	movs	r3, #0
 8013b54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013b5c:	f107 0308 	add.w	r3, r7, #8
 8013b60:	4619      	mov	r1, r3
 8013b62:	6878      	ldr	r0, [r7, #4]
 8013b64:	f7ff ff0e 	bl	8013984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8013b6c:	2118      	movs	r1, #24
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f000 f9e0 	bl	8013f34 <SDMMC_GetCmdResp1>
 8013b74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013b76:	69fb      	ldr	r3, [r7, #28]
}
 8013b78:	4618      	mov	r0, r3
 8013b7a:	3720      	adds	r7, #32
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	bd80      	pop	{r7, pc}

08013b80 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b088      	sub	sp, #32
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	6078      	str	r0, [r7, #4]
 8013b88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013b8a:	683b      	ldr	r3, [r7, #0]
 8013b8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8013b8e:	2319      	movs	r3, #25
 8013b90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013b92:	2340      	movs	r3, #64	; 0x40
 8013b94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013b96:	2300      	movs	r3, #0
 8013b98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013ba0:	f107 0308 	add.w	r3, r7, #8
 8013ba4:	4619      	mov	r1, r3
 8013ba6:	6878      	ldr	r0, [r7, #4]
 8013ba8:	f7ff feec 	bl	8013984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8013bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8013bb0:	2119      	movs	r1, #25
 8013bb2:	6878      	ldr	r0, [r7, #4]
 8013bb4:	f000 f9be 	bl	8013f34 <SDMMC_GetCmdResp1>
 8013bb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013bba:	69fb      	ldr	r3, [r7, #28]
}
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	3720      	adds	r7, #32
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}

08013bc4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b088      	sub	sp, #32
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8013bcc:	2300      	movs	r3, #0
 8013bce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8013bd0:	230c      	movs	r3, #12
 8013bd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013bd4:	2340      	movs	r3, #64	; 0x40
 8013bd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013bd8:	2300      	movs	r3, #0
 8013bda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013be0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013be2:	f107 0308 	add.w	r3, r7, #8
 8013be6:	4619      	mov	r1, r3
 8013be8:	6878      	ldr	r0, [r7, #4]
 8013bea:	f7ff fecb 	bl	8013984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8013bee:	4a05      	ldr	r2, [pc, #20]	; (8013c04 <SDMMC_CmdStopTransfer+0x40>)
 8013bf0:	210c      	movs	r1, #12
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f000 f99e 	bl	8013f34 <SDMMC_GetCmdResp1>
 8013bf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013bfa:	69fb      	ldr	r3, [r7, #28]
}
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	3720      	adds	r7, #32
 8013c00:	46bd      	mov	sp, r7
 8013c02:	bd80      	pop	{r7, pc}
 8013c04:	05f5e100 	.word	0x05f5e100

08013c08 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b08a      	sub	sp, #40	; 0x28
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	60f8      	str	r0, [r7, #12]
 8013c10:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8013c14:	683b      	ldr	r3, [r7, #0]
 8013c16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8013c18:	2307      	movs	r3, #7
 8013c1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013c1c:	2340      	movs	r3, #64	; 0x40
 8013c1e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013c20:	2300      	movs	r3, #0
 8013c22:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013c28:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013c2a:	f107 0310 	add.w	r3, r7, #16
 8013c2e:	4619      	mov	r1, r3
 8013c30:	68f8      	ldr	r0, [r7, #12]
 8013c32:	f7ff fea7 	bl	8013984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8013c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8013c3a:	2107      	movs	r1, #7
 8013c3c:	68f8      	ldr	r0, [r7, #12]
 8013c3e:	f000 f979 	bl	8013f34 <SDMMC_GetCmdResp1>
 8013c42:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8013c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013c46:	4618      	mov	r0, r3
 8013c48:	3728      	adds	r7, #40	; 0x28
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}

08013c4e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8013c4e:	b580      	push	{r7, lr}
 8013c50:	b088      	sub	sp, #32
 8013c52:	af00      	add	r7, sp, #0
 8013c54:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8013c56:	2300      	movs	r3, #0
 8013c58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8013c5e:	2300      	movs	r3, #0
 8013c60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013c62:	2300      	movs	r3, #0
 8013c64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013c6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013c6c:	f107 0308 	add.w	r3, r7, #8
 8013c70:	4619      	mov	r1, r3
 8013c72:	6878      	ldr	r0, [r7, #4]
 8013c74:	f7ff fe86 	bl	8013984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8013c78:	6878      	ldr	r0, [r7, #4]
 8013c7a:	f000 f92f 	bl	8013edc <SDMMC_GetCmdError>
 8013c7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013c80:	69fb      	ldr	r3, [r7, #28]
}
 8013c82:	4618      	mov	r0, r3
 8013c84:	3720      	adds	r7, #32
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bd80      	pop	{r7, pc}

08013c8a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8013c8a:	b580      	push	{r7, lr}
 8013c8c:	b088      	sub	sp, #32
 8013c8e:	af00      	add	r7, sp, #0
 8013c90:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8013c92:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8013c96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8013c98:	2308      	movs	r3, #8
 8013c9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013c9c:	2340      	movs	r3, #64	; 0x40
 8013c9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013ca8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013caa:	f107 0308 	add.w	r3, r7, #8
 8013cae:	4619      	mov	r1, r3
 8013cb0:	6878      	ldr	r0, [r7, #4]
 8013cb2:	f7ff fe67 	bl	8013984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f000 fb26 	bl	8014308 <SDMMC_GetCmdResp7>
 8013cbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013cbe:	69fb      	ldr	r3, [r7, #28]
}
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	3720      	adds	r7, #32
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	bd80      	pop	{r7, pc}

08013cc8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b088      	sub	sp, #32
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
 8013cd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8013cd2:	683b      	ldr	r3, [r7, #0]
 8013cd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8013cd6:	2337      	movs	r3, #55	; 0x37
 8013cd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013cda:	2340      	movs	r3, #64	; 0x40
 8013cdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013cde:	2300      	movs	r3, #0
 8013ce0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013ce6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013ce8:	f107 0308 	add.w	r3, r7, #8
 8013cec:	4619      	mov	r1, r3
 8013cee:	6878      	ldr	r0, [r7, #4]
 8013cf0:	f7ff fe48 	bl	8013984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8013cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8013cf8:	2137      	movs	r1, #55	; 0x37
 8013cfa:	6878      	ldr	r0, [r7, #4]
 8013cfc:	f000 f91a 	bl	8013f34 <SDMMC_GetCmdResp1>
 8013d00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013d02:	69fb      	ldr	r3, [r7, #28]
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3720      	adds	r7, #32
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}

08013d0c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b088      	sub	sp, #32
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
 8013d14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8013d16:	683a      	ldr	r2, [r7, #0]
 8013d18:	4b0d      	ldr	r3, [pc, #52]	; (8013d50 <SDMMC_CmdAppOperCommand+0x44>)
 8013d1a:	4313      	orrs	r3, r2
 8013d1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8013d1e:	2329      	movs	r3, #41	; 0x29
 8013d20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013d22:	2340      	movs	r3, #64	; 0x40
 8013d24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013d26:	2300      	movs	r3, #0
 8013d28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013d30:	f107 0308 	add.w	r3, r7, #8
 8013d34:	4619      	mov	r1, r3
 8013d36:	6878      	ldr	r0, [r7, #4]
 8013d38:	f7ff fe24 	bl	8013984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8013d3c:	6878      	ldr	r0, [r7, #4]
 8013d3e:	f000 fa2f 	bl	80141a0 <SDMMC_GetCmdResp3>
 8013d42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013d44:	69fb      	ldr	r3, [r7, #28]
}
 8013d46:	4618      	mov	r0, r3
 8013d48:	3720      	adds	r7, #32
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	bd80      	pop	{r7, pc}
 8013d4e:	bf00      	nop
 8013d50:	80100000 	.word	0x80100000

08013d54 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b088      	sub	sp, #32
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
 8013d5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8013d62:	2306      	movs	r3, #6
 8013d64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013d66:	2340      	movs	r3, #64	; 0x40
 8013d68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013d74:	f107 0308 	add.w	r3, r7, #8
 8013d78:	4619      	mov	r1, r3
 8013d7a:	6878      	ldr	r0, [r7, #4]
 8013d7c:	f7ff fe02 	bl	8013984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8013d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8013d84:	2106      	movs	r1, #6
 8013d86:	6878      	ldr	r0, [r7, #4]
 8013d88:	f000 f8d4 	bl	8013f34 <SDMMC_GetCmdResp1>
 8013d8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013d8e:	69fb      	ldr	r3, [r7, #28]
}
 8013d90:	4618      	mov	r0, r3
 8013d92:	3720      	adds	r7, #32
 8013d94:	46bd      	mov	sp, r7
 8013d96:	bd80      	pop	{r7, pc}

08013d98 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b088      	sub	sp, #32
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8013da0:	2300      	movs	r3, #0
 8013da2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8013da4:	2333      	movs	r3, #51	; 0x33
 8013da6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013da8:	2340      	movs	r3, #64	; 0x40
 8013daa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013dac:	2300      	movs	r3, #0
 8013dae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013db4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013db6:	f107 0308 	add.w	r3, r7, #8
 8013dba:	4619      	mov	r1, r3
 8013dbc:	6878      	ldr	r0, [r7, #4]
 8013dbe:	f7ff fde1 	bl	8013984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8013dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8013dc6:	2133      	movs	r1, #51	; 0x33
 8013dc8:	6878      	ldr	r0, [r7, #4]
 8013dca:	f000 f8b3 	bl	8013f34 <SDMMC_GetCmdResp1>
 8013dce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013dd0:	69fb      	ldr	r3, [r7, #28]
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3720      	adds	r7, #32
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}

08013dda <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8013dda:	b580      	push	{r7, lr}
 8013ddc:	b088      	sub	sp, #32
 8013dde:	af00      	add	r7, sp, #0
 8013de0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8013de2:	2300      	movs	r3, #0
 8013de4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8013de6:	2302      	movs	r3, #2
 8013de8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013dea:	23c0      	movs	r3, #192	; 0xc0
 8013dec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013dee:	2300      	movs	r3, #0
 8013df0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013df6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013df8:	f107 0308 	add.w	r3, r7, #8
 8013dfc:	4619      	mov	r1, r3
 8013dfe:	6878      	ldr	r0, [r7, #4]
 8013e00:	f7ff fdc0 	bl	8013984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013e04:	6878      	ldr	r0, [r7, #4]
 8013e06:	f000 f983 	bl	8014110 <SDMMC_GetCmdResp2>
 8013e0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013e0c:	69fb      	ldr	r3, [r7, #28]
}
 8013e0e:	4618      	mov	r0, r3
 8013e10:	3720      	adds	r7, #32
 8013e12:	46bd      	mov	sp, r7
 8013e14:	bd80      	pop	{r7, pc}

08013e16 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013e16:	b580      	push	{r7, lr}
 8013e18:	b088      	sub	sp, #32
 8013e1a:	af00      	add	r7, sp, #0
 8013e1c:	6078      	str	r0, [r7, #4]
 8013e1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8013e24:	2309      	movs	r3, #9
 8013e26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013e28:	23c0      	movs	r3, #192	; 0xc0
 8013e2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013e34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013e36:	f107 0308 	add.w	r3, r7, #8
 8013e3a:	4619      	mov	r1, r3
 8013e3c:	6878      	ldr	r0, [r7, #4]
 8013e3e:	f7ff fda1 	bl	8013984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013e42:	6878      	ldr	r0, [r7, #4]
 8013e44:	f000 f964 	bl	8014110 <SDMMC_GetCmdResp2>
 8013e48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013e4a:	69fb      	ldr	r3, [r7, #28]
}
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	3720      	adds	r7, #32
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}

08013e54 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b088      	sub	sp, #32
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
 8013e5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8013e5e:	2300      	movs	r3, #0
 8013e60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8013e62:	2303      	movs	r3, #3
 8013e64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013e66:	2340      	movs	r3, #64	; 0x40
 8013e68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013e72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013e74:	f107 0308 	add.w	r3, r7, #8
 8013e78:	4619      	mov	r1, r3
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	f7ff fd82 	bl	8013984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8013e80:	683a      	ldr	r2, [r7, #0]
 8013e82:	2103      	movs	r1, #3
 8013e84:	6878      	ldr	r0, [r7, #4]
 8013e86:	f000 f9c9 	bl	801421c <SDMMC_GetCmdResp6>
 8013e8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013e8c:	69fb      	ldr	r3, [r7, #28]
}
 8013e8e:	4618      	mov	r0, r3
 8013e90:	3720      	adds	r7, #32
 8013e92:	46bd      	mov	sp, r7
 8013e94:	bd80      	pop	{r7, pc}

08013e96 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013e96:	b580      	push	{r7, lr}
 8013e98:	b088      	sub	sp, #32
 8013e9a:	af00      	add	r7, sp, #0
 8013e9c:	6078      	str	r0, [r7, #4]
 8013e9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8013ea0:	683b      	ldr	r3, [r7, #0]
 8013ea2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8013ea4:	230d      	movs	r3, #13
 8013ea6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013ea8:	2340      	movs	r3, #64	; 0x40
 8013eaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013eac:	2300      	movs	r3, #0
 8013eae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013eb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013eb6:	f107 0308 	add.w	r3, r7, #8
 8013eba:	4619      	mov	r1, r3
 8013ebc:	6878      	ldr	r0, [r7, #4]
 8013ebe:	f7ff fd61 	bl	8013984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8013ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ec6:	210d      	movs	r1, #13
 8013ec8:	6878      	ldr	r0, [r7, #4]
 8013eca:	f000 f833 	bl	8013f34 <SDMMC_GetCmdResp1>
 8013ece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013ed0:	69fb      	ldr	r3, [r7, #28]
}
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	3720      	adds	r7, #32
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	bd80      	pop	{r7, pc}
	...

08013edc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013edc:	b480      	push	{r7}
 8013ede:	b085      	sub	sp, #20
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013ee4:	4b11      	ldr	r3, [pc, #68]	; (8013f2c <SDMMC_GetCmdError+0x50>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	4a11      	ldr	r2, [pc, #68]	; (8013f30 <SDMMC_GetCmdError+0x54>)
 8013eea:	fba2 2303 	umull	r2, r3, r2, r3
 8013eee:	0a5b      	lsrs	r3, r3, #9
 8013ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ef4:	fb02 f303 	mul.w	r3, r2, r3
 8013ef8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	1e5a      	subs	r2, r3, #1
 8013efe:	60fa      	str	r2, [r7, #12]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d102      	bne.n	8013f0a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013f04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013f08:	e009      	b.n	8013f1e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d0f1      	beq.n	8013efa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	22c5      	movs	r2, #197	; 0xc5
 8013f1a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8013f1c:	2300      	movs	r3, #0
}
 8013f1e:	4618      	mov	r0, r3
 8013f20:	3714      	adds	r7, #20
 8013f22:	46bd      	mov	sp, r7
 8013f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f28:	4770      	bx	lr
 8013f2a:	bf00      	nop
 8013f2c:	20000230 	.word	0x20000230
 8013f30:	10624dd3 	.word	0x10624dd3

08013f34 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b088      	sub	sp, #32
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	60f8      	str	r0, [r7, #12]
 8013f3c:	460b      	mov	r3, r1
 8013f3e:	607a      	str	r2, [r7, #4]
 8013f40:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013f42:	4b70      	ldr	r3, [pc, #448]	; (8014104 <SDMMC_GetCmdResp1+0x1d0>)
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	4a70      	ldr	r2, [pc, #448]	; (8014108 <SDMMC_GetCmdResp1+0x1d4>)
 8013f48:	fba2 2303 	umull	r2, r3, r2, r3
 8013f4c:	0a5a      	lsrs	r2, r3, #9
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	fb02 f303 	mul.w	r3, r2, r3
 8013f54:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8013f56:	69fb      	ldr	r3, [r7, #28]
 8013f58:	1e5a      	subs	r2, r3, #1
 8013f5a:	61fa      	str	r2, [r7, #28]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d102      	bne.n	8013f66 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013f60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013f64:	e0c9      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f6a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013f6c:	69bb      	ldr	r3, [r7, #24]
 8013f6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d0ef      	beq.n	8013f56 <SDMMC_GetCmdResp1+0x22>
 8013f76:	69bb      	ldr	r3, [r7, #24]
 8013f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d1ea      	bne.n	8013f56 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f84:	f003 0304 	and.w	r3, r3, #4
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d004      	beq.n	8013f96 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	2204      	movs	r2, #4
 8013f90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013f92:	2304      	movs	r3, #4
 8013f94:	e0b1      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f9a:	f003 0301 	and.w	r3, r3, #1
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d004      	beq.n	8013fac <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	2201      	movs	r2, #1
 8013fa6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013fa8:	2301      	movs	r3, #1
 8013faa:	e0a6      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	22c5      	movs	r2, #197	; 0xc5
 8013fb0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013fb2:	68f8      	ldr	r0, [r7, #12]
 8013fb4:	f7ff fd10 	bl	80139d8 <SDMMC_GetCommandResponse>
 8013fb8:	4603      	mov	r3, r0
 8013fba:	461a      	mov	r2, r3
 8013fbc:	7afb      	ldrb	r3, [r7, #11]
 8013fbe:	4293      	cmp	r3, r2
 8013fc0:	d001      	beq.n	8013fc6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013fc2:	2301      	movs	r3, #1
 8013fc4:	e099      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013fc6:	2100      	movs	r1, #0
 8013fc8:	68f8      	ldr	r0, [r7, #12]
 8013fca:	f7ff fd12 	bl	80139f2 <SDMMC_GetResponse>
 8013fce:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013fd0:	697a      	ldr	r2, [r7, #20]
 8013fd2:	4b4e      	ldr	r3, [pc, #312]	; (801410c <SDMMC_GetCmdResp1+0x1d8>)
 8013fd4:	4013      	ands	r3, r2
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d101      	bne.n	8013fde <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8013fda:	2300      	movs	r3, #0
 8013fdc:	e08d      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013fde:	697b      	ldr	r3, [r7, #20]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	da02      	bge.n	8013fea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013fe4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013fe8:	e087      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013fea:	697b      	ldr	r3, [r7, #20]
 8013fec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d001      	beq.n	8013ff8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013ff4:	2340      	movs	r3, #64	; 0x40
 8013ff6:	e080      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013ff8:	697b      	ldr	r3, [r7, #20]
 8013ffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d001      	beq.n	8014006 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8014002:	2380      	movs	r3, #128	; 0x80
 8014004:	e079      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8014006:	697b      	ldr	r3, [r7, #20]
 8014008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801400c:	2b00      	cmp	r3, #0
 801400e:	d002      	beq.n	8014016 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8014010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014014:	e071      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8014016:	697b      	ldr	r3, [r7, #20]
 8014018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801401c:	2b00      	cmp	r3, #0
 801401e:	d002      	beq.n	8014026 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014024:	e069      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8014026:	697b      	ldr	r3, [r7, #20]
 8014028:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801402c:	2b00      	cmp	r3, #0
 801402e:	d002      	beq.n	8014036 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8014030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014034:	e061      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8014036:	697b      	ldr	r3, [r7, #20]
 8014038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801403c:	2b00      	cmp	r3, #0
 801403e:	d002      	beq.n	8014046 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8014040:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014044:	e059      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801404c:	2b00      	cmp	r3, #0
 801404e:	d002      	beq.n	8014056 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014054:	e051      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8014056:	697b      	ldr	r3, [r7, #20]
 8014058:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801405c:	2b00      	cmp	r3, #0
 801405e:	d002      	beq.n	8014066 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014064:	e049      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801406c:	2b00      	cmp	r3, #0
 801406e:	d002      	beq.n	8014076 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8014070:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014074:	e041      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8014076:	697b      	ldr	r3, [r7, #20]
 8014078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801407c:	2b00      	cmp	r3, #0
 801407e:	d002      	beq.n	8014086 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8014080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014084:	e039      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8014086:	697b      	ldr	r3, [r7, #20]
 8014088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801408c:	2b00      	cmp	r3, #0
 801408e:	d002      	beq.n	8014096 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8014090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014094:	e031      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801409c:	2b00      	cmp	r3, #0
 801409e:	d002      	beq.n	80140a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80140a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80140a4:	e029      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80140a6:	697b      	ldr	r3, [r7, #20]
 80140a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d002      	beq.n	80140b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80140b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80140b4:	e021      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80140b6:	697b      	ldr	r3, [r7, #20]
 80140b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d002      	beq.n	80140c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80140c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80140c4:	e019      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80140c6:	697b      	ldr	r3, [r7, #20]
 80140c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d002      	beq.n	80140d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80140d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80140d4:	e011      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80140d6:	697b      	ldr	r3, [r7, #20]
 80140d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d002      	beq.n	80140e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80140e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80140e4:	e009      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	f003 0308 	and.w	r3, r3, #8
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d002      	beq.n	80140f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80140f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80140f4:	e001      	b.n	80140fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80140f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80140fa:	4618      	mov	r0, r3
 80140fc:	3720      	adds	r7, #32
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd80      	pop	{r7, pc}
 8014102:	bf00      	nop
 8014104:	20000230 	.word	0x20000230
 8014108:	10624dd3 	.word	0x10624dd3
 801410c:	fdffe008 	.word	0xfdffe008

08014110 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8014110:	b480      	push	{r7}
 8014112:	b085      	sub	sp, #20
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014118:	4b1f      	ldr	r3, [pc, #124]	; (8014198 <SDMMC_GetCmdResp2+0x88>)
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	4a1f      	ldr	r2, [pc, #124]	; (801419c <SDMMC_GetCmdResp2+0x8c>)
 801411e:	fba2 2303 	umull	r2, r3, r2, r3
 8014122:	0a5b      	lsrs	r3, r3, #9
 8014124:	f241 3288 	movw	r2, #5000	; 0x1388
 8014128:	fb02 f303 	mul.w	r3, r2, r3
 801412c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	1e5a      	subs	r2, r3, #1
 8014132:	60fa      	str	r2, [r7, #12]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d102      	bne.n	801413e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014138:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801413c:	e026      	b.n	801418c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014142:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801414a:	2b00      	cmp	r3, #0
 801414c:	d0ef      	beq.n	801412e <SDMMC_GetCmdResp2+0x1e>
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014154:	2b00      	cmp	r3, #0
 8014156:	d1ea      	bne.n	801412e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801415c:	f003 0304 	and.w	r3, r3, #4
 8014160:	2b00      	cmp	r3, #0
 8014162:	d004      	beq.n	801416e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2204      	movs	r2, #4
 8014168:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801416a:	2304      	movs	r3, #4
 801416c:	e00e      	b.n	801418c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014172:	f003 0301 	and.w	r3, r3, #1
 8014176:	2b00      	cmp	r3, #0
 8014178:	d004      	beq.n	8014184 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	2201      	movs	r2, #1
 801417e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014180:	2301      	movs	r3, #1
 8014182:	e003      	b.n	801418c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	22c5      	movs	r2, #197	; 0xc5
 8014188:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801418a:	2300      	movs	r3, #0
}
 801418c:	4618      	mov	r0, r3
 801418e:	3714      	adds	r7, #20
 8014190:	46bd      	mov	sp, r7
 8014192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014196:	4770      	bx	lr
 8014198:	20000230 	.word	0x20000230
 801419c:	10624dd3 	.word	0x10624dd3

080141a0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80141a0:	b480      	push	{r7}
 80141a2:	b085      	sub	sp, #20
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80141a8:	4b1a      	ldr	r3, [pc, #104]	; (8014214 <SDMMC_GetCmdResp3+0x74>)
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	4a1a      	ldr	r2, [pc, #104]	; (8014218 <SDMMC_GetCmdResp3+0x78>)
 80141ae:	fba2 2303 	umull	r2, r3, r2, r3
 80141b2:	0a5b      	lsrs	r3, r3, #9
 80141b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80141b8:	fb02 f303 	mul.w	r3, r2, r3
 80141bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	1e5a      	subs	r2, r3, #1
 80141c2:	60fa      	str	r2, [r7, #12]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d102      	bne.n	80141ce <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80141c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80141cc:	e01b      	b.n	8014206 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80141d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80141d4:	68bb      	ldr	r3, [r7, #8]
 80141d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d0ef      	beq.n	80141be <SDMMC_GetCmdResp3+0x1e>
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d1ea      	bne.n	80141be <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80141ec:	f003 0304 	and.w	r3, r3, #4
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d004      	beq.n	80141fe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	2204      	movs	r2, #4
 80141f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80141fa:	2304      	movs	r3, #4
 80141fc:	e003      	b.n	8014206 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	22c5      	movs	r2, #197	; 0xc5
 8014202:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8014204:	2300      	movs	r3, #0
}
 8014206:	4618      	mov	r0, r3
 8014208:	3714      	adds	r7, #20
 801420a:	46bd      	mov	sp, r7
 801420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014210:	4770      	bx	lr
 8014212:	bf00      	nop
 8014214:	20000230 	.word	0x20000230
 8014218:	10624dd3 	.word	0x10624dd3

0801421c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b088      	sub	sp, #32
 8014220:	af00      	add	r7, sp, #0
 8014222:	60f8      	str	r0, [r7, #12]
 8014224:	460b      	mov	r3, r1
 8014226:	607a      	str	r2, [r7, #4]
 8014228:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801422a:	4b35      	ldr	r3, [pc, #212]	; (8014300 <SDMMC_GetCmdResp6+0xe4>)
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	4a35      	ldr	r2, [pc, #212]	; (8014304 <SDMMC_GetCmdResp6+0xe8>)
 8014230:	fba2 2303 	umull	r2, r3, r2, r3
 8014234:	0a5b      	lsrs	r3, r3, #9
 8014236:	f241 3288 	movw	r2, #5000	; 0x1388
 801423a:	fb02 f303 	mul.w	r3, r2, r3
 801423e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8014240:	69fb      	ldr	r3, [r7, #28]
 8014242:	1e5a      	subs	r2, r3, #1
 8014244:	61fa      	str	r2, [r7, #28]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d102      	bne.n	8014250 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801424a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801424e:	e052      	b.n	80142f6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014254:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014256:	69bb      	ldr	r3, [r7, #24]
 8014258:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801425c:	2b00      	cmp	r3, #0
 801425e:	d0ef      	beq.n	8014240 <SDMMC_GetCmdResp6+0x24>
 8014260:	69bb      	ldr	r3, [r7, #24]
 8014262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014266:	2b00      	cmp	r3, #0
 8014268:	d1ea      	bne.n	8014240 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801426e:	f003 0304 	and.w	r3, r3, #4
 8014272:	2b00      	cmp	r3, #0
 8014274:	d004      	beq.n	8014280 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	2204      	movs	r2, #4
 801427a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801427c:	2304      	movs	r3, #4
 801427e:	e03a      	b.n	80142f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014284:	f003 0301 	and.w	r3, r3, #1
 8014288:	2b00      	cmp	r3, #0
 801428a:	d004      	beq.n	8014296 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	2201      	movs	r2, #1
 8014290:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014292:	2301      	movs	r3, #1
 8014294:	e02f      	b.n	80142f6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014296:	68f8      	ldr	r0, [r7, #12]
 8014298:	f7ff fb9e 	bl	80139d8 <SDMMC_GetCommandResponse>
 801429c:	4603      	mov	r3, r0
 801429e:	461a      	mov	r2, r3
 80142a0:	7afb      	ldrb	r3, [r7, #11]
 80142a2:	4293      	cmp	r3, r2
 80142a4:	d001      	beq.n	80142aa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80142a6:	2301      	movs	r3, #1
 80142a8:	e025      	b.n	80142f6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	22c5      	movs	r2, #197	; 0xc5
 80142ae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80142b0:	2100      	movs	r1, #0
 80142b2:	68f8      	ldr	r0, [r7, #12]
 80142b4:	f7ff fb9d 	bl	80139f2 <SDMMC_GetResponse>
 80142b8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80142ba:	697b      	ldr	r3, [r7, #20]
 80142bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d106      	bne.n	80142d2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80142c4:	697b      	ldr	r3, [r7, #20]
 80142c6:	0c1b      	lsrs	r3, r3, #16
 80142c8:	b29a      	uxth	r2, r3
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80142ce:	2300      	movs	r3, #0
 80142d0:	e011      	b.n	80142f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80142d2:	697b      	ldr	r3, [r7, #20]
 80142d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d002      	beq.n	80142e2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80142dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80142e0:	e009      	b.n	80142f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80142e2:	697b      	ldr	r3, [r7, #20]
 80142e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d002      	beq.n	80142f2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80142ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80142f0:	e001      	b.n	80142f6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80142f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80142f6:	4618      	mov	r0, r3
 80142f8:	3720      	adds	r7, #32
 80142fa:	46bd      	mov	sp, r7
 80142fc:	bd80      	pop	{r7, pc}
 80142fe:	bf00      	nop
 8014300:	20000230 	.word	0x20000230
 8014304:	10624dd3 	.word	0x10624dd3

08014308 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8014308:	b480      	push	{r7}
 801430a:	b085      	sub	sp, #20
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014310:	4b22      	ldr	r3, [pc, #136]	; (801439c <SDMMC_GetCmdResp7+0x94>)
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	4a22      	ldr	r2, [pc, #136]	; (80143a0 <SDMMC_GetCmdResp7+0x98>)
 8014316:	fba2 2303 	umull	r2, r3, r2, r3
 801431a:	0a5b      	lsrs	r3, r3, #9
 801431c:	f241 3288 	movw	r2, #5000	; 0x1388
 8014320:	fb02 f303 	mul.w	r3, r2, r3
 8014324:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	1e5a      	subs	r2, r3, #1
 801432a:	60fa      	str	r2, [r7, #12]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d102      	bne.n	8014336 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014330:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014334:	e02c      	b.n	8014390 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801433a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801433c:	68bb      	ldr	r3, [r7, #8]
 801433e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8014342:	2b00      	cmp	r3, #0
 8014344:	d0ef      	beq.n	8014326 <SDMMC_GetCmdResp7+0x1e>
 8014346:	68bb      	ldr	r3, [r7, #8]
 8014348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801434c:	2b00      	cmp	r3, #0
 801434e:	d1ea      	bne.n	8014326 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014354:	f003 0304 	and.w	r3, r3, #4
 8014358:	2b00      	cmp	r3, #0
 801435a:	d004      	beq.n	8014366 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	2204      	movs	r2, #4
 8014360:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014362:	2304      	movs	r3, #4
 8014364:	e014      	b.n	8014390 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801436a:	f003 0301 	and.w	r3, r3, #1
 801436e:	2b00      	cmp	r3, #0
 8014370:	d004      	beq.n	801437c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	2201      	movs	r2, #1
 8014376:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014378:	2301      	movs	r3, #1
 801437a:	e009      	b.n	8014390 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014384:	2b00      	cmp	r3, #0
 8014386:	d002      	beq.n	801438e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	2240      	movs	r2, #64	; 0x40
 801438c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801438e:	2300      	movs	r3, #0
  
}
 8014390:	4618      	mov	r0, r3
 8014392:	3714      	adds	r7, #20
 8014394:	46bd      	mov	sp, r7
 8014396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801439a:	4770      	bx	lr
 801439c:	20000230 	.word	0x20000230
 80143a0:	10624dd3 	.word	0x10624dd3

080143a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80143a4:	b084      	sub	sp, #16
 80143a6:	b580      	push	{r7, lr}
 80143a8:	b084      	sub	sp, #16
 80143aa:	af00      	add	r7, sp, #0
 80143ac:	6078      	str	r0, [r7, #4]
 80143ae:	f107 001c 	add.w	r0, r7, #28
 80143b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80143b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b8:	2b01      	cmp	r3, #1
 80143ba:	d126      	bne.n	801440a <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	68da      	ldr	r2, [r3, #12]
 80143cc:	4b23      	ldr	r3, [pc, #140]	; (801445c <USB_CoreInit+0xb8>)
 80143ce:	4013      	ands	r3, r2
 80143d0:	687a      	ldr	r2, [r7, #4]
 80143d2:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	68db      	ldr	r3, [r3, #12]
 80143d8:	f043 0210 	orr.w	r2, r3, #16
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	68db      	ldr	r3, [r3, #12]
 80143e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80143ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143ee:	2b01      	cmp	r3, #1
 80143f0:	d105      	bne.n	80143fe <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	68db      	ldr	r3, [r3, #12]
 80143f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80143fe:	6878      	ldr	r0, [r7, #4]
 8014400:	f001 fad6 	bl	80159b0 <USB_CoreReset>
 8014404:	4603      	mov	r3, r0
 8014406:	73fb      	strb	r3, [r7, #15]
 8014408:	e010      	b.n	801442c <USB_CoreInit+0x88>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	68db      	ldr	r3, [r3, #12]
 801440e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014416:	6878      	ldr	r0, [r7, #4]
 8014418:	f001 faca 	bl	80159b0 <USB_CoreReset>
 801441c:	4603      	mov	r3, r0
 801441e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014424:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 801442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801442e:	2b01      	cmp	r3, #1
 8014430:	d10b      	bne.n	801444a <USB_CoreInit+0xa6>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	689b      	ldr	r3, [r3, #8]
 8014436:	f043 0206 	orr.w	r2, r3, #6
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	689b      	ldr	r3, [r3, #8]
 8014442:	f043 0220 	orr.w	r2, r3, #32
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801444a:	7bfb      	ldrb	r3, [r7, #15]
}
 801444c:	4618      	mov	r0, r3
 801444e:	3710      	adds	r7, #16
 8014450:	46bd      	mov	sp, r7
 8014452:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014456:	b004      	add	sp, #16
 8014458:	4770      	bx	lr
 801445a:	bf00      	nop
 801445c:	ffbdffbf 	.word	0xffbdffbf

08014460 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8014460:	b480      	push	{r7}
 8014462:	b087      	sub	sp, #28
 8014464:	af00      	add	r7, sp, #0
 8014466:	60f8      	str	r0, [r7, #12]
 8014468:	60b9      	str	r1, [r7, #8]
 801446a:	4613      	mov	r3, r2
 801446c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801446e:	79fb      	ldrb	r3, [r7, #7]
 8014470:	2b02      	cmp	r3, #2
 8014472:	d165      	bne.n	8014540 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	4a41      	ldr	r2, [pc, #260]	; (801457c <USB_SetTurnaroundTime+0x11c>)
 8014478:	4293      	cmp	r3, r2
 801447a:	d906      	bls.n	801448a <USB_SetTurnaroundTime+0x2a>
 801447c:	68bb      	ldr	r3, [r7, #8]
 801447e:	4a40      	ldr	r2, [pc, #256]	; (8014580 <USB_SetTurnaroundTime+0x120>)
 8014480:	4293      	cmp	r3, r2
 8014482:	d202      	bcs.n	801448a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8014484:	230f      	movs	r3, #15
 8014486:	617b      	str	r3, [r7, #20]
 8014488:	e062      	b.n	8014550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	4a3c      	ldr	r2, [pc, #240]	; (8014580 <USB_SetTurnaroundTime+0x120>)
 801448e:	4293      	cmp	r3, r2
 8014490:	d306      	bcc.n	80144a0 <USB_SetTurnaroundTime+0x40>
 8014492:	68bb      	ldr	r3, [r7, #8]
 8014494:	4a3b      	ldr	r2, [pc, #236]	; (8014584 <USB_SetTurnaroundTime+0x124>)
 8014496:	4293      	cmp	r3, r2
 8014498:	d202      	bcs.n	80144a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801449a:	230e      	movs	r3, #14
 801449c:	617b      	str	r3, [r7, #20]
 801449e:	e057      	b.n	8014550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80144a0:	68bb      	ldr	r3, [r7, #8]
 80144a2:	4a38      	ldr	r2, [pc, #224]	; (8014584 <USB_SetTurnaroundTime+0x124>)
 80144a4:	4293      	cmp	r3, r2
 80144a6:	d306      	bcc.n	80144b6 <USB_SetTurnaroundTime+0x56>
 80144a8:	68bb      	ldr	r3, [r7, #8]
 80144aa:	4a37      	ldr	r2, [pc, #220]	; (8014588 <USB_SetTurnaroundTime+0x128>)
 80144ac:	4293      	cmp	r3, r2
 80144ae:	d202      	bcs.n	80144b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80144b0:	230d      	movs	r3, #13
 80144b2:	617b      	str	r3, [r7, #20]
 80144b4:	e04c      	b.n	8014550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80144b6:	68bb      	ldr	r3, [r7, #8]
 80144b8:	4a33      	ldr	r2, [pc, #204]	; (8014588 <USB_SetTurnaroundTime+0x128>)
 80144ba:	4293      	cmp	r3, r2
 80144bc:	d306      	bcc.n	80144cc <USB_SetTurnaroundTime+0x6c>
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	4a32      	ldr	r2, [pc, #200]	; (801458c <USB_SetTurnaroundTime+0x12c>)
 80144c2:	4293      	cmp	r3, r2
 80144c4:	d802      	bhi.n	80144cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80144c6:	230c      	movs	r3, #12
 80144c8:	617b      	str	r3, [r7, #20]
 80144ca:	e041      	b.n	8014550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80144cc:	68bb      	ldr	r3, [r7, #8]
 80144ce:	4a2f      	ldr	r2, [pc, #188]	; (801458c <USB_SetTurnaroundTime+0x12c>)
 80144d0:	4293      	cmp	r3, r2
 80144d2:	d906      	bls.n	80144e2 <USB_SetTurnaroundTime+0x82>
 80144d4:	68bb      	ldr	r3, [r7, #8]
 80144d6:	4a2e      	ldr	r2, [pc, #184]	; (8014590 <USB_SetTurnaroundTime+0x130>)
 80144d8:	4293      	cmp	r3, r2
 80144da:	d802      	bhi.n	80144e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80144dc:	230b      	movs	r3, #11
 80144de:	617b      	str	r3, [r7, #20]
 80144e0:	e036      	b.n	8014550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80144e2:	68bb      	ldr	r3, [r7, #8]
 80144e4:	4a2a      	ldr	r2, [pc, #168]	; (8014590 <USB_SetTurnaroundTime+0x130>)
 80144e6:	4293      	cmp	r3, r2
 80144e8:	d906      	bls.n	80144f8 <USB_SetTurnaroundTime+0x98>
 80144ea:	68bb      	ldr	r3, [r7, #8]
 80144ec:	4a29      	ldr	r2, [pc, #164]	; (8014594 <USB_SetTurnaroundTime+0x134>)
 80144ee:	4293      	cmp	r3, r2
 80144f0:	d802      	bhi.n	80144f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80144f2:	230a      	movs	r3, #10
 80144f4:	617b      	str	r3, [r7, #20]
 80144f6:	e02b      	b.n	8014550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80144f8:	68bb      	ldr	r3, [r7, #8]
 80144fa:	4a26      	ldr	r2, [pc, #152]	; (8014594 <USB_SetTurnaroundTime+0x134>)
 80144fc:	4293      	cmp	r3, r2
 80144fe:	d906      	bls.n	801450e <USB_SetTurnaroundTime+0xae>
 8014500:	68bb      	ldr	r3, [r7, #8]
 8014502:	4a25      	ldr	r2, [pc, #148]	; (8014598 <USB_SetTurnaroundTime+0x138>)
 8014504:	4293      	cmp	r3, r2
 8014506:	d202      	bcs.n	801450e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8014508:	2309      	movs	r3, #9
 801450a:	617b      	str	r3, [r7, #20]
 801450c:	e020      	b.n	8014550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	4a21      	ldr	r2, [pc, #132]	; (8014598 <USB_SetTurnaroundTime+0x138>)
 8014512:	4293      	cmp	r3, r2
 8014514:	d306      	bcc.n	8014524 <USB_SetTurnaroundTime+0xc4>
 8014516:	68bb      	ldr	r3, [r7, #8]
 8014518:	4a20      	ldr	r2, [pc, #128]	; (801459c <USB_SetTurnaroundTime+0x13c>)
 801451a:	4293      	cmp	r3, r2
 801451c:	d802      	bhi.n	8014524 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801451e:	2308      	movs	r3, #8
 8014520:	617b      	str	r3, [r7, #20]
 8014522:	e015      	b.n	8014550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014524:	68bb      	ldr	r3, [r7, #8]
 8014526:	4a1d      	ldr	r2, [pc, #116]	; (801459c <USB_SetTurnaroundTime+0x13c>)
 8014528:	4293      	cmp	r3, r2
 801452a:	d906      	bls.n	801453a <USB_SetTurnaroundTime+0xda>
 801452c:	68bb      	ldr	r3, [r7, #8]
 801452e:	4a1c      	ldr	r2, [pc, #112]	; (80145a0 <USB_SetTurnaroundTime+0x140>)
 8014530:	4293      	cmp	r3, r2
 8014532:	d202      	bcs.n	801453a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8014534:	2307      	movs	r3, #7
 8014536:	617b      	str	r3, [r7, #20]
 8014538:	e00a      	b.n	8014550 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801453a:	2306      	movs	r3, #6
 801453c:	617b      	str	r3, [r7, #20]
 801453e:	e007      	b.n	8014550 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8014540:	79fb      	ldrb	r3, [r7, #7]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d102      	bne.n	801454c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8014546:	2309      	movs	r3, #9
 8014548:	617b      	str	r3, [r7, #20]
 801454a:	e001      	b.n	8014550 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801454c:	2309      	movs	r3, #9
 801454e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	68db      	ldr	r3, [r3, #12]
 8014554:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	68da      	ldr	r2, [r3, #12]
 8014560:	697b      	ldr	r3, [r7, #20]
 8014562:	029b      	lsls	r3, r3, #10
 8014564:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8014568:	431a      	orrs	r2, r3
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801456e:	2300      	movs	r3, #0
}
 8014570:	4618      	mov	r0, r3
 8014572:	371c      	adds	r7, #28
 8014574:	46bd      	mov	sp, r7
 8014576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457a:	4770      	bx	lr
 801457c:	00d8acbf 	.word	0x00d8acbf
 8014580:	00e4e1c0 	.word	0x00e4e1c0
 8014584:	00f42400 	.word	0x00f42400
 8014588:	01067380 	.word	0x01067380
 801458c:	011a499f 	.word	0x011a499f
 8014590:	01312cff 	.word	0x01312cff
 8014594:	014ca43f 	.word	0x014ca43f
 8014598:	016e3600 	.word	0x016e3600
 801459c:	01a6ab1f 	.word	0x01a6ab1f
 80145a0:	01e84800 	.word	0x01e84800

080145a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80145a4:	b480      	push	{r7}
 80145a6:	b083      	sub	sp, #12
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	689b      	ldr	r3, [r3, #8]
 80145b0:	f043 0201 	orr.w	r2, r3, #1
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80145b8:	2300      	movs	r3, #0
}
 80145ba:	4618      	mov	r0, r3
 80145bc:	370c      	adds	r7, #12
 80145be:	46bd      	mov	sp, r7
 80145c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c4:	4770      	bx	lr

080145c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80145c6:	b480      	push	{r7}
 80145c8:	b083      	sub	sp, #12
 80145ca:	af00      	add	r7, sp, #0
 80145cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	689b      	ldr	r3, [r3, #8]
 80145d2:	f023 0201 	bic.w	r2, r3, #1
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80145da:	2300      	movs	r3, #0
}
 80145dc:	4618      	mov	r0, r3
 80145de:	370c      	adds	r7, #12
 80145e0:	46bd      	mov	sp, r7
 80145e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e6:	4770      	bx	lr

080145e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b082      	sub	sp, #8
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
 80145f0:	460b      	mov	r3, r1
 80145f2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	68db      	ldr	r3, [r3, #12]
 80145f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014600:	78fb      	ldrb	r3, [r7, #3]
 8014602:	2b01      	cmp	r3, #1
 8014604:	d106      	bne.n	8014614 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	68db      	ldr	r3, [r3, #12]
 801460a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	60da      	str	r2, [r3, #12]
 8014612:	e00b      	b.n	801462c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8014614:	78fb      	ldrb	r3, [r7, #3]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d106      	bne.n	8014628 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	68db      	ldr	r3, [r3, #12]
 801461e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	60da      	str	r2, [r3, #12]
 8014626:	e001      	b.n	801462c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8014628:	2301      	movs	r3, #1
 801462a:	e003      	b.n	8014634 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 801462c:	2032      	movs	r0, #50	; 0x32
 801462e:	f7f4 fdb7 	bl	80091a0 <HAL_Delay>

  return HAL_OK;
 8014632:	2300      	movs	r3, #0
}
 8014634:	4618      	mov	r0, r3
 8014636:	3708      	adds	r7, #8
 8014638:	46bd      	mov	sp, r7
 801463a:	bd80      	pop	{r7, pc}

0801463c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801463c:	b084      	sub	sp, #16
 801463e:	b580      	push	{r7, lr}
 8014640:	b086      	sub	sp, #24
 8014642:	af00      	add	r7, sp, #0
 8014644:	6078      	str	r0, [r7, #4]
 8014646:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801464a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801464e:	2300      	movs	r3, #0
 8014650:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014656:	2300      	movs	r3, #0
 8014658:	613b      	str	r3, [r7, #16]
 801465a:	e009      	b.n	8014670 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801465c:	687a      	ldr	r2, [r7, #4]
 801465e:	693b      	ldr	r3, [r7, #16]
 8014660:	3340      	adds	r3, #64	; 0x40
 8014662:	009b      	lsls	r3, r3, #2
 8014664:	4413      	add	r3, r2
 8014666:	2200      	movs	r2, #0
 8014668:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801466a:	693b      	ldr	r3, [r7, #16]
 801466c:	3301      	adds	r3, #1
 801466e:	613b      	str	r3, [r7, #16]
 8014670:	693b      	ldr	r3, [r7, #16]
 8014672:	2b0e      	cmp	r3, #14
 8014674:	d9f2      	bls.n	801465c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8014676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014678:	2b00      	cmp	r3, #0
 801467a:	d11c      	bne.n	80146b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014682:	685b      	ldr	r3, [r3, #4]
 8014684:	68fa      	ldr	r2, [r7, #12]
 8014686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801468a:	f043 0302 	orr.w	r3, r3, #2
 801468e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014694:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	601a      	str	r2, [r3, #0]
 80146b4:	e005      	b.n	80146c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80146c8:	461a      	mov	r2, r3
 80146ca:	2300      	movs	r3, #0
 80146cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80146d4:	4619      	mov	r1, r3
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80146dc:	461a      	mov	r2, r3
 80146de:	680b      	ldr	r3, [r1, #0]
 80146e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80146e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146e4:	2b01      	cmp	r3, #1
 80146e6:	d10c      	bne.n	8014702 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80146e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d104      	bne.n	80146f8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80146ee:	2100      	movs	r1, #0
 80146f0:	6878      	ldr	r0, [r7, #4]
 80146f2:	f000 f959 	bl	80149a8 <USB_SetDevSpeed>
 80146f6:	e018      	b.n	801472a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80146f8:	2101      	movs	r1, #1
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f000 f954 	bl	80149a8 <USB_SetDevSpeed>
 8014700:	e013      	b.n	801472a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8014702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014704:	2b03      	cmp	r3, #3
 8014706:	d10c      	bne.n	8014722 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801470a:	2b00      	cmp	r3, #0
 801470c:	d104      	bne.n	8014718 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801470e:	2100      	movs	r1, #0
 8014710:	6878      	ldr	r0, [r7, #4]
 8014712:	f000 f949 	bl	80149a8 <USB_SetDevSpeed>
 8014716:	e008      	b.n	801472a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8014718:	2101      	movs	r1, #1
 801471a:	6878      	ldr	r0, [r7, #4]
 801471c:	f000 f944 	bl	80149a8 <USB_SetDevSpeed>
 8014720:	e003      	b.n	801472a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8014722:	2103      	movs	r1, #3
 8014724:	6878      	ldr	r0, [r7, #4]
 8014726:	f000 f93f 	bl	80149a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801472a:	2110      	movs	r1, #16
 801472c:	6878      	ldr	r0, [r7, #4]
 801472e:	f000 f8f3 	bl	8014918 <USB_FlushTxFifo>
 8014732:	4603      	mov	r3, r0
 8014734:	2b00      	cmp	r3, #0
 8014736:	d001      	beq.n	801473c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8014738:	2301      	movs	r3, #1
 801473a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f000 f911 	bl	8014964 <USB_FlushRxFifo>
 8014742:	4603      	mov	r3, r0
 8014744:	2b00      	cmp	r3, #0
 8014746:	d001      	beq.n	801474c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8014748:	2301      	movs	r3, #1
 801474a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014752:	461a      	mov	r2, r3
 8014754:	2300      	movs	r3, #0
 8014756:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801475e:	461a      	mov	r2, r3
 8014760:	2300      	movs	r3, #0
 8014762:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801476a:	461a      	mov	r2, r3
 801476c:	2300      	movs	r3, #0
 801476e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014770:	2300      	movs	r3, #0
 8014772:	613b      	str	r3, [r7, #16]
 8014774:	e043      	b.n	80147fe <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014776:	693b      	ldr	r3, [r7, #16]
 8014778:	015a      	lsls	r2, r3, #5
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	4413      	add	r3, r2
 801477e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014788:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801478c:	d118      	bne.n	80147c0 <USB_DevInit+0x184>
    {
      if (i == 0U)
 801478e:	693b      	ldr	r3, [r7, #16]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d10a      	bne.n	80147aa <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014794:	693b      	ldr	r3, [r7, #16]
 8014796:	015a      	lsls	r2, r3, #5
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	4413      	add	r3, r2
 801479c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147a0:	461a      	mov	r2, r3
 80147a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80147a6:	6013      	str	r3, [r2, #0]
 80147a8:	e013      	b.n	80147d2 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80147aa:	693b      	ldr	r3, [r7, #16]
 80147ac:	015a      	lsls	r2, r3, #5
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	4413      	add	r3, r2
 80147b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147b6:	461a      	mov	r2, r3
 80147b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80147bc:	6013      	str	r3, [r2, #0]
 80147be:	e008      	b.n	80147d2 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80147c0:	693b      	ldr	r3, [r7, #16]
 80147c2:	015a      	lsls	r2, r3, #5
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	4413      	add	r3, r2
 80147c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147cc:	461a      	mov	r2, r3
 80147ce:	2300      	movs	r3, #0
 80147d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80147d2:	693b      	ldr	r3, [r7, #16]
 80147d4:	015a      	lsls	r2, r3, #5
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	4413      	add	r3, r2
 80147da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147de:	461a      	mov	r2, r3
 80147e0:	2300      	movs	r3, #0
 80147e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80147e4:	693b      	ldr	r3, [r7, #16]
 80147e6:	015a      	lsls	r2, r3, #5
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	4413      	add	r3, r2
 80147ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147f0:	461a      	mov	r2, r3
 80147f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80147f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80147f8:	693b      	ldr	r3, [r7, #16]
 80147fa:	3301      	adds	r3, #1
 80147fc:	613b      	str	r3, [r7, #16]
 80147fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014800:	693a      	ldr	r2, [r7, #16]
 8014802:	429a      	cmp	r2, r3
 8014804:	d3b7      	bcc.n	8014776 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014806:	2300      	movs	r3, #0
 8014808:	613b      	str	r3, [r7, #16]
 801480a:	e043      	b.n	8014894 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801480c:	693b      	ldr	r3, [r7, #16]
 801480e:	015a      	lsls	r2, r3, #5
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	4413      	add	r3, r2
 8014814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801481e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014822:	d118      	bne.n	8014856 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8014824:	693b      	ldr	r3, [r7, #16]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d10a      	bne.n	8014840 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801482a:	693b      	ldr	r3, [r7, #16]
 801482c:	015a      	lsls	r2, r3, #5
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	4413      	add	r3, r2
 8014832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014836:	461a      	mov	r2, r3
 8014838:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801483c:	6013      	str	r3, [r2, #0]
 801483e:	e013      	b.n	8014868 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014840:	693b      	ldr	r3, [r7, #16]
 8014842:	015a      	lsls	r2, r3, #5
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	4413      	add	r3, r2
 8014848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801484c:	461a      	mov	r2, r3
 801484e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8014852:	6013      	str	r3, [r2, #0]
 8014854:	e008      	b.n	8014868 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014856:	693b      	ldr	r3, [r7, #16]
 8014858:	015a      	lsls	r2, r3, #5
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	4413      	add	r3, r2
 801485e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014862:	461a      	mov	r2, r3
 8014864:	2300      	movs	r3, #0
 8014866:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014868:	693b      	ldr	r3, [r7, #16]
 801486a:	015a      	lsls	r2, r3, #5
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	4413      	add	r3, r2
 8014870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014874:	461a      	mov	r2, r3
 8014876:	2300      	movs	r3, #0
 8014878:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801487a:	693b      	ldr	r3, [r7, #16]
 801487c:	015a      	lsls	r2, r3, #5
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	4413      	add	r3, r2
 8014882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014886:	461a      	mov	r2, r3
 8014888:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801488c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801488e:	693b      	ldr	r3, [r7, #16]
 8014890:	3301      	adds	r3, #1
 8014892:	613b      	str	r3, [r7, #16]
 8014894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014896:	693a      	ldr	r2, [r7, #16]
 8014898:	429a      	cmp	r2, r3
 801489a:	d3b7      	bcc.n	801480c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80148a2:	691b      	ldr	r3, [r3, #16]
 80148a4:	68fa      	ldr	r2, [r7, #12]
 80148a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80148aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80148ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	2200      	movs	r2, #0
 80148b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80148bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80148be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d105      	bne.n	80148d0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	699b      	ldr	r3, [r3, #24]
 80148c8:	f043 0210 	orr.w	r2, r3, #16
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	699a      	ldr	r2, [r3, #24]
 80148d4:	4b0e      	ldr	r3, [pc, #56]	; (8014910 <USB_DevInit+0x2d4>)
 80148d6:	4313      	orrs	r3, r2
 80148d8:	687a      	ldr	r2, [r7, #4]
 80148da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80148dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d005      	beq.n	80148ee <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	699b      	ldr	r3, [r3, #24]
 80148e6:	f043 0208 	orr.w	r2, r3, #8
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80148ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148f0:	2b01      	cmp	r3, #1
 80148f2:	d105      	bne.n	8014900 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	699a      	ldr	r2, [r3, #24]
 80148f8:	4b06      	ldr	r3, [pc, #24]	; (8014914 <USB_DevInit+0x2d8>)
 80148fa:	4313      	orrs	r3, r2
 80148fc:	687a      	ldr	r2, [r7, #4]
 80148fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8014900:	7dfb      	ldrb	r3, [r7, #23]
}
 8014902:	4618      	mov	r0, r3
 8014904:	3718      	adds	r7, #24
 8014906:	46bd      	mov	sp, r7
 8014908:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801490c:	b004      	add	sp, #16
 801490e:	4770      	bx	lr
 8014910:	803c3800 	.word	0x803c3800
 8014914:	40000004 	.word	0x40000004

08014918 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014918:	b480      	push	{r7}
 801491a:	b085      	sub	sp, #20
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
 8014920:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8014922:	2300      	movs	r3, #0
 8014924:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014926:	683b      	ldr	r3, [r7, #0]
 8014928:	019b      	lsls	r3, r3, #6
 801492a:	f043 0220 	orr.w	r2, r3, #32
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	3301      	adds	r3, #1
 8014936:	60fb      	str	r3, [r7, #12]
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	4a09      	ldr	r2, [pc, #36]	; (8014960 <USB_FlushTxFifo+0x48>)
 801493c:	4293      	cmp	r3, r2
 801493e:	d901      	bls.n	8014944 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8014940:	2303      	movs	r3, #3
 8014942:	e006      	b.n	8014952 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	691b      	ldr	r3, [r3, #16]
 8014948:	f003 0320 	and.w	r3, r3, #32
 801494c:	2b20      	cmp	r3, #32
 801494e:	d0f0      	beq.n	8014932 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8014950:	2300      	movs	r3, #0
}
 8014952:	4618      	mov	r0, r3
 8014954:	3714      	adds	r7, #20
 8014956:	46bd      	mov	sp, r7
 8014958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495c:	4770      	bx	lr
 801495e:	bf00      	nop
 8014960:	00030d40 	.word	0x00030d40

08014964 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014964:	b480      	push	{r7}
 8014966:	b085      	sub	sp, #20
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 801496c:	2300      	movs	r3, #0
 801496e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	2210      	movs	r2, #16
 8014974:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	3301      	adds	r3, #1
 801497a:	60fb      	str	r3, [r7, #12]
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	4a09      	ldr	r2, [pc, #36]	; (80149a4 <USB_FlushRxFifo+0x40>)
 8014980:	4293      	cmp	r3, r2
 8014982:	d901      	bls.n	8014988 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8014984:	2303      	movs	r3, #3
 8014986:	e006      	b.n	8014996 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	691b      	ldr	r3, [r3, #16]
 801498c:	f003 0310 	and.w	r3, r3, #16
 8014990:	2b10      	cmp	r3, #16
 8014992:	d0f0      	beq.n	8014976 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8014994:	2300      	movs	r3, #0
}
 8014996:	4618      	mov	r0, r3
 8014998:	3714      	adds	r7, #20
 801499a:	46bd      	mov	sp, r7
 801499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a0:	4770      	bx	lr
 80149a2:	bf00      	nop
 80149a4:	00030d40 	.word	0x00030d40

080149a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80149a8:	b480      	push	{r7}
 80149aa:	b085      	sub	sp, #20
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
 80149b0:	460b      	mov	r3, r1
 80149b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80149be:	681a      	ldr	r2, [r3, #0]
 80149c0:	78fb      	ldrb	r3, [r7, #3]
 80149c2:	68f9      	ldr	r1, [r7, #12]
 80149c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80149c8:	4313      	orrs	r3, r2
 80149ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80149cc:	2300      	movs	r3, #0
}
 80149ce:	4618      	mov	r0, r3
 80149d0:	3714      	adds	r7, #20
 80149d2:	46bd      	mov	sp, r7
 80149d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d8:	4770      	bx	lr

080149da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80149da:	b480      	push	{r7}
 80149dc:	b087      	sub	sp, #28
 80149de:	af00      	add	r7, sp, #0
 80149e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80149e6:	693b      	ldr	r3, [r7, #16]
 80149e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80149ec:	689b      	ldr	r3, [r3, #8]
 80149ee:	f003 0306 	and.w	r3, r3, #6
 80149f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d102      	bne.n	8014a00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80149fa:	2300      	movs	r3, #0
 80149fc:	75fb      	strb	r3, [r7, #23]
 80149fe:	e00a      	b.n	8014a16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	2b02      	cmp	r3, #2
 8014a04:	d002      	beq.n	8014a0c <USB_GetDevSpeed+0x32>
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	2b06      	cmp	r3, #6
 8014a0a:	d102      	bne.n	8014a12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8014a0c:	2302      	movs	r3, #2
 8014a0e:	75fb      	strb	r3, [r7, #23]
 8014a10:	e001      	b.n	8014a16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8014a12:	230f      	movs	r3, #15
 8014a14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8014a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a18:	4618      	mov	r0, r3
 8014a1a:	371c      	adds	r7, #28
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a22:	4770      	bx	lr

08014a24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014a24:	b480      	push	{r7}
 8014a26:	b085      	sub	sp, #20
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
 8014a2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014a32:	683b      	ldr	r3, [r7, #0]
 8014a34:	781b      	ldrb	r3, [r3, #0]
 8014a36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014a38:	683b      	ldr	r3, [r7, #0]
 8014a3a:	785b      	ldrb	r3, [r3, #1]
 8014a3c:	2b01      	cmp	r3, #1
 8014a3e:	d139      	bne.n	8014ab4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a46:	69da      	ldr	r2, [r3, #28]
 8014a48:	683b      	ldr	r3, [r7, #0]
 8014a4a:	781b      	ldrb	r3, [r3, #0]
 8014a4c:	f003 030f 	and.w	r3, r3, #15
 8014a50:	2101      	movs	r1, #1
 8014a52:	fa01 f303 	lsl.w	r3, r1, r3
 8014a56:	b29b      	uxth	r3, r3
 8014a58:	68f9      	ldr	r1, [r7, #12]
 8014a5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014a5e:	4313      	orrs	r3, r2
 8014a60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014a62:	68bb      	ldr	r3, [r7, #8]
 8014a64:	015a      	lsls	r2, r3, #5
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	4413      	add	r3, r2
 8014a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d153      	bne.n	8014b20 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014a78:	68bb      	ldr	r3, [r7, #8]
 8014a7a:	015a      	lsls	r2, r3, #5
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	4413      	add	r3, r2
 8014a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a84:	681a      	ldr	r2, [r3, #0]
 8014a86:	683b      	ldr	r3, [r7, #0]
 8014a88:	689b      	ldr	r3, [r3, #8]
 8014a8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014a8e:	683b      	ldr	r3, [r7, #0]
 8014a90:	78db      	ldrb	r3, [r3, #3]
 8014a92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014a94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014a96:	68bb      	ldr	r3, [r7, #8]
 8014a98:	059b      	lsls	r3, r3, #22
 8014a9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014a9c:	431a      	orrs	r2, r3
 8014a9e:	68bb      	ldr	r3, [r7, #8]
 8014aa0:	0159      	lsls	r1, r3, #5
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	440b      	add	r3, r1
 8014aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014aaa:	4619      	mov	r1, r3
 8014aac:	4b20      	ldr	r3, [pc, #128]	; (8014b30 <USB_ActivateEndpoint+0x10c>)
 8014aae:	4313      	orrs	r3, r2
 8014ab0:	600b      	str	r3, [r1, #0]
 8014ab2:	e035      	b.n	8014b20 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014aba:	69da      	ldr	r2, [r3, #28]
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	781b      	ldrb	r3, [r3, #0]
 8014ac0:	f003 030f 	and.w	r3, r3, #15
 8014ac4:	2101      	movs	r1, #1
 8014ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8014aca:	041b      	lsls	r3, r3, #16
 8014acc:	68f9      	ldr	r1, [r7, #12]
 8014ace:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014ad2:	4313      	orrs	r3, r2
 8014ad4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014ad6:	68bb      	ldr	r3, [r7, #8]
 8014ad8:	015a      	lsls	r2, r3, #5
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	4413      	add	r3, r2
 8014ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d119      	bne.n	8014b20 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014aec:	68bb      	ldr	r3, [r7, #8]
 8014aee:	015a      	lsls	r2, r3, #5
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	4413      	add	r3, r2
 8014af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014af8:	681a      	ldr	r2, [r3, #0]
 8014afa:	683b      	ldr	r3, [r7, #0]
 8014afc:	689b      	ldr	r3, [r3, #8]
 8014afe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014b02:	683b      	ldr	r3, [r7, #0]
 8014b04:	78db      	ldrb	r3, [r3, #3]
 8014b06:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014b08:	430b      	orrs	r3, r1
 8014b0a:	431a      	orrs	r2, r3
 8014b0c:	68bb      	ldr	r3, [r7, #8]
 8014b0e:	0159      	lsls	r1, r3, #5
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	440b      	add	r3, r1
 8014b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b18:	4619      	mov	r1, r3
 8014b1a:	4b05      	ldr	r3, [pc, #20]	; (8014b30 <USB_ActivateEndpoint+0x10c>)
 8014b1c:	4313      	orrs	r3, r2
 8014b1e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8014b20:	2300      	movs	r3, #0
}
 8014b22:	4618      	mov	r0, r3
 8014b24:	3714      	adds	r7, #20
 8014b26:	46bd      	mov	sp, r7
 8014b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b2c:	4770      	bx	lr
 8014b2e:	bf00      	nop
 8014b30:	10008000 	.word	0x10008000

08014b34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014b34:	b480      	push	{r7}
 8014b36:	b085      	sub	sp, #20
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
 8014b3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014b42:	683b      	ldr	r3, [r7, #0]
 8014b44:	781b      	ldrb	r3, [r3, #0]
 8014b46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	785b      	ldrb	r3, [r3, #1]
 8014b4c:	2b01      	cmp	r3, #1
 8014b4e:	d161      	bne.n	8014c14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014b50:	68bb      	ldr	r3, [r7, #8]
 8014b52:	015a      	lsls	r2, r3, #5
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	4413      	add	r3, r2
 8014b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014b66:	d11f      	bne.n	8014ba8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014b68:	68bb      	ldr	r3, [r7, #8]
 8014b6a:	015a      	lsls	r2, r3, #5
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	4413      	add	r3, r2
 8014b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	68ba      	ldr	r2, [r7, #8]
 8014b78:	0151      	lsls	r1, r2, #5
 8014b7a:	68fa      	ldr	r2, [r7, #12]
 8014b7c:	440a      	add	r2, r1
 8014b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014b82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014b86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014b88:	68bb      	ldr	r3, [r7, #8]
 8014b8a:	015a      	lsls	r2, r3, #5
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	4413      	add	r3, r2
 8014b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	68ba      	ldr	r2, [r7, #8]
 8014b98:	0151      	lsls	r1, r2, #5
 8014b9a:	68fa      	ldr	r2, [r7, #12]
 8014b9c:	440a      	add	r2, r1
 8014b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014ba2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014ba6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014bb0:	683b      	ldr	r3, [r7, #0]
 8014bb2:	781b      	ldrb	r3, [r3, #0]
 8014bb4:	f003 030f 	and.w	r3, r3, #15
 8014bb8:	2101      	movs	r1, #1
 8014bba:	fa01 f303 	lsl.w	r3, r1, r3
 8014bbe:	b29b      	uxth	r3, r3
 8014bc0:	43db      	mvns	r3, r3
 8014bc2:	68f9      	ldr	r1, [r7, #12]
 8014bc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014bc8:	4013      	ands	r3, r2
 8014bca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014bd2:	69da      	ldr	r2, [r3, #28]
 8014bd4:	683b      	ldr	r3, [r7, #0]
 8014bd6:	781b      	ldrb	r3, [r3, #0]
 8014bd8:	f003 030f 	and.w	r3, r3, #15
 8014bdc:	2101      	movs	r1, #1
 8014bde:	fa01 f303 	lsl.w	r3, r1, r3
 8014be2:	b29b      	uxth	r3, r3
 8014be4:	43db      	mvns	r3, r3
 8014be6:	68f9      	ldr	r1, [r7, #12]
 8014be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014bec:	4013      	ands	r3, r2
 8014bee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014bf0:	68bb      	ldr	r3, [r7, #8]
 8014bf2:	015a      	lsls	r2, r3, #5
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	4413      	add	r3, r2
 8014bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014bfc:	681a      	ldr	r2, [r3, #0]
 8014bfe:	68bb      	ldr	r3, [r7, #8]
 8014c00:	0159      	lsls	r1, r3, #5
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	440b      	add	r3, r1
 8014c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c0a:	4619      	mov	r1, r3
 8014c0c:	4b35      	ldr	r3, [pc, #212]	; (8014ce4 <USB_DeactivateEndpoint+0x1b0>)
 8014c0e:	4013      	ands	r3, r2
 8014c10:	600b      	str	r3, [r1, #0]
 8014c12:	e060      	b.n	8014cd6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014c14:	68bb      	ldr	r3, [r7, #8]
 8014c16:	015a      	lsls	r2, r3, #5
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	4413      	add	r3, r2
 8014c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014c26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014c2a:	d11f      	bne.n	8014c6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014c2c:	68bb      	ldr	r3, [r7, #8]
 8014c2e:	015a      	lsls	r2, r3, #5
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	4413      	add	r3, r2
 8014c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	68ba      	ldr	r2, [r7, #8]
 8014c3c:	0151      	lsls	r1, r2, #5
 8014c3e:	68fa      	ldr	r2, [r7, #12]
 8014c40:	440a      	add	r2, r1
 8014c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014c46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014c4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014c4c:	68bb      	ldr	r3, [r7, #8]
 8014c4e:	015a      	lsls	r2, r3, #5
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	4413      	add	r3, r2
 8014c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	68ba      	ldr	r2, [r7, #8]
 8014c5c:	0151      	lsls	r1, r2, #5
 8014c5e:	68fa      	ldr	r2, [r7, #12]
 8014c60:	440a      	add	r2, r1
 8014c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014c66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014c6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014c74:	683b      	ldr	r3, [r7, #0]
 8014c76:	781b      	ldrb	r3, [r3, #0]
 8014c78:	f003 030f 	and.w	r3, r3, #15
 8014c7c:	2101      	movs	r1, #1
 8014c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8014c82:	041b      	lsls	r3, r3, #16
 8014c84:	43db      	mvns	r3, r3
 8014c86:	68f9      	ldr	r1, [r7, #12]
 8014c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014c8c:	4013      	ands	r3, r2
 8014c8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c96:	69da      	ldr	r2, [r3, #28]
 8014c98:	683b      	ldr	r3, [r7, #0]
 8014c9a:	781b      	ldrb	r3, [r3, #0]
 8014c9c:	f003 030f 	and.w	r3, r3, #15
 8014ca0:	2101      	movs	r1, #1
 8014ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8014ca6:	041b      	lsls	r3, r3, #16
 8014ca8:	43db      	mvns	r3, r3
 8014caa:	68f9      	ldr	r1, [r7, #12]
 8014cac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014cb0:	4013      	ands	r3, r2
 8014cb2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014cb4:	68bb      	ldr	r3, [r7, #8]
 8014cb6:	015a      	lsls	r2, r3, #5
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	4413      	add	r3, r2
 8014cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cc0:	681a      	ldr	r2, [r3, #0]
 8014cc2:	68bb      	ldr	r3, [r7, #8]
 8014cc4:	0159      	lsls	r1, r3, #5
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	440b      	add	r3, r1
 8014cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cce:	4619      	mov	r1, r3
 8014cd0:	4b05      	ldr	r3, [pc, #20]	; (8014ce8 <USB_DeactivateEndpoint+0x1b4>)
 8014cd2:	4013      	ands	r3, r2
 8014cd4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8014cd6:	2300      	movs	r3, #0
}
 8014cd8:	4618      	mov	r0, r3
 8014cda:	3714      	adds	r7, #20
 8014cdc:	46bd      	mov	sp, r7
 8014cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce2:	4770      	bx	lr
 8014ce4:	ec337800 	.word	0xec337800
 8014ce8:	eff37800 	.word	0xeff37800

08014cec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b08a      	sub	sp, #40	; 0x28
 8014cf0:	af02      	add	r7, sp, #8
 8014cf2:	60f8      	str	r0, [r7, #12]
 8014cf4:	60b9      	str	r1, [r7, #8]
 8014cf6:	4613      	mov	r3, r2
 8014cf8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8014cfe:	68bb      	ldr	r3, [r7, #8]
 8014d00:	781b      	ldrb	r3, [r3, #0]
 8014d02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014d04:	68bb      	ldr	r3, [r7, #8]
 8014d06:	785b      	ldrb	r3, [r3, #1]
 8014d08:	2b01      	cmp	r3, #1
 8014d0a:	f040 8163 	bne.w	8014fd4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014d0e:	68bb      	ldr	r3, [r7, #8]
 8014d10:	695b      	ldr	r3, [r3, #20]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d132      	bne.n	8014d7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014d16:	69bb      	ldr	r3, [r7, #24]
 8014d18:	015a      	lsls	r2, r3, #5
 8014d1a:	69fb      	ldr	r3, [r7, #28]
 8014d1c:	4413      	add	r3, r2
 8014d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d22:	691a      	ldr	r2, [r3, #16]
 8014d24:	69bb      	ldr	r3, [r7, #24]
 8014d26:	0159      	lsls	r1, r3, #5
 8014d28:	69fb      	ldr	r3, [r7, #28]
 8014d2a:	440b      	add	r3, r1
 8014d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d30:	4619      	mov	r1, r3
 8014d32:	4ba5      	ldr	r3, [pc, #660]	; (8014fc8 <USB_EPStartXfer+0x2dc>)
 8014d34:	4013      	ands	r3, r2
 8014d36:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014d38:	69bb      	ldr	r3, [r7, #24]
 8014d3a:	015a      	lsls	r2, r3, #5
 8014d3c:	69fb      	ldr	r3, [r7, #28]
 8014d3e:	4413      	add	r3, r2
 8014d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d44:	691b      	ldr	r3, [r3, #16]
 8014d46:	69ba      	ldr	r2, [r7, #24]
 8014d48:	0151      	lsls	r1, r2, #5
 8014d4a:	69fa      	ldr	r2, [r7, #28]
 8014d4c:	440a      	add	r2, r1
 8014d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014d52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014d56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014d58:	69bb      	ldr	r3, [r7, #24]
 8014d5a:	015a      	lsls	r2, r3, #5
 8014d5c:	69fb      	ldr	r3, [r7, #28]
 8014d5e:	4413      	add	r3, r2
 8014d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d64:	691a      	ldr	r2, [r3, #16]
 8014d66:	69bb      	ldr	r3, [r7, #24]
 8014d68:	0159      	lsls	r1, r3, #5
 8014d6a:	69fb      	ldr	r3, [r7, #28]
 8014d6c:	440b      	add	r3, r1
 8014d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d72:	4619      	mov	r1, r3
 8014d74:	4b95      	ldr	r3, [pc, #596]	; (8014fcc <USB_EPStartXfer+0x2e0>)
 8014d76:	4013      	ands	r3, r2
 8014d78:	610b      	str	r3, [r1, #16]
 8014d7a:	e074      	b.n	8014e66 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014d7c:	69bb      	ldr	r3, [r7, #24]
 8014d7e:	015a      	lsls	r2, r3, #5
 8014d80:	69fb      	ldr	r3, [r7, #28]
 8014d82:	4413      	add	r3, r2
 8014d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d88:	691a      	ldr	r2, [r3, #16]
 8014d8a:	69bb      	ldr	r3, [r7, #24]
 8014d8c:	0159      	lsls	r1, r3, #5
 8014d8e:	69fb      	ldr	r3, [r7, #28]
 8014d90:	440b      	add	r3, r1
 8014d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d96:	4619      	mov	r1, r3
 8014d98:	4b8c      	ldr	r3, [pc, #560]	; (8014fcc <USB_EPStartXfer+0x2e0>)
 8014d9a:	4013      	ands	r3, r2
 8014d9c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014d9e:	69bb      	ldr	r3, [r7, #24]
 8014da0:	015a      	lsls	r2, r3, #5
 8014da2:	69fb      	ldr	r3, [r7, #28]
 8014da4:	4413      	add	r3, r2
 8014da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014daa:	691a      	ldr	r2, [r3, #16]
 8014dac:	69bb      	ldr	r3, [r7, #24]
 8014dae:	0159      	lsls	r1, r3, #5
 8014db0:	69fb      	ldr	r3, [r7, #28]
 8014db2:	440b      	add	r3, r1
 8014db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014db8:	4619      	mov	r1, r3
 8014dba:	4b83      	ldr	r3, [pc, #524]	; (8014fc8 <USB_EPStartXfer+0x2dc>)
 8014dbc:	4013      	ands	r3, r2
 8014dbe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014dc0:	69bb      	ldr	r3, [r7, #24]
 8014dc2:	015a      	lsls	r2, r3, #5
 8014dc4:	69fb      	ldr	r3, [r7, #28]
 8014dc6:	4413      	add	r3, r2
 8014dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014dcc:	691a      	ldr	r2, [r3, #16]
 8014dce:	68bb      	ldr	r3, [r7, #8]
 8014dd0:	6959      	ldr	r1, [r3, #20]
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	689b      	ldr	r3, [r3, #8]
 8014dd6:	440b      	add	r3, r1
 8014dd8:	1e59      	subs	r1, r3, #1
 8014dda:	68bb      	ldr	r3, [r7, #8]
 8014ddc:	689b      	ldr	r3, [r3, #8]
 8014dde:	fbb1 f3f3 	udiv	r3, r1, r3
 8014de2:	04d9      	lsls	r1, r3, #19
 8014de4:	4b7a      	ldr	r3, [pc, #488]	; (8014fd0 <USB_EPStartXfer+0x2e4>)
 8014de6:	400b      	ands	r3, r1
 8014de8:	69b9      	ldr	r1, [r7, #24]
 8014dea:	0148      	lsls	r0, r1, #5
 8014dec:	69f9      	ldr	r1, [r7, #28]
 8014dee:	4401      	add	r1, r0
 8014df0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014df4:	4313      	orrs	r3, r2
 8014df6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014df8:	69bb      	ldr	r3, [r7, #24]
 8014dfa:	015a      	lsls	r2, r3, #5
 8014dfc:	69fb      	ldr	r3, [r7, #28]
 8014dfe:	4413      	add	r3, r2
 8014e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e04:	691a      	ldr	r2, [r3, #16]
 8014e06:	68bb      	ldr	r3, [r7, #8]
 8014e08:	695b      	ldr	r3, [r3, #20]
 8014e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014e0e:	69b9      	ldr	r1, [r7, #24]
 8014e10:	0148      	lsls	r0, r1, #5
 8014e12:	69f9      	ldr	r1, [r7, #28]
 8014e14:	4401      	add	r1, r0
 8014e16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014e1a:	4313      	orrs	r3, r2
 8014e1c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8014e1e:	68bb      	ldr	r3, [r7, #8]
 8014e20:	78db      	ldrb	r3, [r3, #3]
 8014e22:	2b01      	cmp	r3, #1
 8014e24:	d11f      	bne.n	8014e66 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014e26:	69bb      	ldr	r3, [r7, #24]
 8014e28:	015a      	lsls	r2, r3, #5
 8014e2a:	69fb      	ldr	r3, [r7, #28]
 8014e2c:	4413      	add	r3, r2
 8014e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e32:	691b      	ldr	r3, [r3, #16]
 8014e34:	69ba      	ldr	r2, [r7, #24]
 8014e36:	0151      	lsls	r1, r2, #5
 8014e38:	69fa      	ldr	r2, [r7, #28]
 8014e3a:	440a      	add	r2, r1
 8014e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014e40:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8014e44:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8014e46:	69bb      	ldr	r3, [r7, #24]
 8014e48:	015a      	lsls	r2, r3, #5
 8014e4a:	69fb      	ldr	r3, [r7, #28]
 8014e4c:	4413      	add	r3, r2
 8014e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e52:	691b      	ldr	r3, [r3, #16]
 8014e54:	69ba      	ldr	r2, [r7, #24]
 8014e56:	0151      	lsls	r1, r2, #5
 8014e58:	69fa      	ldr	r2, [r7, #28]
 8014e5a:	440a      	add	r2, r1
 8014e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014e60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014e64:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8014e66:	79fb      	ldrb	r3, [r7, #7]
 8014e68:	2b01      	cmp	r3, #1
 8014e6a:	d14b      	bne.n	8014f04 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014e6c:	68bb      	ldr	r3, [r7, #8]
 8014e6e:	691b      	ldr	r3, [r3, #16]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d009      	beq.n	8014e88 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014e74:	69bb      	ldr	r3, [r7, #24]
 8014e76:	015a      	lsls	r2, r3, #5
 8014e78:	69fb      	ldr	r3, [r7, #28]
 8014e7a:	4413      	add	r3, r2
 8014e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e80:	461a      	mov	r2, r3
 8014e82:	68bb      	ldr	r3, [r7, #8]
 8014e84:	691b      	ldr	r3, [r3, #16]
 8014e86:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014e88:	68bb      	ldr	r3, [r7, #8]
 8014e8a:	78db      	ldrb	r3, [r3, #3]
 8014e8c:	2b01      	cmp	r3, #1
 8014e8e:	d128      	bne.n	8014ee2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014e90:	69fb      	ldr	r3, [r7, #28]
 8014e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e96:	689b      	ldr	r3, [r3, #8]
 8014e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d110      	bne.n	8014ec2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014ea0:	69bb      	ldr	r3, [r7, #24]
 8014ea2:	015a      	lsls	r2, r3, #5
 8014ea4:	69fb      	ldr	r3, [r7, #28]
 8014ea6:	4413      	add	r3, r2
 8014ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	69ba      	ldr	r2, [r7, #24]
 8014eb0:	0151      	lsls	r1, r2, #5
 8014eb2:	69fa      	ldr	r2, [r7, #28]
 8014eb4:	440a      	add	r2, r1
 8014eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014eba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014ebe:	6013      	str	r3, [r2, #0]
 8014ec0:	e00f      	b.n	8014ee2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014ec2:	69bb      	ldr	r3, [r7, #24]
 8014ec4:	015a      	lsls	r2, r3, #5
 8014ec6:	69fb      	ldr	r3, [r7, #28]
 8014ec8:	4413      	add	r3, r2
 8014eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	69ba      	ldr	r2, [r7, #24]
 8014ed2:	0151      	lsls	r1, r2, #5
 8014ed4:	69fa      	ldr	r2, [r7, #28]
 8014ed6:	440a      	add	r2, r1
 8014ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014ee0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014ee2:	69bb      	ldr	r3, [r7, #24]
 8014ee4:	015a      	lsls	r2, r3, #5
 8014ee6:	69fb      	ldr	r3, [r7, #28]
 8014ee8:	4413      	add	r3, r2
 8014eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	69ba      	ldr	r2, [r7, #24]
 8014ef2:	0151      	lsls	r1, r2, #5
 8014ef4:	69fa      	ldr	r2, [r7, #28]
 8014ef6:	440a      	add	r2, r1
 8014ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014efc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014f00:	6013      	str	r3, [r2, #0]
 8014f02:	e133      	b.n	801516c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014f04:	69bb      	ldr	r3, [r7, #24]
 8014f06:	015a      	lsls	r2, r3, #5
 8014f08:	69fb      	ldr	r3, [r7, #28]
 8014f0a:	4413      	add	r3, r2
 8014f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	69ba      	ldr	r2, [r7, #24]
 8014f14:	0151      	lsls	r1, r2, #5
 8014f16:	69fa      	ldr	r2, [r7, #28]
 8014f18:	440a      	add	r2, r1
 8014f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014f1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014f22:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	78db      	ldrb	r3, [r3, #3]
 8014f28:	2b01      	cmp	r3, #1
 8014f2a:	d015      	beq.n	8014f58 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014f2c:	68bb      	ldr	r3, [r7, #8]
 8014f2e:	695b      	ldr	r3, [r3, #20]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	f000 811b 	beq.w	801516c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014f36:	69fb      	ldr	r3, [r7, #28]
 8014f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014f3e:	68bb      	ldr	r3, [r7, #8]
 8014f40:	781b      	ldrb	r3, [r3, #0]
 8014f42:	f003 030f 	and.w	r3, r3, #15
 8014f46:	2101      	movs	r1, #1
 8014f48:	fa01 f303 	lsl.w	r3, r1, r3
 8014f4c:	69f9      	ldr	r1, [r7, #28]
 8014f4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014f52:	4313      	orrs	r3, r2
 8014f54:	634b      	str	r3, [r1, #52]	; 0x34
 8014f56:	e109      	b.n	801516c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014f58:	69fb      	ldr	r3, [r7, #28]
 8014f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f5e:	689b      	ldr	r3, [r3, #8]
 8014f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d110      	bne.n	8014f8a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014f68:	69bb      	ldr	r3, [r7, #24]
 8014f6a:	015a      	lsls	r2, r3, #5
 8014f6c:	69fb      	ldr	r3, [r7, #28]
 8014f6e:	4413      	add	r3, r2
 8014f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	69ba      	ldr	r2, [r7, #24]
 8014f78:	0151      	lsls	r1, r2, #5
 8014f7a:	69fa      	ldr	r2, [r7, #28]
 8014f7c:	440a      	add	r2, r1
 8014f7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014f82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014f86:	6013      	str	r3, [r2, #0]
 8014f88:	e00f      	b.n	8014faa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014f8a:	69bb      	ldr	r3, [r7, #24]
 8014f8c:	015a      	lsls	r2, r3, #5
 8014f8e:	69fb      	ldr	r3, [r7, #28]
 8014f90:	4413      	add	r3, r2
 8014f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	69ba      	ldr	r2, [r7, #24]
 8014f9a:	0151      	lsls	r1, r2, #5
 8014f9c:	69fa      	ldr	r2, [r7, #28]
 8014f9e:	440a      	add	r2, r1
 8014fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014fa8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014faa:	68bb      	ldr	r3, [r7, #8]
 8014fac:	68d9      	ldr	r1, [r3, #12]
 8014fae:	68bb      	ldr	r3, [r7, #8]
 8014fb0:	781a      	ldrb	r2, [r3, #0]
 8014fb2:	68bb      	ldr	r3, [r7, #8]
 8014fb4:	695b      	ldr	r3, [r3, #20]
 8014fb6:	b298      	uxth	r0, r3
 8014fb8:	79fb      	ldrb	r3, [r7, #7]
 8014fba:	9300      	str	r3, [sp, #0]
 8014fbc:	4603      	mov	r3, r0
 8014fbe:	68f8      	ldr	r0, [r7, #12]
 8014fc0:	f000 fa38 	bl	8015434 <USB_WritePacket>
 8014fc4:	e0d2      	b.n	801516c <USB_EPStartXfer+0x480>
 8014fc6:	bf00      	nop
 8014fc8:	e007ffff 	.word	0xe007ffff
 8014fcc:	fff80000 	.word	0xfff80000
 8014fd0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014fd4:	69bb      	ldr	r3, [r7, #24]
 8014fd6:	015a      	lsls	r2, r3, #5
 8014fd8:	69fb      	ldr	r3, [r7, #28]
 8014fda:	4413      	add	r3, r2
 8014fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014fe0:	691a      	ldr	r2, [r3, #16]
 8014fe2:	69bb      	ldr	r3, [r7, #24]
 8014fe4:	0159      	lsls	r1, r3, #5
 8014fe6:	69fb      	ldr	r3, [r7, #28]
 8014fe8:	440b      	add	r3, r1
 8014fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014fee:	4619      	mov	r1, r3
 8014ff0:	4b61      	ldr	r3, [pc, #388]	; (8015178 <USB_EPStartXfer+0x48c>)
 8014ff2:	4013      	ands	r3, r2
 8014ff4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014ff6:	69bb      	ldr	r3, [r7, #24]
 8014ff8:	015a      	lsls	r2, r3, #5
 8014ffa:	69fb      	ldr	r3, [r7, #28]
 8014ffc:	4413      	add	r3, r2
 8014ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015002:	691a      	ldr	r2, [r3, #16]
 8015004:	69bb      	ldr	r3, [r7, #24]
 8015006:	0159      	lsls	r1, r3, #5
 8015008:	69fb      	ldr	r3, [r7, #28]
 801500a:	440b      	add	r3, r1
 801500c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015010:	4619      	mov	r1, r3
 8015012:	4b5a      	ldr	r3, [pc, #360]	; (801517c <USB_EPStartXfer+0x490>)
 8015014:	4013      	ands	r3, r2
 8015016:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8015018:	68bb      	ldr	r3, [r7, #8]
 801501a:	695b      	ldr	r3, [r3, #20]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d123      	bne.n	8015068 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8015020:	69bb      	ldr	r3, [r7, #24]
 8015022:	015a      	lsls	r2, r3, #5
 8015024:	69fb      	ldr	r3, [r7, #28]
 8015026:	4413      	add	r3, r2
 8015028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801502c:	691a      	ldr	r2, [r3, #16]
 801502e:	68bb      	ldr	r3, [r7, #8]
 8015030:	689b      	ldr	r3, [r3, #8]
 8015032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015036:	69b9      	ldr	r1, [r7, #24]
 8015038:	0148      	lsls	r0, r1, #5
 801503a:	69f9      	ldr	r1, [r7, #28]
 801503c:	4401      	add	r1, r0
 801503e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015042:	4313      	orrs	r3, r2
 8015044:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015046:	69bb      	ldr	r3, [r7, #24]
 8015048:	015a      	lsls	r2, r3, #5
 801504a:	69fb      	ldr	r3, [r7, #28]
 801504c:	4413      	add	r3, r2
 801504e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015052:	691b      	ldr	r3, [r3, #16]
 8015054:	69ba      	ldr	r2, [r7, #24]
 8015056:	0151      	lsls	r1, r2, #5
 8015058:	69fa      	ldr	r2, [r7, #28]
 801505a:	440a      	add	r2, r1
 801505c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015060:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015064:	6113      	str	r3, [r2, #16]
 8015066:	e033      	b.n	80150d0 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8015068:	68bb      	ldr	r3, [r7, #8]
 801506a:	695a      	ldr	r2, [r3, #20]
 801506c:	68bb      	ldr	r3, [r7, #8]
 801506e:	689b      	ldr	r3, [r3, #8]
 8015070:	4413      	add	r3, r2
 8015072:	1e5a      	subs	r2, r3, #1
 8015074:	68bb      	ldr	r3, [r7, #8]
 8015076:	689b      	ldr	r3, [r3, #8]
 8015078:	fbb2 f3f3 	udiv	r3, r2, r3
 801507c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801507e:	69bb      	ldr	r3, [r7, #24]
 8015080:	015a      	lsls	r2, r3, #5
 8015082:	69fb      	ldr	r3, [r7, #28]
 8015084:	4413      	add	r3, r2
 8015086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801508a:	691a      	ldr	r2, [r3, #16]
 801508c:	8afb      	ldrh	r3, [r7, #22]
 801508e:	04d9      	lsls	r1, r3, #19
 8015090:	4b3b      	ldr	r3, [pc, #236]	; (8015180 <USB_EPStartXfer+0x494>)
 8015092:	400b      	ands	r3, r1
 8015094:	69b9      	ldr	r1, [r7, #24]
 8015096:	0148      	lsls	r0, r1, #5
 8015098:	69f9      	ldr	r1, [r7, #28]
 801509a:	4401      	add	r1, r0
 801509c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80150a0:	4313      	orrs	r3, r2
 80150a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80150a4:	69bb      	ldr	r3, [r7, #24]
 80150a6:	015a      	lsls	r2, r3, #5
 80150a8:	69fb      	ldr	r3, [r7, #28]
 80150aa:	4413      	add	r3, r2
 80150ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80150b0:	691a      	ldr	r2, [r3, #16]
 80150b2:	68bb      	ldr	r3, [r7, #8]
 80150b4:	689b      	ldr	r3, [r3, #8]
 80150b6:	8af9      	ldrh	r1, [r7, #22]
 80150b8:	fb01 f303 	mul.w	r3, r1, r3
 80150bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80150c0:	69b9      	ldr	r1, [r7, #24]
 80150c2:	0148      	lsls	r0, r1, #5
 80150c4:	69f9      	ldr	r1, [r7, #28]
 80150c6:	4401      	add	r1, r0
 80150c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80150cc:	4313      	orrs	r3, r2
 80150ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80150d0:	79fb      	ldrb	r3, [r7, #7]
 80150d2:	2b01      	cmp	r3, #1
 80150d4:	d10d      	bne.n	80150f2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80150d6:	68bb      	ldr	r3, [r7, #8]
 80150d8:	68db      	ldr	r3, [r3, #12]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d009      	beq.n	80150f2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80150de:	68bb      	ldr	r3, [r7, #8]
 80150e0:	68d9      	ldr	r1, [r3, #12]
 80150e2:	69bb      	ldr	r3, [r7, #24]
 80150e4:	015a      	lsls	r2, r3, #5
 80150e6:	69fb      	ldr	r3, [r7, #28]
 80150e8:	4413      	add	r3, r2
 80150ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80150ee:	460a      	mov	r2, r1
 80150f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80150f2:	68bb      	ldr	r3, [r7, #8]
 80150f4:	78db      	ldrb	r3, [r3, #3]
 80150f6:	2b01      	cmp	r3, #1
 80150f8:	d128      	bne.n	801514c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80150fa:	69fb      	ldr	r3, [r7, #28]
 80150fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015100:	689b      	ldr	r3, [r3, #8]
 8015102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015106:	2b00      	cmp	r3, #0
 8015108:	d110      	bne.n	801512c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801510a:	69bb      	ldr	r3, [r7, #24]
 801510c:	015a      	lsls	r2, r3, #5
 801510e:	69fb      	ldr	r3, [r7, #28]
 8015110:	4413      	add	r3, r2
 8015112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	69ba      	ldr	r2, [r7, #24]
 801511a:	0151      	lsls	r1, r2, #5
 801511c:	69fa      	ldr	r2, [r7, #28]
 801511e:	440a      	add	r2, r1
 8015120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015124:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015128:	6013      	str	r3, [r2, #0]
 801512a:	e00f      	b.n	801514c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801512c:	69bb      	ldr	r3, [r7, #24]
 801512e:	015a      	lsls	r2, r3, #5
 8015130:	69fb      	ldr	r3, [r7, #28]
 8015132:	4413      	add	r3, r2
 8015134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	69ba      	ldr	r2, [r7, #24]
 801513c:	0151      	lsls	r1, r2, #5
 801513e:	69fa      	ldr	r2, [r7, #28]
 8015140:	440a      	add	r2, r1
 8015142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801514a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801514c:	69bb      	ldr	r3, [r7, #24]
 801514e:	015a      	lsls	r2, r3, #5
 8015150:	69fb      	ldr	r3, [r7, #28]
 8015152:	4413      	add	r3, r2
 8015154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	69ba      	ldr	r2, [r7, #24]
 801515c:	0151      	lsls	r1, r2, #5
 801515e:	69fa      	ldr	r2, [r7, #28]
 8015160:	440a      	add	r2, r1
 8015162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015166:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801516a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801516c:	2300      	movs	r3, #0
}
 801516e:	4618      	mov	r0, r3
 8015170:	3720      	adds	r7, #32
 8015172:	46bd      	mov	sp, r7
 8015174:	bd80      	pop	{r7, pc}
 8015176:	bf00      	nop
 8015178:	fff80000 	.word	0xfff80000
 801517c:	e007ffff 	.word	0xe007ffff
 8015180:	1ff80000 	.word	0x1ff80000

08015184 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8015184:	b480      	push	{r7}
 8015186:	b087      	sub	sp, #28
 8015188:	af00      	add	r7, sp, #0
 801518a:	60f8      	str	r0, [r7, #12]
 801518c:	60b9      	str	r1, [r7, #8]
 801518e:	4613      	mov	r3, r2
 8015190:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8015196:	68bb      	ldr	r3, [r7, #8]
 8015198:	781b      	ldrb	r3, [r3, #0]
 801519a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801519c:	68bb      	ldr	r3, [r7, #8]
 801519e:	785b      	ldrb	r3, [r3, #1]
 80151a0:	2b01      	cmp	r3, #1
 80151a2:	f040 80cd 	bne.w	8015340 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80151a6:	68bb      	ldr	r3, [r7, #8]
 80151a8:	695b      	ldr	r3, [r3, #20]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d132      	bne.n	8015214 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80151ae:	693b      	ldr	r3, [r7, #16]
 80151b0:	015a      	lsls	r2, r3, #5
 80151b2:	697b      	ldr	r3, [r7, #20]
 80151b4:	4413      	add	r3, r2
 80151b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80151ba:	691a      	ldr	r2, [r3, #16]
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	0159      	lsls	r1, r3, #5
 80151c0:	697b      	ldr	r3, [r7, #20]
 80151c2:	440b      	add	r3, r1
 80151c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80151c8:	4619      	mov	r1, r3
 80151ca:	4b98      	ldr	r3, [pc, #608]	; (801542c <USB_EP0StartXfer+0x2a8>)
 80151cc:	4013      	ands	r3, r2
 80151ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	015a      	lsls	r2, r3, #5
 80151d4:	697b      	ldr	r3, [r7, #20]
 80151d6:	4413      	add	r3, r2
 80151d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80151dc:	691b      	ldr	r3, [r3, #16]
 80151de:	693a      	ldr	r2, [r7, #16]
 80151e0:	0151      	lsls	r1, r2, #5
 80151e2:	697a      	ldr	r2, [r7, #20]
 80151e4:	440a      	add	r2, r1
 80151e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80151ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80151ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80151f0:	693b      	ldr	r3, [r7, #16]
 80151f2:	015a      	lsls	r2, r3, #5
 80151f4:	697b      	ldr	r3, [r7, #20]
 80151f6:	4413      	add	r3, r2
 80151f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80151fc:	691a      	ldr	r2, [r3, #16]
 80151fe:	693b      	ldr	r3, [r7, #16]
 8015200:	0159      	lsls	r1, r3, #5
 8015202:	697b      	ldr	r3, [r7, #20]
 8015204:	440b      	add	r3, r1
 8015206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801520a:	4619      	mov	r1, r3
 801520c:	4b88      	ldr	r3, [pc, #544]	; (8015430 <USB_EP0StartXfer+0x2ac>)
 801520e:	4013      	ands	r3, r2
 8015210:	610b      	str	r3, [r1, #16]
 8015212:	e04e      	b.n	80152b2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	015a      	lsls	r2, r3, #5
 8015218:	697b      	ldr	r3, [r7, #20]
 801521a:	4413      	add	r3, r2
 801521c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015220:	691a      	ldr	r2, [r3, #16]
 8015222:	693b      	ldr	r3, [r7, #16]
 8015224:	0159      	lsls	r1, r3, #5
 8015226:	697b      	ldr	r3, [r7, #20]
 8015228:	440b      	add	r3, r1
 801522a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801522e:	4619      	mov	r1, r3
 8015230:	4b7f      	ldr	r3, [pc, #508]	; (8015430 <USB_EP0StartXfer+0x2ac>)
 8015232:	4013      	ands	r3, r2
 8015234:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015236:	693b      	ldr	r3, [r7, #16]
 8015238:	015a      	lsls	r2, r3, #5
 801523a:	697b      	ldr	r3, [r7, #20]
 801523c:	4413      	add	r3, r2
 801523e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015242:	691a      	ldr	r2, [r3, #16]
 8015244:	693b      	ldr	r3, [r7, #16]
 8015246:	0159      	lsls	r1, r3, #5
 8015248:	697b      	ldr	r3, [r7, #20]
 801524a:	440b      	add	r3, r1
 801524c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015250:	4619      	mov	r1, r3
 8015252:	4b76      	ldr	r3, [pc, #472]	; (801542c <USB_EP0StartXfer+0x2a8>)
 8015254:	4013      	ands	r3, r2
 8015256:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8015258:	68bb      	ldr	r3, [r7, #8]
 801525a:	695a      	ldr	r2, [r3, #20]
 801525c:	68bb      	ldr	r3, [r7, #8]
 801525e:	689b      	ldr	r3, [r3, #8]
 8015260:	429a      	cmp	r2, r3
 8015262:	d903      	bls.n	801526c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8015264:	68bb      	ldr	r3, [r7, #8]
 8015266:	689a      	ldr	r2, [r3, #8]
 8015268:	68bb      	ldr	r3, [r7, #8]
 801526a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801526c:	693b      	ldr	r3, [r7, #16]
 801526e:	015a      	lsls	r2, r3, #5
 8015270:	697b      	ldr	r3, [r7, #20]
 8015272:	4413      	add	r3, r2
 8015274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015278:	691b      	ldr	r3, [r3, #16]
 801527a:	693a      	ldr	r2, [r7, #16]
 801527c:	0151      	lsls	r1, r2, #5
 801527e:	697a      	ldr	r2, [r7, #20]
 8015280:	440a      	add	r2, r1
 8015282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015286:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801528a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801528c:	693b      	ldr	r3, [r7, #16]
 801528e:	015a      	lsls	r2, r3, #5
 8015290:	697b      	ldr	r3, [r7, #20]
 8015292:	4413      	add	r3, r2
 8015294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015298:	691a      	ldr	r2, [r3, #16]
 801529a:	68bb      	ldr	r3, [r7, #8]
 801529c:	695b      	ldr	r3, [r3, #20]
 801529e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80152a2:	6939      	ldr	r1, [r7, #16]
 80152a4:	0148      	lsls	r0, r1, #5
 80152a6:	6979      	ldr	r1, [r7, #20]
 80152a8:	4401      	add	r1, r0
 80152aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80152ae:	4313      	orrs	r3, r2
 80152b0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80152b2:	79fb      	ldrb	r3, [r7, #7]
 80152b4:	2b01      	cmp	r3, #1
 80152b6:	d11e      	bne.n	80152f6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80152b8:	68bb      	ldr	r3, [r7, #8]
 80152ba:	691b      	ldr	r3, [r3, #16]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d009      	beq.n	80152d4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80152c0:	693b      	ldr	r3, [r7, #16]
 80152c2:	015a      	lsls	r2, r3, #5
 80152c4:	697b      	ldr	r3, [r7, #20]
 80152c6:	4413      	add	r3, r2
 80152c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80152cc:	461a      	mov	r2, r3
 80152ce:	68bb      	ldr	r3, [r7, #8]
 80152d0:	691b      	ldr	r3, [r3, #16]
 80152d2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80152d4:	693b      	ldr	r3, [r7, #16]
 80152d6:	015a      	lsls	r2, r3, #5
 80152d8:	697b      	ldr	r3, [r7, #20]
 80152da:	4413      	add	r3, r2
 80152dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	693a      	ldr	r2, [r7, #16]
 80152e4:	0151      	lsls	r1, r2, #5
 80152e6:	697a      	ldr	r2, [r7, #20]
 80152e8:	440a      	add	r2, r1
 80152ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80152ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80152f2:	6013      	str	r3, [r2, #0]
 80152f4:	e092      	b.n	801541c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80152f6:	693b      	ldr	r3, [r7, #16]
 80152f8:	015a      	lsls	r2, r3, #5
 80152fa:	697b      	ldr	r3, [r7, #20]
 80152fc:	4413      	add	r3, r2
 80152fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	693a      	ldr	r2, [r7, #16]
 8015306:	0151      	lsls	r1, r2, #5
 8015308:	697a      	ldr	r2, [r7, #20]
 801530a:	440a      	add	r2, r1
 801530c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015310:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015314:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8015316:	68bb      	ldr	r3, [r7, #8]
 8015318:	695b      	ldr	r3, [r3, #20]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d07e      	beq.n	801541c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801531e:	697b      	ldr	r3, [r7, #20]
 8015320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015326:	68bb      	ldr	r3, [r7, #8]
 8015328:	781b      	ldrb	r3, [r3, #0]
 801532a:	f003 030f 	and.w	r3, r3, #15
 801532e:	2101      	movs	r1, #1
 8015330:	fa01 f303 	lsl.w	r3, r1, r3
 8015334:	6979      	ldr	r1, [r7, #20]
 8015336:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801533a:	4313      	orrs	r3, r2
 801533c:	634b      	str	r3, [r1, #52]	; 0x34
 801533e:	e06d      	b.n	801541c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8015340:	693b      	ldr	r3, [r7, #16]
 8015342:	015a      	lsls	r2, r3, #5
 8015344:	697b      	ldr	r3, [r7, #20]
 8015346:	4413      	add	r3, r2
 8015348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801534c:	691a      	ldr	r2, [r3, #16]
 801534e:	693b      	ldr	r3, [r7, #16]
 8015350:	0159      	lsls	r1, r3, #5
 8015352:	697b      	ldr	r3, [r7, #20]
 8015354:	440b      	add	r3, r1
 8015356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801535a:	4619      	mov	r1, r3
 801535c:	4b34      	ldr	r3, [pc, #208]	; (8015430 <USB_EP0StartXfer+0x2ac>)
 801535e:	4013      	ands	r3, r2
 8015360:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8015362:	693b      	ldr	r3, [r7, #16]
 8015364:	015a      	lsls	r2, r3, #5
 8015366:	697b      	ldr	r3, [r7, #20]
 8015368:	4413      	add	r3, r2
 801536a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801536e:	691a      	ldr	r2, [r3, #16]
 8015370:	693b      	ldr	r3, [r7, #16]
 8015372:	0159      	lsls	r1, r3, #5
 8015374:	697b      	ldr	r3, [r7, #20]
 8015376:	440b      	add	r3, r1
 8015378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801537c:	4619      	mov	r1, r3
 801537e:	4b2b      	ldr	r3, [pc, #172]	; (801542c <USB_EP0StartXfer+0x2a8>)
 8015380:	4013      	ands	r3, r2
 8015382:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8015384:	68bb      	ldr	r3, [r7, #8]
 8015386:	695b      	ldr	r3, [r3, #20]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d003      	beq.n	8015394 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801538c:	68bb      	ldr	r3, [r7, #8]
 801538e:	689a      	ldr	r2, [r3, #8]
 8015390:	68bb      	ldr	r3, [r7, #8]
 8015392:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015394:	693b      	ldr	r3, [r7, #16]
 8015396:	015a      	lsls	r2, r3, #5
 8015398:	697b      	ldr	r3, [r7, #20]
 801539a:	4413      	add	r3, r2
 801539c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80153a0:	691b      	ldr	r3, [r3, #16]
 80153a2:	693a      	ldr	r2, [r7, #16]
 80153a4:	0151      	lsls	r1, r2, #5
 80153a6:	697a      	ldr	r2, [r7, #20]
 80153a8:	440a      	add	r2, r1
 80153aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80153ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80153b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80153b4:	693b      	ldr	r3, [r7, #16]
 80153b6:	015a      	lsls	r2, r3, #5
 80153b8:	697b      	ldr	r3, [r7, #20]
 80153ba:	4413      	add	r3, r2
 80153bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80153c0:	691a      	ldr	r2, [r3, #16]
 80153c2:	68bb      	ldr	r3, [r7, #8]
 80153c4:	689b      	ldr	r3, [r3, #8]
 80153c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80153ca:	6939      	ldr	r1, [r7, #16]
 80153cc:	0148      	lsls	r0, r1, #5
 80153ce:	6979      	ldr	r1, [r7, #20]
 80153d0:	4401      	add	r1, r0
 80153d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80153d6:	4313      	orrs	r3, r2
 80153d8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80153da:	79fb      	ldrb	r3, [r7, #7]
 80153dc:	2b01      	cmp	r3, #1
 80153de:	d10d      	bne.n	80153fc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80153e0:	68bb      	ldr	r3, [r7, #8]
 80153e2:	68db      	ldr	r3, [r3, #12]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d009      	beq.n	80153fc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80153e8:	68bb      	ldr	r3, [r7, #8]
 80153ea:	68d9      	ldr	r1, [r3, #12]
 80153ec:	693b      	ldr	r3, [r7, #16]
 80153ee:	015a      	lsls	r2, r3, #5
 80153f0:	697b      	ldr	r3, [r7, #20]
 80153f2:	4413      	add	r3, r2
 80153f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80153f8:	460a      	mov	r2, r1
 80153fa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80153fc:	693b      	ldr	r3, [r7, #16]
 80153fe:	015a      	lsls	r2, r3, #5
 8015400:	697b      	ldr	r3, [r7, #20]
 8015402:	4413      	add	r3, r2
 8015404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	693a      	ldr	r2, [r7, #16]
 801540c:	0151      	lsls	r1, r2, #5
 801540e:	697a      	ldr	r2, [r7, #20]
 8015410:	440a      	add	r2, r1
 8015412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015416:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801541a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801541c:	2300      	movs	r3, #0
}
 801541e:	4618      	mov	r0, r3
 8015420:	371c      	adds	r7, #28
 8015422:	46bd      	mov	sp, r7
 8015424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015428:	4770      	bx	lr
 801542a:	bf00      	nop
 801542c:	e007ffff 	.word	0xe007ffff
 8015430:	fff80000 	.word	0xfff80000

08015434 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8015434:	b480      	push	{r7}
 8015436:	b089      	sub	sp, #36	; 0x24
 8015438:	af00      	add	r7, sp, #0
 801543a:	60f8      	str	r0, [r7, #12]
 801543c:	60b9      	str	r1, [r7, #8]
 801543e:	4611      	mov	r1, r2
 8015440:	461a      	mov	r2, r3
 8015442:	460b      	mov	r3, r1
 8015444:	71fb      	strb	r3, [r7, #7]
 8015446:	4613      	mov	r3, r2
 8015448:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 801544e:	68bb      	ldr	r3, [r7, #8]
 8015450:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8015452:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015456:	2b00      	cmp	r3, #0
 8015458:	d11a      	bne.n	8015490 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801545a:	88bb      	ldrh	r3, [r7, #4]
 801545c:	3303      	adds	r3, #3
 801545e:	089b      	lsrs	r3, r3, #2
 8015460:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8015462:	2300      	movs	r3, #0
 8015464:	61bb      	str	r3, [r7, #24]
 8015466:	e00f      	b.n	8015488 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8015468:	79fb      	ldrb	r3, [r7, #7]
 801546a:	031a      	lsls	r2, r3, #12
 801546c:	697b      	ldr	r3, [r7, #20]
 801546e:	4413      	add	r3, r2
 8015470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015474:	461a      	mov	r2, r3
 8015476:	69fb      	ldr	r3, [r7, #28]
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	6013      	str	r3, [r2, #0]
      pSrc++;
 801547c:	69fb      	ldr	r3, [r7, #28]
 801547e:	3304      	adds	r3, #4
 8015480:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8015482:	69bb      	ldr	r3, [r7, #24]
 8015484:	3301      	adds	r3, #1
 8015486:	61bb      	str	r3, [r7, #24]
 8015488:	69ba      	ldr	r2, [r7, #24]
 801548a:	693b      	ldr	r3, [r7, #16]
 801548c:	429a      	cmp	r2, r3
 801548e:	d3eb      	bcc.n	8015468 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8015490:	2300      	movs	r3, #0
}
 8015492:	4618      	mov	r0, r3
 8015494:	3724      	adds	r7, #36	; 0x24
 8015496:	46bd      	mov	sp, r7
 8015498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549c:	4770      	bx	lr

0801549e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801549e:	b480      	push	{r7}
 80154a0:	b089      	sub	sp, #36	; 0x24
 80154a2:	af00      	add	r7, sp, #0
 80154a4:	60f8      	str	r0, [r7, #12]
 80154a6:	60b9      	str	r1, [r7, #8]
 80154a8:	4613      	mov	r3, r2
 80154aa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80154b0:	68bb      	ldr	r3, [r7, #8]
 80154b2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80154b4:	88fb      	ldrh	r3, [r7, #6]
 80154b6:	3303      	adds	r3, #3
 80154b8:	089b      	lsrs	r3, r3, #2
 80154ba:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80154bc:	2300      	movs	r3, #0
 80154be:	61bb      	str	r3, [r7, #24]
 80154c0:	e00b      	b.n	80154da <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80154c2:	697b      	ldr	r3, [r7, #20]
 80154c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80154c8:	681a      	ldr	r2, [r3, #0]
 80154ca:	69fb      	ldr	r3, [r7, #28]
 80154cc:	601a      	str	r2, [r3, #0]
    pDest++;
 80154ce:	69fb      	ldr	r3, [r7, #28]
 80154d0:	3304      	adds	r3, #4
 80154d2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80154d4:	69bb      	ldr	r3, [r7, #24]
 80154d6:	3301      	adds	r3, #1
 80154d8:	61bb      	str	r3, [r7, #24]
 80154da:	69ba      	ldr	r2, [r7, #24]
 80154dc:	693b      	ldr	r3, [r7, #16]
 80154de:	429a      	cmp	r2, r3
 80154e0:	d3ef      	bcc.n	80154c2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80154e2:	69fb      	ldr	r3, [r7, #28]
}
 80154e4:	4618      	mov	r0, r3
 80154e6:	3724      	adds	r7, #36	; 0x24
 80154e8:	46bd      	mov	sp, r7
 80154ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ee:	4770      	bx	lr

080154f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80154f0:	b480      	push	{r7}
 80154f2:	b085      	sub	sp, #20
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
 80154f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80154fe:	683b      	ldr	r3, [r7, #0]
 8015500:	781b      	ldrb	r3, [r3, #0]
 8015502:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015504:	683b      	ldr	r3, [r7, #0]
 8015506:	785b      	ldrb	r3, [r3, #1]
 8015508:	2b01      	cmp	r3, #1
 801550a:	d12c      	bne.n	8015566 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801550c:	68bb      	ldr	r3, [r7, #8]
 801550e:	015a      	lsls	r2, r3, #5
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	4413      	add	r3, r2
 8015514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	2b00      	cmp	r3, #0
 801551c:	db12      	blt.n	8015544 <USB_EPSetStall+0x54>
 801551e:	68bb      	ldr	r3, [r7, #8]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d00f      	beq.n	8015544 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8015524:	68bb      	ldr	r3, [r7, #8]
 8015526:	015a      	lsls	r2, r3, #5
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	4413      	add	r3, r2
 801552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	68ba      	ldr	r2, [r7, #8]
 8015534:	0151      	lsls	r1, r2, #5
 8015536:	68fa      	ldr	r2, [r7, #12]
 8015538:	440a      	add	r2, r1
 801553a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801553e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015542:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	015a      	lsls	r2, r3, #5
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	4413      	add	r3, r2
 801554c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	68ba      	ldr	r2, [r7, #8]
 8015554:	0151      	lsls	r1, r2, #5
 8015556:	68fa      	ldr	r2, [r7, #12]
 8015558:	440a      	add	r2, r1
 801555a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801555e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015562:	6013      	str	r3, [r2, #0]
 8015564:	e02b      	b.n	80155be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015566:	68bb      	ldr	r3, [r7, #8]
 8015568:	015a      	lsls	r2, r3, #5
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	4413      	add	r3, r2
 801556e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	2b00      	cmp	r3, #0
 8015576:	db12      	blt.n	801559e <USB_EPSetStall+0xae>
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	2b00      	cmp	r3, #0
 801557c:	d00f      	beq.n	801559e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801557e:	68bb      	ldr	r3, [r7, #8]
 8015580:	015a      	lsls	r2, r3, #5
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	4413      	add	r3, r2
 8015586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	68ba      	ldr	r2, [r7, #8]
 801558e:	0151      	lsls	r1, r2, #5
 8015590:	68fa      	ldr	r2, [r7, #12]
 8015592:	440a      	add	r2, r1
 8015594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015598:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801559c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801559e:	68bb      	ldr	r3, [r7, #8]
 80155a0:	015a      	lsls	r2, r3, #5
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	4413      	add	r3, r2
 80155a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	68ba      	ldr	r2, [r7, #8]
 80155ae:	0151      	lsls	r1, r2, #5
 80155b0:	68fa      	ldr	r2, [r7, #12]
 80155b2:	440a      	add	r2, r1
 80155b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80155b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80155bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80155be:	2300      	movs	r3, #0
}
 80155c0:	4618      	mov	r0, r3
 80155c2:	3714      	adds	r7, #20
 80155c4:	46bd      	mov	sp, r7
 80155c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ca:	4770      	bx	lr

080155cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80155cc:	b480      	push	{r7}
 80155ce:	b085      	sub	sp, #20
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]
 80155d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80155da:	683b      	ldr	r3, [r7, #0]
 80155dc:	781b      	ldrb	r3, [r3, #0]
 80155de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80155e0:	683b      	ldr	r3, [r7, #0]
 80155e2:	785b      	ldrb	r3, [r3, #1]
 80155e4:	2b01      	cmp	r3, #1
 80155e6:	d128      	bne.n	801563a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80155e8:	68bb      	ldr	r3, [r7, #8]
 80155ea:	015a      	lsls	r2, r3, #5
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	4413      	add	r3, r2
 80155f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	68ba      	ldr	r2, [r7, #8]
 80155f8:	0151      	lsls	r1, r2, #5
 80155fa:	68fa      	ldr	r2, [r7, #12]
 80155fc:	440a      	add	r2, r1
 80155fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015602:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8015606:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015608:	683b      	ldr	r3, [r7, #0]
 801560a:	78db      	ldrb	r3, [r3, #3]
 801560c:	2b03      	cmp	r3, #3
 801560e:	d003      	beq.n	8015618 <USB_EPClearStall+0x4c>
 8015610:	683b      	ldr	r3, [r7, #0]
 8015612:	78db      	ldrb	r3, [r3, #3]
 8015614:	2b02      	cmp	r3, #2
 8015616:	d138      	bne.n	801568a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015618:	68bb      	ldr	r3, [r7, #8]
 801561a:	015a      	lsls	r2, r3, #5
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	4413      	add	r3, r2
 8015620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	68ba      	ldr	r2, [r7, #8]
 8015628:	0151      	lsls	r1, r2, #5
 801562a:	68fa      	ldr	r2, [r7, #12]
 801562c:	440a      	add	r2, r1
 801562e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015636:	6013      	str	r3, [r2, #0]
 8015638:	e027      	b.n	801568a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801563a:	68bb      	ldr	r3, [r7, #8]
 801563c:	015a      	lsls	r2, r3, #5
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	4413      	add	r3, r2
 8015642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	68ba      	ldr	r2, [r7, #8]
 801564a:	0151      	lsls	r1, r2, #5
 801564c:	68fa      	ldr	r2, [r7, #12]
 801564e:	440a      	add	r2, r1
 8015650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015654:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8015658:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801565a:	683b      	ldr	r3, [r7, #0]
 801565c:	78db      	ldrb	r3, [r3, #3]
 801565e:	2b03      	cmp	r3, #3
 8015660:	d003      	beq.n	801566a <USB_EPClearStall+0x9e>
 8015662:	683b      	ldr	r3, [r7, #0]
 8015664:	78db      	ldrb	r3, [r3, #3]
 8015666:	2b02      	cmp	r3, #2
 8015668:	d10f      	bne.n	801568a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801566a:	68bb      	ldr	r3, [r7, #8]
 801566c:	015a      	lsls	r2, r3, #5
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	4413      	add	r3, r2
 8015672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	68ba      	ldr	r2, [r7, #8]
 801567a:	0151      	lsls	r1, r2, #5
 801567c:	68fa      	ldr	r2, [r7, #12]
 801567e:	440a      	add	r2, r1
 8015680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015688:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801568a:	2300      	movs	r3, #0
}
 801568c:	4618      	mov	r0, r3
 801568e:	3714      	adds	r7, #20
 8015690:	46bd      	mov	sp, r7
 8015692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015696:	4770      	bx	lr

08015698 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8015698:	b480      	push	{r7}
 801569a:	b085      	sub	sp, #20
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
 80156a0:	460b      	mov	r3, r1
 80156a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	68fa      	ldr	r2, [r7, #12]
 80156b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80156b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80156ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80156c2:	681a      	ldr	r2, [r3, #0]
 80156c4:	78fb      	ldrb	r3, [r7, #3]
 80156c6:	011b      	lsls	r3, r3, #4
 80156c8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80156cc:	68f9      	ldr	r1, [r7, #12]
 80156ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80156d2:	4313      	orrs	r3, r2
 80156d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80156d6:	2300      	movs	r3, #0
}
 80156d8:	4618      	mov	r0, r3
 80156da:	3714      	adds	r7, #20
 80156dc:	46bd      	mov	sp, r7
 80156de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e2:	4770      	bx	lr

080156e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80156e4:	b480      	push	{r7}
 80156e6:	b085      	sub	sp, #20
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	68fa      	ldr	r2, [r7, #12]
 80156fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80156fe:	f023 0303 	bic.w	r3, r3, #3
 8015702:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801570a:	685b      	ldr	r3, [r3, #4]
 801570c:	68fa      	ldr	r2, [r7, #12]
 801570e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015712:	f023 0302 	bic.w	r3, r3, #2
 8015716:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015718:	2300      	movs	r3, #0
}
 801571a:	4618      	mov	r0, r3
 801571c:	3714      	adds	r7, #20
 801571e:	46bd      	mov	sp, r7
 8015720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015724:	4770      	bx	lr

08015726 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8015726:	b480      	push	{r7}
 8015728:	b085      	sub	sp, #20
 801572a:	af00      	add	r7, sp, #0
 801572c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	68fa      	ldr	r2, [r7, #12]
 801573c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015740:	f023 0303 	bic.w	r3, r3, #3
 8015744:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801574c:	685b      	ldr	r3, [r3, #4]
 801574e:	68fa      	ldr	r2, [r7, #12]
 8015750:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015754:	f043 0302 	orr.w	r3, r3, #2
 8015758:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801575a:	2300      	movs	r3, #0
}
 801575c:	4618      	mov	r0, r3
 801575e:	3714      	adds	r7, #20
 8015760:	46bd      	mov	sp, r7
 8015762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015766:	4770      	bx	lr

08015768 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8015768:	b480      	push	{r7}
 801576a:	b085      	sub	sp, #20
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	695b      	ldr	r3, [r3, #20]
 8015774:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	699b      	ldr	r3, [r3, #24]
 801577a:	68fa      	ldr	r2, [r7, #12]
 801577c:	4013      	ands	r3, r2
 801577e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015780:	68fb      	ldr	r3, [r7, #12]
}
 8015782:	4618      	mov	r0, r3
 8015784:	3714      	adds	r7, #20
 8015786:	46bd      	mov	sp, r7
 8015788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578c:	4770      	bx	lr

0801578e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801578e:	b480      	push	{r7}
 8015790:	b085      	sub	sp, #20
 8015792:	af00      	add	r7, sp, #0
 8015794:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80157a0:	699b      	ldr	r3, [r3, #24]
 80157a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80157aa:	69db      	ldr	r3, [r3, #28]
 80157ac:	68ba      	ldr	r2, [r7, #8]
 80157ae:	4013      	ands	r3, r2
 80157b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80157b2:	68bb      	ldr	r3, [r7, #8]
 80157b4:	0c1b      	lsrs	r3, r3, #16
}
 80157b6:	4618      	mov	r0, r3
 80157b8:	3714      	adds	r7, #20
 80157ba:	46bd      	mov	sp, r7
 80157bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c0:	4770      	bx	lr

080157c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80157c2:	b480      	push	{r7}
 80157c4:	b085      	sub	sp, #20
 80157c6:	af00      	add	r7, sp, #0
 80157c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80157d4:	699b      	ldr	r3, [r3, #24]
 80157d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80157de:	69db      	ldr	r3, [r3, #28]
 80157e0:	68ba      	ldr	r2, [r7, #8]
 80157e2:	4013      	ands	r3, r2
 80157e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80157e6:	68bb      	ldr	r3, [r7, #8]
 80157e8:	b29b      	uxth	r3, r3
}
 80157ea:	4618      	mov	r0, r3
 80157ec:	3714      	adds	r7, #20
 80157ee:	46bd      	mov	sp, r7
 80157f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f4:	4770      	bx	lr

080157f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80157f6:	b480      	push	{r7}
 80157f8:	b085      	sub	sp, #20
 80157fa:	af00      	add	r7, sp, #0
 80157fc:	6078      	str	r0, [r7, #4]
 80157fe:	460b      	mov	r3, r1
 8015800:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8015806:	78fb      	ldrb	r3, [r7, #3]
 8015808:	015a      	lsls	r2, r3, #5
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	4413      	add	r3, r2
 801580e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015812:	689b      	ldr	r3, [r3, #8]
 8015814:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801581c:	695b      	ldr	r3, [r3, #20]
 801581e:	68ba      	ldr	r2, [r7, #8]
 8015820:	4013      	ands	r3, r2
 8015822:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015824:	68bb      	ldr	r3, [r7, #8]
}
 8015826:	4618      	mov	r0, r3
 8015828:	3714      	adds	r7, #20
 801582a:	46bd      	mov	sp, r7
 801582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015830:	4770      	bx	lr

08015832 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015832:	b480      	push	{r7}
 8015834:	b087      	sub	sp, #28
 8015836:	af00      	add	r7, sp, #0
 8015838:	6078      	str	r0, [r7, #4]
 801583a:	460b      	mov	r3, r1
 801583c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8015842:	697b      	ldr	r3, [r7, #20]
 8015844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015848:	691b      	ldr	r3, [r3, #16]
 801584a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801584c:	697b      	ldr	r3, [r7, #20]
 801584e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015854:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8015856:	78fb      	ldrb	r3, [r7, #3]
 8015858:	f003 030f 	and.w	r3, r3, #15
 801585c:	68fa      	ldr	r2, [r7, #12]
 801585e:	fa22 f303 	lsr.w	r3, r2, r3
 8015862:	01db      	lsls	r3, r3, #7
 8015864:	b2db      	uxtb	r3, r3
 8015866:	693a      	ldr	r2, [r7, #16]
 8015868:	4313      	orrs	r3, r2
 801586a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801586c:	78fb      	ldrb	r3, [r7, #3]
 801586e:	015a      	lsls	r2, r3, #5
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	4413      	add	r3, r2
 8015874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015878:	689b      	ldr	r3, [r3, #8]
 801587a:	693a      	ldr	r2, [r7, #16]
 801587c:	4013      	ands	r3, r2
 801587e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015880:	68bb      	ldr	r3, [r7, #8]
}
 8015882:	4618      	mov	r0, r3
 8015884:	371c      	adds	r7, #28
 8015886:	46bd      	mov	sp, r7
 8015888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801588c:	4770      	bx	lr

0801588e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801588e:	b480      	push	{r7}
 8015890:	b083      	sub	sp, #12
 8015892:	af00      	add	r7, sp, #0
 8015894:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	695b      	ldr	r3, [r3, #20]
 801589a:	f003 0301 	and.w	r3, r3, #1
}
 801589e:	4618      	mov	r0, r3
 80158a0:	370c      	adds	r7, #12
 80158a2:	46bd      	mov	sp, r7
 80158a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a8:	4770      	bx	lr
	...

080158ac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80158ac:	b480      	push	{r7}
 80158ae:	b085      	sub	sp, #20
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80158be:	681a      	ldr	r2, [r3, #0]
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80158c6:	4619      	mov	r1, r3
 80158c8:	4b09      	ldr	r3, [pc, #36]	; (80158f0 <USB_ActivateSetup+0x44>)
 80158ca:	4013      	ands	r3, r2
 80158cc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80158d4:	685b      	ldr	r3, [r3, #4]
 80158d6:	68fa      	ldr	r2, [r7, #12]
 80158d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80158dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80158e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80158e2:	2300      	movs	r3, #0
}
 80158e4:	4618      	mov	r0, r3
 80158e6:	3714      	adds	r7, #20
 80158e8:	46bd      	mov	sp, r7
 80158ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ee:	4770      	bx	lr
 80158f0:	fffff800 	.word	0xfffff800

080158f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80158f4:	b480      	push	{r7}
 80158f6:	b087      	sub	sp, #28
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	60f8      	str	r0, [r7, #12]
 80158fc:	460b      	mov	r3, r1
 80158fe:	607a      	str	r2, [r7, #4]
 8015900:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	333c      	adds	r3, #60	; 0x3c
 801590a:	3304      	adds	r3, #4
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8015910:	693b      	ldr	r3, [r7, #16]
 8015912:	4a26      	ldr	r2, [pc, #152]	; (80159ac <USB_EP0_OutStart+0xb8>)
 8015914:	4293      	cmp	r3, r2
 8015916:	d90a      	bls.n	801592e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015918:	697b      	ldr	r3, [r7, #20]
 801591a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015928:	d101      	bne.n	801592e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801592a:	2300      	movs	r3, #0
 801592c:	e037      	b.n	801599e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801592e:	697b      	ldr	r3, [r7, #20]
 8015930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015934:	461a      	mov	r2, r3
 8015936:	2300      	movs	r3, #0
 8015938:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801593a:	697b      	ldr	r3, [r7, #20]
 801593c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015940:	691b      	ldr	r3, [r3, #16]
 8015942:	697a      	ldr	r2, [r7, #20]
 8015944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015948:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801594c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801594e:	697b      	ldr	r3, [r7, #20]
 8015950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015954:	691b      	ldr	r3, [r3, #16]
 8015956:	697a      	ldr	r2, [r7, #20]
 8015958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801595c:	f043 0318 	orr.w	r3, r3, #24
 8015960:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8015962:	697b      	ldr	r3, [r7, #20]
 8015964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015968:	691b      	ldr	r3, [r3, #16]
 801596a:	697a      	ldr	r2, [r7, #20]
 801596c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015970:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8015974:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8015976:	7afb      	ldrb	r3, [r7, #11]
 8015978:	2b01      	cmp	r3, #1
 801597a:	d10f      	bne.n	801599c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801597c:	697b      	ldr	r3, [r7, #20]
 801597e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015982:	461a      	mov	r2, r3
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8015988:	697b      	ldr	r3, [r7, #20]
 801598a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	697a      	ldr	r2, [r7, #20]
 8015992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015996:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801599a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801599c:	2300      	movs	r3, #0
}
 801599e:	4618      	mov	r0, r3
 80159a0:	371c      	adds	r7, #28
 80159a2:	46bd      	mov	sp, r7
 80159a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a8:	4770      	bx	lr
 80159aa:	bf00      	nop
 80159ac:	4f54300a 	.word	0x4f54300a

080159b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80159b0:	b480      	push	{r7}
 80159b2:	b085      	sub	sp, #20
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80159b8:	2300      	movs	r3, #0
 80159ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	3301      	adds	r3, #1
 80159c0:	60fb      	str	r3, [r7, #12]
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	4a13      	ldr	r2, [pc, #76]	; (8015a14 <USB_CoreReset+0x64>)
 80159c6:	4293      	cmp	r3, r2
 80159c8:	d901      	bls.n	80159ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80159ca:	2303      	movs	r3, #3
 80159cc:	e01b      	b.n	8015a06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	691b      	ldr	r3, [r3, #16]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	daf2      	bge.n	80159bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80159d6:	2300      	movs	r3, #0
 80159d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	691b      	ldr	r3, [r3, #16]
 80159de:	f043 0201 	orr.w	r2, r3, #1
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	3301      	adds	r3, #1
 80159ea:	60fb      	str	r3, [r7, #12]
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	4a09      	ldr	r2, [pc, #36]	; (8015a14 <USB_CoreReset+0x64>)
 80159f0:	4293      	cmp	r3, r2
 80159f2:	d901      	bls.n	80159f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80159f4:	2303      	movs	r3, #3
 80159f6:	e006      	b.n	8015a06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	691b      	ldr	r3, [r3, #16]
 80159fc:	f003 0301 	and.w	r3, r3, #1
 8015a00:	2b01      	cmp	r3, #1
 8015a02:	d0f0      	beq.n	80159e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8015a04:	2300      	movs	r3, #0
}
 8015a06:	4618      	mov	r0, r3
 8015a08:	3714      	adds	r7, #20
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a10:	4770      	bx	lr
 8015a12:	bf00      	nop
 8015a14:	00030d40 	.word	0x00030d40

08015a18 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8015a1c:	4904      	ldr	r1, [pc, #16]	; (8015a30 <MX_FATFS_Init+0x18>)
 8015a1e:	4805      	ldr	r0, [pc, #20]	; (8015a34 <MX_FATFS_Init+0x1c>)
 8015a20:	f006 f81a 	bl	801ba58 <FATFS_LinkDriver>
 8015a24:	4603      	mov	r3, r0
 8015a26:	461a      	mov	r2, r3
 8015a28:	4b03      	ldr	r3, [pc, #12]	; (8015a38 <MX_FATFS_Init+0x20>)
 8015a2a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8015a2c:	bf00      	nop
 8015a2e:	bd80      	pop	{r7, pc}
 8015a30:	20007548 	.word	0x20007548
 8015a34:	080228dc 	.word	0x080228dc
 8015a38:	20007544 	.word	0x20007544

08015a3c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8015a3c:	b480      	push	{r7}
 8015a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8015a40:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8015a42:	4618      	mov	r0, r3
 8015a44:	46bd      	mov	sp, r7
 8015a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a4a:	4770      	bx	lr

08015a4c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	b082      	sub	sp, #8
 8015a50:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8015a52:	2300      	movs	r3, #0
 8015a54:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8015a56:	f000 f896 	bl	8015b86 <BSP_SD_IsDetected>
 8015a5a:	4603      	mov	r3, r0
 8015a5c:	2b01      	cmp	r3, #1
 8015a5e:	d001      	beq.n	8015a64 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8015a60:	2302      	movs	r3, #2
 8015a62:	e012      	b.n	8015a8a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8015a64:	480b      	ldr	r0, [pc, #44]	; (8015a94 <BSP_SD_Init+0x48>)
 8015a66:	f7f9 ff0d 	bl	800f884 <HAL_SD_Init>
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8015a6e:	79fb      	ldrb	r3, [r7, #7]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d109      	bne.n	8015a88 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8015a74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8015a78:	4806      	ldr	r0, [pc, #24]	; (8015a94 <BSP_SD_Init+0x48>)
 8015a7a:	f7fa fcd1 	bl	8010420 <HAL_SD_ConfigWideBusOperation>
 8015a7e:	4603      	mov	r3, r0
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d001      	beq.n	8015a88 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8015a84:	2301      	movs	r3, #1
 8015a86:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8015a88:	79fb      	ldrb	r3, [r7, #7]
}
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	3708      	adds	r7, #8
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	bd80      	pop	{r7, pc}
 8015a92:	bf00      	nop
 8015a94:	2000431c 	.word	0x2000431c

08015a98 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	b086      	sub	sp, #24
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	60f8      	str	r0, [r7, #12]
 8015aa0:	60b9      	str	r1, [r7, #8]
 8015aa2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	68ba      	ldr	r2, [r7, #8]
 8015aac:	68f9      	ldr	r1, [r7, #12]
 8015aae:	4806      	ldr	r0, [pc, #24]	; (8015ac8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8015ab0:	f7f9 ff9e 	bl	800f9f0 <HAL_SD_ReadBlocks_DMA>
 8015ab4:	4603      	mov	r3, r0
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d001      	beq.n	8015abe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8015aba:	2301      	movs	r3, #1
 8015abc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8015abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	3718      	adds	r7, #24
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	bd80      	pop	{r7, pc}
 8015ac8:	2000431c 	.word	0x2000431c

08015acc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b086      	sub	sp, #24
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	60f8      	str	r0, [r7, #12]
 8015ad4:	60b9      	str	r1, [r7, #8]
 8015ad6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015ad8:	2300      	movs	r3, #0
 8015ada:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	68ba      	ldr	r2, [r7, #8]
 8015ae0:	68f9      	ldr	r1, [r7, #12]
 8015ae2:	4806      	ldr	r0, [pc, #24]	; (8015afc <BSP_SD_WriteBlocks_DMA+0x30>)
 8015ae4:	f7fa f866 	bl	800fbb4 <HAL_SD_WriteBlocks_DMA>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d001      	beq.n	8015af2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8015aee:	2301      	movs	r3, #1
 8015af0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8015af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8015af4:	4618      	mov	r0, r3
 8015af6:	3718      	adds	r7, #24
 8015af8:	46bd      	mov	sp, r7
 8015afa:	bd80      	pop	{r7, pc}
 8015afc:	2000431c 	.word	0x2000431c

08015b00 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8015b00:	b580      	push	{r7, lr}
 8015b02:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8015b04:	4805      	ldr	r0, [pc, #20]	; (8015b1c <BSP_SD_GetCardState+0x1c>)
 8015b06:	f7fa fd25 	bl	8010554 <HAL_SD_GetCardState>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	2b04      	cmp	r3, #4
 8015b0e:	bf14      	ite	ne
 8015b10:	2301      	movne	r3, #1
 8015b12:	2300      	moveq	r3, #0
 8015b14:	b2db      	uxtb	r3, r3
}
 8015b16:	4618      	mov	r0, r3
 8015b18:	bd80      	pop	{r7, pc}
 8015b1a:	bf00      	nop
 8015b1c:	2000431c 	.word	0x2000431c

08015b20 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b082      	sub	sp, #8
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8015b28:	6879      	ldr	r1, [r7, #4]
 8015b2a:	4803      	ldr	r0, [pc, #12]	; (8015b38 <BSP_SD_GetCardInfo+0x18>)
 8015b2c:	f7fa fc4c 	bl	80103c8 <HAL_SD_GetCardInfo>
}
 8015b30:	bf00      	nop
 8015b32:	3708      	adds	r7, #8
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bd80      	pop	{r7, pc}
 8015b38:	2000431c 	.word	0x2000431c

08015b3c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b082      	sub	sp, #8
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8015b44:	f000 f818 	bl	8015b78 <BSP_SD_AbortCallback>
}
 8015b48:	bf00      	nop
 8015b4a:	3708      	adds	r7, #8
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	bd80      	pop	{r7, pc}

08015b50 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b082      	sub	sp, #8
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8015b58:	f000 f9a8 	bl	8015eac <BSP_SD_WriteCpltCallback>
}
 8015b5c:	bf00      	nop
 8015b5e:	3708      	adds	r7, #8
 8015b60:	46bd      	mov	sp, r7
 8015b62:	bd80      	pop	{r7, pc}

08015b64 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b082      	sub	sp, #8
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8015b6c:	f000 f9aa 	bl	8015ec4 <BSP_SD_ReadCpltCallback>
}
 8015b70:	bf00      	nop
 8015b72:	3708      	adds	r7, #8
 8015b74:	46bd      	mov	sp, r7
 8015b76:	bd80      	pop	{r7, pc}

08015b78 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8015b78:	b480      	push	{r7}
 8015b7a:	af00      	add	r7, sp, #0

}
 8015b7c:	bf00      	nop
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b84:	4770      	bx	lr

08015b86 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8015b86:	b580      	push	{r7, lr}
 8015b88:	b082      	sub	sp, #8
 8015b8a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8015b8c:	2301      	movs	r3, #1
 8015b8e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8015b90:	f000 f80c 	bl	8015bac <BSP_PlatformIsDetected>
 8015b94:	4603      	mov	r3, r0
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d101      	bne.n	8015b9e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8015b9e:	79fb      	ldrb	r3, [r7, #7]
 8015ba0:	b2db      	uxtb	r3, r3
}
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	3708      	adds	r7, #8
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	bd80      	pop	{r7, pc}
	...

08015bac <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b082      	sub	sp, #8
 8015bb0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8015bb2:	2301      	movs	r3, #1
 8015bb4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8015bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8015bba:	4806      	ldr	r0, [pc, #24]	; (8015bd4 <BSP_PlatformIsDetected+0x28>)
 8015bbc:	f7f5 f86e 	bl	800ac9c <HAL_GPIO_ReadPin>
 8015bc0:	4603      	mov	r3, r0
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d001      	beq.n	8015bca <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8015bca:	79fb      	ldrb	r3, [r7, #7]
}
 8015bcc:	4618      	mov	r0, r3
 8015bce:	3708      	adds	r7, #8
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd80      	pop	{r7, pc}
 8015bd4:	40021800 	.word	0x40021800

08015bd8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b084      	sub	sp, #16
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8015be0:	f7f3 fad2 	bl	8009188 <HAL_GetTick>
 8015be4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8015be6:	e006      	b.n	8015bf6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015be8:	f7ff ff8a 	bl	8015b00 <BSP_SD_GetCardState>
 8015bec:	4603      	mov	r3, r0
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d101      	bne.n	8015bf6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	e009      	b.n	8015c0a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8015bf6:	f7f3 fac7 	bl	8009188 <HAL_GetTick>
 8015bfa:	4602      	mov	r2, r0
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	1ad3      	subs	r3, r2, r3
 8015c00:	687a      	ldr	r2, [r7, #4]
 8015c02:	429a      	cmp	r2, r3
 8015c04:	d8f0      	bhi.n	8015be8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8015c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	3710      	adds	r7, #16
 8015c0e:	46bd      	mov	sp, r7
 8015c10:	bd80      	pop	{r7, pc}
	...

08015c14 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b082      	sub	sp, #8
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8015c1e:	4b0b      	ldr	r3, [pc, #44]	; (8015c4c <SD_CheckStatus+0x38>)
 8015c20:	2201      	movs	r2, #1
 8015c22:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8015c24:	f7ff ff6c 	bl	8015b00 <BSP_SD_GetCardState>
 8015c28:	4603      	mov	r3, r0
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d107      	bne.n	8015c3e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8015c2e:	4b07      	ldr	r3, [pc, #28]	; (8015c4c <SD_CheckStatus+0x38>)
 8015c30:	781b      	ldrb	r3, [r3, #0]
 8015c32:	b2db      	uxtb	r3, r3
 8015c34:	f023 0301 	bic.w	r3, r3, #1
 8015c38:	b2da      	uxtb	r2, r3
 8015c3a:	4b04      	ldr	r3, [pc, #16]	; (8015c4c <SD_CheckStatus+0x38>)
 8015c3c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8015c3e:	4b03      	ldr	r3, [pc, #12]	; (8015c4c <SD_CheckStatus+0x38>)
 8015c40:	781b      	ldrb	r3, [r3, #0]
 8015c42:	b2db      	uxtb	r3, r3
}
 8015c44:	4618      	mov	r0, r3
 8015c46:	3708      	adds	r7, #8
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	bd80      	pop	{r7, pc}
 8015c4c:	20000239 	.word	0x20000239

08015c50 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b082      	sub	sp, #8
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	4603      	mov	r3, r0
 8015c58:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8015c5a:	f7ff fef7 	bl	8015a4c <BSP_SD_Init>
 8015c5e:	4603      	mov	r3, r0
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d107      	bne.n	8015c74 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8015c64:	79fb      	ldrb	r3, [r7, #7]
 8015c66:	4618      	mov	r0, r3
 8015c68:	f7ff ffd4 	bl	8015c14 <SD_CheckStatus>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	461a      	mov	r2, r3
 8015c70:	4b04      	ldr	r3, [pc, #16]	; (8015c84 <SD_initialize+0x34>)
 8015c72:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8015c74:	4b03      	ldr	r3, [pc, #12]	; (8015c84 <SD_initialize+0x34>)
 8015c76:	781b      	ldrb	r3, [r3, #0]
 8015c78:	b2db      	uxtb	r3, r3
}
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	3708      	adds	r7, #8
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	bd80      	pop	{r7, pc}
 8015c82:	bf00      	nop
 8015c84:	20000239 	.word	0x20000239

08015c88 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b082      	sub	sp, #8
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	4603      	mov	r3, r0
 8015c90:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8015c92:	79fb      	ldrb	r3, [r7, #7]
 8015c94:	4618      	mov	r0, r3
 8015c96:	f7ff ffbd 	bl	8015c14 <SD_CheckStatus>
 8015c9a:	4603      	mov	r3, r0
}
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	3708      	adds	r7, #8
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	bd80      	pop	{r7, pc}

08015ca4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b086      	sub	sp, #24
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	60b9      	str	r1, [r7, #8]
 8015cac:	607a      	str	r2, [r7, #4]
 8015cae:	603b      	str	r3, [r7, #0]
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015cb4:	2301      	movs	r3, #1
 8015cb6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015cb8:	f247 5030 	movw	r0, #30000	; 0x7530
 8015cbc:	f7ff ff8c 	bl	8015bd8 <SD_CheckStatusWithTimeout>
 8015cc0:	4603      	mov	r3, r0
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	da01      	bge.n	8015cca <SD_read+0x26>
  {
    return res;
 8015cc6:	7dfb      	ldrb	r3, [r7, #23]
 8015cc8:	e03b      	b.n	8015d42 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8015cca:	683a      	ldr	r2, [r7, #0]
 8015ccc:	6879      	ldr	r1, [r7, #4]
 8015cce:	68b8      	ldr	r0, [r7, #8]
 8015cd0:	f7ff fee2 	bl	8015a98 <BSP_SD_ReadBlocks_DMA>
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d132      	bne.n	8015d40 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8015cda:	4b1c      	ldr	r3, [pc, #112]	; (8015d4c <SD_read+0xa8>)
 8015cdc:	2200      	movs	r2, #0
 8015cde:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8015ce0:	f7f3 fa52 	bl	8009188 <HAL_GetTick>
 8015ce4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015ce6:	bf00      	nop
 8015ce8:	4b18      	ldr	r3, [pc, #96]	; (8015d4c <SD_read+0xa8>)
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d108      	bne.n	8015d02 <SD_read+0x5e>
 8015cf0:	f7f3 fa4a 	bl	8009188 <HAL_GetTick>
 8015cf4:	4602      	mov	r2, r0
 8015cf6:	693b      	ldr	r3, [r7, #16]
 8015cf8:	1ad3      	subs	r3, r2, r3
 8015cfa:	f247 522f 	movw	r2, #29999	; 0x752f
 8015cfe:	4293      	cmp	r3, r2
 8015d00:	d9f2      	bls.n	8015ce8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8015d02:	4b12      	ldr	r3, [pc, #72]	; (8015d4c <SD_read+0xa8>)
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d102      	bne.n	8015d10 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8015d0a:	2301      	movs	r3, #1
 8015d0c:	75fb      	strb	r3, [r7, #23]
 8015d0e:	e017      	b.n	8015d40 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8015d10:	4b0e      	ldr	r3, [pc, #56]	; (8015d4c <SD_read+0xa8>)
 8015d12:	2200      	movs	r2, #0
 8015d14:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015d16:	f7f3 fa37 	bl	8009188 <HAL_GetTick>
 8015d1a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015d1c:	e007      	b.n	8015d2e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015d1e:	f7ff feef 	bl	8015b00 <BSP_SD_GetCardState>
 8015d22:	4603      	mov	r3, r0
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d102      	bne.n	8015d2e <SD_read+0x8a>
          {
            res = RES_OK;
 8015d28:	2300      	movs	r3, #0
 8015d2a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8015d2c:	e008      	b.n	8015d40 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015d2e:	f7f3 fa2b 	bl	8009188 <HAL_GetTick>
 8015d32:	4602      	mov	r2, r0
 8015d34:	693b      	ldr	r3, [r7, #16]
 8015d36:	1ad3      	subs	r3, r2, r3
 8015d38:	f247 522f 	movw	r2, #29999	; 0x752f
 8015d3c:	4293      	cmp	r3, r2
 8015d3e:	d9ee      	bls.n	8015d1e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8015d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8015d42:	4618      	mov	r0, r3
 8015d44:	3718      	adds	r7, #24
 8015d46:	46bd      	mov	sp, r7
 8015d48:	bd80      	pop	{r7, pc}
 8015d4a:	bf00      	nop
 8015d4c:	20007550 	.word	0x20007550

08015d50 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8015d50:	b580      	push	{r7, lr}
 8015d52:	b086      	sub	sp, #24
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	60b9      	str	r1, [r7, #8]
 8015d58:	607a      	str	r2, [r7, #4]
 8015d5a:	603b      	str	r3, [r7, #0]
 8015d5c:	4603      	mov	r3, r0
 8015d5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015d60:	2301      	movs	r3, #1
 8015d62:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8015d64:	4b24      	ldr	r3, [pc, #144]	; (8015df8 <SD_write+0xa8>)
 8015d66:	2200      	movs	r2, #0
 8015d68:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015d6a:	f247 5030 	movw	r0, #30000	; 0x7530
 8015d6e:	f7ff ff33 	bl	8015bd8 <SD_CheckStatusWithTimeout>
 8015d72:	4603      	mov	r3, r0
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	da01      	bge.n	8015d7c <SD_write+0x2c>
  {
    return res;
 8015d78:	7dfb      	ldrb	r3, [r7, #23]
 8015d7a:	e038      	b.n	8015dee <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8015d7c:	683a      	ldr	r2, [r7, #0]
 8015d7e:	6879      	ldr	r1, [r7, #4]
 8015d80:	68b8      	ldr	r0, [r7, #8]
 8015d82:	f7ff fea3 	bl	8015acc <BSP_SD_WriteBlocks_DMA>
 8015d86:	4603      	mov	r3, r0
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d12f      	bne.n	8015dec <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8015d8c:	f7f3 f9fc 	bl	8009188 <HAL_GetTick>
 8015d90:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015d92:	bf00      	nop
 8015d94:	4b18      	ldr	r3, [pc, #96]	; (8015df8 <SD_write+0xa8>)
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d108      	bne.n	8015dae <SD_write+0x5e>
 8015d9c:	f7f3 f9f4 	bl	8009188 <HAL_GetTick>
 8015da0:	4602      	mov	r2, r0
 8015da2:	693b      	ldr	r3, [r7, #16]
 8015da4:	1ad3      	subs	r3, r2, r3
 8015da6:	f247 522f 	movw	r2, #29999	; 0x752f
 8015daa:	4293      	cmp	r3, r2
 8015dac:	d9f2      	bls.n	8015d94 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8015dae:	4b12      	ldr	r3, [pc, #72]	; (8015df8 <SD_write+0xa8>)
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d102      	bne.n	8015dbc <SD_write+0x6c>
      {
        res = RES_ERROR;
 8015db6:	2301      	movs	r3, #1
 8015db8:	75fb      	strb	r3, [r7, #23]
 8015dba:	e017      	b.n	8015dec <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8015dbc:	4b0e      	ldr	r3, [pc, #56]	; (8015df8 <SD_write+0xa8>)
 8015dbe:	2200      	movs	r2, #0
 8015dc0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015dc2:	f7f3 f9e1 	bl	8009188 <HAL_GetTick>
 8015dc6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015dc8:	e007      	b.n	8015dda <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015dca:	f7ff fe99 	bl	8015b00 <BSP_SD_GetCardState>
 8015dce:	4603      	mov	r3, r0
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d102      	bne.n	8015dda <SD_write+0x8a>
          {
            res = RES_OK;
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	75fb      	strb	r3, [r7, #23]
            break;
 8015dd8:	e008      	b.n	8015dec <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015dda:	f7f3 f9d5 	bl	8009188 <HAL_GetTick>
 8015dde:	4602      	mov	r2, r0
 8015de0:	693b      	ldr	r3, [r7, #16]
 8015de2:	1ad3      	subs	r3, r2, r3
 8015de4:	f247 522f 	movw	r2, #29999	; 0x752f
 8015de8:	4293      	cmp	r3, r2
 8015dea:	d9ee      	bls.n	8015dca <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8015dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8015dee:	4618      	mov	r0, r3
 8015df0:	3718      	adds	r7, #24
 8015df2:	46bd      	mov	sp, r7
 8015df4:	bd80      	pop	{r7, pc}
 8015df6:	bf00      	nop
 8015df8:	2000754c 	.word	0x2000754c

08015dfc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015dfc:	b580      	push	{r7, lr}
 8015dfe:	b08c      	sub	sp, #48	; 0x30
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	4603      	mov	r3, r0
 8015e04:	603a      	str	r2, [r7, #0]
 8015e06:	71fb      	strb	r3, [r7, #7]
 8015e08:	460b      	mov	r3, r1
 8015e0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015e0c:	2301      	movs	r3, #1
 8015e0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8015e12:	4b25      	ldr	r3, [pc, #148]	; (8015ea8 <SD_ioctl+0xac>)
 8015e14:	781b      	ldrb	r3, [r3, #0]
 8015e16:	b2db      	uxtb	r3, r3
 8015e18:	f003 0301 	and.w	r3, r3, #1
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d001      	beq.n	8015e24 <SD_ioctl+0x28>
 8015e20:	2303      	movs	r3, #3
 8015e22:	e03c      	b.n	8015e9e <SD_ioctl+0xa2>

  switch (cmd)
 8015e24:	79bb      	ldrb	r3, [r7, #6]
 8015e26:	2b03      	cmp	r3, #3
 8015e28:	d834      	bhi.n	8015e94 <SD_ioctl+0x98>
 8015e2a:	a201      	add	r2, pc, #4	; (adr r2, 8015e30 <SD_ioctl+0x34>)
 8015e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e30:	08015e41 	.word	0x08015e41
 8015e34:	08015e49 	.word	0x08015e49
 8015e38:	08015e61 	.word	0x08015e61
 8015e3c:	08015e7b 	.word	0x08015e7b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8015e40:	2300      	movs	r3, #0
 8015e42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015e46:	e028      	b.n	8015e9a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8015e48:	f107 030c 	add.w	r3, r7, #12
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	f7ff fe67 	bl	8015b20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8015e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e54:	683b      	ldr	r3, [r7, #0]
 8015e56:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015e58:	2300      	movs	r3, #0
 8015e5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015e5e:	e01c      	b.n	8015e9a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015e60:	f107 030c 	add.w	r3, r7, #12
 8015e64:	4618      	mov	r0, r3
 8015e66:	f7ff fe5b 	bl	8015b20 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8015e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e6c:	b29a      	uxth	r2, r3
 8015e6e:	683b      	ldr	r3, [r7, #0]
 8015e70:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8015e72:	2300      	movs	r3, #0
 8015e74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015e78:	e00f      	b.n	8015e9a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015e7a:	f107 030c 	add.w	r3, r7, #12
 8015e7e:	4618      	mov	r0, r3
 8015e80:	f7ff fe4e 	bl	8015b20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8015e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e86:	0a5a      	lsrs	r2, r3, #9
 8015e88:	683b      	ldr	r3, [r7, #0]
 8015e8a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015e92:	e002      	b.n	8015e9a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8015e94:	2304      	movs	r3, #4
 8015e96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8015e9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	3730      	adds	r7, #48	; 0x30
 8015ea2:	46bd      	mov	sp, r7
 8015ea4:	bd80      	pop	{r7, pc}
 8015ea6:	bf00      	nop
 8015ea8:	20000239 	.word	0x20000239

08015eac <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8015eac:	b480      	push	{r7}
 8015eae:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8015eb0:	4b03      	ldr	r3, [pc, #12]	; (8015ec0 <BSP_SD_WriteCpltCallback+0x14>)
 8015eb2:	2201      	movs	r2, #1
 8015eb4:	601a      	str	r2, [r3, #0]
}
 8015eb6:	bf00      	nop
 8015eb8:	46bd      	mov	sp, r7
 8015eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ebe:	4770      	bx	lr
 8015ec0:	2000754c 	.word	0x2000754c

08015ec4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8015ec4:	b480      	push	{r7}
 8015ec6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8015ec8:	4b03      	ldr	r3, [pc, #12]	; (8015ed8 <BSP_SD_ReadCpltCallback+0x14>)
 8015eca:	2201      	movs	r2, #1
 8015ecc:	601a      	str	r2, [r3, #0]
}
 8015ece:	bf00      	nop
 8015ed0:	46bd      	mov	sp, r7
 8015ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed6:	4770      	bx	lr
 8015ed8:	20007550 	.word	0x20007550

08015edc <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b084      	sub	sp, #16
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
 8015ee4:	460b      	mov	r3, r1
 8015ee6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8015ee8:	f44f 701d 	mov.w	r0, #628	; 0x274
 8015eec:	f006 fc46 	bl	801c77c <malloc>
 8015ef0:	4603      	mov	r3, r0
 8015ef2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d105      	bne.n	8015f06 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	2200      	movs	r2, #0
 8015efe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8015f02:	2302      	movs	r3, #2
 8015f04:	e034      	b.n	8015f70 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	68fa      	ldr	r2, [r7, #12]
 8015f0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	7c1b      	ldrb	r3, [r3, #16]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d115      	bne.n	8015f42 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8015f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015f1a:	2202      	movs	r2, #2
 8015f1c:	2101      	movs	r1, #1
 8015f1e:	6878      	ldr	r0, [r7, #4]
 8015f20:	f006 fa3b 	bl	801c39a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	2201      	movs	r2, #1
 8015f28:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8015f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015f30:	2202      	movs	r2, #2
 8015f32:	2181      	movs	r1, #129	; 0x81
 8015f34:	6878      	ldr	r0, [r7, #4]
 8015f36:	f006 fa30 	bl	801c39a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	2201      	movs	r2, #1
 8015f3e:	871a      	strh	r2, [r3, #56]	; 0x38
 8015f40:	e012      	b.n	8015f68 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8015f42:	2340      	movs	r3, #64	; 0x40
 8015f44:	2202      	movs	r2, #2
 8015f46:	2101      	movs	r1, #1
 8015f48:	6878      	ldr	r0, [r7, #4]
 8015f4a:	f006 fa26 	bl	801c39a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	2201      	movs	r2, #1
 8015f52:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8015f56:	2340      	movs	r3, #64	; 0x40
 8015f58:	2202      	movs	r2, #2
 8015f5a:	2181      	movs	r1, #129	; 0x81
 8015f5c:	6878      	ldr	r0, [r7, #4]
 8015f5e:	f006 fa1c 	bl	801c39a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	2201      	movs	r2, #1
 8015f66:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8015f68:	6878      	ldr	r0, [r7, #4]
 8015f6a:	f000 f990 	bl	801628e <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8015f6e:	2300      	movs	r3, #0
}
 8015f70:	4618      	mov	r0, r3
 8015f72:	3710      	adds	r7, #16
 8015f74:	46bd      	mov	sp, r7
 8015f76:	bd80      	pop	{r7, pc}

08015f78 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b082      	sub	sp, #8
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	6078      	str	r0, [r7, #4]
 8015f80:	460b      	mov	r3, r1
 8015f82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8015f84:	2101      	movs	r1, #1
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	f006 fa2d 	bl	801c3e6 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	2200      	movs	r2, #0
 8015f90:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8015f94:	2181      	movs	r1, #129	; 0x81
 8015f96:	6878      	ldr	r0, [r7, #4]
 8015f98:	f006 fa25 	bl	801c3e6 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8015fa2:	6878      	ldr	r0, [r7, #4]
 8015fa4:	f000 f9c9 	bl	801633a <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d009      	beq.n	8015fc6 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015fb8:	4618      	mov	r0, r3
 8015fba:	f006 fbe7 	bl	801c78c <free>
    pdev->pClassData = NULL;
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	2200      	movs	r2, #0
 8015fc2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015fc6:	2300      	movs	r3, #0
}
 8015fc8:	4618      	mov	r0, r3
 8015fca:	3708      	adds	r7, #8
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bd80      	pop	{r7, pc}

08015fd0 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015fd0:	b580      	push	{r7, lr}
 8015fd2:	b086      	sub	sp, #24
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
 8015fd8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015fe0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015fea:	683b      	ldr	r3, [r7, #0]
 8015fec:	781b      	ldrb	r3, [r3, #0]
 8015fee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d04e      	beq.n	8016094 <USBD_MSC_Setup+0xc4>
 8015ff6:	2b20      	cmp	r3, #32
 8015ff8:	f040 80c8 	bne.w	801618c <USBD_MSC_Setup+0x1bc>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8015ffc:	683b      	ldr	r3, [r7, #0]
 8015ffe:	785b      	ldrb	r3, [r3, #1]
 8016000:	2bfe      	cmp	r3, #254	; 0xfe
 8016002:	d002      	beq.n	801600a <USBD_MSC_Setup+0x3a>
 8016004:	2bff      	cmp	r3, #255	; 0xff
 8016006:	d025      	beq.n	8016054 <USBD_MSC_Setup+0x84>
 8016008:	e03c      	b.n	8016084 <USBD_MSC_Setup+0xb4>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801600a:	683b      	ldr	r3, [r7, #0]
 801600c:	885b      	ldrh	r3, [r3, #2]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d119      	bne.n	8016046 <USBD_MSC_Setup+0x76>
 8016012:	683b      	ldr	r3, [r7, #0]
 8016014:	88db      	ldrh	r3, [r3, #6]
 8016016:	2b01      	cmp	r3, #1
 8016018:	d115      	bne.n	8016046 <USBD_MSC_Setup+0x76>
          ((req->bmRequest & 0x80U) == 0x80U))
 801601a:	683b      	ldr	r3, [r7, #0]
 801601c:	781b      	ldrb	r3, [r3, #0]
 801601e:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8016020:	2b00      	cmp	r3, #0
 8016022:	da10      	bge.n	8016046 <USBD_MSC_Setup+0x76>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801602a:	699b      	ldr	r3, [r3, #24]
 801602c:	4798      	blx	r3
 801602e:	4603      	mov	r3, r0
 8016030:	461a      	mov	r2, r3
 8016032:	693b      	ldr	r3, [r7, #16]
 8016034:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8016036:	693b      	ldr	r3, [r7, #16]
 8016038:	2201      	movs	r2, #1
 801603a:	4619      	mov	r1, r3
 801603c:	6878      	ldr	r0, [r7, #4]
 801603e:	f002 fd3d 	bl	8018abc <USBD_CtlSendData>
 8016042:	bf00      	nop
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8016044:	e025      	b.n	8016092 <USBD_MSC_Setup+0xc2>
        USBD_CtlError(pdev, req);
 8016046:	6839      	ldr	r1, [r7, #0]
 8016048:	6878      	ldr	r0, [r7, #4]
 801604a:	f002 fcc6 	bl	80189da <USBD_CtlError>
        ret = USBD_FAIL;
 801604e:	2303      	movs	r3, #3
 8016050:	75fb      	strb	r3, [r7, #23]
      break;
 8016052:	e01e      	b.n	8016092 <USBD_MSC_Setup+0xc2>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8016054:	683b      	ldr	r3, [r7, #0]
 8016056:	885b      	ldrh	r3, [r3, #2]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d10c      	bne.n	8016076 <USBD_MSC_Setup+0xa6>
 801605c:	683b      	ldr	r3, [r7, #0]
 801605e:	88db      	ldrh	r3, [r3, #6]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d108      	bne.n	8016076 <USBD_MSC_Setup+0xa6>
          ((req->bmRequest & 0x80U) != 0x80U))
 8016064:	683b      	ldr	r3, [r7, #0]
 8016066:	781b      	ldrb	r3, [r3, #0]
 8016068:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801606a:	2b00      	cmp	r3, #0
 801606c:	db03      	blt.n	8016076 <USBD_MSC_Setup+0xa6>
      {
        MSC_BOT_Reset(pdev);
 801606e:	6878      	ldr	r0, [r7, #4]
 8016070:	f000 f941 	bl	80162f6 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8016074:	e00d      	b.n	8016092 <USBD_MSC_Setup+0xc2>
        USBD_CtlError(pdev, req);
 8016076:	6839      	ldr	r1, [r7, #0]
 8016078:	6878      	ldr	r0, [r7, #4]
 801607a:	f002 fcae 	bl	80189da <USBD_CtlError>
        ret = USBD_FAIL;
 801607e:	2303      	movs	r3, #3
 8016080:	75fb      	strb	r3, [r7, #23]
      break;
 8016082:	e006      	b.n	8016092 <USBD_MSC_Setup+0xc2>

    default:
      USBD_CtlError(pdev, req);
 8016084:	6839      	ldr	r1, [r7, #0]
 8016086:	6878      	ldr	r0, [r7, #4]
 8016088:	f002 fca7 	bl	80189da <USBD_CtlError>
      ret = USBD_FAIL;
 801608c:	2303      	movs	r3, #3
 801608e:	75fb      	strb	r3, [r7, #23]
      break;
 8016090:	bf00      	nop
    }
    break;
 8016092:	e082      	b.n	801619a <USBD_MSC_Setup+0x1ca>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8016094:	683b      	ldr	r3, [r7, #0]
 8016096:	785b      	ldrb	r3, [r3, #1]
 8016098:	2b0b      	cmp	r3, #11
 801609a:	d86e      	bhi.n	801617a <USBD_MSC_Setup+0x1aa>
 801609c:	a201      	add	r2, pc, #4	; (adr r2, 80160a4 <USBD_MSC_Setup+0xd4>)
 801609e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160a2:	bf00      	nop
 80160a4:	080160d5 	.word	0x080160d5
 80160a8:	0801614b 	.word	0x0801614b
 80160ac:	0801617b 	.word	0x0801617b
 80160b0:	0801617b 	.word	0x0801617b
 80160b4:	0801617b 	.word	0x0801617b
 80160b8:	0801617b 	.word	0x0801617b
 80160bc:	0801617b 	.word	0x0801617b
 80160c0:	0801617b 	.word	0x0801617b
 80160c4:	0801617b 	.word	0x0801617b
 80160c8:	0801617b 	.word	0x0801617b
 80160cc:	080160fd 	.word	0x080160fd
 80160d0:	08016125 	.word	0x08016125
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160da:	2b03      	cmp	r3, #3
 80160dc:	d107      	bne.n	80160ee <USBD_MSC_Setup+0x11e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80160de:	f107 030e 	add.w	r3, r7, #14
 80160e2:	2202      	movs	r2, #2
 80160e4:	4619      	mov	r1, r3
 80160e6:	6878      	ldr	r0, [r7, #4]
 80160e8:	f002 fce8 	bl	8018abc <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80160ec:	e04d      	b.n	801618a <USBD_MSC_Setup+0x1ba>
        USBD_CtlError(pdev, req);
 80160ee:	6839      	ldr	r1, [r7, #0]
 80160f0:	6878      	ldr	r0, [r7, #4]
 80160f2:	f002 fc72 	bl	80189da <USBD_CtlError>
        ret = USBD_FAIL;
 80160f6:	2303      	movs	r3, #3
 80160f8:	75fb      	strb	r3, [r7, #23]
      break;
 80160fa:	e046      	b.n	801618a <USBD_MSC_Setup+0x1ba>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016102:	2b03      	cmp	r3, #3
 8016104:	d107      	bne.n	8016116 <USBD_MSC_Setup+0x146>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8016106:	693b      	ldr	r3, [r7, #16]
 8016108:	3304      	adds	r3, #4
 801610a:	2201      	movs	r2, #1
 801610c:	4619      	mov	r1, r3
 801610e:	6878      	ldr	r0, [r7, #4]
 8016110:	f002 fcd4 	bl	8018abc <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8016114:	e039      	b.n	801618a <USBD_MSC_Setup+0x1ba>
        USBD_CtlError(pdev, req);
 8016116:	6839      	ldr	r1, [r7, #0]
 8016118:	6878      	ldr	r0, [r7, #4]
 801611a:	f002 fc5e 	bl	80189da <USBD_CtlError>
        ret = USBD_FAIL;
 801611e:	2303      	movs	r3, #3
 8016120:	75fb      	strb	r3, [r7, #23]
      break;
 8016122:	e032      	b.n	801618a <USBD_MSC_Setup+0x1ba>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801612a:	2b03      	cmp	r3, #3
 801612c:	d106      	bne.n	801613c <USBD_MSC_Setup+0x16c>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 801612e:	683b      	ldr	r3, [r7, #0]
 8016130:	885b      	ldrh	r3, [r3, #2]
 8016132:	b2db      	uxtb	r3, r3
 8016134:	461a      	mov	r2, r3
 8016136:	693b      	ldr	r3, [r7, #16]
 8016138:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801613a:	e026      	b.n	801618a <USBD_MSC_Setup+0x1ba>
        USBD_CtlError(pdev, req);
 801613c:	6839      	ldr	r1, [r7, #0]
 801613e:	6878      	ldr	r0, [r7, #4]
 8016140:	f002 fc4b 	bl	80189da <USBD_CtlError>
        ret = USBD_FAIL;
 8016144:	2303      	movs	r3, #3
 8016146:	75fb      	strb	r3, [r7, #23]
      break;
 8016148:	e01f      	b.n	801618a <USBD_MSC_Setup+0x1ba>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016150:	2b03      	cmp	r3, #3
 8016152:	d119      	bne.n	8016188 <USBD_MSC_Setup+0x1b8>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8016154:	683b      	ldr	r3, [r7, #0]
 8016156:	885b      	ldrh	r3, [r3, #2]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d115      	bne.n	8016188 <USBD_MSC_Setup+0x1b8>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801615c:	683b      	ldr	r3, [r7, #0]
 801615e:	889b      	ldrh	r3, [r3, #4]
 8016160:	b2db      	uxtb	r3, r3
 8016162:	4619      	mov	r1, r3
 8016164:	6878      	ldr	r0, [r7, #4]
 8016166:	f006 f95d 	bl	801c424 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801616a:	683b      	ldr	r3, [r7, #0]
 801616c:	889b      	ldrh	r3, [r3, #4]
 801616e:	b2db      	uxtb	r3, r3
 8016170:	4619      	mov	r1, r3
 8016172:	6878      	ldr	r0, [r7, #4]
 8016174:	f000 fa5c 	bl	8016630 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8016178:	e006      	b.n	8016188 <USBD_MSC_Setup+0x1b8>

    default:
      USBD_CtlError(pdev, req);
 801617a:	6839      	ldr	r1, [r7, #0]
 801617c:	6878      	ldr	r0, [r7, #4]
 801617e:	f002 fc2c 	bl	80189da <USBD_CtlError>
      ret = USBD_FAIL;
 8016182:	2303      	movs	r3, #3
 8016184:	75fb      	strb	r3, [r7, #23]
      break;
 8016186:	e000      	b.n	801618a <USBD_MSC_Setup+0x1ba>
      break;
 8016188:	bf00      	nop
    }
    break;
 801618a:	e006      	b.n	801619a <USBD_MSC_Setup+0x1ca>

  default:
    USBD_CtlError(pdev, req);
 801618c:	6839      	ldr	r1, [r7, #0]
 801618e:	6878      	ldr	r0, [r7, #4]
 8016190:	f002 fc23 	bl	80189da <USBD_CtlError>
    ret = USBD_FAIL;
 8016194:	2303      	movs	r3, #3
 8016196:	75fb      	strb	r3, [r7, #23]
    break;
 8016198:	bf00      	nop
  }

  return (uint8_t)ret;
 801619a:	7dfb      	ldrb	r3, [r7, #23]
}
 801619c:	4618      	mov	r0, r3
 801619e:	3718      	adds	r7, #24
 80161a0:	46bd      	mov	sp, r7
 80161a2:	bd80      	pop	{r7, pc}

080161a4 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80161a4:	b580      	push	{r7, lr}
 80161a6:	b082      	sub	sp, #8
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	6078      	str	r0, [r7, #4]
 80161ac:	460b      	mov	r3, r1
 80161ae:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80161b0:	78fb      	ldrb	r3, [r7, #3]
 80161b2:	4619      	mov	r1, r3
 80161b4:	6878      	ldr	r0, [r7, #4]
 80161b6:	f000 f8d1 	bl	801635c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80161ba:	2300      	movs	r3, #0
}
 80161bc:	4618      	mov	r0, r3
 80161be:	3708      	adds	r7, #8
 80161c0:	46bd      	mov	sp, r7
 80161c2:	bd80      	pop	{r7, pc}

080161c4 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b082      	sub	sp, #8
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
 80161cc:	460b      	mov	r3, r1
 80161ce:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80161d0:	78fb      	ldrb	r3, [r7, #3]
 80161d2:	4619      	mov	r1, r3
 80161d4:	6878      	ldr	r0, [r7, #4]
 80161d6:	f000 f8f3 	bl	80163c0 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80161da:	2300      	movs	r3, #0
}
 80161dc:	4618      	mov	r0, r3
 80161de:	3708      	adds	r7, #8
 80161e0:	46bd      	mov	sp, r7
 80161e2:	bd80      	pop	{r7, pc}

080161e4 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80161e4:	b480      	push	{r7}
 80161e6:	b083      	sub	sp, #12
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	2220      	movs	r2, #32
 80161f0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80161f2:	4b03      	ldr	r3, [pc, #12]	; (8016200 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80161f4:	4618      	mov	r0, r3
 80161f6:	370c      	adds	r7, #12
 80161f8:	46bd      	mov	sp, r7
 80161fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161fe:	4770      	bx	lr
 8016200:	20000274 	.word	0x20000274

08016204 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8016204:	b480      	push	{r7}
 8016206:	b083      	sub	sp, #12
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	2220      	movs	r2, #32
 8016210:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8016212:	4b03      	ldr	r3, [pc, #12]	; (8016220 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8016214:	4618      	mov	r0, r3
 8016216:	370c      	adds	r7, #12
 8016218:	46bd      	mov	sp, r7
 801621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801621e:	4770      	bx	lr
 8016220:	20000294 	.word	0x20000294

08016224 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016224:	b480      	push	{r7}
 8016226:	b083      	sub	sp, #12
 8016228:	af00      	add	r7, sp, #0
 801622a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	2220      	movs	r2, #32
 8016230:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8016232:	4b03      	ldr	r3, [pc, #12]	; (8016240 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8016234:	4618      	mov	r0, r3
 8016236:	370c      	adds	r7, #12
 8016238:	46bd      	mov	sp, r7
 801623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801623e:	4770      	bx	lr
 8016240:	200002b4 	.word	0x200002b4

08016244 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016244:	b480      	push	{r7}
 8016246:	b083      	sub	sp, #12
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	220a      	movs	r2, #10
 8016250:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8016252:	4b03      	ldr	r3, [pc, #12]	; (8016260 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016254:	4618      	mov	r0, r3
 8016256:	370c      	adds	r7, #12
 8016258:	46bd      	mov	sp, r7
 801625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801625e:	4770      	bx	lr
 8016260:	200002d4 	.word	0x200002d4

08016264 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8016264:	b480      	push	{r7}
 8016266:	b083      	sub	sp, #12
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
 801626c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801626e:	683b      	ldr	r3, [r7, #0]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d101      	bne.n	8016278 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016274:	2303      	movs	r3, #3
 8016276:	e004      	b.n	8016282 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	683a      	ldr	r2, [r7, #0]
 801627c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8016280:	2300      	movs	r3, #0
}
 8016282:	4618      	mov	r0, r3
 8016284:	370c      	adds	r7, #12
 8016286:	46bd      	mov	sp, r7
 8016288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801628c:	4770      	bx	lr

0801628e <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801628e:	b580      	push	{r7, lr}
 8016290:	b084      	sub	sp, #16
 8016292:	af00      	add	r7, sp, #0
 8016294:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801629c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	2200      	movs	r2, #0
 80162a2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	2200      	movs	r2, #0
 80162a8:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	2200      	movs	r2, #0
 80162ae:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	2200      	movs	r2, #0
 80162b6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	2200      	movs	r2, #0
 80162be:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	2000      	movs	r0, #0
 80162cc:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80162ce:	2101      	movs	r1, #1
 80162d0:	6878      	ldr	r0, [r7, #4]
 80162d2:	f006 f8a7 	bl	801c424 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80162d6:	2181      	movs	r1, #129	; 0x81
 80162d8:	6878      	ldr	r0, [r7, #4]
 80162da:	f006 f8a3 	bl	801c424 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80162e4:	231f      	movs	r3, #31
 80162e6:	2101      	movs	r1, #1
 80162e8:	6878      	ldr	r0, [r7, #4]
 80162ea:	f006 f964 	bl	801c5b6 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 80162ee:	bf00      	nop
 80162f0:	3710      	adds	r7, #16
 80162f2:	46bd      	mov	sp, r7
 80162f4:	bd80      	pop	{r7, pc}

080162f6 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80162f6:	b580      	push	{r7, lr}
 80162f8:	b084      	sub	sp, #16
 80162fa:	af00      	add	r7, sp, #0
 80162fc:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016304:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	2200      	movs	r2, #0
 801630a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	2201      	movs	r2, #1
 8016310:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8016312:	2181      	movs	r1, #129	; 0x81
 8016314:	6878      	ldr	r0, [r7, #4]
 8016316:	f006 f8c3 	bl	801c4a0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 801631a:	2101      	movs	r1, #1
 801631c:	6878      	ldr	r0, [r7, #4]
 801631e:	f006 f8bf 	bl	801c4a0 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8016328:	231f      	movs	r3, #31
 801632a:	2101      	movs	r1, #1
 801632c:	6878      	ldr	r0, [r7, #4]
 801632e:	f006 f942 	bl	801c5b6 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8016332:	bf00      	nop
 8016334:	3710      	adds	r7, #16
 8016336:	46bd      	mov	sp, r7
 8016338:	bd80      	pop	{r7, pc}

0801633a <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801633a:	b480      	push	{r7}
 801633c:	b085      	sub	sp, #20
 801633e:	af00      	add	r7, sp, #0
 8016340:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016348:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	2200      	movs	r2, #0
 801634e:	721a      	strb	r2, [r3, #8]
}
 8016350:	bf00      	nop
 8016352:	3714      	adds	r7, #20
 8016354:	46bd      	mov	sp, r7
 8016356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801635a:	4770      	bx	lr

0801635c <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801635c:	b580      	push	{r7, lr}
 801635e:	b084      	sub	sp, #16
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
 8016364:	460b      	mov	r3, r1
 8016366:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801636e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	7a1b      	ldrb	r3, [r3, #8]
 8016374:	2b02      	cmp	r3, #2
 8016376:	d005      	beq.n	8016384 <MSC_BOT_DataIn+0x28>
 8016378:	2b02      	cmp	r3, #2
 801637a:	db1a      	blt.n	80163b2 <MSC_BOT_DataIn+0x56>
 801637c:	3b03      	subs	r3, #3
 801637e:	2b01      	cmp	r3, #1
 8016380:	d817      	bhi.n	80163b2 <MSC_BOT_DataIn+0x56>
 8016382:	e011      	b.n	80163a8 <MSC_BOT_DataIn+0x4c>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8016390:	461a      	mov	r2, r3
 8016392:	6878      	ldr	r0, [r7, #4]
 8016394:	f000 f974 	bl	8016680 <SCSI_ProcessCmd>
 8016398:	4603      	mov	r3, r0
 801639a:	2b00      	cmp	r3, #0
 801639c:	da0b      	bge.n	80163b6 <MSC_BOT_DataIn+0x5a>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801639e:	2101      	movs	r1, #1
 80163a0:	6878      	ldr	r0, [r7, #4]
 80163a2:	f000 f8eb 	bl	801657c <MSC_BOT_SendCSW>
    }
    break;
 80163a6:	e006      	b.n	80163b6 <MSC_BOT_DataIn+0x5a>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80163a8:	2100      	movs	r1, #0
 80163aa:	6878      	ldr	r0, [r7, #4]
 80163ac:	f000 f8e6 	bl	801657c <MSC_BOT_SendCSW>
    break;
 80163b0:	e002      	b.n	80163b8 <MSC_BOT_DataIn+0x5c>

  default:
    break;
 80163b2:	bf00      	nop
 80163b4:	e000      	b.n	80163b8 <MSC_BOT_DataIn+0x5c>
    break;
 80163b6:	bf00      	nop
  }
}
 80163b8:	bf00      	nop
 80163ba:	3710      	adds	r7, #16
 80163bc:	46bd      	mov	sp, r7
 80163be:	bd80      	pop	{r7, pc}

080163c0 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b084      	sub	sp, #16
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
 80163c8:	460b      	mov	r3, r1
 80163ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80163d2:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	7a1b      	ldrb	r3, [r3, #8]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d002      	beq.n	80163e2 <MSC_BOT_DataOut+0x22>
 80163dc:	2b01      	cmp	r3, #1
 80163de:	d004      	beq.n	80163ea <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80163e0:	e015      	b.n	801640e <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 80163e2:	6878      	ldr	r0, [r7, #4]
 80163e4:	f000 f818 	bl	8016418 <MSC_BOT_CBW_Decode>
      break;
 80163e8:	e011      	b.n	801640e <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80163f6:	461a      	mov	r2, r3
 80163f8:	6878      	ldr	r0, [r7, #4]
 80163fa:	f000 f941 	bl	8016680 <SCSI_ProcessCmd>
 80163fe:	4603      	mov	r3, r0
 8016400:	2b00      	cmp	r3, #0
 8016402:	da03      	bge.n	801640c <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8016404:	2101      	movs	r1, #1
 8016406:	6878      	ldr	r0, [r7, #4]
 8016408:	f000 f8b8 	bl	801657c <MSC_BOT_SendCSW>
      break;
 801640c:	bf00      	nop
  }
}
 801640e:	bf00      	nop
 8016410:	3710      	adds	r7, #16
 8016412:	46bd      	mov	sp, r7
 8016414:	bd80      	pop	{r7, pc}
	...

08016418 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b084      	sub	sp, #16
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016426:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8016440:	2101      	movs	r1, #1
 8016442:	6878      	ldr	r0, [r7, #4]
 8016444:	f006 f8d8 	bl	801c5f8 <USBD_LL_GetRxDataSize>
 8016448:	4603      	mov	r3, r0
 801644a:	2b1f      	cmp	r3, #31
 801644c:	d114      	bne.n	8016478 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8016454:	4a32      	ldr	r2, [pc, #200]	; (8016520 <MSC_BOT_CBW_Decode+0x108>)
 8016456:	4293      	cmp	r3, r2
 8016458:	d10e      	bne.n	8016478 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8016460:	2b01      	cmp	r3, #1
 8016462:	d809      	bhi.n	8016478 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801646a:	2b00      	cmp	r3, #0
 801646c:	d004      	beq.n	8016478 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8016474:	2b10      	cmp	r3, #16
 8016476:	d90e      	bls.n	8016496 <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801647e:	2320      	movs	r3, #32
 8016480:	2205      	movs	r2, #5
 8016482:	6878      	ldr	r0, [r7, #4]
 8016484:	f000 fd71 	bl	8016f6a <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	2202      	movs	r2, #2
 801648c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801648e:	6878      	ldr	r0, [r7, #4]
 8016490:	f000 f8a0 	bl	80165d4 <MSC_BOT_Abort>
 8016494:	e041      	b.n	801651a <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80164a2:	461a      	mov	r2, r3
 80164a4:	6878      	ldr	r0, [r7, #4]
 80164a6:	f000 f8eb 	bl	8016680 <SCSI_ProcessCmd>
 80164aa:	4603      	mov	r3, r0
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	da0c      	bge.n	80164ca <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	7a1b      	ldrb	r3, [r3, #8]
 80164b4:	2b05      	cmp	r3, #5
 80164b6:	d104      	bne.n	80164c2 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80164b8:	2101      	movs	r1, #1
 80164ba:	6878      	ldr	r0, [r7, #4]
 80164bc:	f000 f85e 	bl	801657c <MSC_BOT_SendCSW>
 80164c0:	e02b      	b.n	801651a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80164c2:	6878      	ldr	r0, [r7, #4]
 80164c4:	f000 f886 	bl	80165d4 <MSC_BOT_Abort>
 80164c8:	e027      	b.n	801651a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	7a1b      	ldrb	r3, [r3, #8]
 80164ce:	2b02      	cmp	r3, #2
 80164d0:	d022      	beq.n	8016518 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80164d6:	2b01      	cmp	r3, #1
 80164d8:	d01e      	beq.n	8016518 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80164de:	2b03      	cmp	r3, #3
 80164e0:	d01a      	beq.n	8016518 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	68db      	ldr	r3, [r3, #12]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d009      	beq.n	80164fe <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	f103 0110 	add.w	r1, r3, #16
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	68db      	ldr	r3, [r3, #12]
 80164f4:	461a      	mov	r2, r3
 80164f6:	6878      	ldr	r0, [r7, #4]
 80164f8:	f000 f814 	bl	8016524 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80164fc:	e00d      	b.n	801651a <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	68db      	ldr	r3, [r3, #12]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d104      	bne.n	8016510 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8016506:	2100      	movs	r1, #0
 8016508:	6878      	ldr	r0, [r7, #4]
 801650a:	f000 f837 	bl	801657c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801650e:	e004      	b.n	801651a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8016510:	6878      	ldr	r0, [r7, #4]
 8016512:	f000 f85f 	bl	80165d4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8016516:	e000      	b.n	801651a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8016518:	bf00      	nop
    }
  }
}
 801651a:	3710      	adds	r7, #16
 801651c:	46bd      	mov	sp, r7
 801651e:	bd80      	pop	{r7, pc}
 8016520:	43425355 	.word	0x43425355

08016524 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8016524:	b580      	push	{r7, lr}
 8016526:	b086      	sub	sp, #24
 8016528:	af00      	add	r7, sp, #0
 801652a:	60f8      	str	r0, [r7, #12]
 801652c:	60b9      	str	r1, [r7, #8]
 801652e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016536:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8016538:	697b      	ldr	r3, [r7, #20]
 801653a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801653e:	687a      	ldr	r2, [r7, #4]
 8016540:	4293      	cmp	r3, r2
 8016542:	bf28      	it	cs
 8016544:	4613      	movcs	r3, r2
 8016546:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8016548:	697b      	ldr	r3, [r7, #20]
 801654a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	1ad2      	subs	r2, r2, r3
 8016552:	697b      	ldr	r3, [r7, #20]
 8016554:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8016558:	697b      	ldr	r3, [r7, #20]
 801655a:	2200      	movs	r2, #0
 801655c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8016560:	697b      	ldr	r3, [r7, #20]
 8016562:	2204      	movs	r2, #4
 8016564:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8016566:	693b      	ldr	r3, [r7, #16]
 8016568:	68ba      	ldr	r2, [r7, #8]
 801656a:	2181      	movs	r1, #129	; 0x81
 801656c:	68f8      	ldr	r0, [r7, #12]
 801656e:	f006 f801 	bl	801c574 <USBD_LL_Transmit>
}
 8016572:	bf00      	nop
 8016574:	3718      	adds	r7, #24
 8016576:	46bd      	mov	sp, r7
 8016578:	bd80      	pop	{r7, pc}
	...

0801657c <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801657c:	b580      	push	{r7, lr}
 801657e:	b084      	sub	sp, #16
 8016580:	af00      	add	r7, sp, #0
 8016582:	6078      	str	r0, [r7, #4]
 8016584:	460b      	mov	r3, r1
 8016586:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801658e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	4a0f      	ldr	r2, [pc, #60]	; (80165d0 <MSC_BOT_SendCSW+0x54>)
 8016594:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	78fa      	ldrb	r2, [r7, #3]
 801659c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	2200      	movs	r2, #0
 80165a4:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	f503 720c 	add.w	r2, r3, #560	; 0x230
 80165ac:	230d      	movs	r3, #13
 80165ae:	2181      	movs	r1, #129	; 0x81
 80165b0:	6878      	ldr	r0, [r7, #4]
 80165b2:	f005 ffdf 	bl	801c574 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80165bc:	231f      	movs	r3, #31
 80165be:	2101      	movs	r1, #1
 80165c0:	6878      	ldr	r0, [r7, #4]
 80165c2:	f005 fff8 	bl	801c5b6 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 80165c6:	bf00      	nop
 80165c8:	3710      	adds	r7, #16
 80165ca:	46bd      	mov	sp, r7
 80165cc:	bd80      	pop	{r7, pc}
 80165ce:	bf00      	nop
 80165d0:	53425355 	.word	0x53425355

080165d4 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b084      	sub	sp, #16
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80165e2:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d10c      	bne.n	8016608 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d007      	beq.n	8016608 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d103      	bne.n	8016608 <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8016600:	2101      	movs	r1, #1
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f005 ff2d 	bl	801c462 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8016608:	2181      	movs	r1, #129	; 0x81
 801660a:	6878      	ldr	r0, [r7, #4]
 801660c:	f005 ff29 	bl	801c462 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	7a5b      	ldrb	r3, [r3, #9]
 8016614:	2b02      	cmp	r3, #2
 8016616:	d107      	bne.n	8016628 <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8016618:	2181      	movs	r1, #129	; 0x81
 801661a:	6878      	ldr	r0, [r7, #4]
 801661c:	f005 ff21 	bl	801c462 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8016620:	2101      	movs	r1, #1
 8016622:	6878      	ldr	r0, [r7, #4]
 8016624:	f005 ff1d 	bl	801c462 <USBD_LL_StallEP>
  }
}
 8016628:	bf00      	nop
 801662a:	3710      	adds	r7, #16
 801662c:	46bd      	mov	sp, r7
 801662e:	bd80      	pop	{r7, pc}

08016630 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016630:	b580      	push	{r7, lr}
 8016632:	b084      	sub	sp, #16
 8016634:	af00      	add	r7, sp, #0
 8016636:	6078      	str	r0, [r7, #4]
 8016638:	460b      	mov	r3, r1
 801663a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016642:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	7a5b      	ldrb	r3, [r3, #9]
 8016648:	2b02      	cmp	r3, #2
 801664a:	d108      	bne.n	801665e <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801664c:	2181      	movs	r1, #129	; 0x81
 801664e:	6878      	ldr	r0, [r7, #4]
 8016650:	f005 ff07 	bl	801c462 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8016654:	2101      	movs	r1, #1
 8016656:	6878      	ldr	r0, [r7, #4]
 8016658:	f005 ff03 	bl	801c462 <USBD_LL_StallEP>
 801665c:	e00d      	b.n	801667a <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801665e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016662:	2b00      	cmp	r3, #0
 8016664:	da08      	bge.n	8016678 <MSC_BOT_CplClrFeature+0x48>
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	7a5b      	ldrb	r3, [r3, #9]
 801666a:	2b01      	cmp	r3, #1
 801666c:	d004      	beq.n	8016678 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801666e:	2101      	movs	r1, #1
 8016670:	6878      	ldr	r0, [r7, #4]
 8016672:	f7ff ff83 	bl	801657c <MSC_BOT_SendCSW>
 8016676:	e000      	b.n	801667a <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8016678:	bf00      	nop
  }
}
 801667a:	3710      	adds	r7, #16
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}

08016680 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b086      	sub	sp, #24
 8016684:	af00      	add	r7, sp, #0
 8016686:	60f8      	str	r0, [r7, #12]
 8016688:	460b      	mov	r3, r1
 801668a:	607a      	str	r2, [r7, #4]
 801668c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016694:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	781b      	ldrb	r3, [r3, #0]
 801669a:	2baa      	cmp	r3, #170	; 0xaa
 801669c:	f000 8144 	beq.w	8016928 <SCSI_ProcessCmd+0x2a8>
 80166a0:	2baa      	cmp	r3, #170	; 0xaa
 80166a2:	f300 8153 	bgt.w	801694c <SCSI_ProcessCmd+0x2cc>
 80166a6:	2ba8      	cmp	r3, #168	; 0xa8
 80166a8:	f000 812c 	beq.w	8016904 <SCSI_ProcessCmd+0x284>
 80166ac:	2ba8      	cmp	r3, #168	; 0xa8
 80166ae:	f300 814d 	bgt.w	801694c <SCSI_ProcessCmd+0x2cc>
 80166b2:	2b5a      	cmp	r3, #90	; 0x5a
 80166b4:	f300 80c0 	bgt.w	8016838 <SCSI_ProcessCmd+0x1b8>
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	f2c0 8147 	blt.w	801694c <SCSI_ProcessCmd+0x2cc>
 80166be:	2b5a      	cmp	r3, #90	; 0x5a
 80166c0:	f200 8144 	bhi.w	801694c <SCSI_ProcessCmd+0x2cc>
 80166c4:	a201      	add	r2, pc, #4	; (adr r2, 80166cc <SCSI_ProcessCmd+0x4c>)
 80166c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166ca:	bf00      	nop
 80166cc:	0801683f 	.word	0x0801683f
 80166d0:	0801694d 	.word	0x0801694d
 80166d4:	0801694d 	.word	0x0801694d
 80166d8:	08016851 	.word	0x08016851
 80166dc:	0801694d 	.word	0x0801694d
 80166e0:	0801694d 	.word	0x0801694d
 80166e4:	0801694d 	.word	0x0801694d
 80166e8:	0801694d 	.word	0x0801694d
 80166ec:	0801694d 	.word	0x0801694d
 80166f0:	0801694d 	.word	0x0801694d
 80166f4:	0801694d 	.word	0x0801694d
 80166f8:	0801694d 	.word	0x0801694d
 80166fc:	0801694d 	.word	0x0801694d
 8016700:	0801694d 	.word	0x0801694d
 8016704:	0801694d 	.word	0x0801694d
 8016708:	0801694d 	.word	0x0801694d
 801670c:	0801694d 	.word	0x0801694d
 8016710:	0801694d 	.word	0x0801694d
 8016714:	08016863 	.word	0x08016863
 8016718:	0801694d 	.word	0x0801694d
 801671c:	0801694d 	.word	0x0801694d
 8016720:	0801694d 	.word	0x0801694d
 8016724:	0801694d 	.word	0x0801694d
 8016728:	0801694d 	.word	0x0801694d
 801672c:	0801694d 	.word	0x0801694d
 8016730:	0801694d 	.word	0x0801694d
 8016734:	08016899 	.word	0x08016899
 8016738:	08016875 	.word	0x08016875
 801673c:	0801694d 	.word	0x0801694d
 8016740:	0801694d 	.word	0x0801694d
 8016744:	08016887 	.word	0x08016887
 8016748:	0801694d 	.word	0x0801694d
 801674c:	0801694d 	.word	0x0801694d
 8016750:	0801694d 	.word	0x0801694d
 8016754:	0801694d 	.word	0x0801694d
 8016758:	080168bd 	.word	0x080168bd
 801675c:	0801694d 	.word	0x0801694d
 8016760:	080168cf 	.word	0x080168cf
 8016764:	0801694d 	.word	0x0801694d
 8016768:	0801694d 	.word	0x0801694d
 801676c:	080168f3 	.word	0x080168f3
 8016770:	0801694d 	.word	0x0801694d
 8016774:	08016917 	.word	0x08016917
 8016778:	0801694d 	.word	0x0801694d
 801677c:	0801694d 	.word	0x0801694d
 8016780:	0801694d 	.word	0x0801694d
 8016784:	0801694d 	.word	0x0801694d
 8016788:	0801693b 	.word	0x0801693b
 801678c:	0801694d 	.word	0x0801694d
 8016790:	0801694d 	.word	0x0801694d
 8016794:	0801694d 	.word	0x0801694d
 8016798:	0801694d 	.word	0x0801694d
 801679c:	0801694d 	.word	0x0801694d
 80167a0:	0801694d 	.word	0x0801694d
 80167a4:	0801694d 	.word	0x0801694d
 80167a8:	0801694d 	.word	0x0801694d
 80167ac:	0801694d 	.word	0x0801694d
 80167b0:	0801694d 	.word	0x0801694d
 80167b4:	0801694d 	.word	0x0801694d
 80167b8:	0801694d 	.word	0x0801694d
 80167bc:	0801694d 	.word	0x0801694d
 80167c0:	0801694d 	.word	0x0801694d
 80167c4:	0801694d 	.word	0x0801694d
 80167c8:	0801694d 	.word	0x0801694d
 80167cc:	0801694d 	.word	0x0801694d
 80167d0:	0801694d 	.word	0x0801694d
 80167d4:	0801694d 	.word	0x0801694d
 80167d8:	0801694d 	.word	0x0801694d
 80167dc:	0801694d 	.word	0x0801694d
 80167e0:	0801694d 	.word	0x0801694d
 80167e4:	0801694d 	.word	0x0801694d
 80167e8:	0801694d 	.word	0x0801694d
 80167ec:	0801694d 	.word	0x0801694d
 80167f0:	0801694d 	.word	0x0801694d
 80167f4:	0801694d 	.word	0x0801694d
 80167f8:	0801694d 	.word	0x0801694d
 80167fc:	0801694d 	.word	0x0801694d
 8016800:	0801694d 	.word	0x0801694d
 8016804:	0801694d 	.word	0x0801694d
 8016808:	0801694d 	.word	0x0801694d
 801680c:	0801694d 	.word	0x0801694d
 8016810:	0801694d 	.word	0x0801694d
 8016814:	0801694d 	.word	0x0801694d
 8016818:	0801694d 	.word	0x0801694d
 801681c:	0801694d 	.word	0x0801694d
 8016820:	0801694d 	.word	0x0801694d
 8016824:	0801694d 	.word	0x0801694d
 8016828:	0801694d 	.word	0x0801694d
 801682c:	0801694d 	.word	0x0801694d
 8016830:	0801694d 	.word	0x0801694d
 8016834:	080168ab 	.word	0x080168ab
 8016838:	2b9e      	cmp	r3, #158	; 0x9e
 801683a:	d051      	beq.n	80168e0 <SCSI_ProcessCmd+0x260>
 801683c:	e086      	b.n	801694c <SCSI_ProcessCmd+0x2cc>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801683e:	7afb      	ldrb	r3, [r7, #11]
 8016840:	687a      	ldr	r2, [r7, #4]
 8016842:	4619      	mov	r1, r3
 8016844:	68f8      	ldr	r0, [r7, #12]
 8016846:	f000 f893 	bl	8016970 <SCSI_TestUnitReady>
 801684a:	4603      	mov	r3, r0
 801684c:	75fb      	strb	r3, [r7, #23]
    break;
 801684e:	e089      	b.n	8016964 <SCSI_ProcessCmd+0x2e4>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 8016850:	7afb      	ldrb	r3, [r7, #11]
 8016852:	687a      	ldr	r2, [r7, #4]
 8016854:	4619      	mov	r1, r3
 8016856:	68f8      	ldr	r0, [r7, #12]
 8016858:	f000 fb0e 	bl	8016e78 <SCSI_RequestSense>
 801685c:	4603      	mov	r3, r0
 801685e:	75fb      	strb	r3, [r7, #23]
    break;
 8016860:	e080      	b.n	8016964 <SCSI_ProcessCmd+0x2e4>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8016862:	7afb      	ldrb	r3, [r7, #11]
 8016864:	687a      	ldr	r2, [r7, #4]
 8016866:	4619      	mov	r1, r3
 8016868:	68f8      	ldr	r0, [r7, #12]
 801686a:	f000 f8cb 	bl	8016a04 <SCSI_Inquiry>
 801686e:	4603      	mov	r3, r0
 8016870:	75fb      	strb	r3, [r7, #23]
    break;
 8016872:	e077      	b.n	8016964 <SCSI_ProcessCmd+0x2e4>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8016874:	7afb      	ldrb	r3, [r7, #11]
 8016876:	687a      	ldr	r2, [r7, #4]
 8016878:	4619      	mov	r1, r3
 801687a:	68f8      	ldr	r0, [r7, #12]
 801687c:	f000 fbb8 	bl	8016ff0 <SCSI_StartStopUnit>
 8016880:	4603      	mov	r3, r0
 8016882:	75fb      	strb	r3, [r7, #23]
    break;
 8016884:	e06e      	b.n	8016964 <SCSI_ProcessCmd+0x2e4>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8016886:	7afb      	ldrb	r3, [r7, #11]
 8016888:	687a      	ldr	r2, [r7, #4]
 801688a:	4619      	mov	r1, r3
 801688c:	68f8      	ldr	r0, [r7, #12]
 801688e:	f000 fbfa 	bl	8017086 <SCSI_AllowPreventRemovable>
 8016892:	4603      	mov	r3, r0
 8016894:	75fb      	strb	r3, [r7, #23]
    break;
 8016896:	e065      	b.n	8016964 <SCSI_ProcessCmd+0x2e4>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8016898:	7afb      	ldrb	r3, [r7, #11]
 801689a:	687a      	ldr	r2, [r7, #4]
 801689c:	4619      	mov	r1, r3
 801689e:	68f8      	ldr	r0, [r7, #12]
 80168a0:	f000 fa9e 	bl	8016de0 <SCSI_ModeSense6>
 80168a4:	4603      	mov	r3, r0
 80168a6:	75fb      	strb	r3, [r7, #23]
    break;
 80168a8:	e05c      	b.n	8016964 <SCSI_ProcessCmd+0x2e4>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 80168aa:	7afb      	ldrb	r3, [r7, #11]
 80168ac:	687a      	ldr	r2, [r7, #4]
 80168ae:	4619      	mov	r1, r3
 80168b0:	68f8      	ldr	r0, [r7, #12]
 80168b2:	f000 fabb 	bl	8016e2c <SCSI_ModeSense10>
 80168b6:	4603      	mov	r3, r0
 80168b8:	75fb      	strb	r3, [r7, #23]
    break;
 80168ba:	e053      	b.n	8016964 <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80168bc:	7afb      	ldrb	r3, [r7, #11]
 80168be:	687a      	ldr	r2, [r7, #4]
 80168c0:	4619      	mov	r1, r3
 80168c2:	68f8      	ldr	r0, [r7, #12]
 80168c4:	f000 fa1f 	bl	8016d06 <SCSI_ReadFormatCapacity>
 80168c8:	4603      	mov	r3, r0
 80168ca:	75fb      	strb	r3, [r7, #23]
    break;
 80168cc:	e04a      	b.n	8016964 <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80168ce:	7afb      	ldrb	r3, [r7, #11]
 80168d0:	687a      	ldr	r2, [r7, #4]
 80168d2:	4619      	mov	r1, r3
 80168d4:	68f8      	ldr	r0, [r7, #12]
 80168d6:	f000 f903 	bl	8016ae0 <SCSI_ReadCapacity10>
 80168da:	4603      	mov	r3, r0
 80168dc:	75fb      	strb	r3, [r7, #23]
    break;
 80168de:	e041      	b.n	8016964 <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80168e0:	7afb      	ldrb	r3, [r7, #11]
 80168e2:	687a      	ldr	r2, [r7, #4]
 80168e4:	4619      	mov	r1, r3
 80168e6:	68f8      	ldr	r0, [r7, #12]
 80168e8:	f000 f969 	bl	8016bbe <SCSI_ReadCapacity16>
 80168ec:	4603      	mov	r3, r0
 80168ee:	75fb      	strb	r3, [r7, #23]
    break;
 80168f0:	e038      	b.n	8016964 <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 80168f2:	7afb      	ldrb	r3, [r7, #11]
 80168f4:	687a      	ldr	r2, [r7, #4]
 80168f6:	4619      	mov	r1, r3
 80168f8:	68f8      	ldr	r0, [r7, #12]
 80168fa:	f000 fbe7 	bl	80170cc <SCSI_Read10>
 80168fe:	4603      	mov	r3, r0
 8016900:	75fb      	strb	r3, [r7, #23]
    break;
 8016902:	e02f      	b.n	8016964 <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 8016904:	7afb      	ldrb	r3, [r7, #11]
 8016906:	687a      	ldr	r2, [r7, #4]
 8016908:	4619      	mov	r1, r3
 801690a:	68f8      	ldr	r0, [r7, #12]
 801690c:	f000 fc78 	bl	8017200 <SCSI_Read12>
 8016910:	4603      	mov	r3, r0
 8016912:	75fb      	strb	r3, [r7, #23]
    break;
 8016914:	e026      	b.n	8016964 <SCSI_ProcessCmd+0x2e4>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8016916:	7afb      	ldrb	r3, [r7, #11]
 8016918:	687a      	ldr	r2, [r7, #4]
 801691a:	4619      	mov	r1, r3
 801691c:	68f8      	ldr	r0, [r7, #12]
 801691e:	f000 fd14 	bl	801734a <SCSI_Write10>
 8016922:	4603      	mov	r3, r0
 8016924:	75fb      	strb	r3, [r7, #23]
    break;
 8016926:	e01d      	b.n	8016964 <SCSI_ProcessCmd+0x2e4>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 8016928:	7afb      	ldrb	r3, [r7, #11]
 801692a:	687a      	ldr	r2, [r7, #4]
 801692c:	4619      	mov	r1, r3
 801692e:	68f8      	ldr	r0, [r7, #12]
 8016930:	f000 fdca 	bl	80174c8 <SCSI_Write12>
 8016934:	4603      	mov	r3, r0
 8016936:	75fb      	strb	r3, [r7, #23]
    break;
 8016938:	e014      	b.n	8016964 <SCSI_ProcessCmd+0x2e4>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 801693a:	7afb      	ldrb	r3, [r7, #11]
 801693c:	687a      	ldr	r2, [r7, #4]
 801693e:	4619      	mov	r1, r3
 8016940:	68f8      	ldr	r0, [r7, #12]
 8016942:	f000 fe90 	bl	8017666 <SCSI_Verify10>
 8016946:	4603      	mov	r3, r0
 8016948:	75fb      	strb	r3, [r7, #23]
    break;
 801694a:	e00b      	b.n	8016964 <SCSI_ProcessCmd+0x2e4>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801694c:	7af9      	ldrb	r1, [r7, #11]
 801694e:	2320      	movs	r3, #32
 8016950:	2205      	movs	r2, #5
 8016952:	68f8      	ldr	r0, [r7, #12]
 8016954:	f000 fb09 	bl	8016f6a <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8016958:	693b      	ldr	r3, [r7, #16]
 801695a:	2202      	movs	r2, #2
 801695c:	725a      	strb	r2, [r3, #9]
    ret = -1;
 801695e:	23ff      	movs	r3, #255	; 0xff
 8016960:	75fb      	strb	r3, [r7, #23]
    break;
 8016962:	bf00      	nop
  }

  return ret;
 8016964:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016968:	4618      	mov	r0, r3
 801696a:	3718      	adds	r7, #24
 801696c:	46bd      	mov	sp, r7
 801696e:	bd80      	pop	{r7, pc}

08016970 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b086      	sub	sp, #24
 8016974:	af00      	add	r7, sp, #0
 8016976:	60f8      	str	r0, [r7, #12]
 8016978:	460b      	mov	r3, r1
 801697a:	607a      	str	r2, [r7, #4]
 801697c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016984:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8016986:	697b      	ldr	r3, [r7, #20]
 8016988:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801698c:	2b00      	cmp	r3, #0
 801698e:	d00a      	beq.n	80169a6 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016990:	697b      	ldr	r3, [r7, #20]
 8016992:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8016996:	2320      	movs	r3, #32
 8016998:	2205      	movs	r2, #5
 801699a:	68f8      	ldr	r0, [r7, #12]
 801699c:	f000 fae5 	bl	8016f6a <SCSI_SenseCode>

    return -1;
 80169a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80169a4:	e02a      	b.n	80169fc <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80169a6:	697b      	ldr	r3, [r7, #20]
 80169a8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80169ac:	2b02      	cmp	r3, #2
 80169ae:	d10b      	bne.n	80169c8 <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80169b0:	7af9      	ldrb	r1, [r7, #11]
 80169b2:	233a      	movs	r3, #58	; 0x3a
 80169b4:	2202      	movs	r2, #2
 80169b6:	68f8      	ldr	r0, [r7, #12]
 80169b8:	f000 fad7 	bl	8016f6a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80169bc:	697b      	ldr	r3, [r7, #20]
 80169be:	2205      	movs	r2, #5
 80169c0:	721a      	strb	r2, [r3, #8]
    return -1;
 80169c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80169c6:	e019      	b.n	80169fc <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80169ce:	689b      	ldr	r3, [r3, #8]
 80169d0:	7afa      	ldrb	r2, [r7, #11]
 80169d2:	4610      	mov	r0, r2
 80169d4:	4798      	blx	r3
 80169d6:	4603      	mov	r3, r0
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d00b      	beq.n	80169f4 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80169dc:	7af9      	ldrb	r1, [r7, #11]
 80169de:	233a      	movs	r3, #58	; 0x3a
 80169e0:	2202      	movs	r2, #2
 80169e2:	68f8      	ldr	r0, [r7, #12]
 80169e4:	f000 fac1 	bl	8016f6a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80169e8:	697b      	ldr	r3, [r7, #20]
 80169ea:	2205      	movs	r2, #5
 80169ec:	721a      	strb	r2, [r3, #8]

    return -1;
 80169ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80169f2:	e003      	b.n	80169fc <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 80169f4:	697b      	ldr	r3, [r7, #20]
 80169f6:	2200      	movs	r2, #0
 80169f8:	60da      	str	r2, [r3, #12]

  return 0;
 80169fa:	2300      	movs	r3, #0
}
 80169fc:	4618      	mov	r0, r3
 80169fe:	3718      	adds	r7, #24
 8016a00:	46bd      	mov	sp, r7
 8016a02:	bd80      	pop	{r7, pc}

08016a04 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b088      	sub	sp, #32
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	60f8      	str	r0, [r7, #12]
 8016a0c:	460b      	mov	r3, r1
 8016a0e:	607a      	str	r2, [r7, #4]
 8016a10:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016a18:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 8016a1a:	69bb      	ldr	r3, [r7, #24]
 8016a1c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d10a      	bne.n	8016a3a <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016a24:	69bb      	ldr	r3, [r7, #24]
 8016a26:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8016a2a:	2320      	movs	r3, #32
 8016a2c:	2205      	movs	r2, #5
 8016a2e:	68f8      	ldr	r0, [r7, #12]
 8016a30:	f000 fa9b 	bl	8016f6a <SCSI_SenseCode>
    return -1;
 8016a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a38:	e04a      	b.n	8016ad0 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	3301      	adds	r3, #1
 8016a3e:	781b      	ldrb	r3, [r3, #0]
 8016a40:	f003 0301 	and.w	r3, r3, #1
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d020      	beq.n	8016a8a <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	3302      	adds	r3, #2
 8016a4c:	781b      	ldrb	r3, [r3, #0]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d105      	bne.n	8016a5e <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8016a52:	2206      	movs	r2, #6
 8016a54:	4920      	ldr	r1, [pc, #128]	; (8016ad8 <SCSI_Inquiry+0xd4>)
 8016a56:	69b8      	ldr	r0, [r7, #24]
 8016a58:	f000 ff50 	bl	80178fc <SCSI_UpdateBotData>
 8016a5c:	e037      	b.n	8016ace <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	3302      	adds	r3, #2
 8016a62:	781b      	ldrb	r3, [r3, #0]
 8016a64:	2b80      	cmp	r3, #128	; 0x80
 8016a66:	d105      	bne.n	8016a74 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8016a68:	2208      	movs	r2, #8
 8016a6a:	491c      	ldr	r1, [pc, #112]	; (8016adc <SCSI_Inquiry+0xd8>)
 8016a6c:	69b8      	ldr	r0, [r7, #24]
 8016a6e:	f000 ff45 	bl	80178fc <SCSI_UpdateBotData>
 8016a72:	e02c      	b.n	8016ace <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8016a74:	69bb      	ldr	r3, [r7, #24]
 8016a76:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8016a7a:	2324      	movs	r3, #36	; 0x24
 8016a7c:	2205      	movs	r2, #5
 8016a7e:	68f8      	ldr	r0, [r7, #12]
 8016a80:	f000 fa73 	bl	8016f6a <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8016a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a88:	e022      	b.n	8016ad0 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016a90:	69d9      	ldr	r1, [r3, #28]
 8016a92:	7afa      	ldrb	r2, [r7, #11]
 8016a94:	4613      	mov	r3, r2
 8016a96:	00db      	lsls	r3, r3, #3
 8016a98:	4413      	add	r3, r2
 8016a9a:	009b      	lsls	r3, r3, #2
 8016a9c:	440b      	add	r3, r1
 8016a9e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8016aa0:	697b      	ldr	r3, [r7, #20]
 8016aa2:	3304      	adds	r3, #4
 8016aa4:	781b      	ldrb	r3, [r3, #0]
 8016aa6:	b29b      	uxth	r3, r3
 8016aa8:	3305      	adds	r3, #5
 8016aaa:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	3304      	adds	r3, #4
 8016ab0:	781b      	ldrb	r3, [r3, #0]
 8016ab2:	b29b      	uxth	r3, r3
 8016ab4:	8bfa      	ldrh	r2, [r7, #30]
 8016ab6:	429a      	cmp	r2, r3
 8016ab8:	d303      	bcc.n	8016ac2 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	3304      	adds	r3, #4
 8016abe:	781b      	ldrb	r3, [r3, #0]
 8016ac0:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8016ac2:	8bfb      	ldrh	r3, [r7, #30]
 8016ac4:	461a      	mov	r2, r3
 8016ac6:	6979      	ldr	r1, [r7, #20]
 8016ac8:	69b8      	ldr	r0, [r7, #24]
 8016aca:	f000 ff17 	bl	80178fc <SCSI_UpdateBotData>
  }

  return 0;
 8016ace:	2300      	movs	r3, #0
}
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	3720      	adds	r7, #32
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	bd80      	pop	{r7, pc}
 8016ad8:	200002e0 	.word	0x200002e0
 8016adc:	200002e8 	.word	0x200002e8

08016ae0 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016ae0:	b580      	push	{r7, lr}
 8016ae2:	b086      	sub	sp, #24
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	60f8      	str	r0, [r7, #12]
 8016ae8:	460b      	mov	r3, r1
 8016aea:	607a      	str	r2, [r7, #4]
 8016aec:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016af4:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016afc:	685b      	ldr	r3, [r3, #4]
 8016afe:	697a      	ldr	r2, [r7, #20]
 8016b00:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8016b04:	697a      	ldr	r2, [r7, #20]
 8016b06:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8016b0a:	7af8      	ldrb	r0, [r7, #11]
 8016b0c:	4798      	blx	r3
 8016b0e:	4603      	mov	r3, r0
 8016b10:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016b12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d104      	bne.n	8016b24 <SCSI_ReadCapacity10+0x44>
 8016b1a:	697b      	ldr	r3, [r7, #20]
 8016b1c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8016b20:	2b02      	cmp	r3, #2
 8016b22:	d108      	bne.n	8016b36 <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016b24:	7af9      	ldrb	r1, [r7, #11]
 8016b26:	233a      	movs	r3, #58	; 0x3a
 8016b28:	2202      	movs	r2, #2
 8016b2a:	68f8      	ldr	r0, [r7, #12]
 8016b2c:	f000 fa1d 	bl	8016f6a <SCSI_SenseCode>
    return -1;
 8016b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016b34:	e03f      	b.n	8016bb6 <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8016b36:	697b      	ldr	r3, [r7, #20]
 8016b38:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8016b3c:	3b01      	subs	r3, #1
 8016b3e:	0e1b      	lsrs	r3, r3, #24
 8016b40:	b2da      	uxtb	r2, r3
 8016b42:	697b      	ldr	r3, [r7, #20]
 8016b44:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8016b46:	697b      	ldr	r3, [r7, #20]
 8016b48:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8016b4c:	3b01      	subs	r3, #1
 8016b4e:	0c1b      	lsrs	r3, r3, #16
 8016b50:	b2da      	uxtb	r2, r3
 8016b52:	697b      	ldr	r3, [r7, #20]
 8016b54:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8016b56:	697b      	ldr	r3, [r7, #20]
 8016b58:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8016b5c:	3b01      	subs	r3, #1
 8016b5e:	0a1b      	lsrs	r3, r3, #8
 8016b60:	b2da      	uxtb	r2, r3
 8016b62:	697b      	ldr	r3, [r7, #20]
 8016b64:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8016b66:	697b      	ldr	r3, [r7, #20]
 8016b68:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8016b6c:	b2db      	uxtb	r3, r3
 8016b6e:	3b01      	subs	r3, #1
 8016b70:	b2da      	uxtb	r2, r3
 8016b72:	697b      	ldr	r3, [r7, #20]
 8016b74:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8016b76:	697b      	ldr	r3, [r7, #20]
 8016b78:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8016b7c:	161b      	asrs	r3, r3, #24
 8016b7e:	b2da      	uxtb	r2, r3
 8016b80:	697b      	ldr	r3, [r7, #20]
 8016b82:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8016b84:	697b      	ldr	r3, [r7, #20]
 8016b86:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8016b8a:	141b      	asrs	r3, r3, #16
 8016b8c:	b2da      	uxtb	r2, r3
 8016b8e:	697b      	ldr	r3, [r7, #20]
 8016b90:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8016b92:	697b      	ldr	r3, [r7, #20]
 8016b94:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8016b98:	0a1b      	lsrs	r3, r3, #8
 8016b9a:	b29b      	uxth	r3, r3
 8016b9c:	b2da      	uxtb	r2, r3
 8016b9e:	697b      	ldr	r3, [r7, #20]
 8016ba0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8016ba2:	697b      	ldr	r3, [r7, #20]
 8016ba4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8016ba8:	b2da      	uxtb	r2, r3
 8016baa:	697b      	ldr	r3, [r7, #20]
 8016bac:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8016bae:	697b      	ldr	r3, [r7, #20]
 8016bb0:	2208      	movs	r2, #8
 8016bb2:	60da      	str	r2, [r3, #12]

  return 0;
 8016bb4:	2300      	movs	r3, #0

}
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	3718      	adds	r7, #24
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	bd80      	pop	{r7, pc}

08016bbe <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016bbe:	b580      	push	{r7, lr}
 8016bc0:	b088      	sub	sp, #32
 8016bc2:	af00      	add	r7, sp, #0
 8016bc4:	60f8      	str	r0, [r7, #12]
 8016bc6:	460b      	mov	r3, r1
 8016bc8:	607a      	str	r2, [r7, #4]
 8016bca:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016bd2:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016bda:	685b      	ldr	r3, [r3, #4]
 8016bdc:	69ba      	ldr	r2, [r7, #24]
 8016bde:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8016be2:	69ba      	ldr	r2, [r7, #24]
 8016be4:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8016be8:	7af8      	ldrb	r0, [r7, #11]
 8016bea:	4798      	blx	r3
 8016bec:	4603      	mov	r3, r0
 8016bee:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016bf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d104      	bne.n	8016c02 <SCSI_ReadCapacity16+0x44>
 8016bf8:	69bb      	ldr	r3, [r7, #24]
 8016bfa:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8016bfe:	2b02      	cmp	r3, #2
 8016c00:	d108      	bne.n	8016c14 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016c02:	7af9      	ldrb	r1, [r7, #11]
 8016c04:	233a      	movs	r3, #58	; 0x3a
 8016c06:	2202      	movs	r2, #2
 8016c08:	68f8      	ldr	r0, [r7, #12]
 8016c0a:	f000 f9ae 	bl	8016f6a <SCSI_SenseCode>
    return -1;
 8016c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c12:	e074      	b.n	8016cfe <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	330a      	adds	r3, #10
 8016c18:	781b      	ldrb	r3, [r3, #0]
 8016c1a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	330b      	adds	r3, #11
 8016c20:	781b      	ldrb	r3, [r3, #0]
 8016c22:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016c24:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	330c      	adds	r3, #12
 8016c2a:	781b      	ldrb	r3, [r3, #0]
 8016c2c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8016c2e:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8016c30:	687a      	ldr	r2, [r7, #4]
 8016c32:	320d      	adds	r2, #13
 8016c34:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8016c36:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016c38:	69bb      	ldr	r3, [r7, #24]
 8016c3a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8016c3c:	2300      	movs	r3, #0
 8016c3e:	77fb      	strb	r3, [r7, #31]
 8016c40:	e007      	b.n	8016c52 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 8016c42:	7ffb      	ldrb	r3, [r7, #31]
 8016c44:	69ba      	ldr	r2, [r7, #24]
 8016c46:	4413      	add	r3, r2
 8016c48:	2200      	movs	r2, #0
 8016c4a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8016c4c:	7ffb      	ldrb	r3, [r7, #31]
 8016c4e:	3301      	adds	r3, #1
 8016c50:	77fb      	strb	r3, [r7, #31]
 8016c52:	7ffa      	ldrb	r2, [r7, #31]
 8016c54:	69bb      	ldr	r3, [r7, #24]
 8016c56:	68db      	ldr	r3, [r3, #12]
 8016c58:	429a      	cmp	r2, r3
 8016c5a:	d3f2      	bcc.n	8016c42 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8016c5c:	69bb      	ldr	r3, [r7, #24]
 8016c5e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8016c62:	3b01      	subs	r3, #1
 8016c64:	0e1b      	lsrs	r3, r3, #24
 8016c66:	b2da      	uxtb	r2, r3
 8016c68:	69bb      	ldr	r3, [r7, #24]
 8016c6a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8016c6c:	69bb      	ldr	r3, [r7, #24]
 8016c6e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8016c72:	3b01      	subs	r3, #1
 8016c74:	0c1b      	lsrs	r3, r3, #16
 8016c76:	b2da      	uxtb	r2, r3
 8016c78:	69bb      	ldr	r3, [r7, #24]
 8016c7a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8016c7c:	69bb      	ldr	r3, [r7, #24]
 8016c7e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8016c82:	3b01      	subs	r3, #1
 8016c84:	0a1b      	lsrs	r3, r3, #8
 8016c86:	b2da      	uxtb	r2, r3
 8016c88:	69bb      	ldr	r3, [r7, #24]
 8016c8a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8016c8c:	69bb      	ldr	r3, [r7, #24]
 8016c8e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8016c92:	b2db      	uxtb	r3, r3
 8016c94:	3b01      	subs	r3, #1
 8016c96:	b2da      	uxtb	r2, r3
 8016c98:	69bb      	ldr	r3, [r7, #24]
 8016c9a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8016c9c:	69bb      	ldr	r3, [r7, #24]
 8016c9e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8016ca2:	161b      	asrs	r3, r3, #24
 8016ca4:	b2da      	uxtb	r2, r3
 8016ca6:	69bb      	ldr	r3, [r7, #24]
 8016ca8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8016caa:	69bb      	ldr	r3, [r7, #24]
 8016cac:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8016cb0:	141b      	asrs	r3, r3, #16
 8016cb2:	b2da      	uxtb	r2, r3
 8016cb4:	69bb      	ldr	r3, [r7, #24]
 8016cb6:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8016cb8:	69bb      	ldr	r3, [r7, #24]
 8016cba:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8016cbe:	0a1b      	lsrs	r3, r3, #8
 8016cc0:	b29b      	uxth	r3, r3
 8016cc2:	b2da      	uxtb	r2, r3
 8016cc4:	69bb      	ldr	r3, [r7, #24]
 8016cc6:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8016cc8:	69bb      	ldr	r3, [r7, #24]
 8016cca:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8016cce:	b2da      	uxtb	r2, r3
 8016cd0:	69bb      	ldr	r3, [r7, #24]
 8016cd2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	330a      	adds	r3, #10
 8016cd8:	781b      	ldrb	r3, [r3, #0]
 8016cda:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	330b      	adds	r3, #11
 8016ce0:	781b      	ldrb	r3, [r3, #0]
 8016ce2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016ce4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	330c      	adds	r3, #12
 8016cea:	781b      	ldrb	r3, [r3, #0]
 8016cec:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8016cee:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8016cf0:	687a      	ldr	r2, [r7, #4]
 8016cf2:	320d      	adds	r2, #13
 8016cf4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8016cf6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016cf8:	69bb      	ldr	r3, [r7, #24]
 8016cfa:	60da      	str	r2, [r3, #12]

  return 0;
 8016cfc:	2300      	movs	r3, #0
}
 8016cfe:	4618      	mov	r0, r3
 8016d00:	3720      	adds	r7, #32
 8016d02:	46bd      	mov	sp, r7
 8016d04:	bd80      	pop	{r7, pc}

08016d06 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016d06:	b580      	push	{r7, lr}
 8016d08:	b088      	sub	sp, #32
 8016d0a:	af00      	add	r7, sp, #0
 8016d0c:	60f8      	str	r0, [r7, #12]
 8016d0e:	460b      	mov	r3, r1
 8016d10:	607a      	str	r2, [r7, #4]
 8016d12:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016d1a:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016d22:	685b      	ldr	r3, [r3, #4]
 8016d24:	f107 0214 	add.w	r2, r7, #20
 8016d28:	f107 0110 	add.w	r1, r7, #16
 8016d2c:	7af8      	ldrb	r0, [r7, #11]
 8016d2e:	4798      	blx	r3
 8016d30:	4603      	mov	r3, r0
 8016d32:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d104      	bne.n	8016d46 <SCSI_ReadFormatCapacity+0x40>
 8016d3c:	69bb      	ldr	r3, [r7, #24]
 8016d3e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8016d42:	2b02      	cmp	r3, #2
 8016d44:	d108      	bne.n	8016d58 <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016d46:	7af9      	ldrb	r1, [r7, #11]
 8016d48:	233a      	movs	r3, #58	; 0x3a
 8016d4a:	2202      	movs	r2, #2
 8016d4c:	68f8      	ldr	r0, [r7, #12]
 8016d4e:	f000 f90c 	bl	8016f6a <SCSI_SenseCode>
    return -1;
 8016d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d56:	e03e      	b.n	8016dd6 <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 8016d58:	2300      	movs	r3, #0
 8016d5a:	83fb      	strh	r3, [r7, #30]
 8016d5c:	e007      	b.n	8016d6e <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 8016d5e:	8bfb      	ldrh	r3, [r7, #30]
 8016d60:	69ba      	ldr	r2, [r7, #24]
 8016d62:	4413      	add	r3, r2
 8016d64:	2200      	movs	r2, #0
 8016d66:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8016d68:	8bfb      	ldrh	r3, [r7, #30]
 8016d6a:	3301      	adds	r3, #1
 8016d6c:	83fb      	strh	r3, [r7, #30]
 8016d6e:	8bfb      	ldrh	r3, [r7, #30]
 8016d70:	2b0b      	cmp	r3, #11
 8016d72:	d9f4      	bls.n	8016d5e <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 8016d74:	69bb      	ldr	r3, [r7, #24]
 8016d76:	2208      	movs	r2, #8
 8016d78:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8016d7a:	693b      	ldr	r3, [r7, #16]
 8016d7c:	3b01      	subs	r3, #1
 8016d7e:	0e1b      	lsrs	r3, r3, #24
 8016d80:	b2da      	uxtb	r2, r3
 8016d82:	69bb      	ldr	r3, [r7, #24]
 8016d84:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8016d86:	693b      	ldr	r3, [r7, #16]
 8016d88:	3b01      	subs	r3, #1
 8016d8a:	0c1b      	lsrs	r3, r3, #16
 8016d8c:	b2da      	uxtb	r2, r3
 8016d8e:	69bb      	ldr	r3, [r7, #24]
 8016d90:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8016d92:	693b      	ldr	r3, [r7, #16]
 8016d94:	3b01      	subs	r3, #1
 8016d96:	0a1b      	lsrs	r3, r3, #8
 8016d98:	b2da      	uxtb	r2, r3
 8016d9a:	69bb      	ldr	r3, [r7, #24]
 8016d9c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8016d9e:	693b      	ldr	r3, [r7, #16]
 8016da0:	b2db      	uxtb	r3, r3
 8016da2:	3b01      	subs	r3, #1
 8016da4:	b2da      	uxtb	r2, r3
 8016da6:	69bb      	ldr	r3, [r7, #24]
 8016da8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8016daa:	69bb      	ldr	r3, [r7, #24]
 8016dac:	2202      	movs	r2, #2
 8016dae:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8016db0:	8abb      	ldrh	r3, [r7, #20]
 8016db2:	141b      	asrs	r3, r3, #16
 8016db4:	b2da      	uxtb	r2, r3
 8016db6:	69bb      	ldr	r3, [r7, #24]
 8016db8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8016dba:	8abb      	ldrh	r3, [r7, #20]
 8016dbc:	0a1b      	lsrs	r3, r3, #8
 8016dbe:	b29b      	uxth	r3, r3
 8016dc0:	b2da      	uxtb	r2, r3
 8016dc2:	69bb      	ldr	r3, [r7, #24]
 8016dc4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8016dc6:	8abb      	ldrh	r3, [r7, #20]
 8016dc8:	b2da      	uxtb	r2, r3
 8016dca:	69bb      	ldr	r3, [r7, #24]
 8016dcc:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8016dce:	69bb      	ldr	r3, [r7, #24]
 8016dd0:	220c      	movs	r2, #12
 8016dd2:	60da      	str	r2, [r3, #12]

  return 0;
 8016dd4:	2300      	movs	r3, #0
}
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	3720      	adds	r7, #32
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	bd80      	pop	{r7, pc}
	...

08016de0 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016de0:	b580      	push	{r7, lr}
 8016de2:	b086      	sub	sp, #24
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	60f8      	str	r0, [r7, #12]
 8016de8:	460b      	mov	r3, r1
 8016dea:	607a      	str	r2, [r7, #4]
 8016dec:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016df4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8016df6:	2317      	movs	r3, #23
 8016df8:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	3304      	adds	r3, #4
 8016dfe:	781b      	ldrb	r3, [r3, #0]
 8016e00:	b29b      	uxth	r3, r3
 8016e02:	8afa      	ldrh	r2, [r7, #22]
 8016e04:	429a      	cmp	r2, r3
 8016e06:	d303      	bcc.n	8016e10 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	3304      	adds	r3, #4
 8016e0c:	781b      	ldrb	r3, [r3, #0]
 8016e0e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8016e10:	8afb      	ldrh	r3, [r7, #22]
 8016e12:	461a      	mov	r2, r3
 8016e14:	4904      	ldr	r1, [pc, #16]	; (8016e28 <SCSI_ModeSense6+0x48>)
 8016e16:	6938      	ldr	r0, [r7, #16]
 8016e18:	f000 fd70 	bl	80178fc <SCSI_UpdateBotData>

  return 0;
 8016e1c:	2300      	movs	r3, #0
}
 8016e1e:	4618      	mov	r0, r3
 8016e20:	3718      	adds	r7, #24
 8016e22:	46bd      	mov	sp, r7
 8016e24:	bd80      	pop	{r7, pc}
 8016e26:	bf00      	nop
 8016e28:	200002f0 	.word	0x200002f0

08016e2c <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016e2c:	b580      	push	{r7, lr}
 8016e2e:	b086      	sub	sp, #24
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	60f8      	str	r0, [r7, #12]
 8016e34:	460b      	mov	r3, r1
 8016e36:	607a      	str	r2, [r7, #4]
 8016e38:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016e40:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8016e42:	231b      	movs	r3, #27
 8016e44:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	3308      	adds	r3, #8
 8016e4a:	781b      	ldrb	r3, [r3, #0]
 8016e4c:	b29b      	uxth	r3, r3
 8016e4e:	8afa      	ldrh	r2, [r7, #22]
 8016e50:	429a      	cmp	r2, r3
 8016e52:	d303      	bcc.n	8016e5c <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	3308      	adds	r3, #8
 8016e58:	781b      	ldrb	r3, [r3, #0]
 8016e5a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8016e5c:	8afb      	ldrh	r3, [r7, #22]
 8016e5e:	461a      	mov	r2, r3
 8016e60:	4904      	ldr	r1, [pc, #16]	; (8016e74 <SCSI_ModeSense10+0x48>)
 8016e62:	6938      	ldr	r0, [r7, #16]
 8016e64:	f000 fd4a 	bl	80178fc <SCSI_UpdateBotData>

  return 0;
 8016e68:	2300      	movs	r3, #0
}
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	3718      	adds	r7, #24
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	bd80      	pop	{r7, pc}
 8016e72:	bf00      	nop
 8016e74:	20000308 	.word	0x20000308

08016e78 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b086      	sub	sp, #24
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	60f8      	str	r0, [r7, #12]
 8016e80:	460b      	mov	r3, r1
 8016e82:	607a      	str	r2, [r7, #4]
 8016e84:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016e8c:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 8016e8e:	693b      	ldr	r3, [r7, #16]
 8016e90:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d10a      	bne.n	8016eae <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016e98:	693b      	ldr	r3, [r7, #16]
 8016e9a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8016e9e:	2320      	movs	r3, #32
 8016ea0:	2205      	movs	r2, #5
 8016ea2:	68f8      	ldr	r0, [r7, #12]
 8016ea4:	f000 f861 	bl	8016f6a <SCSI_SenseCode>
    return -1;
 8016ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016eac:	e059      	b.n	8016f62 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8016eae:	2300      	movs	r3, #0
 8016eb0:	75fb      	strb	r3, [r7, #23]
 8016eb2:	e007      	b.n	8016ec4 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 8016eb4:	7dfb      	ldrb	r3, [r7, #23]
 8016eb6:	693a      	ldr	r2, [r7, #16]
 8016eb8:	4413      	add	r3, r2
 8016eba:	2200      	movs	r2, #0
 8016ebc:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8016ebe:	7dfb      	ldrb	r3, [r7, #23]
 8016ec0:	3301      	adds	r3, #1
 8016ec2:	75fb      	strb	r3, [r7, #23]
 8016ec4:	7dfb      	ldrb	r3, [r7, #23]
 8016ec6:	2b11      	cmp	r3, #17
 8016ec8:	d9f4      	bls.n	8016eb4 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 8016eca:	693b      	ldr	r3, [r7, #16]
 8016ecc:	2270      	movs	r2, #112	; 0x70
 8016ece:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8016ed0:	693b      	ldr	r3, [r7, #16]
 8016ed2:	220c      	movs	r2, #12
 8016ed4:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8016ed6:	693b      	ldr	r3, [r7, #16]
 8016ed8:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8016edc:	693b      	ldr	r3, [r7, #16]
 8016ede:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8016ee2:	429a      	cmp	r2, r3
 8016ee4:	d02e      	beq.n	8016f44 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8016ee6:	693b      	ldr	r3, [r7, #16]
 8016ee8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8016eec:	461a      	mov	r2, r3
 8016eee:	693b      	ldr	r3, [r7, #16]
 8016ef0:	3248      	adds	r2, #72	; 0x48
 8016ef2:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8016ef6:	693b      	ldr	r3, [r7, #16]
 8016ef8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8016efa:	693b      	ldr	r3, [r7, #16]
 8016efc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8016f00:	693a      	ldr	r2, [r7, #16]
 8016f02:	3348      	adds	r3, #72	; 0x48
 8016f04:	00db      	lsls	r3, r3, #3
 8016f06:	4413      	add	r3, r2
 8016f08:	791a      	ldrb	r2, [r3, #4]
 8016f0a:	693b      	ldr	r3, [r7, #16]
 8016f0c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8016f0e:	693b      	ldr	r3, [r7, #16]
 8016f10:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8016f14:	693a      	ldr	r2, [r7, #16]
 8016f16:	3348      	adds	r3, #72	; 0x48
 8016f18:	00db      	lsls	r3, r3, #3
 8016f1a:	4413      	add	r3, r2
 8016f1c:	795a      	ldrb	r2, [r3, #5]
 8016f1e:	693b      	ldr	r3, [r7, #16]
 8016f20:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8016f22:	693b      	ldr	r3, [r7, #16]
 8016f24:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8016f28:	3301      	adds	r3, #1
 8016f2a:	b2da      	uxtb	r2, r3
 8016f2c:	693b      	ldr	r3, [r7, #16]
 8016f2e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8016f32:	693b      	ldr	r3, [r7, #16]
 8016f34:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8016f38:	2b04      	cmp	r3, #4
 8016f3a:	d103      	bne.n	8016f44 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 8016f3c:	693b      	ldr	r3, [r7, #16]
 8016f3e:	2200      	movs	r2, #0
 8016f40:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8016f44:	693b      	ldr	r3, [r7, #16]
 8016f46:	2212      	movs	r2, #18
 8016f48:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	3304      	adds	r3, #4
 8016f4e:	781b      	ldrb	r3, [r3, #0]
 8016f50:	2b12      	cmp	r3, #18
 8016f52:	d805      	bhi.n	8016f60 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	3304      	adds	r3, #4
 8016f58:	781b      	ldrb	r3, [r3, #0]
 8016f5a:	461a      	mov	r2, r3
 8016f5c:	693b      	ldr	r3, [r7, #16]
 8016f5e:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8016f60:	2300      	movs	r3, #0
}
 8016f62:	4618      	mov	r0, r3
 8016f64:	3718      	adds	r7, #24
 8016f66:	46bd      	mov	sp, r7
 8016f68:	bd80      	pop	{r7, pc}

08016f6a <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8016f6a:	b480      	push	{r7}
 8016f6c:	b085      	sub	sp, #20
 8016f6e:	af00      	add	r7, sp, #0
 8016f70:	6078      	str	r0, [r7, #4]
 8016f72:	4608      	mov	r0, r1
 8016f74:	4611      	mov	r1, r2
 8016f76:	461a      	mov	r2, r3
 8016f78:	4603      	mov	r3, r0
 8016f7a:	70fb      	strb	r3, [r7, #3]
 8016f7c:	460b      	mov	r3, r1
 8016f7e:	70bb      	strb	r3, [r7, #2]
 8016f80:	4613      	mov	r3, r2
 8016f82:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016f8a:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8016f8c:	68fb      	ldr	r3, [r7, #12]
 8016f8e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8016f92:	461a      	mov	r2, r3
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	3248      	adds	r2, #72	; 0x48
 8016f98:	78b9      	ldrb	r1, [r7, #2]
 8016f9a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8016fa4:	68fa      	ldr	r2, [r7, #12]
 8016fa6:	3348      	adds	r3, #72	; 0x48
 8016fa8:	00db      	lsls	r3, r3, #3
 8016faa:	4413      	add	r3, r2
 8016fac:	787a      	ldrb	r2, [r7, #1]
 8016fae:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8016fb6:	68fa      	ldr	r2, [r7, #12]
 8016fb8:	3348      	adds	r3, #72	; 0x48
 8016fba:	00db      	lsls	r3, r3, #3
 8016fbc:	4413      	add	r3, r2
 8016fbe:	2200      	movs	r2, #0
 8016fc0:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8016fc8:	3301      	adds	r3, #1
 8016fca:	b2da      	uxtb	r2, r3
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8016fd8:	2b04      	cmp	r3, #4
 8016fda:	d103      	bne.n	8016fe4 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	2200      	movs	r2, #0
 8016fe0:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 8016fe4:	bf00      	nop
 8016fe6:	3714      	adds	r7, #20
 8016fe8:	46bd      	mov	sp, r7
 8016fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fee:	4770      	bx	lr

08016ff0 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b086      	sub	sp, #24
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	60f8      	str	r0, [r7, #12]
 8016ff8:	460b      	mov	r3, r1
 8016ffa:	607a      	str	r2, [r7, #4]
 8016ffc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017004:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8017006:	697b      	ldr	r3, [r7, #20]
 8017008:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801700c:	2b01      	cmp	r3, #1
 801700e:	d10f      	bne.n	8017030 <SCSI_StartStopUnit+0x40>
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	3304      	adds	r3, #4
 8017014:	781b      	ldrb	r3, [r3, #0]
 8017016:	f003 0303 	and.w	r3, r3, #3
 801701a:	2b02      	cmp	r3, #2
 801701c:	d108      	bne.n	8017030 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801701e:	7af9      	ldrb	r1, [r7, #11]
 8017020:	2324      	movs	r3, #36	; 0x24
 8017022:	2205      	movs	r2, #5
 8017024:	68f8      	ldr	r0, [r7, #12]
 8017026:	f7ff ffa0 	bl	8016f6a <SCSI_SenseCode>

    return -1;
 801702a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801702e:	e026      	b.n	801707e <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	3304      	adds	r3, #4
 8017034:	781b      	ldrb	r3, [r3, #0]
 8017036:	f003 0303 	and.w	r3, r3, #3
 801703a:	2b01      	cmp	r3, #1
 801703c:	d104      	bne.n	8017048 <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801703e:	697b      	ldr	r3, [r7, #20]
 8017040:	2200      	movs	r2, #0
 8017042:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8017046:	e016      	b.n	8017076 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	3304      	adds	r3, #4
 801704c:	781b      	ldrb	r3, [r3, #0]
 801704e:	f003 0303 	and.w	r3, r3, #3
 8017052:	2b02      	cmp	r3, #2
 8017054:	d104      	bne.n	8017060 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8017056:	697b      	ldr	r3, [r7, #20]
 8017058:	2202      	movs	r2, #2
 801705a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801705e:	e00a      	b.n	8017076 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	3304      	adds	r3, #4
 8017064:	781b      	ldrb	r3, [r3, #0]
 8017066:	f003 0303 	and.w	r3, r3, #3
 801706a:	2b03      	cmp	r3, #3
 801706c:	d103      	bne.n	8017076 <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801706e:	697b      	ldr	r3, [r7, #20]
 8017070:	2200      	movs	r2, #0
 8017072:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8017076:	697b      	ldr	r3, [r7, #20]
 8017078:	2200      	movs	r2, #0
 801707a:	60da      	str	r2, [r3, #12]

  return 0;
 801707c:	2300      	movs	r3, #0
}
 801707e:	4618      	mov	r0, r3
 8017080:	3718      	adds	r7, #24
 8017082:	46bd      	mov	sp, r7
 8017084:	bd80      	pop	{r7, pc}

08017086 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8017086:	b480      	push	{r7}
 8017088:	b087      	sub	sp, #28
 801708a:	af00      	add	r7, sp, #0
 801708c:	60f8      	str	r0, [r7, #12]
 801708e:	460b      	mov	r3, r1
 8017090:	607a      	str	r2, [r7, #4]
 8017092:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801709a:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	3304      	adds	r3, #4
 80170a0:	781b      	ldrb	r3, [r3, #0]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d104      	bne.n	80170b0 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80170a6:	697b      	ldr	r3, [r7, #20]
 80170a8:	2200      	movs	r2, #0
 80170aa:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80170ae:	e003      	b.n	80170b8 <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80170b0:	697b      	ldr	r3, [r7, #20]
 80170b2:	2201      	movs	r2, #1
 80170b4:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 80170b8:	697b      	ldr	r3, [r7, #20]
 80170ba:	2200      	movs	r2, #0
 80170bc:	60da      	str	r2, [r3, #12]

  return 0;
 80170be:	2300      	movs	r3, #0
}
 80170c0:	4618      	mov	r0, r3
 80170c2:	371c      	adds	r7, #28
 80170c4:	46bd      	mov	sp, r7
 80170c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ca:	4770      	bx	lr

080170cc <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80170cc:	b580      	push	{r7, lr}
 80170ce:	b086      	sub	sp, #24
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	60f8      	str	r0, [r7, #12]
 80170d4:	460b      	mov	r3, r1
 80170d6:	607a      	str	r2, [r7, #4]
 80170d8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80170e0:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80170e2:	697b      	ldr	r3, [r7, #20]
 80170e4:	7a1b      	ldrb	r3, [r3, #8]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d17c      	bne.n	80171e4 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80170ea:	697b      	ldr	r3, [r7, #20]
 80170ec:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80170f0:	b25b      	sxtb	r3, r3
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	db0a      	blt.n	801710c <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80170f6:	697b      	ldr	r3, [r7, #20]
 80170f8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80170fc:	2320      	movs	r3, #32
 80170fe:	2205      	movs	r2, #5
 8017100:	68f8      	ldr	r0, [r7, #12]
 8017102:	f7ff ff32 	bl	8016f6a <SCSI_SenseCode>
      return -1;
 8017106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801710a:	e075      	b.n	80171f8 <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801710c:	697b      	ldr	r3, [r7, #20]
 801710e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8017112:	2b02      	cmp	r3, #2
 8017114:	d108      	bne.n	8017128 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8017116:	7af9      	ldrb	r1, [r7, #11]
 8017118:	233a      	movs	r3, #58	; 0x3a
 801711a:	2202      	movs	r2, #2
 801711c:	68f8      	ldr	r0, [r7, #12]
 801711e:	f7ff ff24 	bl	8016f6a <SCSI_SenseCode>

      return -1;
 8017122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017126:	e067      	b.n	80171f8 <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801712e:	689b      	ldr	r3, [r3, #8]
 8017130:	7afa      	ldrb	r2, [r7, #11]
 8017132:	4610      	mov	r0, r2
 8017134:	4798      	blx	r3
 8017136:	4603      	mov	r3, r0
 8017138:	2b00      	cmp	r3, #0
 801713a:	d008      	beq.n	801714e <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801713c:	7af9      	ldrb	r1, [r7, #11]
 801713e:	233a      	movs	r3, #58	; 0x3a
 8017140:	2202      	movs	r2, #2
 8017142:	68f8      	ldr	r0, [r7, #12]
 8017144:	f7ff ff11 	bl	8016f6a <SCSI_SenseCode>
      return -1;
 8017148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801714c:	e054      	b.n	80171f8 <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	3302      	adds	r3, #2
 8017152:	781b      	ldrb	r3, [r3, #0]
 8017154:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	3303      	adds	r3, #3
 801715a:	781b      	ldrb	r3, [r3, #0]
 801715c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801715e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	3304      	adds	r3, #4
 8017164:	781b      	ldrb	r3, [r3, #0]
 8017166:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8017168:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801716a:	687a      	ldr	r2, [r7, #4]
 801716c:	3205      	adds	r2, #5
 801716e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8017170:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017172:	697b      	ldr	r3, [r7, #20]
 8017174:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	3307      	adds	r3, #7
 801717c:	781b      	ldrb	r3, [r3, #0]
 801717e:	021b      	lsls	r3, r3, #8
 8017180:	687a      	ldr	r2, [r7, #4]
 8017182:	3208      	adds	r2, #8
 8017184:	7812      	ldrb	r2, [r2, #0]
 8017186:	431a      	orrs	r2, r3
 8017188:	697b      	ldr	r3, [r7, #20]
 801718a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801718e:	697b      	ldr	r3, [r7, #20]
 8017190:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8017194:	697b      	ldr	r3, [r7, #20]
 8017196:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801719a:	7af9      	ldrb	r1, [r7, #11]
 801719c:	68f8      	ldr	r0, [r7, #12]
 801719e:	f000 fa95 	bl	80176cc <SCSI_CheckAddressRange>
 80171a2:	4603      	mov	r3, r0
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	da02      	bge.n	80171ae <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80171a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80171ac:	e024      	b.n	80171f8 <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80171ae:	697b      	ldr	r3, [r7, #20]
 80171b0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80171b4:	697b      	ldr	r3, [r7, #20]
 80171b6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80171ba:	6979      	ldr	r1, [r7, #20]
 80171bc:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80171c0:	fb01 f303 	mul.w	r3, r1, r3
 80171c4:	429a      	cmp	r2, r3
 80171c6:	d00a      	beq.n	80171de <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80171c8:	697b      	ldr	r3, [r7, #20]
 80171ca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80171ce:	2320      	movs	r3, #32
 80171d0:	2205      	movs	r2, #5
 80171d2:	68f8      	ldr	r0, [r7, #12]
 80171d4:	f7ff fec9 	bl	8016f6a <SCSI_SenseCode>
      return -1;
 80171d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80171dc:	e00c      	b.n	80171f8 <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80171de:	697b      	ldr	r3, [r7, #20]
 80171e0:	2202      	movs	r2, #2
 80171e2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80171e4:	697b      	ldr	r3, [r7, #20]
 80171e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80171ea:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80171ec:	7afb      	ldrb	r3, [r7, #11]
 80171ee:	4619      	mov	r1, r3
 80171f0:	68f8      	ldr	r0, [r7, #12]
 80171f2:	f000 fa8d 	bl	8017710 <SCSI_ProcessRead>
 80171f6:	4603      	mov	r3, r0
}
 80171f8:	4618      	mov	r0, r3
 80171fa:	3718      	adds	r7, #24
 80171fc:	46bd      	mov	sp, r7
 80171fe:	bd80      	pop	{r7, pc}

08017200 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b086      	sub	sp, #24
 8017204:	af00      	add	r7, sp, #0
 8017206:	60f8      	str	r0, [r7, #12]
 8017208:	460b      	mov	r3, r1
 801720a:	607a      	str	r2, [r7, #4]
 801720c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017214:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8017216:	697b      	ldr	r3, [r7, #20]
 8017218:	7a1b      	ldrb	r3, [r3, #8]
 801721a:	2b00      	cmp	r3, #0
 801721c:	f040 8087 	bne.w	801732e <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8017220:	697b      	ldr	r3, [r7, #20]
 8017222:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8017226:	b25b      	sxtb	r3, r3
 8017228:	2b00      	cmp	r3, #0
 801722a:	db0a      	blt.n	8017242 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801722c:	697b      	ldr	r3, [r7, #20]
 801722e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8017232:	2320      	movs	r3, #32
 8017234:	2205      	movs	r2, #5
 8017236:	68f8      	ldr	r0, [r7, #12]
 8017238:	f7ff fe97 	bl	8016f6a <SCSI_SenseCode>
      return -1;
 801723c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017240:	e07f      	b.n	8017342 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8017242:	697b      	ldr	r3, [r7, #20]
 8017244:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8017248:	2b02      	cmp	r3, #2
 801724a:	d108      	bne.n	801725e <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801724c:	7af9      	ldrb	r1, [r7, #11]
 801724e:	233a      	movs	r3, #58	; 0x3a
 8017250:	2202      	movs	r2, #2
 8017252:	68f8      	ldr	r0, [r7, #12]
 8017254:	f7ff fe89 	bl	8016f6a <SCSI_SenseCode>
      return -1;
 8017258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801725c:	e071      	b.n	8017342 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017264:	689b      	ldr	r3, [r3, #8]
 8017266:	7afa      	ldrb	r2, [r7, #11]
 8017268:	4610      	mov	r0, r2
 801726a:	4798      	blx	r3
 801726c:	4603      	mov	r3, r0
 801726e:	2b00      	cmp	r3, #0
 8017270:	d008      	beq.n	8017284 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8017272:	7af9      	ldrb	r1, [r7, #11]
 8017274:	233a      	movs	r3, #58	; 0x3a
 8017276:	2202      	movs	r2, #2
 8017278:	68f8      	ldr	r0, [r7, #12]
 801727a:	f7ff fe76 	bl	8016f6a <SCSI_SenseCode>
      return -1;
 801727e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017282:	e05e      	b.n	8017342 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	3302      	adds	r3, #2
 8017288:	781b      	ldrb	r3, [r3, #0]
 801728a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	3303      	adds	r3, #3
 8017290:	781b      	ldrb	r3, [r3, #0]
 8017292:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017294:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	3304      	adds	r3, #4
 801729a:	781b      	ldrb	r3, [r3, #0]
 801729c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801729e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80172a0:	687a      	ldr	r2, [r7, #4]
 80172a2:	3205      	adds	r2, #5
 80172a4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80172a6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80172a8:	697b      	ldr	r3, [r7, #20]
 80172aa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	3306      	adds	r3, #6
 80172b2:	781b      	ldrb	r3, [r3, #0]
 80172b4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	3307      	adds	r3, #7
 80172ba:	781b      	ldrb	r3, [r3, #0]
 80172bc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80172be:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	3308      	adds	r3, #8
 80172c4:	781b      	ldrb	r3, [r3, #0]
 80172c6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80172c8:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80172ca:	687a      	ldr	r2, [r7, #4]
 80172cc:	3209      	adds	r2, #9
 80172ce:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80172d0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80172d2:	697b      	ldr	r3, [r7, #20]
 80172d4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80172d8:	697b      	ldr	r3, [r7, #20]
 80172da:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80172de:	697b      	ldr	r3, [r7, #20]
 80172e0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80172e4:	7af9      	ldrb	r1, [r7, #11]
 80172e6:	68f8      	ldr	r0, [r7, #12]
 80172e8:	f000 f9f0 	bl	80176cc <SCSI_CheckAddressRange>
 80172ec:	4603      	mov	r3, r0
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	da02      	bge.n	80172f8 <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80172f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80172f6:	e024      	b.n	8017342 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80172f8:	697b      	ldr	r3, [r7, #20]
 80172fa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80172fe:	697b      	ldr	r3, [r7, #20]
 8017300:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8017304:	6979      	ldr	r1, [r7, #20]
 8017306:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 801730a:	fb01 f303 	mul.w	r3, r1, r3
 801730e:	429a      	cmp	r2, r3
 8017310:	d00a      	beq.n	8017328 <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017312:	697b      	ldr	r3, [r7, #20]
 8017314:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8017318:	2320      	movs	r3, #32
 801731a:	2205      	movs	r2, #5
 801731c:	68f8      	ldr	r0, [r7, #12]
 801731e:	f7ff fe24 	bl	8016f6a <SCSI_SenseCode>
      return -1;
 8017322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017326:	e00c      	b.n	8017342 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8017328:	697b      	ldr	r3, [r7, #20]
 801732a:	2202      	movs	r2, #2
 801732c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801732e:	697b      	ldr	r3, [r7, #20]
 8017330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017334:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8017336:	7afb      	ldrb	r3, [r7, #11]
 8017338:	4619      	mov	r1, r3
 801733a:	68f8      	ldr	r0, [r7, #12]
 801733c:	f000 f9e8 	bl	8017710 <SCSI_ProcessRead>
 8017340:	4603      	mov	r3, r0
}
 8017342:	4618      	mov	r0, r3
 8017344:	3718      	adds	r7, #24
 8017346:	46bd      	mov	sp, r7
 8017348:	bd80      	pop	{r7, pc}

0801734a <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801734a:	b580      	push	{r7, lr}
 801734c:	b086      	sub	sp, #24
 801734e:	af00      	add	r7, sp, #0
 8017350:	60f8      	str	r0, [r7, #12]
 8017352:	460b      	mov	r3, r1
 8017354:	607a      	str	r2, [r7, #4]
 8017356:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801735e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8017360:	697b      	ldr	r3, [r7, #20]
 8017362:	7a1b      	ldrb	r3, [r3, #8]
 8017364:	2b00      	cmp	r3, #0
 8017366:	f040 80a5 	bne.w	80174b4 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801736a:	697b      	ldr	r3, [r7, #20]
 801736c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8017370:	2b00      	cmp	r3, #0
 8017372:	d10a      	bne.n	801738a <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017374:	697b      	ldr	r3, [r7, #20]
 8017376:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801737a:	2320      	movs	r3, #32
 801737c:	2205      	movs	r2, #5
 801737e:	68f8      	ldr	r0, [r7, #12]
 8017380:	f7ff fdf3 	bl	8016f6a <SCSI_SenseCode>
      return -1;
 8017384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017388:	e09a      	b.n	80174c0 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801738a:	697b      	ldr	r3, [r7, #20]
 801738c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8017390:	b25b      	sxtb	r3, r3
 8017392:	2b00      	cmp	r3, #0
 8017394:	da0a      	bge.n	80173ac <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017396:	697b      	ldr	r3, [r7, #20]
 8017398:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801739c:	2320      	movs	r3, #32
 801739e:	2205      	movs	r2, #5
 80173a0:	68f8      	ldr	r0, [r7, #12]
 80173a2:	f7ff fde2 	bl	8016f6a <SCSI_SenseCode>
      return -1;
 80173a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80173aa:	e089      	b.n	80174c0 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80173b2:	689b      	ldr	r3, [r3, #8]
 80173b4:	7afa      	ldrb	r2, [r7, #11]
 80173b6:	4610      	mov	r0, r2
 80173b8:	4798      	blx	r3
 80173ba:	4603      	mov	r3, r0
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d008      	beq.n	80173d2 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80173c0:	7af9      	ldrb	r1, [r7, #11]
 80173c2:	233a      	movs	r3, #58	; 0x3a
 80173c4:	2202      	movs	r2, #2
 80173c6:	68f8      	ldr	r0, [r7, #12]
 80173c8:	f7ff fdcf 	bl	8016f6a <SCSI_SenseCode>
      return -1;
 80173cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80173d0:	e076      	b.n	80174c0 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80173d8:	68db      	ldr	r3, [r3, #12]
 80173da:	7afa      	ldrb	r2, [r7, #11]
 80173dc:	4610      	mov	r0, r2
 80173de:	4798      	blx	r3
 80173e0:	4603      	mov	r3, r0
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d008      	beq.n	80173f8 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80173e6:	7af9      	ldrb	r1, [r7, #11]
 80173e8:	2327      	movs	r3, #39	; 0x27
 80173ea:	2202      	movs	r2, #2
 80173ec:	68f8      	ldr	r0, [r7, #12]
 80173ee:	f7ff fdbc 	bl	8016f6a <SCSI_SenseCode>
      return -1;
 80173f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80173f6:	e063      	b.n	80174c0 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	3302      	adds	r3, #2
 80173fc:	781b      	ldrb	r3, [r3, #0]
 80173fe:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	3303      	adds	r3, #3
 8017404:	781b      	ldrb	r3, [r3, #0]
 8017406:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017408:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	3304      	adds	r3, #4
 801740e:	781b      	ldrb	r3, [r3, #0]
 8017410:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8017412:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8017414:	687a      	ldr	r2, [r7, #4]
 8017416:	3205      	adds	r2, #5
 8017418:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801741a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801741c:	697b      	ldr	r3, [r7, #20]
 801741e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	3307      	adds	r3, #7
 8017426:	781b      	ldrb	r3, [r3, #0]
 8017428:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 801742a:	687a      	ldr	r2, [r7, #4]
 801742c:	3208      	adds	r2, #8
 801742e:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8017430:	431a      	orrs	r2, r3
 8017432:	697b      	ldr	r3, [r7, #20]
 8017434:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8017438:	697b      	ldr	r3, [r7, #20]
 801743a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801743e:	697b      	ldr	r3, [r7, #20]
 8017440:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8017444:	7af9      	ldrb	r1, [r7, #11]
 8017446:	68f8      	ldr	r0, [r7, #12]
 8017448:	f000 f940 	bl	80176cc <SCSI_CheckAddressRange>
 801744c:	4603      	mov	r3, r0
 801744e:	2b00      	cmp	r3, #0
 8017450:	da02      	bge.n	8017458 <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8017452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017456:	e033      	b.n	80174c0 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8017458:	697b      	ldr	r3, [r7, #20]
 801745a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801745e:	697a      	ldr	r2, [r7, #20]
 8017460:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8017464:	fb02 f303 	mul.w	r3, r2, r3
 8017468:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 801746a:	697b      	ldr	r3, [r7, #20]
 801746c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8017470:	693a      	ldr	r2, [r7, #16]
 8017472:	429a      	cmp	r2, r3
 8017474:	d00a      	beq.n	801748c <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017476:	697b      	ldr	r3, [r7, #20]
 8017478:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801747c:	2320      	movs	r3, #32
 801747e:	2205      	movs	r2, #5
 8017480:	68f8      	ldr	r0, [r7, #12]
 8017482:	f7ff fd72 	bl	8016f6a <SCSI_SenseCode>
      return -1;
 8017486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801748a:	e019      	b.n	80174c0 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801748c:	693b      	ldr	r3, [r7, #16]
 801748e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017492:	bf28      	it	cs
 8017494:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8017498:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801749a:	697b      	ldr	r3, [r7, #20]
 801749c:	2201      	movs	r2, #1
 801749e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80174a0:	697b      	ldr	r3, [r7, #20]
 80174a2:	f103 0210 	add.w	r2, r3, #16
 80174a6:	693b      	ldr	r3, [r7, #16]
 80174a8:	2101      	movs	r1, #1
 80174aa:	68f8      	ldr	r0, [r7, #12]
 80174ac:	f005 f883 	bl	801c5b6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80174b0:	2300      	movs	r3, #0
 80174b2:	e005      	b.n	80174c0 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 80174b4:	7afb      	ldrb	r3, [r7, #11]
 80174b6:	4619      	mov	r1, r3
 80174b8:	68f8      	ldr	r0, [r7, #12]
 80174ba:	f000 f99c 	bl	80177f6 <SCSI_ProcessWrite>
 80174be:	4603      	mov	r3, r0
}
 80174c0:	4618      	mov	r0, r3
 80174c2:	3718      	adds	r7, #24
 80174c4:	46bd      	mov	sp, r7
 80174c6:	bd80      	pop	{r7, pc}

080174c8 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80174c8:	b580      	push	{r7, lr}
 80174ca:	b086      	sub	sp, #24
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	60f8      	str	r0, [r7, #12]
 80174d0:	460b      	mov	r3, r1
 80174d2:	607a      	str	r2, [r7, #4]
 80174d4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80174dc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80174de:	697b      	ldr	r3, [r7, #20]
 80174e0:	7a1b      	ldrb	r3, [r3, #8]
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	f040 80b5 	bne.w	8017652 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80174e8:	697b      	ldr	r3, [r7, #20]
 80174ea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d10a      	bne.n	8017508 <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80174f2:	697b      	ldr	r3, [r7, #20]
 80174f4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80174f8:	2320      	movs	r3, #32
 80174fa:	2205      	movs	r2, #5
 80174fc:	68f8      	ldr	r0, [r7, #12]
 80174fe:	f7ff fd34 	bl	8016f6a <SCSI_SenseCode>
      return -1;
 8017502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017506:	e0aa      	b.n	801765e <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8017508:	697b      	ldr	r3, [r7, #20]
 801750a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801750e:	b25b      	sxtb	r3, r3
 8017510:	2b00      	cmp	r3, #0
 8017512:	da0a      	bge.n	801752a <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017514:	697b      	ldr	r3, [r7, #20]
 8017516:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801751a:	2320      	movs	r3, #32
 801751c:	2205      	movs	r2, #5
 801751e:	68f8      	ldr	r0, [r7, #12]
 8017520:	f7ff fd23 	bl	8016f6a <SCSI_SenseCode>
      return -1;
 8017524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017528:	e099      	b.n	801765e <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017530:	689b      	ldr	r3, [r3, #8]
 8017532:	7afa      	ldrb	r2, [r7, #11]
 8017534:	4610      	mov	r0, r2
 8017536:	4798      	blx	r3
 8017538:	4603      	mov	r3, r0
 801753a:	2b00      	cmp	r3, #0
 801753c:	d00b      	beq.n	8017556 <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801753e:	7af9      	ldrb	r1, [r7, #11]
 8017540:	233a      	movs	r3, #58	; 0x3a
 8017542:	2202      	movs	r2, #2
 8017544:	68f8      	ldr	r0, [r7, #12]
 8017546:	f7ff fd10 	bl	8016f6a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801754a:	697b      	ldr	r3, [r7, #20]
 801754c:	2205      	movs	r2, #5
 801754e:	721a      	strb	r2, [r3, #8]
      return -1;
 8017550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017554:	e083      	b.n	801765e <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801755c:	68db      	ldr	r3, [r3, #12]
 801755e:	7afa      	ldrb	r2, [r7, #11]
 8017560:	4610      	mov	r0, r2
 8017562:	4798      	blx	r3
 8017564:	4603      	mov	r3, r0
 8017566:	2b00      	cmp	r3, #0
 8017568:	d00b      	beq.n	8017582 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801756a:	7af9      	ldrb	r1, [r7, #11]
 801756c:	2327      	movs	r3, #39	; 0x27
 801756e:	2202      	movs	r2, #2
 8017570:	68f8      	ldr	r0, [r7, #12]
 8017572:	f7ff fcfa 	bl	8016f6a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8017576:	697b      	ldr	r3, [r7, #20]
 8017578:	2205      	movs	r2, #5
 801757a:	721a      	strb	r2, [r3, #8]
      return -1;
 801757c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017580:	e06d      	b.n	801765e <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	3302      	adds	r3, #2
 8017586:	781b      	ldrb	r3, [r3, #0]
 8017588:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	3303      	adds	r3, #3
 801758e:	781b      	ldrb	r3, [r3, #0]
 8017590:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017592:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	3304      	adds	r3, #4
 8017598:	781b      	ldrb	r3, [r3, #0]
 801759a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801759c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801759e:	687a      	ldr	r2, [r7, #4]
 80175a0:	3205      	adds	r2, #5
 80175a2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80175a4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80175a6:	697b      	ldr	r3, [r7, #20]
 80175a8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	3306      	adds	r3, #6
 80175b0:	781b      	ldrb	r3, [r3, #0]
 80175b2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	3307      	adds	r3, #7
 80175b8:	781b      	ldrb	r3, [r3, #0]
 80175ba:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80175bc:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	3308      	adds	r3, #8
 80175c2:	781b      	ldrb	r3, [r3, #0]
 80175c4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80175c6:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80175c8:	687a      	ldr	r2, [r7, #4]
 80175ca:	3209      	adds	r2, #9
 80175cc:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80175ce:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80175d0:	697b      	ldr	r3, [r7, #20]
 80175d2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80175d6:	697b      	ldr	r3, [r7, #20]
 80175d8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80175dc:	697b      	ldr	r3, [r7, #20]
 80175de:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80175e2:	7af9      	ldrb	r1, [r7, #11]
 80175e4:	68f8      	ldr	r0, [r7, #12]
 80175e6:	f000 f871 	bl	80176cc <SCSI_CheckAddressRange>
 80175ea:	4603      	mov	r3, r0
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	da02      	bge.n	80175f6 <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80175f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80175f4:	e033      	b.n	801765e <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80175f6:	697b      	ldr	r3, [r7, #20]
 80175f8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80175fc:	697a      	ldr	r2, [r7, #20]
 80175fe:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8017602:	fb02 f303 	mul.w	r3, r2, r3
 8017606:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8017608:	697b      	ldr	r3, [r7, #20]
 801760a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801760e:	693a      	ldr	r2, [r7, #16]
 8017610:	429a      	cmp	r2, r3
 8017612:	d00a      	beq.n	801762a <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017614:	697b      	ldr	r3, [r7, #20]
 8017616:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801761a:	2320      	movs	r3, #32
 801761c:	2205      	movs	r2, #5
 801761e:	68f8      	ldr	r0, [r7, #12]
 8017620:	f7ff fca3 	bl	8016f6a <SCSI_SenseCode>
      return -1;
 8017624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017628:	e019      	b.n	801765e <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801762a:	693b      	ldr	r3, [r7, #16]
 801762c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017630:	bf28      	it	cs
 8017632:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8017636:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8017638:	697b      	ldr	r3, [r7, #20]
 801763a:	2201      	movs	r2, #1
 801763c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 801763e:	697b      	ldr	r3, [r7, #20]
 8017640:	f103 0210 	add.w	r2, r3, #16
 8017644:	693b      	ldr	r3, [r7, #16]
 8017646:	2101      	movs	r1, #1
 8017648:	68f8      	ldr	r0, [r7, #12]
 801764a:	f004 ffb4 	bl	801c5b6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801764e:	2300      	movs	r3, #0
 8017650:	e005      	b.n	801765e <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 8017652:	7afb      	ldrb	r3, [r7, #11]
 8017654:	4619      	mov	r1, r3
 8017656:	68f8      	ldr	r0, [r7, #12]
 8017658:	f000 f8cd 	bl	80177f6 <SCSI_ProcessWrite>
 801765c:	4603      	mov	r3, r0
}
 801765e:	4618      	mov	r0, r3
 8017660:	3718      	adds	r7, #24
 8017662:	46bd      	mov	sp, r7
 8017664:	bd80      	pop	{r7, pc}

08017666 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8017666:	b580      	push	{r7, lr}
 8017668:	b086      	sub	sp, #24
 801766a:	af00      	add	r7, sp, #0
 801766c:	60f8      	str	r0, [r7, #12]
 801766e:	460b      	mov	r3, r1
 8017670:	607a      	str	r2, [r7, #4]
 8017672:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801767a:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	3301      	adds	r3, #1
 8017680:	781b      	ldrb	r3, [r3, #0]
 8017682:	f003 0302 	and.w	r3, r3, #2
 8017686:	2b00      	cmp	r3, #0
 8017688:	d008      	beq.n	801769c <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801768a:	7af9      	ldrb	r1, [r7, #11]
 801768c:	2324      	movs	r3, #36	; 0x24
 801768e:	2205      	movs	r2, #5
 8017690:	68f8      	ldr	r0, [r7, #12]
 8017692:	f7ff fc6a 	bl	8016f6a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8017696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801769a:	e013      	b.n	80176c4 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 801769c:	697b      	ldr	r3, [r7, #20]
 801769e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80176a2:	697b      	ldr	r3, [r7, #20]
 80176a4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80176a8:	7af9      	ldrb	r1, [r7, #11]
 80176aa:	68f8      	ldr	r0, [r7, #12]
 80176ac:	f000 f80e 	bl	80176cc <SCSI_CheckAddressRange>
 80176b0:	4603      	mov	r3, r0
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	da02      	bge.n	80176bc <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 80176b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80176ba:	e003      	b.n	80176c4 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 80176bc:	697b      	ldr	r3, [r7, #20]
 80176be:	2200      	movs	r2, #0
 80176c0:	60da      	str	r2, [r3, #12]

  return 0;
 80176c2:	2300      	movs	r3, #0
}
 80176c4:	4618      	mov	r0, r3
 80176c6:	3718      	adds	r7, #24
 80176c8:	46bd      	mov	sp, r7
 80176ca:	bd80      	pop	{r7, pc}

080176cc <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b086      	sub	sp, #24
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	60f8      	str	r0, [r7, #12]
 80176d4:	607a      	str	r2, [r7, #4]
 80176d6:	603b      	str	r3, [r7, #0]
 80176d8:	460b      	mov	r3, r1
 80176da:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80176e2:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80176e4:	687a      	ldr	r2, [r7, #4]
 80176e6:	683b      	ldr	r3, [r7, #0]
 80176e8:	441a      	add	r2, r3
 80176ea:	697b      	ldr	r3, [r7, #20]
 80176ec:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80176f0:	429a      	cmp	r2, r3
 80176f2:	d908      	bls.n	8017706 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80176f4:	7af9      	ldrb	r1, [r7, #11]
 80176f6:	2321      	movs	r3, #33	; 0x21
 80176f8:	2205      	movs	r2, #5
 80176fa:	68f8      	ldr	r0, [r7, #12]
 80176fc:	f7ff fc35 	bl	8016f6a <SCSI_SenseCode>
    return -1;
 8017700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017704:	e000      	b.n	8017708 <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 8017706:	2300      	movs	r3, #0
}
 8017708:	4618      	mov	r0, r3
 801770a:	3718      	adds	r7, #24
 801770c:	46bd      	mov	sp, r7
 801770e:	bd80      	pop	{r7, pc}

08017710 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8017710:	b590      	push	{r4, r7, lr}
 8017712:	b085      	sub	sp, #20
 8017714:	af00      	add	r7, sp, #0
 8017716:	6078      	str	r0, [r7, #4]
 8017718:	460b      	mov	r3, r1
 801771a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017722:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801772a:	68fa      	ldr	r2, [r7, #12]
 801772c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8017730:	fb02 f303 	mul.w	r3, r2, r3
 8017734:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8017736:	68bb      	ldr	r3, [r7, #8]
 8017738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801773c:	bf28      	it	cs
 801773e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8017742:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801774a:	691c      	ldr	r4, [r3, #16]
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	f103 0110 	add.w	r1, r3, #16
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8017758:	68fb      	ldr	r3, [r7, #12]
 801775a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801775e:	4618      	mov	r0, r3
 8017760:	68bb      	ldr	r3, [r7, #8]
 8017762:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8017766:	b29b      	uxth	r3, r3
 8017768:	78f8      	ldrb	r0, [r7, #3]
 801776a:	47a0      	blx	r4
 801776c:	4603      	mov	r3, r0
 801776e:	2b00      	cmp	r3, #0
 8017770:	da08      	bge.n	8017784 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8017772:	78f9      	ldrb	r1, [r7, #3]
 8017774:	2311      	movs	r3, #17
 8017776:	2204      	movs	r2, #4
 8017778:	6878      	ldr	r0, [r7, #4]
 801777a:	f7ff fbf6 	bl	8016f6a <SCSI_SenseCode>
    return -1;
 801777e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017782:	e034      	b.n	80177ee <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8017784:	68fb      	ldr	r3, [r7, #12]
 8017786:	f103 0210 	add.w	r2, r3, #16
 801778a:	68bb      	ldr	r3, [r7, #8]
 801778c:	2181      	movs	r1, #129	; 0x81
 801778e:	6878      	ldr	r0, [r7, #4]
 8017790:	f004 fef0 	bl	801c574 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80177a0:	4619      	mov	r1, r3
 80177a2:	68bb      	ldr	r3, [r7, #8]
 80177a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80177a8:	441a      	add	r2, r3
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80177bc:	4619      	mov	r1, r3
 80177be:	68bb      	ldr	r3, [r7, #8]
 80177c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80177c4:	1ad2      	subs	r2, r2, r3
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80177d2:	68bb      	ldr	r3, [r7, #8]
 80177d4:	1ad2      	subs	r2, r2, r3
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d102      	bne.n	80177ec <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	2203      	movs	r2, #3
 80177ea:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80177ec:	2300      	movs	r3, #0
}
 80177ee:	4618      	mov	r0, r3
 80177f0:	3714      	adds	r7, #20
 80177f2:	46bd      	mov	sp, r7
 80177f4:	bd90      	pop	{r4, r7, pc}

080177f6 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80177f6:	b590      	push	{r4, r7, lr}
 80177f8:	b085      	sub	sp, #20
 80177fa:	af00      	add	r7, sp, #0
 80177fc:	6078      	str	r0, [r7, #4]
 80177fe:	460b      	mov	r3, r1
 8017800:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017808:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8017810:	68fa      	ldr	r2, [r7, #12]
 8017812:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8017816:	fb02 f303 	mul.w	r3, r2, r3
 801781a:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 801781c:	68bb      	ldr	r3, [r7, #8]
 801781e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017822:	bf28      	it	cs
 8017824:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8017828:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017830:	695c      	ldr	r4, [r3, #20]
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	f103 0110 	add.w	r1, r3, #16
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8017844:	4618      	mov	r0, r3
 8017846:	68bb      	ldr	r3, [r7, #8]
 8017848:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 801784c:	b29b      	uxth	r3, r3
 801784e:	78f8      	ldrb	r0, [r7, #3]
 8017850:	47a0      	blx	r4
 8017852:	4603      	mov	r3, r0
 8017854:	2b00      	cmp	r3, #0
 8017856:	da08      	bge.n	801786a <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8017858:	78f9      	ldrb	r1, [r7, #3]
 801785a:	2303      	movs	r3, #3
 801785c:	2204      	movs	r2, #4
 801785e:	6878      	ldr	r0, [r7, #4]
 8017860:	f7ff fb83 	bl	8016f6a <SCSI_SenseCode>
    return -1;
 8017864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017868:	e044      	b.n	80178f4 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8017876:	4619      	mov	r1, r3
 8017878:	68bb      	ldr	r3, [r7, #8]
 801787a:	fbb3 f3f1 	udiv	r3, r3, r1
 801787e:	441a      	add	r2, r3
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8017892:	4619      	mov	r1, r3
 8017894:	68bb      	ldr	r3, [r7, #8]
 8017896:	fbb3 f3f1 	udiv	r3, r3, r1
 801789a:	1ad2      	subs	r2, r2, r3
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80178a8:	68bb      	ldr	r3, [r7, #8]
 80178aa:	1ad2      	subs	r2, r2, r3
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d104      	bne.n	80178c6 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80178bc:	2100      	movs	r1, #0
 80178be:	6878      	ldr	r0, [r7, #4]
 80178c0:	f7fe fe5c 	bl	801657c <MSC_BOT_SendCSW>
 80178c4:	e015      	b.n	80178f2 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80178cc:	68fa      	ldr	r2, [r7, #12]
 80178ce:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80178d2:	fb02 f303 	mul.w	r3, r2, r3
 80178d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80178da:	bf28      	it	cs
 80178dc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80178e0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	f103 0210 	add.w	r2, r3, #16
 80178e8:	68bb      	ldr	r3, [r7, #8]
 80178ea:	2101      	movs	r1, #1
 80178ec:	6878      	ldr	r0, [r7, #4]
 80178ee:	f004 fe62 	bl	801c5b6 <USBD_LL_PrepareReceive>
  }

  return 0;
 80178f2:	2300      	movs	r3, #0
}
 80178f4:	4618      	mov	r0, r3
 80178f6:	3714      	adds	r7, #20
 80178f8:	46bd      	mov	sp, r7
 80178fa:	bd90      	pop	{r4, r7, pc}

080178fc <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80178fc:	b480      	push	{r7}
 80178fe:	b087      	sub	sp, #28
 8017900:	af00      	add	r7, sp, #0
 8017902:	60f8      	str	r0, [r7, #12]
 8017904:	60b9      	str	r1, [r7, #8]
 8017906:	4613      	mov	r3, r2
 8017908:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 801790a:	88fb      	ldrh	r3, [r7, #6]
 801790c:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 801790e:	8afa      	ldrh	r2, [r7, #22]
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8017914:	e00b      	b.n	801792e <SCSI_UpdateBotData+0x32>
  {
    len--;
 8017916:	8afb      	ldrh	r3, [r7, #22]
 8017918:	3b01      	subs	r3, #1
 801791a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 801791c:	8afb      	ldrh	r3, [r7, #22]
 801791e:	68ba      	ldr	r2, [r7, #8]
 8017920:	441a      	add	r2, r3
 8017922:	8afb      	ldrh	r3, [r7, #22]
 8017924:	7811      	ldrb	r1, [r2, #0]
 8017926:	68fa      	ldr	r2, [r7, #12]
 8017928:	4413      	add	r3, r2
 801792a:	460a      	mov	r2, r1
 801792c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 801792e:	8afb      	ldrh	r3, [r7, #22]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d1f0      	bne.n	8017916 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8017934:	2300      	movs	r3, #0
}
 8017936:	4618      	mov	r0, r3
 8017938:	371c      	adds	r7, #28
 801793a:	46bd      	mov	sp, r7
 801793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017940:	4770      	bx	lr

08017942 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8017942:	b580      	push	{r7, lr}
 8017944:	b086      	sub	sp, #24
 8017946:	af00      	add	r7, sp, #0
 8017948:	60f8      	str	r0, [r7, #12]
 801794a:	60b9      	str	r1, [r7, #8]
 801794c:	4613      	mov	r3, r2
 801794e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	2b00      	cmp	r3, #0
 8017954:	d101      	bne.n	801795a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8017956:	2303      	movs	r3, #3
 8017958:	e025      	b.n	80179a6 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017960:	2b00      	cmp	r3, #0
 8017962:	d003      	beq.n	801796c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	2200      	movs	r2, #0
 8017968:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8017972:	2b00      	cmp	r3, #0
 8017974:	d003      	beq.n	801797e <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	2200      	movs	r2, #0
 801797a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801797e:	68bb      	ldr	r3, [r7, #8]
 8017980:	2b00      	cmp	r3, #0
 8017982:	d003      	beq.n	801798c <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	68ba      	ldr	r2, [r7, #8]
 8017988:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801798c:	68fb      	ldr	r3, [r7, #12]
 801798e:	2201      	movs	r2, #1
 8017990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	79fa      	ldrb	r2, [r7, #7]
 8017998:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801799a:	68f8      	ldr	r0, [r7, #12]
 801799c:	f004 fc96 	bl	801c2cc <USBD_LL_Init>
 80179a0:	4603      	mov	r3, r0
 80179a2:	75fb      	strb	r3, [r7, #23]

  return ret;
 80179a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80179a6:	4618      	mov	r0, r3
 80179a8:	3718      	adds	r7, #24
 80179aa:	46bd      	mov	sp, r7
 80179ac:	bd80      	pop	{r7, pc}

080179ae <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80179ae:	b580      	push	{r7, lr}
 80179b0:	b084      	sub	sp, #16
 80179b2:	af00      	add	r7, sp, #0
 80179b4:	6078      	str	r0, [r7, #4]
 80179b6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80179b8:	2300      	movs	r3, #0
 80179ba:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80179bc:	683b      	ldr	r3, [r7, #0]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d101      	bne.n	80179c6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80179c2:	2303      	movs	r3, #3
 80179c4:	e010      	b.n	80179e8 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	683a      	ldr	r2, [r7, #0]
 80179ca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80179d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179d6:	f107 020e 	add.w	r2, r7, #14
 80179da:	4610      	mov	r0, r2
 80179dc:	4798      	blx	r3
 80179de:	4602      	mov	r2, r0
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80179e6:	2300      	movs	r3, #0
}
 80179e8:	4618      	mov	r0, r3
 80179ea:	3710      	adds	r7, #16
 80179ec:	46bd      	mov	sp, r7
 80179ee:	bd80      	pop	{r7, pc}

080179f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80179f0:	b580      	push	{r7, lr}
 80179f2:	b082      	sub	sp, #8
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80179f8:	6878      	ldr	r0, [r7, #4]
 80179fa:	f004 fcb3 	bl	801c364 <USBD_LL_Start>
 80179fe:	4603      	mov	r3, r0
}
 8017a00:	4618      	mov	r0, r3
 8017a02:	3708      	adds	r7, #8
 8017a04:	46bd      	mov	sp, r7
 8017a06:	bd80      	pop	{r7, pc}

08017a08 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8017a08:	b480      	push	{r7}
 8017a0a:	b083      	sub	sp, #12
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017a10:	2300      	movs	r3, #0
}
 8017a12:	4618      	mov	r0, r3
 8017a14:	370c      	adds	r7, #12
 8017a16:	46bd      	mov	sp, r7
 8017a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a1c:	4770      	bx	lr

08017a1e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017a1e:	b580      	push	{r7, lr}
 8017a20:	b084      	sub	sp, #16
 8017a22:	af00      	add	r7, sp, #0
 8017a24:	6078      	str	r0, [r7, #4]
 8017a26:	460b      	mov	r3, r1
 8017a28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8017a2a:	2303      	movs	r3, #3
 8017a2c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d009      	beq.n	8017a4c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	78fa      	ldrb	r2, [r7, #3]
 8017a42:	4611      	mov	r1, r2
 8017a44:	6878      	ldr	r0, [r7, #4]
 8017a46:	4798      	blx	r3
 8017a48:	4603      	mov	r3, r0
 8017a4a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8017a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a4e:	4618      	mov	r0, r3
 8017a50:	3710      	adds	r7, #16
 8017a52:	46bd      	mov	sp, r7
 8017a54:	bd80      	pop	{r7, pc}

08017a56 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017a56:	b580      	push	{r7, lr}
 8017a58:	b082      	sub	sp, #8
 8017a5a:	af00      	add	r7, sp, #0
 8017a5c:	6078      	str	r0, [r7, #4]
 8017a5e:	460b      	mov	r3, r1
 8017a60:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d007      	beq.n	8017a7c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017a72:	685b      	ldr	r3, [r3, #4]
 8017a74:	78fa      	ldrb	r2, [r7, #3]
 8017a76:	4611      	mov	r1, r2
 8017a78:	6878      	ldr	r0, [r7, #4]
 8017a7a:	4798      	blx	r3
  }

  return USBD_OK;
 8017a7c:	2300      	movs	r3, #0
}
 8017a7e:	4618      	mov	r0, r3
 8017a80:	3708      	adds	r7, #8
 8017a82:	46bd      	mov	sp, r7
 8017a84:	bd80      	pop	{r7, pc}

08017a86 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8017a86:	b580      	push	{r7, lr}
 8017a88:	b084      	sub	sp, #16
 8017a8a:	af00      	add	r7, sp, #0
 8017a8c:	6078      	str	r0, [r7, #4]
 8017a8e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8017a96:	6839      	ldr	r1, [r7, #0]
 8017a98:	4618      	mov	r0, r3
 8017a9a:	f000 ff64 	bl	8018966 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	2201      	movs	r2, #1
 8017aa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8017aac:	461a      	mov	r2, r3
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8017aba:	f003 031f 	and.w	r3, r3, #31
 8017abe:	2b02      	cmp	r3, #2
 8017ac0:	d01a      	beq.n	8017af8 <USBD_LL_SetupStage+0x72>
 8017ac2:	2b02      	cmp	r3, #2
 8017ac4:	d822      	bhi.n	8017b0c <USBD_LL_SetupStage+0x86>
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d002      	beq.n	8017ad0 <USBD_LL_SetupStage+0x4a>
 8017aca:	2b01      	cmp	r3, #1
 8017acc:	d00a      	beq.n	8017ae4 <USBD_LL_SetupStage+0x5e>
 8017ace:	e01d      	b.n	8017b0c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8017ad6:	4619      	mov	r1, r3
 8017ad8:	6878      	ldr	r0, [r7, #4]
 8017ada:	f000 fa17 	bl	8017f0c <USBD_StdDevReq>
 8017ade:	4603      	mov	r3, r0
 8017ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8017ae2:	e020      	b.n	8017b26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8017aea:	4619      	mov	r1, r3
 8017aec:	6878      	ldr	r0, [r7, #4]
 8017aee:	f000 fa7b 	bl	8017fe8 <USBD_StdItfReq>
 8017af2:	4603      	mov	r3, r0
 8017af4:	73fb      	strb	r3, [r7, #15]
      break;
 8017af6:	e016      	b.n	8017b26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8017afe:	4619      	mov	r1, r3
 8017b00:	6878      	ldr	r0, [r7, #4]
 8017b02:	f000 fab9 	bl	8018078 <USBD_StdEPReq>
 8017b06:	4603      	mov	r3, r0
 8017b08:	73fb      	strb	r3, [r7, #15]
      break;
 8017b0a:	e00c      	b.n	8017b26 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8017b12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8017b16:	b2db      	uxtb	r3, r3
 8017b18:	4619      	mov	r1, r3
 8017b1a:	6878      	ldr	r0, [r7, #4]
 8017b1c:	f004 fca1 	bl	801c462 <USBD_LL_StallEP>
 8017b20:	4603      	mov	r3, r0
 8017b22:	73fb      	strb	r3, [r7, #15]
      break;
 8017b24:	bf00      	nop
  }

  return ret;
 8017b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b28:	4618      	mov	r0, r3
 8017b2a:	3710      	adds	r7, #16
 8017b2c:	46bd      	mov	sp, r7
 8017b2e:	bd80      	pop	{r7, pc}

08017b30 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b086      	sub	sp, #24
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	60f8      	str	r0, [r7, #12]
 8017b38:	460b      	mov	r3, r1
 8017b3a:	607a      	str	r2, [r7, #4]
 8017b3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8017b3e:	7afb      	ldrb	r3, [r7, #11]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d137      	bne.n	8017bb4 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8017b4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8017b52:	2b03      	cmp	r3, #3
 8017b54:	d14a      	bne.n	8017bec <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8017b56:	693b      	ldr	r3, [r7, #16]
 8017b58:	689a      	ldr	r2, [r3, #8]
 8017b5a:	693b      	ldr	r3, [r7, #16]
 8017b5c:	68db      	ldr	r3, [r3, #12]
 8017b5e:	429a      	cmp	r2, r3
 8017b60:	d913      	bls.n	8017b8a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8017b62:	693b      	ldr	r3, [r7, #16]
 8017b64:	689a      	ldr	r2, [r3, #8]
 8017b66:	693b      	ldr	r3, [r7, #16]
 8017b68:	68db      	ldr	r3, [r3, #12]
 8017b6a:	1ad2      	subs	r2, r2, r3
 8017b6c:	693b      	ldr	r3, [r7, #16]
 8017b6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8017b70:	693b      	ldr	r3, [r7, #16]
 8017b72:	68da      	ldr	r2, [r3, #12]
 8017b74:	693b      	ldr	r3, [r7, #16]
 8017b76:	689b      	ldr	r3, [r3, #8]
 8017b78:	4293      	cmp	r3, r2
 8017b7a:	bf28      	it	cs
 8017b7c:	4613      	movcs	r3, r2
 8017b7e:	461a      	mov	r2, r3
 8017b80:	6879      	ldr	r1, [r7, #4]
 8017b82:	68f8      	ldr	r0, [r7, #12]
 8017b84:	f000 ffc6 	bl	8018b14 <USBD_CtlContinueRx>
 8017b88:	e030      	b.n	8017bec <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017b90:	691b      	ldr	r3, [r3, #16]
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d00a      	beq.n	8017bac <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8017b9c:	2b03      	cmp	r3, #3
 8017b9e:	d105      	bne.n	8017bac <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017ba6:	691b      	ldr	r3, [r3, #16]
 8017ba8:	68f8      	ldr	r0, [r7, #12]
 8017baa:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8017bac:	68f8      	ldr	r0, [r7, #12]
 8017bae:	f000 ffc2 	bl	8018b36 <USBD_CtlSendStatus>
 8017bb2:	e01b      	b.n	8017bec <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017bba:	699b      	ldr	r3, [r3, #24]
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d013      	beq.n	8017be8 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8017bc6:	2b03      	cmp	r3, #3
 8017bc8:	d10e      	bne.n	8017be8 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017bd0:	699b      	ldr	r3, [r3, #24]
 8017bd2:	7afa      	ldrb	r2, [r7, #11]
 8017bd4:	4611      	mov	r1, r2
 8017bd6:	68f8      	ldr	r0, [r7, #12]
 8017bd8:	4798      	blx	r3
 8017bda:	4603      	mov	r3, r0
 8017bdc:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8017bde:	7dfb      	ldrb	r3, [r7, #23]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d003      	beq.n	8017bec <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8017be4:	7dfb      	ldrb	r3, [r7, #23]
 8017be6:	e002      	b.n	8017bee <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8017be8:	2303      	movs	r3, #3
 8017bea:	e000      	b.n	8017bee <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8017bec:	2300      	movs	r3, #0
}
 8017bee:	4618      	mov	r0, r3
 8017bf0:	3718      	adds	r7, #24
 8017bf2:	46bd      	mov	sp, r7
 8017bf4:	bd80      	pop	{r7, pc}

08017bf6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8017bf6:	b580      	push	{r7, lr}
 8017bf8:	b086      	sub	sp, #24
 8017bfa:	af00      	add	r7, sp, #0
 8017bfc:	60f8      	str	r0, [r7, #12]
 8017bfe:	460b      	mov	r3, r1
 8017c00:	607a      	str	r2, [r7, #4]
 8017c02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8017c04:	7afb      	ldrb	r3, [r7, #11]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d16a      	bne.n	8017ce0 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	3314      	adds	r3, #20
 8017c0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8017c16:	2b02      	cmp	r3, #2
 8017c18:	d155      	bne.n	8017cc6 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8017c1a:	693b      	ldr	r3, [r7, #16]
 8017c1c:	689a      	ldr	r2, [r3, #8]
 8017c1e:	693b      	ldr	r3, [r7, #16]
 8017c20:	68db      	ldr	r3, [r3, #12]
 8017c22:	429a      	cmp	r2, r3
 8017c24:	d914      	bls.n	8017c50 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8017c26:	693b      	ldr	r3, [r7, #16]
 8017c28:	689a      	ldr	r2, [r3, #8]
 8017c2a:	693b      	ldr	r3, [r7, #16]
 8017c2c:	68db      	ldr	r3, [r3, #12]
 8017c2e:	1ad2      	subs	r2, r2, r3
 8017c30:	693b      	ldr	r3, [r7, #16]
 8017c32:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8017c34:	693b      	ldr	r3, [r7, #16]
 8017c36:	689b      	ldr	r3, [r3, #8]
 8017c38:	461a      	mov	r2, r3
 8017c3a:	6879      	ldr	r1, [r7, #4]
 8017c3c:	68f8      	ldr	r0, [r7, #12]
 8017c3e:	f000 ff58 	bl	8018af2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017c42:	2300      	movs	r3, #0
 8017c44:	2200      	movs	r2, #0
 8017c46:	2100      	movs	r1, #0
 8017c48:	68f8      	ldr	r0, [r7, #12]
 8017c4a:	f004 fcb4 	bl	801c5b6 <USBD_LL_PrepareReceive>
 8017c4e:	e03a      	b.n	8017cc6 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8017c50:	693b      	ldr	r3, [r7, #16]
 8017c52:	68da      	ldr	r2, [r3, #12]
 8017c54:	693b      	ldr	r3, [r7, #16]
 8017c56:	689b      	ldr	r3, [r3, #8]
 8017c58:	429a      	cmp	r2, r3
 8017c5a:	d11c      	bne.n	8017c96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8017c5c:	693b      	ldr	r3, [r7, #16]
 8017c5e:	685a      	ldr	r2, [r3, #4]
 8017c60:	693b      	ldr	r3, [r7, #16]
 8017c62:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8017c64:	429a      	cmp	r2, r3
 8017c66:	d316      	bcc.n	8017c96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8017c68:	693b      	ldr	r3, [r7, #16]
 8017c6a:	685a      	ldr	r2, [r3, #4]
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8017c72:	429a      	cmp	r2, r3
 8017c74:	d20f      	bcs.n	8017c96 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8017c76:	2200      	movs	r2, #0
 8017c78:	2100      	movs	r1, #0
 8017c7a:	68f8      	ldr	r0, [r7, #12]
 8017c7c:	f000 ff39 	bl	8018af2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	2200      	movs	r2, #0
 8017c84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017c88:	2300      	movs	r3, #0
 8017c8a:	2200      	movs	r2, #0
 8017c8c:	2100      	movs	r1, #0
 8017c8e:	68f8      	ldr	r0, [r7, #12]
 8017c90:	f004 fc91 	bl	801c5b6 <USBD_LL_PrepareReceive>
 8017c94:	e017      	b.n	8017cc6 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017c9c:	68db      	ldr	r3, [r3, #12]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d00a      	beq.n	8017cb8 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8017ca8:	2b03      	cmp	r3, #3
 8017caa:	d105      	bne.n	8017cb8 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017cb2:	68db      	ldr	r3, [r3, #12]
 8017cb4:	68f8      	ldr	r0, [r7, #12]
 8017cb6:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8017cb8:	2180      	movs	r1, #128	; 0x80
 8017cba:	68f8      	ldr	r0, [r7, #12]
 8017cbc:	f004 fbd1 	bl	801c462 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8017cc0:	68f8      	ldr	r0, [r7, #12]
 8017cc2:	f000 ff4b 	bl	8018b5c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8017ccc:	2b01      	cmp	r3, #1
 8017cce:	d123      	bne.n	8017d18 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8017cd0:	68f8      	ldr	r0, [r7, #12]
 8017cd2:	f7ff fe99 	bl	8017a08 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	2200      	movs	r2, #0
 8017cda:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8017cde:	e01b      	b.n	8017d18 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017ce6:	695b      	ldr	r3, [r3, #20]
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d013      	beq.n	8017d14 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8017cf2:	2b03      	cmp	r3, #3
 8017cf4:	d10e      	bne.n	8017d14 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8017cf6:	68fb      	ldr	r3, [r7, #12]
 8017cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017cfc:	695b      	ldr	r3, [r3, #20]
 8017cfe:	7afa      	ldrb	r2, [r7, #11]
 8017d00:	4611      	mov	r1, r2
 8017d02:	68f8      	ldr	r0, [r7, #12]
 8017d04:	4798      	blx	r3
 8017d06:	4603      	mov	r3, r0
 8017d08:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8017d0a:	7dfb      	ldrb	r3, [r7, #23]
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d003      	beq.n	8017d18 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8017d10:	7dfb      	ldrb	r3, [r7, #23]
 8017d12:	e002      	b.n	8017d1a <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8017d14:	2303      	movs	r3, #3
 8017d16:	e000      	b.n	8017d1a <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8017d18:	2300      	movs	r3, #0
}
 8017d1a:	4618      	mov	r0, r3
 8017d1c:	3718      	adds	r7, #24
 8017d1e:	46bd      	mov	sp, r7
 8017d20:	bd80      	pop	{r7, pc}

08017d22 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8017d22:	b580      	push	{r7, lr}
 8017d24:	b082      	sub	sp, #8
 8017d26:	af00      	add	r7, sp, #0
 8017d28:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	2201      	movs	r2, #1
 8017d2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	2200      	movs	r2, #0
 8017d36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	2200      	movs	r2, #0
 8017d3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	2200      	movs	r2, #0
 8017d44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d009      	beq.n	8017d66 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017d58:	685b      	ldr	r3, [r3, #4]
 8017d5a:	687a      	ldr	r2, [r7, #4]
 8017d5c:	6852      	ldr	r2, [r2, #4]
 8017d5e:	b2d2      	uxtb	r2, r2
 8017d60:	4611      	mov	r1, r2
 8017d62:	6878      	ldr	r0, [r7, #4]
 8017d64:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017d66:	2340      	movs	r3, #64	; 0x40
 8017d68:	2200      	movs	r2, #0
 8017d6a:	2100      	movs	r1, #0
 8017d6c:	6878      	ldr	r0, [r7, #4]
 8017d6e:	f004 fb14 	bl	801c39a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	2201      	movs	r2, #1
 8017d76:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	2240      	movs	r2, #64	; 0x40
 8017d7e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017d82:	2340      	movs	r3, #64	; 0x40
 8017d84:	2200      	movs	r2, #0
 8017d86:	2180      	movs	r1, #128	; 0x80
 8017d88:	6878      	ldr	r0, [r7, #4]
 8017d8a:	f004 fb06 	bl	801c39a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	2201      	movs	r2, #1
 8017d92:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	2240      	movs	r2, #64	; 0x40
 8017d98:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8017d9a:	2300      	movs	r3, #0
}
 8017d9c:	4618      	mov	r0, r3
 8017d9e:	3708      	adds	r7, #8
 8017da0:	46bd      	mov	sp, r7
 8017da2:	bd80      	pop	{r7, pc}

08017da4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8017da4:	b480      	push	{r7}
 8017da6:	b083      	sub	sp, #12
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	6078      	str	r0, [r7, #4]
 8017dac:	460b      	mov	r3, r1
 8017dae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	78fa      	ldrb	r2, [r7, #3]
 8017db4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8017db6:	2300      	movs	r3, #0
}
 8017db8:	4618      	mov	r0, r3
 8017dba:	370c      	adds	r7, #12
 8017dbc:	46bd      	mov	sp, r7
 8017dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dc2:	4770      	bx	lr

08017dc4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8017dc4:	b480      	push	{r7}
 8017dc6:	b083      	sub	sp, #12
 8017dc8:	af00      	add	r7, sp, #0
 8017dca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	2204      	movs	r2, #4
 8017ddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8017de0:	2300      	movs	r3, #0
}
 8017de2:	4618      	mov	r0, r3
 8017de4:	370c      	adds	r7, #12
 8017de6:	46bd      	mov	sp, r7
 8017de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dec:	4770      	bx	lr

08017dee <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8017dee:	b480      	push	{r7}
 8017df0:	b083      	sub	sp, #12
 8017df2:	af00      	add	r7, sp, #0
 8017df4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017dfc:	2b04      	cmp	r3, #4
 8017dfe:	d105      	bne.n	8017e0c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8017e0c:	2300      	movs	r3, #0
}
 8017e0e:	4618      	mov	r0, r3
 8017e10:	370c      	adds	r7, #12
 8017e12:	46bd      	mov	sp, r7
 8017e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e18:	4770      	bx	lr

08017e1a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8017e1a:	b580      	push	{r7, lr}
 8017e1c:	b082      	sub	sp, #8
 8017e1e:	af00      	add	r7, sp, #0
 8017e20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017e28:	2b03      	cmp	r3, #3
 8017e2a:	d10b      	bne.n	8017e44 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017e32:	69db      	ldr	r3, [r3, #28]
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d005      	beq.n	8017e44 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017e3e:	69db      	ldr	r3, [r3, #28]
 8017e40:	6878      	ldr	r0, [r7, #4]
 8017e42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017e44:	2300      	movs	r3, #0
}
 8017e46:	4618      	mov	r0, r3
 8017e48:	3708      	adds	r7, #8
 8017e4a:	46bd      	mov	sp, r7
 8017e4c:	bd80      	pop	{r7, pc}

08017e4e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8017e4e:	b480      	push	{r7}
 8017e50:	b083      	sub	sp, #12
 8017e52:	af00      	add	r7, sp, #0
 8017e54:	6078      	str	r0, [r7, #4]
 8017e56:	460b      	mov	r3, r1
 8017e58:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8017e5a:	2300      	movs	r3, #0
}
 8017e5c:	4618      	mov	r0, r3
 8017e5e:	370c      	adds	r7, #12
 8017e60:	46bd      	mov	sp, r7
 8017e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e66:	4770      	bx	lr

08017e68 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8017e68:	b480      	push	{r7}
 8017e6a:	b083      	sub	sp, #12
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]
 8017e70:	460b      	mov	r3, r1
 8017e72:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8017e74:	2300      	movs	r3, #0
}
 8017e76:	4618      	mov	r0, r3
 8017e78:	370c      	adds	r7, #12
 8017e7a:	46bd      	mov	sp, r7
 8017e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e80:	4770      	bx	lr

08017e82 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8017e82:	b480      	push	{r7}
 8017e84:	b083      	sub	sp, #12
 8017e86:	af00      	add	r7, sp, #0
 8017e88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017e8a:	2300      	movs	r3, #0
}
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	370c      	adds	r7, #12
 8017e90:	46bd      	mov	sp, r7
 8017e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e96:	4770      	bx	lr

08017e98 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8017e98:	b580      	push	{r7, lr}
 8017e9a:	b082      	sub	sp, #8
 8017e9c:	af00      	add	r7, sp, #0
 8017e9e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	2201      	movs	r2, #1
 8017ea4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d009      	beq.n	8017ec6 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017eb8:	685b      	ldr	r3, [r3, #4]
 8017eba:	687a      	ldr	r2, [r7, #4]
 8017ebc:	6852      	ldr	r2, [r2, #4]
 8017ebe:	b2d2      	uxtb	r2, r2
 8017ec0:	4611      	mov	r1, r2
 8017ec2:	6878      	ldr	r0, [r7, #4]
 8017ec4:	4798      	blx	r3
  }

  return USBD_OK;
 8017ec6:	2300      	movs	r3, #0
}
 8017ec8:	4618      	mov	r0, r3
 8017eca:	3708      	adds	r7, #8
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	bd80      	pop	{r7, pc}

08017ed0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8017ed0:	b480      	push	{r7}
 8017ed2:	b087      	sub	sp, #28
 8017ed4:	af00      	add	r7, sp, #0
 8017ed6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8017edc:	697b      	ldr	r3, [r7, #20]
 8017ede:	781b      	ldrb	r3, [r3, #0]
 8017ee0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8017ee2:	697b      	ldr	r3, [r7, #20]
 8017ee4:	3301      	adds	r3, #1
 8017ee6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8017ee8:	697b      	ldr	r3, [r7, #20]
 8017eea:	781b      	ldrb	r3, [r3, #0]
 8017eec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8017eee:	8a3b      	ldrh	r3, [r7, #16]
 8017ef0:	021b      	lsls	r3, r3, #8
 8017ef2:	b21a      	sxth	r2, r3
 8017ef4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017ef8:	4313      	orrs	r3, r2
 8017efa:	b21b      	sxth	r3, r3
 8017efc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8017efe:	89fb      	ldrh	r3, [r7, #14]
}
 8017f00:	4618      	mov	r0, r3
 8017f02:	371c      	adds	r7, #28
 8017f04:	46bd      	mov	sp, r7
 8017f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f0a:	4770      	bx	lr

08017f0c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017f0c:	b580      	push	{r7, lr}
 8017f0e:	b084      	sub	sp, #16
 8017f10:	af00      	add	r7, sp, #0
 8017f12:	6078      	str	r0, [r7, #4]
 8017f14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017f16:	2300      	movs	r3, #0
 8017f18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017f1a:	683b      	ldr	r3, [r7, #0]
 8017f1c:	781b      	ldrb	r3, [r3, #0]
 8017f1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017f22:	2b40      	cmp	r3, #64	; 0x40
 8017f24:	d005      	beq.n	8017f32 <USBD_StdDevReq+0x26>
 8017f26:	2b40      	cmp	r3, #64	; 0x40
 8017f28:	d853      	bhi.n	8017fd2 <USBD_StdDevReq+0xc6>
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d00b      	beq.n	8017f46 <USBD_StdDevReq+0x3a>
 8017f2e:	2b20      	cmp	r3, #32
 8017f30:	d14f      	bne.n	8017fd2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017f38:	689b      	ldr	r3, [r3, #8]
 8017f3a:	6839      	ldr	r1, [r7, #0]
 8017f3c:	6878      	ldr	r0, [r7, #4]
 8017f3e:	4798      	blx	r3
 8017f40:	4603      	mov	r3, r0
 8017f42:	73fb      	strb	r3, [r7, #15]
    break;
 8017f44:	e04a      	b.n	8017fdc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8017f46:	683b      	ldr	r3, [r7, #0]
 8017f48:	785b      	ldrb	r3, [r3, #1]
 8017f4a:	2b09      	cmp	r3, #9
 8017f4c:	d83b      	bhi.n	8017fc6 <USBD_StdDevReq+0xba>
 8017f4e:	a201      	add	r2, pc, #4	; (adr r2, 8017f54 <USBD_StdDevReq+0x48>)
 8017f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f54:	08017fa9 	.word	0x08017fa9
 8017f58:	08017fbd 	.word	0x08017fbd
 8017f5c:	08017fc7 	.word	0x08017fc7
 8017f60:	08017fb3 	.word	0x08017fb3
 8017f64:	08017fc7 	.word	0x08017fc7
 8017f68:	08017f87 	.word	0x08017f87
 8017f6c:	08017f7d 	.word	0x08017f7d
 8017f70:	08017fc7 	.word	0x08017fc7
 8017f74:	08017f9f 	.word	0x08017f9f
 8017f78:	08017f91 	.word	0x08017f91
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8017f7c:	6839      	ldr	r1, [r7, #0]
 8017f7e:	6878      	ldr	r0, [r7, #4]
 8017f80:	f000 f9d8 	bl	8018334 <USBD_GetDescriptor>
      break;
 8017f84:	e024      	b.n	8017fd0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8017f86:	6839      	ldr	r1, [r7, #0]
 8017f88:	6878      	ldr	r0, [r7, #4]
 8017f8a:	f000 fb67 	bl	801865c <USBD_SetAddress>
      break;
 8017f8e:	e01f      	b.n	8017fd0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8017f90:	6839      	ldr	r1, [r7, #0]
 8017f92:	6878      	ldr	r0, [r7, #4]
 8017f94:	f000 fba6 	bl	80186e4 <USBD_SetConfig>
 8017f98:	4603      	mov	r3, r0
 8017f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8017f9c:	e018      	b.n	8017fd0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8017f9e:	6839      	ldr	r1, [r7, #0]
 8017fa0:	6878      	ldr	r0, [r7, #4]
 8017fa2:	f000 fc43 	bl	801882c <USBD_GetConfig>
      break;
 8017fa6:	e013      	b.n	8017fd0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8017fa8:	6839      	ldr	r1, [r7, #0]
 8017faa:	6878      	ldr	r0, [r7, #4]
 8017fac:	f000 fc73 	bl	8018896 <USBD_GetStatus>
      break;
 8017fb0:	e00e      	b.n	8017fd0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8017fb2:	6839      	ldr	r1, [r7, #0]
 8017fb4:	6878      	ldr	r0, [r7, #4]
 8017fb6:	f000 fca1 	bl	80188fc <USBD_SetFeature>
      break;
 8017fba:	e009      	b.n	8017fd0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8017fbc:	6839      	ldr	r1, [r7, #0]
 8017fbe:	6878      	ldr	r0, [r7, #4]
 8017fc0:	f000 fcb0 	bl	8018924 <USBD_ClrFeature>
      break;
 8017fc4:	e004      	b.n	8017fd0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8017fc6:	6839      	ldr	r1, [r7, #0]
 8017fc8:	6878      	ldr	r0, [r7, #4]
 8017fca:	f000 fd06 	bl	80189da <USBD_CtlError>
      break;
 8017fce:	bf00      	nop
    }
    break;
 8017fd0:	e004      	b.n	8017fdc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8017fd2:	6839      	ldr	r1, [r7, #0]
 8017fd4:	6878      	ldr	r0, [r7, #4]
 8017fd6:	f000 fd00 	bl	80189da <USBD_CtlError>
    break;
 8017fda:	bf00      	nop
  }

  return ret;
 8017fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8017fde:	4618      	mov	r0, r3
 8017fe0:	3710      	adds	r7, #16
 8017fe2:	46bd      	mov	sp, r7
 8017fe4:	bd80      	pop	{r7, pc}
 8017fe6:	bf00      	nop

08017fe8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017fe8:	b580      	push	{r7, lr}
 8017fea:	b084      	sub	sp, #16
 8017fec:	af00      	add	r7, sp, #0
 8017fee:	6078      	str	r0, [r7, #4]
 8017ff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017ff2:	2300      	movs	r3, #0
 8017ff4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017ff6:	683b      	ldr	r3, [r7, #0]
 8017ff8:	781b      	ldrb	r3, [r3, #0]
 8017ffa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017ffe:	2b40      	cmp	r3, #64	; 0x40
 8018000:	d005      	beq.n	801800e <USBD_StdItfReq+0x26>
 8018002:	2b40      	cmp	r3, #64	; 0x40
 8018004:	d82e      	bhi.n	8018064 <USBD_StdItfReq+0x7c>
 8018006:	2b00      	cmp	r3, #0
 8018008:	d001      	beq.n	801800e <USBD_StdItfReq+0x26>
 801800a:	2b20      	cmp	r3, #32
 801800c:	d12a      	bne.n	8018064 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018014:	3b01      	subs	r3, #1
 8018016:	2b02      	cmp	r3, #2
 8018018:	d81d      	bhi.n	8018056 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801801a:	683b      	ldr	r3, [r7, #0]
 801801c:	889b      	ldrh	r3, [r3, #4]
 801801e:	b2db      	uxtb	r3, r3
 8018020:	2b01      	cmp	r3, #1
 8018022:	d813      	bhi.n	801804c <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801802a:	689b      	ldr	r3, [r3, #8]
 801802c:	6839      	ldr	r1, [r7, #0]
 801802e:	6878      	ldr	r0, [r7, #4]
 8018030:	4798      	blx	r3
 8018032:	4603      	mov	r3, r0
 8018034:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8018036:	683b      	ldr	r3, [r7, #0]
 8018038:	88db      	ldrh	r3, [r3, #6]
 801803a:	2b00      	cmp	r3, #0
 801803c:	d110      	bne.n	8018060 <USBD_StdItfReq+0x78>
 801803e:	7bfb      	ldrb	r3, [r7, #15]
 8018040:	2b00      	cmp	r3, #0
 8018042:	d10d      	bne.n	8018060 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8018044:	6878      	ldr	r0, [r7, #4]
 8018046:	f000 fd76 	bl	8018b36 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 801804a:	e009      	b.n	8018060 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 801804c:	6839      	ldr	r1, [r7, #0]
 801804e:	6878      	ldr	r0, [r7, #4]
 8018050:	f000 fcc3 	bl	80189da <USBD_CtlError>
      break;
 8018054:	e004      	b.n	8018060 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8018056:	6839      	ldr	r1, [r7, #0]
 8018058:	6878      	ldr	r0, [r7, #4]
 801805a:	f000 fcbe 	bl	80189da <USBD_CtlError>
      break;
 801805e:	e000      	b.n	8018062 <USBD_StdItfReq+0x7a>
      break;
 8018060:	bf00      	nop
    }
    break;
 8018062:	e004      	b.n	801806e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8018064:	6839      	ldr	r1, [r7, #0]
 8018066:	6878      	ldr	r0, [r7, #4]
 8018068:	f000 fcb7 	bl	80189da <USBD_CtlError>
    break;
 801806c:	bf00      	nop
  }

  return ret;
 801806e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018070:	4618      	mov	r0, r3
 8018072:	3710      	adds	r7, #16
 8018074:	46bd      	mov	sp, r7
 8018076:	bd80      	pop	{r7, pc}

08018078 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018078:	b580      	push	{r7, lr}
 801807a:	b084      	sub	sp, #16
 801807c:	af00      	add	r7, sp, #0
 801807e:	6078      	str	r0, [r7, #4]
 8018080:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8018082:	2300      	movs	r3, #0
 8018084:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8018086:	683b      	ldr	r3, [r7, #0]
 8018088:	889b      	ldrh	r3, [r3, #4]
 801808a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801808c:	683b      	ldr	r3, [r7, #0]
 801808e:	781b      	ldrb	r3, [r3, #0]
 8018090:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018094:	2b40      	cmp	r3, #64	; 0x40
 8018096:	d007      	beq.n	80180a8 <USBD_StdEPReq+0x30>
 8018098:	2b40      	cmp	r3, #64	; 0x40
 801809a:	f200 8140 	bhi.w	801831e <USBD_StdEPReq+0x2a6>
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d00c      	beq.n	80180bc <USBD_StdEPReq+0x44>
 80180a2:	2b20      	cmp	r3, #32
 80180a4:	f040 813b 	bne.w	801831e <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80180ae:	689b      	ldr	r3, [r3, #8]
 80180b0:	6839      	ldr	r1, [r7, #0]
 80180b2:	6878      	ldr	r0, [r7, #4]
 80180b4:	4798      	blx	r3
 80180b6:	4603      	mov	r3, r0
 80180b8:	73fb      	strb	r3, [r7, #15]
    break;
 80180ba:	e135      	b.n	8018328 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80180bc:	683b      	ldr	r3, [r7, #0]
 80180be:	785b      	ldrb	r3, [r3, #1]
 80180c0:	2b03      	cmp	r3, #3
 80180c2:	d007      	beq.n	80180d4 <USBD_StdEPReq+0x5c>
 80180c4:	2b03      	cmp	r3, #3
 80180c6:	f300 8124 	bgt.w	8018312 <USBD_StdEPReq+0x29a>
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d07b      	beq.n	80181c6 <USBD_StdEPReq+0x14e>
 80180ce:	2b01      	cmp	r3, #1
 80180d0:	d03b      	beq.n	801814a <USBD_StdEPReq+0xd2>
 80180d2:	e11e      	b.n	8018312 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80180da:	2b02      	cmp	r3, #2
 80180dc:	d002      	beq.n	80180e4 <USBD_StdEPReq+0x6c>
 80180de:	2b03      	cmp	r3, #3
 80180e0:	d016      	beq.n	8018110 <USBD_StdEPReq+0x98>
 80180e2:	e02c      	b.n	801813e <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80180e4:	7bbb      	ldrb	r3, [r7, #14]
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d00d      	beq.n	8018106 <USBD_StdEPReq+0x8e>
 80180ea:	7bbb      	ldrb	r3, [r7, #14]
 80180ec:	2b80      	cmp	r3, #128	; 0x80
 80180ee:	d00a      	beq.n	8018106 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80180f0:	7bbb      	ldrb	r3, [r7, #14]
 80180f2:	4619      	mov	r1, r3
 80180f4:	6878      	ldr	r0, [r7, #4]
 80180f6:	f004 f9b4 	bl	801c462 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80180fa:	2180      	movs	r1, #128	; 0x80
 80180fc:	6878      	ldr	r0, [r7, #4]
 80180fe:	f004 f9b0 	bl	801c462 <USBD_LL_StallEP>
 8018102:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8018104:	e020      	b.n	8018148 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8018106:	6839      	ldr	r1, [r7, #0]
 8018108:	6878      	ldr	r0, [r7, #4]
 801810a:	f000 fc66 	bl	80189da <USBD_CtlError>
        break;
 801810e:	e01b      	b.n	8018148 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8018110:	683b      	ldr	r3, [r7, #0]
 8018112:	885b      	ldrh	r3, [r3, #2]
 8018114:	2b00      	cmp	r3, #0
 8018116:	d10e      	bne.n	8018136 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8018118:	7bbb      	ldrb	r3, [r7, #14]
 801811a:	2b00      	cmp	r3, #0
 801811c:	d00b      	beq.n	8018136 <USBD_StdEPReq+0xbe>
 801811e:	7bbb      	ldrb	r3, [r7, #14]
 8018120:	2b80      	cmp	r3, #128	; 0x80
 8018122:	d008      	beq.n	8018136 <USBD_StdEPReq+0xbe>
 8018124:	683b      	ldr	r3, [r7, #0]
 8018126:	88db      	ldrh	r3, [r3, #6]
 8018128:	2b00      	cmp	r3, #0
 801812a:	d104      	bne.n	8018136 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 801812c:	7bbb      	ldrb	r3, [r7, #14]
 801812e:	4619      	mov	r1, r3
 8018130:	6878      	ldr	r0, [r7, #4]
 8018132:	f004 f996 	bl	801c462 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8018136:	6878      	ldr	r0, [r7, #4]
 8018138:	f000 fcfd 	bl	8018b36 <USBD_CtlSendStatus>

        break;
 801813c:	e004      	b.n	8018148 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 801813e:	6839      	ldr	r1, [r7, #0]
 8018140:	6878      	ldr	r0, [r7, #4]
 8018142:	f000 fc4a 	bl	80189da <USBD_CtlError>
        break;
 8018146:	bf00      	nop
      }
      break;
 8018148:	e0e8      	b.n	801831c <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018150:	2b02      	cmp	r3, #2
 8018152:	d002      	beq.n	801815a <USBD_StdEPReq+0xe2>
 8018154:	2b03      	cmp	r3, #3
 8018156:	d016      	beq.n	8018186 <USBD_StdEPReq+0x10e>
 8018158:	e02e      	b.n	80181b8 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801815a:	7bbb      	ldrb	r3, [r7, #14]
 801815c:	2b00      	cmp	r3, #0
 801815e:	d00d      	beq.n	801817c <USBD_StdEPReq+0x104>
 8018160:	7bbb      	ldrb	r3, [r7, #14]
 8018162:	2b80      	cmp	r3, #128	; 0x80
 8018164:	d00a      	beq.n	801817c <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8018166:	7bbb      	ldrb	r3, [r7, #14]
 8018168:	4619      	mov	r1, r3
 801816a:	6878      	ldr	r0, [r7, #4]
 801816c:	f004 f979 	bl	801c462 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8018170:	2180      	movs	r1, #128	; 0x80
 8018172:	6878      	ldr	r0, [r7, #4]
 8018174:	f004 f975 	bl	801c462 <USBD_LL_StallEP>
 8018178:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 801817a:	e023      	b.n	80181c4 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 801817c:	6839      	ldr	r1, [r7, #0]
 801817e:	6878      	ldr	r0, [r7, #4]
 8018180:	f000 fc2b 	bl	80189da <USBD_CtlError>
        break;
 8018184:	e01e      	b.n	80181c4 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8018186:	683b      	ldr	r3, [r7, #0]
 8018188:	885b      	ldrh	r3, [r3, #2]
 801818a:	2b00      	cmp	r3, #0
 801818c:	d119      	bne.n	80181c2 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 801818e:	7bbb      	ldrb	r3, [r7, #14]
 8018190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018194:	2b00      	cmp	r3, #0
 8018196:	d004      	beq.n	80181a2 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8018198:	7bbb      	ldrb	r3, [r7, #14]
 801819a:	4619      	mov	r1, r3
 801819c:	6878      	ldr	r0, [r7, #4]
 801819e:	f004 f97f 	bl	801c4a0 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80181a2:	6878      	ldr	r0, [r7, #4]
 80181a4:	f000 fcc7 	bl	8018b36 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80181ae:	689b      	ldr	r3, [r3, #8]
 80181b0:	6839      	ldr	r1, [r7, #0]
 80181b2:	6878      	ldr	r0, [r7, #4]
 80181b4:	4798      	blx	r3
        }
        break;
 80181b6:	e004      	b.n	80181c2 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80181b8:	6839      	ldr	r1, [r7, #0]
 80181ba:	6878      	ldr	r0, [r7, #4]
 80181bc:	f000 fc0d 	bl	80189da <USBD_CtlError>
        break;
 80181c0:	e000      	b.n	80181c4 <USBD_StdEPReq+0x14c>
        break;
 80181c2:	bf00      	nop
      }
      break;
 80181c4:	e0aa      	b.n	801831c <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80181cc:	2b02      	cmp	r3, #2
 80181ce:	d002      	beq.n	80181d6 <USBD_StdEPReq+0x15e>
 80181d0:	2b03      	cmp	r3, #3
 80181d2:	d032      	beq.n	801823a <USBD_StdEPReq+0x1c2>
 80181d4:	e097      	b.n	8018306 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80181d6:	7bbb      	ldrb	r3, [r7, #14]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d007      	beq.n	80181ec <USBD_StdEPReq+0x174>
 80181dc:	7bbb      	ldrb	r3, [r7, #14]
 80181de:	2b80      	cmp	r3, #128	; 0x80
 80181e0:	d004      	beq.n	80181ec <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80181e2:	6839      	ldr	r1, [r7, #0]
 80181e4:	6878      	ldr	r0, [r7, #4]
 80181e6:	f000 fbf8 	bl	80189da <USBD_CtlError>
          break;
 80181ea:	e091      	b.n	8018310 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80181ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	da0b      	bge.n	801820c <USBD_StdEPReq+0x194>
 80181f4:	7bbb      	ldrb	r3, [r7, #14]
 80181f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80181fa:	4613      	mov	r3, r2
 80181fc:	009b      	lsls	r3, r3, #2
 80181fe:	4413      	add	r3, r2
 8018200:	009b      	lsls	r3, r3, #2
 8018202:	3310      	adds	r3, #16
 8018204:	687a      	ldr	r2, [r7, #4]
 8018206:	4413      	add	r3, r2
 8018208:	3304      	adds	r3, #4
 801820a:	e00b      	b.n	8018224 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 801820c:	7bbb      	ldrb	r3, [r7, #14]
 801820e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018212:	4613      	mov	r3, r2
 8018214:	009b      	lsls	r3, r3, #2
 8018216:	4413      	add	r3, r2
 8018218:	009b      	lsls	r3, r3, #2
 801821a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801821e:	687a      	ldr	r2, [r7, #4]
 8018220:	4413      	add	r3, r2
 8018222:	3304      	adds	r3, #4
 8018224:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8018226:	68bb      	ldr	r3, [r7, #8]
 8018228:	2200      	movs	r2, #0
 801822a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801822c:	68bb      	ldr	r3, [r7, #8]
 801822e:	2202      	movs	r2, #2
 8018230:	4619      	mov	r1, r3
 8018232:	6878      	ldr	r0, [r7, #4]
 8018234:	f000 fc42 	bl	8018abc <USBD_CtlSendData>
        break;
 8018238:	e06a      	b.n	8018310 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 801823a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801823e:	2b00      	cmp	r3, #0
 8018240:	da11      	bge.n	8018266 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8018242:	7bbb      	ldrb	r3, [r7, #14]
 8018244:	f003 020f 	and.w	r2, r3, #15
 8018248:	6879      	ldr	r1, [r7, #4]
 801824a:	4613      	mov	r3, r2
 801824c:	009b      	lsls	r3, r3, #2
 801824e:	4413      	add	r3, r2
 8018250:	009b      	lsls	r3, r3, #2
 8018252:	440b      	add	r3, r1
 8018254:	3324      	adds	r3, #36	; 0x24
 8018256:	881b      	ldrh	r3, [r3, #0]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d117      	bne.n	801828c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 801825c:	6839      	ldr	r1, [r7, #0]
 801825e:	6878      	ldr	r0, [r7, #4]
 8018260:	f000 fbbb 	bl	80189da <USBD_CtlError>
            break;
 8018264:	e054      	b.n	8018310 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8018266:	7bbb      	ldrb	r3, [r7, #14]
 8018268:	f003 020f 	and.w	r2, r3, #15
 801826c:	6879      	ldr	r1, [r7, #4]
 801826e:	4613      	mov	r3, r2
 8018270:	009b      	lsls	r3, r3, #2
 8018272:	4413      	add	r3, r2
 8018274:	009b      	lsls	r3, r3, #2
 8018276:	440b      	add	r3, r1
 8018278:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801827c:	881b      	ldrh	r3, [r3, #0]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d104      	bne.n	801828c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8018282:	6839      	ldr	r1, [r7, #0]
 8018284:	6878      	ldr	r0, [r7, #4]
 8018286:	f000 fba8 	bl	80189da <USBD_CtlError>
            break;
 801828a:	e041      	b.n	8018310 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801828c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018290:	2b00      	cmp	r3, #0
 8018292:	da0b      	bge.n	80182ac <USBD_StdEPReq+0x234>
 8018294:	7bbb      	ldrb	r3, [r7, #14]
 8018296:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801829a:	4613      	mov	r3, r2
 801829c:	009b      	lsls	r3, r3, #2
 801829e:	4413      	add	r3, r2
 80182a0:	009b      	lsls	r3, r3, #2
 80182a2:	3310      	adds	r3, #16
 80182a4:	687a      	ldr	r2, [r7, #4]
 80182a6:	4413      	add	r3, r2
 80182a8:	3304      	adds	r3, #4
 80182aa:	e00b      	b.n	80182c4 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80182ac:	7bbb      	ldrb	r3, [r7, #14]
 80182ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80182b2:	4613      	mov	r3, r2
 80182b4:	009b      	lsls	r3, r3, #2
 80182b6:	4413      	add	r3, r2
 80182b8:	009b      	lsls	r3, r3, #2
 80182ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80182be:	687a      	ldr	r2, [r7, #4]
 80182c0:	4413      	add	r3, r2
 80182c2:	3304      	adds	r3, #4
 80182c4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80182c6:	7bbb      	ldrb	r3, [r7, #14]
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d002      	beq.n	80182d2 <USBD_StdEPReq+0x25a>
 80182cc:	7bbb      	ldrb	r3, [r7, #14]
 80182ce:	2b80      	cmp	r3, #128	; 0x80
 80182d0:	d103      	bne.n	80182da <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 80182d2:	68bb      	ldr	r3, [r7, #8]
 80182d4:	2200      	movs	r2, #0
 80182d6:	601a      	str	r2, [r3, #0]
 80182d8:	e00e      	b.n	80182f8 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80182da:	7bbb      	ldrb	r3, [r7, #14]
 80182dc:	4619      	mov	r1, r3
 80182de:	6878      	ldr	r0, [r7, #4]
 80182e0:	f004 f8fd 	bl	801c4de <USBD_LL_IsStallEP>
 80182e4:	4603      	mov	r3, r0
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d003      	beq.n	80182f2 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 80182ea:	68bb      	ldr	r3, [r7, #8]
 80182ec:	2201      	movs	r2, #1
 80182ee:	601a      	str	r2, [r3, #0]
 80182f0:	e002      	b.n	80182f8 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 80182f2:	68bb      	ldr	r3, [r7, #8]
 80182f4:	2200      	movs	r2, #0
 80182f6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80182f8:	68bb      	ldr	r3, [r7, #8]
 80182fa:	2202      	movs	r2, #2
 80182fc:	4619      	mov	r1, r3
 80182fe:	6878      	ldr	r0, [r7, #4]
 8018300:	f000 fbdc 	bl	8018abc <USBD_CtlSendData>
          break;
 8018304:	e004      	b.n	8018310 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8018306:	6839      	ldr	r1, [r7, #0]
 8018308:	6878      	ldr	r0, [r7, #4]
 801830a:	f000 fb66 	bl	80189da <USBD_CtlError>
        break;
 801830e:	bf00      	nop
      }
      break;
 8018310:	e004      	b.n	801831c <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8018312:	6839      	ldr	r1, [r7, #0]
 8018314:	6878      	ldr	r0, [r7, #4]
 8018316:	f000 fb60 	bl	80189da <USBD_CtlError>
      break;
 801831a:	bf00      	nop
    }
    break;
 801831c:	e004      	b.n	8018328 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 801831e:	6839      	ldr	r1, [r7, #0]
 8018320:	6878      	ldr	r0, [r7, #4]
 8018322:	f000 fb5a 	bl	80189da <USBD_CtlError>
    break;
 8018326:	bf00      	nop
  }

  return ret;
 8018328:	7bfb      	ldrb	r3, [r7, #15]
}
 801832a:	4618      	mov	r0, r3
 801832c:	3710      	adds	r7, #16
 801832e:	46bd      	mov	sp, r7
 8018330:	bd80      	pop	{r7, pc}
	...

08018334 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018334:	b580      	push	{r7, lr}
 8018336:	b084      	sub	sp, #16
 8018338:	af00      	add	r7, sp, #0
 801833a:	6078      	str	r0, [r7, #4]
 801833c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801833e:	2300      	movs	r3, #0
 8018340:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8018342:	2300      	movs	r3, #0
 8018344:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8018346:	2300      	movs	r3, #0
 8018348:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801834a:	683b      	ldr	r3, [r7, #0]
 801834c:	885b      	ldrh	r3, [r3, #2]
 801834e:	0a1b      	lsrs	r3, r3, #8
 8018350:	b29b      	uxth	r3, r3
 8018352:	3b01      	subs	r3, #1
 8018354:	2b0e      	cmp	r3, #14
 8018356:	f200 8152 	bhi.w	80185fe <USBD_GetDescriptor+0x2ca>
 801835a:	a201      	add	r2, pc, #4	; (adr r2, 8018360 <USBD_GetDescriptor+0x2c>)
 801835c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018360:	080183d1 	.word	0x080183d1
 8018364:	080183e9 	.word	0x080183e9
 8018368:	08018429 	.word	0x08018429
 801836c:	080185ff 	.word	0x080185ff
 8018370:	080185ff 	.word	0x080185ff
 8018374:	0801859f 	.word	0x0801859f
 8018378:	080185cb 	.word	0x080185cb
 801837c:	080185ff 	.word	0x080185ff
 8018380:	080185ff 	.word	0x080185ff
 8018384:	080185ff 	.word	0x080185ff
 8018388:	080185ff 	.word	0x080185ff
 801838c:	080185ff 	.word	0x080185ff
 8018390:	080185ff 	.word	0x080185ff
 8018394:	080185ff 	.word	0x080185ff
 8018398:	0801839d 	.word	0x0801839d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80183a2:	69db      	ldr	r3, [r3, #28]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d00b      	beq.n	80183c0 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80183ae:	69db      	ldr	r3, [r3, #28]
 80183b0:	687a      	ldr	r2, [r7, #4]
 80183b2:	7c12      	ldrb	r2, [r2, #16]
 80183b4:	f107 0108 	add.w	r1, r7, #8
 80183b8:	4610      	mov	r0, r2
 80183ba:	4798      	blx	r3
 80183bc:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80183be:	e126      	b.n	801860e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80183c0:	6839      	ldr	r1, [r7, #0]
 80183c2:	6878      	ldr	r0, [r7, #4]
 80183c4:	f000 fb09 	bl	80189da <USBD_CtlError>
      err++;
 80183c8:	7afb      	ldrb	r3, [r7, #11]
 80183ca:	3301      	adds	r3, #1
 80183cc:	72fb      	strb	r3, [r7, #11]
    break;
 80183ce:	e11e      	b.n	801860e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	687a      	ldr	r2, [r7, #4]
 80183da:	7c12      	ldrb	r2, [r2, #16]
 80183dc:	f107 0108 	add.w	r1, r7, #8
 80183e0:	4610      	mov	r0, r2
 80183e2:	4798      	blx	r3
 80183e4:	60f8      	str	r0, [r7, #12]
    break;
 80183e6:	e112      	b.n	801860e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	7c1b      	ldrb	r3, [r3, #16]
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d10d      	bne.n	801840c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80183f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80183f8:	f107 0208 	add.w	r2, r7, #8
 80183fc:	4610      	mov	r0, r2
 80183fe:	4798      	blx	r3
 8018400:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8018402:	68fb      	ldr	r3, [r7, #12]
 8018404:	3301      	adds	r3, #1
 8018406:	2202      	movs	r2, #2
 8018408:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 801840a:	e100      	b.n	801860e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018414:	f107 0208 	add.w	r2, r7, #8
 8018418:	4610      	mov	r0, r2
 801841a:	4798      	blx	r3
 801841c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801841e:	68fb      	ldr	r3, [r7, #12]
 8018420:	3301      	adds	r3, #1
 8018422:	2202      	movs	r2, #2
 8018424:	701a      	strb	r2, [r3, #0]
    break;
 8018426:	e0f2      	b.n	801860e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8018428:	683b      	ldr	r3, [r7, #0]
 801842a:	885b      	ldrh	r3, [r3, #2]
 801842c:	b2db      	uxtb	r3, r3
 801842e:	2b05      	cmp	r3, #5
 8018430:	f200 80ac 	bhi.w	801858c <USBD_GetDescriptor+0x258>
 8018434:	a201      	add	r2, pc, #4	; (adr r2, 801843c <USBD_GetDescriptor+0x108>)
 8018436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801843a:	bf00      	nop
 801843c:	08018455 	.word	0x08018455
 8018440:	08018489 	.word	0x08018489
 8018444:	080184bd 	.word	0x080184bd
 8018448:	080184f1 	.word	0x080184f1
 801844c:	08018525 	.word	0x08018525
 8018450:	08018559 	.word	0x08018559
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801845a:	685b      	ldr	r3, [r3, #4]
 801845c:	2b00      	cmp	r3, #0
 801845e:	d00b      	beq.n	8018478 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018466:	685b      	ldr	r3, [r3, #4]
 8018468:	687a      	ldr	r2, [r7, #4]
 801846a:	7c12      	ldrb	r2, [r2, #16]
 801846c:	f107 0108 	add.w	r1, r7, #8
 8018470:	4610      	mov	r0, r2
 8018472:	4798      	blx	r3
 8018474:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018476:	e091      	b.n	801859c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8018478:	6839      	ldr	r1, [r7, #0]
 801847a:	6878      	ldr	r0, [r7, #4]
 801847c:	f000 faad 	bl	80189da <USBD_CtlError>
        err++;
 8018480:	7afb      	ldrb	r3, [r7, #11]
 8018482:	3301      	adds	r3, #1
 8018484:	72fb      	strb	r3, [r7, #11]
      break;
 8018486:	e089      	b.n	801859c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801848e:	689b      	ldr	r3, [r3, #8]
 8018490:	2b00      	cmp	r3, #0
 8018492:	d00b      	beq.n	80184ac <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801849a:	689b      	ldr	r3, [r3, #8]
 801849c:	687a      	ldr	r2, [r7, #4]
 801849e:	7c12      	ldrb	r2, [r2, #16]
 80184a0:	f107 0108 	add.w	r1, r7, #8
 80184a4:	4610      	mov	r0, r2
 80184a6:	4798      	blx	r3
 80184a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80184aa:	e077      	b.n	801859c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80184ac:	6839      	ldr	r1, [r7, #0]
 80184ae:	6878      	ldr	r0, [r7, #4]
 80184b0:	f000 fa93 	bl	80189da <USBD_CtlError>
        err++;
 80184b4:	7afb      	ldrb	r3, [r7, #11]
 80184b6:	3301      	adds	r3, #1
 80184b8:	72fb      	strb	r3, [r7, #11]
      break;
 80184ba:	e06f      	b.n	801859c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80184c2:	68db      	ldr	r3, [r3, #12]
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d00b      	beq.n	80184e0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80184ce:	68db      	ldr	r3, [r3, #12]
 80184d0:	687a      	ldr	r2, [r7, #4]
 80184d2:	7c12      	ldrb	r2, [r2, #16]
 80184d4:	f107 0108 	add.w	r1, r7, #8
 80184d8:	4610      	mov	r0, r2
 80184da:	4798      	blx	r3
 80184dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80184de:	e05d      	b.n	801859c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80184e0:	6839      	ldr	r1, [r7, #0]
 80184e2:	6878      	ldr	r0, [r7, #4]
 80184e4:	f000 fa79 	bl	80189da <USBD_CtlError>
        err++;
 80184e8:	7afb      	ldrb	r3, [r7, #11]
 80184ea:	3301      	adds	r3, #1
 80184ec:	72fb      	strb	r3, [r7, #11]
      break;
 80184ee:	e055      	b.n	801859c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80184f6:	691b      	ldr	r3, [r3, #16]
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d00b      	beq.n	8018514 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018502:	691b      	ldr	r3, [r3, #16]
 8018504:	687a      	ldr	r2, [r7, #4]
 8018506:	7c12      	ldrb	r2, [r2, #16]
 8018508:	f107 0108 	add.w	r1, r7, #8
 801850c:	4610      	mov	r0, r2
 801850e:	4798      	blx	r3
 8018510:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018512:	e043      	b.n	801859c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8018514:	6839      	ldr	r1, [r7, #0]
 8018516:	6878      	ldr	r0, [r7, #4]
 8018518:	f000 fa5f 	bl	80189da <USBD_CtlError>
        err++;
 801851c:	7afb      	ldrb	r3, [r7, #11]
 801851e:	3301      	adds	r3, #1
 8018520:	72fb      	strb	r3, [r7, #11]
      break;
 8018522:	e03b      	b.n	801859c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801852a:	695b      	ldr	r3, [r3, #20]
 801852c:	2b00      	cmp	r3, #0
 801852e:	d00b      	beq.n	8018548 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018536:	695b      	ldr	r3, [r3, #20]
 8018538:	687a      	ldr	r2, [r7, #4]
 801853a:	7c12      	ldrb	r2, [r2, #16]
 801853c:	f107 0108 	add.w	r1, r7, #8
 8018540:	4610      	mov	r0, r2
 8018542:	4798      	blx	r3
 8018544:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018546:	e029      	b.n	801859c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8018548:	6839      	ldr	r1, [r7, #0]
 801854a:	6878      	ldr	r0, [r7, #4]
 801854c:	f000 fa45 	bl	80189da <USBD_CtlError>
        err++;
 8018550:	7afb      	ldrb	r3, [r7, #11]
 8018552:	3301      	adds	r3, #1
 8018554:	72fb      	strb	r3, [r7, #11]
      break;
 8018556:	e021      	b.n	801859c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801855e:	699b      	ldr	r3, [r3, #24]
 8018560:	2b00      	cmp	r3, #0
 8018562:	d00b      	beq.n	801857c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801856a:	699b      	ldr	r3, [r3, #24]
 801856c:	687a      	ldr	r2, [r7, #4]
 801856e:	7c12      	ldrb	r2, [r2, #16]
 8018570:	f107 0108 	add.w	r1, r7, #8
 8018574:	4610      	mov	r0, r2
 8018576:	4798      	blx	r3
 8018578:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801857a:	e00f      	b.n	801859c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 801857c:	6839      	ldr	r1, [r7, #0]
 801857e:	6878      	ldr	r0, [r7, #4]
 8018580:	f000 fa2b 	bl	80189da <USBD_CtlError>
        err++;
 8018584:	7afb      	ldrb	r3, [r7, #11]
 8018586:	3301      	adds	r3, #1
 8018588:	72fb      	strb	r3, [r7, #11]
      break;
 801858a:	e007      	b.n	801859c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 801858c:	6839      	ldr	r1, [r7, #0]
 801858e:	6878      	ldr	r0, [r7, #4]
 8018590:	f000 fa23 	bl	80189da <USBD_CtlError>
      err++;
 8018594:	7afb      	ldrb	r3, [r7, #11]
 8018596:	3301      	adds	r3, #1
 8018598:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 801859a:	bf00      	nop
    }
    break;
 801859c:	e037      	b.n	801860e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	7c1b      	ldrb	r3, [r3, #16]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d109      	bne.n	80185ba <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80185ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80185ae:	f107 0208 	add.w	r2, r7, #8
 80185b2:	4610      	mov	r0, r2
 80185b4:	4798      	blx	r3
 80185b6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80185b8:	e029      	b.n	801860e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80185ba:	6839      	ldr	r1, [r7, #0]
 80185bc:	6878      	ldr	r0, [r7, #4]
 80185be:	f000 fa0c 	bl	80189da <USBD_CtlError>
      err++;
 80185c2:	7afb      	ldrb	r3, [r7, #11]
 80185c4:	3301      	adds	r3, #1
 80185c6:	72fb      	strb	r3, [r7, #11]
    break;
 80185c8:	e021      	b.n	801860e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	7c1b      	ldrb	r3, [r3, #16]
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d10d      	bne.n	80185ee <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80185d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80185da:	f107 0208 	add.w	r2, r7, #8
 80185de:	4610      	mov	r0, r2
 80185e0:	4798      	blx	r3
 80185e2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	3301      	adds	r3, #1
 80185e8:	2207      	movs	r2, #7
 80185ea:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80185ec:	e00f      	b.n	801860e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80185ee:	6839      	ldr	r1, [r7, #0]
 80185f0:	6878      	ldr	r0, [r7, #4]
 80185f2:	f000 f9f2 	bl	80189da <USBD_CtlError>
      err++;
 80185f6:	7afb      	ldrb	r3, [r7, #11]
 80185f8:	3301      	adds	r3, #1
 80185fa:	72fb      	strb	r3, [r7, #11]
    break;
 80185fc:	e007      	b.n	801860e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 80185fe:	6839      	ldr	r1, [r7, #0]
 8018600:	6878      	ldr	r0, [r7, #4]
 8018602:	f000 f9ea 	bl	80189da <USBD_CtlError>
    err++;
 8018606:	7afb      	ldrb	r3, [r7, #11]
 8018608:	3301      	adds	r3, #1
 801860a:	72fb      	strb	r3, [r7, #11]
    break;
 801860c:	bf00      	nop
  }

  if (err != 0U)
 801860e:	7afb      	ldrb	r3, [r7, #11]
 8018610:	2b00      	cmp	r3, #0
 8018612:	d11e      	bne.n	8018652 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8018614:	683b      	ldr	r3, [r7, #0]
 8018616:	88db      	ldrh	r3, [r3, #6]
 8018618:	2b00      	cmp	r3, #0
 801861a:	d016      	beq.n	801864a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 801861c:	893b      	ldrh	r3, [r7, #8]
 801861e:	2b00      	cmp	r3, #0
 8018620:	d00e      	beq.n	8018640 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8018622:	683b      	ldr	r3, [r7, #0]
 8018624:	88da      	ldrh	r2, [r3, #6]
 8018626:	893b      	ldrh	r3, [r7, #8]
 8018628:	4293      	cmp	r3, r2
 801862a:	bf28      	it	cs
 801862c:	4613      	movcs	r3, r2
 801862e:	b29b      	uxth	r3, r3
 8018630:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8018632:	893b      	ldrh	r3, [r7, #8]
 8018634:	461a      	mov	r2, r3
 8018636:	68f9      	ldr	r1, [r7, #12]
 8018638:	6878      	ldr	r0, [r7, #4]
 801863a:	f000 fa3f 	bl	8018abc <USBD_CtlSendData>
 801863e:	e009      	b.n	8018654 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8018640:	6839      	ldr	r1, [r7, #0]
 8018642:	6878      	ldr	r0, [r7, #4]
 8018644:	f000 f9c9 	bl	80189da <USBD_CtlError>
 8018648:	e004      	b.n	8018654 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 801864a:	6878      	ldr	r0, [r7, #4]
 801864c:	f000 fa73 	bl	8018b36 <USBD_CtlSendStatus>
 8018650:	e000      	b.n	8018654 <USBD_GetDescriptor+0x320>
    return;
 8018652:	bf00      	nop
    }
  }
}
 8018654:	3710      	adds	r7, #16
 8018656:	46bd      	mov	sp, r7
 8018658:	bd80      	pop	{r7, pc}
 801865a:	bf00      	nop

0801865c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801865c:	b580      	push	{r7, lr}
 801865e:	b084      	sub	sp, #16
 8018660:	af00      	add	r7, sp, #0
 8018662:	6078      	str	r0, [r7, #4]
 8018664:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8018666:	683b      	ldr	r3, [r7, #0]
 8018668:	889b      	ldrh	r3, [r3, #4]
 801866a:	2b00      	cmp	r3, #0
 801866c:	d130      	bne.n	80186d0 <USBD_SetAddress+0x74>
 801866e:	683b      	ldr	r3, [r7, #0]
 8018670:	88db      	ldrh	r3, [r3, #6]
 8018672:	2b00      	cmp	r3, #0
 8018674:	d12c      	bne.n	80186d0 <USBD_SetAddress+0x74>
 8018676:	683b      	ldr	r3, [r7, #0]
 8018678:	885b      	ldrh	r3, [r3, #2]
 801867a:	2b7f      	cmp	r3, #127	; 0x7f
 801867c:	d828      	bhi.n	80186d0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801867e:	683b      	ldr	r3, [r7, #0]
 8018680:	885b      	ldrh	r3, [r3, #2]
 8018682:	b2db      	uxtb	r3, r3
 8018684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018688:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018690:	2b03      	cmp	r3, #3
 8018692:	d104      	bne.n	801869e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8018694:	6839      	ldr	r1, [r7, #0]
 8018696:	6878      	ldr	r0, [r7, #4]
 8018698:	f000 f99f 	bl	80189da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801869c:	e01d      	b.n	80186da <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	7bfa      	ldrb	r2, [r7, #15]
 80186a2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80186a6:	7bfb      	ldrb	r3, [r7, #15]
 80186a8:	4619      	mov	r1, r3
 80186aa:	6878      	ldr	r0, [r7, #4]
 80186ac:	f003 ff43 	bl	801c536 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80186b0:	6878      	ldr	r0, [r7, #4]
 80186b2:	f000 fa40 	bl	8018b36 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80186b6:	7bfb      	ldrb	r3, [r7, #15]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d004      	beq.n	80186c6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	2202      	movs	r2, #2
 80186c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80186c4:	e009      	b.n	80186da <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	2201      	movs	r2, #1
 80186ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80186ce:	e004      	b.n	80186da <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80186d0:	6839      	ldr	r1, [r7, #0]
 80186d2:	6878      	ldr	r0, [r7, #4]
 80186d4:	f000 f981 	bl	80189da <USBD_CtlError>
  }
}
 80186d8:	bf00      	nop
 80186da:	bf00      	nop
 80186dc:	3710      	adds	r7, #16
 80186de:	46bd      	mov	sp, r7
 80186e0:	bd80      	pop	{r7, pc}
	...

080186e4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80186e4:	b580      	push	{r7, lr}
 80186e6:	b084      	sub	sp, #16
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	6078      	str	r0, [r7, #4]
 80186ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80186ee:	2300      	movs	r3, #0
 80186f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80186f2:	683b      	ldr	r3, [r7, #0]
 80186f4:	885b      	ldrh	r3, [r3, #2]
 80186f6:	b2da      	uxtb	r2, r3
 80186f8:	4b4b      	ldr	r3, [pc, #300]	; (8018828 <USBD_SetConfig+0x144>)
 80186fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80186fc:	4b4a      	ldr	r3, [pc, #296]	; (8018828 <USBD_SetConfig+0x144>)
 80186fe:	781b      	ldrb	r3, [r3, #0]
 8018700:	2b01      	cmp	r3, #1
 8018702:	d905      	bls.n	8018710 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8018704:	6839      	ldr	r1, [r7, #0]
 8018706:	6878      	ldr	r0, [r7, #4]
 8018708:	f000 f967 	bl	80189da <USBD_CtlError>
    return USBD_FAIL;
 801870c:	2303      	movs	r3, #3
 801870e:	e087      	b.n	8018820 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018716:	2b02      	cmp	r3, #2
 8018718:	d002      	beq.n	8018720 <USBD_SetConfig+0x3c>
 801871a:	2b03      	cmp	r3, #3
 801871c:	d025      	beq.n	801876a <USBD_SetConfig+0x86>
 801871e:	e071      	b.n	8018804 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8018720:	4b41      	ldr	r3, [pc, #260]	; (8018828 <USBD_SetConfig+0x144>)
 8018722:	781b      	ldrb	r3, [r3, #0]
 8018724:	2b00      	cmp	r3, #0
 8018726:	d01c      	beq.n	8018762 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8018728:	4b3f      	ldr	r3, [pc, #252]	; (8018828 <USBD_SetConfig+0x144>)
 801872a:	781b      	ldrb	r3, [r3, #0]
 801872c:	461a      	mov	r2, r3
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8018732:	4b3d      	ldr	r3, [pc, #244]	; (8018828 <USBD_SetConfig+0x144>)
 8018734:	781b      	ldrb	r3, [r3, #0]
 8018736:	4619      	mov	r1, r3
 8018738:	6878      	ldr	r0, [r7, #4]
 801873a:	f7ff f970 	bl	8017a1e <USBD_SetClassConfig>
 801873e:	4603      	mov	r3, r0
 8018740:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8018742:	7bfb      	ldrb	r3, [r7, #15]
 8018744:	2b00      	cmp	r3, #0
 8018746:	d004      	beq.n	8018752 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8018748:	6839      	ldr	r1, [r7, #0]
 801874a:	6878      	ldr	r0, [r7, #4]
 801874c:	f000 f945 	bl	80189da <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8018750:	e065      	b.n	801881e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8018752:	6878      	ldr	r0, [r7, #4]
 8018754:	f000 f9ef 	bl	8018b36 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	2203      	movs	r2, #3
 801875c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8018760:	e05d      	b.n	801881e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8018762:	6878      	ldr	r0, [r7, #4]
 8018764:	f000 f9e7 	bl	8018b36 <USBD_CtlSendStatus>
    break;
 8018768:	e059      	b.n	801881e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 801876a:	4b2f      	ldr	r3, [pc, #188]	; (8018828 <USBD_SetConfig+0x144>)
 801876c:	781b      	ldrb	r3, [r3, #0]
 801876e:	2b00      	cmp	r3, #0
 8018770:	d112      	bne.n	8018798 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	2202      	movs	r2, #2
 8018776:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 801877a:	4b2b      	ldr	r3, [pc, #172]	; (8018828 <USBD_SetConfig+0x144>)
 801877c:	781b      	ldrb	r3, [r3, #0]
 801877e:	461a      	mov	r2, r3
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018784:	4b28      	ldr	r3, [pc, #160]	; (8018828 <USBD_SetConfig+0x144>)
 8018786:	781b      	ldrb	r3, [r3, #0]
 8018788:	4619      	mov	r1, r3
 801878a:	6878      	ldr	r0, [r7, #4]
 801878c:	f7ff f963 	bl	8017a56 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8018790:	6878      	ldr	r0, [r7, #4]
 8018792:	f000 f9d0 	bl	8018b36 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8018796:	e042      	b.n	801881e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8018798:	4b23      	ldr	r3, [pc, #140]	; (8018828 <USBD_SetConfig+0x144>)
 801879a:	781b      	ldrb	r3, [r3, #0]
 801879c:	461a      	mov	r2, r3
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	685b      	ldr	r3, [r3, #4]
 80187a2:	429a      	cmp	r2, r3
 80187a4:	d02a      	beq.n	80187fc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	685b      	ldr	r3, [r3, #4]
 80187aa:	b2db      	uxtb	r3, r3
 80187ac:	4619      	mov	r1, r3
 80187ae:	6878      	ldr	r0, [r7, #4]
 80187b0:	f7ff f951 	bl	8017a56 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80187b4:	4b1c      	ldr	r3, [pc, #112]	; (8018828 <USBD_SetConfig+0x144>)
 80187b6:	781b      	ldrb	r3, [r3, #0]
 80187b8:	461a      	mov	r2, r3
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80187be:	4b1a      	ldr	r3, [pc, #104]	; (8018828 <USBD_SetConfig+0x144>)
 80187c0:	781b      	ldrb	r3, [r3, #0]
 80187c2:	4619      	mov	r1, r3
 80187c4:	6878      	ldr	r0, [r7, #4]
 80187c6:	f7ff f92a 	bl	8017a1e <USBD_SetClassConfig>
 80187ca:	4603      	mov	r3, r0
 80187cc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80187ce:	7bfb      	ldrb	r3, [r7, #15]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d00f      	beq.n	80187f4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80187d4:	6839      	ldr	r1, [r7, #0]
 80187d6:	6878      	ldr	r0, [r7, #4]
 80187d8:	f000 f8ff 	bl	80189da <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	685b      	ldr	r3, [r3, #4]
 80187e0:	b2db      	uxtb	r3, r3
 80187e2:	4619      	mov	r1, r3
 80187e4:	6878      	ldr	r0, [r7, #4]
 80187e6:	f7ff f936 	bl	8017a56 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	2202      	movs	r2, #2
 80187ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80187f2:	e014      	b.n	801881e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80187f4:	6878      	ldr	r0, [r7, #4]
 80187f6:	f000 f99e 	bl	8018b36 <USBD_CtlSendStatus>
    break;
 80187fa:	e010      	b.n	801881e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80187fc:	6878      	ldr	r0, [r7, #4]
 80187fe:	f000 f99a 	bl	8018b36 <USBD_CtlSendStatus>
    break;
 8018802:	e00c      	b.n	801881e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8018804:	6839      	ldr	r1, [r7, #0]
 8018806:	6878      	ldr	r0, [r7, #4]
 8018808:	f000 f8e7 	bl	80189da <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 801880c:	4b06      	ldr	r3, [pc, #24]	; (8018828 <USBD_SetConfig+0x144>)
 801880e:	781b      	ldrb	r3, [r3, #0]
 8018810:	4619      	mov	r1, r3
 8018812:	6878      	ldr	r0, [r7, #4]
 8018814:	f7ff f91f 	bl	8017a56 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8018818:	2303      	movs	r3, #3
 801881a:	73fb      	strb	r3, [r7, #15]
    break;
 801881c:	bf00      	nop
  }

  return ret;
 801881e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018820:	4618      	mov	r0, r3
 8018822:	3710      	adds	r7, #16
 8018824:	46bd      	mov	sp, r7
 8018826:	bd80      	pop	{r7, pc}
 8018828:	20007554 	.word	0x20007554

0801882c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801882c:	b580      	push	{r7, lr}
 801882e:	b082      	sub	sp, #8
 8018830:	af00      	add	r7, sp, #0
 8018832:	6078      	str	r0, [r7, #4]
 8018834:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8018836:	683b      	ldr	r3, [r7, #0]
 8018838:	88db      	ldrh	r3, [r3, #6]
 801883a:	2b01      	cmp	r3, #1
 801883c:	d004      	beq.n	8018848 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801883e:	6839      	ldr	r1, [r7, #0]
 8018840:	6878      	ldr	r0, [r7, #4]
 8018842:	f000 f8ca 	bl	80189da <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8018846:	e022      	b.n	801888e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801884e:	2b02      	cmp	r3, #2
 8018850:	dc02      	bgt.n	8018858 <USBD_GetConfig+0x2c>
 8018852:	2b00      	cmp	r3, #0
 8018854:	dc03      	bgt.n	801885e <USBD_GetConfig+0x32>
 8018856:	e015      	b.n	8018884 <USBD_GetConfig+0x58>
 8018858:	2b03      	cmp	r3, #3
 801885a:	d00b      	beq.n	8018874 <USBD_GetConfig+0x48>
 801885c:	e012      	b.n	8018884 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	2200      	movs	r2, #0
 8018862:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	3308      	adds	r3, #8
 8018868:	2201      	movs	r2, #1
 801886a:	4619      	mov	r1, r3
 801886c:	6878      	ldr	r0, [r7, #4]
 801886e:	f000 f925 	bl	8018abc <USBD_CtlSendData>
      break;
 8018872:	e00c      	b.n	801888e <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	3304      	adds	r3, #4
 8018878:	2201      	movs	r2, #1
 801887a:	4619      	mov	r1, r3
 801887c:	6878      	ldr	r0, [r7, #4]
 801887e:	f000 f91d 	bl	8018abc <USBD_CtlSendData>
      break;
 8018882:	e004      	b.n	801888e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8018884:	6839      	ldr	r1, [r7, #0]
 8018886:	6878      	ldr	r0, [r7, #4]
 8018888:	f000 f8a7 	bl	80189da <USBD_CtlError>
      break;
 801888c:	bf00      	nop
}
 801888e:	bf00      	nop
 8018890:	3708      	adds	r7, #8
 8018892:	46bd      	mov	sp, r7
 8018894:	bd80      	pop	{r7, pc}

08018896 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018896:	b580      	push	{r7, lr}
 8018898:	b082      	sub	sp, #8
 801889a:	af00      	add	r7, sp, #0
 801889c:	6078      	str	r0, [r7, #4]
 801889e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80188a6:	3b01      	subs	r3, #1
 80188a8:	2b02      	cmp	r3, #2
 80188aa:	d81e      	bhi.n	80188ea <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80188ac:	683b      	ldr	r3, [r7, #0]
 80188ae:	88db      	ldrh	r3, [r3, #6]
 80188b0:	2b02      	cmp	r3, #2
 80188b2:	d004      	beq.n	80188be <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80188b4:	6839      	ldr	r1, [r7, #0]
 80188b6:	6878      	ldr	r0, [r7, #4]
 80188b8:	f000 f88f 	bl	80189da <USBD_CtlError>
      break;
 80188bc:	e01a      	b.n	80188f4 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	2201      	movs	r2, #1
 80188c2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d005      	beq.n	80188da <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	68db      	ldr	r3, [r3, #12]
 80188d2:	f043 0202 	orr.w	r2, r3, #2
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	330c      	adds	r3, #12
 80188de:	2202      	movs	r2, #2
 80188e0:	4619      	mov	r1, r3
 80188e2:	6878      	ldr	r0, [r7, #4]
 80188e4:	f000 f8ea 	bl	8018abc <USBD_CtlSendData>
    break;
 80188e8:	e004      	b.n	80188f4 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80188ea:	6839      	ldr	r1, [r7, #0]
 80188ec:	6878      	ldr	r0, [r7, #4]
 80188ee:	f000 f874 	bl	80189da <USBD_CtlError>
    break;
 80188f2:	bf00      	nop
  }
}
 80188f4:	bf00      	nop
 80188f6:	3708      	adds	r7, #8
 80188f8:	46bd      	mov	sp, r7
 80188fa:	bd80      	pop	{r7, pc}

080188fc <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b082      	sub	sp, #8
 8018900:	af00      	add	r7, sp, #0
 8018902:	6078      	str	r0, [r7, #4]
 8018904:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018906:	683b      	ldr	r3, [r7, #0]
 8018908:	885b      	ldrh	r3, [r3, #2]
 801890a:	2b01      	cmp	r3, #1
 801890c:	d106      	bne.n	801891c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	2201      	movs	r2, #1
 8018912:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8018916:	6878      	ldr	r0, [r7, #4]
 8018918:	f000 f90d 	bl	8018b36 <USBD_CtlSendStatus>
  }
}
 801891c:	bf00      	nop
 801891e:	3708      	adds	r7, #8
 8018920:	46bd      	mov	sp, r7
 8018922:	bd80      	pop	{r7, pc}

08018924 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018924:	b580      	push	{r7, lr}
 8018926:	b082      	sub	sp, #8
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]
 801892c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018934:	3b01      	subs	r3, #1
 8018936:	2b02      	cmp	r3, #2
 8018938:	d80b      	bhi.n	8018952 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801893a:	683b      	ldr	r3, [r7, #0]
 801893c:	885b      	ldrh	r3, [r3, #2]
 801893e:	2b01      	cmp	r3, #1
 8018940:	d10c      	bne.n	801895c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	2200      	movs	r2, #0
 8018946:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801894a:	6878      	ldr	r0, [r7, #4]
 801894c:	f000 f8f3 	bl	8018b36 <USBD_CtlSendStatus>
      }
      break;
 8018950:	e004      	b.n	801895c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8018952:	6839      	ldr	r1, [r7, #0]
 8018954:	6878      	ldr	r0, [r7, #4]
 8018956:	f000 f840 	bl	80189da <USBD_CtlError>
      break;
 801895a:	e000      	b.n	801895e <USBD_ClrFeature+0x3a>
      break;
 801895c:	bf00      	nop
  }
}
 801895e:	bf00      	nop
 8018960:	3708      	adds	r7, #8
 8018962:	46bd      	mov	sp, r7
 8018964:	bd80      	pop	{r7, pc}

08018966 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8018966:	b580      	push	{r7, lr}
 8018968:	b084      	sub	sp, #16
 801896a:	af00      	add	r7, sp, #0
 801896c:	6078      	str	r0, [r7, #4]
 801896e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8018970:	683b      	ldr	r3, [r7, #0]
 8018972:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8018974:	68fb      	ldr	r3, [r7, #12]
 8018976:	781a      	ldrb	r2, [r3, #0]
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	3301      	adds	r3, #1
 8018980:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8018982:	68fb      	ldr	r3, [r7, #12]
 8018984:	781a      	ldrb	r2, [r3, #0]
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801898a:	68fb      	ldr	r3, [r7, #12]
 801898c:	3301      	adds	r3, #1
 801898e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8018990:	68f8      	ldr	r0, [r7, #12]
 8018992:	f7ff fa9d 	bl	8017ed0 <SWAPBYTE>
 8018996:	4603      	mov	r3, r0
 8018998:	461a      	mov	r2, r3
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	3301      	adds	r3, #1
 80189a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	3301      	adds	r3, #1
 80189a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80189aa:	68f8      	ldr	r0, [r7, #12]
 80189ac:	f7ff fa90 	bl	8017ed0 <SWAPBYTE>
 80189b0:	4603      	mov	r3, r0
 80189b2:	461a      	mov	r2, r3
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	3301      	adds	r3, #1
 80189bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80189be:	68fb      	ldr	r3, [r7, #12]
 80189c0:	3301      	adds	r3, #1
 80189c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80189c4:	68f8      	ldr	r0, [r7, #12]
 80189c6:	f7ff fa83 	bl	8017ed0 <SWAPBYTE>
 80189ca:	4603      	mov	r3, r0
 80189cc:	461a      	mov	r2, r3
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	80da      	strh	r2, [r3, #6]
}
 80189d2:	bf00      	nop
 80189d4:	3710      	adds	r7, #16
 80189d6:	46bd      	mov	sp, r7
 80189d8:	bd80      	pop	{r7, pc}

080189da <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80189da:	b580      	push	{r7, lr}
 80189dc:	b082      	sub	sp, #8
 80189de:	af00      	add	r7, sp, #0
 80189e0:	6078      	str	r0, [r7, #4]
 80189e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80189e4:	2180      	movs	r1, #128	; 0x80
 80189e6:	6878      	ldr	r0, [r7, #4]
 80189e8:	f003 fd3b 	bl	801c462 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80189ec:	2100      	movs	r1, #0
 80189ee:	6878      	ldr	r0, [r7, #4]
 80189f0:	f003 fd37 	bl	801c462 <USBD_LL_StallEP>
}
 80189f4:	bf00      	nop
 80189f6:	3708      	adds	r7, #8
 80189f8:	46bd      	mov	sp, r7
 80189fa:	bd80      	pop	{r7, pc}

080189fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80189fc:	b580      	push	{r7, lr}
 80189fe:	b086      	sub	sp, #24
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	60f8      	str	r0, [r7, #12]
 8018a04:	60b9      	str	r1, [r7, #8]
 8018a06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8018a08:	2300      	movs	r3, #0
 8018a0a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8018a0c:	68fb      	ldr	r3, [r7, #12]
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d036      	beq.n	8018a80 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8018a12:	68fb      	ldr	r3, [r7, #12]
 8018a14:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8018a16:	6938      	ldr	r0, [r7, #16]
 8018a18:	f000 f836 	bl	8018a88 <USBD_GetLen>
 8018a1c:	4603      	mov	r3, r0
 8018a1e:	3301      	adds	r3, #1
 8018a20:	b29b      	uxth	r3, r3
 8018a22:	005b      	lsls	r3, r3, #1
 8018a24:	b29a      	uxth	r2, r3
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8018a2a:	7dfb      	ldrb	r3, [r7, #23]
 8018a2c:	68ba      	ldr	r2, [r7, #8]
 8018a2e:	4413      	add	r3, r2
 8018a30:	687a      	ldr	r2, [r7, #4]
 8018a32:	7812      	ldrb	r2, [r2, #0]
 8018a34:	701a      	strb	r2, [r3, #0]
  idx++;
 8018a36:	7dfb      	ldrb	r3, [r7, #23]
 8018a38:	3301      	adds	r3, #1
 8018a3a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8018a3c:	7dfb      	ldrb	r3, [r7, #23]
 8018a3e:	68ba      	ldr	r2, [r7, #8]
 8018a40:	4413      	add	r3, r2
 8018a42:	2203      	movs	r2, #3
 8018a44:	701a      	strb	r2, [r3, #0]
  idx++;
 8018a46:	7dfb      	ldrb	r3, [r7, #23]
 8018a48:	3301      	adds	r3, #1
 8018a4a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8018a4c:	e013      	b.n	8018a76 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8018a4e:	7dfb      	ldrb	r3, [r7, #23]
 8018a50:	68ba      	ldr	r2, [r7, #8]
 8018a52:	4413      	add	r3, r2
 8018a54:	693a      	ldr	r2, [r7, #16]
 8018a56:	7812      	ldrb	r2, [r2, #0]
 8018a58:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8018a5a:	693b      	ldr	r3, [r7, #16]
 8018a5c:	3301      	adds	r3, #1
 8018a5e:	613b      	str	r3, [r7, #16]
    idx++;
 8018a60:	7dfb      	ldrb	r3, [r7, #23]
 8018a62:	3301      	adds	r3, #1
 8018a64:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8018a66:	7dfb      	ldrb	r3, [r7, #23]
 8018a68:	68ba      	ldr	r2, [r7, #8]
 8018a6a:	4413      	add	r3, r2
 8018a6c:	2200      	movs	r2, #0
 8018a6e:	701a      	strb	r2, [r3, #0]
    idx++;
 8018a70:	7dfb      	ldrb	r3, [r7, #23]
 8018a72:	3301      	adds	r3, #1
 8018a74:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8018a76:	693b      	ldr	r3, [r7, #16]
 8018a78:	781b      	ldrb	r3, [r3, #0]
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d1e7      	bne.n	8018a4e <USBD_GetString+0x52>
 8018a7e:	e000      	b.n	8018a82 <USBD_GetString+0x86>
    return;
 8018a80:	bf00      	nop
  }
}
 8018a82:	3718      	adds	r7, #24
 8018a84:	46bd      	mov	sp, r7
 8018a86:	bd80      	pop	{r7, pc}

08018a88 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8018a88:	b480      	push	{r7}
 8018a8a:	b085      	sub	sp, #20
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8018a90:	2300      	movs	r3, #0
 8018a92:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8018a98:	e005      	b.n	8018aa6 <USBD_GetLen+0x1e>
  {
    len++;
 8018a9a:	7bfb      	ldrb	r3, [r7, #15]
 8018a9c:	3301      	adds	r3, #1
 8018a9e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8018aa0:	68bb      	ldr	r3, [r7, #8]
 8018aa2:	3301      	adds	r3, #1
 8018aa4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8018aa6:	68bb      	ldr	r3, [r7, #8]
 8018aa8:	781b      	ldrb	r3, [r3, #0]
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d1f5      	bne.n	8018a9a <USBD_GetLen+0x12>
  }

  return len;
 8018aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8018ab0:	4618      	mov	r0, r3
 8018ab2:	3714      	adds	r7, #20
 8018ab4:	46bd      	mov	sp, r7
 8018ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aba:	4770      	bx	lr

08018abc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b084      	sub	sp, #16
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	60f8      	str	r0, [r7, #12]
 8018ac4:	60b9      	str	r1, [r7, #8]
 8018ac6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	2202      	movs	r2, #2
 8018acc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	687a      	ldr	r2, [r7, #4]
 8018ad4:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8018ad6:	68fb      	ldr	r3, [r7, #12]
 8018ad8:	687a      	ldr	r2, [r7, #4]
 8018ada:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	68ba      	ldr	r2, [r7, #8]
 8018ae0:	2100      	movs	r1, #0
 8018ae2:	68f8      	ldr	r0, [r7, #12]
 8018ae4:	f003 fd46 	bl	801c574 <USBD_LL_Transmit>

  return USBD_OK;
 8018ae8:	2300      	movs	r3, #0
}
 8018aea:	4618      	mov	r0, r3
 8018aec:	3710      	adds	r7, #16
 8018aee:	46bd      	mov	sp, r7
 8018af0:	bd80      	pop	{r7, pc}

08018af2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8018af2:	b580      	push	{r7, lr}
 8018af4:	b084      	sub	sp, #16
 8018af6:	af00      	add	r7, sp, #0
 8018af8:	60f8      	str	r0, [r7, #12]
 8018afa:	60b9      	str	r1, [r7, #8]
 8018afc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	68ba      	ldr	r2, [r7, #8]
 8018b02:	2100      	movs	r1, #0
 8018b04:	68f8      	ldr	r0, [r7, #12]
 8018b06:	f003 fd35 	bl	801c574 <USBD_LL_Transmit>

  return USBD_OK;
 8018b0a:	2300      	movs	r3, #0
}
 8018b0c:	4618      	mov	r0, r3
 8018b0e:	3710      	adds	r7, #16
 8018b10:	46bd      	mov	sp, r7
 8018b12:	bd80      	pop	{r7, pc}

08018b14 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8018b14:	b580      	push	{r7, lr}
 8018b16:	b084      	sub	sp, #16
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	60f8      	str	r0, [r7, #12]
 8018b1c:	60b9      	str	r1, [r7, #8]
 8018b1e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	68ba      	ldr	r2, [r7, #8]
 8018b24:	2100      	movs	r1, #0
 8018b26:	68f8      	ldr	r0, [r7, #12]
 8018b28:	f003 fd45 	bl	801c5b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018b2c:	2300      	movs	r3, #0
}
 8018b2e:	4618      	mov	r0, r3
 8018b30:	3710      	adds	r7, #16
 8018b32:	46bd      	mov	sp, r7
 8018b34:	bd80      	pop	{r7, pc}

08018b36 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8018b36:	b580      	push	{r7, lr}
 8018b38:	b082      	sub	sp, #8
 8018b3a:	af00      	add	r7, sp, #0
 8018b3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	2204      	movs	r2, #4
 8018b42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8018b46:	2300      	movs	r3, #0
 8018b48:	2200      	movs	r2, #0
 8018b4a:	2100      	movs	r1, #0
 8018b4c:	6878      	ldr	r0, [r7, #4]
 8018b4e:	f003 fd11 	bl	801c574 <USBD_LL_Transmit>

  return USBD_OK;
 8018b52:	2300      	movs	r3, #0
}
 8018b54:	4618      	mov	r0, r3
 8018b56:	3708      	adds	r7, #8
 8018b58:	46bd      	mov	sp, r7
 8018b5a:	bd80      	pop	{r7, pc}

08018b5c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8018b5c:	b580      	push	{r7, lr}
 8018b5e:	b082      	sub	sp, #8
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	2205      	movs	r2, #5
 8018b68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018b6c:	2300      	movs	r3, #0
 8018b6e:	2200      	movs	r2, #0
 8018b70:	2100      	movs	r1, #0
 8018b72:	6878      	ldr	r0, [r7, #4]
 8018b74:	f003 fd1f 	bl	801c5b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018b78:	2300      	movs	r3, #0
}
 8018b7a:	4618      	mov	r0, r3
 8018b7c:	3708      	adds	r7, #8
 8018b7e:	46bd      	mov	sp, r7
 8018b80:	bd80      	pop	{r7, pc}
	...

08018b84 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8018b84:	b580      	push	{r7, lr}
 8018b86:	b084      	sub	sp, #16
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	4603      	mov	r3, r0
 8018b8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8018b8e:	79fb      	ldrb	r3, [r7, #7]
 8018b90:	4a08      	ldr	r2, [pc, #32]	; (8018bb4 <disk_status+0x30>)
 8018b92:	009b      	lsls	r3, r3, #2
 8018b94:	4413      	add	r3, r2
 8018b96:	685b      	ldr	r3, [r3, #4]
 8018b98:	685b      	ldr	r3, [r3, #4]
 8018b9a:	79fa      	ldrb	r2, [r7, #7]
 8018b9c:	4905      	ldr	r1, [pc, #20]	; (8018bb4 <disk_status+0x30>)
 8018b9e:	440a      	add	r2, r1
 8018ba0:	7a12      	ldrb	r2, [r2, #8]
 8018ba2:	4610      	mov	r0, r2
 8018ba4:	4798      	blx	r3
 8018ba6:	4603      	mov	r3, r0
 8018ba8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8018baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8018bac:	4618      	mov	r0, r3
 8018bae:	3710      	adds	r7, #16
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	bd80      	pop	{r7, pc}
 8018bb4:	20007580 	.word	0x20007580

08018bb8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b084      	sub	sp, #16
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	4603      	mov	r3, r0
 8018bc0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8018bc2:	2300      	movs	r3, #0
 8018bc4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8018bc6:	79fb      	ldrb	r3, [r7, #7]
 8018bc8:	4a0d      	ldr	r2, [pc, #52]	; (8018c00 <disk_initialize+0x48>)
 8018bca:	5cd3      	ldrb	r3, [r2, r3]
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d111      	bne.n	8018bf4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8018bd0:	79fb      	ldrb	r3, [r7, #7]
 8018bd2:	4a0b      	ldr	r2, [pc, #44]	; (8018c00 <disk_initialize+0x48>)
 8018bd4:	2101      	movs	r1, #1
 8018bd6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8018bd8:	79fb      	ldrb	r3, [r7, #7]
 8018bda:	4a09      	ldr	r2, [pc, #36]	; (8018c00 <disk_initialize+0x48>)
 8018bdc:	009b      	lsls	r3, r3, #2
 8018bde:	4413      	add	r3, r2
 8018be0:	685b      	ldr	r3, [r3, #4]
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	79fa      	ldrb	r2, [r7, #7]
 8018be6:	4906      	ldr	r1, [pc, #24]	; (8018c00 <disk_initialize+0x48>)
 8018be8:	440a      	add	r2, r1
 8018bea:	7a12      	ldrb	r2, [r2, #8]
 8018bec:	4610      	mov	r0, r2
 8018bee:	4798      	blx	r3
 8018bf0:	4603      	mov	r3, r0
 8018bf2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8018bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8018bf6:	4618      	mov	r0, r3
 8018bf8:	3710      	adds	r7, #16
 8018bfa:	46bd      	mov	sp, r7
 8018bfc:	bd80      	pop	{r7, pc}
 8018bfe:	bf00      	nop
 8018c00:	20007580 	.word	0x20007580

08018c04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8018c04:	b590      	push	{r4, r7, lr}
 8018c06:	b087      	sub	sp, #28
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	60b9      	str	r1, [r7, #8]
 8018c0c:	607a      	str	r2, [r7, #4]
 8018c0e:	603b      	str	r3, [r7, #0]
 8018c10:	4603      	mov	r3, r0
 8018c12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8018c14:	7bfb      	ldrb	r3, [r7, #15]
 8018c16:	4a0a      	ldr	r2, [pc, #40]	; (8018c40 <disk_read+0x3c>)
 8018c18:	009b      	lsls	r3, r3, #2
 8018c1a:	4413      	add	r3, r2
 8018c1c:	685b      	ldr	r3, [r3, #4]
 8018c1e:	689c      	ldr	r4, [r3, #8]
 8018c20:	7bfb      	ldrb	r3, [r7, #15]
 8018c22:	4a07      	ldr	r2, [pc, #28]	; (8018c40 <disk_read+0x3c>)
 8018c24:	4413      	add	r3, r2
 8018c26:	7a18      	ldrb	r0, [r3, #8]
 8018c28:	683b      	ldr	r3, [r7, #0]
 8018c2a:	687a      	ldr	r2, [r7, #4]
 8018c2c:	68b9      	ldr	r1, [r7, #8]
 8018c2e:	47a0      	blx	r4
 8018c30:	4603      	mov	r3, r0
 8018c32:	75fb      	strb	r3, [r7, #23]
  return res;
 8018c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8018c36:	4618      	mov	r0, r3
 8018c38:	371c      	adds	r7, #28
 8018c3a:	46bd      	mov	sp, r7
 8018c3c:	bd90      	pop	{r4, r7, pc}
 8018c3e:	bf00      	nop
 8018c40:	20007580 	.word	0x20007580

08018c44 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8018c44:	b590      	push	{r4, r7, lr}
 8018c46:	b087      	sub	sp, #28
 8018c48:	af00      	add	r7, sp, #0
 8018c4a:	60b9      	str	r1, [r7, #8]
 8018c4c:	607a      	str	r2, [r7, #4]
 8018c4e:	603b      	str	r3, [r7, #0]
 8018c50:	4603      	mov	r3, r0
 8018c52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8018c54:	7bfb      	ldrb	r3, [r7, #15]
 8018c56:	4a0a      	ldr	r2, [pc, #40]	; (8018c80 <disk_write+0x3c>)
 8018c58:	009b      	lsls	r3, r3, #2
 8018c5a:	4413      	add	r3, r2
 8018c5c:	685b      	ldr	r3, [r3, #4]
 8018c5e:	68dc      	ldr	r4, [r3, #12]
 8018c60:	7bfb      	ldrb	r3, [r7, #15]
 8018c62:	4a07      	ldr	r2, [pc, #28]	; (8018c80 <disk_write+0x3c>)
 8018c64:	4413      	add	r3, r2
 8018c66:	7a18      	ldrb	r0, [r3, #8]
 8018c68:	683b      	ldr	r3, [r7, #0]
 8018c6a:	687a      	ldr	r2, [r7, #4]
 8018c6c:	68b9      	ldr	r1, [r7, #8]
 8018c6e:	47a0      	blx	r4
 8018c70:	4603      	mov	r3, r0
 8018c72:	75fb      	strb	r3, [r7, #23]
  return res;
 8018c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8018c76:	4618      	mov	r0, r3
 8018c78:	371c      	adds	r7, #28
 8018c7a:	46bd      	mov	sp, r7
 8018c7c:	bd90      	pop	{r4, r7, pc}
 8018c7e:	bf00      	nop
 8018c80:	20007580 	.word	0x20007580

08018c84 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8018c84:	b580      	push	{r7, lr}
 8018c86:	b084      	sub	sp, #16
 8018c88:	af00      	add	r7, sp, #0
 8018c8a:	4603      	mov	r3, r0
 8018c8c:	603a      	str	r2, [r7, #0]
 8018c8e:	71fb      	strb	r3, [r7, #7]
 8018c90:	460b      	mov	r3, r1
 8018c92:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8018c94:	79fb      	ldrb	r3, [r7, #7]
 8018c96:	4a09      	ldr	r2, [pc, #36]	; (8018cbc <disk_ioctl+0x38>)
 8018c98:	009b      	lsls	r3, r3, #2
 8018c9a:	4413      	add	r3, r2
 8018c9c:	685b      	ldr	r3, [r3, #4]
 8018c9e:	691b      	ldr	r3, [r3, #16]
 8018ca0:	79fa      	ldrb	r2, [r7, #7]
 8018ca2:	4906      	ldr	r1, [pc, #24]	; (8018cbc <disk_ioctl+0x38>)
 8018ca4:	440a      	add	r2, r1
 8018ca6:	7a10      	ldrb	r0, [r2, #8]
 8018ca8:	79b9      	ldrb	r1, [r7, #6]
 8018caa:	683a      	ldr	r2, [r7, #0]
 8018cac:	4798      	blx	r3
 8018cae:	4603      	mov	r3, r0
 8018cb0:	73fb      	strb	r3, [r7, #15]
  return res;
 8018cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8018cb4:	4618      	mov	r0, r3
 8018cb6:	3710      	adds	r7, #16
 8018cb8:	46bd      	mov	sp, r7
 8018cba:	bd80      	pop	{r7, pc}
 8018cbc:	20007580 	.word	0x20007580

08018cc0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8018cc0:	b480      	push	{r7}
 8018cc2:	b085      	sub	sp, #20
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	3301      	adds	r3, #1
 8018ccc:	781b      	ldrb	r3, [r3, #0]
 8018cce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8018cd0:	89fb      	ldrh	r3, [r7, #14]
 8018cd2:	021b      	lsls	r3, r3, #8
 8018cd4:	b21a      	sxth	r2, r3
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	781b      	ldrb	r3, [r3, #0]
 8018cda:	b21b      	sxth	r3, r3
 8018cdc:	4313      	orrs	r3, r2
 8018cde:	b21b      	sxth	r3, r3
 8018ce0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8018ce2:	89fb      	ldrh	r3, [r7, #14]
}
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	3714      	adds	r7, #20
 8018ce8:	46bd      	mov	sp, r7
 8018cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cee:	4770      	bx	lr

08018cf0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8018cf0:	b480      	push	{r7}
 8018cf2:	b085      	sub	sp, #20
 8018cf4:	af00      	add	r7, sp, #0
 8018cf6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	3303      	adds	r3, #3
 8018cfc:	781b      	ldrb	r3, [r3, #0]
 8018cfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	021b      	lsls	r3, r3, #8
 8018d04:	687a      	ldr	r2, [r7, #4]
 8018d06:	3202      	adds	r2, #2
 8018d08:	7812      	ldrb	r2, [r2, #0]
 8018d0a:	4313      	orrs	r3, r2
 8018d0c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	021b      	lsls	r3, r3, #8
 8018d12:	687a      	ldr	r2, [r7, #4]
 8018d14:	3201      	adds	r2, #1
 8018d16:	7812      	ldrb	r2, [r2, #0]
 8018d18:	4313      	orrs	r3, r2
 8018d1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8018d1c:	68fb      	ldr	r3, [r7, #12]
 8018d1e:	021b      	lsls	r3, r3, #8
 8018d20:	687a      	ldr	r2, [r7, #4]
 8018d22:	7812      	ldrb	r2, [r2, #0]
 8018d24:	4313      	orrs	r3, r2
 8018d26:	60fb      	str	r3, [r7, #12]
	return rv;
 8018d28:	68fb      	ldr	r3, [r7, #12]
}
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	3714      	adds	r7, #20
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d34:	4770      	bx	lr

08018d36 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8018d36:	b480      	push	{r7}
 8018d38:	b083      	sub	sp, #12
 8018d3a:	af00      	add	r7, sp, #0
 8018d3c:	6078      	str	r0, [r7, #4]
 8018d3e:	460b      	mov	r3, r1
 8018d40:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	1c5a      	adds	r2, r3, #1
 8018d46:	607a      	str	r2, [r7, #4]
 8018d48:	887a      	ldrh	r2, [r7, #2]
 8018d4a:	b2d2      	uxtb	r2, r2
 8018d4c:	701a      	strb	r2, [r3, #0]
 8018d4e:	887b      	ldrh	r3, [r7, #2]
 8018d50:	0a1b      	lsrs	r3, r3, #8
 8018d52:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	1c5a      	adds	r2, r3, #1
 8018d58:	607a      	str	r2, [r7, #4]
 8018d5a:	887a      	ldrh	r2, [r7, #2]
 8018d5c:	b2d2      	uxtb	r2, r2
 8018d5e:	701a      	strb	r2, [r3, #0]
}
 8018d60:	bf00      	nop
 8018d62:	370c      	adds	r7, #12
 8018d64:	46bd      	mov	sp, r7
 8018d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d6a:	4770      	bx	lr

08018d6c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8018d6c:	b480      	push	{r7}
 8018d6e:	b083      	sub	sp, #12
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	6078      	str	r0, [r7, #4]
 8018d74:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	1c5a      	adds	r2, r3, #1
 8018d7a:	607a      	str	r2, [r7, #4]
 8018d7c:	683a      	ldr	r2, [r7, #0]
 8018d7e:	b2d2      	uxtb	r2, r2
 8018d80:	701a      	strb	r2, [r3, #0]
 8018d82:	683b      	ldr	r3, [r7, #0]
 8018d84:	0a1b      	lsrs	r3, r3, #8
 8018d86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	1c5a      	adds	r2, r3, #1
 8018d8c:	607a      	str	r2, [r7, #4]
 8018d8e:	683a      	ldr	r2, [r7, #0]
 8018d90:	b2d2      	uxtb	r2, r2
 8018d92:	701a      	strb	r2, [r3, #0]
 8018d94:	683b      	ldr	r3, [r7, #0]
 8018d96:	0a1b      	lsrs	r3, r3, #8
 8018d98:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	1c5a      	adds	r2, r3, #1
 8018d9e:	607a      	str	r2, [r7, #4]
 8018da0:	683a      	ldr	r2, [r7, #0]
 8018da2:	b2d2      	uxtb	r2, r2
 8018da4:	701a      	strb	r2, [r3, #0]
 8018da6:	683b      	ldr	r3, [r7, #0]
 8018da8:	0a1b      	lsrs	r3, r3, #8
 8018daa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	1c5a      	adds	r2, r3, #1
 8018db0:	607a      	str	r2, [r7, #4]
 8018db2:	683a      	ldr	r2, [r7, #0]
 8018db4:	b2d2      	uxtb	r2, r2
 8018db6:	701a      	strb	r2, [r3, #0]
}
 8018db8:	bf00      	nop
 8018dba:	370c      	adds	r7, #12
 8018dbc:	46bd      	mov	sp, r7
 8018dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dc2:	4770      	bx	lr

08018dc4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8018dc4:	b480      	push	{r7}
 8018dc6:	b087      	sub	sp, #28
 8018dc8:	af00      	add	r7, sp, #0
 8018dca:	60f8      	str	r0, [r7, #12]
 8018dcc:	60b9      	str	r1, [r7, #8]
 8018dce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8018dd4:	68bb      	ldr	r3, [r7, #8]
 8018dd6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d00d      	beq.n	8018dfa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8018dde:	693a      	ldr	r2, [r7, #16]
 8018de0:	1c53      	adds	r3, r2, #1
 8018de2:	613b      	str	r3, [r7, #16]
 8018de4:	697b      	ldr	r3, [r7, #20]
 8018de6:	1c59      	adds	r1, r3, #1
 8018de8:	6179      	str	r1, [r7, #20]
 8018dea:	7812      	ldrb	r2, [r2, #0]
 8018dec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	3b01      	subs	r3, #1
 8018df2:	607b      	str	r3, [r7, #4]
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d1f1      	bne.n	8018dde <mem_cpy+0x1a>
	}
}
 8018dfa:	bf00      	nop
 8018dfc:	371c      	adds	r7, #28
 8018dfe:	46bd      	mov	sp, r7
 8018e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e04:	4770      	bx	lr

08018e06 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8018e06:	b480      	push	{r7}
 8018e08:	b087      	sub	sp, #28
 8018e0a:	af00      	add	r7, sp, #0
 8018e0c:	60f8      	str	r0, [r7, #12]
 8018e0e:	60b9      	str	r1, [r7, #8]
 8018e10:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8018e12:	68fb      	ldr	r3, [r7, #12]
 8018e14:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8018e16:	697b      	ldr	r3, [r7, #20]
 8018e18:	1c5a      	adds	r2, r3, #1
 8018e1a:	617a      	str	r2, [r7, #20]
 8018e1c:	68ba      	ldr	r2, [r7, #8]
 8018e1e:	b2d2      	uxtb	r2, r2
 8018e20:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	3b01      	subs	r3, #1
 8018e26:	607b      	str	r3, [r7, #4]
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d1f3      	bne.n	8018e16 <mem_set+0x10>
}
 8018e2e:	bf00      	nop
 8018e30:	bf00      	nop
 8018e32:	371c      	adds	r7, #28
 8018e34:	46bd      	mov	sp, r7
 8018e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e3a:	4770      	bx	lr

08018e3c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8018e3c:	b480      	push	{r7}
 8018e3e:	b089      	sub	sp, #36	; 0x24
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	60f8      	str	r0, [r7, #12]
 8018e44:	60b9      	str	r1, [r7, #8]
 8018e46:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	61fb      	str	r3, [r7, #28]
 8018e4c:	68bb      	ldr	r3, [r7, #8]
 8018e4e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8018e50:	2300      	movs	r3, #0
 8018e52:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8018e54:	69fb      	ldr	r3, [r7, #28]
 8018e56:	1c5a      	adds	r2, r3, #1
 8018e58:	61fa      	str	r2, [r7, #28]
 8018e5a:	781b      	ldrb	r3, [r3, #0]
 8018e5c:	4619      	mov	r1, r3
 8018e5e:	69bb      	ldr	r3, [r7, #24]
 8018e60:	1c5a      	adds	r2, r3, #1
 8018e62:	61ba      	str	r2, [r7, #24]
 8018e64:	781b      	ldrb	r3, [r3, #0]
 8018e66:	1acb      	subs	r3, r1, r3
 8018e68:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	3b01      	subs	r3, #1
 8018e6e:	607b      	str	r3, [r7, #4]
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d002      	beq.n	8018e7c <mem_cmp+0x40>
 8018e76:	697b      	ldr	r3, [r7, #20]
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d0eb      	beq.n	8018e54 <mem_cmp+0x18>

	return r;
 8018e7c:	697b      	ldr	r3, [r7, #20]
}
 8018e7e:	4618      	mov	r0, r3
 8018e80:	3724      	adds	r7, #36	; 0x24
 8018e82:	46bd      	mov	sp, r7
 8018e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e88:	4770      	bx	lr

08018e8a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8018e8a:	b480      	push	{r7}
 8018e8c:	b083      	sub	sp, #12
 8018e8e:	af00      	add	r7, sp, #0
 8018e90:	6078      	str	r0, [r7, #4]
 8018e92:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8018e94:	e002      	b.n	8018e9c <chk_chr+0x12>
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	3301      	adds	r3, #1
 8018e9a:	607b      	str	r3, [r7, #4]
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	781b      	ldrb	r3, [r3, #0]
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d005      	beq.n	8018eb0 <chk_chr+0x26>
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	781b      	ldrb	r3, [r3, #0]
 8018ea8:	461a      	mov	r2, r3
 8018eaa:	683b      	ldr	r3, [r7, #0]
 8018eac:	4293      	cmp	r3, r2
 8018eae:	d1f2      	bne.n	8018e96 <chk_chr+0xc>
	return *str;
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	781b      	ldrb	r3, [r3, #0]
}
 8018eb4:	4618      	mov	r0, r3
 8018eb6:	370c      	adds	r7, #12
 8018eb8:	46bd      	mov	sp, r7
 8018eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ebe:	4770      	bx	lr

08018ec0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8018ec0:	b480      	push	{r7}
 8018ec2:	b085      	sub	sp, #20
 8018ec4:	af00      	add	r7, sp, #0
 8018ec6:	6078      	str	r0, [r7, #4]
 8018ec8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8018eca:	2300      	movs	r3, #0
 8018ecc:	60bb      	str	r3, [r7, #8]
 8018ece:	68bb      	ldr	r3, [r7, #8]
 8018ed0:	60fb      	str	r3, [r7, #12]
 8018ed2:	e029      	b.n	8018f28 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8018ed4:	4a27      	ldr	r2, [pc, #156]	; (8018f74 <chk_lock+0xb4>)
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	011b      	lsls	r3, r3, #4
 8018eda:	4413      	add	r3, r2
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d01d      	beq.n	8018f1e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8018ee2:	4a24      	ldr	r2, [pc, #144]	; (8018f74 <chk_lock+0xb4>)
 8018ee4:	68fb      	ldr	r3, [r7, #12]
 8018ee6:	011b      	lsls	r3, r3, #4
 8018ee8:	4413      	add	r3, r2
 8018eea:	681a      	ldr	r2, [r3, #0]
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	429a      	cmp	r2, r3
 8018ef2:	d116      	bne.n	8018f22 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8018ef4:	4a1f      	ldr	r2, [pc, #124]	; (8018f74 <chk_lock+0xb4>)
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	011b      	lsls	r3, r3, #4
 8018efa:	4413      	add	r3, r2
 8018efc:	3304      	adds	r3, #4
 8018efe:	681a      	ldr	r2, [r3, #0]
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8018f04:	429a      	cmp	r2, r3
 8018f06:	d10c      	bne.n	8018f22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8018f08:	4a1a      	ldr	r2, [pc, #104]	; (8018f74 <chk_lock+0xb4>)
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	011b      	lsls	r3, r3, #4
 8018f0e:	4413      	add	r3, r2
 8018f10:	3308      	adds	r3, #8
 8018f12:	681a      	ldr	r2, [r3, #0]
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8018f18:	429a      	cmp	r2, r3
 8018f1a:	d102      	bne.n	8018f22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8018f1c:	e007      	b.n	8018f2e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8018f1e:	2301      	movs	r3, #1
 8018f20:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	3301      	adds	r3, #1
 8018f26:	60fb      	str	r3, [r7, #12]
 8018f28:	68fb      	ldr	r3, [r7, #12]
 8018f2a:	2b01      	cmp	r3, #1
 8018f2c:	d9d2      	bls.n	8018ed4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	2b02      	cmp	r3, #2
 8018f32:	d109      	bne.n	8018f48 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8018f34:	68bb      	ldr	r3, [r7, #8]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d102      	bne.n	8018f40 <chk_lock+0x80>
 8018f3a:	683b      	ldr	r3, [r7, #0]
 8018f3c:	2b02      	cmp	r3, #2
 8018f3e:	d101      	bne.n	8018f44 <chk_lock+0x84>
 8018f40:	2300      	movs	r3, #0
 8018f42:	e010      	b.n	8018f66 <chk_lock+0xa6>
 8018f44:	2312      	movs	r3, #18
 8018f46:	e00e      	b.n	8018f66 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8018f48:	683b      	ldr	r3, [r7, #0]
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d108      	bne.n	8018f60 <chk_lock+0xa0>
 8018f4e:	4a09      	ldr	r2, [pc, #36]	; (8018f74 <chk_lock+0xb4>)
 8018f50:	68fb      	ldr	r3, [r7, #12]
 8018f52:	011b      	lsls	r3, r3, #4
 8018f54:	4413      	add	r3, r2
 8018f56:	330c      	adds	r3, #12
 8018f58:	881b      	ldrh	r3, [r3, #0]
 8018f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018f5e:	d101      	bne.n	8018f64 <chk_lock+0xa4>
 8018f60:	2310      	movs	r3, #16
 8018f62:	e000      	b.n	8018f66 <chk_lock+0xa6>
 8018f64:	2300      	movs	r3, #0
}
 8018f66:	4618      	mov	r0, r3
 8018f68:	3714      	adds	r7, #20
 8018f6a:	46bd      	mov	sp, r7
 8018f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f70:	4770      	bx	lr
 8018f72:	bf00      	nop
 8018f74:	20007560 	.word	0x20007560

08018f78 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8018f78:	b480      	push	{r7}
 8018f7a:	b083      	sub	sp, #12
 8018f7c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8018f7e:	2300      	movs	r3, #0
 8018f80:	607b      	str	r3, [r7, #4]
 8018f82:	e002      	b.n	8018f8a <enq_lock+0x12>
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	3301      	adds	r3, #1
 8018f88:	607b      	str	r3, [r7, #4]
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	2b01      	cmp	r3, #1
 8018f8e:	d806      	bhi.n	8018f9e <enq_lock+0x26>
 8018f90:	4a09      	ldr	r2, [pc, #36]	; (8018fb8 <enq_lock+0x40>)
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	011b      	lsls	r3, r3, #4
 8018f96:	4413      	add	r3, r2
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d1f2      	bne.n	8018f84 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	2b02      	cmp	r3, #2
 8018fa2:	bf14      	ite	ne
 8018fa4:	2301      	movne	r3, #1
 8018fa6:	2300      	moveq	r3, #0
 8018fa8:	b2db      	uxtb	r3, r3
}
 8018faa:	4618      	mov	r0, r3
 8018fac:	370c      	adds	r7, #12
 8018fae:	46bd      	mov	sp, r7
 8018fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fb4:	4770      	bx	lr
 8018fb6:	bf00      	nop
 8018fb8:	20007560 	.word	0x20007560

08018fbc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8018fbc:	b480      	push	{r7}
 8018fbe:	b085      	sub	sp, #20
 8018fc0:	af00      	add	r7, sp, #0
 8018fc2:	6078      	str	r0, [r7, #4]
 8018fc4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8018fc6:	2300      	movs	r3, #0
 8018fc8:	60fb      	str	r3, [r7, #12]
 8018fca:	e01f      	b.n	801900c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8018fcc:	4a41      	ldr	r2, [pc, #260]	; (80190d4 <inc_lock+0x118>)
 8018fce:	68fb      	ldr	r3, [r7, #12]
 8018fd0:	011b      	lsls	r3, r3, #4
 8018fd2:	4413      	add	r3, r2
 8018fd4:	681a      	ldr	r2, [r3, #0]
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	429a      	cmp	r2, r3
 8018fdc:	d113      	bne.n	8019006 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8018fde:	4a3d      	ldr	r2, [pc, #244]	; (80190d4 <inc_lock+0x118>)
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	011b      	lsls	r3, r3, #4
 8018fe4:	4413      	add	r3, r2
 8018fe6:	3304      	adds	r3, #4
 8018fe8:	681a      	ldr	r2, [r3, #0]
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8018fee:	429a      	cmp	r2, r3
 8018ff0:	d109      	bne.n	8019006 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8018ff2:	4a38      	ldr	r2, [pc, #224]	; (80190d4 <inc_lock+0x118>)
 8018ff4:	68fb      	ldr	r3, [r7, #12]
 8018ff6:	011b      	lsls	r3, r3, #4
 8018ff8:	4413      	add	r3, r2
 8018ffa:	3308      	adds	r3, #8
 8018ffc:	681a      	ldr	r2, [r3, #0]
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8019002:	429a      	cmp	r2, r3
 8019004:	d006      	beq.n	8019014 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8019006:	68fb      	ldr	r3, [r7, #12]
 8019008:	3301      	adds	r3, #1
 801900a:	60fb      	str	r3, [r7, #12]
 801900c:	68fb      	ldr	r3, [r7, #12]
 801900e:	2b01      	cmp	r3, #1
 8019010:	d9dc      	bls.n	8018fcc <inc_lock+0x10>
 8019012:	e000      	b.n	8019016 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8019014:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	2b02      	cmp	r3, #2
 801901a:	d132      	bne.n	8019082 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801901c:	2300      	movs	r3, #0
 801901e:	60fb      	str	r3, [r7, #12]
 8019020:	e002      	b.n	8019028 <inc_lock+0x6c>
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	3301      	adds	r3, #1
 8019026:	60fb      	str	r3, [r7, #12]
 8019028:	68fb      	ldr	r3, [r7, #12]
 801902a:	2b01      	cmp	r3, #1
 801902c:	d806      	bhi.n	801903c <inc_lock+0x80>
 801902e:	4a29      	ldr	r2, [pc, #164]	; (80190d4 <inc_lock+0x118>)
 8019030:	68fb      	ldr	r3, [r7, #12]
 8019032:	011b      	lsls	r3, r3, #4
 8019034:	4413      	add	r3, r2
 8019036:	681b      	ldr	r3, [r3, #0]
 8019038:	2b00      	cmp	r3, #0
 801903a:	d1f2      	bne.n	8019022 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801903c:	68fb      	ldr	r3, [r7, #12]
 801903e:	2b02      	cmp	r3, #2
 8019040:	d101      	bne.n	8019046 <inc_lock+0x8a>
 8019042:	2300      	movs	r3, #0
 8019044:	e040      	b.n	80190c8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	681a      	ldr	r2, [r3, #0]
 801904a:	4922      	ldr	r1, [pc, #136]	; (80190d4 <inc_lock+0x118>)
 801904c:	68fb      	ldr	r3, [r7, #12]
 801904e:	011b      	lsls	r3, r3, #4
 8019050:	440b      	add	r3, r1
 8019052:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	689a      	ldr	r2, [r3, #8]
 8019058:	491e      	ldr	r1, [pc, #120]	; (80190d4 <inc_lock+0x118>)
 801905a:	68fb      	ldr	r3, [r7, #12]
 801905c:	011b      	lsls	r3, r3, #4
 801905e:	440b      	add	r3, r1
 8019060:	3304      	adds	r3, #4
 8019062:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	695a      	ldr	r2, [r3, #20]
 8019068:	491a      	ldr	r1, [pc, #104]	; (80190d4 <inc_lock+0x118>)
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	011b      	lsls	r3, r3, #4
 801906e:	440b      	add	r3, r1
 8019070:	3308      	adds	r3, #8
 8019072:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8019074:	4a17      	ldr	r2, [pc, #92]	; (80190d4 <inc_lock+0x118>)
 8019076:	68fb      	ldr	r3, [r7, #12]
 8019078:	011b      	lsls	r3, r3, #4
 801907a:	4413      	add	r3, r2
 801907c:	330c      	adds	r3, #12
 801907e:	2200      	movs	r2, #0
 8019080:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8019082:	683b      	ldr	r3, [r7, #0]
 8019084:	2b00      	cmp	r3, #0
 8019086:	d009      	beq.n	801909c <inc_lock+0xe0>
 8019088:	4a12      	ldr	r2, [pc, #72]	; (80190d4 <inc_lock+0x118>)
 801908a:	68fb      	ldr	r3, [r7, #12]
 801908c:	011b      	lsls	r3, r3, #4
 801908e:	4413      	add	r3, r2
 8019090:	330c      	adds	r3, #12
 8019092:	881b      	ldrh	r3, [r3, #0]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d001      	beq.n	801909c <inc_lock+0xe0>
 8019098:	2300      	movs	r3, #0
 801909a:	e015      	b.n	80190c8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801909c:	683b      	ldr	r3, [r7, #0]
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d108      	bne.n	80190b4 <inc_lock+0xf8>
 80190a2:	4a0c      	ldr	r2, [pc, #48]	; (80190d4 <inc_lock+0x118>)
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	011b      	lsls	r3, r3, #4
 80190a8:	4413      	add	r3, r2
 80190aa:	330c      	adds	r3, #12
 80190ac:	881b      	ldrh	r3, [r3, #0]
 80190ae:	3301      	adds	r3, #1
 80190b0:	b29a      	uxth	r2, r3
 80190b2:	e001      	b.n	80190b8 <inc_lock+0xfc>
 80190b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80190b8:	4906      	ldr	r1, [pc, #24]	; (80190d4 <inc_lock+0x118>)
 80190ba:	68fb      	ldr	r3, [r7, #12]
 80190bc:	011b      	lsls	r3, r3, #4
 80190be:	440b      	add	r3, r1
 80190c0:	330c      	adds	r3, #12
 80190c2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80190c4:	68fb      	ldr	r3, [r7, #12]
 80190c6:	3301      	adds	r3, #1
}
 80190c8:	4618      	mov	r0, r3
 80190ca:	3714      	adds	r7, #20
 80190cc:	46bd      	mov	sp, r7
 80190ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190d2:	4770      	bx	lr
 80190d4:	20007560 	.word	0x20007560

080190d8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80190d8:	b480      	push	{r7}
 80190da:	b085      	sub	sp, #20
 80190dc:	af00      	add	r7, sp, #0
 80190de:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	3b01      	subs	r3, #1
 80190e4:	607b      	str	r3, [r7, #4]
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	2b01      	cmp	r3, #1
 80190ea:	d825      	bhi.n	8019138 <dec_lock+0x60>
		n = Files[i].ctr;
 80190ec:	4a17      	ldr	r2, [pc, #92]	; (801914c <dec_lock+0x74>)
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	011b      	lsls	r3, r3, #4
 80190f2:	4413      	add	r3, r2
 80190f4:	330c      	adds	r3, #12
 80190f6:	881b      	ldrh	r3, [r3, #0]
 80190f8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80190fa:	89fb      	ldrh	r3, [r7, #14]
 80190fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019100:	d101      	bne.n	8019106 <dec_lock+0x2e>
 8019102:	2300      	movs	r3, #0
 8019104:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8019106:	89fb      	ldrh	r3, [r7, #14]
 8019108:	2b00      	cmp	r3, #0
 801910a:	d002      	beq.n	8019112 <dec_lock+0x3a>
 801910c:	89fb      	ldrh	r3, [r7, #14]
 801910e:	3b01      	subs	r3, #1
 8019110:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8019112:	4a0e      	ldr	r2, [pc, #56]	; (801914c <dec_lock+0x74>)
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	011b      	lsls	r3, r3, #4
 8019118:	4413      	add	r3, r2
 801911a:	330c      	adds	r3, #12
 801911c:	89fa      	ldrh	r2, [r7, #14]
 801911e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8019120:	89fb      	ldrh	r3, [r7, #14]
 8019122:	2b00      	cmp	r3, #0
 8019124:	d105      	bne.n	8019132 <dec_lock+0x5a>
 8019126:	4a09      	ldr	r2, [pc, #36]	; (801914c <dec_lock+0x74>)
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	011b      	lsls	r3, r3, #4
 801912c:	4413      	add	r3, r2
 801912e:	2200      	movs	r2, #0
 8019130:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8019132:	2300      	movs	r3, #0
 8019134:	737b      	strb	r3, [r7, #13]
 8019136:	e001      	b.n	801913c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8019138:	2302      	movs	r3, #2
 801913a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801913c:	7b7b      	ldrb	r3, [r7, #13]
}
 801913e:	4618      	mov	r0, r3
 8019140:	3714      	adds	r7, #20
 8019142:	46bd      	mov	sp, r7
 8019144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019148:	4770      	bx	lr
 801914a:	bf00      	nop
 801914c:	20007560 	.word	0x20007560

08019150 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8019150:	b480      	push	{r7}
 8019152:	b085      	sub	sp, #20
 8019154:	af00      	add	r7, sp, #0
 8019156:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8019158:	2300      	movs	r3, #0
 801915a:	60fb      	str	r3, [r7, #12]
 801915c:	e010      	b.n	8019180 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801915e:	4a0d      	ldr	r2, [pc, #52]	; (8019194 <clear_lock+0x44>)
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	011b      	lsls	r3, r3, #4
 8019164:	4413      	add	r3, r2
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	687a      	ldr	r2, [r7, #4]
 801916a:	429a      	cmp	r2, r3
 801916c:	d105      	bne.n	801917a <clear_lock+0x2a>
 801916e:	4a09      	ldr	r2, [pc, #36]	; (8019194 <clear_lock+0x44>)
 8019170:	68fb      	ldr	r3, [r7, #12]
 8019172:	011b      	lsls	r3, r3, #4
 8019174:	4413      	add	r3, r2
 8019176:	2200      	movs	r2, #0
 8019178:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801917a:	68fb      	ldr	r3, [r7, #12]
 801917c:	3301      	adds	r3, #1
 801917e:	60fb      	str	r3, [r7, #12]
 8019180:	68fb      	ldr	r3, [r7, #12]
 8019182:	2b01      	cmp	r3, #1
 8019184:	d9eb      	bls.n	801915e <clear_lock+0xe>
	}
}
 8019186:	bf00      	nop
 8019188:	bf00      	nop
 801918a:	3714      	adds	r7, #20
 801918c:	46bd      	mov	sp, r7
 801918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019192:	4770      	bx	lr
 8019194:	20007560 	.word	0x20007560

08019198 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8019198:	b580      	push	{r7, lr}
 801919a:	b086      	sub	sp, #24
 801919c:	af00      	add	r7, sp, #0
 801919e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80191a0:	2300      	movs	r3, #0
 80191a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	78db      	ldrb	r3, [r3, #3]
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d034      	beq.n	8019216 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80191b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	7858      	ldrb	r0, [r3, #1]
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80191bc:	2301      	movs	r3, #1
 80191be:	697a      	ldr	r2, [r7, #20]
 80191c0:	f7ff fd40 	bl	8018c44 <disk_write>
 80191c4:	4603      	mov	r3, r0
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d002      	beq.n	80191d0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80191ca:	2301      	movs	r3, #1
 80191cc:	73fb      	strb	r3, [r7, #15]
 80191ce:	e022      	b.n	8019216 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	2200      	movs	r2, #0
 80191d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191da:	697a      	ldr	r2, [r7, #20]
 80191dc:	1ad2      	subs	r2, r2, r3
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	6a1b      	ldr	r3, [r3, #32]
 80191e2:	429a      	cmp	r2, r3
 80191e4:	d217      	bcs.n	8019216 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	789b      	ldrb	r3, [r3, #2]
 80191ea:	613b      	str	r3, [r7, #16]
 80191ec:	e010      	b.n	8019210 <sync_window+0x78>
					wsect += fs->fsize;
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	6a1b      	ldr	r3, [r3, #32]
 80191f2:	697a      	ldr	r2, [r7, #20]
 80191f4:	4413      	add	r3, r2
 80191f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	7858      	ldrb	r0, [r3, #1]
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8019202:	2301      	movs	r3, #1
 8019204:	697a      	ldr	r2, [r7, #20]
 8019206:	f7ff fd1d 	bl	8018c44 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801920a:	693b      	ldr	r3, [r7, #16]
 801920c:	3b01      	subs	r3, #1
 801920e:	613b      	str	r3, [r7, #16]
 8019210:	693b      	ldr	r3, [r7, #16]
 8019212:	2b01      	cmp	r3, #1
 8019214:	d8eb      	bhi.n	80191ee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8019216:	7bfb      	ldrb	r3, [r7, #15]
}
 8019218:	4618      	mov	r0, r3
 801921a:	3718      	adds	r7, #24
 801921c:	46bd      	mov	sp, r7
 801921e:	bd80      	pop	{r7, pc}

08019220 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8019220:	b580      	push	{r7, lr}
 8019222:	b084      	sub	sp, #16
 8019224:	af00      	add	r7, sp, #0
 8019226:	6078      	str	r0, [r7, #4]
 8019228:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801922a:	2300      	movs	r3, #0
 801922c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019232:	683a      	ldr	r2, [r7, #0]
 8019234:	429a      	cmp	r2, r3
 8019236:	d01b      	beq.n	8019270 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8019238:	6878      	ldr	r0, [r7, #4]
 801923a:	f7ff ffad 	bl	8019198 <sync_window>
 801923e:	4603      	mov	r3, r0
 8019240:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8019242:	7bfb      	ldrb	r3, [r7, #15]
 8019244:	2b00      	cmp	r3, #0
 8019246:	d113      	bne.n	8019270 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	7858      	ldrb	r0, [r3, #1]
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8019252:	2301      	movs	r3, #1
 8019254:	683a      	ldr	r2, [r7, #0]
 8019256:	f7ff fcd5 	bl	8018c04 <disk_read>
 801925a:	4603      	mov	r3, r0
 801925c:	2b00      	cmp	r3, #0
 801925e:	d004      	beq.n	801926a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8019260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019264:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8019266:	2301      	movs	r3, #1
 8019268:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	683a      	ldr	r2, [r7, #0]
 801926e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8019270:	7bfb      	ldrb	r3, [r7, #15]
}
 8019272:	4618      	mov	r0, r3
 8019274:	3710      	adds	r7, #16
 8019276:	46bd      	mov	sp, r7
 8019278:	bd80      	pop	{r7, pc}
	...

0801927c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801927c:	b580      	push	{r7, lr}
 801927e:	b084      	sub	sp, #16
 8019280:	af00      	add	r7, sp, #0
 8019282:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8019284:	6878      	ldr	r0, [r7, #4]
 8019286:	f7ff ff87 	bl	8019198 <sync_window>
 801928a:	4603      	mov	r3, r0
 801928c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801928e:	7bfb      	ldrb	r3, [r7, #15]
 8019290:	2b00      	cmp	r3, #0
 8019292:	d159      	bne.n	8019348 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	781b      	ldrb	r3, [r3, #0]
 8019298:	2b03      	cmp	r3, #3
 801929a:	d149      	bne.n	8019330 <sync_fs+0xb4>
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	791b      	ldrb	r3, [r3, #4]
 80192a0:	2b01      	cmp	r3, #1
 80192a2:	d145      	bne.n	8019330 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	899b      	ldrh	r3, [r3, #12]
 80192ae:	461a      	mov	r2, r3
 80192b0:	2100      	movs	r1, #0
 80192b2:	f7ff fda8 	bl	8018e06 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	3338      	adds	r3, #56	; 0x38
 80192ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80192be:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80192c2:	4618      	mov	r0, r3
 80192c4:	f7ff fd37 	bl	8018d36 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	3338      	adds	r3, #56	; 0x38
 80192cc:	4921      	ldr	r1, [pc, #132]	; (8019354 <sync_fs+0xd8>)
 80192ce:	4618      	mov	r0, r3
 80192d0:	f7ff fd4c 	bl	8018d6c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	3338      	adds	r3, #56	; 0x38
 80192d8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80192dc:	491e      	ldr	r1, [pc, #120]	; (8019358 <sync_fs+0xdc>)
 80192de:	4618      	mov	r0, r3
 80192e0:	f7ff fd44 	bl	8018d6c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	3338      	adds	r3, #56	; 0x38
 80192e8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	699b      	ldr	r3, [r3, #24]
 80192f0:	4619      	mov	r1, r3
 80192f2:	4610      	mov	r0, r2
 80192f4:	f7ff fd3a 	bl	8018d6c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	3338      	adds	r3, #56	; 0x38
 80192fc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	695b      	ldr	r3, [r3, #20]
 8019304:	4619      	mov	r1, r3
 8019306:	4610      	mov	r0, r2
 8019308:	f7ff fd30 	bl	8018d6c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019310:	1c5a      	adds	r2, r3, #1
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	7858      	ldrb	r0, [r3, #1]
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019324:	2301      	movs	r3, #1
 8019326:	f7ff fc8d 	bl	8018c44 <disk_write>
			fs->fsi_flag = 0;
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	2200      	movs	r2, #0
 801932e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	785b      	ldrb	r3, [r3, #1]
 8019334:	2200      	movs	r2, #0
 8019336:	2100      	movs	r1, #0
 8019338:	4618      	mov	r0, r3
 801933a:	f7ff fca3 	bl	8018c84 <disk_ioctl>
 801933e:	4603      	mov	r3, r0
 8019340:	2b00      	cmp	r3, #0
 8019342:	d001      	beq.n	8019348 <sync_fs+0xcc>
 8019344:	2301      	movs	r3, #1
 8019346:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8019348:	7bfb      	ldrb	r3, [r7, #15]
}
 801934a:	4618      	mov	r0, r3
 801934c:	3710      	adds	r7, #16
 801934e:	46bd      	mov	sp, r7
 8019350:	bd80      	pop	{r7, pc}
 8019352:	bf00      	nop
 8019354:	41615252 	.word	0x41615252
 8019358:	61417272 	.word	0x61417272

0801935c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801935c:	b480      	push	{r7}
 801935e:	b083      	sub	sp, #12
 8019360:	af00      	add	r7, sp, #0
 8019362:	6078      	str	r0, [r7, #4]
 8019364:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8019366:	683b      	ldr	r3, [r7, #0]
 8019368:	3b02      	subs	r3, #2
 801936a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	69db      	ldr	r3, [r3, #28]
 8019370:	3b02      	subs	r3, #2
 8019372:	683a      	ldr	r2, [r7, #0]
 8019374:	429a      	cmp	r2, r3
 8019376:	d301      	bcc.n	801937c <clust2sect+0x20>
 8019378:	2300      	movs	r3, #0
 801937a:	e008      	b.n	801938e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	895b      	ldrh	r3, [r3, #10]
 8019380:	461a      	mov	r2, r3
 8019382:	683b      	ldr	r3, [r7, #0]
 8019384:	fb03 f202 	mul.w	r2, r3, r2
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801938c:	4413      	add	r3, r2
}
 801938e:	4618      	mov	r0, r3
 8019390:	370c      	adds	r7, #12
 8019392:	46bd      	mov	sp, r7
 8019394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019398:	4770      	bx	lr

0801939a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801939a:	b580      	push	{r7, lr}
 801939c:	b086      	sub	sp, #24
 801939e:	af00      	add	r7, sp, #0
 80193a0:	6078      	str	r0, [r7, #4]
 80193a2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80193aa:	683b      	ldr	r3, [r7, #0]
 80193ac:	2b01      	cmp	r3, #1
 80193ae:	d904      	bls.n	80193ba <get_fat+0x20>
 80193b0:	693b      	ldr	r3, [r7, #16]
 80193b2:	69db      	ldr	r3, [r3, #28]
 80193b4:	683a      	ldr	r2, [r7, #0]
 80193b6:	429a      	cmp	r2, r3
 80193b8:	d302      	bcc.n	80193c0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80193ba:	2301      	movs	r3, #1
 80193bc:	617b      	str	r3, [r7, #20]
 80193be:	e0bb      	b.n	8019538 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80193c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80193c4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80193c6:	693b      	ldr	r3, [r7, #16]
 80193c8:	781b      	ldrb	r3, [r3, #0]
 80193ca:	2b03      	cmp	r3, #3
 80193cc:	f000 8083 	beq.w	80194d6 <get_fat+0x13c>
 80193d0:	2b03      	cmp	r3, #3
 80193d2:	f300 80a7 	bgt.w	8019524 <get_fat+0x18a>
 80193d6:	2b01      	cmp	r3, #1
 80193d8:	d002      	beq.n	80193e0 <get_fat+0x46>
 80193da:	2b02      	cmp	r3, #2
 80193dc:	d056      	beq.n	801948c <get_fat+0xf2>
 80193de:	e0a1      	b.n	8019524 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80193e0:	683b      	ldr	r3, [r7, #0]
 80193e2:	60fb      	str	r3, [r7, #12]
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	085b      	lsrs	r3, r3, #1
 80193e8:	68fa      	ldr	r2, [r7, #12]
 80193ea:	4413      	add	r3, r2
 80193ec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80193ee:	693b      	ldr	r3, [r7, #16]
 80193f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80193f2:	693b      	ldr	r3, [r7, #16]
 80193f4:	899b      	ldrh	r3, [r3, #12]
 80193f6:	4619      	mov	r1, r3
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80193fe:	4413      	add	r3, r2
 8019400:	4619      	mov	r1, r3
 8019402:	6938      	ldr	r0, [r7, #16]
 8019404:	f7ff ff0c 	bl	8019220 <move_window>
 8019408:	4603      	mov	r3, r0
 801940a:	2b00      	cmp	r3, #0
 801940c:	f040 808d 	bne.w	801952a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	1c5a      	adds	r2, r3, #1
 8019414:	60fa      	str	r2, [r7, #12]
 8019416:	693a      	ldr	r2, [r7, #16]
 8019418:	8992      	ldrh	r2, [r2, #12]
 801941a:	fbb3 f1f2 	udiv	r1, r3, r2
 801941e:	fb01 f202 	mul.w	r2, r1, r2
 8019422:	1a9b      	subs	r3, r3, r2
 8019424:	693a      	ldr	r2, [r7, #16]
 8019426:	4413      	add	r3, r2
 8019428:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801942c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801942e:	693b      	ldr	r3, [r7, #16]
 8019430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019432:	693b      	ldr	r3, [r7, #16]
 8019434:	899b      	ldrh	r3, [r3, #12]
 8019436:	4619      	mov	r1, r3
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	fbb3 f3f1 	udiv	r3, r3, r1
 801943e:	4413      	add	r3, r2
 8019440:	4619      	mov	r1, r3
 8019442:	6938      	ldr	r0, [r7, #16]
 8019444:	f7ff feec 	bl	8019220 <move_window>
 8019448:	4603      	mov	r3, r0
 801944a:	2b00      	cmp	r3, #0
 801944c:	d16f      	bne.n	801952e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 801944e:	693b      	ldr	r3, [r7, #16]
 8019450:	899b      	ldrh	r3, [r3, #12]
 8019452:	461a      	mov	r2, r3
 8019454:	68fb      	ldr	r3, [r7, #12]
 8019456:	fbb3 f1f2 	udiv	r1, r3, r2
 801945a:	fb01 f202 	mul.w	r2, r1, r2
 801945e:	1a9b      	subs	r3, r3, r2
 8019460:	693a      	ldr	r2, [r7, #16]
 8019462:	4413      	add	r3, r2
 8019464:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019468:	021b      	lsls	r3, r3, #8
 801946a:	461a      	mov	r2, r3
 801946c:	68bb      	ldr	r3, [r7, #8]
 801946e:	4313      	orrs	r3, r2
 8019470:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8019472:	683b      	ldr	r3, [r7, #0]
 8019474:	f003 0301 	and.w	r3, r3, #1
 8019478:	2b00      	cmp	r3, #0
 801947a:	d002      	beq.n	8019482 <get_fat+0xe8>
 801947c:	68bb      	ldr	r3, [r7, #8]
 801947e:	091b      	lsrs	r3, r3, #4
 8019480:	e002      	b.n	8019488 <get_fat+0xee>
 8019482:	68bb      	ldr	r3, [r7, #8]
 8019484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019488:	617b      	str	r3, [r7, #20]
			break;
 801948a:	e055      	b.n	8019538 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801948c:	693b      	ldr	r3, [r7, #16]
 801948e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019490:	693b      	ldr	r3, [r7, #16]
 8019492:	899b      	ldrh	r3, [r3, #12]
 8019494:	085b      	lsrs	r3, r3, #1
 8019496:	b29b      	uxth	r3, r3
 8019498:	4619      	mov	r1, r3
 801949a:	683b      	ldr	r3, [r7, #0]
 801949c:	fbb3 f3f1 	udiv	r3, r3, r1
 80194a0:	4413      	add	r3, r2
 80194a2:	4619      	mov	r1, r3
 80194a4:	6938      	ldr	r0, [r7, #16]
 80194a6:	f7ff febb 	bl	8019220 <move_window>
 80194aa:	4603      	mov	r3, r0
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d140      	bne.n	8019532 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80194b0:	693b      	ldr	r3, [r7, #16]
 80194b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80194b6:	683b      	ldr	r3, [r7, #0]
 80194b8:	005b      	lsls	r3, r3, #1
 80194ba:	693a      	ldr	r2, [r7, #16]
 80194bc:	8992      	ldrh	r2, [r2, #12]
 80194be:	fbb3 f0f2 	udiv	r0, r3, r2
 80194c2:	fb00 f202 	mul.w	r2, r0, r2
 80194c6:	1a9b      	subs	r3, r3, r2
 80194c8:	440b      	add	r3, r1
 80194ca:	4618      	mov	r0, r3
 80194cc:	f7ff fbf8 	bl	8018cc0 <ld_word>
 80194d0:	4603      	mov	r3, r0
 80194d2:	617b      	str	r3, [r7, #20]
			break;
 80194d4:	e030      	b.n	8019538 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80194d6:	693b      	ldr	r3, [r7, #16]
 80194d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80194da:	693b      	ldr	r3, [r7, #16]
 80194dc:	899b      	ldrh	r3, [r3, #12]
 80194de:	089b      	lsrs	r3, r3, #2
 80194e0:	b29b      	uxth	r3, r3
 80194e2:	4619      	mov	r1, r3
 80194e4:	683b      	ldr	r3, [r7, #0]
 80194e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80194ea:	4413      	add	r3, r2
 80194ec:	4619      	mov	r1, r3
 80194ee:	6938      	ldr	r0, [r7, #16]
 80194f0:	f7ff fe96 	bl	8019220 <move_window>
 80194f4:	4603      	mov	r3, r0
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d11d      	bne.n	8019536 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80194fa:	693b      	ldr	r3, [r7, #16]
 80194fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8019500:	683b      	ldr	r3, [r7, #0]
 8019502:	009b      	lsls	r3, r3, #2
 8019504:	693a      	ldr	r2, [r7, #16]
 8019506:	8992      	ldrh	r2, [r2, #12]
 8019508:	fbb3 f0f2 	udiv	r0, r3, r2
 801950c:	fb00 f202 	mul.w	r2, r0, r2
 8019510:	1a9b      	subs	r3, r3, r2
 8019512:	440b      	add	r3, r1
 8019514:	4618      	mov	r0, r3
 8019516:	f7ff fbeb 	bl	8018cf0 <ld_dword>
 801951a:	4603      	mov	r3, r0
 801951c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8019520:	617b      	str	r3, [r7, #20]
			break;
 8019522:	e009      	b.n	8019538 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8019524:	2301      	movs	r3, #1
 8019526:	617b      	str	r3, [r7, #20]
 8019528:	e006      	b.n	8019538 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801952a:	bf00      	nop
 801952c:	e004      	b.n	8019538 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801952e:	bf00      	nop
 8019530:	e002      	b.n	8019538 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019532:	bf00      	nop
 8019534:	e000      	b.n	8019538 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019536:	bf00      	nop
		}
	}

	return val;
 8019538:	697b      	ldr	r3, [r7, #20]
}
 801953a:	4618      	mov	r0, r3
 801953c:	3718      	adds	r7, #24
 801953e:	46bd      	mov	sp, r7
 8019540:	bd80      	pop	{r7, pc}

08019542 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8019542:	b590      	push	{r4, r7, lr}
 8019544:	b089      	sub	sp, #36	; 0x24
 8019546:	af00      	add	r7, sp, #0
 8019548:	60f8      	str	r0, [r7, #12]
 801954a:	60b9      	str	r1, [r7, #8]
 801954c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801954e:	2302      	movs	r3, #2
 8019550:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8019552:	68bb      	ldr	r3, [r7, #8]
 8019554:	2b01      	cmp	r3, #1
 8019556:	f240 8102 	bls.w	801975e <put_fat+0x21c>
 801955a:	68fb      	ldr	r3, [r7, #12]
 801955c:	69db      	ldr	r3, [r3, #28]
 801955e:	68ba      	ldr	r2, [r7, #8]
 8019560:	429a      	cmp	r2, r3
 8019562:	f080 80fc 	bcs.w	801975e <put_fat+0x21c>
		switch (fs->fs_type) {
 8019566:	68fb      	ldr	r3, [r7, #12]
 8019568:	781b      	ldrb	r3, [r3, #0]
 801956a:	2b03      	cmp	r3, #3
 801956c:	f000 80b6 	beq.w	80196dc <put_fat+0x19a>
 8019570:	2b03      	cmp	r3, #3
 8019572:	f300 80fd 	bgt.w	8019770 <put_fat+0x22e>
 8019576:	2b01      	cmp	r3, #1
 8019578:	d003      	beq.n	8019582 <put_fat+0x40>
 801957a:	2b02      	cmp	r3, #2
 801957c:	f000 8083 	beq.w	8019686 <put_fat+0x144>
 8019580:	e0f6      	b.n	8019770 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8019582:	68bb      	ldr	r3, [r7, #8]
 8019584:	61bb      	str	r3, [r7, #24]
 8019586:	69bb      	ldr	r3, [r7, #24]
 8019588:	085b      	lsrs	r3, r3, #1
 801958a:	69ba      	ldr	r2, [r7, #24]
 801958c:	4413      	add	r3, r2
 801958e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019594:	68fb      	ldr	r3, [r7, #12]
 8019596:	899b      	ldrh	r3, [r3, #12]
 8019598:	4619      	mov	r1, r3
 801959a:	69bb      	ldr	r3, [r7, #24]
 801959c:	fbb3 f3f1 	udiv	r3, r3, r1
 80195a0:	4413      	add	r3, r2
 80195a2:	4619      	mov	r1, r3
 80195a4:	68f8      	ldr	r0, [r7, #12]
 80195a6:	f7ff fe3b 	bl	8019220 <move_window>
 80195aa:	4603      	mov	r3, r0
 80195ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80195ae:	7ffb      	ldrb	r3, [r7, #31]
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	f040 80d6 	bne.w	8019762 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80195bc:	69bb      	ldr	r3, [r7, #24]
 80195be:	1c5a      	adds	r2, r3, #1
 80195c0:	61ba      	str	r2, [r7, #24]
 80195c2:	68fa      	ldr	r2, [r7, #12]
 80195c4:	8992      	ldrh	r2, [r2, #12]
 80195c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80195ca:	fb00 f202 	mul.w	r2, r0, r2
 80195ce:	1a9b      	subs	r3, r3, r2
 80195d0:	440b      	add	r3, r1
 80195d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80195d4:	68bb      	ldr	r3, [r7, #8]
 80195d6:	f003 0301 	and.w	r3, r3, #1
 80195da:	2b00      	cmp	r3, #0
 80195dc:	d00d      	beq.n	80195fa <put_fat+0xb8>
 80195de:	697b      	ldr	r3, [r7, #20]
 80195e0:	781b      	ldrb	r3, [r3, #0]
 80195e2:	b25b      	sxtb	r3, r3
 80195e4:	f003 030f 	and.w	r3, r3, #15
 80195e8:	b25a      	sxtb	r2, r3
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	b2db      	uxtb	r3, r3
 80195ee:	011b      	lsls	r3, r3, #4
 80195f0:	b25b      	sxtb	r3, r3
 80195f2:	4313      	orrs	r3, r2
 80195f4:	b25b      	sxtb	r3, r3
 80195f6:	b2db      	uxtb	r3, r3
 80195f8:	e001      	b.n	80195fe <put_fat+0xbc>
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	b2db      	uxtb	r3, r3
 80195fe:	697a      	ldr	r2, [r7, #20]
 8019600:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	2201      	movs	r2, #1
 8019606:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	899b      	ldrh	r3, [r3, #12]
 8019610:	4619      	mov	r1, r3
 8019612:	69bb      	ldr	r3, [r7, #24]
 8019614:	fbb3 f3f1 	udiv	r3, r3, r1
 8019618:	4413      	add	r3, r2
 801961a:	4619      	mov	r1, r3
 801961c:	68f8      	ldr	r0, [r7, #12]
 801961e:	f7ff fdff 	bl	8019220 <move_window>
 8019622:	4603      	mov	r3, r0
 8019624:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019626:	7ffb      	ldrb	r3, [r7, #31]
 8019628:	2b00      	cmp	r3, #0
 801962a:	f040 809c 	bne.w	8019766 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8019634:	68fb      	ldr	r3, [r7, #12]
 8019636:	899b      	ldrh	r3, [r3, #12]
 8019638:	461a      	mov	r2, r3
 801963a:	69bb      	ldr	r3, [r7, #24]
 801963c:	fbb3 f0f2 	udiv	r0, r3, r2
 8019640:	fb00 f202 	mul.w	r2, r0, r2
 8019644:	1a9b      	subs	r3, r3, r2
 8019646:	440b      	add	r3, r1
 8019648:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801964a:	68bb      	ldr	r3, [r7, #8]
 801964c:	f003 0301 	and.w	r3, r3, #1
 8019650:	2b00      	cmp	r3, #0
 8019652:	d003      	beq.n	801965c <put_fat+0x11a>
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	091b      	lsrs	r3, r3, #4
 8019658:	b2db      	uxtb	r3, r3
 801965a:	e00e      	b.n	801967a <put_fat+0x138>
 801965c:	697b      	ldr	r3, [r7, #20]
 801965e:	781b      	ldrb	r3, [r3, #0]
 8019660:	b25b      	sxtb	r3, r3
 8019662:	f023 030f 	bic.w	r3, r3, #15
 8019666:	b25a      	sxtb	r2, r3
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	0a1b      	lsrs	r3, r3, #8
 801966c:	b25b      	sxtb	r3, r3
 801966e:	f003 030f 	and.w	r3, r3, #15
 8019672:	b25b      	sxtb	r3, r3
 8019674:	4313      	orrs	r3, r2
 8019676:	b25b      	sxtb	r3, r3
 8019678:	b2db      	uxtb	r3, r3
 801967a:	697a      	ldr	r2, [r7, #20]
 801967c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801967e:	68fb      	ldr	r3, [r7, #12]
 8019680:	2201      	movs	r2, #1
 8019682:	70da      	strb	r2, [r3, #3]
			break;
 8019684:	e074      	b.n	8019770 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801968a:	68fb      	ldr	r3, [r7, #12]
 801968c:	899b      	ldrh	r3, [r3, #12]
 801968e:	085b      	lsrs	r3, r3, #1
 8019690:	b29b      	uxth	r3, r3
 8019692:	4619      	mov	r1, r3
 8019694:	68bb      	ldr	r3, [r7, #8]
 8019696:	fbb3 f3f1 	udiv	r3, r3, r1
 801969a:	4413      	add	r3, r2
 801969c:	4619      	mov	r1, r3
 801969e:	68f8      	ldr	r0, [r7, #12]
 80196a0:	f7ff fdbe 	bl	8019220 <move_window>
 80196a4:	4603      	mov	r3, r0
 80196a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80196a8:	7ffb      	ldrb	r3, [r7, #31]
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d15d      	bne.n	801976a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80196b4:	68bb      	ldr	r3, [r7, #8]
 80196b6:	005b      	lsls	r3, r3, #1
 80196b8:	68fa      	ldr	r2, [r7, #12]
 80196ba:	8992      	ldrh	r2, [r2, #12]
 80196bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80196c0:	fb00 f202 	mul.w	r2, r0, r2
 80196c4:	1a9b      	subs	r3, r3, r2
 80196c6:	440b      	add	r3, r1
 80196c8:	687a      	ldr	r2, [r7, #4]
 80196ca:	b292      	uxth	r2, r2
 80196cc:	4611      	mov	r1, r2
 80196ce:	4618      	mov	r0, r3
 80196d0:	f7ff fb31 	bl	8018d36 <st_word>
			fs->wflag = 1;
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	2201      	movs	r2, #1
 80196d8:	70da      	strb	r2, [r3, #3]
			break;
 80196da:	e049      	b.n	8019770 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	899b      	ldrh	r3, [r3, #12]
 80196e4:	089b      	lsrs	r3, r3, #2
 80196e6:	b29b      	uxth	r3, r3
 80196e8:	4619      	mov	r1, r3
 80196ea:	68bb      	ldr	r3, [r7, #8]
 80196ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80196f0:	4413      	add	r3, r2
 80196f2:	4619      	mov	r1, r3
 80196f4:	68f8      	ldr	r0, [r7, #12]
 80196f6:	f7ff fd93 	bl	8019220 <move_window>
 80196fa:	4603      	mov	r3, r0
 80196fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80196fe:	7ffb      	ldrb	r3, [r7, #31]
 8019700:	2b00      	cmp	r3, #0
 8019702:	d134      	bne.n	801976e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8019710:	68bb      	ldr	r3, [r7, #8]
 8019712:	009b      	lsls	r3, r3, #2
 8019714:	68fa      	ldr	r2, [r7, #12]
 8019716:	8992      	ldrh	r2, [r2, #12]
 8019718:	fbb3 f0f2 	udiv	r0, r3, r2
 801971c:	fb00 f202 	mul.w	r2, r0, r2
 8019720:	1a9b      	subs	r3, r3, r2
 8019722:	440b      	add	r3, r1
 8019724:	4618      	mov	r0, r3
 8019726:	f7ff fae3 	bl	8018cf0 <ld_dword>
 801972a:	4603      	mov	r3, r0
 801972c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8019730:	4323      	orrs	r3, r4
 8019732:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801973a:	68bb      	ldr	r3, [r7, #8]
 801973c:	009b      	lsls	r3, r3, #2
 801973e:	68fa      	ldr	r2, [r7, #12]
 8019740:	8992      	ldrh	r2, [r2, #12]
 8019742:	fbb3 f0f2 	udiv	r0, r3, r2
 8019746:	fb00 f202 	mul.w	r2, r0, r2
 801974a:	1a9b      	subs	r3, r3, r2
 801974c:	440b      	add	r3, r1
 801974e:	6879      	ldr	r1, [r7, #4]
 8019750:	4618      	mov	r0, r3
 8019752:	f7ff fb0b 	bl	8018d6c <st_dword>
			fs->wflag = 1;
 8019756:	68fb      	ldr	r3, [r7, #12]
 8019758:	2201      	movs	r2, #1
 801975a:	70da      	strb	r2, [r3, #3]
			break;
 801975c:	e008      	b.n	8019770 <put_fat+0x22e>
		}
	}
 801975e:	bf00      	nop
 8019760:	e006      	b.n	8019770 <put_fat+0x22e>
			if (res != FR_OK) break;
 8019762:	bf00      	nop
 8019764:	e004      	b.n	8019770 <put_fat+0x22e>
			if (res != FR_OK) break;
 8019766:	bf00      	nop
 8019768:	e002      	b.n	8019770 <put_fat+0x22e>
			if (res != FR_OK) break;
 801976a:	bf00      	nop
 801976c:	e000      	b.n	8019770 <put_fat+0x22e>
			if (res != FR_OK) break;
 801976e:	bf00      	nop
	return res;
 8019770:	7ffb      	ldrb	r3, [r7, #31]
}
 8019772:	4618      	mov	r0, r3
 8019774:	3724      	adds	r7, #36	; 0x24
 8019776:	46bd      	mov	sp, r7
 8019778:	bd90      	pop	{r4, r7, pc}

0801977a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801977a:	b580      	push	{r7, lr}
 801977c:	b088      	sub	sp, #32
 801977e:	af00      	add	r7, sp, #0
 8019780:	60f8      	str	r0, [r7, #12]
 8019782:	60b9      	str	r1, [r7, #8]
 8019784:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8019786:	2300      	movs	r3, #0
 8019788:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801978a:	68fb      	ldr	r3, [r7, #12]
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8019790:	68bb      	ldr	r3, [r7, #8]
 8019792:	2b01      	cmp	r3, #1
 8019794:	d904      	bls.n	80197a0 <remove_chain+0x26>
 8019796:	69bb      	ldr	r3, [r7, #24]
 8019798:	69db      	ldr	r3, [r3, #28]
 801979a:	68ba      	ldr	r2, [r7, #8]
 801979c:	429a      	cmp	r2, r3
 801979e:	d301      	bcc.n	80197a4 <remove_chain+0x2a>
 80197a0:	2302      	movs	r3, #2
 80197a2:	e04b      	b.n	801983c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d00c      	beq.n	80197c4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80197aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80197ae:	6879      	ldr	r1, [r7, #4]
 80197b0:	69b8      	ldr	r0, [r7, #24]
 80197b2:	f7ff fec6 	bl	8019542 <put_fat>
 80197b6:	4603      	mov	r3, r0
 80197b8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80197ba:	7ffb      	ldrb	r3, [r7, #31]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d001      	beq.n	80197c4 <remove_chain+0x4a>
 80197c0:	7ffb      	ldrb	r3, [r7, #31]
 80197c2:	e03b      	b.n	801983c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80197c4:	68b9      	ldr	r1, [r7, #8]
 80197c6:	68f8      	ldr	r0, [r7, #12]
 80197c8:	f7ff fde7 	bl	801939a <get_fat>
 80197cc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80197ce:	697b      	ldr	r3, [r7, #20]
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d031      	beq.n	8019838 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80197d4:	697b      	ldr	r3, [r7, #20]
 80197d6:	2b01      	cmp	r3, #1
 80197d8:	d101      	bne.n	80197de <remove_chain+0x64>
 80197da:	2302      	movs	r3, #2
 80197dc:	e02e      	b.n	801983c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80197de:	697b      	ldr	r3, [r7, #20]
 80197e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80197e4:	d101      	bne.n	80197ea <remove_chain+0x70>
 80197e6:	2301      	movs	r3, #1
 80197e8:	e028      	b.n	801983c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80197ea:	2200      	movs	r2, #0
 80197ec:	68b9      	ldr	r1, [r7, #8]
 80197ee:	69b8      	ldr	r0, [r7, #24]
 80197f0:	f7ff fea7 	bl	8019542 <put_fat>
 80197f4:	4603      	mov	r3, r0
 80197f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80197f8:	7ffb      	ldrb	r3, [r7, #31]
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d001      	beq.n	8019802 <remove_chain+0x88>
 80197fe:	7ffb      	ldrb	r3, [r7, #31]
 8019800:	e01c      	b.n	801983c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8019802:	69bb      	ldr	r3, [r7, #24]
 8019804:	699a      	ldr	r2, [r3, #24]
 8019806:	69bb      	ldr	r3, [r7, #24]
 8019808:	69db      	ldr	r3, [r3, #28]
 801980a:	3b02      	subs	r3, #2
 801980c:	429a      	cmp	r2, r3
 801980e:	d20b      	bcs.n	8019828 <remove_chain+0xae>
			fs->free_clst++;
 8019810:	69bb      	ldr	r3, [r7, #24]
 8019812:	699b      	ldr	r3, [r3, #24]
 8019814:	1c5a      	adds	r2, r3, #1
 8019816:	69bb      	ldr	r3, [r7, #24]
 8019818:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801981a:	69bb      	ldr	r3, [r7, #24]
 801981c:	791b      	ldrb	r3, [r3, #4]
 801981e:	f043 0301 	orr.w	r3, r3, #1
 8019822:	b2da      	uxtb	r2, r3
 8019824:	69bb      	ldr	r3, [r7, #24]
 8019826:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8019828:	697b      	ldr	r3, [r7, #20]
 801982a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801982c:	69bb      	ldr	r3, [r7, #24]
 801982e:	69db      	ldr	r3, [r3, #28]
 8019830:	68ba      	ldr	r2, [r7, #8]
 8019832:	429a      	cmp	r2, r3
 8019834:	d3c6      	bcc.n	80197c4 <remove_chain+0x4a>
 8019836:	e000      	b.n	801983a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8019838:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801983a:	2300      	movs	r3, #0
}
 801983c:	4618      	mov	r0, r3
 801983e:	3720      	adds	r7, #32
 8019840:	46bd      	mov	sp, r7
 8019842:	bd80      	pop	{r7, pc}

08019844 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8019844:	b580      	push	{r7, lr}
 8019846:	b088      	sub	sp, #32
 8019848:	af00      	add	r7, sp, #0
 801984a:	6078      	str	r0, [r7, #4]
 801984c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	681b      	ldr	r3, [r3, #0]
 8019852:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8019854:	683b      	ldr	r3, [r7, #0]
 8019856:	2b00      	cmp	r3, #0
 8019858:	d10d      	bne.n	8019876 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801985a:	693b      	ldr	r3, [r7, #16]
 801985c:	695b      	ldr	r3, [r3, #20]
 801985e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8019860:	69bb      	ldr	r3, [r7, #24]
 8019862:	2b00      	cmp	r3, #0
 8019864:	d004      	beq.n	8019870 <create_chain+0x2c>
 8019866:	693b      	ldr	r3, [r7, #16]
 8019868:	69db      	ldr	r3, [r3, #28]
 801986a:	69ba      	ldr	r2, [r7, #24]
 801986c:	429a      	cmp	r2, r3
 801986e:	d31b      	bcc.n	80198a8 <create_chain+0x64>
 8019870:	2301      	movs	r3, #1
 8019872:	61bb      	str	r3, [r7, #24]
 8019874:	e018      	b.n	80198a8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8019876:	6839      	ldr	r1, [r7, #0]
 8019878:	6878      	ldr	r0, [r7, #4]
 801987a:	f7ff fd8e 	bl	801939a <get_fat>
 801987e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	2b01      	cmp	r3, #1
 8019884:	d801      	bhi.n	801988a <create_chain+0x46>
 8019886:	2301      	movs	r3, #1
 8019888:	e070      	b.n	801996c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019890:	d101      	bne.n	8019896 <create_chain+0x52>
 8019892:	68fb      	ldr	r3, [r7, #12]
 8019894:	e06a      	b.n	801996c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8019896:	693b      	ldr	r3, [r7, #16]
 8019898:	69db      	ldr	r3, [r3, #28]
 801989a:	68fa      	ldr	r2, [r7, #12]
 801989c:	429a      	cmp	r2, r3
 801989e:	d201      	bcs.n	80198a4 <create_chain+0x60>
 80198a0:	68fb      	ldr	r3, [r7, #12]
 80198a2:	e063      	b.n	801996c <create_chain+0x128>
		scl = clst;
 80198a4:	683b      	ldr	r3, [r7, #0]
 80198a6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80198a8:	69bb      	ldr	r3, [r7, #24]
 80198aa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80198ac:	69fb      	ldr	r3, [r7, #28]
 80198ae:	3301      	adds	r3, #1
 80198b0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80198b2:	693b      	ldr	r3, [r7, #16]
 80198b4:	69db      	ldr	r3, [r3, #28]
 80198b6:	69fa      	ldr	r2, [r7, #28]
 80198b8:	429a      	cmp	r2, r3
 80198ba:	d307      	bcc.n	80198cc <create_chain+0x88>
				ncl = 2;
 80198bc:	2302      	movs	r3, #2
 80198be:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80198c0:	69fa      	ldr	r2, [r7, #28]
 80198c2:	69bb      	ldr	r3, [r7, #24]
 80198c4:	429a      	cmp	r2, r3
 80198c6:	d901      	bls.n	80198cc <create_chain+0x88>
 80198c8:	2300      	movs	r3, #0
 80198ca:	e04f      	b.n	801996c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80198cc:	69f9      	ldr	r1, [r7, #28]
 80198ce:	6878      	ldr	r0, [r7, #4]
 80198d0:	f7ff fd63 	bl	801939a <get_fat>
 80198d4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d00e      	beq.n	80198fa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80198dc:	68fb      	ldr	r3, [r7, #12]
 80198de:	2b01      	cmp	r3, #1
 80198e0:	d003      	beq.n	80198ea <create_chain+0xa6>
 80198e2:	68fb      	ldr	r3, [r7, #12]
 80198e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80198e8:	d101      	bne.n	80198ee <create_chain+0xaa>
 80198ea:	68fb      	ldr	r3, [r7, #12]
 80198ec:	e03e      	b.n	801996c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80198ee:	69fa      	ldr	r2, [r7, #28]
 80198f0:	69bb      	ldr	r3, [r7, #24]
 80198f2:	429a      	cmp	r2, r3
 80198f4:	d1da      	bne.n	80198ac <create_chain+0x68>
 80198f6:	2300      	movs	r3, #0
 80198f8:	e038      	b.n	801996c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80198fa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80198fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019900:	69f9      	ldr	r1, [r7, #28]
 8019902:	6938      	ldr	r0, [r7, #16]
 8019904:	f7ff fe1d 	bl	8019542 <put_fat>
 8019908:	4603      	mov	r3, r0
 801990a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801990c:	7dfb      	ldrb	r3, [r7, #23]
 801990e:	2b00      	cmp	r3, #0
 8019910:	d109      	bne.n	8019926 <create_chain+0xe2>
 8019912:	683b      	ldr	r3, [r7, #0]
 8019914:	2b00      	cmp	r3, #0
 8019916:	d006      	beq.n	8019926 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8019918:	69fa      	ldr	r2, [r7, #28]
 801991a:	6839      	ldr	r1, [r7, #0]
 801991c:	6938      	ldr	r0, [r7, #16]
 801991e:	f7ff fe10 	bl	8019542 <put_fat>
 8019922:	4603      	mov	r3, r0
 8019924:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8019926:	7dfb      	ldrb	r3, [r7, #23]
 8019928:	2b00      	cmp	r3, #0
 801992a:	d116      	bne.n	801995a <create_chain+0x116>
		fs->last_clst = ncl;
 801992c:	693b      	ldr	r3, [r7, #16]
 801992e:	69fa      	ldr	r2, [r7, #28]
 8019930:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8019932:	693b      	ldr	r3, [r7, #16]
 8019934:	699a      	ldr	r2, [r3, #24]
 8019936:	693b      	ldr	r3, [r7, #16]
 8019938:	69db      	ldr	r3, [r3, #28]
 801993a:	3b02      	subs	r3, #2
 801993c:	429a      	cmp	r2, r3
 801993e:	d804      	bhi.n	801994a <create_chain+0x106>
 8019940:	693b      	ldr	r3, [r7, #16]
 8019942:	699b      	ldr	r3, [r3, #24]
 8019944:	1e5a      	subs	r2, r3, #1
 8019946:	693b      	ldr	r3, [r7, #16]
 8019948:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801994a:	693b      	ldr	r3, [r7, #16]
 801994c:	791b      	ldrb	r3, [r3, #4]
 801994e:	f043 0301 	orr.w	r3, r3, #1
 8019952:	b2da      	uxtb	r2, r3
 8019954:	693b      	ldr	r3, [r7, #16]
 8019956:	711a      	strb	r2, [r3, #4]
 8019958:	e007      	b.n	801996a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801995a:	7dfb      	ldrb	r3, [r7, #23]
 801995c:	2b01      	cmp	r3, #1
 801995e:	d102      	bne.n	8019966 <create_chain+0x122>
 8019960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019964:	e000      	b.n	8019968 <create_chain+0x124>
 8019966:	2301      	movs	r3, #1
 8019968:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801996a:	69fb      	ldr	r3, [r7, #28]
}
 801996c:	4618      	mov	r0, r3
 801996e:	3720      	adds	r7, #32
 8019970:	46bd      	mov	sp, r7
 8019972:	bd80      	pop	{r7, pc}

08019974 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8019974:	b480      	push	{r7}
 8019976:	b087      	sub	sp, #28
 8019978:	af00      	add	r7, sp, #0
 801997a:	6078      	str	r0, [r7, #4]
 801997c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019988:	3304      	adds	r3, #4
 801998a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801998c:	68fb      	ldr	r3, [r7, #12]
 801998e:	899b      	ldrh	r3, [r3, #12]
 8019990:	461a      	mov	r2, r3
 8019992:	683b      	ldr	r3, [r7, #0]
 8019994:	fbb3 f3f2 	udiv	r3, r3, r2
 8019998:	68fa      	ldr	r2, [r7, #12]
 801999a:	8952      	ldrh	r2, [r2, #10]
 801999c:	fbb3 f3f2 	udiv	r3, r3, r2
 80199a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80199a2:	693b      	ldr	r3, [r7, #16]
 80199a4:	1d1a      	adds	r2, r3, #4
 80199a6:	613a      	str	r2, [r7, #16]
 80199a8:	681b      	ldr	r3, [r3, #0]
 80199aa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80199ac:	68bb      	ldr	r3, [r7, #8]
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d101      	bne.n	80199b6 <clmt_clust+0x42>
 80199b2:	2300      	movs	r3, #0
 80199b4:	e010      	b.n	80199d8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80199b6:	697a      	ldr	r2, [r7, #20]
 80199b8:	68bb      	ldr	r3, [r7, #8]
 80199ba:	429a      	cmp	r2, r3
 80199bc:	d307      	bcc.n	80199ce <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80199be:	697a      	ldr	r2, [r7, #20]
 80199c0:	68bb      	ldr	r3, [r7, #8]
 80199c2:	1ad3      	subs	r3, r2, r3
 80199c4:	617b      	str	r3, [r7, #20]
 80199c6:	693b      	ldr	r3, [r7, #16]
 80199c8:	3304      	adds	r3, #4
 80199ca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80199cc:	e7e9      	b.n	80199a2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80199ce:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80199d0:	693b      	ldr	r3, [r7, #16]
 80199d2:	681a      	ldr	r2, [r3, #0]
 80199d4:	697b      	ldr	r3, [r7, #20]
 80199d6:	4413      	add	r3, r2
}
 80199d8:	4618      	mov	r0, r3
 80199da:	371c      	adds	r7, #28
 80199dc:	46bd      	mov	sp, r7
 80199de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199e2:	4770      	bx	lr

080199e4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80199e4:	b580      	push	{r7, lr}
 80199e6:	b086      	sub	sp, #24
 80199e8:	af00      	add	r7, sp, #0
 80199ea:	6078      	str	r0, [r7, #4]
 80199ec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80199f4:	683b      	ldr	r3, [r7, #0]
 80199f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80199fa:	d204      	bcs.n	8019a06 <dir_sdi+0x22>
 80199fc:	683b      	ldr	r3, [r7, #0]
 80199fe:	f003 031f 	and.w	r3, r3, #31
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d001      	beq.n	8019a0a <dir_sdi+0x26>
		return FR_INT_ERR;
 8019a06:	2302      	movs	r3, #2
 8019a08:	e071      	b.n	8019aee <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	683a      	ldr	r2, [r7, #0]
 8019a0e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	689b      	ldr	r3, [r3, #8]
 8019a14:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8019a16:	697b      	ldr	r3, [r7, #20]
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d106      	bne.n	8019a2a <dir_sdi+0x46>
 8019a1c:	693b      	ldr	r3, [r7, #16]
 8019a1e:	781b      	ldrb	r3, [r3, #0]
 8019a20:	2b02      	cmp	r3, #2
 8019a22:	d902      	bls.n	8019a2a <dir_sdi+0x46>
		clst = fs->dirbase;
 8019a24:	693b      	ldr	r3, [r7, #16]
 8019a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a28:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8019a2a:	697b      	ldr	r3, [r7, #20]
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d10c      	bne.n	8019a4a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8019a30:	683b      	ldr	r3, [r7, #0]
 8019a32:	095b      	lsrs	r3, r3, #5
 8019a34:	693a      	ldr	r2, [r7, #16]
 8019a36:	8912      	ldrh	r2, [r2, #8]
 8019a38:	4293      	cmp	r3, r2
 8019a3a:	d301      	bcc.n	8019a40 <dir_sdi+0x5c>
 8019a3c:	2302      	movs	r3, #2
 8019a3e:	e056      	b.n	8019aee <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8019a40:	693b      	ldr	r3, [r7, #16]
 8019a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	61da      	str	r2, [r3, #28]
 8019a48:	e02d      	b.n	8019aa6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8019a4a:	693b      	ldr	r3, [r7, #16]
 8019a4c:	895b      	ldrh	r3, [r3, #10]
 8019a4e:	461a      	mov	r2, r3
 8019a50:	693b      	ldr	r3, [r7, #16]
 8019a52:	899b      	ldrh	r3, [r3, #12]
 8019a54:	fb02 f303 	mul.w	r3, r2, r3
 8019a58:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8019a5a:	e019      	b.n	8019a90 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	6979      	ldr	r1, [r7, #20]
 8019a60:	4618      	mov	r0, r3
 8019a62:	f7ff fc9a 	bl	801939a <get_fat>
 8019a66:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8019a68:	697b      	ldr	r3, [r7, #20]
 8019a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019a6e:	d101      	bne.n	8019a74 <dir_sdi+0x90>
 8019a70:	2301      	movs	r3, #1
 8019a72:	e03c      	b.n	8019aee <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8019a74:	697b      	ldr	r3, [r7, #20]
 8019a76:	2b01      	cmp	r3, #1
 8019a78:	d904      	bls.n	8019a84 <dir_sdi+0xa0>
 8019a7a:	693b      	ldr	r3, [r7, #16]
 8019a7c:	69db      	ldr	r3, [r3, #28]
 8019a7e:	697a      	ldr	r2, [r7, #20]
 8019a80:	429a      	cmp	r2, r3
 8019a82:	d301      	bcc.n	8019a88 <dir_sdi+0xa4>
 8019a84:	2302      	movs	r3, #2
 8019a86:	e032      	b.n	8019aee <dir_sdi+0x10a>
			ofs -= csz;
 8019a88:	683a      	ldr	r2, [r7, #0]
 8019a8a:	68fb      	ldr	r3, [r7, #12]
 8019a8c:	1ad3      	subs	r3, r2, r3
 8019a8e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8019a90:	683a      	ldr	r2, [r7, #0]
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	429a      	cmp	r2, r3
 8019a96:	d2e1      	bcs.n	8019a5c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8019a98:	6979      	ldr	r1, [r7, #20]
 8019a9a:	6938      	ldr	r0, [r7, #16]
 8019a9c:	f7ff fc5e 	bl	801935c <clust2sect>
 8019aa0:	4602      	mov	r2, r0
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	697a      	ldr	r2, [r7, #20]
 8019aaa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	69db      	ldr	r3, [r3, #28]
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	d101      	bne.n	8019ab8 <dir_sdi+0xd4>
 8019ab4:	2302      	movs	r3, #2
 8019ab6:	e01a      	b.n	8019aee <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	69da      	ldr	r2, [r3, #28]
 8019abc:	693b      	ldr	r3, [r7, #16]
 8019abe:	899b      	ldrh	r3, [r3, #12]
 8019ac0:	4619      	mov	r1, r3
 8019ac2:	683b      	ldr	r3, [r7, #0]
 8019ac4:	fbb3 f3f1 	udiv	r3, r3, r1
 8019ac8:	441a      	add	r2, r3
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8019ace:	693b      	ldr	r3, [r7, #16]
 8019ad0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8019ad4:	693b      	ldr	r3, [r7, #16]
 8019ad6:	899b      	ldrh	r3, [r3, #12]
 8019ad8:	461a      	mov	r2, r3
 8019ada:	683b      	ldr	r3, [r7, #0]
 8019adc:	fbb3 f0f2 	udiv	r0, r3, r2
 8019ae0:	fb00 f202 	mul.w	r2, r0, r2
 8019ae4:	1a9b      	subs	r3, r3, r2
 8019ae6:	18ca      	adds	r2, r1, r3
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8019aec:	2300      	movs	r3, #0
}
 8019aee:	4618      	mov	r0, r3
 8019af0:	3718      	adds	r7, #24
 8019af2:	46bd      	mov	sp, r7
 8019af4:	bd80      	pop	{r7, pc}

08019af6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8019af6:	b580      	push	{r7, lr}
 8019af8:	b086      	sub	sp, #24
 8019afa:	af00      	add	r7, sp, #0
 8019afc:	6078      	str	r0, [r7, #4]
 8019afe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	695b      	ldr	r3, [r3, #20]
 8019b0a:	3320      	adds	r3, #32
 8019b0c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	69db      	ldr	r3, [r3, #28]
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d003      	beq.n	8019b1e <dir_next+0x28>
 8019b16:	68bb      	ldr	r3, [r7, #8]
 8019b18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8019b1c:	d301      	bcc.n	8019b22 <dir_next+0x2c>
 8019b1e:	2304      	movs	r3, #4
 8019b20:	e0bb      	b.n	8019c9a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	899b      	ldrh	r3, [r3, #12]
 8019b26:	461a      	mov	r2, r3
 8019b28:	68bb      	ldr	r3, [r7, #8]
 8019b2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8019b2e:	fb01 f202 	mul.w	r2, r1, r2
 8019b32:	1a9b      	subs	r3, r3, r2
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	f040 809d 	bne.w	8019c74 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	69db      	ldr	r3, [r3, #28]
 8019b3e:	1c5a      	adds	r2, r3, #1
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	699b      	ldr	r3, [r3, #24]
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d10b      	bne.n	8019b64 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8019b4c:	68bb      	ldr	r3, [r7, #8]
 8019b4e:	095b      	lsrs	r3, r3, #5
 8019b50:	68fa      	ldr	r2, [r7, #12]
 8019b52:	8912      	ldrh	r2, [r2, #8]
 8019b54:	4293      	cmp	r3, r2
 8019b56:	f0c0 808d 	bcc.w	8019c74 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	2200      	movs	r2, #0
 8019b5e:	61da      	str	r2, [r3, #28]
 8019b60:	2304      	movs	r3, #4
 8019b62:	e09a      	b.n	8019c9a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	899b      	ldrh	r3, [r3, #12]
 8019b68:	461a      	mov	r2, r3
 8019b6a:	68bb      	ldr	r3, [r7, #8]
 8019b6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8019b70:	68fa      	ldr	r2, [r7, #12]
 8019b72:	8952      	ldrh	r2, [r2, #10]
 8019b74:	3a01      	subs	r2, #1
 8019b76:	4013      	ands	r3, r2
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d17b      	bne.n	8019c74 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8019b7c:	687a      	ldr	r2, [r7, #4]
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	699b      	ldr	r3, [r3, #24]
 8019b82:	4619      	mov	r1, r3
 8019b84:	4610      	mov	r0, r2
 8019b86:	f7ff fc08 	bl	801939a <get_fat>
 8019b8a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8019b8c:	697b      	ldr	r3, [r7, #20]
 8019b8e:	2b01      	cmp	r3, #1
 8019b90:	d801      	bhi.n	8019b96 <dir_next+0xa0>
 8019b92:	2302      	movs	r3, #2
 8019b94:	e081      	b.n	8019c9a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8019b96:	697b      	ldr	r3, [r7, #20]
 8019b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019b9c:	d101      	bne.n	8019ba2 <dir_next+0xac>
 8019b9e:	2301      	movs	r3, #1
 8019ba0:	e07b      	b.n	8019c9a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	69db      	ldr	r3, [r3, #28]
 8019ba6:	697a      	ldr	r2, [r7, #20]
 8019ba8:	429a      	cmp	r2, r3
 8019baa:	d359      	bcc.n	8019c60 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8019bac:	683b      	ldr	r3, [r7, #0]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d104      	bne.n	8019bbc <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	2200      	movs	r2, #0
 8019bb6:	61da      	str	r2, [r3, #28]
 8019bb8:	2304      	movs	r3, #4
 8019bba:	e06e      	b.n	8019c9a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8019bbc:	687a      	ldr	r2, [r7, #4]
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	699b      	ldr	r3, [r3, #24]
 8019bc2:	4619      	mov	r1, r3
 8019bc4:	4610      	mov	r0, r2
 8019bc6:	f7ff fe3d 	bl	8019844 <create_chain>
 8019bca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8019bcc:	697b      	ldr	r3, [r7, #20]
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d101      	bne.n	8019bd6 <dir_next+0xe0>
 8019bd2:	2307      	movs	r3, #7
 8019bd4:	e061      	b.n	8019c9a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8019bd6:	697b      	ldr	r3, [r7, #20]
 8019bd8:	2b01      	cmp	r3, #1
 8019bda:	d101      	bne.n	8019be0 <dir_next+0xea>
 8019bdc:	2302      	movs	r3, #2
 8019bde:	e05c      	b.n	8019c9a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8019be0:	697b      	ldr	r3, [r7, #20]
 8019be2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019be6:	d101      	bne.n	8019bec <dir_next+0xf6>
 8019be8:	2301      	movs	r3, #1
 8019bea:	e056      	b.n	8019c9a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8019bec:	68f8      	ldr	r0, [r7, #12]
 8019bee:	f7ff fad3 	bl	8019198 <sync_window>
 8019bf2:	4603      	mov	r3, r0
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d001      	beq.n	8019bfc <dir_next+0x106>
 8019bf8:	2301      	movs	r3, #1
 8019bfa:	e04e      	b.n	8019c9a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	899b      	ldrh	r3, [r3, #12]
 8019c06:	461a      	mov	r2, r3
 8019c08:	2100      	movs	r1, #0
 8019c0a:	f7ff f8fc 	bl	8018e06 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8019c0e:	2300      	movs	r3, #0
 8019c10:	613b      	str	r3, [r7, #16]
 8019c12:	6979      	ldr	r1, [r7, #20]
 8019c14:	68f8      	ldr	r0, [r7, #12]
 8019c16:	f7ff fba1 	bl	801935c <clust2sect>
 8019c1a:	4602      	mov	r2, r0
 8019c1c:	68fb      	ldr	r3, [r7, #12]
 8019c1e:	635a      	str	r2, [r3, #52]	; 0x34
 8019c20:	e012      	b.n	8019c48 <dir_next+0x152>
						fs->wflag = 1;
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	2201      	movs	r2, #1
 8019c26:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8019c28:	68f8      	ldr	r0, [r7, #12]
 8019c2a:	f7ff fab5 	bl	8019198 <sync_window>
 8019c2e:	4603      	mov	r3, r0
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d001      	beq.n	8019c38 <dir_next+0x142>
 8019c34:	2301      	movs	r3, #1
 8019c36:	e030      	b.n	8019c9a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8019c38:	693b      	ldr	r3, [r7, #16]
 8019c3a:	3301      	adds	r3, #1
 8019c3c:	613b      	str	r3, [r7, #16]
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019c42:	1c5a      	adds	r2, r3, #1
 8019c44:	68fb      	ldr	r3, [r7, #12]
 8019c46:	635a      	str	r2, [r3, #52]	; 0x34
 8019c48:	68fb      	ldr	r3, [r7, #12]
 8019c4a:	895b      	ldrh	r3, [r3, #10]
 8019c4c:	461a      	mov	r2, r3
 8019c4e:	693b      	ldr	r3, [r7, #16]
 8019c50:	4293      	cmp	r3, r2
 8019c52:	d3e6      	bcc.n	8019c22 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8019c54:	68fb      	ldr	r3, [r7, #12]
 8019c56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019c58:	693b      	ldr	r3, [r7, #16]
 8019c5a:	1ad2      	subs	r2, r2, r3
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	697a      	ldr	r2, [r7, #20]
 8019c64:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8019c66:	6979      	ldr	r1, [r7, #20]
 8019c68:	68f8      	ldr	r0, [r7, #12]
 8019c6a:	f7ff fb77 	bl	801935c <clust2sect>
 8019c6e:	4602      	mov	r2, r0
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	68ba      	ldr	r2, [r7, #8]
 8019c78:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8019c7a:	68fb      	ldr	r3, [r7, #12]
 8019c7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	899b      	ldrh	r3, [r3, #12]
 8019c84:	461a      	mov	r2, r3
 8019c86:	68bb      	ldr	r3, [r7, #8]
 8019c88:	fbb3 f0f2 	udiv	r0, r3, r2
 8019c8c:	fb00 f202 	mul.w	r2, r0, r2
 8019c90:	1a9b      	subs	r3, r3, r2
 8019c92:	18ca      	adds	r2, r1, r3
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8019c98:	2300      	movs	r3, #0
}
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	3718      	adds	r7, #24
 8019c9e:	46bd      	mov	sp, r7
 8019ca0:	bd80      	pop	{r7, pc}

08019ca2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8019ca2:	b580      	push	{r7, lr}
 8019ca4:	b086      	sub	sp, #24
 8019ca6:	af00      	add	r7, sp, #0
 8019ca8:	6078      	str	r0, [r7, #4]
 8019caa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8019cb2:	2100      	movs	r1, #0
 8019cb4:	6878      	ldr	r0, [r7, #4]
 8019cb6:	f7ff fe95 	bl	80199e4 <dir_sdi>
 8019cba:	4603      	mov	r3, r0
 8019cbc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019cbe:	7dfb      	ldrb	r3, [r7, #23]
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d12b      	bne.n	8019d1c <dir_alloc+0x7a>
		n = 0;
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	69db      	ldr	r3, [r3, #28]
 8019ccc:	4619      	mov	r1, r3
 8019cce:	68f8      	ldr	r0, [r7, #12]
 8019cd0:	f7ff faa6 	bl	8019220 <move_window>
 8019cd4:	4603      	mov	r3, r0
 8019cd6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8019cd8:	7dfb      	ldrb	r3, [r7, #23]
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	d11d      	bne.n	8019d1a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	6a1b      	ldr	r3, [r3, #32]
 8019ce2:	781b      	ldrb	r3, [r3, #0]
 8019ce4:	2be5      	cmp	r3, #229	; 0xe5
 8019ce6:	d004      	beq.n	8019cf2 <dir_alloc+0x50>
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	6a1b      	ldr	r3, [r3, #32]
 8019cec:	781b      	ldrb	r3, [r3, #0]
 8019cee:	2b00      	cmp	r3, #0
 8019cf0:	d107      	bne.n	8019d02 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8019cf2:	693b      	ldr	r3, [r7, #16]
 8019cf4:	3301      	adds	r3, #1
 8019cf6:	613b      	str	r3, [r7, #16]
 8019cf8:	693a      	ldr	r2, [r7, #16]
 8019cfa:	683b      	ldr	r3, [r7, #0]
 8019cfc:	429a      	cmp	r2, r3
 8019cfe:	d102      	bne.n	8019d06 <dir_alloc+0x64>
 8019d00:	e00c      	b.n	8019d1c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8019d02:	2300      	movs	r3, #0
 8019d04:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8019d06:	2101      	movs	r1, #1
 8019d08:	6878      	ldr	r0, [r7, #4]
 8019d0a:	f7ff fef4 	bl	8019af6 <dir_next>
 8019d0e:	4603      	mov	r3, r0
 8019d10:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8019d12:	7dfb      	ldrb	r3, [r7, #23]
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d0d7      	beq.n	8019cc8 <dir_alloc+0x26>
 8019d18:	e000      	b.n	8019d1c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8019d1a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8019d1c:	7dfb      	ldrb	r3, [r7, #23]
 8019d1e:	2b04      	cmp	r3, #4
 8019d20:	d101      	bne.n	8019d26 <dir_alloc+0x84>
 8019d22:	2307      	movs	r3, #7
 8019d24:	75fb      	strb	r3, [r7, #23]
	return res;
 8019d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8019d28:	4618      	mov	r0, r3
 8019d2a:	3718      	adds	r7, #24
 8019d2c:	46bd      	mov	sp, r7
 8019d2e:	bd80      	pop	{r7, pc}

08019d30 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8019d30:	b580      	push	{r7, lr}
 8019d32:	b084      	sub	sp, #16
 8019d34:	af00      	add	r7, sp, #0
 8019d36:	6078      	str	r0, [r7, #4]
 8019d38:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8019d3a:	683b      	ldr	r3, [r7, #0]
 8019d3c:	331a      	adds	r3, #26
 8019d3e:	4618      	mov	r0, r3
 8019d40:	f7fe ffbe 	bl	8018cc0 <ld_word>
 8019d44:	4603      	mov	r3, r0
 8019d46:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	781b      	ldrb	r3, [r3, #0]
 8019d4c:	2b03      	cmp	r3, #3
 8019d4e:	d109      	bne.n	8019d64 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8019d50:	683b      	ldr	r3, [r7, #0]
 8019d52:	3314      	adds	r3, #20
 8019d54:	4618      	mov	r0, r3
 8019d56:	f7fe ffb3 	bl	8018cc0 <ld_word>
 8019d5a:	4603      	mov	r3, r0
 8019d5c:	041b      	lsls	r3, r3, #16
 8019d5e:	68fa      	ldr	r2, [r7, #12]
 8019d60:	4313      	orrs	r3, r2
 8019d62:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8019d64:	68fb      	ldr	r3, [r7, #12]
}
 8019d66:	4618      	mov	r0, r3
 8019d68:	3710      	adds	r7, #16
 8019d6a:	46bd      	mov	sp, r7
 8019d6c:	bd80      	pop	{r7, pc}

08019d6e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8019d6e:	b580      	push	{r7, lr}
 8019d70:	b084      	sub	sp, #16
 8019d72:	af00      	add	r7, sp, #0
 8019d74:	60f8      	str	r0, [r7, #12]
 8019d76:	60b9      	str	r1, [r7, #8]
 8019d78:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8019d7a:	68bb      	ldr	r3, [r7, #8]
 8019d7c:	331a      	adds	r3, #26
 8019d7e:	687a      	ldr	r2, [r7, #4]
 8019d80:	b292      	uxth	r2, r2
 8019d82:	4611      	mov	r1, r2
 8019d84:	4618      	mov	r0, r3
 8019d86:	f7fe ffd6 	bl	8018d36 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8019d8a:	68fb      	ldr	r3, [r7, #12]
 8019d8c:	781b      	ldrb	r3, [r3, #0]
 8019d8e:	2b03      	cmp	r3, #3
 8019d90:	d109      	bne.n	8019da6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8019d92:	68bb      	ldr	r3, [r7, #8]
 8019d94:	f103 0214 	add.w	r2, r3, #20
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	0c1b      	lsrs	r3, r3, #16
 8019d9c:	b29b      	uxth	r3, r3
 8019d9e:	4619      	mov	r1, r3
 8019da0:	4610      	mov	r0, r2
 8019da2:	f7fe ffc8 	bl	8018d36 <st_word>
	}
}
 8019da6:	bf00      	nop
 8019da8:	3710      	adds	r7, #16
 8019daa:	46bd      	mov	sp, r7
 8019dac:	bd80      	pop	{r7, pc}
	...

08019db0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8019db0:	b590      	push	{r4, r7, lr}
 8019db2:	b087      	sub	sp, #28
 8019db4:	af00      	add	r7, sp, #0
 8019db6:	6078      	str	r0, [r7, #4]
 8019db8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8019dba:	683b      	ldr	r3, [r7, #0]
 8019dbc:	331a      	adds	r3, #26
 8019dbe:	4618      	mov	r0, r3
 8019dc0:	f7fe ff7e 	bl	8018cc0 <ld_word>
 8019dc4:	4603      	mov	r3, r0
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d001      	beq.n	8019dce <cmp_lfn+0x1e>
 8019dca:	2300      	movs	r3, #0
 8019dcc:	e059      	b.n	8019e82 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8019dce:	683b      	ldr	r3, [r7, #0]
 8019dd0:	781b      	ldrb	r3, [r3, #0]
 8019dd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019dd6:	1e5a      	subs	r2, r3, #1
 8019dd8:	4613      	mov	r3, r2
 8019dda:	005b      	lsls	r3, r3, #1
 8019ddc:	4413      	add	r3, r2
 8019dde:	009b      	lsls	r3, r3, #2
 8019de0:	4413      	add	r3, r2
 8019de2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8019de4:	2301      	movs	r3, #1
 8019de6:	81fb      	strh	r3, [r7, #14]
 8019de8:	2300      	movs	r3, #0
 8019dea:	613b      	str	r3, [r7, #16]
 8019dec:	e033      	b.n	8019e56 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8019dee:	4a27      	ldr	r2, [pc, #156]	; (8019e8c <cmp_lfn+0xdc>)
 8019df0:	693b      	ldr	r3, [r7, #16]
 8019df2:	4413      	add	r3, r2
 8019df4:	781b      	ldrb	r3, [r3, #0]
 8019df6:	461a      	mov	r2, r3
 8019df8:	683b      	ldr	r3, [r7, #0]
 8019dfa:	4413      	add	r3, r2
 8019dfc:	4618      	mov	r0, r3
 8019dfe:	f7fe ff5f 	bl	8018cc0 <ld_word>
 8019e02:	4603      	mov	r3, r0
 8019e04:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8019e06:	89fb      	ldrh	r3, [r7, #14]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d01a      	beq.n	8019e42 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8019e0c:	697b      	ldr	r3, [r7, #20]
 8019e0e:	2bfe      	cmp	r3, #254	; 0xfe
 8019e10:	d812      	bhi.n	8019e38 <cmp_lfn+0x88>
 8019e12:	89bb      	ldrh	r3, [r7, #12]
 8019e14:	4618      	mov	r0, r3
 8019e16:	f001 fe6b 	bl	801baf0 <ff_wtoupper>
 8019e1a:	4603      	mov	r3, r0
 8019e1c:	461c      	mov	r4, r3
 8019e1e:	697b      	ldr	r3, [r7, #20]
 8019e20:	1c5a      	adds	r2, r3, #1
 8019e22:	617a      	str	r2, [r7, #20]
 8019e24:	005b      	lsls	r3, r3, #1
 8019e26:	687a      	ldr	r2, [r7, #4]
 8019e28:	4413      	add	r3, r2
 8019e2a:	881b      	ldrh	r3, [r3, #0]
 8019e2c:	4618      	mov	r0, r3
 8019e2e:	f001 fe5f 	bl	801baf0 <ff_wtoupper>
 8019e32:	4603      	mov	r3, r0
 8019e34:	429c      	cmp	r4, r3
 8019e36:	d001      	beq.n	8019e3c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8019e38:	2300      	movs	r3, #0
 8019e3a:	e022      	b.n	8019e82 <cmp_lfn+0xd2>
			}
			wc = uc;
 8019e3c:	89bb      	ldrh	r3, [r7, #12]
 8019e3e:	81fb      	strh	r3, [r7, #14]
 8019e40:	e006      	b.n	8019e50 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8019e42:	89bb      	ldrh	r3, [r7, #12]
 8019e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019e48:	4293      	cmp	r3, r2
 8019e4a:	d001      	beq.n	8019e50 <cmp_lfn+0xa0>
 8019e4c:	2300      	movs	r3, #0
 8019e4e:	e018      	b.n	8019e82 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8019e50:	693b      	ldr	r3, [r7, #16]
 8019e52:	3301      	adds	r3, #1
 8019e54:	613b      	str	r3, [r7, #16]
 8019e56:	693b      	ldr	r3, [r7, #16]
 8019e58:	2b0c      	cmp	r3, #12
 8019e5a:	d9c8      	bls.n	8019dee <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8019e5c:	683b      	ldr	r3, [r7, #0]
 8019e5e:	781b      	ldrb	r3, [r3, #0]
 8019e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d00b      	beq.n	8019e80 <cmp_lfn+0xd0>
 8019e68:	89fb      	ldrh	r3, [r7, #14]
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d008      	beq.n	8019e80 <cmp_lfn+0xd0>
 8019e6e:	697b      	ldr	r3, [r7, #20]
 8019e70:	005b      	lsls	r3, r3, #1
 8019e72:	687a      	ldr	r2, [r7, #4]
 8019e74:	4413      	add	r3, r2
 8019e76:	881b      	ldrh	r3, [r3, #0]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d001      	beq.n	8019e80 <cmp_lfn+0xd0>
 8019e7c:	2300      	movs	r3, #0
 8019e7e:	e000      	b.n	8019e82 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8019e80:	2301      	movs	r3, #1
}
 8019e82:	4618      	mov	r0, r3
 8019e84:	371c      	adds	r7, #28
 8019e86:	46bd      	mov	sp, r7
 8019e88:	bd90      	pop	{r4, r7, pc}
 8019e8a:	bf00      	nop
 8019e8c:	08022970 	.word	0x08022970

08019e90 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8019e90:	b580      	push	{r7, lr}
 8019e92:	b088      	sub	sp, #32
 8019e94:	af00      	add	r7, sp, #0
 8019e96:	60f8      	str	r0, [r7, #12]
 8019e98:	60b9      	str	r1, [r7, #8]
 8019e9a:	4611      	mov	r1, r2
 8019e9c:	461a      	mov	r2, r3
 8019e9e:	460b      	mov	r3, r1
 8019ea0:	71fb      	strb	r3, [r7, #7]
 8019ea2:	4613      	mov	r3, r2
 8019ea4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8019ea6:	68bb      	ldr	r3, [r7, #8]
 8019ea8:	330d      	adds	r3, #13
 8019eaa:	79ba      	ldrb	r2, [r7, #6]
 8019eac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8019eae:	68bb      	ldr	r3, [r7, #8]
 8019eb0:	330b      	adds	r3, #11
 8019eb2:	220f      	movs	r2, #15
 8019eb4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8019eb6:	68bb      	ldr	r3, [r7, #8]
 8019eb8:	330c      	adds	r3, #12
 8019eba:	2200      	movs	r2, #0
 8019ebc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8019ebe:	68bb      	ldr	r3, [r7, #8]
 8019ec0:	331a      	adds	r3, #26
 8019ec2:	2100      	movs	r1, #0
 8019ec4:	4618      	mov	r0, r3
 8019ec6:	f7fe ff36 	bl	8018d36 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8019eca:	79fb      	ldrb	r3, [r7, #7]
 8019ecc:	1e5a      	subs	r2, r3, #1
 8019ece:	4613      	mov	r3, r2
 8019ed0:	005b      	lsls	r3, r3, #1
 8019ed2:	4413      	add	r3, r2
 8019ed4:	009b      	lsls	r3, r3, #2
 8019ed6:	4413      	add	r3, r2
 8019ed8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8019eda:	2300      	movs	r3, #0
 8019edc:	82fb      	strh	r3, [r7, #22]
 8019ede:	2300      	movs	r3, #0
 8019ee0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019ee2:	8afb      	ldrh	r3, [r7, #22]
 8019ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019ee8:	4293      	cmp	r3, r2
 8019eea:	d007      	beq.n	8019efc <put_lfn+0x6c>
 8019eec:	69fb      	ldr	r3, [r7, #28]
 8019eee:	1c5a      	adds	r2, r3, #1
 8019ef0:	61fa      	str	r2, [r7, #28]
 8019ef2:	005b      	lsls	r3, r3, #1
 8019ef4:	68fa      	ldr	r2, [r7, #12]
 8019ef6:	4413      	add	r3, r2
 8019ef8:	881b      	ldrh	r3, [r3, #0]
 8019efa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8019efc:	4a17      	ldr	r2, [pc, #92]	; (8019f5c <put_lfn+0xcc>)
 8019efe:	69bb      	ldr	r3, [r7, #24]
 8019f00:	4413      	add	r3, r2
 8019f02:	781b      	ldrb	r3, [r3, #0]
 8019f04:	461a      	mov	r2, r3
 8019f06:	68bb      	ldr	r3, [r7, #8]
 8019f08:	4413      	add	r3, r2
 8019f0a:	8afa      	ldrh	r2, [r7, #22]
 8019f0c:	4611      	mov	r1, r2
 8019f0e:	4618      	mov	r0, r3
 8019f10:	f7fe ff11 	bl	8018d36 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019f14:	8afb      	ldrh	r3, [r7, #22]
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d102      	bne.n	8019f20 <put_lfn+0x90>
 8019f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019f1e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8019f20:	69bb      	ldr	r3, [r7, #24]
 8019f22:	3301      	adds	r3, #1
 8019f24:	61bb      	str	r3, [r7, #24]
 8019f26:	69bb      	ldr	r3, [r7, #24]
 8019f28:	2b0c      	cmp	r3, #12
 8019f2a:	d9da      	bls.n	8019ee2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8019f2c:	8afb      	ldrh	r3, [r7, #22]
 8019f2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019f32:	4293      	cmp	r3, r2
 8019f34:	d006      	beq.n	8019f44 <put_lfn+0xb4>
 8019f36:	69fb      	ldr	r3, [r7, #28]
 8019f38:	005b      	lsls	r3, r3, #1
 8019f3a:	68fa      	ldr	r2, [r7, #12]
 8019f3c:	4413      	add	r3, r2
 8019f3e:	881b      	ldrh	r3, [r3, #0]
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d103      	bne.n	8019f4c <put_lfn+0xbc>
 8019f44:	79fb      	ldrb	r3, [r7, #7]
 8019f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f4a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8019f4c:	68bb      	ldr	r3, [r7, #8]
 8019f4e:	79fa      	ldrb	r2, [r7, #7]
 8019f50:	701a      	strb	r2, [r3, #0]
}
 8019f52:	bf00      	nop
 8019f54:	3720      	adds	r7, #32
 8019f56:	46bd      	mov	sp, r7
 8019f58:	bd80      	pop	{r7, pc}
 8019f5a:	bf00      	nop
 8019f5c:	08022970 	.word	0x08022970

08019f60 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8019f60:	b580      	push	{r7, lr}
 8019f62:	b08c      	sub	sp, #48	; 0x30
 8019f64:	af00      	add	r7, sp, #0
 8019f66:	60f8      	str	r0, [r7, #12]
 8019f68:	60b9      	str	r1, [r7, #8]
 8019f6a:	607a      	str	r2, [r7, #4]
 8019f6c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8019f6e:	220b      	movs	r2, #11
 8019f70:	68b9      	ldr	r1, [r7, #8]
 8019f72:	68f8      	ldr	r0, [r7, #12]
 8019f74:	f7fe ff26 	bl	8018dc4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8019f78:	683b      	ldr	r3, [r7, #0]
 8019f7a:	2b05      	cmp	r3, #5
 8019f7c:	d929      	bls.n	8019fd2 <gen_numname+0x72>
		sr = seq;
 8019f7e:	683b      	ldr	r3, [r7, #0]
 8019f80:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8019f82:	e020      	b.n	8019fc6 <gen_numname+0x66>
			wc = *lfn++;
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	1c9a      	adds	r2, r3, #2
 8019f88:	607a      	str	r2, [r7, #4]
 8019f8a:	881b      	ldrh	r3, [r3, #0]
 8019f8c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8019f8e:	2300      	movs	r3, #0
 8019f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8019f92:	e015      	b.n	8019fc0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8019f94:	69fb      	ldr	r3, [r7, #28]
 8019f96:	005a      	lsls	r2, r3, #1
 8019f98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019f9a:	f003 0301 	and.w	r3, r3, #1
 8019f9e:	4413      	add	r3, r2
 8019fa0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8019fa2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019fa4:	085b      	lsrs	r3, r3, #1
 8019fa6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8019fa8:	69fb      	ldr	r3, [r7, #28]
 8019faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d003      	beq.n	8019fba <gen_numname+0x5a>
 8019fb2:	69fa      	ldr	r2, [r7, #28]
 8019fb4:	4b30      	ldr	r3, [pc, #192]	; (801a078 <gen_numname+0x118>)
 8019fb6:	4053      	eors	r3, r2
 8019fb8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8019fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fbc:	3301      	adds	r3, #1
 8019fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8019fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fc2:	2b0f      	cmp	r3, #15
 8019fc4:	d9e6      	bls.n	8019f94 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	881b      	ldrh	r3, [r3, #0]
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	d1da      	bne.n	8019f84 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8019fce:	69fb      	ldr	r3, [r7, #28]
 8019fd0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8019fd2:	2307      	movs	r3, #7
 8019fd4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8019fd6:	683b      	ldr	r3, [r7, #0]
 8019fd8:	b2db      	uxtb	r3, r3
 8019fda:	f003 030f 	and.w	r3, r3, #15
 8019fde:	b2db      	uxtb	r3, r3
 8019fe0:	3330      	adds	r3, #48	; 0x30
 8019fe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8019fe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019fea:	2b39      	cmp	r3, #57	; 0x39
 8019fec:	d904      	bls.n	8019ff8 <gen_numname+0x98>
 8019fee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019ff2:	3307      	adds	r3, #7
 8019ff4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8019ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ffa:	1e5a      	subs	r2, r3, #1
 8019ffc:	62ba      	str	r2, [r7, #40]	; 0x28
 8019ffe:	3330      	adds	r3, #48	; 0x30
 801a000:	443b      	add	r3, r7
 801a002:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801a006:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801a00a:	683b      	ldr	r3, [r7, #0]
 801a00c:	091b      	lsrs	r3, r3, #4
 801a00e:	603b      	str	r3, [r7, #0]
	} while (seq);
 801a010:	683b      	ldr	r3, [r7, #0]
 801a012:	2b00      	cmp	r3, #0
 801a014:	d1df      	bne.n	8019fd6 <gen_numname+0x76>
	ns[i] = '~';
 801a016:	f107 0214 	add.w	r2, r7, #20
 801a01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a01c:	4413      	add	r3, r2
 801a01e:	227e      	movs	r2, #126	; 0x7e
 801a020:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801a022:	2300      	movs	r3, #0
 801a024:	627b      	str	r3, [r7, #36]	; 0x24
 801a026:	e002      	b.n	801a02e <gen_numname+0xce>
 801a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a02a:	3301      	adds	r3, #1
 801a02c:	627b      	str	r3, [r7, #36]	; 0x24
 801a02e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a032:	429a      	cmp	r2, r3
 801a034:	d205      	bcs.n	801a042 <gen_numname+0xe2>
 801a036:	68fa      	ldr	r2, [r7, #12]
 801a038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a03a:	4413      	add	r3, r2
 801a03c:	781b      	ldrb	r3, [r3, #0]
 801a03e:	2b20      	cmp	r3, #32
 801a040:	d1f2      	bne.n	801a028 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801a042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a044:	2b07      	cmp	r3, #7
 801a046:	d807      	bhi.n	801a058 <gen_numname+0xf8>
 801a048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a04a:	1c5a      	adds	r2, r3, #1
 801a04c:	62ba      	str	r2, [r7, #40]	; 0x28
 801a04e:	3330      	adds	r3, #48	; 0x30
 801a050:	443b      	add	r3, r7
 801a052:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801a056:	e000      	b.n	801a05a <gen_numname+0xfa>
 801a058:	2120      	movs	r1, #32
 801a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a05c:	1c5a      	adds	r2, r3, #1
 801a05e:	627a      	str	r2, [r7, #36]	; 0x24
 801a060:	68fa      	ldr	r2, [r7, #12]
 801a062:	4413      	add	r3, r2
 801a064:	460a      	mov	r2, r1
 801a066:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801a068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a06a:	2b07      	cmp	r3, #7
 801a06c:	d9e9      	bls.n	801a042 <gen_numname+0xe2>
}
 801a06e:	bf00      	nop
 801a070:	bf00      	nop
 801a072:	3730      	adds	r7, #48	; 0x30
 801a074:	46bd      	mov	sp, r7
 801a076:	bd80      	pop	{r7, pc}
 801a078:	00011021 	.word	0x00011021

0801a07c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801a07c:	b480      	push	{r7}
 801a07e:	b085      	sub	sp, #20
 801a080:	af00      	add	r7, sp, #0
 801a082:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801a084:	2300      	movs	r3, #0
 801a086:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801a088:	230b      	movs	r3, #11
 801a08a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801a08c:	7bfb      	ldrb	r3, [r7, #15]
 801a08e:	b2da      	uxtb	r2, r3
 801a090:	0852      	lsrs	r2, r2, #1
 801a092:	01db      	lsls	r3, r3, #7
 801a094:	4313      	orrs	r3, r2
 801a096:	b2da      	uxtb	r2, r3
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	1c59      	adds	r1, r3, #1
 801a09c:	6079      	str	r1, [r7, #4]
 801a09e:	781b      	ldrb	r3, [r3, #0]
 801a0a0:	4413      	add	r3, r2
 801a0a2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801a0a4:	68bb      	ldr	r3, [r7, #8]
 801a0a6:	3b01      	subs	r3, #1
 801a0a8:	60bb      	str	r3, [r7, #8]
 801a0aa:	68bb      	ldr	r3, [r7, #8]
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	d1ed      	bne.n	801a08c <sum_sfn+0x10>
	return sum;
 801a0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 801a0b2:	4618      	mov	r0, r3
 801a0b4:	3714      	adds	r7, #20
 801a0b6:	46bd      	mov	sp, r7
 801a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0bc:	4770      	bx	lr

0801a0be <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801a0be:	b580      	push	{r7, lr}
 801a0c0:	b086      	sub	sp, #24
 801a0c2:	af00      	add	r7, sp, #0
 801a0c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	681b      	ldr	r3, [r3, #0]
 801a0ca:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801a0cc:	2100      	movs	r1, #0
 801a0ce:	6878      	ldr	r0, [r7, #4]
 801a0d0:	f7ff fc88 	bl	80199e4 <dir_sdi>
 801a0d4:	4603      	mov	r3, r0
 801a0d6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801a0d8:	7dfb      	ldrb	r3, [r7, #23]
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d001      	beq.n	801a0e2 <dir_find+0x24>
 801a0de:	7dfb      	ldrb	r3, [r7, #23]
 801a0e0:	e0a9      	b.n	801a236 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a0e2:	23ff      	movs	r3, #255	; 0xff
 801a0e4:	753b      	strb	r3, [r7, #20]
 801a0e6:	7d3b      	ldrb	r3, [r7, #20]
 801a0e8:	757b      	strb	r3, [r7, #21]
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a0f0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	69db      	ldr	r3, [r3, #28]
 801a0f6:	4619      	mov	r1, r3
 801a0f8:	6938      	ldr	r0, [r7, #16]
 801a0fa:	f7ff f891 	bl	8019220 <move_window>
 801a0fe:	4603      	mov	r3, r0
 801a100:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801a102:	7dfb      	ldrb	r3, [r7, #23]
 801a104:	2b00      	cmp	r3, #0
 801a106:	f040 8090 	bne.w	801a22a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	6a1b      	ldr	r3, [r3, #32]
 801a10e:	781b      	ldrb	r3, [r3, #0]
 801a110:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801a112:	7dbb      	ldrb	r3, [r7, #22]
 801a114:	2b00      	cmp	r3, #0
 801a116:	d102      	bne.n	801a11e <dir_find+0x60>
 801a118:	2304      	movs	r3, #4
 801a11a:	75fb      	strb	r3, [r7, #23]
 801a11c:	e08a      	b.n	801a234 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	6a1b      	ldr	r3, [r3, #32]
 801a122:	330b      	adds	r3, #11
 801a124:	781b      	ldrb	r3, [r3, #0]
 801a126:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a12a:	73fb      	strb	r3, [r7, #15]
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	7bfa      	ldrb	r2, [r7, #15]
 801a130:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801a132:	7dbb      	ldrb	r3, [r7, #22]
 801a134:	2be5      	cmp	r3, #229	; 0xe5
 801a136:	d007      	beq.n	801a148 <dir_find+0x8a>
 801a138:	7bfb      	ldrb	r3, [r7, #15]
 801a13a:	f003 0308 	and.w	r3, r3, #8
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d009      	beq.n	801a156 <dir_find+0x98>
 801a142:	7bfb      	ldrb	r3, [r7, #15]
 801a144:	2b0f      	cmp	r3, #15
 801a146:	d006      	beq.n	801a156 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a148:	23ff      	movs	r3, #255	; 0xff
 801a14a:	757b      	strb	r3, [r7, #21]
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a152:	631a      	str	r2, [r3, #48]	; 0x30
 801a154:	e05e      	b.n	801a214 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801a156:	7bfb      	ldrb	r3, [r7, #15]
 801a158:	2b0f      	cmp	r3, #15
 801a15a:	d136      	bne.n	801a1ca <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801a162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a166:	2b00      	cmp	r3, #0
 801a168:	d154      	bne.n	801a214 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801a16a:	7dbb      	ldrb	r3, [r7, #22]
 801a16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a170:	2b00      	cmp	r3, #0
 801a172:	d00d      	beq.n	801a190 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	6a1b      	ldr	r3, [r3, #32]
 801a178:	7b5b      	ldrb	r3, [r3, #13]
 801a17a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801a17c:	7dbb      	ldrb	r3, [r7, #22]
 801a17e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a182:	75bb      	strb	r3, [r7, #22]
 801a184:	7dbb      	ldrb	r3, [r7, #22]
 801a186:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	695a      	ldr	r2, [r3, #20]
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801a190:	7dba      	ldrb	r2, [r7, #22]
 801a192:	7d7b      	ldrb	r3, [r7, #21]
 801a194:	429a      	cmp	r2, r3
 801a196:	d115      	bne.n	801a1c4 <dir_find+0x106>
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	6a1b      	ldr	r3, [r3, #32]
 801a19c:	330d      	adds	r3, #13
 801a19e:	781b      	ldrb	r3, [r3, #0]
 801a1a0:	7d3a      	ldrb	r2, [r7, #20]
 801a1a2:	429a      	cmp	r2, r3
 801a1a4:	d10e      	bne.n	801a1c4 <dir_find+0x106>
 801a1a6:	693b      	ldr	r3, [r7, #16]
 801a1a8:	691a      	ldr	r2, [r3, #16]
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	6a1b      	ldr	r3, [r3, #32]
 801a1ae:	4619      	mov	r1, r3
 801a1b0:	4610      	mov	r0, r2
 801a1b2:	f7ff fdfd 	bl	8019db0 <cmp_lfn>
 801a1b6:	4603      	mov	r3, r0
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d003      	beq.n	801a1c4 <dir_find+0x106>
 801a1bc:	7d7b      	ldrb	r3, [r7, #21]
 801a1be:	3b01      	subs	r3, #1
 801a1c0:	b2db      	uxtb	r3, r3
 801a1c2:	e000      	b.n	801a1c6 <dir_find+0x108>
 801a1c4:	23ff      	movs	r3, #255	; 0xff
 801a1c6:	757b      	strb	r3, [r7, #21]
 801a1c8:	e024      	b.n	801a214 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801a1ca:	7d7b      	ldrb	r3, [r7, #21]
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d109      	bne.n	801a1e4 <dir_find+0x126>
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	6a1b      	ldr	r3, [r3, #32]
 801a1d4:	4618      	mov	r0, r3
 801a1d6:	f7ff ff51 	bl	801a07c <sum_sfn>
 801a1da:	4603      	mov	r3, r0
 801a1dc:	461a      	mov	r2, r3
 801a1de:	7d3b      	ldrb	r3, [r7, #20]
 801a1e0:	4293      	cmp	r3, r2
 801a1e2:	d024      	beq.n	801a22e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801a1ea:	f003 0301 	and.w	r3, r3, #1
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d10a      	bne.n	801a208 <dir_find+0x14a>
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	6a18      	ldr	r0, [r3, #32]
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	3324      	adds	r3, #36	; 0x24
 801a1fa:	220b      	movs	r2, #11
 801a1fc:	4619      	mov	r1, r3
 801a1fe:	f7fe fe1d 	bl	8018e3c <mem_cmp>
 801a202:	4603      	mov	r3, r0
 801a204:	2b00      	cmp	r3, #0
 801a206:	d014      	beq.n	801a232 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a208:	23ff      	movs	r3, #255	; 0xff
 801a20a:	757b      	strb	r3, [r7, #21]
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a212:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801a214:	2100      	movs	r1, #0
 801a216:	6878      	ldr	r0, [r7, #4]
 801a218:	f7ff fc6d 	bl	8019af6 <dir_next>
 801a21c:	4603      	mov	r3, r0
 801a21e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801a220:	7dfb      	ldrb	r3, [r7, #23]
 801a222:	2b00      	cmp	r3, #0
 801a224:	f43f af65 	beq.w	801a0f2 <dir_find+0x34>
 801a228:	e004      	b.n	801a234 <dir_find+0x176>
		if (res != FR_OK) break;
 801a22a:	bf00      	nop
 801a22c:	e002      	b.n	801a234 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801a22e:	bf00      	nop
 801a230:	e000      	b.n	801a234 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801a232:	bf00      	nop

	return res;
 801a234:	7dfb      	ldrb	r3, [r7, #23]
}
 801a236:	4618      	mov	r0, r3
 801a238:	3718      	adds	r7, #24
 801a23a:	46bd      	mov	sp, r7
 801a23c:	bd80      	pop	{r7, pc}
	...

0801a240 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801a240:	b580      	push	{r7, lr}
 801a242:	b08c      	sub	sp, #48	; 0x30
 801a244:	af00      	add	r7, sp, #0
 801a246:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801a254:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801a258:	2b00      	cmp	r3, #0
 801a25a:	d001      	beq.n	801a260 <dir_register+0x20>
 801a25c:	2306      	movs	r3, #6
 801a25e:	e0e0      	b.n	801a422 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801a260:	2300      	movs	r3, #0
 801a262:	627b      	str	r3, [r7, #36]	; 0x24
 801a264:	e002      	b.n	801a26c <dir_register+0x2c>
 801a266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a268:	3301      	adds	r3, #1
 801a26a:	627b      	str	r3, [r7, #36]	; 0x24
 801a26c:	69fb      	ldr	r3, [r7, #28]
 801a26e:	691a      	ldr	r2, [r3, #16]
 801a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a272:	005b      	lsls	r3, r3, #1
 801a274:	4413      	add	r3, r2
 801a276:	881b      	ldrh	r3, [r3, #0]
 801a278:	2b00      	cmp	r3, #0
 801a27a:	d1f4      	bne.n	801a266 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801a282:	f107 030c 	add.w	r3, r7, #12
 801a286:	220c      	movs	r2, #12
 801a288:	4618      	mov	r0, r3
 801a28a:	f7fe fd9b 	bl	8018dc4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801a28e:	7dfb      	ldrb	r3, [r7, #23]
 801a290:	f003 0301 	and.w	r3, r3, #1
 801a294:	2b00      	cmp	r3, #0
 801a296:	d032      	beq.n	801a2fe <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	2240      	movs	r2, #64	; 0x40
 801a29c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 801a2a0:	2301      	movs	r3, #1
 801a2a2:	62bb      	str	r3, [r7, #40]	; 0x28
 801a2a4:	e016      	b.n	801a2d4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 801a2ac:	69fb      	ldr	r3, [r7, #28]
 801a2ae:	691a      	ldr	r2, [r3, #16]
 801a2b0:	f107 010c 	add.w	r1, r7, #12
 801a2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2b6:	f7ff fe53 	bl	8019f60 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801a2ba:	6878      	ldr	r0, [r7, #4]
 801a2bc:	f7ff feff 	bl	801a0be <dir_find>
 801a2c0:	4603      	mov	r3, r0
 801a2c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801a2c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	d106      	bne.n	801a2dc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801a2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2d0:	3301      	adds	r3, #1
 801a2d2:	62bb      	str	r3, [r7, #40]	; 0x28
 801a2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2d6:	2b63      	cmp	r3, #99	; 0x63
 801a2d8:	d9e5      	bls.n	801a2a6 <dir_register+0x66>
 801a2da:	e000      	b.n	801a2de <dir_register+0x9e>
			if (res != FR_OK) break;
 801a2dc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801a2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2e0:	2b64      	cmp	r3, #100	; 0x64
 801a2e2:	d101      	bne.n	801a2e8 <dir_register+0xa8>
 801a2e4:	2307      	movs	r3, #7
 801a2e6:	e09c      	b.n	801a422 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801a2e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a2ec:	2b04      	cmp	r3, #4
 801a2ee:	d002      	beq.n	801a2f6 <dir_register+0xb6>
 801a2f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a2f4:	e095      	b.n	801a422 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801a2f6:	7dfa      	ldrb	r2, [r7, #23]
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801a2fe:	7dfb      	ldrb	r3, [r7, #23]
 801a300:	f003 0302 	and.w	r3, r3, #2
 801a304:	2b00      	cmp	r3, #0
 801a306:	d007      	beq.n	801a318 <dir_register+0xd8>
 801a308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a30a:	330c      	adds	r3, #12
 801a30c:	4a47      	ldr	r2, [pc, #284]	; (801a42c <dir_register+0x1ec>)
 801a30e:	fba2 2303 	umull	r2, r3, r2, r3
 801a312:	089b      	lsrs	r3, r3, #2
 801a314:	3301      	adds	r3, #1
 801a316:	e000      	b.n	801a31a <dir_register+0xda>
 801a318:	2301      	movs	r3, #1
 801a31a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801a31c:	6a39      	ldr	r1, [r7, #32]
 801a31e:	6878      	ldr	r0, [r7, #4]
 801a320:	f7ff fcbf 	bl	8019ca2 <dir_alloc>
 801a324:	4603      	mov	r3, r0
 801a326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801a32a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d148      	bne.n	801a3c4 <dir_register+0x184>
 801a332:	6a3b      	ldr	r3, [r7, #32]
 801a334:	3b01      	subs	r3, #1
 801a336:	623b      	str	r3, [r7, #32]
 801a338:	6a3b      	ldr	r3, [r7, #32]
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	d042      	beq.n	801a3c4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	695a      	ldr	r2, [r3, #20]
 801a342:	6a3b      	ldr	r3, [r7, #32]
 801a344:	015b      	lsls	r3, r3, #5
 801a346:	1ad3      	subs	r3, r2, r3
 801a348:	4619      	mov	r1, r3
 801a34a:	6878      	ldr	r0, [r7, #4]
 801a34c:	f7ff fb4a 	bl	80199e4 <dir_sdi>
 801a350:	4603      	mov	r3, r0
 801a352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801a356:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d132      	bne.n	801a3c4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	3324      	adds	r3, #36	; 0x24
 801a362:	4618      	mov	r0, r3
 801a364:	f7ff fe8a 	bl	801a07c <sum_sfn>
 801a368:	4603      	mov	r3, r0
 801a36a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	69db      	ldr	r3, [r3, #28]
 801a370:	4619      	mov	r1, r3
 801a372:	69f8      	ldr	r0, [r7, #28]
 801a374:	f7fe ff54 	bl	8019220 <move_window>
 801a378:	4603      	mov	r3, r0
 801a37a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801a37e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a382:	2b00      	cmp	r3, #0
 801a384:	d11d      	bne.n	801a3c2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801a386:	69fb      	ldr	r3, [r7, #28]
 801a388:	6918      	ldr	r0, [r3, #16]
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	6a19      	ldr	r1, [r3, #32]
 801a38e:	6a3b      	ldr	r3, [r7, #32]
 801a390:	b2da      	uxtb	r2, r3
 801a392:	7efb      	ldrb	r3, [r7, #27]
 801a394:	f7ff fd7c 	bl	8019e90 <put_lfn>
				fs->wflag = 1;
 801a398:	69fb      	ldr	r3, [r7, #28]
 801a39a:	2201      	movs	r2, #1
 801a39c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801a39e:	2100      	movs	r1, #0
 801a3a0:	6878      	ldr	r0, [r7, #4]
 801a3a2:	f7ff fba8 	bl	8019af6 <dir_next>
 801a3a6:	4603      	mov	r3, r0
 801a3a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 801a3ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d107      	bne.n	801a3c4 <dir_register+0x184>
 801a3b4:	6a3b      	ldr	r3, [r7, #32]
 801a3b6:	3b01      	subs	r3, #1
 801a3b8:	623b      	str	r3, [r7, #32]
 801a3ba:	6a3b      	ldr	r3, [r7, #32]
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d1d5      	bne.n	801a36c <dir_register+0x12c>
 801a3c0:	e000      	b.n	801a3c4 <dir_register+0x184>
				if (res != FR_OK) break;
 801a3c2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801a3c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d128      	bne.n	801a41e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	69db      	ldr	r3, [r3, #28]
 801a3d0:	4619      	mov	r1, r3
 801a3d2:	69f8      	ldr	r0, [r7, #28]
 801a3d4:	f7fe ff24 	bl	8019220 <move_window>
 801a3d8:	4603      	mov	r3, r0
 801a3da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801a3de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	d11b      	bne.n	801a41e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	6a1b      	ldr	r3, [r3, #32]
 801a3ea:	2220      	movs	r2, #32
 801a3ec:	2100      	movs	r1, #0
 801a3ee:	4618      	mov	r0, r3
 801a3f0:	f7fe fd09 	bl	8018e06 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	6a18      	ldr	r0, [r3, #32]
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	3324      	adds	r3, #36	; 0x24
 801a3fc:	220b      	movs	r2, #11
 801a3fe:	4619      	mov	r1, r3
 801a400:	f7fe fce0 	bl	8018dc4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	6a1b      	ldr	r3, [r3, #32]
 801a40e:	330c      	adds	r3, #12
 801a410:	f002 0218 	and.w	r2, r2, #24
 801a414:	b2d2      	uxtb	r2, r2
 801a416:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801a418:	69fb      	ldr	r3, [r7, #28]
 801a41a:	2201      	movs	r2, #1
 801a41c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801a41e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801a422:	4618      	mov	r0, r3
 801a424:	3730      	adds	r7, #48	; 0x30
 801a426:	46bd      	mov	sp, r7
 801a428:	bd80      	pop	{r7, pc}
 801a42a:	bf00      	nop
 801a42c:	4ec4ec4f 	.word	0x4ec4ec4f

0801a430 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801a430:	b580      	push	{r7, lr}
 801a432:	b08a      	sub	sp, #40	; 0x28
 801a434:	af00      	add	r7, sp, #0
 801a436:	6078      	str	r0, [r7, #4]
 801a438:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801a43a:	683b      	ldr	r3, [r7, #0]
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	613b      	str	r3, [r7, #16]
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	691b      	ldr	r3, [r3, #16]
 801a446:	60fb      	str	r3, [r7, #12]
 801a448:	2300      	movs	r3, #0
 801a44a:	617b      	str	r3, [r7, #20]
 801a44c:	697b      	ldr	r3, [r7, #20]
 801a44e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801a450:	69bb      	ldr	r3, [r7, #24]
 801a452:	1c5a      	adds	r2, r3, #1
 801a454:	61ba      	str	r2, [r7, #24]
 801a456:	693a      	ldr	r2, [r7, #16]
 801a458:	4413      	add	r3, r2
 801a45a:	781b      	ldrb	r3, [r3, #0]
 801a45c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801a45e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a460:	2b1f      	cmp	r3, #31
 801a462:	d940      	bls.n	801a4e6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801a464:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a466:	2b2f      	cmp	r3, #47	; 0x2f
 801a468:	d006      	beq.n	801a478 <create_name+0x48>
 801a46a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a46c:	2b5c      	cmp	r3, #92	; 0x5c
 801a46e:	d110      	bne.n	801a492 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801a470:	e002      	b.n	801a478 <create_name+0x48>
 801a472:	69bb      	ldr	r3, [r7, #24]
 801a474:	3301      	adds	r3, #1
 801a476:	61bb      	str	r3, [r7, #24]
 801a478:	693a      	ldr	r2, [r7, #16]
 801a47a:	69bb      	ldr	r3, [r7, #24]
 801a47c:	4413      	add	r3, r2
 801a47e:	781b      	ldrb	r3, [r3, #0]
 801a480:	2b2f      	cmp	r3, #47	; 0x2f
 801a482:	d0f6      	beq.n	801a472 <create_name+0x42>
 801a484:	693a      	ldr	r2, [r7, #16]
 801a486:	69bb      	ldr	r3, [r7, #24]
 801a488:	4413      	add	r3, r2
 801a48a:	781b      	ldrb	r3, [r3, #0]
 801a48c:	2b5c      	cmp	r3, #92	; 0x5c
 801a48e:	d0f0      	beq.n	801a472 <create_name+0x42>
			break;
 801a490:	e02a      	b.n	801a4e8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801a492:	697b      	ldr	r3, [r7, #20]
 801a494:	2bfe      	cmp	r3, #254	; 0xfe
 801a496:	d901      	bls.n	801a49c <create_name+0x6c>
 801a498:	2306      	movs	r3, #6
 801a49a:	e17d      	b.n	801a798 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801a49c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a49e:	b2db      	uxtb	r3, r3
 801a4a0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801a4a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a4a4:	2101      	movs	r1, #1
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	f001 fae6 	bl	801ba78 <ff_convert>
 801a4ac:	4603      	mov	r3, r0
 801a4ae:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801a4b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	d101      	bne.n	801a4ba <create_name+0x8a>
 801a4b6:	2306      	movs	r3, #6
 801a4b8:	e16e      	b.n	801a798 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801a4ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a4bc:	2b7f      	cmp	r3, #127	; 0x7f
 801a4be:	d809      	bhi.n	801a4d4 <create_name+0xa4>
 801a4c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a4c2:	4619      	mov	r1, r3
 801a4c4:	488d      	ldr	r0, [pc, #564]	; (801a6fc <create_name+0x2cc>)
 801a4c6:	f7fe fce0 	bl	8018e8a <chk_chr>
 801a4ca:	4603      	mov	r3, r0
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d001      	beq.n	801a4d4 <create_name+0xa4>
 801a4d0:	2306      	movs	r3, #6
 801a4d2:	e161      	b.n	801a798 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801a4d4:	697b      	ldr	r3, [r7, #20]
 801a4d6:	1c5a      	adds	r2, r3, #1
 801a4d8:	617a      	str	r2, [r7, #20]
 801a4da:	005b      	lsls	r3, r3, #1
 801a4dc:	68fa      	ldr	r2, [r7, #12]
 801a4de:	4413      	add	r3, r2
 801a4e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a4e2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801a4e4:	e7b4      	b.n	801a450 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801a4e6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801a4e8:	693a      	ldr	r2, [r7, #16]
 801a4ea:	69bb      	ldr	r3, [r7, #24]
 801a4ec:	441a      	add	r2, r3
 801a4ee:	683b      	ldr	r3, [r7, #0]
 801a4f0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801a4f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a4f4:	2b1f      	cmp	r3, #31
 801a4f6:	d801      	bhi.n	801a4fc <create_name+0xcc>
 801a4f8:	2304      	movs	r3, #4
 801a4fa:	e000      	b.n	801a4fe <create_name+0xce>
 801a4fc:	2300      	movs	r3, #0
 801a4fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801a502:	e011      	b.n	801a528 <create_name+0xf8>
		w = lfn[di - 1];
 801a504:	697a      	ldr	r2, [r7, #20]
 801a506:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801a50a:	4413      	add	r3, r2
 801a50c:	005b      	lsls	r3, r3, #1
 801a50e:	68fa      	ldr	r2, [r7, #12]
 801a510:	4413      	add	r3, r2
 801a512:	881b      	ldrh	r3, [r3, #0]
 801a514:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801a516:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a518:	2b20      	cmp	r3, #32
 801a51a:	d002      	beq.n	801a522 <create_name+0xf2>
 801a51c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a51e:	2b2e      	cmp	r3, #46	; 0x2e
 801a520:	d106      	bne.n	801a530 <create_name+0x100>
		di--;
 801a522:	697b      	ldr	r3, [r7, #20]
 801a524:	3b01      	subs	r3, #1
 801a526:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801a528:	697b      	ldr	r3, [r7, #20]
 801a52a:	2b00      	cmp	r3, #0
 801a52c:	d1ea      	bne.n	801a504 <create_name+0xd4>
 801a52e:	e000      	b.n	801a532 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801a530:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801a532:	697b      	ldr	r3, [r7, #20]
 801a534:	005b      	lsls	r3, r3, #1
 801a536:	68fa      	ldr	r2, [r7, #12]
 801a538:	4413      	add	r3, r2
 801a53a:	2200      	movs	r2, #0
 801a53c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801a53e:	697b      	ldr	r3, [r7, #20]
 801a540:	2b00      	cmp	r3, #0
 801a542:	d101      	bne.n	801a548 <create_name+0x118>
 801a544:	2306      	movs	r3, #6
 801a546:	e127      	b.n	801a798 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	3324      	adds	r3, #36	; 0x24
 801a54c:	220b      	movs	r2, #11
 801a54e:	2120      	movs	r1, #32
 801a550:	4618      	mov	r0, r3
 801a552:	f7fe fc58 	bl	8018e06 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801a556:	2300      	movs	r3, #0
 801a558:	61bb      	str	r3, [r7, #24]
 801a55a:	e002      	b.n	801a562 <create_name+0x132>
 801a55c:	69bb      	ldr	r3, [r7, #24]
 801a55e:	3301      	adds	r3, #1
 801a560:	61bb      	str	r3, [r7, #24]
 801a562:	69bb      	ldr	r3, [r7, #24]
 801a564:	005b      	lsls	r3, r3, #1
 801a566:	68fa      	ldr	r2, [r7, #12]
 801a568:	4413      	add	r3, r2
 801a56a:	881b      	ldrh	r3, [r3, #0]
 801a56c:	2b20      	cmp	r3, #32
 801a56e:	d0f5      	beq.n	801a55c <create_name+0x12c>
 801a570:	69bb      	ldr	r3, [r7, #24]
 801a572:	005b      	lsls	r3, r3, #1
 801a574:	68fa      	ldr	r2, [r7, #12]
 801a576:	4413      	add	r3, r2
 801a578:	881b      	ldrh	r3, [r3, #0]
 801a57a:	2b2e      	cmp	r3, #46	; 0x2e
 801a57c:	d0ee      	beq.n	801a55c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801a57e:	69bb      	ldr	r3, [r7, #24]
 801a580:	2b00      	cmp	r3, #0
 801a582:	d009      	beq.n	801a598 <create_name+0x168>
 801a584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a588:	f043 0303 	orr.w	r3, r3, #3
 801a58c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801a590:	e002      	b.n	801a598 <create_name+0x168>
 801a592:	697b      	ldr	r3, [r7, #20]
 801a594:	3b01      	subs	r3, #1
 801a596:	617b      	str	r3, [r7, #20]
 801a598:	697b      	ldr	r3, [r7, #20]
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d009      	beq.n	801a5b2 <create_name+0x182>
 801a59e:	697a      	ldr	r2, [r7, #20]
 801a5a0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801a5a4:	4413      	add	r3, r2
 801a5a6:	005b      	lsls	r3, r3, #1
 801a5a8:	68fa      	ldr	r2, [r7, #12]
 801a5aa:	4413      	add	r3, r2
 801a5ac:	881b      	ldrh	r3, [r3, #0]
 801a5ae:	2b2e      	cmp	r3, #46	; 0x2e
 801a5b0:	d1ef      	bne.n	801a592 <create_name+0x162>

	i = b = 0; ni = 8;
 801a5b2:	2300      	movs	r3, #0
 801a5b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a5b8:	2300      	movs	r3, #0
 801a5ba:	623b      	str	r3, [r7, #32]
 801a5bc:	2308      	movs	r3, #8
 801a5be:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801a5c0:	69bb      	ldr	r3, [r7, #24]
 801a5c2:	1c5a      	adds	r2, r3, #1
 801a5c4:	61ba      	str	r2, [r7, #24]
 801a5c6:	005b      	lsls	r3, r3, #1
 801a5c8:	68fa      	ldr	r2, [r7, #12]
 801a5ca:	4413      	add	r3, r2
 801a5cc:	881b      	ldrh	r3, [r3, #0]
 801a5ce:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801a5d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	f000 8090 	beq.w	801a6f8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801a5d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a5da:	2b20      	cmp	r3, #32
 801a5dc:	d006      	beq.n	801a5ec <create_name+0x1bc>
 801a5de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a5e0:	2b2e      	cmp	r3, #46	; 0x2e
 801a5e2:	d10a      	bne.n	801a5fa <create_name+0x1ca>
 801a5e4:	69ba      	ldr	r2, [r7, #24]
 801a5e6:	697b      	ldr	r3, [r7, #20]
 801a5e8:	429a      	cmp	r2, r3
 801a5ea:	d006      	beq.n	801a5fa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801a5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5f0:	f043 0303 	orr.w	r3, r3, #3
 801a5f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a5f8:	e07d      	b.n	801a6f6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801a5fa:	6a3a      	ldr	r2, [r7, #32]
 801a5fc:	69fb      	ldr	r3, [r7, #28]
 801a5fe:	429a      	cmp	r2, r3
 801a600:	d203      	bcs.n	801a60a <create_name+0x1da>
 801a602:	69ba      	ldr	r2, [r7, #24]
 801a604:	697b      	ldr	r3, [r7, #20]
 801a606:	429a      	cmp	r2, r3
 801a608:	d123      	bne.n	801a652 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801a60a:	69fb      	ldr	r3, [r7, #28]
 801a60c:	2b0b      	cmp	r3, #11
 801a60e:	d106      	bne.n	801a61e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801a610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a614:	f043 0303 	orr.w	r3, r3, #3
 801a618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a61c:	e075      	b.n	801a70a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801a61e:	69ba      	ldr	r2, [r7, #24]
 801a620:	697b      	ldr	r3, [r7, #20]
 801a622:	429a      	cmp	r2, r3
 801a624:	d005      	beq.n	801a632 <create_name+0x202>
 801a626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a62a:	f043 0303 	orr.w	r3, r3, #3
 801a62e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801a632:	69ba      	ldr	r2, [r7, #24]
 801a634:	697b      	ldr	r3, [r7, #20]
 801a636:	429a      	cmp	r2, r3
 801a638:	d866      	bhi.n	801a708 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801a63a:	697b      	ldr	r3, [r7, #20]
 801a63c:	61bb      	str	r3, [r7, #24]
 801a63e:	2308      	movs	r3, #8
 801a640:	623b      	str	r3, [r7, #32]
 801a642:	230b      	movs	r3, #11
 801a644:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801a646:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a64a:	009b      	lsls	r3, r3, #2
 801a64c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a650:	e051      	b.n	801a6f6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801a652:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a654:	2b7f      	cmp	r3, #127	; 0x7f
 801a656:	d914      	bls.n	801a682 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801a658:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a65a:	2100      	movs	r1, #0
 801a65c:	4618      	mov	r0, r3
 801a65e:	f001 fa0b 	bl	801ba78 <ff_convert>
 801a662:	4603      	mov	r3, r0
 801a664:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801a666:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a668:	2b00      	cmp	r3, #0
 801a66a:	d004      	beq.n	801a676 <create_name+0x246>
 801a66c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a66e:	3b80      	subs	r3, #128	; 0x80
 801a670:	4a23      	ldr	r2, [pc, #140]	; (801a700 <create_name+0x2d0>)
 801a672:	5cd3      	ldrb	r3, [r2, r3]
 801a674:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801a676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a67a:	f043 0302 	orr.w	r3, r3, #2
 801a67e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801a682:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a684:	2b00      	cmp	r3, #0
 801a686:	d007      	beq.n	801a698 <create_name+0x268>
 801a688:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a68a:	4619      	mov	r1, r3
 801a68c:	481d      	ldr	r0, [pc, #116]	; (801a704 <create_name+0x2d4>)
 801a68e:	f7fe fbfc 	bl	8018e8a <chk_chr>
 801a692:	4603      	mov	r3, r0
 801a694:	2b00      	cmp	r3, #0
 801a696:	d008      	beq.n	801a6aa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801a698:	235f      	movs	r3, #95	; 0x5f
 801a69a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801a69c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a6a0:	f043 0303 	orr.w	r3, r3, #3
 801a6a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a6a8:	e01b      	b.n	801a6e2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801a6aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a6ac:	2b40      	cmp	r3, #64	; 0x40
 801a6ae:	d909      	bls.n	801a6c4 <create_name+0x294>
 801a6b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a6b2:	2b5a      	cmp	r3, #90	; 0x5a
 801a6b4:	d806      	bhi.n	801a6c4 <create_name+0x294>
					b |= 2;
 801a6b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a6ba:	f043 0302 	orr.w	r3, r3, #2
 801a6be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a6c2:	e00e      	b.n	801a6e2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801a6c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a6c6:	2b60      	cmp	r3, #96	; 0x60
 801a6c8:	d90b      	bls.n	801a6e2 <create_name+0x2b2>
 801a6ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a6cc:	2b7a      	cmp	r3, #122	; 0x7a
 801a6ce:	d808      	bhi.n	801a6e2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801a6d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a6d4:	f043 0301 	orr.w	r3, r3, #1
 801a6d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a6dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a6de:	3b20      	subs	r3, #32
 801a6e0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801a6e2:	6a3b      	ldr	r3, [r7, #32]
 801a6e4:	1c5a      	adds	r2, r3, #1
 801a6e6:	623a      	str	r2, [r7, #32]
 801a6e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a6ea:	b2d1      	uxtb	r1, r2
 801a6ec:	687a      	ldr	r2, [r7, #4]
 801a6ee:	4413      	add	r3, r2
 801a6f0:	460a      	mov	r2, r1
 801a6f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801a6f6:	e763      	b.n	801a5c0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801a6f8:	bf00      	nop
 801a6fa:	e006      	b.n	801a70a <create_name+0x2da>
 801a6fc:	08022830 	.word	0x08022830
 801a700:	080228f0 	.word	0x080228f0
 801a704:	0802283c 	.word	0x0802283c
			if (si > di) break;			/* No extension */
 801a708:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a710:	2be5      	cmp	r3, #229	; 0xe5
 801a712:	d103      	bne.n	801a71c <create_name+0x2ec>
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	2205      	movs	r2, #5
 801a718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 801a71c:	69fb      	ldr	r3, [r7, #28]
 801a71e:	2b08      	cmp	r3, #8
 801a720:	d104      	bne.n	801a72c <create_name+0x2fc>
 801a722:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a726:	009b      	lsls	r3, r3, #2
 801a728:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801a72c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a730:	f003 030c 	and.w	r3, r3, #12
 801a734:	2b0c      	cmp	r3, #12
 801a736:	d005      	beq.n	801a744 <create_name+0x314>
 801a738:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a73c:	f003 0303 	and.w	r3, r3, #3
 801a740:	2b03      	cmp	r3, #3
 801a742:	d105      	bne.n	801a750 <create_name+0x320>
 801a744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a748:	f043 0302 	orr.w	r3, r3, #2
 801a74c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801a750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a754:	f003 0302 	and.w	r3, r3, #2
 801a758:	2b00      	cmp	r3, #0
 801a75a:	d117      	bne.n	801a78c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801a75c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a760:	f003 0303 	and.w	r3, r3, #3
 801a764:	2b01      	cmp	r3, #1
 801a766:	d105      	bne.n	801a774 <create_name+0x344>
 801a768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a76c:	f043 0310 	orr.w	r3, r3, #16
 801a770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801a774:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a778:	f003 030c 	and.w	r3, r3, #12
 801a77c:	2b04      	cmp	r3, #4
 801a77e:	d105      	bne.n	801a78c <create_name+0x35c>
 801a780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a784:	f043 0308 	orr.w	r3, r3, #8
 801a788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a792:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801a796:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801a798:	4618      	mov	r0, r3
 801a79a:	3728      	adds	r7, #40	; 0x28
 801a79c:	46bd      	mov	sp, r7
 801a79e:	bd80      	pop	{r7, pc}

0801a7a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801a7a0:	b580      	push	{r7, lr}
 801a7a2:	b086      	sub	sp, #24
 801a7a4:	af00      	add	r7, sp, #0
 801a7a6:	6078      	str	r0, [r7, #4]
 801a7a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801a7ae:	693b      	ldr	r3, [r7, #16]
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801a7b4:	e002      	b.n	801a7bc <follow_path+0x1c>
 801a7b6:	683b      	ldr	r3, [r7, #0]
 801a7b8:	3301      	adds	r3, #1
 801a7ba:	603b      	str	r3, [r7, #0]
 801a7bc:	683b      	ldr	r3, [r7, #0]
 801a7be:	781b      	ldrb	r3, [r3, #0]
 801a7c0:	2b2f      	cmp	r3, #47	; 0x2f
 801a7c2:	d0f8      	beq.n	801a7b6 <follow_path+0x16>
 801a7c4:	683b      	ldr	r3, [r7, #0]
 801a7c6:	781b      	ldrb	r3, [r3, #0]
 801a7c8:	2b5c      	cmp	r3, #92	; 0x5c
 801a7ca:	d0f4      	beq.n	801a7b6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801a7cc:	693b      	ldr	r3, [r7, #16]
 801a7ce:	2200      	movs	r2, #0
 801a7d0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801a7d2:	683b      	ldr	r3, [r7, #0]
 801a7d4:	781b      	ldrb	r3, [r3, #0]
 801a7d6:	2b1f      	cmp	r3, #31
 801a7d8:	d80a      	bhi.n	801a7f0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	2280      	movs	r2, #128	; 0x80
 801a7de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801a7e2:	2100      	movs	r1, #0
 801a7e4:	6878      	ldr	r0, [r7, #4]
 801a7e6:	f7ff f8fd 	bl	80199e4 <dir_sdi>
 801a7ea:	4603      	mov	r3, r0
 801a7ec:	75fb      	strb	r3, [r7, #23]
 801a7ee:	e048      	b.n	801a882 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801a7f0:	463b      	mov	r3, r7
 801a7f2:	4619      	mov	r1, r3
 801a7f4:	6878      	ldr	r0, [r7, #4]
 801a7f6:	f7ff fe1b 	bl	801a430 <create_name>
 801a7fa:	4603      	mov	r3, r0
 801a7fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801a7fe:	7dfb      	ldrb	r3, [r7, #23]
 801a800:	2b00      	cmp	r3, #0
 801a802:	d139      	bne.n	801a878 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801a804:	6878      	ldr	r0, [r7, #4]
 801a806:	f7ff fc5a 	bl	801a0be <dir_find>
 801a80a:	4603      	mov	r3, r0
 801a80c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801a814:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801a816:	7dfb      	ldrb	r3, [r7, #23]
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d00a      	beq.n	801a832 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801a81c:	7dfb      	ldrb	r3, [r7, #23]
 801a81e:	2b04      	cmp	r3, #4
 801a820:	d12c      	bne.n	801a87c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801a822:	7afb      	ldrb	r3, [r7, #11]
 801a824:	f003 0304 	and.w	r3, r3, #4
 801a828:	2b00      	cmp	r3, #0
 801a82a:	d127      	bne.n	801a87c <follow_path+0xdc>
 801a82c:	2305      	movs	r3, #5
 801a82e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801a830:	e024      	b.n	801a87c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801a832:	7afb      	ldrb	r3, [r7, #11]
 801a834:	f003 0304 	and.w	r3, r3, #4
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d121      	bne.n	801a880 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801a83c:	693b      	ldr	r3, [r7, #16]
 801a83e:	799b      	ldrb	r3, [r3, #6]
 801a840:	f003 0310 	and.w	r3, r3, #16
 801a844:	2b00      	cmp	r3, #0
 801a846:	d102      	bne.n	801a84e <follow_path+0xae>
				res = FR_NO_PATH; break;
 801a848:	2305      	movs	r3, #5
 801a84a:	75fb      	strb	r3, [r7, #23]
 801a84c:	e019      	b.n	801a882 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801a84e:	68fb      	ldr	r3, [r7, #12]
 801a850:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	695b      	ldr	r3, [r3, #20]
 801a858:	68fa      	ldr	r2, [r7, #12]
 801a85a:	8992      	ldrh	r2, [r2, #12]
 801a85c:	fbb3 f0f2 	udiv	r0, r3, r2
 801a860:	fb00 f202 	mul.w	r2, r0, r2
 801a864:	1a9b      	subs	r3, r3, r2
 801a866:	440b      	add	r3, r1
 801a868:	4619      	mov	r1, r3
 801a86a:	68f8      	ldr	r0, [r7, #12]
 801a86c:	f7ff fa60 	bl	8019d30 <ld_clust>
 801a870:	4602      	mov	r2, r0
 801a872:	693b      	ldr	r3, [r7, #16]
 801a874:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801a876:	e7bb      	b.n	801a7f0 <follow_path+0x50>
			if (res != FR_OK) break;
 801a878:	bf00      	nop
 801a87a:	e002      	b.n	801a882 <follow_path+0xe2>
				break;
 801a87c:	bf00      	nop
 801a87e:	e000      	b.n	801a882 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801a880:	bf00      	nop
			}
		}
	}

	return res;
 801a882:	7dfb      	ldrb	r3, [r7, #23]
}
 801a884:	4618      	mov	r0, r3
 801a886:	3718      	adds	r7, #24
 801a888:	46bd      	mov	sp, r7
 801a88a:	bd80      	pop	{r7, pc}

0801a88c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801a88c:	b480      	push	{r7}
 801a88e:	b087      	sub	sp, #28
 801a890:	af00      	add	r7, sp, #0
 801a892:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801a894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a898:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d031      	beq.n	801a906 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	617b      	str	r3, [r7, #20]
 801a8a8:	e002      	b.n	801a8b0 <get_ldnumber+0x24>
 801a8aa:	697b      	ldr	r3, [r7, #20]
 801a8ac:	3301      	adds	r3, #1
 801a8ae:	617b      	str	r3, [r7, #20]
 801a8b0:	697b      	ldr	r3, [r7, #20]
 801a8b2:	781b      	ldrb	r3, [r3, #0]
 801a8b4:	2b1f      	cmp	r3, #31
 801a8b6:	d903      	bls.n	801a8c0 <get_ldnumber+0x34>
 801a8b8:	697b      	ldr	r3, [r7, #20]
 801a8ba:	781b      	ldrb	r3, [r3, #0]
 801a8bc:	2b3a      	cmp	r3, #58	; 0x3a
 801a8be:	d1f4      	bne.n	801a8aa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801a8c0:	697b      	ldr	r3, [r7, #20]
 801a8c2:	781b      	ldrb	r3, [r3, #0]
 801a8c4:	2b3a      	cmp	r3, #58	; 0x3a
 801a8c6:	d11c      	bne.n	801a902 <get_ldnumber+0x76>
			tp = *path;
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801a8ce:	68fb      	ldr	r3, [r7, #12]
 801a8d0:	1c5a      	adds	r2, r3, #1
 801a8d2:	60fa      	str	r2, [r7, #12]
 801a8d4:	781b      	ldrb	r3, [r3, #0]
 801a8d6:	3b30      	subs	r3, #48	; 0x30
 801a8d8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801a8da:	68bb      	ldr	r3, [r7, #8]
 801a8dc:	2b09      	cmp	r3, #9
 801a8de:	d80e      	bhi.n	801a8fe <get_ldnumber+0x72>
 801a8e0:	68fa      	ldr	r2, [r7, #12]
 801a8e2:	697b      	ldr	r3, [r7, #20]
 801a8e4:	429a      	cmp	r2, r3
 801a8e6:	d10a      	bne.n	801a8fe <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801a8e8:	68bb      	ldr	r3, [r7, #8]
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d107      	bne.n	801a8fe <get_ldnumber+0x72>
					vol = (int)i;
 801a8ee:	68bb      	ldr	r3, [r7, #8]
 801a8f0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801a8f2:	697b      	ldr	r3, [r7, #20]
 801a8f4:	3301      	adds	r3, #1
 801a8f6:	617b      	str	r3, [r7, #20]
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	697a      	ldr	r2, [r7, #20]
 801a8fc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801a8fe:	693b      	ldr	r3, [r7, #16]
 801a900:	e002      	b.n	801a908 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801a902:	2300      	movs	r3, #0
 801a904:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801a906:	693b      	ldr	r3, [r7, #16]
}
 801a908:	4618      	mov	r0, r3
 801a90a:	371c      	adds	r7, #28
 801a90c:	46bd      	mov	sp, r7
 801a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a912:	4770      	bx	lr

0801a914 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801a914:	b580      	push	{r7, lr}
 801a916:	b082      	sub	sp, #8
 801a918:	af00      	add	r7, sp, #0
 801a91a:	6078      	str	r0, [r7, #4]
 801a91c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	2200      	movs	r2, #0
 801a922:	70da      	strb	r2, [r3, #3]
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a92a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801a92c:	6839      	ldr	r1, [r7, #0]
 801a92e:	6878      	ldr	r0, [r7, #4]
 801a930:	f7fe fc76 	bl	8019220 <move_window>
 801a934:	4603      	mov	r3, r0
 801a936:	2b00      	cmp	r3, #0
 801a938:	d001      	beq.n	801a93e <check_fs+0x2a>
 801a93a:	2304      	movs	r3, #4
 801a93c:	e038      	b.n	801a9b0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	3338      	adds	r3, #56	; 0x38
 801a942:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801a946:	4618      	mov	r0, r3
 801a948:	f7fe f9ba 	bl	8018cc0 <ld_word>
 801a94c:	4603      	mov	r3, r0
 801a94e:	461a      	mov	r2, r3
 801a950:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801a954:	429a      	cmp	r2, r3
 801a956:	d001      	beq.n	801a95c <check_fs+0x48>
 801a958:	2303      	movs	r3, #3
 801a95a:	e029      	b.n	801a9b0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a962:	2be9      	cmp	r3, #233	; 0xe9
 801a964:	d009      	beq.n	801a97a <check_fs+0x66>
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a96c:	2beb      	cmp	r3, #235	; 0xeb
 801a96e:	d11e      	bne.n	801a9ae <check_fs+0x9a>
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801a976:	2b90      	cmp	r3, #144	; 0x90
 801a978:	d119      	bne.n	801a9ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	3338      	adds	r3, #56	; 0x38
 801a97e:	3336      	adds	r3, #54	; 0x36
 801a980:	4618      	mov	r0, r3
 801a982:	f7fe f9b5 	bl	8018cf0 <ld_dword>
 801a986:	4603      	mov	r3, r0
 801a988:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801a98c:	4a0a      	ldr	r2, [pc, #40]	; (801a9b8 <check_fs+0xa4>)
 801a98e:	4293      	cmp	r3, r2
 801a990:	d101      	bne.n	801a996 <check_fs+0x82>
 801a992:	2300      	movs	r3, #0
 801a994:	e00c      	b.n	801a9b0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	3338      	adds	r3, #56	; 0x38
 801a99a:	3352      	adds	r3, #82	; 0x52
 801a99c:	4618      	mov	r0, r3
 801a99e:	f7fe f9a7 	bl	8018cf0 <ld_dword>
 801a9a2:	4603      	mov	r3, r0
 801a9a4:	4a05      	ldr	r2, [pc, #20]	; (801a9bc <check_fs+0xa8>)
 801a9a6:	4293      	cmp	r3, r2
 801a9a8:	d101      	bne.n	801a9ae <check_fs+0x9a>
 801a9aa:	2300      	movs	r3, #0
 801a9ac:	e000      	b.n	801a9b0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801a9ae:	2302      	movs	r3, #2
}
 801a9b0:	4618      	mov	r0, r3
 801a9b2:	3708      	adds	r7, #8
 801a9b4:	46bd      	mov	sp, r7
 801a9b6:	bd80      	pop	{r7, pc}
 801a9b8:	00544146 	.word	0x00544146
 801a9bc:	33544146 	.word	0x33544146

0801a9c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801a9c0:	b580      	push	{r7, lr}
 801a9c2:	b096      	sub	sp, #88	; 0x58
 801a9c4:	af00      	add	r7, sp, #0
 801a9c6:	60f8      	str	r0, [r7, #12]
 801a9c8:	60b9      	str	r1, [r7, #8]
 801a9ca:	4613      	mov	r3, r2
 801a9cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801a9ce:	68bb      	ldr	r3, [r7, #8]
 801a9d0:	2200      	movs	r2, #0
 801a9d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801a9d4:	68f8      	ldr	r0, [r7, #12]
 801a9d6:	f7ff ff59 	bl	801a88c <get_ldnumber>
 801a9da:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801a9dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	da01      	bge.n	801a9e6 <find_volume+0x26>
 801a9e2:	230b      	movs	r3, #11
 801a9e4:	e262      	b.n	801aeac <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801a9e6:	4a9f      	ldr	r2, [pc, #636]	; (801ac64 <find_volume+0x2a4>)
 801a9e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a9ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a9ee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801a9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a9f2:	2b00      	cmp	r3, #0
 801a9f4:	d101      	bne.n	801a9fa <find_volume+0x3a>
 801a9f6:	230c      	movs	r3, #12
 801a9f8:	e258      	b.n	801aeac <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801a9fa:	68bb      	ldr	r3, [r7, #8]
 801a9fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a9fe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801aa00:	79fb      	ldrb	r3, [r7, #7]
 801aa02:	f023 0301 	bic.w	r3, r3, #1
 801aa06:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801aa08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa0a:	781b      	ldrb	r3, [r3, #0]
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	d01a      	beq.n	801aa46 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801aa10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa12:	785b      	ldrb	r3, [r3, #1]
 801aa14:	4618      	mov	r0, r3
 801aa16:	f7fe f8b5 	bl	8018b84 <disk_status>
 801aa1a:	4603      	mov	r3, r0
 801aa1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801aa20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801aa24:	f003 0301 	and.w	r3, r3, #1
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d10c      	bne.n	801aa46 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801aa2c:	79fb      	ldrb	r3, [r7, #7]
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d007      	beq.n	801aa42 <find_volume+0x82>
 801aa32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801aa36:	f003 0304 	and.w	r3, r3, #4
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d001      	beq.n	801aa42 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801aa3e:	230a      	movs	r3, #10
 801aa40:	e234      	b.n	801aeac <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 801aa42:	2300      	movs	r3, #0
 801aa44:	e232      	b.n	801aeac <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801aa46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa48:	2200      	movs	r2, #0
 801aa4a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801aa4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aa4e:	b2da      	uxtb	r2, r3
 801aa50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa52:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801aa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa56:	785b      	ldrb	r3, [r3, #1]
 801aa58:	4618      	mov	r0, r3
 801aa5a:	f7fe f8ad 	bl	8018bb8 <disk_initialize>
 801aa5e:	4603      	mov	r3, r0
 801aa60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801aa64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801aa68:	f003 0301 	and.w	r3, r3, #1
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	d001      	beq.n	801aa74 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801aa70:	2303      	movs	r3, #3
 801aa72:	e21b      	b.n	801aeac <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801aa74:	79fb      	ldrb	r3, [r7, #7]
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d007      	beq.n	801aa8a <find_volume+0xca>
 801aa7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801aa7e:	f003 0304 	and.w	r3, r3, #4
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d001      	beq.n	801aa8a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801aa86:	230a      	movs	r3, #10
 801aa88:	e210      	b.n	801aeac <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801aa8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa8c:	7858      	ldrb	r0, [r3, #1]
 801aa8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa90:	330c      	adds	r3, #12
 801aa92:	461a      	mov	r2, r3
 801aa94:	2102      	movs	r1, #2
 801aa96:	f7fe f8f5 	bl	8018c84 <disk_ioctl>
 801aa9a:	4603      	mov	r3, r0
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d001      	beq.n	801aaa4 <find_volume+0xe4>
 801aaa0:	2301      	movs	r3, #1
 801aaa2:	e203      	b.n	801aeac <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801aaa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aaa6:	899b      	ldrh	r3, [r3, #12]
 801aaa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801aaac:	d80d      	bhi.n	801aaca <find_volume+0x10a>
 801aaae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aab0:	899b      	ldrh	r3, [r3, #12]
 801aab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801aab6:	d308      	bcc.n	801aaca <find_volume+0x10a>
 801aab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aaba:	899b      	ldrh	r3, [r3, #12]
 801aabc:	461a      	mov	r2, r3
 801aabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aac0:	899b      	ldrh	r3, [r3, #12]
 801aac2:	3b01      	subs	r3, #1
 801aac4:	4013      	ands	r3, r2
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d001      	beq.n	801aace <find_volume+0x10e>
 801aaca:	2301      	movs	r3, #1
 801aacc:	e1ee      	b.n	801aeac <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801aace:	2300      	movs	r3, #0
 801aad0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801aad2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801aad4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801aad6:	f7ff ff1d 	bl	801a914 <check_fs>
 801aada:	4603      	mov	r3, r0
 801aadc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801aae0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801aae4:	2b02      	cmp	r3, #2
 801aae6:	d149      	bne.n	801ab7c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801aae8:	2300      	movs	r3, #0
 801aaea:	643b      	str	r3, [r7, #64]	; 0x40
 801aaec:	e01e      	b.n	801ab2c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801aaee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aaf0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801aaf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aaf6:	011b      	lsls	r3, r3, #4
 801aaf8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801aafc:	4413      	add	r3, r2
 801aafe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801ab00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab02:	3304      	adds	r3, #4
 801ab04:	781b      	ldrb	r3, [r3, #0]
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d006      	beq.n	801ab18 <find_volume+0x158>
 801ab0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab0c:	3308      	adds	r3, #8
 801ab0e:	4618      	mov	r0, r3
 801ab10:	f7fe f8ee 	bl	8018cf0 <ld_dword>
 801ab14:	4602      	mov	r2, r0
 801ab16:	e000      	b.n	801ab1a <find_volume+0x15a>
 801ab18:	2200      	movs	r2, #0
 801ab1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ab1c:	009b      	lsls	r3, r3, #2
 801ab1e:	3358      	adds	r3, #88	; 0x58
 801ab20:	443b      	add	r3, r7
 801ab22:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801ab26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ab28:	3301      	adds	r3, #1
 801ab2a:	643b      	str	r3, [r7, #64]	; 0x40
 801ab2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ab2e:	2b03      	cmp	r3, #3
 801ab30:	d9dd      	bls.n	801aaee <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801ab32:	2300      	movs	r3, #0
 801ab34:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801ab36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d002      	beq.n	801ab42 <find_volume+0x182>
 801ab3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ab3e:	3b01      	subs	r3, #1
 801ab40:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801ab42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ab44:	009b      	lsls	r3, r3, #2
 801ab46:	3358      	adds	r3, #88	; 0x58
 801ab48:	443b      	add	r3, r7
 801ab4a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801ab4e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801ab50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab52:	2b00      	cmp	r3, #0
 801ab54:	d005      	beq.n	801ab62 <find_volume+0x1a2>
 801ab56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801ab58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801ab5a:	f7ff fedb 	bl	801a914 <check_fs>
 801ab5e:	4603      	mov	r3, r0
 801ab60:	e000      	b.n	801ab64 <find_volume+0x1a4>
 801ab62:	2303      	movs	r3, #3
 801ab64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801ab68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801ab6c:	2b01      	cmp	r3, #1
 801ab6e:	d905      	bls.n	801ab7c <find_volume+0x1bc>
 801ab70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ab72:	3301      	adds	r3, #1
 801ab74:	643b      	str	r3, [r7, #64]	; 0x40
 801ab76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ab78:	2b03      	cmp	r3, #3
 801ab7a:	d9e2      	bls.n	801ab42 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801ab7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801ab80:	2b04      	cmp	r3, #4
 801ab82:	d101      	bne.n	801ab88 <find_volume+0x1c8>
 801ab84:	2301      	movs	r3, #1
 801ab86:	e191      	b.n	801aeac <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801ab88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801ab8c:	2b01      	cmp	r3, #1
 801ab8e:	d901      	bls.n	801ab94 <find_volume+0x1d4>
 801ab90:	230d      	movs	r3, #13
 801ab92:	e18b      	b.n	801aeac <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801ab94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ab96:	3338      	adds	r3, #56	; 0x38
 801ab98:	330b      	adds	r3, #11
 801ab9a:	4618      	mov	r0, r3
 801ab9c:	f7fe f890 	bl	8018cc0 <ld_word>
 801aba0:	4603      	mov	r3, r0
 801aba2:	461a      	mov	r2, r3
 801aba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aba6:	899b      	ldrh	r3, [r3, #12]
 801aba8:	429a      	cmp	r2, r3
 801abaa:	d001      	beq.n	801abb0 <find_volume+0x1f0>
 801abac:	230d      	movs	r3, #13
 801abae:	e17d      	b.n	801aeac <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801abb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abb2:	3338      	adds	r3, #56	; 0x38
 801abb4:	3316      	adds	r3, #22
 801abb6:	4618      	mov	r0, r3
 801abb8:	f7fe f882 	bl	8018cc0 <ld_word>
 801abbc:	4603      	mov	r3, r0
 801abbe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801abc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	d106      	bne.n	801abd4 <find_volume+0x214>
 801abc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abc8:	3338      	adds	r3, #56	; 0x38
 801abca:	3324      	adds	r3, #36	; 0x24
 801abcc:	4618      	mov	r0, r3
 801abce:	f7fe f88f 	bl	8018cf0 <ld_dword>
 801abd2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801abd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801abd8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801abda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abdc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801abe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abe2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801abe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abe6:	789b      	ldrb	r3, [r3, #2]
 801abe8:	2b01      	cmp	r3, #1
 801abea:	d005      	beq.n	801abf8 <find_volume+0x238>
 801abec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abee:	789b      	ldrb	r3, [r3, #2]
 801abf0:	2b02      	cmp	r3, #2
 801abf2:	d001      	beq.n	801abf8 <find_volume+0x238>
 801abf4:	230d      	movs	r3, #13
 801abf6:	e159      	b.n	801aeac <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801abf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abfa:	789b      	ldrb	r3, [r3, #2]
 801abfc:	461a      	mov	r2, r3
 801abfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ac00:	fb02 f303 	mul.w	r3, r2, r3
 801ac04:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801ac06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ac0c:	b29a      	uxth	r2, r3
 801ac0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac10:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801ac12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac14:	895b      	ldrh	r3, [r3, #10]
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d008      	beq.n	801ac2c <find_volume+0x26c>
 801ac1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac1c:	895b      	ldrh	r3, [r3, #10]
 801ac1e:	461a      	mov	r2, r3
 801ac20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac22:	895b      	ldrh	r3, [r3, #10]
 801ac24:	3b01      	subs	r3, #1
 801ac26:	4013      	ands	r3, r2
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	d001      	beq.n	801ac30 <find_volume+0x270>
 801ac2c:	230d      	movs	r3, #13
 801ac2e:	e13d      	b.n	801aeac <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801ac30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac32:	3338      	adds	r3, #56	; 0x38
 801ac34:	3311      	adds	r3, #17
 801ac36:	4618      	mov	r0, r3
 801ac38:	f7fe f842 	bl	8018cc0 <ld_word>
 801ac3c:	4603      	mov	r3, r0
 801ac3e:	461a      	mov	r2, r3
 801ac40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac42:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801ac44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac46:	891b      	ldrh	r3, [r3, #8]
 801ac48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ac4a:	8992      	ldrh	r2, [r2, #12]
 801ac4c:	0952      	lsrs	r2, r2, #5
 801ac4e:	b292      	uxth	r2, r2
 801ac50:	fbb3 f1f2 	udiv	r1, r3, r2
 801ac54:	fb01 f202 	mul.w	r2, r1, r2
 801ac58:	1a9b      	subs	r3, r3, r2
 801ac5a:	b29b      	uxth	r3, r3
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d003      	beq.n	801ac68 <find_volume+0x2a8>
 801ac60:	230d      	movs	r3, #13
 801ac62:	e123      	b.n	801aeac <find_volume+0x4ec>
 801ac64:	20007558 	.word	0x20007558

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801ac68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac6a:	3338      	adds	r3, #56	; 0x38
 801ac6c:	3313      	adds	r3, #19
 801ac6e:	4618      	mov	r0, r3
 801ac70:	f7fe f826 	bl	8018cc0 <ld_word>
 801ac74:	4603      	mov	r3, r0
 801ac76:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801ac78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	d106      	bne.n	801ac8c <find_volume+0x2cc>
 801ac7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac80:	3338      	adds	r3, #56	; 0x38
 801ac82:	3320      	adds	r3, #32
 801ac84:	4618      	mov	r0, r3
 801ac86:	f7fe f833 	bl	8018cf0 <ld_dword>
 801ac8a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801ac8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac8e:	3338      	adds	r3, #56	; 0x38
 801ac90:	330e      	adds	r3, #14
 801ac92:	4618      	mov	r0, r3
 801ac94:	f7fe f814 	bl	8018cc0 <ld_word>
 801ac98:	4603      	mov	r3, r0
 801ac9a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801ac9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	d101      	bne.n	801aca6 <find_volume+0x2e6>
 801aca2:	230d      	movs	r3, #13
 801aca4:	e102      	b.n	801aeac <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801aca6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801aca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801acaa:	4413      	add	r3, r2
 801acac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801acae:	8911      	ldrh	r1, [r2, #8]
 801acb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801acb2:	8992      	ldrh	r2, [r2, #12]
 801acb4:	0952      	lsrs	r2, r2, #5
 801acb6:	b292      	uxth	r2, r2
 801acb8:	fbb1 f2f2 	udiv	r2, r1, r2
 801acbc:	b292      	uxth	r2, r2
 801acbe:	4413      	add	r3, r2
 801acc0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801acc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801acc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acc6:	429a      	cmp	r2, r3
 801acc8:	d201      	bcs.n	801acce <find_volume+0x30e>
 801acca:	230d      	movs	r3, #13
 801accc:	e0ee      	b.n	801aeac <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801acce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801acd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acd2:	1ad3      	subs	r3, r2, r3
 801acd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801acd6:	8952      	ldrh	r2, [r2, #10]
 801acd8:	fbb3 f3f2 	udiv	r3, r3, r2
 801acdc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801acde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d101      	bne.n	801ace8 <find_volume+0x328>
 801ace4:	230d      	movs	r3, #13
 801ace6:	e0e1      	b.n	801aeac <find_volume+0x4ec>
		fmt = FS_FAT32;
 801ace8:	2303      	movs	r3, #3
 801acea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801acee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acf0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801acf4:	4293      	cmp	r3, r2
 801acf6:	d802      	bhi.n	801acfe <find_volume+0x33e>
 801acf8:	2302      	movs	r3, #2
 801acfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801acfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad00:	f640 72f5 	movw	r2, #4085	; 0xff5
 801ad04:	4293      	cmp	r3, r2
 801ad06:	d802      	bhi.n	801ad0e <find_volume+0x34e>
 801ad08:	2301      	movs	r3, #1
 801ad0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801ad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad10:	1c9a      	adds	r2, r3, #2
 801ad12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad14:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801ad16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ad1a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801ad1c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801ad1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ad20:	441a      	add	r2, r3
 801ad22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad24:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801ad26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ad28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad2a:	441a      	add	r2, r3
 801ad2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad2e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801ad30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801ad34:	2b03      	cmp	r3, #3
 801ad36:	d11e      	bne.n	801ad76 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801ad38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad3a:	3338      	adds	r3, #56	; 0x38
 801ad3c:	332a      	adds	r3, #42	; 0x2a
 801ad3e:	4618      	mov	r0, r3
 801ad40:	f7fd ffbe 	bl	8018cc0 <ld_word>
 801ad44:	4603      	mov	r3, r0
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	d001      	beq.n	801ad4e <find_volume+0x38e>
 801ad4a:	230d      	movs	r3, #13
 801ad4c:	e0ae      	b.n	801aeac <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801ad4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad50:	891b      	ldrh	r3, [r3, #8]
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	d001      	beq.n	801ad5a <find_volume+0x39a>
 801ad56:	230d      	movs	r3, #13
 801ad58:	e0a8      	b.n	801aeac <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801ad5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad5c:	3338      	adds	r3, #56	; 0x38
 801ad5e:	332c      	adds	r3, #44	; 0x2c
 801ad60:	4618      	mov	r0, r3
 801ad62:	f7fd ffc5 	bl	8018cf0 <ld_dword>
 801ad66:	4602      	mov	r2, r0
 801ad68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad6a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801ad6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad6e:	69db      	ldr	r3, [r3, #28]
 801ad70:	009b      	lsls	r3, r3, #2
 801ad72:	647b      	str	r3, [r7, #68]	; 0x44
 801ad74:	e01f      	b.n	801adb6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801ad76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad78:	891b      	ldrh	r3, [r3, #8]
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	d101      	bne.n	801ad82 <find_volume+0x3c2>
 801ad7e:	230d      	movs	r3, #13
 801ad80:	e094      	b.n	801aeac <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801ad82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ad86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ad88:	441a      	add	r2, r3
 801ad8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad8c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801ad8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801ad92:	2b02      	cmp	r3, #2
 801ad94:	d103      	bne.n	801ad9e <find_volume+0x3de>
 801ad96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad98:	69db      	ldr	r3, [r3, #28]
 801ad9a:	005b      	lsls	r3, r3, #1
 801ad9c:	e00a      	b.n	801adb4 <find_volume+0x3f4>
 801ad9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ada0:	69da      	ldr	r2, [r3, #28]
 801ada2:	4613      	mov	r3, r2
 801ada4:	005b      	lsls	r3, r3, #1
 801ada6:	4413      	add	r3, r2
 801ada8:	085a      	lsrs	r2, r3, #1
 801adaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801adac:	69db      	ldr	r3, [r3, #28]
 801adae:	f003 0301 	and.w	r3, r3, #1
 801adb2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801adb4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801adb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801adb8:	6a1a      	ldr	r2, [r3, #32]
 801adba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801adbc:	899b      	ldrh	r3, [r3, #12]
 801adbe:	4619      	mov	r1, r3
 801adc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801adc2:	440b      	add	r3, r1
 801adc4:	3b01      	subs	r3, #1
 801adc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801adc8:	8989      	ldrh	r1, [r1, #12]
 801adca:	fbb3 f3f1 	udiv	r3, r3, r1
 801adce:	429a      	cmp	r2, r3
 801add0:	d201      	bcs.n	801add6 <find_volume+0x416>
 801add2:	230d      	movs	r3, #13
 801add4:	e06a      	b.n	801aeac <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801add6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801add8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801addc:	619a      	str	r2, [r3, #24]
 801adde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ade0:	699a      	ldr	r2, [r3, #24]
 801ade2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ade4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801ade6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ade8:	2280      	movs	r2, #128	; 0x80
 801adea:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801adec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801adf0:	2b03      	cmp	r3, #3
 801adf2:	d149      	bne.n	801ae88 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801adf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801adf6:	3338      	adds	r3, #56	; 0x38
 801adf8:	3330      	adds	r3, #48	; 0x30
 801adfa:	4618      	mov	r0, r3
 801adfc:	f7fd ff60 	bl	8018cc0 <ld_word>
 801ae00:	4603      	mov	r3, r0
 801ae02:	2b01      	cmp	r3, #1
 801ae04:	d140      	bne.n	801ae88 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801ae06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ae08:	3301      	adds	r3, #1
 801ae0a:	4619      	mov	r1, r3
 801ae0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801ae0e:	f7fe fa07 	bl	8019220 <move_window>
 801ae12:	4603      	mov	r3, r0
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	d137      	bne.n	801ae88 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801ae18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae1a:	2200      	movs	r2, #0
 801ae1c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801ae1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae20:	3338      	adds	r3, #56	; 0x38
 801ae22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801ae26:	4618      	mov	r0, r3
 801ae28:	f7fd ff4a 	bl	8018cc0 <ld_word>
 801ae2c:	4603      	mov	r3, r0
 801ae2e:	461a      	mov	r2, r3
 801ae30:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801ae34:	429a      	cmp	r2, r3
 801ae36:	d127      	bne.n	801ae88 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801ae38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae3a:	3338      	adds	r3, #56	; 0x38
 801ae3c:	4618      	mov	r0, r3
 801ae3e:	f7fd ff57 	bl	8018cf0 <ld_dword>
 801ae42:	4603      	mov	r3, r0
 801ae44:	4a1b      	ldr	r2, [pc, #108]	; (801aeb4 <find_volume+0x4f4>)
 801ae46:	4293      	cmp	r3, r2
 801ae48:	d11e      	bne.n	801ae88 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801ae4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae4c:	3338      	adds	r3, #56	; 0x38
 801ae4e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801ae52:	4618      	mov	r0, r3
 801ae54:	f7fd ff4c 	bl	8018cf0 <ld_dword>
 801ae58:	4603      	mov	r3, r0
 801ae5a:	4a17      	ldr	r2, [pc, #92]	; (801aeb8 <find_volume+0x4f8>)
 801ae5c:	4293      	cmp	r3, r2
 801ae5e:	d113      	bne.n	801ae88 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801ae60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae62:	3338      	adds	r3, #56	; 0x38
 801ae64:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801ae68:	4618      	mov	r0, r3
 801ae6a:	f7fd ff41 	bl	8018cf0 <ld_dword>
 801ae6e:	4602      	mov	r2, r0
 801ae70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae72:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801ae74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae76:	3338      	adds	r3, #56	; 0x38
 801ae78:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801ae7c:	4618      	mov	r0, r3
 801ae7e:	f7fd ff37 	bl	8018cf0 <ld_dword>
 801ae82:	4602      	mov	r2, r0
 801ae84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae86:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801ae88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae8a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801ae8e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801ae90:	4b0a      	ldr	r3, [pc, #40]	; (801aebc <find_volume+0x4fc>)
 801ae92:	881b      	ldrh	r3, [r3, #0]
 801ae94:	3301      	adds	r3, #1
 801ae96:	b29a      	uxth	r2, r3
 801ae98:	4b08      	ldr	r3, [pc, #32]	; (801aebc <find_volume+0x4fc>)
 801ae9a:	801a      	strh	r2, [r3, #0]
 801ae9c:	4b07      	ldr	r3, [pc, #28]	; (801aebc <find_volume+0x4fc>)
 801ae9e:	881a      	ldrh	r2, [r3, #0]
 801aea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aea2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801aea4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801aea6:	f7fe f953 	bl	8019150 <clear_lock>
#endif
	return FR_OK;
 801aeaa:	2300      	movs	r3, #0
}
 801aeac:	4618      	mov	r0, r3
 801aeae:	3758      	adds	r7, #88	; 0x58
 801aeb0:	46bd      	mov	sp, r7
 801aeb2:	bd80      	pop	{r7, pc}
 801aeb4:	41615252 	.word	0x41615252
 801aeb8:	61417272 	.word	0x61417272
 801aebc:	2000755c 	.word	0x2000755c

0801aec0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801aec0:	b580      	push	{r7, lr}
 801aec2:	b084      	sub	sp, #16
 801aec4:	af00      	add	r7, sp, #0
 801aec6:	6078      	str	r0, [r7, #4]
 801aec8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801aeca:	2309      	movs	r3, #9
 801aecc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	d01c      	beq.n	801af0e <validate+0x4e>
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	d018      	beq.n	801af0e <validate+0x4e>
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	781b      	ldrb	r3, [r3, #0]
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	d013      	beq.n	801af0e <validate+0x4e>
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	889a      	ldrh	r2, [r3, #4]
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	681b      	ldr	r3, [r3, #0]
 801aeee:	88db      	ldrh	r3, [r3, #6]
 801aef0:	429a      	cmp	r2, r3
 801aef2:	d10c      	bne.n	801af0e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	785b      	ldrb	r3, [r3, #1]
 801aefa:	4618      	mov	r0, r3
 801aefc:	f7fd fe42 	bl	8018b84 <disk_status>
 801af00:	4603      	mov	r3, r0
 801af02:	f003 0301 	and.w	r3, r3, #1
 801af06:	2b00      	cmp	r3, #0
 801af08:	d101      	bne.n	801af0e <validate+0x4e>
			res = FR_OK;
 801af0a:	2300      	movs	r3, #0
 801af0c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801af0e:	7bfb      	ldrb	r3, [r7, #15]
 801af10:	2b00      	cmp	r3, #0
 801af12:	d102      	bne.n	801af1a <validate+0x5a>
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	e000      	b.n	801af1c <validate+0x5c>
 801af1a:	2300      	movs	r3, #0
 801af1c:	683a      	ldr	r2, [r7, #0]
 801af1e:	6013      	str	r3, [r2, #0]
	return res;
 801af20:	7bfb      	ldrb	r3, [r7, #15]
}
 801af22:	4618      	mov	r0, r3
 801af24:	3710      	adds	r7, #16
 801af26:	46bd      	mov	sp, r7
 801af28:	bd80      	pop	{r7, pc}
	...

0801af2c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801af2c:	b580      	push	{r7, lr}
 801af2e:	b088      	sub	sp, #32
 801af30:	af00      	add	r7, sp, #0
 801af32:	60f8      	str	r0, [r7, #12]
 801af34:	60b9      	str	r1, [r7, #8]
 801af36:	4613      	mov	r3, r2
 801af38:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801af3a:	68bb      	ldr	r3, [r7, #8]
 801af3c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801af3e:	f107 0310 	add.w	r3, r7, #16
 801af42:	4618      	mov	r0, r3
 801af44:	f7ff fca2 	bl	801a88c <get_ldnumber>
 801af48:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801af4a:	69fb      	ldr	r3, [r7, #28]
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	da01      	bge.n	801af54 <f_mount+0x28>
 801af50:	230b      	movs	r3, #11
 801af52:	e02b      	b.n	801afac <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801af54:	4a17      	ldr	r2, [pc, #92]	; (801afb4 <f_mount+0x88>)
 801af56:	69fb      	ldr	r3, [r7, #28]
 801af58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801af5c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801af5e:	69bb      	ldr	r3, [r7, #24]
 801af60:	2b00      	cmp	r3, #0
 801af62:	d005      	beq.n	801af70 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801af64:	69b8      	ldr	r0, [r7, #24]
 801af66:	f7fe f8f3 	bl	8019150 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801af6a:	69bb      	ldr	r3, [r7, #24]
 801af6c:	2200      	movs	r2, #0
 801af6e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	2b00      	cmp	r3, #0
 801af74:	d002      	beq.n	801af7c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801af76:	68fb      	ldr	r3, [r7, #12]
 801af78:	2200      	movs	r2, #0
 801af7a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801af7c:	68fa      	ldr	r2, [r7, #12]
 801af7e:	490d      	ldr	r1, [pc, #52]	; (801afb4 <f_mount+0x88>)
 801af80:	69fb      	ldr	r3, [r7, #28]
 801af82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801af86:	68fb      	ldr	r3, [r7, #12]
 801af88:	2b00      	cmp	r3, #0
 801af8a:	d002      	beq.n	801af92 <f_mount+0x66>
 801af8c:	79fb      	ldrb	r3, [r7, #7]
 801af8e:	2b01      	cmp	r3, #1
 801af90:	d001      	beq.n	801af96 <f_mount+0x6a>
 801af92:	2300      	movs	r3, #0
 801af94:	e00a      	b.n	801afac <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801af96:	f107 010c 	add.w	r1, r7, #12
 801af9a:	f107 0308 	add.w	r3, r7, #8
 801af9e:	2200      	movs	r2, #0
 801afa0:	4618      	mov	r0, r3
 801afa2:	f7ff fd0d 	bl	801a9c0 <find_volume>
 801afa6:	4603      	mov	r3, r0
 801afa8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801afaa:	7dfb      	ldrb	r3, [r7, #23]
}
 801afac:	4618      	mov	r0, r3
 801afae:	3720      	adds	r7, #32
 801afb0:	46bd      	mov	sp, r7
 801afb2:	bd80      	pop	{r7, pc}
 801afb4:	20007558 	.word	0x20007558

0801afb8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801afb8:	b580      	push	{r7, lr}
 801afba:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 801afbe:	af00      	add	r7, sp, #0
 801afc0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801afc4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801afc8:	6018      	str	r0, [r3, #0]
 801afca:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801afce:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801afd2:	6019      	str	r1, [r3, #0]
 801afd4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801afd8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801afdc:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801afde:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801afe2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d101      	bne.n	801aff0 <f_open+0x38>
 801afec:	2309      	movs	r3, #9
 801afee:	e2a6      	b.n	801b53e <f_open+0x586>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801aff0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801aff4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801aff8:	f507 721a 	add.w	r2, r7, #616	; 0x268
 801affc:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 801b000:	7812      	ldrb	r2, [r2, #0]
 801b002:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801b006:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 801b008:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b00c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801b010:	781a      	ldrb	r2, [r3, #0]
 801b012:	f507 7105 	add.w	r1, r7, #532	; 0x214
 801b016:	f107 0308 	add.w	r3, r7, #8
 801b01a:	4618      	mov	r0, r3
 801b01c:	f7ff fcd0 	bl	801a9c0 <find_volume>
 801b020:	4603      	mov	r3, r0
 801b022:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 801b026:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	f040 827a 	bne.w	801b524 <f_open+0x56c>
		dj.obj.fs = fs;
 801b030:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b034:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 801b038:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b03c:	f107 0214 	add.w	r2, r7, #20
 801b040:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 801b042:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b046:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801b04a:	681a      	ldr	r2, [r3, #0]
 801b04c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801b050:	4611      	mov	r1, r2
 801b052:	4618      	mov	r0, r3
 801b054:	f7ff fba4 	bl	801a7a0 <follow_path>
 801b058:	4603      	mov	r3, r0
 801b05a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801b05e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801b062:	2b00      	cmp	r3, #0
 801b064:	d11e      	bne.n	801b0a4 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801b066:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 801b06a:	b25b      	sxtb	r3, r3
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	da03      	bge.n	801b078 <f_open+0xc0>
				res = FR_INVALID_NAME;
 801b070:	2306      	movs	r3, #6
 801b072:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801b076:	e015      	b.n	801b0a4 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801b078:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b07c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801b080:	781b      	ldrb	r3, [r3, #0]
 801b082:	f023 0301 	bic.w	r3, r3, #1
 801b086:	2b00      	cmp	r3, #0
 801b088:	bf14      	ite	ne
 801b08a:	2301      	movne	r3, #1
 801b08c:	2300      	moveq	r3, #0
 801b08e:	b2db      	uxtb	r3, r3
 801b090:	461a      	mov	r2, r3
 801b092:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801b096:	4611      	mov	r1, r2
 801b098:	4618      	mov	r0, r3
 801b09a:	f7fd ff11 	bl	8018ec0 <chk_lock>
 801b09e:	4603      	mov	r3, r0
 801b0a0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801b0a4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b0a8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801b0ac:	781b      	ldrb	r3, [r3, #0]
 801b0ae:	f003 031c 	and.w	r3, r3, #28
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	f000 80a7 	beq.w	801b206 <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 801b0b8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d01f      	beq.n	801b100 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801b0c0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801b0c4:	2b04      	cmp	r3, #4
 801b0c6:	d10e      	bne.n	801b0e6 <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801b0c8:	f7fd ff56 	bl	8018f78 <enq_lock>
 801b0cc:	4603      	mov	r3, r0
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	d006      	beq.n	801b0e0 <f_open+0x128>
 801b0d2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801b0d6:	4618      	mov	r0, r3
 801b0d8:	f7ff f8b2 	bl	801a240 <dir_register>
 801b0dc:	4603      	mov	r3, r0
 801b0de:	e000      	b.n	801b0e2 <f_open+0x12a>
 801b0e0:	2312      	movs	r3, #18
 801b0e2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801b0e6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b0ea:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801b0ee:	f507 721a 	add.w	r2, r7, #616	; 0x268
 801b0f2:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 801b0f6:	7812      	ldrb	r2, [r2, #0]
 801b0f8:	f042 0208 	orr.w	r2, r2, #8
 801b0fc:	701a      	strb	r2, [r3, #0]
 801b0fe:	e015      	b.n	801b12c <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801b100:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 801b104:	f003 0311 	and.w	r3, r3, #17
 801b108:	2b00      	cmp	r3, #0
 801b10a:	d003      	beq.n	801b114 <f_open+0x15c>
					res = FR_DENIED;
 801b10c:	2307      	movs	r3, #7
 801b10e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801b112:	e00b      	b.n	801b12c <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801b114:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b118:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801b11c:	781b      	ldrb	r3, [r3, #0]
 801b11e:	f003 0304 	and.w	r3, r3, #4
 801b122:	2b00      	cmp	r3, #0
 801b124:	d002      	beq.n	801b12c <f_open+0x174>
 801b126:	2308      	movs	r3, #8
 801b128:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801b12c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801b130:	2b00      	cmp	r3, #0
 801b132:	f040 8088 	bne.w	801b246 <f_open+0x28e>
 801b136:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b13a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801b13e:	781b      	ldrb	r3, [r3, #0]
 801b140:	f003 0308 	and.w	r3, r3, #8
 801b144:	2b00      	cmp	r3, #0
 801b146:	d07e      	beq.n	801b246 <f_open+0x28e>
				dw = GET_FATTIME();
 801b148:	f7fa fc78 	bl	8015a3c <get_fattime>
 801b14c:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801b150:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b154:	330e      	adds	r3, #14
 801b156:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 801b15a:	4618      	mov	r0, r3
 801b15c:	f7fd fe06 	bl	8018d6c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801b160:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b164:	3316      	adds	r3, #22
 801b166:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 801b16a:	4618      	mov	r0, r3
 801b16c:	f7fd fdfe 	bl	8018d6c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801b170:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b174:	330b      	adds	r3, #11
 801b176:	2220      	movs	r2, #32
 801b178:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801b17a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b17e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801b182:	4611      	mov	r1, r2
 801b184:	4618      	mov	r0, r3
 801b186:	f7fe fdd3 	bl	8019d30 <ld_clust>
 801b18a:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801b18e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b192:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 801b196:	2200      	movs	r2, #0
 801b198:	4618      	mov	r0, r3
 801b19a:	f7fe fde8 	bl	8019d6e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801b19e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b1a2:	331c      	adds	r3, #28
 801b1a4:	2100      	movs	r1, #0
 801b1a6:	4618      	mov	r0, r3
 801b1a8:	f7fd fde0 	bl	8018d6c <st_dword>
					fs->wflag = 1;
 801b1ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b1b0:	2201      	movs	r2, #1
 801b1b2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801b1b4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	d044      	beq.n	801b246 <f_open+0x28e>
						dw = fs->winsect;
 801b1bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b1c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b1c2:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 801b1c6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801b1ca:	2200      	movs	r2, #0
 801b1cc:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 801b1d0:	4618      	mov	r0, r3
 801b1d2:	f7fe fad2 	bl	801977a <remove_chain>
 801b1d6:	4603      	mov	r3, r0
 801b1d8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 801b1dc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	d130      	bne.n	801b246 <f_open+0x28e>
							res = move_window(fs, dw);
 801b1e4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b1e8:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 801b1ec:	4618      	mov	r0, r3
 801b1ee:	f7fe f817 	bl	8019220 <move_window>
 801b1f2:	4603      	mov	r3, r0
 801b1f4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801b1f8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b1fc:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801b200:	3a01      	subs	r2, #1
 801b202:	615a      	str	r2, [r3, #20]
 801b204:	e01f      	b.n	801b246 <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801b206:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d11b      	bne.n	801b246 <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801b20e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 801b212:	f003 0310 	and.w	r3, r3, #16
 801b216:	2b00      	cmp	r3, #0
 801b218:	d003      	beq.n	801b222 <f_open+0x26a>
					res = FR_NO_FILE;
 801b21a:	2304      	movs	r3, #4
 801b21c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801b220:	e011      	b.n	801b246 <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801b222:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b226:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801b22a:	781b      	ldrb	r3, [r3, #0]
 801b22c:	f003 0302 	and.w	r3, r3, #2
 801b230:	2b00      	cmp	r3, #0
 801b232:	d008      	beq.n	801b246 <f_open+0x28e>
 801b234:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 801b238:	f003 0301 	and.w	r3, r3, #1
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d002      	beq.n	801b246 <f_open+0x28e>
						res = FR_DENIED;
 801b240:	2307      	movs	r3, #7
 801b242:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 801b246:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d14a      	bne.n	801b2e4 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801b24e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b252:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801b256:	781b      	ldrb	r3, [r3, #0]
 801b258:	f003 0308 	and.w	r3, r3, #8
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	d00b      	beq.n	801b278 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 801b260:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b264:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801b268:	f507 721a 	add.w	r2, r7, #616	; 0x268
 801b26c:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 801b270:	7812      	ldrb	r2, [r2, #0]
 801b272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801b276:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801b278:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b27c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b27e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b282:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801b28a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801b28e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b292:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b296:	681b      	ldr	r3, [r3, #0]
 801b298:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801b29a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b29e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801b2a2:	781b      	ldrb	r3, [r3, #0]
 801b2a4:	f023 0301 	bic.w	r3, r3, #1
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	bf14      	ite	ne
 801b2ac:	2301      	movne	r3, #1
 801b2ae:	2300      	moveq	r3, #0
 801b2b0:	b2db      	uxtb	r3, r3
 801b2b2:	461a      	mov	r2, r3
 801b2b4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801b2b8:	4611      	mov	r1, r2
 801b2ba:	4618      	mov	r0, r3
 801b2bc:	f7fd fe7e 	bl	8018fbc <inc_lock>
 801b2c0:	4602      	mov	r2, r0
 801b2c2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b2c6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801b2ce:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b2d2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b2d6:	681b      	ldr	r3, [r3, #0]
 801b2d8:	691b      	ldr	r3, [r3, #16]
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	d102      	bne.n	801b2e4 <f_open+0x32c>
 801b2de:	2302      	movs	r3, #2
 801b2e0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 801b2e4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	f040 811b 	bne.w	801b524 <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801b2ee:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b2f2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801b2f6:	4611      	mov	r1, r2
 801b2f8:	4618      	mov	r0, r3
 801b2fa:	f7fe fd19 	bl	8019d30 <ld_clust>
 801b2fe:	4602      	mov	r2, r0
 801b300:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b304:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801b30c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b310:	331c      	adds	r3, #28
 801b312:	4618      	mov	r0, r3
 801b314:	f7fd fcec 	bl	8018cf0 <ld_dword>
 801b318:	4602      	mov	r2, r0
 801b31a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b31e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b322:	681b      	ldr	r3, [r3, #0]
 801b324:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801b326:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b32a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b32e:	681b      	ldr	r3, [r3, #0]
 801b330:	2200      	movs	r2, #0
 801b332:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801b334:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801b338:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b33c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801b344:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b348:	88da      	ldrh	r2, [r3, #6]
 801b34a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b34e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b352:	681b      	ldr	r3, [r3, #0]
 801b354:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801b356:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b35a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b35e:	681b      	ldr	r3, [r3, #0]
 801b360:	f507 721a 	add.w	r2, r7, #616	; 0x268
 801b364:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 801b368:	7812      	ldrb	r2, [r2, #0]
 801b36a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801b36c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b370:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b374:	681b      	ldr	r3, [r3, #0]
 801b376:	2200      	movs	r2, #0
 801b378:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801b37a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b37e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	2200      	movs	r2, #0
 801b386:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801b388:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b38c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b390:	681b      	ldr	r3, [r3, #0]
 801b392:	2200      	movs	r2, #0
 801b394:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801b396:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b39a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b39e:	681b      	ldr	r3, [r3, #0]
 801b3a0:	3330      	adds	r3, #48	; 0x30
 801b3a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801b3a6:	2100      	movs	r1, #0
 801b3a8:	4618      	mov	r0, r3
 801b3aa:	f7fd fd2c 	bl	8018e06 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801b3ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b3b2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801b3b6:	781b      	ldrb	r3, [r3, #0]
 801b3b8:	f003 0320 	and.w	r3, r3, #32
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	f000 80b1 	beq.w	801b524 <f_open+0x56c>
 801b3c2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b3c6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	68db      	ldr	r3, [r3, #12]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	f000 80a8 	beq.w	801b524 <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801b3d4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b3d8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b3dc:	681b      	ldr	r3, [r3, #0]
 801b3de:	68da      	ldr	r2, [r3, #12]
 801b3e0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b3e4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801b3ec:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b3f0:	895b      	ldrh	r3, [r3, #10]
 801b3f2:	461a      	mov	r2, r3
 801b3f4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b3f8:	899b      	ldrh	r3, [r3, #12]
 801b3fa:	fb02 f303 	mul.w	r3, r2, r3
 801b3fe:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801b402:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b406:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b40a:	681b      	ldr	r3, [r3, #0]
 801b40c:	689b      	ldr	r3, [r3, #8]
 801b40e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801b412:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b416:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	68db      	ldr	r3, [r3, #12]
 801b41e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 801b422:	e021      	b.n	801b468 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 801b424:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b428:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801b432:	4618      	mov	r0, r3
 801b434:	f7fd ffb1 	bl	801939a <get_fat>
 801b438:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 801b43c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801b440:	2b01      	cmp	r3, #1
 801b442:	d802      	bhi.n	801b44a <f_open+0x492>
 801b444:	2302      	movs	r3, #2
 801b446:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801b44a:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801b44e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b452:	d102      	bne.n	801b45a <f_open+0x4a2>
 801b454:	2301      	movs	r3, #1
 801b456:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801b45a:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801b45e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801b462:	1ad3      	subs	r3, r2, r3
 801b464:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 801b468:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d105      	bne.n	801b47c <f_open+0x4c4>
 801b470:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801b474:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801b478:	429a      	cmp	r2, r3
 801b47a:	d8d3      	bhi.n	801b424 <f_open+0x46c>
				}
				fp->clust = clst;
 801b47c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b480:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 801b48a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801b48c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801b490:	2b00      	cmp	r3, #0
 801b492:	d147      	bne.n	801b524 <f_open+0x56c>
 801b494:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b498:	899b      	ldrh	r3, [r3, #12]
 801b49a:	461a      	mov	r2, r3
 801b49c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801b4a0:	fbb3 f1f2 	udiv	r1, r3, r2
 801b4a4:	fb01 f202 	mul.w	r2, r1, r2
 801b4a8:	1a9b      	subs	r3, r3, r2
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	d03a      	beq.n	801b524 <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801b4ae:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b4b2:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801b4b6:	4618      	mov	r0, r3
 801b4b8:	f7fd ff50 	bl	801935c <clust2sect>
 801b4bc:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 801b4c0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d103      	bne.n	801b4d0 <f_open+0x518>
						res = FR_INT_ERR;
 801b4c8:	2302      	movs	r3, #2
 801b4ca:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801b4ce:	e029      	b.n	801b524 <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801b4d0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b4d4:	899b      	ldrh	r3, [r3, #12]
 801b4d6:	461a      	mov	r2, r3
 801b4d8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801b4dc:	fbb3 f2f2 	udiv	r2, r3, r2
 801b4e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b4e4:	441a      	add	r2, r3
 801b4e6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b4ea:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801b4f2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801b4f6:	7858      	ldrb	r0, [r3, #1]
 801b4f8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b4fc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b500:	681b      	ldr	r3, [r3, #0]
 801b502:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801b506:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b50a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	6a1a      	ldr	r2, [r3, #32]
 801b512:	2301      	movs	r3, #1
 801b514:	f7fd fb76 	bl	8018c04 <disk_read>
 801b518:	4603      	mov	r3, r0
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	d002      	beq.n	801b524 <f_open+0x56c>
 801b51e:	2301      	movs	r3, #1
 801b520:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801b524:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801b528:	2b00      	cmp	r3, #0
 801b52a:	d006      	beq.n	801b53a <f_open+0x582>
 801b52c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801b530:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b534:	681b      	ldr	r3, [r3, #0]
 801b536:	2200      	movs	r2, #0
 801b538:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801b53a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 801b53e:	4618      	mov	r0, r3
 801b540:	f507 771a 	add.w	r7, r7, #616	; 0x268
 801b544:	46bd      	mov	sp, r7
 801b546:	bd80      	pop	{r7, pc}

0801b548 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801b548:	b580      	push	{r7, lr}
 801b54a:	b08c      	sub	sp, #48	; 0x30
 801b54c:	af00      	add	r7, sp, #0
 801b54e:	60f8      	str	r0, [r7, #12]
 801b550:	60b9      	str	r1, [r7, #8]
 801b552:	607a      	str	r2, [r7, #4]
 801b554:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801b556:	68bb      	ldr	r3, [r7, #8]
 801b558:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801b55a:	683b      	ldr	r3, [r7, #0]
 801b55c:	2200      	movs	r2, #0
 801b55e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801b560:	68fb      	ldr	r3, [r7, #12]
 801b562:	f107 0210 	add.w	r2, r7, #16
 801b566:	4611      	mov	r1, r2
 801b568:	4618      	mov	r0, r3
 801b56a:	f7ff fca9 	bl	801aec0 <validate>
 801b56e:	4603      	mov	r3, r0
 801b570:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801b574:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d107      	bne.n	801b58c <f_write+0x44>
 801b57c:	68fb      	ldr	r3, [r7, #12]
 801b57e:	7d5b      	ldrb	r3, [r3, #21]
 801b580:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b584:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d002      	beq.n	801b592 <f_write+0x4a>
 801b58c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b590:	e16a      	b.n	801b868 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801b592:	68fb      	ldr	r3, [r7, #12]
 801b594:	7d1b      	ldrb	r3, [r3, #20]
 801b596:	f003 0302 	and.w	r3, r3, #2
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d101      	bne.n	801b5a2 <f_write+0x5a>
 801b59e:	2307      	movs	r3, #7
 801b5a0:	e162      	b.n	801b868 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801b5a2:	68fb      	ldr	r3, [r7, #12]
 801b5a4:	699a      	ldr	r2, [r3, #24]
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	441a      	add	r2, r3
 801b5aa:	68fb      	ldr	r3, [r7, #12]
 801b5ac:	699b      	ldr	r3, [r3, #24]
 801b5ae:	429a      	cmp	r2, r3
 801b5b0:	f080 814c 	bcs.w	801b84c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801b5b4:	68fb      	ldr	r3, [r7, #12]
 801b5b6:	699b      	ldr	r3, [r3, #24]
 801b5b8:	43db      	mvns	r3, r3
 801b5ba:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801b5bc:	e146      	b.n	801b84c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801b5be:	68fb      	ldr	r3, [r7, #12]
 801b5c0:	699b      	ldr	r3, [r3, #24]
 801b5c2:	693a      	ldr	r2, [r7, #16]
 801b5c4:	8992      	ldrh	r2, [r2, #12]
 801b5c6:	fbb3 f1f2 	udiv	r1, r3, r2
 801b5ca:	fb01 f202 	mul.w	r2, r1, r2
 801b5ce:	1a9b      	subs	r3, r3, r2
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	f040 80f1 	bne.w	801b7b8 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801b5d6:	68fb      	ldr	r3, [r7, #12]
 801b5d8:	699b      	ldr	r3, [r3, #24]
 801b5da:	693a      	ldr	r2, [r7, #16]
 801b5dc:	8992      	ldrh	r2, [r2, #12]
 801b5de:	fbb3 f3f2 	udiv	r3, r3, r2
 801b5e2:	693a      	ldr	r2, [r7, #16]
 801b5e4:	8952      	ldrh	r2, [r2, #10]
 801b5e6:	3a01      	subs	r2, #1
 801b5e8:	4013      	ands	r3, r2
 801b5ea:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801b5ec:	69bb      	ldr	r3, [r7, #24]
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	d143      	bne.n	801b67a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801b5f2:	68fb      	ldr	r3, [r7, #12]
 801b5f4:	699b      	ldr	r3, [r3, #24]
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	d10c      	bne.n	801b614 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801b5fa:	68fb      	ldr	r3, [r7, #12]
 801b5fc:	689b      	ldr	r3, [r3, #8]
 801b5fe:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801b600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b602:	2b00      	cmp	r3, #0
 801b604:	d11a      	bne.n	801b63c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801b606:	68fb      	ldr	r3, [r7, #12]
 801b608:	2100      	movs	r1, #0
 801b60a:	4618      	mov	r0, r3
 801b60c:	f7fe f91a 	bl	8019844 <create_chain>
 801b610:	62b8      	str	r0, [r7, #40]	; 0x28
 801b612:	e013      	b.n	801b63c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801b614:	68fb      	ldr	r3, [r7, #12]
 801b616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b618:	2b00      	cmp	r3, #0
 801b61a:	d007      	beq.n	801b62c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801b61c:	68fb      	ldr	r3, [r7, #12]
 801b61e:	699b      	ldr	r3, [r3, #24]
 801b620:	4619      	mov	r1, r3
 801b622:	68f8      	ldr	r0, [r7, #12]
 801b624:	f7fe f9a6 	bl	8019974 <clmt_clust>
 801b628:	62b8      	str	r0, [r7, #40]	; 0x28
 801b62a:	e007      	b.n	801b63c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801b62c:	68fa      	ldr	r2, [r7, #12]
 801b62e:	68fb      	ldr	r3, [r7, #12]
 801b630:	69db      	ldr	r3, [r3, #28]
 801b632:	4619      	mov	r1, r3
 801b634:	4610      	mov	r0, r2
 801b636:	f7fe f905 	bl	8019844 <create_chain>
 801b63a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801b63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b63e:	2b00      	cmp	r3, #0
 801b640:	f000 8109 	beq.w	801b856 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801b644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b646:	2b01      	cmp	r3, #1
 801b648:	d104      	bne.n	801b654 <f_write+0x10c>
 801b64a:	68fb      	ldr	r3, [r7, #12]
 801b64c:	2202      	movs	r2, #2
 801b64e:	755a      	strb	r2, [r3, #21]
 801b650:	2302      	movs	r3, #2
 801b652:	e109      	b.n	801b868 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801b654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b65a:	d104      	bne.n	801b666 <f_write+0x11e>
 801b65c:	68fb      	ldr	r3, [r7, #12]
 801b65e:	2201      	movs	r2, #1
 801b660:	755a      	strb	r2, [r3, #21]
 801b662:	2301      	movs	r3, #1
 801b664:	e100      	b.n	801b868 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801b666:	68fb      	ldr	r3, [r7, #12]
 801b668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b66a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801b66c:	68fb      	ldr	r3, [r7, #12]
 801b66e:	689b      	ldr	r3, [r3, #8]
 801b670:	2b00      	cmp	r3, #0
 801b672:	d102      	bne.n	801b67a <f_write+0x132>
 801b674:	68fb      	ldr	r3, [r7, #12]
 801b676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b678:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801b67a:	68fb      	ldr	r3, [r7, #12]
 801b67c:	7d1b      	ldrb	r3, [r3, #20]
 801b67e:	b25b      	sxtb	r3, r3
 801b680:	2b00      	cmp	r3, #0
 801b682:	da18      	bge.n	801b6b6 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801b684:	693b      	ldr	r3, [r7, #16]
 801b686:	7858      	ldrb	r0, [r3, #1]
 801b688:	68fb      	ldr	r3, [r7, #12]
 801b68a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801b68e:	68fb      	ldr	r3, [r7, #12]
 801b690:	6a1a      	ldr	r2, [r3, #32]
 801b692:	2301      	movs	r3, #1
 801b694:	f7fd fad6 	bl	8018c44 <disk_write>
 801b698:	4603      	mov	r3, r0
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d004      	beq.n	801b6a8 <f_write+0x160>
 801b69e:	68fb      	ldr	r3, [r7, #12]
 801b6a0:	2201      	movs	r2, #1
 801b6a2:	755a      	strb	r2, [r3, #21]
 801b6a4:	2301      	movs	r3, #1
 801b6a6:	e0df      	b.n	801b868 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801b6a8:	68fb      	ldr	r3, [r7, #12]
 801b6aa:	7d1b      	ldrb	r3, [r3, #20]
 801b6ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b6b0:	b2da      	uxtb	r2, r3
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801b6b6:	693a      	ldr	r2, [r7, #16]
 801b6b8:	68fb      	ldr	r3, [r7, #12]
 801b6ba:	69db      	ldr	r3, [r3, #28]
 801b6bc:	4619      	mov	r1, r3
 801b6be:	4610      	mov	r0, r2
 801b6c0:	f7fd fe4c 	bl	801935c <clust2sect>
 801b6c4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801b6c6:	697b      	ldr	r3, [r7, #20]
 801b6c8:	2b00      	cmp	r3, #0
 801b6ca:	d104      	bne.n	801b6d6 <f_write+0x18e>
 801b6cc:	68fb      	ldr	r3, [r7, #12]
 801b6ce:	2202      	movs	r2, #2
 801b6d0:	755a      	strb	r2, [r3, #21]
 801b6d2:	2302      	movs	r3, #2
 801b6d4:	e0c8      	b.n	801b868 <f_write+0x320>
			sect += csect;
 801b6d6:	697a      	ldr	r2, [r7, #20]
 801b6d8:	69bb      	ldr	r3, [r7, #24]
 801b6da:	4413      	add	r3, r2
 801b6dc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801b6de:	693b      	ldr	r3, [r7, #16]
 801b6e0:	899b      	ldrh	r3, [r3, #12]
 801b6e2:	461a      	mov	r2, r3
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	fbb3 f3f2 	udiv	r3, r3, r2
 801b6ea:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801b6ec:	6a3b      	ldr	r3, [r7, #32]
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	d043      	beq.n	801b77a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801b6f2:	69ba      	ldr	r2, [r7, #24]
 801b6f4:	6a3b      	ldr	r3, [r7, #32]
 801b6f6:	4413      	add	r3, r2
 801b6f8:	693a      	ldr	r2, [r7, #16]
 801b6fa:	8952      	ldrh	r2, [r2, #10]
 801b6fc:	4293      	cmp	r3, r2
 801b6fe:	d905      	bls.n	801b70c <f_write+0x1c4>
					cc = fs->csize - csect;
 801b700:	693b      	ldr	r3, [r7, #16]
 801b702:	895b      	ldrh	r3, [r3, #10]
 801b704:	461a      	mov	r2, r3
 801b706:	69bb      	ldr	r3, [r7, #24]
 801b708:	1ad3      	subs	r3, r2, r3
 801b70a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801b70c:	693b      	ldr	r3, [r7, #16]
 801b70e:	7858      	ldrb	r0, [r3, #1]
 801b710:	6a3b      	ldr	r3, [r7, #32]
 801b712:	697a      	ldr	r2, [r7, #20]
 801b714:	69f9      	ldr	r1, [r7, #28]
 801b716:	f7fd fa95 	bl	8018c44 <disk_write>
 801b71a:	4603      	mov	r3, r0
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d004      	beq.n	801b72a <f_write+0x1e2>
 801b720:	68fb      	ldr	r3, [r7, #12]
 801b722:	2201      	movs	r2, #1
 801b724:	755a      	strb	r2, [r3, #21]
 801b726:	2301      	movs	r3, #1
 801b728:	e09e      	b.n	801b868 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801b72a:	68fb      	ldr	r3, [r7, #12]
 801b72c:	6a1a      	ldr	r2, [r3, #32]
 801b72e:	697b      	ldr	r3, [r7, #20]
 801b730:	1ad3      	subs	r3, r2, r3
 801b732:	6a3a      	ldr	r2, [r7, #32]
 801b734:	429a      	cmp	r2, r3
 801b736:	d918      	bls.n	801b76a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801b738:	68fb      	ldr	r3, [r7, #12]
 801b73a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801b73e:	68fb      	ldr	r3, [r7, #12]
 801b740:	6a1a      	ldr	r2, [r3, #32]
 801b742:	697b      	ldr	r3, [r7, #20]
 801b744:	1ad3      	subs	r3, r2, r3
 801b746:	693a      	ldr	r2, [r7, #16]
 801b748:	8992      	ldrh	r2, [r2, #12]
 801b74a:	fb02 f303 	mul.w	r3, r2, r3
 801b74e:	69fa      	ldr	r2, [r7, #28]
 801b750:	18d1      	adds	r1, r2, r3
 801b752:	693b      	ldr	r3, [r7, #16]
 801b754:	899b      	ldrh	r3, [r3, #12]
 801b756:	461a      	mov	r2, r3
 801b758:	f7fd fb34 	bl	8018dc4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801b75c:	68fb      	ldr	r3, [r7, #12]
 801b75e:	7d1b      	ldrb	r3, [r3, #20]
 801b760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b764:	b2da      	uxtb	r2, r3
 801b766:	68fb      	ldr	r3, [r7, #12]
 801b768:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801b76a:	693b      	ldr	r3, [r7, #16]
 801b76c:	899b      	ldrh	r3, [r3, #12]
 801b76e:	461a      	mov	r2, r3
 801b770:	6a3b      	ldr	r3, [r7, #32]
 801b772:	fb02 f303 	mul.w	r3, r2, r3
 801b776:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801b778:	e04b      	b.n	801b812 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801b77a:	68fb      	ldr	r3, [r7, #12]
 801b77c:	6a1b      	ldr	r3, [r3, #32]
 801b77e:	697a      	ldr	r2, [r7, #20]
 801b780:	429a      	cmp	r2, r3
 801b782:	d016      	beq.n	801b7b2 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801b784:	68fb      	ldr	r3, [r7, #12]
 801b786:	699a      	ldr	r2, [r3, #24]
 801b788:	68fb      	ldr	r3, [r7, #12]
 801b78a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801b78c:	429a      	cmp	r2, r3
 801b78e:	d210      	bcs.n	801b7b2 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801b790:	693b      	ldr	r3, [r7, #16]
 801b792:	7858      	ldrb	r0, [r3, #1]
 801b794:	68fb      	ldr	r3, [r7, #12]
 801b796:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801b79a:	2301      	movs	r3, #1
 801b79c:	697a      	ldr	r2, [r7, #20]
 801b79e:	f7fd fa31 	bl	8018c04 <disk_read>
 801b7a2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801b7a4:	2b00      	cmp	r3, #0
 801b7a6:	d004      	beq.n	801b7b2 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801b7a8:	68fb      	ldr	r3, [r7, #12]
 801b7aa:	2201      	movs	r2, #1
 801b7ac:	755a      	strb	r2, [r3, #21]
 801b7ae:	2301      	movs	r3, #1
 801b7b0:	e05a      	b.n	801b868 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801b7b2:	68fb      	ldr	r3, [r7, #12]
 801b7b4:	697a      	ldr	r2, [r7, #20]
 801b7b6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801b7b8:	693b      	ldr	r3, [r7, #16]
 801b7ba:	899b      	ldrh	r3, [r3, #12]
 801b7bc:	4618      	mov	r0, r3
 801b7be:	68fb      	ldr	r3, [r7, #12]
 801b7c0:	699b      	ldr	r3, [r3, #24]
 801b7c2:	693a      	ldr	r2, [r7, #16]
 801b7c4:	8992      	ldrh	r2, [r2, #12]
 801b7c6:	fbb3 f1f2 	udiv	r1, r3, r2
 801b7ca:	fb01 f202 	mul.w	r2, r1, r2
 801b7ce:	1a9b      	subs	r3, r3, r2
 801b7d0:	1ac3      	subs	r3, r0, r3
 801b7d2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801b7d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	429a      	cmp	r2, r3
 801b7da:	d901      	bls.n	801b7e0 <f_write+0x298>
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801b7e0:	68fb      	ldr	r3, [r7, #12]
 801b7e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801b7e6:	68fb      	ldr	r3, [r7, #12]
 801b7e8:	699b      	ldr	r3, [r3, #24]
 801b7ea:	693a      	ldr	r2, [r7, #16]
 801b7ec:	8992      	ldrh	r2, [r2, #12]
 801b7ee:	fbb3 f0f2 	udiv	r0, r3, r2
 801b7f2:	fb00 f202 	mul.w	r2, r0, r2
 801b7f6:	1a9b      	subs	r3, r3, r2
 801b7f8:	440b      	add	r3, r1
 801b7fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b7fc:	69f9      	ldr	r1, [r7, #28]
 801b7fe:	4618      	mov	r0, r3
 801b800:	f7fd fae0 	bl	8018dc4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801b804:	68fb      	ldr	r3, [r7, #12]
 801b806:	7d1b      	ldrb	r3, [r3, #20]
 801b808:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b80c:	b2da      	uxtb	r2, r3
 801b80e:	68fb      	ldr	r3, [r7, #12]
 801b810:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801b812:	69fa      	ldr	r2, [r7, #28]
 801b814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b816:	4413      	add	r3, r2
 801b818:	61fb      	str	r3, [r7, #28]
 801b81a:	68fb      	ldr	r3, [r7, #12]
 801b81c:	699a      	ldr	r2, [r3, #24]
 801b81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b820:	441a      	add	r2, r3
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	619a      	str	r2, [r3, #24]
 801b826:	68fb      	ldr	r3, [r7, #12]
 801b828:	68da      	ldr	r2, [r3, #12]
 801b82a:	68fb      	ldr	r3, [r7, #12]
 801b82c:	699b      	ldr	r3, [r3, #24]
 801b82e:	429a      	cmp	r2, r3
 801b830:	bf38      	it	cc
 801b832:	461a      	movcc	r2, r3
 801b834:	68fb      	ldr	r3, [r7, #12]
 801b836:	60da      	str	r2, [r3, #12]
 801b838:	683b      	ldr	r3, [r7, #0]
 801b83a:	681a      	ldr	r2, [r3, #0]
 801b83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b83e:	441a      	add	r2, r3
 801b840:	683b      	ldr	r3, [r7, #0]
 801b842:	601a      	str	r2, [r3, #0]
 801b844:	687a      	ldr	r2, [r7, #4]
 801b846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b848:	1ad3      	subs	r3, r2, r3
 801b84a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801b84c:	687b      	ldr	r3, [r7, #4]
 801b84e:	2b00      	cmp	r3, #0
 801b850:	f47f aeb5 	bne.w	801b5be <f_write+0x76>
 801b854:	e000      	b.n	801b858 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801b856:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801b858:	68fb      	ldr	r3, [r7, #12]
 801b85a:	7d1b      	ldrb	r3, [r3, #20]
 801b85c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b860:	b2da      	uxtb	r2, r3
 801b862:	68fb      	ldr	r3, [r7, #12]
 801b864:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801b866:	2300      	movs	r3, #0
}
 801b868:	4618      	mov	r0, r3
 801b86a:	3730      	adds	r7, #48	; 0x30
 801b86c:	46bd      	mov	sp, r7
 801b86e:	bd80      	pop	{r7, pc}

0801b870 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801b870:	b580      	push	{r7, lr}
 801b872:	b086      	sub	sp, #24
 801b874:	af00      	add	r7, sp, #0
 801b876:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	f107 0208 	add.w	r2, r7, #8
 801b87e:	4611      	mov	r1, r2
 801b880:	4618      	mov	r0, r3
 801b882:	f7ff fb1d 	bl	801aec0 <validate>
 801b886:	4603      	mov	r3, r0
 801b888:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801b88a:	7dfb      	ldrb	r3, [r7, #23]
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d168      	bne.n	801b962 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	7d1b      	ldrb	r3, [r3, #20]
 801b894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b898:	2b00      	cmp	r3, #0
 801b89a:	d062      	beq.n	801b962 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	7d1b      	ldrb	r3, [r3, #20]
 801b8a0:	b25b      	sxtb	r3, r3
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	da15      	bge.n	801b8d2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801b8a6:	68bb      	ldr	r3, [r7, #8]
 801b8a8:	7858      	ldrb	r0, [r3, #1]
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	6a1a      	ldr	r2, [r3, #32]
 801b8b4:	2301      	movs	r3, #1
 801b8b6:	f7fd f9c5 	bl	8018c44 <disk_write>
 801b8ba:	4603      	mov	r3, r0
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	d001      	beq.n	801b8c4 <f_sync+0x54>
 801b8c0:	2301      	movs	r3, #1
 801b8c2:	e04f      	b.n	801b964 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	7d1b      	ldrb	r3, [r3, #20]
 801b8c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b8cc:	b2da      	uxtb	r2, r3
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801b8d2:	f7fa f8b3 	bl	8015a3c <get_fattime>
 801b8d6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801b8d8:	68ba      	ldr	r2, [r7, #8]
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b8de:	4619      	mov	r1, r3
 801b8e0:	4610      	mov	r0, r2
 801b8e2:	f7fd fc9d 	bl	8019220 <move_window>
 801b8e6:	4603      	mov	r3, r0
 801b8e8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801b8ea:	7dfb      	ldrb	r3, [r7, #23]
 801b8ec:	2b00      	cmp	r3, #0
 801b8ee:	d138      	bne.n	801b962 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b8f4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801b8f6:	68fb      	ldr	r3, [r7, #12]
 801b8f8:	330b      	adds	r3, #11
 801b8fa:	781a      	ldrb	r2, [r3, #0]
 801b8fc:	68fb      	ldr	r3, [r7, #12]
 801b8fe:	330b      	adds	r3, #11
 801b900:	f042 0220 	orr.w	r2, r2, #32
 801b904:	b2d2      	uxtb	r2, r2
 801b906:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	6818      	ldr	r0, [r3, #0]
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	689b      	ldr	r3, [r3, #8]
 801b910:	461a      	mov	r2, r3
 801b912:	68f9      	ldr	r1, [r7, #12]
 801b914:	f7fe fa2b 	bl	8019d6e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801b918:	68fb      	ldr	r3, [r7, #12]
 801b91a:	f103 021c 	add.w	r2, r3, #28
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	68db      	ldr	r3, [r3, #12]
 801b922:	4619      	mov	r1, r3
 801b924:	4610      	mov	r0, r2
 801b926:	f7fd fa21 	bl	8018d6c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801b92a:	68fb      	ldr	r3, [r7, #12]
 801b92c:	3316      	adds	r3, #22
 801b92e:	6939      	ldr	r1, [r7, #16]
 801b930:	4618      	mov	r0, r3
 801b932:	f7fd fa1b 	bl	8018d6c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801b936:	68fb      	ldr	r3, [r7, #12]
 801b938:	3312      	adds	r3, #18
 801b93a:	2100      	movs	r1, #0
 801b93c:	4618      	mov	r0, r3
 801b93e:	f7fd f9fa 	bl	8018d36 <st_word>
					fs->wflag = 1;
 801b942:	68bb      	ldr	r3, [r7, #8]
 801b944:	2201      	movs	r2, #1
 801b946:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801b948:	68bb      	ldr	r3, [r7, #8]
 801b94a:	4618      	mov	r0, r3
 801b94c:	f7fd fc96 	bl	801927c <sync_fs>
 801b950:	4603      	mov	r3, r0
 801b952:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	7d1b      	ldrb	r3, [r3, #20]
 801b958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b95c:	b2da      	uxtb	r2, r3
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801b962:	7dfb      	ldrb	r3, [r7, #23]
}
 801b964:	4618      	mov	r0, r3
 801b966:	3718      	adds	r7, #24
 801b968:	46bd      	mov	sp, r7
 801b96a:	bd80      	pop	{r7, pc}

0801b96c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801b96c:	b580      	push	{r7, lr}
 801b96e:	b084      	sub	sp, #16
 801b970:	af00      	add	r7, sp, #0
 801b972:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801b974:	6878      	ldr	r0, [r7, #4]
 801b976:	f7ff ff7b 	bl	801b870 <f_sync>
 801b97a:	4603      	mov	r3, r0
 801b97c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801b97e:	7bfb      	ldrb	r3, [r7, #15]
 801b980:	2b00      	cmp	r3, #0
 801b982:	d118      	bne.n	801b9b6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	f107 0208 	add.w	r2, r7, #8
 801b98a:	4611      	mov	r1, r2
 801b98c:	4618      	mov	r0, r3
 801b98e:	f7ff fa97 	bl	801aec0 <validate>
 801b992:	4603      	mov	r3, r0
 801b994:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801b996:	7bfb      	ldrb	r3, [r7, #15]
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d10c      	bne.n	801b9b6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	691b      	ldr	r3, [r3, #16]
 801b9a0:	4618      	mov	r0, r3
 801b9a2:	f7fd fb99 	bl	80190d8 <dec_lock>
 801b9a6:	4603      	mov	r3, r0
 801b9a8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801b9aa:	7bfb      	ldrb	r3, [r7, #15]
 801b9ac:	2b00      	cmp	r3, #0
 801b9ae:	d102      	bne.n	801b9b6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	2200      	movs	r2, #0
 801b9b4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801b9b6:	7bfb      	ldrb	r3, [r7, #15]
}
 801b9b8:	4618      	mov	r0, r3
 801b9ba:	3710      	adds	r7, #16
 801b9bc:	46bd      	mov	sp, r7
 801b9be:	bd80      	pop	{r7, pc}

0801b9c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801b9c0:	b480      	push	{r7}
 801b9c2:	b087      	sub	sp, #28
 801b9c4:	af00      	add	r7, sp, #0
 801b9c6:	60f8      	str	r0, [r7, #12]
 801b9c8:	60b9      	str	r1, [r7, #8]
 801b9ca:	4613      	mov	r3, r2
 801b9cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801b9ce:	2301      	movs	r3, #1
 801b9d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801b9d2:	2300      	movs	r3, #0
 801b9d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801b9d6:	4b1f      	ldr	r3, [pc, #124]	; (801ba54 <FATFS_LinkDriverEx+0x94>)
 801b9d8:	7a5b      	ldrb	r3, [r3, #9]
 801b9da:	b2db      	uxtb	r3, r3
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d131      	bne.n	801ba44 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801b9e0:	4b1c      	ldr	r3, [pc, #112]	; (801ba54 <FATFS_LinkDriverEx+0x94>)
 801b9e2:	7a5b      	ldrb	r3, [r3, #9]
 801b9e4:	b2db      	uxtb	r3, r3
 801b9e6:	461a      	mov	r2, r3
 801b9e8:	4b1a      	ldr	r3, [pc, #104]	; (801ba54 <FATFS_LinkDriverEx+0x94>)
 801b9ea:	2100      	movs	r1, #0
 801b9ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801b9ee:	4b19      	ldr	r3, [pc, #100]	; (801ba54 <FATFS_LinkDriverEx+0x94>)
 801b9f0:	7a5b      	ldrb	r3, [r3, #9]
 801b9f2:	b2db      	uxtb	r3, r3
 801b9f4:	4a17      	ldr	r2, [pc, #92]	; (801ba54 <FATFS_LinkDriverEx+0x94>)
 801b9f6:	009b      	lsls	r3, r3, #2
 801b9f8:	4413      	add	r3, r2
 801b9fa:	68fa      	ldr	r2, [r7, #12]
 801b9fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801b9fe:	4b15      	ldr	r3, [pc, #84]	; (801ba54 <FATFS_LinkDriverEx+0x94>)
 801ba00:	7a5b      	ldrb	r3, [r3, #9]
 801ba02:	b2db      	uxtb	r3, r3
 801ba04:	461a      	mov	r2, r3
 801ba06:	4b13      	ldr	r3, [pc, #76]	; (801ba54 <FATFS_LinkDriverEx+0x94>)
 801ba08:	4413      	add	r3, r2
 801ba0a:	79fa      	ldrb	r2, [r7, #7]
 801ba0c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801ba0e:	4b11      	ldr	r3, [pc, #68]	; (801ba54 <FATFS_LinkDriverEx+0x94>)
 801ba10:	7a5b      	ldrb	r3, [r3, #9]
 801ba12:	b2db      	uxtb	r3, r3
 801ba14:	1c5a      	adds	r2, r3, #1
 801ba16:	b2d1      	uxtb	r1, r2
 801ba18:	4a0e      	ldr	r2, [pc, #56]	; (801ba54 <FATFS_LinkDriverEx+0x94>)
 801ba1a:	7251      	strb	r1, [r2, #9]
 801ba1c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801ba1e:	7dbb      	ldrb	r3, [r7, #22]
 801ba20:	3330      	adds	r3, #48	; 0x30
 801ba22:	b2da      	uxtb	r2, r3
 801ba24:	68bb      	ldr	r3, [r7, #8]
 801ba26:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801ba28:	68bb      	ldr	r3, [r7, #8]
 801ba2a:	3301      	adds	r3, #1
 801ba2c:	223a      	movs	r2, #58	; 0x3a
 801ba2e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801ba30:	68bb      	ldr	r3, [r7, #8]
 801ba32:	3302      	adds	r3, #2
 801ba34:	222f      	movs	r2, #47	; 0x2f
 801ba36:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801ba38:	68bb      	ldr	r3, [r7, #8]
 801ba3a:	3303      	adds	r3, #3
 801ba3c:	2200      	movs	r2, #0
 801ba3e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801ba40:	2300      	movs	r3, #0
 801ba42:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801ba44:	7dfb      	ldrb	r3, [r7, #23]
}
 801ba46:	4618      	mov	r0, r3
 801ba48:	371c      	adds	r7, #28
 801ba4a:	46bd      	mov	sp, r7
 801ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba50:	4770      	bx	lr
 801ba52:	bf00      	nop
 801ba54:	20007580 	.word	0x20007580

0801ba58 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801ba58:	b580      	push	{r7, lr}
 801ba5a:	b082      	sub	sp, #8
 801ba5c:	af00      	add	r7, sp, #0
 801ba5e:	6078      	str	r0, [r7, #4]
 801ba60:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801ba62:	2200      	movs	r2, #0
 801ba64:	6839      	ldr	r1, [r7, #0]
 801ba66:	6878      	ldr	r0, [r7, #4]
 801ba68:	f7ff ffaa 	bl	801b9c0 <FATFS_LinkDriverEx>
 801ba6c:	4603      	mov	r3, r0
}
 801ba6e:	4618      	mov	r0, r3
 801ba70:	3708      	adds	r7, #8
 801ba72:	46bd      	mov	sp, r7
 801ba74:	bd80      	pop	{r7, pc}
	...

0801ba78 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801ba78:	b480      	push	{r7}
 801ba7a:	b085      	sub	sp, #20
 801ba7c:	af00      	add	r7, sp, #0
 801ba7e:	4603      	mov	r3, r0
 801ba80:	6039      	str	r1, [r7, #0]
 801ba82:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801ba84:	88fb      	ldrh	r3, [r7, #6]
 801ba86:	2b7f      	cmp	r3, #127	; 0x7f
 801ba88:	d802      	bhi.n	801ba90 <ff_convert+0x18>
		c = chr;
 801ba8a:	88fb      	ldrh	r3, [r7, #6]
 801ba8c:	81fb      	strh	r3, [r7, #14]
 801ba8e:	e025      	b.n	801badc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801ba90:	683b      	ldr	r3, [r7, #0]
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	d00b      	beq.n	801baae <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801ba96:	88fb      	ldrh	r3, [r7, #6]
 801ba98:	2bff      	cmp	r3, #255	; 0xff
 801ba9a:	d805      	bhi.n	801baa8 <ff_convert+0x30>
 801ba9c:	88fb      	ldrh	r3, [r7, #6]
 801ba9e:	3b80      	subs	r3, #128	; 0x80
 801baa0:	4a12      	ldr	r2, [pc, #72]	; (801baec <ff_convert+0x74>)
 801baa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801baa6:	e000      	b.n	801baaa <ff_convert+0x32>
 801baa8:	2300      	movs	r3, #0
 801baaa:	81fb      	strh	r3, [r7, #14]
 801baac:	e016      	b.n	801badc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801baae:	2300      	movs	r3, #0
 801bab0:	81fb      	strh	r3, [r7, #14]
 801bab2:	e009      	b.n	801bac8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801bab4:	89fb      	ldrh	r3, [r7, #14]
 801bab6:	4a0d      	ldr	r2, [pc, #52]	; (801baec <ff_convert+0x74>)
 801bab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801babc:	88fa      	ldrh	r2, [r7, #6]
 801babe:	429a      	cmp	r2, r3
 801bac0:	d006      	beq.n	801bad0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801bac2:	89fb      	ldrh	r3, [r7, #14]
 801bac4:	3301      	adds	r3, #1
 801bac6:	81fb      	strh	r3, [r7, #14]
 801bac8:	89fb      	ldrh	r3, [r7, #14]
 801baca:	2b7f      	cmp	r3, #127	; 0x7f
 801bacc:	d9f2      	bls.n	801bab4 <ff_convert+0x3c>
 801bace:	e000      	b.n	801bad2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801bad0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801bad2:	89fb      	ldrh	r3, [r7, #14]
 801bad4:	3380      	adds	r3, #128	; 0x80
 801bad6:	b29b      	uxth	r3, r3
 801bad8:	b2db      	uxtb	r3, r3
 801bada:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801badc:	89fb      	ldrh	r3, [r7, #14]
}
 801bade:	4618      	mov	r0, r3
 801bae0:	3714      	adds	r7, #20
 801bae2:	46bd      	mov	sp, r7
 801bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bae8:	4770      	bx	lr
 801baea:	bf00      	nop
 801baec:	08022980 	.word	0x08022980

0801baf0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801baf0:	b480      	push	{r7}
 801baf2:	b087      	sub	sp, #28
 801baf4:	af00      	add	r7, sp, #0
 801baf6:	4603      	mov	r3, r0
 801baf8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801bafa:	88fb      	ldrh	r3, [r7, #6]
 801bafc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801bb00:	d201      	bcs.n	801bb06 <ff_wtoupper+0x16>
 801bb02:	4b3e      	ldr	r3, [pc, #248]	; (801bbfc <ff_wtoupper+0x10c>)
 801bb04:	e000      	b.n	801bb08 <ff_wtoupper+0x18>
 801bb06:	4b3e      	ldr	r3, [pc, #248]	; (801bc00 <ff_wtoupper+0x110>)
 801bb08:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801bb0a:	697b      	ldr	r3, [r7, #20]
 801bb0c:	1c9a      	adds	r2, r3, #2
 801bb0e:	617a      	str	r2, [r7, #20]
 801bb10:	881b      	ldrh	r3, [r3, #0]
 801bb12:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801bb14:	8a7b      	ldrh	r3, [r7, #18]
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	d068      	beq.n	801bbec <ff_wtoupper+0xfc>
 801bb1a:	88fa      	ldrh	r2, [r7, #6]
 801bb1c:	8a7b      	ldrh	r3, [r7, #18]
 801bb1e:	429a      	cmp	r2, r3
 801bb20:	d364      	bcc.n	801bbec <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801bb22:	697b      	ldr	r3, [r7, #20]
 801bb24:	1c9a      	adds	r2, r3, #2
 801bb26:	617a      	str	r2, [r7, #20]
 801bb28:	881b      	ldrh	r3, [r3, #0]
 801bb2a:	823b      	strh	r3, [r7, #16]
 801bb2c:	8a3b      	ldrh	r3, [r7, #16]
 801bb2e:	0a1b      	lsrs	r3, r3, #8
 801bb30:	81fb      	strh	r3, [r7, #14]
 801bb32:	8a3b      	ldrh	r3, [r7, #16]
 801bb34:	b2db      	uxtb	r3, r3
 801bb36:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801bb38:	88fa      	ldrh	r2, [r7, #6]
 801bb3a:	8a79      	ldrh	r1, [r7, #18]
 801bb3c:	8a3b      	ldrh	r3, [r7, #16]
 801bb3e:	440b      	add	r3, r1
 801bb40:	429a      	cmp	r2, r3
 801bb42:	da49      	bge.n	801bbd8 <ff_wtoupper+0xe8>
			switch (cmd) {
 801bb44:	89fb      	ldrh	r3, [r7, #14]
 801bb46:	2b08      	cmp	r3, #8
 801bb48:	d84f      	bhi.n	801bbea <ff_wtoupper+0xfa>
 801bb4a:	a201      	add	r2, pc, #4	; (adr r2, 801bb50 <ff_wtoupper+0x60>)
 801bb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bb50:	0801bb75 	.word	0x0801bb75
 801bb54:	0801bb87 	.word	0x0801bb87
 801bb58:	0801bb9d 	.word	0x0801bb9d
 801bb5c:	0801bba5 	.word	0x0801bba5
 801bb60:	0801bbad 	.word	0x0801bbad
 801bb64:	0801bbb5 	.word	0x0801bbb5
 801bb68:	0801bbbd 	.word	0x0801bbbd
 801bb6c:	0801bbc5 	.word	0x0801bbc5
 801bb70:	0801bbcd 	.word	0x0801bbcd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801bb74:	88fa      	ldrh	r2, [r7, #6]
 801bb76:	8a7b      	ldrh	r3, [r7, #18]
 801bb78:	1ad3      	subs	r3, r2, r3
 801bb7a:	005b      	lsls	r3, r3, #1
 801bb7c:	697a      	ldr	r2, [r7, #20]
 801bb7e:	4413      	add	r3, r2
 801bb80:	881b      	ldrh	r3, [r3, #0]
 801bb82:	80fb      	strh	r3, [r7, #6]
 801bb84:	e027      	b.n	801bbd6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801bb86:	88fa      	ldrh	r2, [r7, #6]
 801bb88:	8a7b      	ldrh	r3, [r7, #18]
 801bb8a:	1ad3      	subs	r3, r2, r3
 801bb8c:	b29b      	uxth	r3, r3
 801bb8e:	f003 0301 	and.w	r3, r3, #1
 801bb92:	b29b      	uxth	r3, r3
 801bb94:	88fa      	ldrh	r2, [r7, #6]
 801bb96:	1ad3      	subs	r3, r2, r3
 801bb98:	80fb      	strh	r3, [r7, #6]
 801bb9a:	e01c      	b.n	801bbd6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801bb9c:	88fb      	ldrh	r3, [r7, #6]
 801bb9e:	3b10      	subs	r3, #16
 801bba0:	80fb      	strh	r3, [r7, #6]
 801bba2:	e018      	b.n	801bbd6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801bba4:	88fb      	ldrh	r3, [r7, #6]
 801bba6:	3b20      	subs	r3, #32
 801bba8:	80fb      	strh	r3, [r7, #6]
 801bbaa:	e014      	b.n	801bbd6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801bbac:	88fb      	ldrh	r3, [r7, #6]
 801bbae:	3b30      	subs	r3, #48	; 0x30
 801bbb0:	80fb      	strh	r3, [r7, #6]
 801bbb2:	e010      	b.n	801bbd6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801bbb4:	88fb      	ldrh	r3, [r7, #6]
 801bbb6:	3b1a      	subs	r3, #26
 801bbb8:	80fb      	strh	r3, [r7, #6]
 801bbba:	e00c      	b.n	801bbd6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801bbbc:	88fb      	ldrh	r3, [r7, #6]
 801bbbe:	3308      	adds	r3, #8
 801bbc0:	80fb      	strh	r3, [r7, #6]
 801bbc2:	e008      	b.n	801bbd6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801bbc4:	88fb      	ldrh	r3, [r7, #6]
 801bbc6:	3b50      	subs	r3, #80	; 0x50
 801bbc8:	80fb      	strh	r3, [r7, #6]
 801bbca:	e004      	b.n	801bbd6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801bbcc:	88fb      	ldrh	r3, [r7, #6]
 801bbce:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801bbd2:	80fb      	strh	r3, [r7, #6]
 801bbd4:	bf00      	nop
			}
			break;
 801bbd6:	e008      	b.n	801bbea <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801bbd8:	89fb      	ldrh	r3, [r7, #14]
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d195      	bne.n	801bb0a <ff_wtoupper+0x1a>
 801bbde:	8a3b      	ldrh	r3, [r7, #16]
 801bbe0:	005b      	lsls	r3, r3, #1
 801bbe2:	697a      	ldr	r2, [r7, #20]
 801bbe4:	4413      	add	r3, r2
 801bbe6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801bbe8:	e78f      	b.n	801bb0a <ff_wtoupper+0x1a>
			break;
 801bbea:	bf00      	nop
	}

	return chr;
 801bbec:	88fb      	ldrh	r3, [r7, #6]
}
 801bbee:	4618      	mov	r0, r3
 801bbf0:	371c      	adds	r7, #28
 801bbf2:	46bd      	mov	sp, r7
 801bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbf8:	4770      	bx	lr
 801bbfa:	bf00      	nop
 801bbfc:	08022a80 	.word	0x08022a80
 801bc00:	08022c74 	.word	0x08022c74

0801bc04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801bc04:	b580      	push	{r7, lr}
 801bc06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801bc08:	2200      	movs	r2, #0
 801bc0a:	4912      	ldr	r1, [pc, #72]	; (801bc54 <MX_USB_DEVICE_Init+0x50>)
 801bc0c:	4812      	ldr	r0, [pc, #72]	; (801bc58 <MX_USB_DEVICE_Init+0x54>)
 801bc0e:	f7fb fe98 	bl	8017942 <USBD_Init>
 801bc12:	4603      	mov	r3, r0
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	d001      	beq.n	801bc1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801bc18:	f7ec f8be 	bl	8007d98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801bc1c:	490f      	ldr	r1, [pc, #60]	; (801bc5c <MX_USB_DEVICE_Init+0x58>)
 801bc1e:	480e      	ldr	r0, [pc, #56]	; (801bc58 <MX_USB_DEVICE_Init+0x54>)
 801bc20:	f7fb fec5 	bl	80179ae <USBD_RegisterClass>
 801bc24:	4603      	mov	r3, r0
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d001      	beq.n	801bc2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801bc2a:	f7ec f8b5 	bl	8007d98 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801bc2e:	490c      	ldr	r1, [pc, #48]	; (801bc60 <MX_USB_DEVICE_Init+0x5c>)
 801bc30:	4809      	ldr	r0, [pc, #36]	; (801bc58 <MX_USB_DEVICE_Init+0x54>)
 801bc32:	f7fa fb17 	bl	8016264 <USBD_MSC_RegisterStorage>
 801bc36:	4603      	mov	r3, r0
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d001      	beq.n	801bc40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801bc3c:	f7ec f8ac 	bl	8007d98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801bc40:	4805      	ldr	r0, [pc, #20]	; (801bc58 <MX_USB_DEVICE_Init+0x54>)
 801bc42:	f7fb fed5 	bl	80179f0 <USBD_Start>
 801bc46:	4603      	mov	r3, r0
 801bc48:	2b00      	cmp	r3, #0
 801bc4a:	d001      	beq.n	801bc50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801bc4c:	f7ec f8a4 	bl	8007d98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801bc50:	bf00      	nop
 801bc52:	bd80      	pop	{r7, pc}
 801bc54:	20000324 	.word	0x20000324
 801bc58:	2000758c 	.word	0x2000758c
 801bc5c:	2000023c 	.word	0x2000023c
 801bc60:	20000384 	.word	0x20000384

0801bc64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bc64:	b480      	push	{r7}
 801bc66:	b083      	sub	sp, #12
 801bc68:	af00      	add	r7, sp, #0
 801bc6a:	4603      	mov	r3, r0
 801bc6c:	6039      	str	r1, [r7, #0]
 801bc6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801bc70:	683b      	ldr	r3, [r7, #0]
 801bc72:	2212      	movs	r2, #18
 801bc74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801bc76:	4b03      	ldr	r3, [pc, #12]	; (801bc84 <USBD_FS_DeviceDescriptor+0x20>)
}
 801bc78:	4618      	mov	r0, r3
 801bc7a:	370c      	adds	r7, #12
 801bc7c:	46bd      	mov	sp, r7
 801bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc82:	4770      	bx	lr
 801bc84:	20000344 	.word	0x20000344

0801bc88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bc88:	b480      	push	{r7}
 801bc8a:	b083      	sub	sp, #12
 801bc8c:	af00      	add	r7, sp, #0
 801bc8e:	4603      	mov	r3, r0
 801bc90:	6039      	str	r1, [r7, #0]
 801bc92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801bc94:	683b      	ldr	r3, [r7, #0]
 801bc96:	2204      	movs	r2, #4
 801bc98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801bc9a:	4b03      	ldr	r3, [pc, #12]	; (801bca8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801bc9c:	4618      	mov	r0, r3
 801bc9e:	370c      	adds	r7, #12
 801bca0:	46bd      	mov	sp, r7
 801bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bca6:	4770      	bx	lr
 801bca8:	20000364 	.word	0x20000364

0801bcac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bcac:	b580      	push	{r7, lr}
 801bcae:	b082      	sub	sp, #8
 801bcb0:	af00      	add	r7, sp, #0
 801bcb2:	4603      	mov	r3, r0
 801bcb4:	6039      	str	r1, [r7, #0]
 801bcb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801bcb8:	79fb      	ldrb	r3, [r7, #7]
 801bcba:	2b00      	cmp	r3, #0
 801bcbc:	d105      	bne.n	801bcca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801bcbe:	683a      	ldr	r2, [r7, #0]
 801bcc0:	4907      	ldr	r1, [pc, #28]	; (801bce0 <USBD_FS_ProductStrDescriptor+0x34>)
 801bcc2:	4808      	ldr	r0, [pc, #32]	; (801bce4 <USBD_FS_ProductStrDescriptor+0x38>)
 801bcc4:	f7fc fe9a 	bl	80189fc <USBD_GetString>
 801bcc8:	e004      	b.n	801bcd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801bcca:	683a      	ldr	r2, [r7, #0]
 801bccc:	4904      	ldr	r1, [pc, #16]	; (801bce0 <USBD_FS_ProductStrDescriptor+0x34>)
 801bcce:	4805      	ldr	r0, [pc, #20]	; (801bce4 <USBD_FS_ProductStrDescriptor+0x38>)
 801bcd0:	f7fc fe94 	bl	80189fc <USBD_GetString>
  }
  return USBD_StrDesc;
 801bcd4:	4b02      	ldr	r3, [pc, #8]	; (801bce0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801bcd6:	4618      	mov	r0, r3
 801bcd8:	3708      	adds	r7, #8
 801bcda:	46bd      	mov	sp, r7
 801bcdc:	bd80      	pop	{r7, pc}
 801bcde:	bf00      	nop
 801bce0:	2000785c 	.word	0x2000785c
 801bce4:	08022878 	.word	0x08022878

0801bce8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bce8:	b580      	push	{r7, lr}
 801bcea:	b082      	sub	sp, #8
 801bcec:	af00      	add	r7, sp, #0
 801bcee:	4603      	mov	r3, r0
 801bcf0:	6039      	str	r1, [r7, #0]
 801bcf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801bcf4:	683a      	ldr	r2, [r7, #0]
 801bcf6:	4904      	ldr	r1, [pc, #16]	; (801bd08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801bcf8:	4804      	ldr	r0, [pc, #16]	; (801bd0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801bcfa:	f7fc fe7f 	bl	80189fc <USBD_GetString>
  return USBD_StrDesc;
 801bcfe:	4b02      	ldr	r3, [pc, #8]	; (801bd08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801bd00:	4618      	mov	r0, r3
 801bd02:	3708      	adds	r7, #8
 801bd04:	46bd      	mov	sp, r7
 801bd06:	bd80      	pop	{r7, pc}
 801bd08:	2000785c 	.word	0x2000785c
 801bd0c:	0802288c 	.word	0x0802288c

0801bd10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bd10:	b580      	push	{r7, lr}
 801bd12:	b082      	sub	sp, #8
 801bd14:	af00      	add	r7, sp, #0
 801bd16:	4603      	mov	r3, r0
 801bd18:	6039      	str	r1, [r7, #0]
 801bd1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801bd1c:	683b      	ldr	r3, [r7, #0]
 801bd1e:	221a      	movs	r2, #26
 801bd20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801bd22:	f000 f855 	bl	801bdd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801bd26:	4b02      	ldr	r3, [pc, #8]	; (801bd30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801bd28:	4618      	mov	r0, r3
 801bd2a:	3708      	adds	r7, #8
 801bd2c:	46bd      	mov	sp, r7
 801bd2e:	bd80      	pop	{r7, pc}
 801bd30:	20000368 	.word	0x20000368

0801bd34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bd34:	b580      	push	{r7, lr}
 801bd36:	b082      	sub	sp, #8
 801bd38:	af00      	add	r7, sp, #0
 801bd3a:	4603      	mov	r3, r0
 801bd3c:	6039      	str	r1, [r7, #0]
 801bd3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801bd40:	79fb      	ldrb	r3, [r7, #7]
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d105      	bne.n	801bd52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801bd46:	683a      	ldr	r2, [r7, #0]
 801bd48:	4907      	ldr	r1, [pc, #28]	; (801bd68 <USBD_FS_ConfigStrDescriptor+0x34>)
 801bd4a:	4808      	ldr	r0, [pc, #32]	; (801bd6c <USBD_FS_ConfigStrDescriptor+0x38>)
 801bd4c:	f7fc fe56 	bl	80189fc <USBD_GetString>
 801bd50:	e004      	b.n	801bd5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801bd52:	683a      	ldr	r2, [r7, #0]
 801bd54:	4904      	ldr	r1, [pc, #16]	; (801bd68 <USBD_FS_ConfigStrDescriptor+0x34>)
 801bd56:	4805      	ldr	r0, [pc, #20]	; (801bd6c <USBD_FS_ConfigStrDescriptor+0x38>)
 801bd58:	f7fc fe50 	bl	80189fc <USBD_GetString>
  }
  return USBD_StrDesc;
 801bd5c:	4b02      	ldr	r3, [pc, #8]	; (801bd68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801bd5e:	4618      	mov	r0, r3
 801bd60:	3708      	adds	r7, #8
 801bd62:	46bd      	mov	sp, r7
 801bd64:	bd80      	pop	{r7, pc}
 801bd66:	bf00      	nop
 801bd68:	2000785c 	.word	0x2000785c
 801bd6c:	080228a0 	.word	0x080228a0

0801bd70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bd70:	b580      	push	{r7, lr}
 801bd72:	b082      	sub	sp, #8
 801bd74:	af00      	add	r7, sp, #0
 801bd76:	4603      	mov	r3, r0
 801bd78:	6039      	str	r1, [r7, #0]
 801bd7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801bd7c:	79fb      	ldrb	r3, [r7, #7]
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d105      	bne.n	801bd8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801bd82:	683a      	ldr	r2, [r7, #0]
 801bd84:	4907      	ldr	r1, [pc, #28]	; (801bda4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801bd86:	4808      	ldr	r0, [pc, #32]	; (801bda8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801bd88:	f7fc fe38 	bl	80189fc <USBD_GetString>
 801bd8c:	e004      	b.n	801bd98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801bd8e:	683a      	ldr	r2, [r7, #0]
 801bd90:	4904      	ldr	r1, [pc, #16]	; (801bda4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801bd92:	4805      	ldr	r0, [pc, #20]	; (801bda8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801bd94:	f7fc fe32 	bl	80189fc <USBD_GetString>
  }
  return USBD_StrDesc;
 801bd98:	4b02      	ldr	r3, [pc, #8]	; (801bda4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801bd9a:	4618      	mov	r0, r3
 801bd9c:	3708      	adds	r7, #8
 801bd9e:	46bd      	mov	sp, r7
 801bda0:	bd80      	pop	{r7, pc}
 801bda2:	bf00      	nop
 801bda4:	2000785c 	.word	0x2000785c
 801bda8:	080228ac 	.word	0x080228ac

0801bdac <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bdac:	b480      	push	{r7}
 801bdae:	b083      	sub	sp, #12
 801bdb0:	af00      	add	r7, sp, #0
 801bdb2:	4603      	mov	r3, r0
 801bdb4:	6039      	str	r1, [r7, #0]
 801bdb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801bdb8:	683b      	ldr	r3, [r7, #0]
 801bdba:	220c      	movs	r2, #12
 801bdbc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801bdbe:	4b03      	ldr	r3, [pc, #12]	; (801bdcc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801bdc0:	4618      	mov	r0, r3
 801bdc2:	370c      	adds	r7, #12
 801bdc4:	46bd      	mov	sp, r7
 801bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdca:	4770      	bx	lr
 801bdcc:	20000358 	.word	0x20000358

0801bdd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801bdd0:	b580      	push	{r7, lr}
 801bdd2:	b084      	sub	sp, #16
 801bdd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801bdd6:	4b0f      	ldr	r3, [pc, #60]	; (801be14 <Get_SerialNum+0x44>)
 801bdd8:	681b      	ldr	r3, [r3, #0]
 801bdda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801bddc:	4b0e      	ldr	r3, [pc, #56]	; (801be18 <Get_SerialNum+0x48>)
 801bdde:	681b      	ldr	r3, [r3, #0]
 801bde0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801bde2:	4b0e      	ldr	r3, [pc, #56]	; (801be1c <Get_SerialNum+0x4c>)
 801bde4:	681b      	ldr	r3, [r3, #0]
 801bde6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801bde8:	68fa      	ldr	r2, [r7, #12]
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	4413      	add	r3, r2
 801bdee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801bdf0:	68fb      	ldr	r3, [r7, #12]
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	d009      	beq.n	801be0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801bdf6:	2208      	movs	r2, #8
 801bdf8:	4909      	ldr	r1, [pc, #36]	; (801be20 <Get_SerialNum+0x50>)
 801bdfa:	68f8      	ldr	r0, [r7, #12]
 801bdfc:	f000 f814 	bl	801be28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801be00:	2204      	movs	r2, #4
 801be02:	4908      	ldr	r1, [pc, #32]	; (801be24 <Get_SerialNum+0x54>)
 801be04:	68b8      	ldr	r0, [r7, #8]
 801be06:	f000 f80f 	bl	801be28 <IntToUnicode>
  }
}
 801be0a:	bf00      	nop
 801be0c:	3710      	adds	r7, #16
 801be0e:	46bd      	mov	sp, r7
 801be10:	bd80      	pop	{r7, pc}
 801be12:	bf00      	nop
 801be14:	1ff07a10 	.word	0x1ff07a10
 801be18:	1ff07a14 	.word	0x1ff07a14
 801be1c:	1ff07a18 	.word	0x1ff07a18
 801be20:	2000036a 	.word	0x2000036a
 801be24:	2000037a 	.word	0x2000037a

0801be28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801be28:	b480      	push	{r7}
 801be2a:	b087      	sub	sp, #28
 801be2c:	af00      	add	r7, sp, #0
 801be2e:	60f8      	str	r0, [r7, #12]
 801be30:	60b9      	str	r1, [r7, #8]
 801be32:	4613      	mov	r3, r2
 801be34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801be36:	2300      	movs	r3, #0
 801be38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801be3a:	2300      	movs	r3, #0
 801be3c:	75fb      	strb	r3, [r7, #23]
 801be3e:	e027      	b.n	801be90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801be40:	68fb      	ldr	r3, [r7, #12]
 801be42:	0f1b      	lsrs	r3, r3, #28
 801be44:	2b09      	cmp	r3, #9
 801be46:	d80b      	bhi.n	801be60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801be48:	68fb      	ldr	r3, [r7, #12]
 801be4a:	0f1b      	lsrs	r3, r3, #28
 801be4c:	b2da      	uxtb	r2, r3
 801be4e:	7dfb      	ldrb	r3, [r7, #23]
 801be50:	005b      	lsls	r3, r3, #1
 801be52:	4619      	mov	r1, r3
 801be54:	68bb      	ldr	r3, [r7, #8]
 801be56:	440b      	add	r3, r1
 801be58:	3230      	adds	r2, #48	; 0x30
 801be5a:	b2d2      	uxtb	r2, r2
 801be5c:	701a      	strb	r2, [r3, #0]
 801be5e:	e00a      	b.n	801be76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801be60:	68fb      	ldr	r3, [r7, #12]
 801be62:	0f1b      	lsrs	r3, r3, #28
 801be64:	b2da      	uxtb	r2, r3
 801be66:	7dfb      	ldrb	r3, [r7, #23]
 801be68:	005b      	lsls	r3, r3, #1
 801be6a:	4619      	mov	r1, r3
 801be6c:	68bb      	ldr	r3, [r7, #8]
 801be6e:	440b      	add	r3, r1
 801be70:	3237      	adds	r2, #55	; 0x37
 801be72:	b2d2      	uxtb	r2, r2
 801be74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801be76:	68fb      	ldr	r3, [r7, #12]
 801be78:	011b      	lsls	r3, r3, #4
 801be7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801be7c:	7dfb      	ldrb	r3, [r7, #23]
 801be7e:	005b      	lsls	r3, r3, #1
 801be80:	3301      	adds	r3, #1
 801be82:	68ba      	ldr	r2, [r7, #8]
 801be84:	4413      	add	r3, r2
 801be86:	2200      	movs	r2, #0
 801be88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801be8a:	7dfb      	ldrb	r3, [r7, #23]
 801be8c:	3301      	adds	r3, #1
 801be8e:	75fb      	strb	r3, [r7, #23]
 801be90:	7dfa      	ldrb	r2, [r7, #23]
 801be92:	79fb      	ldrb	r3, [r7, #7]
 801be94:	429a      	cmp	r2, r3
 801be96:	d3d3      	bcc.n	801be40 <IntToUnicode+0x18>
  }
}
 801be98:	bf00      	nop
 801be9a:	bf00      	nop
 801be9c:	371c      	adds	r7, #28
 801be9e:	46bd      	mov	sp, r7
 801bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bea4:	4770      	bx	lr

0801bea6 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801bea6:	b580      	push	{r7, lr}
 801bea8:	b082      	sub	sp, #8
 801beaa:	af00      	add	r7, sp, #0
 801beac:	4603      	mov	r3, r0
 801beae:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
   BSP_SD_Init();
 801beb0:	f7f9 fdcc 	bl	8015a4c <BSP_SD_Init>
   return 0;
 801beb4:	2300      	movs	r3, #0

  /* USER CODE END 2 */
}
 801beb6:	4618      	mov	r0, r3
 801beb8:	3708      	adds	r7, #8
 801beba:	46bd      	mov	sp, r7
 801bebc:	bd80      	pop	{r7, pc}

0801bebe <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801bebe:	b580      	push	{r7, lr}
 801bec0:	b08e      	sub	sp, #56	; 0x38
 801bec2:	af00      	add	r7, sp, #0
 801bec4:	4603      	mov	r3, r0
 801bec6:	60b9      	str	r1, [r7, #8]
 801bec8:	607a      	str	r2, [r7, #4]
 801beca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  HAL_SD_CardInfoTypeDef info;
  int8_t ret = -1;  
 801becc:	23ff      	movs	r3, #255	; 0xff
 801bece:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 801bed2:	f7f9 fe58 	bl	8015b86 <BSP_SD_IsDetected>
 801bed6:	4603      	mov	r3, r0
 801bed8:	2b00      	cmp	r3, #0
 801beda:	d00f      	beq.n	801befc <STORAGE_GetCapacity_FS+0x3e>
  {
    BSP_SD_GetCardInfo(&info);
 801bedc:	f107 0314 	add.w	r3, r7, #20
 801bee0:	4618      	mov	r0, r3
 801bee2:	f7f9 fe1d 	bl	8015b20 <BSP_SD_GetCardInfo>
    
    *block_num =  info.LogBlockNbr  - 1;
 801bee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bee8:	1e5a      	subs	r2, r3, #1
 801beea:	68bb      	ldr	r3, [r7, #8]
 801beec:	601a      	str	r2, [r3, #0]
    *block_size = info.LogBlockSize;
 801beee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bef0:	b29a      	uxth	r2, r3
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	801a      	strh	r2, [r3, #0]
    ret = 0;
 801bef6:	2300      	movs	r3, #0
 801bef8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  return ret;
 801befc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 801bf00:	4618      	mov	r0, r3
 801bf02:	3738      	adds	r7, #56	; 0x38
 801bf04:	46bd      	mov	sp, r7
 801bf06:	bd80      	pop	{r7, pc}

0801bf08 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801bf08:	b580      	push	{r7, lr}
 801bf0a:	b084      	sub	sp, #16
 801bf0c:	af00      	add	r7, sp, #0
 801bf0e:	4603      	mov	r3, r0
 801bf10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
static int8_t prev_status = 0;
  int8_t ret = -1;
 801bf12:	23ff      	movs	r3, #255	; 0xff
 801bf14:	73fb      	strb	r3, [r7, #15]
  
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 801bf16:	f7f9 fe36 	bl	8015b86 <BSP_SD_IsDetected>
 801bf1a:	4603      	mov	r3, r0
 801bf1c:	2b00      	cmp	r3, #0
 801bf1e:	d011      	beq.n	801bf44 <STORAGE_IsReady_FS+0x3c>
  {
    if(prev_status < 0)
 801bf20:	4b0f      	ldr	r3, [pc, #60]	; (801bf60 <STORAGE_IsReady_FS+0x58>)
 801bf22:	f993 3000 	ldrsb.w	r3, [r3]
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	da04      	bge.n	801bf34 <STORAGE_IsReady_FS+0x2c>
    {
      BSP_SD_Init();
 801bf2a:	f7f9 fd8f 	bl	8015a4c <BSP_SD_Init>
      prev_status = 0;
 801bf2e:	4b0c      	ldr	r3, [pc, #48]	; (801bf60 <STORAGE_IsReady_FS+0x58>)
 801bf30:	2200      	movs	r2, #0
 801bf32:	701a      	strb	r2, [r3, #0]
      
    }
    if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801bf34:	f7f9 fde4 	bl	8015b00 <BSP_SD_GetCardState>
 801bf38:	4603      	mov	r3, r0
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	d10a      	bne.n	801bf54 <STORAGE_IsReady_FS+0x4c>
    {
      ret = 0;
 801bf3e:	2300      	movs	r3, #0
 801bf40:	73fb      	strb	r3, [r7, #15]
 801bf42:	e007      	b.n	801bf54 <STORAGE_IsReady_FS+0x4c>
    }
  }
  else if(prev_status == 0)
 801bf44:	4b06      	ldr	r3, [pc, #24]	; (801bf60 <STORAGE_IsReady_FS+0x58>)
 801bf46:	f993 3000 	ldrsb.w	r3, [r3]
 801bf4a:	2b00      	cmp	r3, #0
 801bf4c:	d102      	bne.n	801bf54 <STORAGE_IsReady_FS+0x4c>
  {
    prev_status = -1;
 801bf4e:	4b04      	ldr	r3, [pc, #16]	; (801bf60 <STORAGE_IsReady_FS+0x58>)
 801bf50:	22ff      	movs	r2, #255	; 0xff
 801bf52:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801bf54:	f997 300f 	ldrsb.w	r3, [r7, #15]
  /* USER CODE END 4 */
}
 801bf58:	4618      	mov	r0, r3
 801bf5a:	3710      	adds	r7, #16
 801bf5c:	46bd      	mov	sp, r7
 801bf5e:	bd80      	pop	{r7, pc}
 801bf60:	20007a5c 	.word	0x20007a5c

0801bf64 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801bf64:	b480      	push	{r7}
 801bf66:	b083      	sub	sp, #12
 801bf68:	af00      	add	r7, sp, #0
 801bf6a:	4603      	mov	r3, r0
 801bf6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801bf6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801bf70:	4618      	mov	r0, r3
 801bf72:	370c      	adds	r7, #12
 801bf74:	46bd      	mov	sp, r7
 801bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf7a:	4770      	bx	lr

0801bf7c <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801bf7c:	b580      	push	{r7, lr}
 801bf7e:	b086      	sub	sp, #24
 801bf80:	af00      	add	r7, sp, #0
 801bf82:	60b9      	str	r1, [r7, #8]
 801bf84:	607a      	str	r2, [r7, #4]
 801bf86:	461a      	mov	r2, r3
 801bf88:	4603      	mov	r3, r0
 801bf8a:	73fb      	strb	r3, [r7, #15]
 801bf8c:	4613      	mov	r3, r2
 801bf8e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
int8_t ret = -1;  
 801bf90:	23ff      	movs	r3, #255	; 0xff
 801bf92:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 801bf94:	f7f9 fdf7 	bl	8015b86 <BSP_SD_IsDetected>
 801bf98:	4603      	mov	r3, r0
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	d00d      	beq.n	801bfba <STORAGE_Read_FS+0x3e>
  {  
    BSP_SD_ReadBlocks_DMA((uint32_t *)buf, blk_addr, blk_len);
 801bf9e:	89bb      	ldrh	r3, [r7, #12]
 801bfa0:	461a      	mov	r2, r3
 801bfa2:	6879      	ldr	r1, [r7, #4]
 801bfa4:	68b8      	ldr	r0, [r7, #8]
 801bfa6:	f7f9 fd77 	bl	8015a98 <BSP_SD_ReadBlocks_DMA>
    /* Wait for Rx Transfer completion */
   // while (sdReadStatus == 0){}
   // sdReadStatus = 0;
 
    /* Wait until SD card is ready to use for new operation */
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK){}
 801bfaa:	bf00      	nop
 801bfac:	f7f9 fda8 	bl	8015b00 <BSP_SD_GetCardState>
 801bfb0:	4603      	mov	r3, r0
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	d1fa      	bne.n	801bfac <STORAGE_Read_FS+0x30>
    ret = 0;
 801bfb6:	2300      	movs	r3, #0
 801bfb8:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 801bfba:	f997 3017 	ldrsb.w	r3, [r7, #23]

  /* USER CODE END 6 */
}
 801bfbe:	4618      	mov	r0, r3
 801bfc0:	3718      	adds	r7, #24
 801bfc2:	46bd      	mov	sp, r7
 801bfc4:	bd80      	pop	{r7, pc}

0801bfc6 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801bfc6:	b580      	push	{r7, lr}
 801bfc8:	b086      	sub	sp, #24
 801bfca:	af00      	add	r7, sp, #0
 801bfcc:	60b9      	str	r1, [r7, #8]
 801bfce:	607a      	str	r2, [r7, #4]
 801bfd0:	461a      	mov	r2, r3
 801bfd2:	4603      	mov	r3, r0
 801bfd4:	73fb      	strb	r3, [r7, #15]
 801bfd6:	4613      	mov	r3, r2
 801bfd8:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
int8_t ret = -1;  
 801bfda:	23ff      	movs	r3, #255	; 0xff
 801bfdc:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 801bfde:	f7f9 fdd2 	bl	8015b86 <BSP_SD_IsDetected>
 801bfe2:	4603      	mov	r3, r0
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d00d      	beq.n	801c004 <STORAGE_Write_FS+0x3e>
  { 
    BSP_SD_WriteBlocks_DMA((uint32_t *)buf, blk_addr, blk_len);
 801bfe8:	89bb      	ldrh	r3, [r7, #12]
 801bfea:	461a      	mov	r2, r3
 801bfec:	6879      	ldr	r1, [r7, #4]
 801bfee:	68b8      	ldr	r0, [r7, #8]
 801bff0:	f7f9 fd6c 	bl	8015acc <BSP_SD_WriteBlocks_DMA>
    /* Wait for Tx Transfer completion */
    //while (sdWriteStatus == 0){}
    //sdWriteStatus = 0;
    
    /* Wait until SD card is ready to use for new operation */
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK){}
 801bff4:	bf00      	nop
 801bff6:	f7f9 fd83 	bl	8015b00 <BSP_SD_GetCardState>
 801bffa:	4603      	mov	r3, r0
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	d1fa      	bne.n	801bff6 <STORAGE_Write_FS+0x30>
    ret = 0;
 801c000:	2300      	movs	r3, #0
 801c002:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 801c004:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801c008:	4618      	mov	r0, r3
 801c00a:	3718      	adds	r7, #24
 801c00c:	46bd      	mov	sp, r7
 801c00e:	bd80      	pop	{r7, pc}

0801c010 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801c010:	b480      	push	{r7}
 801c012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801c014:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801c016:	4618      	mov	r0, r3
 801c018:	46bd      	mov	sp, r7
 801c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c01e:	4770      	bx	lr

0801c020 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801c020:	b580      	push	{r7, lr}
 801c022:	b08a      	sub	sp, #40	; 0x28
 801c024:	af00      	add	r7, sp, #0
 801c026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c028:	f107 0314 	add.w	r3, r7, #20
 801c02c:	2200      	movs	r2, #0
 801c02e:	601a      	str	r2, [r3, #0]
 801c030:	605a      	str	r2, [r3, #4]
 801c032:	609a      	str	r2, [r3, #8]
 801c034:	60da      	str	r2, [r3, #12]
 801c036:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c040:	d149      	bne.n	801c0d6 <HAL_PCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801c042:	4b27      	ldr	r3, [pc, #156]	; (801c0e0 <HAL_PCD_MspInit+0xc0>)
 801c044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c046:	4a26      	ldr	r2, [pc, #152]	; (801c0e0 <HAL_PCD_MspInit+0xc0>)
 801c048:	f043 0301 	orr.w	r3, r3, #1
 801c04c:	6313      	str	r3, [r2, #48]	; 0x30
 801c04e:	4b24      	ldr	r3, [pc, #144]	; (801c0e0 <HAL_PCD_MspInit+0xc0>)
 801c050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c052:	f003 0301 	and.w	r3, r3, #1
 801c056:	613b      	str	r3, [r7, #16]
 801c058:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 801c05a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c05e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801c060:	2300      	movs	r3, #0
 801c062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c064:	2300      	movs	r3, #0
 801c066:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 801c068:	f107 0314 	add.w	r3, r7, #20
 801c06c:	4619      	mov	r1, r3
 801c06e:	481d      	ldr	r0, [pc, #116]	; (801c0e4 <HAL_PCD_MspInit+0xc4>)
 801c070:	f7ee fc78 	bl	800a964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_D_N_Pin|USB_D_P_Pin;
 801c074:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801c078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c07a:	2302      	movs	r3, #2
 801c07c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c07e:	2300      	movs	r3, #0
 801c080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c082:	2303      	movs	r3, #3
 801c084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801c086:	230a      	movs	r3, #10
 801c088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c08a:	f107 0314 	add.w	r3, r7, #20
 801c08e:	4619      	mov	r1, r3
 801c090:	4814      	ldr	r0, [pc, #80]	; (801c0e4 <HAL_PCD_MspInit+0xc4>)
 801c092:	f7ee fc67 	bl	800a964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801c096:	4b12      	ldr	r3, [pc, #72]	; (801c0e0 <HAL_PCD_MspInit+0xc0>)
 801c098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c09a:	4a11      	ldr	r2, [pc, #68]	; (801c0e0 <HAL_PCD_MspInit+0xc0>)
 801c09c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c0a0:	6353      	str	r3, [r2, #52]	; 0x34
 801c0a2:	4b0f      	ldr	r3, [pc, #60]	; (801c0e0 <HAL_PCD_MspInit+0xc0>)
 801c0a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c0a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c0aa:	60fb      	str	r3, [r7, #12]
 801c0ac:	68fb      	ldr	r3, [r7, #12]
 801c0ae:	4b0c      	ldr	r3, [pc, #48]	; (801c0e0 <HAL_PCD_MspInit+0xc0>)
 801c0b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c0b2:	4a0b      	ldr	r2, [pc, #44]	; (801c0e0 <HAL_PCD_MspInit+0xc0>)
 801c0b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801c0b8:	6453      	str	r3, [r2, #68]	; 0x44
 801c0ba:	4b09      	ldr	r3, [pc, #36]	; (801c0e0 <HAL_PCD_MspInit+0xc0>)
 801c0bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c0be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801c0c2:	60bb      	str	r3, [r7, #8]
 801c0c4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801c0c6:	2200      	movs	r2, #0
 801c0c8:	2105      	movs	r1, #5
 801c0ca:	2043      	movs	r0, #67	; 0x43
 801c0cc:	f7ed ff07 	bl	8009ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801c0d0:	2043      	movs	r0, #67	; 0x43
 801c0d2:	f7ed ff20 	bl	8009f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801c0d6:	bf00      	nop
 801c0d8:	3728      	adds	r7, #40	; 0x28
 801c0da:	46bd      	mov	sp, r7
 801c0dc:	bd80      	pop	{r7, pc}
 801c0de:	bf00      	nop
 801c0e0:	40023800 	.word	0x40023800
 801c0e4:	40020000 	.word	0x40020000

0801c0e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c0e8:	b580      	push	{r7, lr}
 801c0ea:	b082      	sub	sp, #8
 801c0ec:	af00      	add	r7, sp, #0
 801c0ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 801c0f6:	687b      	ldr	r3, [r7, #4]
 801c0f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801c0fc:	4619      	mov	r1, r3
 801c0fe:	4610      	mov	r0, r2
 801c100:	f7fb fcc1 	bl	8017a86 <USBD_LL_SetupStage>
}
 801c104:	bf00      	nop
 801c106:	3708      	adds	r7, #8
 801c108:	46bd      	mov	sp, r7
 801c10a:	bd80      	pop	{r7, pc}

0801c10c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c10c:	b580      	push	{r7, lr}
 801c10e:	b082      	sub	sp, #8
 801c110:	af00      	add	r7, sp, #0
 801c112:	6078      	str	r0, [r7, #4]
 801c114:	460b      	mov	r3, r1
 801c116:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 801c11e:	78fa      	ldrb	r2, [r7, #3]
 801c120:	6879      	ldr	r1, [r7, #4]
 801c122:	4613      	mov	r3, r2
 801c124:	00db      	lsls	r3, r3, #3
 801c126:	1a9b      	subs	r3, r3, r2
 801c128:	009b      	lsls	r3, r3, #2
 801c12a:	440b      	add	r3, r1
 801c12c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801c130:	681a      	ldr	r2, [r3, #0]
 801c132:	78fb      	ldrb	r3, [r7, #3]
 801c134:	4619      	mov	r1, r3
 801c136:	f7fb fcfb 	bl	8017b30 <USBD_LL_DataOutStage>
}
 801c13a:	bf00      	nop
 801c13c:	3708      	adds	r7, #8
 801c13e:	46bd      	mov	sp, r7
 801c140:	bd80      	pop	{r7, pc}

0801c142 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c142:	b580      	push	{r7, lr}
 801c144:	b082      	sub	sp, #8
 801c146:	af00      	add	r7, sp, #0
 801c148:	6078      	str	r0, [r7, #4]
 801c14a:	460b      	mov	r3, r1
 801c14c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 801c154:	78fa      	ldrb	r2, [r7, #3]
 801c156:	6879      	ldr	r1, [r7, #4]
 801c158:	4613      	mov	r3, r2
 801c15a:	00db      	lsls	r3, r3, #3
 801c15c:	1a9b      	subs	r3, r3, r2
 801c15e:	009b      	lsls	r3, r3, #2
 801c160:	440b      	add	r3, r1
 801c162:	3348      	adds	r3, #72	; 0x48
 801c164:	681a      	ldr	r2, [r3, #0]
 801c166:	78fb      	ldrb	r3, [r7, #3]
 801c168:	4619      	mov	r1, r3
 801c16a:	f7fb fd44 	bl	8017bf6 <USBD_LL_DataInStage>
}
 801c16e:	bf00      	nop
 801c170:	3708      	adds	r7, #8
 801c172:	46bd      	mov	sp, r7
 801c174:	bd80      	pop	{r7, pc}

0801c176 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c176:	b580      	push	{r7, lr}
 801c178:	b082      	sub	sp, #8
 801c17a:	af00      	add	r7, sp, #0
 801c17c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801c184:	4618      	mov	r0, r3
 801c186:	f7fb fe48 	bl	8017e1a <USBD_LL_SOF>
}
 801c18a:	bf00      	nop
 801c18c:	3708      	adds	r7, #8
 801c18e:	46bd      	mov	sp, r7
 801c190:	bd80      	pop	{r7, pc}

0801c192 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c192:	b580      	push	{r7, lr}
 801c194:	b084      	sub	sp, #16
 801c196:	af00      	add	r7, sp, #0
 801c198:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801c19a:	2301      	movs	r3, #1
 801c19c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801c19e:	687b      	ldr	r3, [r7, #4]
 801c1a0:	68db      	ldr	r3, [r3, #12]
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d102      	bne.n	801c1ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801c1a6:	2300      	movs	r3, #0
 801c1a8:	73fb      	strb	r3, [r7, #15]
 801c1aa:	e008      	b.n	801c1be <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	68db      	ldr	r3, [r3, #12]
 801c1b0:	2b02      	cmp	r3, #2
 801c1b2:	d102      	bne.n	801c1ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801c1b4:	2301      	movs	r3, #1
 801c1b6:	73fb      	strb	r3, [r7, #15]
 801c1b8:	e001      	b.n	801c1be <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801c1ba:	f7eb fded 	bl	8007d98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801c1c4:	7bfa      	ldrb	r2, [r7, #15]
 801c1c6:	4611      	mov	r1, r2
 801c1c8:	4618      	mov	r0, r3
 801c1ca:	f7fb fdeb 	bl	8017da4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801c1ce:	687b      	ldr	r3, [r7, #4]
 801c1d0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801c1d4:	4618      	mov	r0, r3
 801c1d6:	f7fb fda4 	bl	8017d22 <USBD_LL_Reset>
}
 801c1da:	bf00      	nop
 801c1dc:	3710      	adds	r7, #16
 801c1de:	46bd      	mov	sp, r7
 801c1e0:	bd80      	pop	{r7, pc}
	...

0801c1e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c1e4:	b580      	push	{r7, lr}
 801c1e6:	b082      	sub	sp, #8
 801c1e8:	af00      	add	r7, sp, #0
 801c1ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801c1f2:	4618      	mov	r0, r3
 801c1f4:	f7fb fde6 	bl	8017dc4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801c200:	681b      	ldr	r3, [r3, #0]
 801c202:	687a      	ldr	r2, [r7, #4]
 801c204:	6812      	ldr	r2, [r2, #0]
 801c206:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801c20a:	f043 0301 	orr.w	r3, r3, #1
 801c20e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	6a1b      	ldr	r3, [r3, #32]
 801c214:	2b00      	cmp	r3, #0
 801c216:	d005      	beq.n	801c224 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c218:	4b04      	ldr	r3, [pc, #16]	; (801c22c <HAL_PCD_SuspendCallback+0x48>)
 801c21a:	691b      	ldr	r3, [r3, #16]
 801c21c:	4a03      	ldr	r2, [pc, #12]	; (801c22c <HAL_PCD_SuspendCallback+0x48>)
 801c21e:	f043 0306 	orr.w	r3, r3, #6
 801c222:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801c224:	bf00      	nop
 801c226:	3708      	adds	r7, #8
 801c228:	46bd      	mov	sp, r7
 801c22a:	bd80      	pop	{r7, pc}
 801c22c:	e000ed00 	.word	0xe000ed00

0801c230 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c230:	b580      	push	{r7, lr}
 801c232:	b082      	sub	sp, #8
 801c234:	af00      	add	r7, sp, #0
 801c236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801c23e:	4618      	mov	r0, r3
 801c240:	f7fb fdd5 	bl	8017dee <USBD_LL_Resume>
}
 801c244:	bf00      	nop
 801c246:	3708      	adds	r7, #8
 801c248:	46bd      	mov	sp, r7
 801c24a:	bd80      	pop	{r7, pc}

0801c24c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c24c:	b580      	push	{r7, lr}
 801c24e:	b082      	sub	sp, #8
 801c250:	af00      	add	r7, sp, #0
 801c252:	6078      	str	r0, [r7, #4]
 801c254:	460b      	mov	r3, r1
 801c256:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801c25e:	78fa      	ldrb	r2, [r7, #3]
 801c260:	4611      	mov	r1, r2
 801c262:	4618      	mov	r0, r3
 801c264:	f7fb fe00 	bl	8017e68 <USBD_LL_IsoOUTIncomplete>
}
 801c268:	bf00      	nop
 801c26a:	3708      	adds	r7, #8
 801c26c:	46bd      	mov	sp, r7
 801c26e:	bd80      	pop	{r7, pc}

0801c270 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c270:	b580      	push	{r7, lr}
 801c272:	b082      	sub	sp, #8
 801c274:	af00      	add	r7, sp, #0
 801c276:	6078      	str	r0, [r7, #4]
 801c278:	460b      	mov	r3, r1
 801c27a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801c282:	78fa      	ldrb	r2, [r7, #3]
 801c284:	4611      	mov	r1, r2
 801c286:	4618      	mov	r0, r3
 801c288:	f7fb fde1 	bl	8017e4e <USBD_LL_IsoINIncomplete>
}
 801c28c:	bf00      	nop
 801c28e:	3708      	adds	r7, #8
 801c290:	46bd      	mov	sp, r7
 801c292:	bd80      	pop	{r7, pc}

0801c294 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c294:	b580      	push	{r7, lr}
 801c296:	b082      	sub	sp, #8
 801c298:	af00      	add	r7, sp, #0
 801c29a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801c2a2:	4618      	mov	r0, r3
 801c2a4:	f7fb fded 	bl	8017e82 <USBD_LL_DevConnected>
}
 801c2a8:	bf00      	nop
 801c2aa:	3708      	adds	r7, #8
 801c2ac:	46bd      	mov	sp, r7
 801c2ae:	bd80      	pop	{r7, pc}

0801c2b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c2b0:	b580      	push	{r7, lr}
 801c2b2:	b082      	sub	sp, #8
 801c2b4:	af00      	add	r7, sp, #0
 801c2b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801c2be:	4618      	mov	r0, r3
 801c2c0:	f7fb fdea 	bl	8017e98 <USBD_LL_DevDisconnected>
}
 801c2c4:	bf00      	nop
 801c2c6:	3708      	adds	r7, #8
 801c2c8:	46bd      	mov	sp, r7
 801c2ca:	bd80      	pop	{r7, pc}

0801c2cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801c2cc:	b580      	push	{r7, lr}
 801c2ce:	b082      	sub	sp, #8
 801c2d0:	af00      	add	r7, sp, #0
 801c2d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	781b      	ldrb	r3, [r3, #0]
 801c2d8:	2b00      	cmp	r3, #0
 801c2da:	d13c      	bne.n	801c356 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801c2dc:	4a20      	ldr	r2, [pc, #128]	; (801c360 <USBD_LL_Init+0x94>)
 801c2de:	687b      	ldr	r3, [r7, #4]
 801c2e0:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	4a1e      	ldr	r2, [pc, #120]	; (801c360 <USBD_LL_Init+0x94>)
 801c2e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801c2ec:	4b1c      	ldr	r3, [pc, #112]	; (801c360 <USBD_LL_Init+0x94>)
 801c2ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801c2f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801c2f4:	4b1a      	ldr	r3, [pc, #104]	; (801c360 <USBD_LL_Init+0x94>)
 801c2f6:	2206      	movs	r2, #6
 801c2f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801c2fa:	4b19      	ldr	r3, [pc, #100]	; (801c360 <USBD_LL_Init+0x94>)
 801c2fc:	2200      	movs	r2, #0
 801c2fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801c300:	4b17      	ldr	r3, [pc, #92]	; (801c360 <USBD_LL_Init+0x94>)
 801c302:	2202      	movs	r2, #2
 801c304:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801c306:	4b16      	ldr	r3, [pc, #88]	; (801c360 <USBD_LL_Init+0x94>)
 801c308:	2200      	movs	r2, #0
 801c30a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801c30c:	4b14      	ldr	r3, [pc, #80]	; (801c360 <USBD_LL_Init+0x94>)
 801c30e:	2200      	movs	r2, #0
 801c310:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801c312:	4b13      	ldr	r3, [pc, #76]	; (801c360 <USBD_LL_Init+0x94>)
 801c314:	2200      	movs	r2, #0
 801c316:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 801c318:	4b11      	ldr	r3, [pc, #68]	; (801c360 <USBD_LL_Init+0x94>)
 801c31a:	2201      	movs	r2, #1
 801c31c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801c31e:	4b10      	ldr	r3, [pc, #64]	; (801c360 <USBD_LL_Init+0x94>)
 801c320:	2201      	movs	r2, #1
 801c322:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801c324:	4b0e      	ldr	r3, [pc, #56]	; (801c360 <USBD_LL_Init+0x94>)
 801c326:	2200      	movs	r2, #0
 801c328:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801c32a:	480d      	ldr	r0, [pc, #52]	; (801c360 <USBD_LL_Init+0x94>)
 801c32c:	f7f0 fce3 	bl	800ccf6 <HAL_PCD_Init>
 801c330:	4603      	mov	r3, r0
 801c332:	2b00      	cmp	r3, #0
 801c334:	d001      	beq.n	801c33a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801c336:	f7eb fd2f 	bl	8007d98 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801c33a:	2180      	movs	r1, #128	; 0x80
 801c33c:	4808      	ldr	r0, [pc, #32]	; (801c360 <USBD_LL_Init+0x94>)
 801c33e:	f7f1 fe90 	bl	800e062 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801c342:	2240      	movs	r2, #64	; 0x40
 801c344:	2100      	movs	r1, #0
 801c346:	4806      	ldr	r0, [pc, #24]	; (801c360 <USBD_LL_Init+0x94>)
 801c348:	f7f1 fe44 	bl	800dfd4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801c34c:	2280      	movs	r2, #128	; 0x80
 801c34e:	2101      	movs	r1, #1
 801c350:	4803      	ldr	r0, [pc, #12]	; (801c360 <USBD_LL_Init+0x94>)
 801c352:	f7f1 fe3f 	bl	800dfd4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801c356:	2300      	movs	r3, #0
}
 801c358:	4618      	mov	r0, r3
 801c35a:	3708      	adds	r7, #8
 801c35c:	46bd      	mov	sp, r7
 801c35e:	bd80      	pop	{r7, pc}
 801c360:	20007a60 	.word	0x20007a60

0801c364 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801c364:	b580      	push	{r7, lr}
 801c366:	b084      	sub	sp, #16
 801c368:	af00      	add	r7, sp, #0
 801c36a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c36c:	2300      	movs	r3, #0
 801c36e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c370:	2300      	movs	r3, #0
 801c372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c37a:	4618      	mov	r0, r3
 801c37c:	f7f0 fddf 	bl	800cf3e <HAL_PCD_Start>
 801c380:	4603      	mov	r3, r0
 801c382:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c384:	7bfb      	ldrb	r3, [r7, #15]
 801c386:	4618      	mov	r0, r3
 801c388:	f000 f99e 	bl	801c6c8 <USBD_Get_USB_Status>
 801c38c:	4603      	mov	r3, r0
 801c38e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c390:	7bbb      	ldrb	r3, [r7, #14]
}
 801c392:	4618      	mov	r0, r3
 801c394:	3710      	adds	r7, #16
 801c396:	46bd      	mov	sp, r7
 801c398:	bd80      	pop	{r7, pc}

0801c39a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801c39a:	b580      	push	{r7, lr}
 801c39c:	b084      	sub	sp, #16
 801c39e:	af00      	add	r7, sp, #0
 801c3a0:	6078      	str	r0, [r7, #4]
 801c3a2:	4608      	mov	r0, r1
 801c3a4:	4611      	mov	r1, r2
 801c3a6:	461a      	mov	r2, r3
 801c3a8:	4603      	mov	r3, r0
 801c3aa:	70fb      	strb	r3, [r7, #3]
 801c3ac:	460b      	mov	r3, r1
 801c3ae:	70bb      	strb	r3, [r7, #2]
 801c3b0:	4613      	mov	r3, r2
 801c3b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c3b4:	2300      	movs	r3, #0
 801c3b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c3b8:	2300      	movs	r3, #0
 801c3ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801c3c2:	78bb      	ldrb	r3, [r7, #2]
 801c3c4:	883a      	ldrh	r2, [r7, #0]
 801c3c6:	78f9      	ldrb	r1, [r7, #3]
 801c3c8:	f7f1 f9df 	bl	800d78a <HAL_PCD_EP_Open>
 801c3cc:	4603      	mov	r3, r0
 801c3ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c3d0:	7bfb      	ldrb	r3, [r7, #15]
 801c3d2:	4618      	mov	r0, r3
 801c3d4:	f000 f978 	bl	801c6c8 <USBD_Get_USB_Status>
 801c3d8:	4603      	mov	r3, r0
 801c3da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c3dc:	7bbb      	ldrb	r3, [r7, #14]
}
 801c3de:	4618      	mov	r0, r3
 801c3e0:	3710      	adds	r7, #16
 801c3e2:	46bd      	mov	sp, r7
 801c3e4:	bd80      	pop	{r7, pc}

0801c3e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c3e6:	b580      	push	{r7, lr}
 801c3e8:	b084      	sub	sp, #16
 801c3ea:	af00      	add	r7, sp, #0
 801c3ec:	6078      	str	r0, [r7, #4]
 801c3ee:	460b      	mov	r3, r1
 801c3f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c3f2:	2300      	movs	r3, #0
 801c3f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c3f6:	2300      	movs	r3, #0
 801c3f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801c3fa:	687b      	ldr	r3, [r7, #4]
 801c3fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c400:	78fa      	ldrb	r2, [r7, #3]
 801c402:	4611      	mov	r1, r2
 801c404:	4618      	mov	r0, r3
 801c406:	f7f1 fa28 	bl	800d85a <HAL_PCD_EP_Close>
 801c40a:	4603      	mov	r3, r0
 801c40c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c40e:	7bfb      	ldrb	r3, [r7, #15]
 801c410:	4618      	mov	r0, r3
 801c412:	f000 f959 	bl	801c6c8 <USBD_Get_USB_Status>
 801c416:	4603      	mov	r3, r0
 801c418:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c41a:	7bbb      	ldrb	r3, [r7, #14]
}
 801c41c:	4618      	mov	r0, r3
 801c41e:	3710      	adds	r7, #16
 801c420:	46bd      	mov	sp, r7
 801c422:	bd80      	pop	{r7, pc}

0801c424 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c424:	b580      	push	{r7, lr}
 801c426:	b084      	sub	sp, #16
 801c428:	af00      	add	r7, sp, #0
 801c42a:	6078      	str	r0, [r7, #4]
 801c42c:	460b      	mov	r3, r1
 801c42e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c430:	2300      	movs	r3, #0
 801c432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c434:	2300      	movs	r3, #0
 801c436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c43e:	78fa      	ldrb	r2, [r7, #3]
 801c440:	4611      	mov	r1, r2
 801c442:	4618      	mov	r0, r3
 801c444:	f7f1 fbba 	bl	800dbbc <HAL_PCD_EP_Flush>
 801c448:	4603      	mov	r3, r0
 801c44a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c44c:	7bfb      	ldrb	r3, [r7, #15]
 801c44e:	4618      	mov	r0, r3
 801c450:	f000 f93a 	bl	801c6c8 <USBD_Get_USB_Status>
 801c454:	4603      	mov	r3, r0
 801c456:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c458:	7bbb      	ldrb	r3, [r7, #14]
}
 801c45a:	4618      	mov	r0, r3
 801c45c:	3710      	adds	r7, #16
 801c45e:	46bd      	mov	sp, r7
 801c460:	bd80      	pop	{r7, pc}

0801c462 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c462:	b580      	push	{r7, lr}
 801c464:	b084      	sub	sp, #16
 801c466:	af00      	add	r7, sp, #0
 801c468:	6078      	str	r0, [r7, #4]
 801c46a:	460b      	mov	r3, r1
 801c46c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c46e:	2300      	movs	r3, #0
 801c470:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c472:	2300      	movs	r3, #0
 801c474:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801c476:	687b      	ldr	r3, [r7, #4]
 801c478:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c47c:	78fa      	ldrb	r2, [r7, #3]
 801c47e:	4611      	mov	r1, r2
 801c480:	4618      	mov	r0, r3
 801c482:	f7f1 fae1 	bl	800da48 <HAL_PCD_EP_SetStall>
 801c486:	4603      	mov	r3, r0
 801c488:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c48a:	7bfb      	ldrb	r3, [r7, #15]
 801c48c:	4618      	mov	r0, r3
 801c48e:	f000 f91b 	bl	801c6c8 <USBD_Get_USB_Status>
 801c492:	4603      	mov	r3, r0
 801c494:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c496:	7bbb      	ldrb	r3, [r7, #14]
}
 801c498:	4618      	mov	r0, r3
 801c49a:	3710      	adds	r7, #16
 801c49c:	46bd      	mov	sp, r7
 801c49e:	bd80      	pop	{r7, pc}

0801c4a0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c4a0:	b580      	push	{r7, lr}
 801c4a2:	b084      	sub	sp, #16
 801c4a4:	af00      	add	r7, sp, #0
 801c4a6:	6078      	str	r0, [r7, #4]
 801c4a8:	460b      	mov	r3, r1
 801c4aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c4ac:	2300      	movs	r3, #0
 801c4ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c4b0:	2300      	movs	r3, #0
 801c4b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c4ba:	78fa      	ldrb	r2, [r7, #3]
 801c4bc:	4611      	mov	r1, r2
 801c4be:	4618      	mov	r0, r3
 801c4c0:	f7f1 fb26 	bl	800db10 <HAL_PCD_EP_ClrStall>
 801c4c4:	4603      	mov	r3, r0
 801c4c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c4c8:	7bfb      	ldrb	r3, [r7, #15]
 801c4ca:	4618      	mov	r0, r3
 801c4cc:	f000 f8fc 	bl	801c6c8 <USBD_Get_USB_Status>
 801c4d0:	4603      	mov	r3, r0
 801c4d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c4d4:	7bbb      	ldrb	r3, [r7, #14]
}
 801c4d6:	4618      	mov	r0, r3
 801c4d8:	3710      	adds	r7, #16
 801c4da:	46bd      	mov	sp, r7
 801c4dc:	bd80      	pop	{r7, pc}

0801c4de <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c4de:	b480      	push	{r7}
 801c4e0:	b085      	sub	sp, #20
 801c4e2:	af00      	add	r7, sp, #0
 801c4e4:	6078      	str	r0, [r7, #4]
 801c4e6:	460b      	mov	r3, r1
 801c4e8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c4f0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801c4f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	da0b      	bge.n	801c512 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801c4fa:	78fb      	ldrb	r3, [r7, #3]
 801c4fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c500:	68f9      	ldr	r1, [r7, #12]
 801c502:	4613      	mov	r3, r2
 801c504:	00db      	lsls	r3, r3, #3
 801c506:	1a9b      	subs	r3, r3, r2
 801c508:	009b      	lsls	r3, r3, #2
 801c50a:	440b      	add	r3, r1
 801c50c:	333e      	adds	r3, #62	; 0x3e
 801c50e:	781b      	ldrb	r3, [r3, #0]
 801c510:	e00b      	b.n	801c52a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801c512:	78fb      	ldrb	r3, [r7, #3]
 801c514:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c518:	68f9      	ldr	r1, [r7, #12]
 801c51a:	4613      	mov	r3, r2
 801c51c:	00db      	lsls	r3, r3, #3
 801c51e:	1a9b      	subs	r3, r3, r2
 801c520:	009b      	lsls	r3, r3, #2
 801c522:	440b      	add	r3, r1
 801c524:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801c528:	781b      	ldrb	r3, [r3, #0]
  }
}
 801c52a:	4618      	mov	r0, r3
 801c52c:	3714      	adds	r7, #20
 801c52e:	46bd      	mov	sp, r7
 801c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c534:	4770      	bx	lr

0801c536 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801c536:	b580      	push	{r7, lr}
 801c538:	b084      	sub	sp, #16
 801c53a:	af00      	add	r7, sp, #0
 801c53c:	6078      	str	r0, [r7, #4]
 801c53e:	460b      	mov	r3, r1
 801c540:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c542:	2300      	movs	r3, #0
 801c544:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c546:	2300      	movs	r3, #0
 801c548:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801c54a:	687b      	ldr	r3, [r7, #4]
 801c54c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c550:	78fa      	ldrb	r2, [r7, #3]
 801c552:	4611      	mov	r1, r2
 801c554:	4618      	mov	r0, r3
 801c556:	f7f1 f8f3 	bl	800d740 <HAL_PCD_SetAddress>
 801c55a:	4603      	mov	r3, r0
 801c55c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c55e:	7bfb      	ldrb	r3, [r7, #15]
 801c560:	4618      	mov	r0, r3
 801c562:	f000 f8b1 	bl	801c6c8 <USBD_Get_USB_Status>
 801c566:	4603      	mov	r3, r0
 801c568:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c56a:	7bbb      	ldrb	r3, [r7, #14]
}
 801c56c:	4618      	mov	r0, r3
 801c56e:	3710      	adds	r7, #16
 801c570:	46bd      	mov	sp, r7
 801c572:	bd80      	pop	{r7, pc}

0801c574 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801c574:	b580      	push	{r7, lr}
 801c576:	b086      	sub	sp, #24
 801c578:	af00      	add	r7, sp, #0
 801c57a:	60f8      	str	r0, [r7, #12]
 801c57c:	607a      	str	r2, [r7, #4]
 801c57e:	603b      	str	r3, [r7, #0]
 801c580:	460b      	mov	r3, r1
 801c582:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c584:	2300      	movs	r3, #0
 801c586:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c588:	2300      	movs	r3, #0
 801c58a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801c58c:	68fb      	ldr	r3, [r7, #12]
 801c58e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801c592:	7af9      	ldrb	r1, [r7, #11]
 801c594:	683b      	ldr	r3, [r7, #0]
 801c596:	687a      	ldr	r2, [r7, #4]
 801c598:	f7f1 fa0c 	bl	800d9b4 <HAL_PCD_EP_Transmit>
 801c59c:	4603      	mov	r3, r0
 801c59e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c5a0:	7dfb      	ldrb	r3, [r7, #23]
 801c5a2:	4618      	mov	r0, r3
 801c5a4:	f000 f890 	bl	801c6c8 <USBD_Get_USB_Status>
 801c5a8:	4603      	mov	r3, r0
 801c5aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801c5ac:	7dbb      	ldrb	r3, [r7, #22]
}
 801c5ae:	4618      	mov	r0, r3
 801c5b0:	3718      	adds	r7, #24
 801c5b2:	46bd      	mov	sp, r7
 801c5b4:	bd80      	pop	{r7, pc}

0801c5b6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801c5b6:	b580      	push	{r7, lr}
 801c5b8:	b086      	sub	sp, #24
 801c5ba:	af00      	add	r7, sp, #0
 801c5bc:	60f8      	str	r0, [r7, #12]
 801c5be:	607a      	str	r2, [r7, #4]
 801c5c0:	603b      	str	r3, [r7, #0]
 801c5c2:	460b      	mov	r3, r1
 801c5c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c5c6:	2300      	movs	r3, #0
 801c5c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c5ca:	2300      	movs	r3, #0
 801c5cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801c5ce:	68fb      	ldr	r3, [r7, #12]
 801c5d0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801c5d4:	7af9      	ldrb	r1, [r7, #11]
 801c5d6:	683b      	ldr	r3, [r7, #0]
 801c5d8:	687a      	ldr	r2, [r7, #4]
 801c5da:	f7f1 f988 	bl	800d8ee <HAL_PCD_EP_Receive>
 801c5de:	4603      	mov	r3, r0
 801c5e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c5e2:	7dfb      	ldrb	r3, [r7, #23]
 801c5e4:	4618      	mov	r0, r3
 801c5e6:	f000 f86f 	bl	801c6c8 <USBD_Get_USB_Status>
 801c5ea:	4603      	mov	r3, r0
 801c5ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801c5ee:	7dbb      	ldrb	r3, [r7, #22]
}
 801c5f0:	4618      	mov	r0, r3
 801c5f2:	3718      	adds	r7, #24
 801c5f4:	46bd      	mov	sp, r7
 801c5f6:	bd80      	pop	{r7, pc}

0801c5f8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c5f8:	b580      	push	{r7, lr}
 801c5fa:	b082      	sub	sp, #8
 801c5fc:	af00      	add	r7, sp, #0
 801c5fe:	6078      	str	r0, [r7, #4]
 801c600:	460b      	mov	r3, r1
 801c602:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c60a:	78fa      	ldrb	r2, [r7, #3]
 801c60c:	4611      	mov	r1, r2
 801c60e:	4618      	mov	r0, r3
 801c610:	f7f1 f9b8 	bl	800d984 <HAL_PCD_EP_GetRxCount>
 801c614:	4603      	mov	r3, r0
}
 801c616:	4618      	mov	r0, r3
 801c618:	3708      	adds	r7, #8
 801c61a:	46bd      	mov	sp, r7
 801c61c:	bd80      	pop	{r7, pc}
	...

0801c620 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801c620:	b580      	push	{r7, lr}
 801c622:	b082      	sub	sp, #8
 801c624:	af00      	add	r7, sp, #0
 801c626:	6078      	str	r0, [r7, #4]
 801c628:	460b      	mov	r3, r1
 801c62a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801c62c:	78fb      	ldrb	r3, [r7, #3]
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d002      	beq.n	801c638 <HAL_PCDEx_LPM_Callback+0x18>
 801c632:	2b01      	cmp	r3, #1
 801c634:	d01f      	beq.n	801c676 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801c636:	e03b      	b.n	801c6b0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	6a1b      	ldr	r3, [r3, #32]
 801c63c:	2b00      	cmp	r3, #0
 801c63e:	d007      	beq.n	801c650 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801c640:	f000 f83c 	bl	801c6bc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c644:	4b1c      	ldr	r3, [pc, #112]	; (801c6b8 <HAL_PCDEx_LPM_Callback+0x98>)
 801c646:	691b      	ldr	r3, [r3, #16]
 801c648:	4a1b      	ldr	r2, [pc, #108]	; (801c6b8 <HAL_PCDEx_LPM_Callback+0x98>)
 801c64a:	f023 0306 	bic.w	r3, r3, #6
 801c64e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	681b      	ldr	r3, [r3, #0]
 801c654:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801c658:	681b      	ldr	r3, [r3, #0]
 801c65a:	687a      	ldr	r2, [r7, #4]
 801c65c:	6812      	ldr	r2, [r2, #0]
 801c65e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801c662:	f023 0301 	bic.w	r3, r3, #1
 801c666:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801c66e:	4618      	mov	r0, r3
 801c670:	f7fb fbbd 	bl	8017dee <USBD_LL_Resume>
    break;
 801c674:	e01c      	b.n	801c6b0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	681b      	ldr	r3, [r3, #0]
 801c67a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801c67e:	681b      	ldr	r3, [r3, #0]
 801c680:	687a      	ldr	r2, [r7, #4]
 801c682:	6812      	ldr	r2, [r2, #0]
 801c684:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801c688:	f043 0301 	orr.w	r3, r3, #1
 801c68c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801c694:	4618      	mov	r0, r3
 801c696:	f7fb fb95 	bl	8017dc4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	6a1b      	ldr	r3, [r3, #32]
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d005      	beq.n	801c6ae <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c6a2:	4b05      	ldr	r3, [pc, #20]	; (801c6b8 <HAL_PCDEx_LPM_Callback+0x98>)
 801c6a4:	691b      	ldr	r3, [r3, #16]
 801c6a6:	4a04      	ldr	r2, [pc, #16]	; (801c6b8 <HAL_PCDEx_LPM_Callback+0x98>)
 801c6a8:	f043 0306 	orr.w	r3, r3, #6
 801c6ac:	6113      	str	r3, [r2, #16]
    break;
 801c6ae:	bf00      	nop
}
 801c6b0:	bf00      	nop
 801c6b2:	3708      	adds	r7, #8
 801c6b4:	46bd      	mov	sp, r7
 801c6b6:	bd80      	pop	{r7, pc}
 801c6b8:	e000ed00 	.word	0xe000ed00

0801c6bc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801c6bc:	b580      	push	{r7, lr}
 801c6be:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801c6c0:	f7ea fa3c 	bl	8006b3c <SystemClock_Config>
}
 801c6c4:	bf00      	nop
 801c6c6:	bd80      	pop	{r7, pc}

0801c6c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801c6c8:	b480      	push	{r7}
 801c6ca:	b085      	sub	sp, #20
 801c6cc:	af00      	add	r7, sp, #0
 801c6ce:	4603      	mov	r3, r0
 801c6d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c6d2:	2300      	movs	r3, #0
 801c6d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801c6d6:	79fb      	ldrb	r3, [r7, #7]
 801c6d8:	2b03      	cmp	r3, #3
 801c6da:	d817      	bhi.n	801c70c <USBD_Get_USB_Status+0x44>
 801c6dc:	a201      	add	r2, pc, #4	; (adr r2, 801c6e4 <USBD_Get_USB_Status+0x1c>)
 801c6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c6e2:	bf00      	nop
 801c6e4:	0801c6f5 	.word	0x0801c6f5
 801c6e8:	0801c6fb 	.word	0x0801c6fb
 801c6ec:	0801c701 	.word	0x0801c701
 801c6f0:	0801c707 	.word	0x0801c707
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801c6f4:	2300      	movs	r3, #0
 801c6f6:	73fb      	strb	r3, [r7, #15]
    break;
 801c6f8:	e00b      	b.n	801c712 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801c6fa:	2303      	movs	r3, #3
 801c6fc:	73fb      	strb	r3, [r7, #15]
    break;
 801c6fe:	e008      	b.n	801c712 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801c700:	2301      	movs	r3, #1
 801c702:	73fb      	strb	r3, [r7, #15]
    break;
 801c704:	e005      	b.n	801c712 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801c706:	2303      	movs	r3, #3
 801c708:	73fb      	strb	r3, [r7, #15]
    break;
 801c70a:	e002      	b.n	801c712 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801c70c:	2303      	movs	r3, #3
 801c70e:	73fb      	strb	r3, [r7, #15]
    break;
 801c710:	bf00      	nop
  }
  return usb_status;
 801c712:	7bfb      	ldrb	r3, [r7, #15]
}
 801c714:	4618      	mov	r0, r3
 801c716:	3714      	adds	r7, #20
 801c718:	46bd      	mov	sp, r7
 801c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c71e:	4770      	bx	lr

0801c720 <atoi>:
 801c720:	220a      	movs	r2, #10
 801c722:	2100      	movs	r1, #0
 801c724:	f001 bd3c 	b.w	801e1a0 <strtol>

0801c728 <__errno>:
 801c728:	4b01      	ldr	r3, [pc, #4]	; (801c730 <__errno+0x8>)
 801c72a:	6818      	ldr	r0, [r3, #0]
 801c72c:	4770      	bx	lr
 801c72e:	bf00      	nop
 801c730:	200003a4 	.word	0x200003a4

0801c734 <__libc_init_array>:
 801c734:	b570      	push	{r4, r5, r6, lr}
 801c736:	4d0d      	ldr	r5, [pc, #52]	; (801c76c <__libc_init_array+0x38>)
 801c738:	4c0d      	ldr	r4, [pc, #52]	; (801c770 <__libc_init_array+0x3c>)
 801c73a:	1b64      	subs	r4, r4, r5
 801c73c:	10a4      	asrs	r4, r4, #2
 801c73e:	2600      	movs	r6, #0
 801c740:	42a6      	cmp	r6, r4
 801c742:	d109      	bne.n	801c758 <__libc_init_array+0x24>
 801c744:	4d0b      	ldr	r5, [pc, #44]	; (801c774 <__libc_init_array+0x40>)
 801c746:	4c0c      	ldr	r4, [pc, #48]	; (801c778 <__libc_init_array+0x44>)
 801c748:	f004 fb90 	bl	8020e6c <_init>
 801c74c:	1b64      	subs	r4, r4, r5
 801c74e:	10a4      	asrs	r4, r4, #2
 801c750:	2600      	movs	r6, #0
 801c752:	42a6      	cmp	r6, r4
 801c754:	d105      	bne.n	801c762 <__libc_init_array+0x2e>
 801c756:	bd70      	pop	{r4, r5, r6, pc}
 801c758:	f855 3b04 	ldr.w	r3, [r5], #4
 801c75c:	4798      	blx	r3
 801c75e:	3601      	adds	r6, #1
 801c760:	e7ee      	b.n	801c740 <__libc_init_array+0xc>
 801c762:	f855 3b04 	ldr.w	r3, [r5], #4
 801c766:	4798      	blx	r3
 801c768:	3601      	adds	r6, #1
 801c76a:	e7f2      	b.n	801c752 <__libc_init_array+0x1e>
 801c76c:	080231fc 	.word	0x080231fc
 801c770:	080231fc 	.word	0x080231fc
 801c774:	080231fc 	.word	0x080231fc
 801c778:	08023200 	.word	0x08023200

0801c77c <malloc>:
 801c77c:	4b02      	ldr	r3, [pc, #8]	; (801c788 <malloc+0xc>)
 801c77e:	4601      	mov	r1, r0
 801c780:	6818      	ldr	r0, [r3, #0]
 801c782:	f000 b88d 	b.w	801c8a0 <_malloc_r>
 801c786:	bf00      	nop
 801c788:	200003a4 	.word	0x200003a4

0801c78c <free>:
 801c78c:	4b02      	ldr	r3, [pc, #8]	; (801c798 <free+0xc>)
 801c78e:	4601      	mov	r1, r0
 801c790:	6818      	ldr	r0, [r3, #0]
 801c792:	f000 b819 	b.w	801c7c8 <_free_r>
 801c796:	bf00      	nop
 801c798:	200003a4 	.word	0x200003a4

0801c79c <memcpy>:
 801c79c:	440a      	add	r2, r1
 801c79e:	4291      	cmp	r1, r2
 801c7a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801c7a4:	d100      	bne.n	801c7a8 <memcpy+0xc>
 801c7a6:	4770      	bx	lr
 801c7a8:	b510      	push	{r4, lr}
 801c7aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c7ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c7b2:	4291      	cmp	r1, r2
 801c7b4:	d1f9      	bne.n	801c7aa <memcpy+0xe>
 801c7b6:	bd10      	pop	{r4, pc}

0801c7b8 <memset>:
 801c7b8:	4402      	add	r2, r0
 801c7ba:	4603      	mov	r3, r0
 801c7bc:	4293      	cmp	r3, r2
 801c7be:	d100      	bne.n	801c7c2 <memset+0xa>
 801c7c0:	4770      	bx	lr
 801c7c2:	f803 1b01 	strb.w	r1, [r3], #1
 801c7c6:	e7f9      	b.n	801c7bc <memset+0x4>

0801c7c8 <_free_r>:
 801c7c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c7ca:	2900      	cmp	r1, #0
 801c7cc:	d044      	beq.n	801c858 <_free_r+0x90>
 801c7ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c7d2:	9001      	str	r0, [sp, #4]
 801c7d4:	2b00      	cmp	r3, #0
 801c7d6:	f1a1 0404 	sub.w	r4, r1, #4
 801c7da:	bfb8      	it	lt
 801c7dc:	18e4      	addlt	r4, r4, r3
 801c7de:	f002 ff23 	bl	801f628 <__malloc_lock>
 801c7e2:	4a1e      	ldr	r2, [pc, #120]	; (801c85c <_free_r+0x94>)
 801c7e4:	9801      	ldr	r0, [sp, #4]
 801c7e6:	6813      	ldr	r3, [r2, #0]
 801c7e8:	b933      	cbnz	r3, 801c7f8 <_free_r+0x30>
 801c7ea:	6063      	str	r3, [r4, #4]
 801c7ec:	6014      	str	r4, [r2, #0]
 801c7ee:	b003      	add	sp, #12
 801c7f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c7f4:	f002 bf1e 	b.w	801f634 <__malloc_unlock>
 801c7f8:	42a3      	cmp	r3, r4
 801c7fa:	d908      	bls.n	801c80e <_free_r+0x46>
 801c7fc:	6825      	ldr	r5, [r4, #0]
 801c7fe:	1961      	adds	r1, r4, r5
 801c800:	428b      	cmp	r3, r1
 801c802:	bf01      	itttt	eq
 801c804:	6819      	ldreq	r1, [r3, #0]
 801c806:	685b      	ldreq	r3, [r3, #4]
 801c808:	1949      	addeq	r1, r1, r5
 801c80a:	6021      	streq	r1, [r4, #0]
 801c80c:	e7ed      	b.n	801c7ea <_free_r+0x22>
 801c80e:	461a      	mov	r2, r3
 801c810:	685b      	ldr	r3, [r3, #4]
 801c812:	b10b      	cbz	r3, 801c818 <_free_r+0x50>
 801c814:	42a3      	cmp	r3, r4
 801c816:	d9fa      	bls.n	801c80e <_free_r+0x46>
 801c818:	6811      	ldr	r1, [r2, #0]
 801c81a:	1855      	adds	r5, r2, r1
 801c81c:	42a5      	cmp	r5, r4
 801c81e:	d10b      	bne.n	801c838 <_free_r+0x70>
 801c820:	6824      	ldr	r4, [r4, #0]
 801c822:	4421      	add	r1, r4
 801c824:	1854      	adds	r4, r2, r1
 801c826:	42a3      	cmp	r3, r4
 801c828:	6011      	str	r1, [r2, #0]
 801c82a:	d1e0      	bne.n	801c7ee <_free_r+0x26>
 801c82c:	681c      	ldr	r4, [r3, #0]
 801c82e:	685b      	ldr	r3, [r3, #4]
 801c830:	6053      	str	r3, [r2, #4]
 801c832:	4421      	add	r1, r4
 801c834:	6011      	str	r1, [r2, #0]
 801c836:	e7da      	b.n	801c7ee <_free_r+0x26>
 801c838:	d902      	bls.n	801c840 <_free_r+0x78>
 801c83a:	230c      	movs	r3, #12
 801c83c:	6003      	str	r3, [r0, #0]
 801c83e:	e7d6      	b.n	801c7ee <_free_r+0x26>
 801c840:	6825      	ldr	r5, [r4, #0]
 801c842:	1961      	adds	r1, r4, r5
 801c844:	428b      	cmp	r3, r1
 801c846:	bf04      	itt	eq
 801c848:	6819      	ldreq	r1, [r3, #0]
 801c84a:	685b      	ldreq	r3, [r3, #4]
 801c84c:	6063      	str	r3, [r4, #4]
 801c84e:	bf04      	itt	eq
 801c850:	1949      	addeq	r1, r1, r5
 801c852:	6021      	streq	r1, [r4, #0]
 801c854:	6054      	str	r4, [r2, #4]
 801c856:	e7ca      	b.n	801c7ee <_free_r+0x26>
 801c858:	b003      	add	sp, #12
 801c85a:	bd30      	pop	{r4, r5, pc}
 801c85c:	20007e64 	.word	0x20007e64

0801c860 <sbrk_aligned>:
 801c860:	b570      	push	{r4, r5, r6, lr}
 801c862:	4e0e      	ldr	r6, [pc, #56]	; (801c89c <sbrk_aligned+0x3c>)
 801c864:	460c      	mov	r4, r1
 801c866:	6831      	ldr	r1, [r6, #0]
 801c868:	4605      	mov	r5, r0
 801c86a:	b911      	cbnz	r1, 801c872 <sbrk_aligned+0x12>
 801c86c:	f000 fcf6 	bl	801d25c <_sbrk_r>
 801c870:	6030      	str	r0, [r6, #0]
 801c872:	4621      	mov	r1, r4
 801c874:	4628      	mov	r0, r5
 801c876:	f000 fcf1 	bl	801d25c <_sbrk_r>
 801c87a:	1c43      	adds	r3, r0, #1
 801c87c:	d00a      	beq.n	801c894 <sbrk_aligned+0x34>
 801c87e:	1cc4      	adds	r4, r0, #3
 801c880:	f024 0403 	bic.w	r4, r4, #3
 801c884:	42a0      	cmp	r0, r4
 801c886:	d007      	beq.n	801c898 <sbrk_aligned+0x38>
 801c888:	1a21      	subs	r1, r4, r0
 801c88a:	4628      	mov	r0, r5
 801c88c:	f000 fce6 	bl	801d25c <_sbrk_r>
 801c890:	3001      	adds	r0, #1
 801c892:	d101      	bne.n	801c898 <sbrk_aligned+0x38>
 801c894:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801c898:	4620      	mov	r0, r4
 801c89a:	bd70      	pop	{r4, r5, r6, pc}
 801c89c:	20007e68 	.word	0x20007e68

0801c8a0 <_malloc_r>:
 801c8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8a4:	1ccd      	adds	r5, r1, #3
 801c8a6:	f025 0503 	bic.w	r5, r5, #3
 801c8aa:	3508      	adds	r5, #8
 801c8ac:	2d0c      	cmp	r5, #12
 801c8ae:	bf38      	it	cc
 801c8b0:	250c      	movcc	r5, #12
 801c8b2:	2d00      	cmp	r5, #0
 801c8b4:	4607      	mov	r7, r0
 801c8b6:	db01      	blt.n	801c8bc <_malloc_r+0x1c>
 801c8b8:	42a9      	cmp	r1, r5
 801c8ba:	d905      	bls.n	801c8c8 <_malloc_r+0x28>
 801c8bc:	230c      	movs	r3, #12
 801c8be:	603b      	str	r3, [r7, #0]
 801c8c0:	2600      	movs	r6, #0
 801c8c2:	4630      	mov	r0, r6
 801c8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8c8:	4e2e      	ldr	r6, [pc, #184]	; (801c984 <_malloc_r+0xe4>)
 801c8ca:	f002 fead 	bl	801f628 <__malloc_lock>
 801c8ce:	6833      	ldr	r3, [r6, #0]
 801c8d0:	461c      	mov	r4, r3
 801c8d2:	bb34      	cbnz	r4, 801c922 <_malloc_r+0x82>
 801c8d4:	4629      	mov	r1, r5
 801c8d6:	4638      	mov	r0, r7
 801c8d8:	f7ff ffc2 	bl	801c860 <sbrk_aligned>
 801c8dc:	1c43      	adds	r3, r0, #1
 801c8de:	4604      	mov	r4, r0
 801c8e0:	d14d      	bne.n	801c97e <_malloc_r+0xde>
 801c8e2:	6834      	ldr	r4, [r6, #0]
 801c8e4:	4626      	mov	r6, r4
 801c8e6:	2e00      	cmp	r6, #0
 801c8e8:	d140      	bne.n	801c96c <_malloc_r+0xcc>
 801c8ea:	6823      	ldr	r3, [r4, #0]
 801c8ec:	4631      	mov	r1, r6
 801c8ee:	4638      	mov	r0, r7
 801c8f0:	eb04 0803 	add.w	r8, r4, r3
 801c8f4:	f000 fcb2 	bl	801d25c <_sbrk_r>
 801c8f8:	4580      	cmp	r8, r0
 801c8fa:	d13a      	bne.n	801c972 <_malloc_r+0xd2>
 801c8fc:	6821      	ldr	r1, [r4, #0]
 801c8fe:	3503      	adds	r5, #3
 801c900:	1a6d      	subs	r5, r5, r1
 801c902:	f025 0503 	bic.w	r5, r5, #3
 801c906:	3508      	adds	r5, #8
 801c908:	2d0c      	cmp	r5, #12
 801c90a:	bf38      	it	cc
 801c90c:	250c      	movcc	r5, #12
 801c90e:	4629      	mov	r1, r5
 801c910:	4638      	mov	r0, r7
 801c912:	f7ff ffa5 	bl	801c860 <sbrk_aligned>
 801c916:	3001      	adds	r0, #1
 801c918:	d02b      	beq.n	801c972 <_malloc_r+0xd2>
 801c91a:	6823      	ldr	r3, [r4, #0]
 801c91c:	442b      	add	r3, r5
 801c91e:	6023      	str	r3, [r4, #0]
 801c920:	e00e      	b.n	801c940 <_malloc_r+0xa0>
 801c922:	6822      	ldr	r2, [r4, #0]
 801c924:	1b52      	subs	r2, r2, r5
 801c926:	d41e      	bmi.n	801c966 <_malloc_r+0xc6>
 801c928:	2a0b      	cmp	r2, #11
 801c92a:	d916      	bls.n	801c95a <_malloc_r+0xba>
 801c92c:	1961      	adds	r1, r4, r5
 801c92e:	42a3      	cmp	r3, r4
 801c930:	6025      	str	r5, [r4, #0]
 801c932:	bf18      	it	ne
 801c934:	6059      	strne	r1, [r3, #4]
 801c936:	6863      	ldr	r3, [r4, #4]
 801c938:	bf08      	it	eq
 801c93a:	6031      	streq	r1, [r6, #0]
 801c93c:	5162      	str	r2, [r4, r5]
 801c93e:	604b      	str	r3, [r1, #4]
 801c940:	4638      	mov	r0, r7
 801c942:	f104 060b 	add.w	r6, r4, #11
 801c946:	f002 fe75 	bl	801f634 <__malloc_unlock>
 801c94a:	f026 0607 	bic.w	r6, r6, #7
 801c94e:	1d23      	adds	r3, r4, #4
 801c950:	1af2      	subs	r2, r6, r3
 801c952:	d0b6      	beq.n	801c8c2 <_malloc_r+0x22>
 801c954:	1b9b      	subs	r3, r3, r6
 801c956:	50a3      	str	r3, [r4, r2]
 801c958:	e7b3      	b.n	801c8c2 <_malloc_r+0x22>
 801c95a:	6862      	ldr	r2, [r4, #4]
 801c95c:	42a3      	cmp	r3, r4
 801c95e:	bf0c      	ite	eq
 801c960:	6032      	streq	r2, [r6, #0]
 801c962:	605a      	strne	r2, [r3, #4]
 801c964:	e7ec      	b.n	801c940 <_malloc_r+0xa0>
 801c966:	4623      	mov	r3, r4
 801c968:	6864      	ldr	r4, [r4, #4]
 801c96a:	e7b2      	b.n	801c8d2 <_malloc_r+0x32>
 801c96c:	4634      	mov	r4, r6
 801c96e:	6876      	ldr	r6, [r6, #4]
 801c970:	e7b9      	b.n	801c8e6 <_malloc_r+0x46>
 801c972:	230c      	movs	r3, #12
 801c974:	603b      	str	r3, [r7, #0]
 801c976:	4638      	mov	r0, r7
 801c978:	f002 fe5c 	bl	801f634 <__malloc_unlock>
 801c97c:	e7a1      	b.n	801c8c2 <_malloc_r+0x22>
 801c97e:	6025      	str	r5, [r4, #0]
 801c980:	e7de      	b.n	801c940 <_malloc_r+0xa0>
 801c982:	bf00      	nop
 801c984:	20007e64 	.word	0x20007e64

0801c988 <__cvt>:
 801c988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c98c:	ec55 4b10 	vmov	r4, r5, d0
 801c990:	2d00      	cmp	r5, #0
 801c992:	460e      	mov	r6, r1
 801c994:	4619      	mov	r1, r3
 801c996:	462b      	mov	r3, r5
 801c998:	bfbb      	ittet	lt
 801c99a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801c99e:	461d      	movlt	r5, r3
 801c9a0:	2300      	movge	r3, #0
 801c9a2:	232d      	movlt	r3, #45	; 0x2d
 801c9a4:	700b      	strb	r3, [r1, #0]
 801c9a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c9a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801c9ac:	4691      	mov	r9, r2
 801c9ae:	f023 0820 	bic.w	r8, r3, #32
 801c9b2:	bfbc      	itt	lt
 801c9b4:	4622      	movlt	r2, r4
 801c9b6:	4614      	movlt	r4, r2
 801c9b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c9bc:	d005      	beq.n	801c9ca <__cvt+0x42>
 801c9be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801c9c2:	d100      	bne.n	801c9c6 <__cvt+0x3e>
 801c9c4:	3601      	adds	r6, #1
 801c9c6:	2102      	movs	r1, #2
 801c9c8:	e000      	b.n	801c9cc <__cvt+0x44>
 801c9ca:	2103      	movs	r1, #3
 801c9cc:	ab03      	add	r3, sp, #12
 801c9ce:	9301      	str	r3, [sp, #4]
 801c9d0:	ab02      	add	r3, sp, #8
 801c9d2:	9300      	str	r3, [sp, #0]
 801c9d4:	ec45 4b10 	vmov	d0, r4, r5
 801c9d8:	4653      	mov	r3, sl
 801c9da:	4632      	mov	r2, r6
 801c9dc:	f001 fcb0 	bl	801e340 <_dtoa_r>
 801c9e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801c9e4:	4607      	mov	r7, r0
 801c9e6:	d102      	bne.n	801c9ee <__cvt+0x66>
 801c9e8:	f019 0f01 	tst.w	r9, #1
 801c9ec:	d022      	beq.n	801ca34 <__cvt+0xac>
 801c9ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c9f2:	eb07 0906 	add.w	r9, r7, r6
 801c9f6:	d110      	bne.n	801ca1a <__cvt+0x92>
 801c9f8:	783b      	ldrb	r3, [r7, #0]
 801c9fa:	2b30      	cmp	r3, #48	; 0x30
 801c9fc:	d10a      	bne.n	801ca14 <__cvt+0x8c>
 801c9fe:	2200      	movs	r2, #0
 801ca00:	2300      	movs	r3, #0
 801ca02:	4620      	mov	r0, r4
 801ca04:	4629      	mov	r1, r5
 801ca06:	f7e4 f897 	bl	8000b38 <__aeabi_dcmpeq>
 801ca0a:	b918      	cbnz	r0, 801ca14 <__cvt+0x8c>
 801ca0c:	f1c6 0601 	rsb	r6, r6, #1
 801ca10:	f8ca 6000 	str.w	r6, [sl]
 801ca14:	f8da 3000 	ldr.w	r3, [sl]
 801ca18:	4499      	add	r9, r3
 801ca1a:	2200      	movs	r2, #0
 801ca1c:	2300      	movs	r3, #0
 801ca1e:	4620      	mov	r0, r4
 801ca20:	4629      	mov	r1, r5
 801ca22:	f7e4 f889 	bl	8000b38 <__aeabi_dcmpeq>
 801ca26:	b108      	cbz	r0, 801ca2c <__cvt+0xa4>
 801ca28:	f8cd 900c 	str.w	r9, [sp, #12]
 801ca2c:	2230      	movs	r2, #48	; 0x30
 801ca2e:	9b03      	ldr	r3, [sp, #12]
 801ca30:	454b      	cmp	r3, r9
 801ca32:	d307      	bcc.n	801ca44 <__cvt+0xbc>
 801ca34:	9b03      	ldr	r3, [sp, #12]
 801ca36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ca38:	1bdb      	subs	r3, r3, r7
 801ca3a:	4638      	mov	r0, r7
 801ca3c:	6013      	str	r3, [r2, #0]
 801ca3e:	b004      	add	sp, #16
 801ca40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca44:	1c59      	adds	r1, r3, #1
 801ca46:	9103      	str	r1, [sp, #12]
 801ca48:	701a      	strb	r2, [r3, #0]
 801ca4a:	e7f0      	b.n	801ca2e <__cvt+0xa6>

0801ca4c <__exponent>:
 801ca4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ca4e:	4603      	mov	r3, r0
 801ca50:	2900      	cmp	r1, #0
 801ca52:	bfb8      	it	lt
 801ca54:	4249      	neglt	r1, r1
 801ca56:	f803 2b02 	strb.w	r2, [r3], #2
 801ca5a:	bfb4      	ite	lt
 801ca5c:	222d      	movlt	r2, #45	; 0x2d
 801ca5e:	222b      	movge	r2, #43	; 0x2b
 801ca60:	2909      	cmp	r1, #9
 801ca62:	7042      	strb	r2, [r0, #1]
 801ca64:	dd2a      	ble.n	801cabc <__exponent+0x70>
 801ca66:	f10d 0407 	add.w	r4, sp, #7
 801ca6a:	46a4      	mov	ip, r4
 801ca6c:	270a      	movs	r7, #10
 801ca6e:	46a6      	mov	lr, r4
 801ca70:	460a      	mov	r2, r1
 801ca72:	fb91 f6f7 	sdiv	r6, r1, r7
 801ca76:	fb07 1516 	mls	r5, r7, r6, r1
 801ca7a:	3530      	adds	r5, #48	; 0x30
 801ca7c:	2a63      	cmp	r2, #99	; 0x63
 801ca7e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801ca82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801ca86:	4631      	mov	r1, r6
 801ca88:	dcf1      	bgt.n	801ca6e <__exponent+0x22>
 801ca8a:	3130      	adds	r1, #48	; 0x30
 801ca8c:	f1ae 0502 	sub.w	r5, lr, #2
 801ca90:	f804 1c01 	strb.w	r1, [r4, #-1]
 801ca94:	1c44      	adds	r4, r0, #1
 801ca96:	4629      	mov	r1, r5
 801ca98:	4561      	cmp	r1, ip
 801ca9a:	d30a      	bcc.n	801cab2 <__exponent+0x66>
 801ca9c:	f10d 0209 	add.w	r2, sp, #9
 801caa0:	eba2 020e 	sub.w	r2, r2, lr
 801caa4:	4565      	cmp	r5, ip
 801caa6:	bf88      	it	hi
 801caa8:	2200      	movhi	r2, #0
 801caaa:	4413      	add	r3, r2
 801caac:	1a18      	subs	r0, r3, r0
 801caae:	b003      	add	sp, #12
 801cab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cab6:	f804 2f01 	strb.w	r2, [r4, #1]!
 801caba:	e7ed      	b.n	801ca98 <__exponent+0x4c>
 801cabc:	2330      	movs	r3, #48	; 0x30
 801cabe:	3130      	adds	r1, #48	; 0x30
 801cac0:	7083      	strb	r3, [r0, #2]
 801cac2:	70c1      	strb	r1, [r0, #3]
 801cac4:	1d03      	adds	r3, r0, #4
 801cac6:	e7f1      	b.n	801caac <__exponent+0x60>

0801cac8 <_printf_float>:
 801cac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cacc:	ed2d 8b02 	vpush	{d8}
 801cad0:	b08d      	sub	sp, #52	; 0x34
 801cad2:	460c      	mov	r4, r1
 801cad4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801cad8:	4616      	mov	r6, r2
 801cada:	461f      	mov	r7, r3
 801cadc:	4605      	mov	r5, r0
 801cade:	f002 fd8d 	bl	801f5fc <_localeconv_r>
 801cae2:	f8d0 a000 	ldr.w	sl, [r0]
 801cae6:	4650      	mov	r0, sl
 801cae8:	f7e3 fba4 	bl	8000234 <strlen>
 801caec:	2300      	movs	r3, #0
 801caee:	930a      	str	r3, [sp, #40]	; 0x28
 801caf0:	6823      	ldr	r3, [r4, #0]
 801caf2:	9305      	str	r3, [sp, #20]
 801caf4:	f8d8 3000 	ldr.w	r3, [r8]
 801caf8:	f894 b018 	ldrb.w	fp, [r4, #24]
 801cafc:	3307      	adds	r3, #7
 801cafe:	f023 0307 	bic.w	r3, r3, #7
 801cb02:	f103 0208 	add.w	r2, r3, #8
 801cb06:	f8c8 2000 	str.w	r2, [r8]
 801cb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801cb12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801cb16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801cb1a:	9307      	str	r3, [sp, #28]
 801cb1c:	f8cd 8018 	str.w	r8, [sp, #24]
 801cb20:	ee08 0a10 	vmov	s16, r0
 801cb24:	4b9f      	ldr	r3, [pc, #636]	; (801cda4 <_printf_float+0x2dc>)
 801cb26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cb2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cb2e:	f7e4 f835 	bl	8000b9c <__aeabi_dcmpun>
 801cb32:	bb88      	cbnz	r0, 801cb98 <_printf_float+0xd0>
 801cb34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cb38:	4b9a      	ldr	r3, [pc, #616]	; (801cda4 <_printf_float+0x2dc>)
 801cb3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cb3e:	f7e4 f80f 	bl	8000b60 <__aeabi_dcmple>
 801cb42:	bb48      	cbnz	r0, 801cb98 <_printf_float+0xd0>
 801cb44:	2200      	movs	r2, #0
 801cb46:	2300      	movs	r3, #0
 801cb48:	4640      	mov	r0, r8
 801cb4a:	4649      	mov	r1, r9
 801cb4c:	f7e3 fffe 	bl	8000b4c <__aeabi_dcmplt>
 801cb50:	b110      	cbz	r0, 801cb58 <_printf_float+0x90>
 801cb52:	232d      	movs	r3, #45	; 0x2d
 801cb54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cb58:	4b93      	ldr	r3, [pc, #588]	; (801cda8 <_printf_float+0x2e0>)
 801cb5a:	4894      	ldr	r0, [pc, #592]	; (801cdac <_printf_float+0x2e4>)
 801cb5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801cb60:	bf94      	ite	ls
 801cb62:	4698      	movls	r8, r3
 801cb64:	4680      	movhi	r8, r0
 801cb66:	2303      	movs	r3, #3
 801cb68:	6123      	str	r3, [r4, #16]
 801cb6a:	9b05      	ldr	r3, [sp, #20]
 801cb6c:	f023 0204 	bic.w	r2, r3, #4
 801cb70:	6022      	str	r2, [r4, #0]
 801cb72:	f04f 0900 	mov.w	r9, #0
 801cb76:	9700      	str	r7, [sp, #0]
 801cb78:	4633      	mov	r3, r6
 801cb7a:	aa0b      	add	r2, sp, #44	; 0x2c
 801cb7c:	4621      	mov	r1, r4
 801cb7e:	4628      	mov	r0, r5
 801cb80:	f000 f9d8 	bl	801cf34 <_printf_common>
 801cb84:	3001      	adds	r0, #1
 801cb86:	f040 8090 	bne.w	801ccaa <_printf_float+0x1e2>
 801cb8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cb8e:	b00d      	add	sp, #52	; 0x34
 801cb90:	ecbd 8b02 	vpop	{d8}
 801cb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb98:	4642      	mov	r2, r8
 801cb9a:	464b      	mov	r3, r9
 801cb9c:	4640      	mov	r0, r8
 801cb9e:	4649      	mov	r1, r9
 801cba0:	f7e3 fffc 	bl	8000b9c <__aeabi_dcmpun>
 801cba4:	b140      	cbz	r0, 801cbb8 <_printf_float+0xf0>
 801cba6:	464b      	mov	r3, r9
 801cba8:	2b00      	cmp	r3, #0
 801cbaa:	bfbc      	itt	lt
 801cbac:	232d      	movlt	r3, #45	; 0x2d
 801cbae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801cbb2:	487f      	ldr	r0, [pc, #508]	; (801cdb0 <_printf_float+0x2e8>)
 801cbb4:	4b7f      	ldr	r3, [pc, #508]	; (801cdb4 <_printf_float+0x2ec>)
 801cbb6:	e7d1      	b.n	801cb5c <_printf_float+0x94>
 801cbb8:	6863      	ldr	r3, [r4, #4]
 801cbba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801cbbe:	9206      	str	r2, [sp, #24]
 801cbc0:	1c5a      	adds	r2, r3, #1
 801cbc2:	d13f      	bne.n	801cc44 <_printf_float+0x17c>
 801cbc4:	2306      	movs	r3, #6
 801cbc6:	6063      	str	r3, [r4, #4]
 801cbc8:	9b05      	ldr	r3, [sp, #20]
 801cbca:	6861      	ldr	r1, [r4, #4]
 801cbcc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801cbd0:	2300      	movs	r3, #0
 801cbd2:	9303      	str	r3, [sp, #12]
 801cbd4:	ab0a      	add	r3, sp, #40	; 0x28
 801cbd6:	e9cd b301 	strd	fp, r3, [sp, #4]
 801cbda:	ab09      	add	r3, sp, #36	; 0x24
 801cbdc:	ec49 8b10 	vmov	d0, r8, r9
 801cbe0:	9300      	str	r3, [sp, #0]
 801cbe2:	6022      	str	r2, [r4, #0]
 801cbe4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801cbe8:	4628      	mov	r0, r5
 801cbea:	f7ff fecd 	bl	801c988 <__cvt>
 801cbee:	9b06      	ldr	r3, [sp, #24]
 801cbf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cbf2:	2b47      	cmp	r3, #71	; 0x47
 801cbf4:	4680      	mov	r8, r0
 801cbf6:	d108      	bne.n	801cc0a <_printf_float+0x142>
 801cbf8:	1cc8      	adds	r0, r1, #3
 801cbfa:	db02      	blt.n	801cc02 <_printf_float+0x13a>
 801cbfc:	6863      	ldr	r3, [r4, #4]
 801cbfe:	4299      	cmp	r1, r3
 801cc00:	dd41      	ble.n	801cc86 <_printf_float+0x1be>
 801cc02:	f1ab 0b02 	sub.w	fp, fp, #2
 801cc06:	fa5f fb8b 	uxtb.w	fp, fp
 801cc0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801cc0e:	d820      	bhi.n	801cc52 <_printf_float+0x18a>
 801cc10:	3901      	subs	r1, #1
 801cc12:	465a      	mov	r2, fp
 801cc14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801cc18:	9109      	str	r1, [sp, #36]	; 0x24
 801cc1a:	f7ff ff17 	bl	801ca4c <__exponent>
 801cc1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cc20:	1813      	adds	r3, r2, r0
 801cc22:	2a01      	cmp	r2, #1
 801cc24:	4681      	mov	r9, r0
 801cc26:	6123      	str	r3, [r4, #16]
 801cc28:	dc02      	bgt.n	801cc30 <_printf_float+0x168>
 801cc2a:	6822      	ldr	r2, [r4, #0]
 801cc2c:	07d2      	lsls	r2, r2, #31
 801cc2e:	d501      	bpl.n	801cc34 <_printf_float+0x16c>
 801cc30:	3301      	adds	r3, #1
 801cc32:	6123      	str	r3, [r4, #16]
 801cc34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801cc38:	2b00      	cmp	r3, #0
 801cc3a:	d09c      	beq.n	801cb76 <_printf_float+0xae>
 801cc3c:	232d      	movs	r3, #45	; 0x2d
 801cc3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cc42:	e798      	b.n	801cb76 <_printf_float+0xae>
 801cc44:	9a06      	ldr	r2, [sp, #24]
 801cc46:	2a47      	cmp	r2, #71	; 0x47
 801cc48:	d1be      	bne.n	801cbc8 <_printf_float+0x100>
 801cc4a:	2b00      	cmp	r3, #0
 801cc4c:	d1bc      	bne.n	801cbc8 <_printf_float+0x100>
 801cc4e:	2301      	movs	r3, #1
 801cc50:	e7b9      	b.n	801cbc6 <_printf_float+0xfe>
 801cc52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801cc56:	d118      	bne.n	801cc8a <_printf_float+0x1c2>
 801cc58:	2900      	cmp	r1, #0
 801cc5a:	6863      	ldr	r3, [r4, #4]
 801cc5c:	dd0b      	ble.n	801cc76 <_printf_float+0x1ae>
 801cc5e:	6121      	str	r1, [r4, #16]
 801cc60:	b913      	cbnz	r3, 801cc68 <_printf_float+0x1a0>
 801cc62:	6822      	ldr	r2, [r4, #0]
 801cc64:	07d0      	lsls	r0, r2, #31
 801cc66:	d502      	bpl.n	801cc6e <_printf_float+0x1a6>
 801cc68:	3301      	adds	r3, #1
 801cc6a:	440b      	add	r3, r1
 801cc6c:	6123      	str	r3, [r4, #16]
 801cc6e:	65a1      	str	r1, [r4, #88]	; 0x58
 801cc70:	f04f 0900 	mov.w	r9, #0
 801cc74:	e7de      	b.n	801cc34 <_printf_float+0x16c>
 801cc76:	b913      	cbnz	r3, 801cc7e <_printf_float+0x1b6>
 801cc78:	6822      	ldr	r2, [r4, #0]
 801cc7a:	07d2      	lsls	r2, r2, #31
 801cc7c:	d501      	bpl.n	801cc82 <_printf_float+0x1ba>
 801cc7e:	3302      	adds	r3, #2
 801cc80:	e7f4      	b.n	801cc6c <_printf_float+0x1a4>
 801cc82:	2301      	movs	r3, #1
 801cc84:	e7f2      	b.n	801cc6c <_printf_float+0x1a4>
 801cc86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801cc8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc8c:	4299      	cmp	r1, r3
 801cc8e:	db05      	blt.n	801cc9c <_printf_float+0x1d4>
 801cc90:	6823      	ldr	r3, [r4, #0]
 801cc92:	6121      	str	r1, [r4, #16]
 801cc94:	07d8      	lsls	r0, r3, #31
 801cc96:	d5ea      	bpl.n	801cc6e <_printf_float+0x1a6>
 801cc98:	1c4b      	adds	r3, r1, #1
 801cc9a:	e7e7      	b.n	801cc6c <_printf_float+0x1a4>
 801cc9c:	2900      	cmp	r1, #0
 801cc9e:	bfd4      	ite	le
 801cca0:	f1c1 0202 	rsble	r2, r1, #2
 801cca4:	2201      	movgt	r2, #1
 801cca6:	4413      	add	r3, r2
 801cca8:	e7e0      	b.n	801cc6c <_printf_float+0x1a4>
 801ccaa:	6823      	ldr	r3, [r4, #0]
 801ccac:	055a      	lsls	r2, r3, #21
 801ccae:	d407      	bmi.n	801ccc0 <_printf_float+0x1f8>
 801ccb0:	6923      	ldr	r3, [r4, #16]
 801ccb2:	4642      	mov	r2, r8
 801ccb4:	4631      	mov	r1, r6
 801ccb6:	4628      	mov	r0, r5
 801ccb8:	47b8      	blx	r7
 801ccba:	3001      	adds	r0, #1
 801ccbc:	d12c      	bne.n	801cd18 <_printf_float+0x250>
 801ccbe:	e764      	b.n	801cb8a <_printf_float+0xc2>
 801ccc0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ccc4:	f240 80e0 	bls.w	801ce88 <_printf_float+0x3c0>
 801ccc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801cccc:	2200      	movs	r2, #0
 801ccce:	2300      	movs	r3, #0
 801ccd0:	f7e3 ff32 	bl	8000b38 <__aeabi_dcmpeq>
 801ccd4:	2800      	cmp	r0, #0
 801ccd6:	d034      	beq.n	801cd42 <_printf_float+0x27a>
 801ccd8:	4a37      	ldr	r2, [pc, #220]	; (801cdb8 <_printf_float+0x2f0>)
 801ccda:	2301      	movs	r3, #1
 801ccdc:	4631      	mov	r1, r6
 801ccde:	4628      	mov	r0, r5
 801cce0:	47b8      	blx	r7
 801cce2:	3001      	adds	r0, #1
 801cce4:	f43f af51 	beq.w	801cb8a <_printf_float+0xc2>
 801cce8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ccec:	429a      	cmp	r2, r3
 801ccee:	db02      	blt.n	801ccf6 <_printf_float+0x22e>
 801ccf0:	6823      	ldr	r3, [r4, #0]
 801ccf2:	07d8      	lsls	r0, r3, #31
 801ccf4:	d510      	bpl.n	801cd18 <_printf_float+0x250>
 801ccf6:	ee18 3a10 	vmov	r3, s16
 801ccfa:	4652      	mov	r2, sl
 801ccfc:	4631      	mov	r1, r6
 801ccfe:	4628      	mov	r0, r5
 801cd00:	47b8      	blx	r7
 801cd02:	3001      	adds	r0, #1
 801cd04:	f43f af41 	beq.w	801cb8a <_printf_float+0xc2>
 801cd08:	f04f 0800 	mov.w	r8, #0
 801cd0c:	f104 091a 	add.w	r9, r4, #26
 801cd10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd12:	3b01      	subs	r3, #1
 801cd14:	4543      	cmp	r3, r8
 801cd16:	dc09      	bgt.n	801cd2c <_printf_float+0x264>
 801cd18:	6823      	ldr	r3, [r4, #0]
 801cd1a:	079b      	lsls	r3, r3, #30
 801cd1c:	f100 8105 	bmi.w	801cf2a <_printf_float+0x462>
 801cd20:	68e0      	ldr	r0, [r4, #12]
 801cd22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd24:	4298      	cmp	r0, r3
 801cd26:	bfb8      	it	lt
 801cd28:	4618      	movlt	r0, r3
 801cd2a:	e730      	b.n	801cb8e <_printf_float+0xc6>
 801cd2c:	2301      	movs	r3, #1
 801cd2e:	464a      	mov	r2, r9
 801cd30:	4631      	mov	r1, r6
 801cd32:	4628      	mov	r0, r5
 801cd34:	47b8      	blx	r7
 801cd36:	3001      	adds	r0, #1
 801cd38:	f43f af27 	beq.w	801cb8a <_printf_float+0xc2>
 801cd3c:	f108 0801 	add.w	r8, r8, #1
 801cd40:	e7e6      	b.n	801cd10 <_printf_float+0x248>
 801cd42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	dc39      	bgt.n	801cdbc <_printf_float+0x2f4>
 801cd48:	4a1b      	ldr	r2, [pc, #108]	; (801cdb8 <_printf_float+0x2f0>)
 801cd4a:	2301      	movs	r3, #1
 801cd4c:	4631      	mov	r1, r6
 801cd4e:	4628      	mov	r0, r5
 801cd50:	47b8      	blx	r7
 801cd52:	3001      	adds	r0, #1
 801cd54:	f43f af19 	beq.w	801cb8a <_printf_float+0xc2>
 801cd58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801cd5c:	4313      	orrs	r3, r2
 801cd5e:	d102      	bne.n	801cd66 <_printf_float+0x29e>
 801cd60:	6823      	ldr	r3, [r4, #0]
 801cd62:	07d9      	lsls	r1, r3, #31
 801cd64:	d5d8      	bpl.n	801cd18 <_printf_float+0x250>
 801cd66:	ee18 3a10 	vmov	r3, s16
 801cd6a:	4652      	mov	r2, sl
 801cd6c:	4631      	mov	r1, r6
 801cd6e:	4628      	mov	r0, r5
 801cd70:	47b8      	blx	r7
 801cd72:	3001      	adds	r0, #1
 801cd74:	f43f af09 	beq.w	801cb8a <_printf_float+0xc2>
 801cd78:	f04f 0900 	mov.w	r9, #0
 801cd7c:	f104 0a1a 	add.w	sl, r4, #26
 801cd80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd82:	425b      	negs	r3, r3
 801cd84:	454b      	cmp	r3, r9
 801cd86:	dc01      	bgt.n	801cd8c <_printf_float+0x2c4>
 801cd88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd8a:	e792      	b.n	801ccb2 <_printf_float+0x1ea>
 801cd8c:	2301      	movs	r3, #1
 801cd8e:	4652      	mov	r2, sl
 801cd90:	4631      	mov	r1, r6
 801cd92:	4628      	mov	r0, r5
 801cd94:	47b8      	blx	r7
 801cd96:	3001      	adds	r0, #1
 801cd98:	f43f aef7 	beq.w	801cb8a <_printf_float+0xc2>
 801cd9c:	f109 0901 	add.w	r9, r9, #1
 801cda0:	e7ee      	b.n	801cd80 <_printf_float+0x2b8>
 801cda2:	bf00      	nop
 801cda4:	7fefffff 	.word	0x7fefffff
 801cda8:	08022d58 	.word	0x08022d58
 801cdac:	08022d5c 	.word	0x08022d5c
 801cdb0:	08022d64 	.word	0x08022d64
 801cdb4:	08022d60 	.word	0x08022d60
 801cdb8:	08022d68 	.word	0x08022d68
 801cdbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cdbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801cdc0:	429a      	cmp	r2, r3
 801cdc2:	bfa8      	it	ge
 801cdc4:	461a      	movge	r2, r3
 801cdc6:	2a00      	cmp	r2, #0
 801cdc8:	4691      	mov	r9, r2
 801cdca:	dc37      	bgt.n	801ce3c <_printf_float+0x374>
 801cdcc:	f04f 0b00 	mov.w	fp, #0
 801cdd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cdd4:	f104 021a 	add.w	r2, r4, #26
 801cdd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801cdda:	9305      	str	r3, [sp, #20]
 801cddc:	eba3 0309 	sub.w	r3, r3, r9
 801cde0:	455b      	cmp	r3, fp
 801cde2:	dc33      	bgt.n	801ce4c <_printf_float+0x384>
 801cde4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801cde8:	429a      	cmp	r2, r3
 801cdea:	db3b      	blt.n	801ce64 <_printf_float+0x39c>
 801cdec:	6823      	ldr	r3, [r4, #0]
 801cdee:	07da      	lsls	r2, r3, #31
 801cdf0:	d438      	bmi.n	801ce64 <_printf_float+0x39c>
 801cdf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cdf4:	9a05      	ldr	r2, [sp, #20]
 801cdf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cdf8:	1a9a      	subs	r2, r3, r2
 801cdfa:	eba3 0901 	sub.w	r9, r3, r1
 801cdfe:	4591      	cmp	r9, r2
 801ce00:	bfa8      	it	ge
 801ce02:	4691      	movge	r9, r2
 801ce04:	f1b9 0f00 	cmp.w	r9, #0
 801ce08:	dc35      	bgt.n	801ce76 <_printf_float+0x3ae>
 801ce0a:	f04f 0800 	mov.w	r8, #0
 801ce0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ce12:	f104 0a1a 	add.w	sl, r4, #26
 801ce16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ce1a:	1a9b      	subs	r3, r3, r2
 801ce1c:	eba3 0309 	sub.w	r3, r3, r9
 801ce20:	4543      	cmp	r3, r8
 801ce22:	f77f af79 	ble.w	801cd18 <_printf_float+0x250>
 801ce26:	2301      	movs	r3, #1
 801ce28:	4652      	mov	r2, sl
 801ce2a:	4631      	mov	r1, r6
 801ce2c:	4628      	mov	r0, r5
 801ce2e:	47b8      	blx	r7
 801ce30:	3001      	adds	r0, #1
 801ce32:	f43f aeaa 	beq.w	801cb8a <_printf_float+0xc2>
 801ce36:	f108 0801 	add.w	r8, r8, #1
 801ce3a:	e7ec      	b.n	801ce16 <_printf_float+0x34e>
 801ce3c:	4613      	mov	r3, r2
 801ce3e:	4631      	mov	r1, r6
 801ce40:	4642      	mov	r2, r8
 801ce42:	4628      	mov	r0, r5
 801ce44:	47b8      	blx	r7
 801ce46:	3001      	adds	r0, #1
 801ce48:	d1c0      	bne.n	801cdcc <_printf_float+0x304>
 801ce4a:	e69e      	b.n	801cb8a <_printf_float+0xc2>
 801ce4c:	2301      	movs	r3, #1
 801ce4e:	4631      	mov	r1, r6
 801ce50:	4628      	mov	r0, r5
 801ce52:	9205      	str	r2, [sp, #20]
 801ce54:	47b8      	blx	r7
 801ce56:	3001      	adds	r0, #1
 801ce58:	f43f ae97 	beq.w	801cb8a <_printf_float+0xc2>
 801ce5c:	9a05      	ldr	r2, [sp, #20]
 801ce5e:	f10b 0b01 	add.w	fp, fp, #1
 801ce62:	e7b9      	b.n	801cdd8 <_printf_float+0x310>
 801ce64:	ee18 3a10 	vmov	r3, s16
 801ce68:	4652      	mov	r2, sl
 801ce6a:	4631      	mov	r1, r6
 801ce6c:	4628      	mov	r0, r5
 801ce6e:	47b8      	blx	r7
 801ce70:	3001      	adds	r0, #1
 801ce72:	d1be      	bne.n	801cdf2 <_printf_float+0x32a>
 801ce74:	e689      	b.n	801cb8a <_printf_float+0xc2>
 801ce76:	9a05      	ldr	r2, [sp, #20]
 801ce78:	464b      	mov	r3, r9
 801ce7a:	4442      	add	r2, r8
 801ce7c:	4631      	mov	r1, r6
 801ce7e:	4628      	mov	r0, r5
 801ce80:	47b8      	blx	r7
 801ce82:	3001      	adds	r0, #1
 801ce84:	d1c1      	bne.n	801ce0a <_printf_float+0x342>
 801ce86:	e680      	b.n	801cb8a <_printf_float+0xc2>
 801ce88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ce8a:	2a01      	cmp	r2, #1
 801ce8c:	dc01      	bgt.n	801ce92 <_printf_float+0x3ca>
 801ce8e:	07db      	lsls	r3, r3, #31
 801ce90:	d538      	bpl.n	801cf04 <_printf_float+0x43c>
 801ce92:	2301      	movs	r3, #1
 801ce94:	4642      	mov	r2, r8
 801ce96:	4631      	mov	r1, r6
 801ce98:	4628      	mov	r0, r5
 801ce9a:	47b8      	blx	r7
 801ce9c:	3001      	adds	r0, #1
 801ce9e:	f43f ae74 	beq.w	801cb8a <_printf_float+0xc2>
 801cea2:	ee18 3a10 	vmov	r3, s16
 801cea6:	4652      	mov	r2, sl
 801cea8:	4631      	mov	r1, r6
 801ceaa:	4628      	mov	r0, r5
 801ceac:	47b8      	blx	r7
 801ceae:	3001      	adds	r0, #1
 801ceb0:	f43f ae6b 	beq.w	801cb8a <_printf_float+0xc2>
 801ceb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ceb8:	2200      	movs	r2, #0
 801ceba:	2300      	movs	r3, #0
 801cebc:	f7e3 fe3c 	bl	8000b38 <__aeabi_dcmpeq>
 801cec0:	b9d8      	cbnz	r0, 801cefa <_printf_float+0x432>
 801cec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cec4:	f108 0201 	add.w	r2, r8, #1
 801cec8:	3b01      	subs	r3, #1
 801ceca:	4631      	mov	r1, r6
 801cecc:	4628      	mov	r0, r5
 801cece:	47b8      	blx	r7
 801ced0:	3001      	adds	r0, #1
 801ced2:	d10e      	bne.n	801cef2 <_printf_float+0x42a>
 801ced4:	e659      	b.n	801cb8a <_printf_float+0xc2>
 801ced6:	2301      	movs	r3, #1
 801ced8:	4652      	mov	r2, sl
 801ceda:	4631      	mov	r1, r6
 801cedc:	4628      	mov	r0, r5
 801cede:	47b8      	blx	r7
 801cee0:	3001      	adds	r0, #1
 801cee2:	f43f ae52 	beq.w	801cb8a <_printf_float+0xc2>
 801cee6:	f108 0801 	add.w	r8, r8, #1
 801ceea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ceec:	3b01      	subs	r3, #1
 801ceee:	4543      	cmp	r3, r8
 801cef0:	dcf1      	bgt.n	801ced6 <_printf_float+0x40e>
 801cef2:	464b      	mov	r3, r9
 801cef4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801cef8:	e6dc      	b.n	801ccb4 <_printf_float+0x1ec>
 801cefa:	f04f 0800 	mov.w	r8, #0
 801cefe:	f104 0a1a 	add.w	sl, r4, #26
 801cf02:	e7f2      	b.n	801ceea <_printf_float+0x422>
 801cf04:	2301      	movs	r3, #1
 801cf06:	4642      	mov	r2, r8
 801cf08:	e7df      	b.n	801ceca <_printf_float+0x402>
 801cf0a:	2301      	movs	r3, #1
 801cf0c:	464a      	mov	r2, r9
 801cf0e:	4631      	mov	r1, r6
 801cf10:	4628      	mov	r0, r5
 801cf12:	47b8      	blx	r7
 801cf14:	3001      	adds	r0, #1
 801cf16:	f43f ae38 	beq.w	801cb8a <_printf_float+0xc2>
 801cf1a:	f108 0801 	add.w	r8, r8, #1
 801cf1e:	68e3      	ldr	r3, [r4, #12]
 801cf20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cf22:	1a5b      	subs	r3, r3, r1
 801cf24:	4543      	cmp	r3, r8
 801cf26:	dcf0      	bgt.n	801cf0a <_printf_float+0x442>
 801cf28:	e6fa      	b.n	801cd20 <_printf_float+0x258>
 801cf2a:	f04f 0800 	mov.w	r8, #0
 801cf2e:	f104 0919 	add.w	r9, r4, #25
 801cf32:	e7f4      	b.n	801cf1e <_printf_float+0x456>

0801cf34 <_printf_common>:
 801cf34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf38:	4616      	mov	r6, r2
 801cf3a:	4699      	mov	r9, r3
 801cf3c:	688a      	ldr	r2, [r1, #8]
 801cf3e:	690b      	ldr	r3, [r1, #16]
 801cf40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801cf44:	4293      	cmp	r3, r2
 801cf46:	bfb8      	it	lt
 801cf48:	4613      	movlt	r3, r2
 801cf4a:	6033      	str	r3, [r6, #0]
 801cf4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801cf50:	4607      	mov	r7, r0
 801cf52:	460c      	mov	r4, r1
 801cf54:	b10a      	cbz	r2, 801cf5a <_printf_common+0x26>
 801cf56:	3301      	adds	r3, #1
 801cf58:	6033      	str	r3, [r6, #0]
 801cf5a:	6823      	ldr	r3, [r4, #0]
 801cf5c:	0699      	lsls	r1, r3, #26
 801cf5e:	bf42      	ittt	mi
 801cf60:	6833      	ldrmi	r3, [r6, #0]
 801cf62:	3302      	addmi	r3, #2
 801cf64:	6033      	strmi	r3, [r6, #0]
 801cf66:	6825      	ldr	r5, [r4, #0]
 801cf68:	f015 0506 	ands.w	r5, r5, #6
 801cf6c:	d106      	bne.n	801cf7c <_printf_common+0x48>
 801cf6e:	f104 0a19 	add.w	sl, r4, #25
 801cf72:	68e3      	ldr	r3, [r4, #12]
 801cf74:	6832      	ldr	r2, [r6, #0]
 801cf76:	1a9b      	subs	r3, r3, r2
 801cf78:	42ab      	cmp	r3, r5
 801cf7a:	dc26      	bgt.n	801cfca <_printf_common+0x96>
 801cf7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801cf80:	1e13      	subs	r3, r2, #0
 801cf82:	6822      	ldr	r2, [r4, #0]
 801cf84:	bf18      	it	ne
 801cf86:	2301      	movne	r3, #1
 801cf88:	0692      	lsls	r2, r2, #26
 801cf8a:	d42b      	bmi.n	801cfe4 <_printf_common+0xb0>
 801cf8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801cf90:	4649      	mov	r1, r9
 801cf92:	4638      	mov	r0, r7
 801cf94:	47c0      	blx	r8
 801cf96:	3001      	adds	r0, #1
 801cf98:	d01e      	beq.n	801cfd8 <_printf_common+0xa4>
 801cf9a:	6823      	ldr	r3, [r4, #0]
 801cf9c:	68e5      	ldr	r5, [r4, #12]
 801cf9e:	6832      	ldr	r2, [r6, #0]
 801cfa0:	f003 0306 	and.w	r3, r3, #6
 801cfa4:	2b04      	cmp	r3, #4
 801cfa6:	bf08      	it	eq
 801cfa8:	1aad      	subeq	r5, r5, r2
 801cfaa:	68a3      	ldr	r3, [r4, #8]
 801cfac:	6922      	ldr	r2, [r4, #16]
 801cfae:	bf0c      	ite	eq
 801cfb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cfb4:	2500      	movne	r5, #0
 801cfb6:	4293      	cmp	r3, r2
 801cfb8:	bfc4      	itt	gt
 801cfba:	1a9b      	subgt	r3, r3, r2
 801cfbc:	18ed      	addgt	r5, r5, r3
 801cfbe:	2600      	movs	r6, #0
 801cfc0:	341a      	adds	r4, #26
 801cfc2:	42b5      	cmp	r5, r6
 801cfc4:	d11a      	bne.n	801cffc <_printf_common+0xc8>
 801cfc6:	2000      	movs	r0, #0
 801cfc8:	e008      	b.n	801cfdc <_printf_common+0xa8>
 801cfca:	2301      	movs	r3, #1
 801cfcc:	4652      	mov	r2, sl
 801cfce:	4649      	mov	r1, r9
 801cfd0:	4638      	mov	r0, r7
 801cfd2:	47c0      	blx	r8
 801cfd4:	3001      	adds	r0, #1
 801cfd6:	d103      	bne.n	801cfe0 <_printf_common+0xac>
 801cfd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cfdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cfe0:	3501      	adds	r5, #1
 801cfe2:	e7c6      	b.n	801cf72 <_printf_common+0x3e>
 801cfe4:	18e1      	adds	r1, r4, r3
 801cfe6:	1c5a      	adds	r2, r3, #1
 801cfe8:	2030      	movs	r0, #48	; 0x30
 801cfea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801cfee:	4422      	add	r2, r4
 801cff0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801cff4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801cff8:	3302      	adds	r3, #2
 801cffa:	e7c7      	b.n	801cf8c <_printf_common+0x58>
 801cffc:	2301      	movs	r3, #1
 801cffe:	4622      	mov	r2, r4
 801d000:	4649      	mov	r1, r9
 801d002:	4638      	mov	r0, r7
 801d004:	47c0      	blx	r8
 801d006:	3001      	adds	r0, #1
 801d008:	d0e6      	beq.n	801cfd8 <_printf_common+0xa4>
 801d00a:	3601      	adds	r6, #1
 801d00c:	e7d9      	b.n	801cfc2 <_printf_common+0x8e>
	...

0801d010 <_printf_i>:
 801d010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d014:	7e0f      	ldrb	r7, [r1, #24]
 801d016:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d018:	2f78      	cmp	r7, #120	; 0x78
 801d01a:	4691      	mov	r9, r2
 801d01c:	4680      	mov	r8, r0
 801d01e:	460c      	mov	r4, r1
 801d020:	469a      	mov	sl, r3
 801d022:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801d026:	d807      	bhi.n	801d038 <_printf_i+0x28>
 801d028:	2f62      	cmp	r7, #98	; 0x62
 801d02a:	d80a      	bhi.n	801d042 <_printf_i+0x32>
 801d02c:	2f00      	cmp	r7, #0
 801d02e:	f000 80d8 	beq.w	801d1e2 <_printf_i+0x1d2>
 801d032:	2f58      	cmp	r7, #88	; 0x58
 801d034:	f000 80a3 	beq.w	801d17e <_printf_i+0x16e>
 801d038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d03c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d040:	e03a      	b.n	801d0b8 <_printf_i+0xa8>
 801d042:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d046:	2b15      	cmp	r3, #21
 801d048:	d8f6      	bhi.n	801d038 <_printf_i+0x28>
 801d04a:	a101      	add	r1, pc, #4	; (adr r1, 801d050 <_printf_i+0x40>)
 801d04c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d050:	0801d0a9 	.word	0x0801d0a9
 801d054:	0801d0bd 	.word	0x0801d0bd
 801d058:	0801d039 	.word	0x0801d039
 801d05c:	0801d039 	.word	0x0801d039
 801d060:	0801d039 	.word	0x0801d039
 801d064:	0801d039 	.word	0x0801d039
 801d068:	0801d0bd 	.word	0x0801d0bd
 801d06c:	0801d039 	.word	0x0801d039
 801d070:	0801d039 	.word	0x0801d039
 801d074:	0801d039 	.word	0x0801d039
 801d078:	0801d039 	.word	0x0801d039
 801d07c:	0801d1c9 	.word	0x0801d1c9
 801d080:	0801d0ed 	.word	0x0801d0ed
 801d084:	0801d1ab 	.word	0x0801d1ab
 801d088:	0801d039 	.word	0x0801d039
 801d08c:	0801d039 	.word	0x0801d039
 801d090:	0801d1eb 	.word	0x0801d1eb
 801d094:	0801d039 	.word	0x0801d039
 801d098:	0801d0ed 	.word	0x0801d0ed
 801d09c:	0801d039 	.word	0x0801d039
 801d0a0:	0801d039 	.word	0x0801d039
 801d0a4:	0801d1b3 	.word	0x0801d1b3
 801d0a8:	682b      	ldr	r3, [r5, #0]
 801d0aa:	1d1a      	adds	r2, r3, #4
 801d0ac:	681b      	ldr	r3, [r3, #0]
 801d0ae:	602a      	str	r2, [r5, #0]
 801d0b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d0b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d0b8:	2301      	movs	r3, #1
 801d0ba:	e0a3      	b.n	801d204 <_printf_i+0x1f4>
 801d0bc:	6820      	ldr	r0, [r4, #0]
 801d0be:	6829      	ldr	r1, [r5, #0]
 801d0c0:	0606      	lsls	r6, r0, #24
 801d0c2:	f101 0304 	add.w	r3, r1, #4
 801d0c6:	d50a      	bpl.n	801d0de <_printf_i+0xce>
 801d0c8:	680e      	ldr	r6, [r1, #0]
 801d0ca:	602b      	str	r3, [r5, #0]
 801d0cc:	2e00      	cmp	r6, #0
 801d0ce:	da03      	bge.n	801d0d8 <_printf_i+0xc8>
 801d0d0:	232d      	movs	r3, #45	; 0x2d
 801d0d2:	4276      	negs	r6, r6
 801d0d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d0d8:	485e      	ldr	r0, [pc, #376]	; (801d254 <_printf_i+0x244>)
 801d0da:	230a      	movs	r3, #10
 801d0dc:	e019      	b.n	801d112 <_printf_i+0x102>
 801d0de:	680e      	ldr	r6, [r1, #0]
 801d0e0:	602b      	str	r3, [r5, #0]
 801d0e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d0e6:	bf18      	it	ne
 801d0e8:	b236      	sxthne	r6, r6
 801d0ea:	e7ef      	b.n	801d0cc <_printf_i+0xbc>
 801d0ec:	682b      	ldr	r3, [r5, #0]
 801d0ee:	6820      	ldr	r0, [r4, #0]
 801d0f0:	1d19      	adds	r1, r3, #4
 801d0f2:	6029      	str	r1, [r5, #0]
 801d0f4:	0601      	lsls	r1, r0, #24
 801d0f6:	d501      	bpl.n	801d0fc <_printf_i+0xec>
 801d0f8:	681e      	ldr	r6, [r3, #0]
 801d0fa:	e002      	b.n	801d102 <_printf_i+0xf2>
 801d0fc:	0646      	lsls	r6, r0, #25
 801d0fe:	d5fb      	bpl.n	801d0f8 <_printf_i+0xe8>
 801d100:	881e      	ldrh	r6, [r3, #0]
 801d102:	4854      	ldr	r0, [pc, #336]	; (801d254 <_printf_i+0x244>)
 801d104:	2f6f      	cmp	r7, #111	; 0x6f
 801d106:	bf0c      	ite	eq
 801d108:	2308      	moveq	r3, #8
 801d10a:	230a      	movne	r3, #10
 801d10c:	2100      	movs	r1, #0
 801d10e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d112:	6865      	ldr	r5, [r4, #4]
 801d114:	60a5      	str	r5, [r4, #8]
 801d116:	2d00      	cmp	r5, #0
 801d118:	bfa2      	ittt	ge
 801d11a:	6821      	ldrge	r1, [r4, #0]
 801d11c:	f021 0104 	bicge.w	r1, r1, #4
 801d120:	6021      	strge	r1, [r4, #0]
 801d122:	b90e      	cbnz	r6, 801d128 <_printf_i+0x118>
 801d124:	2d00      	cmp	r5, #0
 801d126:	d04d      	beq.n	801d1c4 <_printf_i+0x1b4>
 801d128:	4615      	mov	r5, r2
 801d12a:	fbb6 f1f3 	udiv	r1, r6, r3
 801d12e:	fb03 6711 	mls	r7, r3, r1, r6
 801d132:	5dc7      	ldrb	r7, [r0, r7]
 801d134:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801d138:	4637      	mov	r7, r6
 801d13a:	42bb      	cmp	r3, r7
 801d13c:	460e      	mov	r6, r1
 801d13e:	d9f4      	bls.n	801d12a <_printf_i+0x11a>
 801d140:	2b08      	cmp	r3, #8
 801d142:	d10b      	bne.n	801d15c <_printf_i+0x14c>
 801d144:	6823      	ldr	r3, [r4, #0]
 801d146:	07de      	lsls	r6, r3, #31
 801d148:	d508      	bpl.n	801d15c <_printf_i+0x14c>
 801d14a:	6923      	ldr	r3, [r4, #16]
 801d14c:	6861      	ldr	r1, [r4, #4]
 801d14e:	4299      	cmp	r1, r3
 801d150:	bfde      	ittt	le
 801d152:	2330      	movle	r3, #48	; 0x30
 801d154:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d158:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801d15c:	1b52      	subs	r2, r2, r5
 801d15e:	6122      	str	r2, [r4, #16]
 801d160:	f8cd a000 	str.w	sl, [sp]
 801d164:	464b      	mov	r3, r9
 801d166:	aa03      	add	r2, sp, #12
 801d168:	4621      	mov	r1, r4
 801d16a:	4640      	mov	r0, r8
 801d16c:	f7ff fee2 	bl	801cf34 <_printf_common>
 801d170:	3001      	adds	r0, #1
 801d172:	d14c      	bne.n	801d20e <_printf_i+0x1fe>
 801d174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d178:	b004      	add	sp, #16
 801d17a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d17e:	4835      	ldr	r0, [pc, #212]	; (801d254 <_printf_i+0x244>)
 801d180:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801d184:	6829      	ldr	r1, [r5, #0]
 801d186:	6823      	ldr	r3, [r4, #0]
 801d188:	f851 6b04 	ldr.w	r6, [r1], #4
 801d18c:	6029      	str	r1, [r5, #0]
 801d18e:	061d      	lsls	r5, r3, #24
 801d190:	d514      	bpl.n	801d1bc <_printf_i+0x1ac>
 801d192:	07df      	lsls	r7, r3, #31
 801d194:	bf44      	itt	mi
 801d196:	f043 0320 	orrmi.w	r3, r3, #32
 801d19a:	6023      	strmi	r3, [r4, #0]
 801d19c:	b91e      	cbnz	r6, 801d1a6 <_printf_i+0x196>
 801d19e:	6823      	ldr	r3, [r4, #0]
 801d1a0:	f023 0320 	bic.w	r3, r3, #32
 801d1a4:	6023      	str	r3, [r4, #0]
 801d1a6:	2310      	movs	r3, #16
 801d1a8:	e7b0      	b.n	801d10c <_printf_i+0xfc>
 801d1aa:	6823      	ldr	r3, [r4, #0]
 801d1ac:	f043 0320 	orr.w	r3, r3, #32
 801d1b0:	6023      	str	r3, [r4, #0]
 801d1b2:	2378      	movs	r3, #120	; 0x78
 801d1b4:	4828      	ldr	r0, [pc, #160]	; (801d258 <_printf_i+0x248>)
 801d1b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d1ba:	e7e3      	b.n	801d184 <_printf_i+0x174>
 801d1bc:	0659      	lsls	r1, r3, #25
 801d1be:	bf48      	it	mi
 801d1c0:	b2b6      	uxthmi	r6, r6
 801d1c2:	e7e6      	b.n	801d192 <_printf_i+0x182>
 801d1c4:	4615      	mov	r5, r2
 801d1c6:	e7bb      	b.n	801d140 <_printf_i+0x130>
 801d1c8:	682b      	ldr	r3, [r5, #0]
 801d1ca:	6826      	ldr	r6, [r4, #0]
 801d1cc:	6961      	ldr	r1, [r4, #20]
 801d1ce:	1d18      	adds	r0, r3, #4
 801d1d0:	6028      	str	r0, [r5, #0]
 801d1d2:	0635      	lsls	r5, r6, #24
 801d1d4:	681b      	ldr	r3, [r3, #0]
 801d1d6:	d501      	bpl.n	801d1dc <_printf_i+0x1cc>
 801d1d8:	6019      	str	r1, [r3, #0]
 801d1da:	e002      	b.n	801d1e2 <_printf_i+0x1d2>
 801d1dc:	0670      	lsls	r0, r6, #25
 801d1de:	d5fb      	bpl.n	801d1d8 <_printf_i+0x1c8>
 801d1e0:	8019      	strh	r1, [r3, #0]
 801d1e2:	2300      	movs	r3, #0
 801d1e4:	6123      	str	r3, [r4, #16]
 801d1e6:	4615      	mov	r5, r2
 801d1e8:	e7ba      	b.n	801d160 <_printf_i+0x150>
 801d1ea:	682b      	ldr	r3, [r5, #0]
 801d1ec:	1d1a      	adds	r2, r3, #4
 801d1ee:	602a      	str	r2, [r5, #0]
 801d1f0:	681d      	ldr	r5, [r3, #0]
 801d1f2:	6862      	ldr	r2, [r4, #4]
 801d1f4:	2100      	movs	r1, #0
 801d1f6:	4628      	mov	r0, r5
 801d1f8:	f7e3 f82a 	bl	8000250 <memchr>
 801d1fc:	b108      	cbz	r0, 801d202 <_printf_i+0x1f2>
 801d1fe:	1b40      	subs	r0, r0, r5
 801d200:	6060      	str	r0, [r4, #4]
 801d202:	6863      	ldr	r3, [r4, #4]
 801d204:	6123      	str	r3, [r4, #16]
 801d206:	2300      	movs	r3, #0
 801d208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d20c:	e7a8      	b.n	801d160 <_printf_i+0x150>
 801d20e:	6923      	ldr	r3, [r4, #16]
 801d210:	462a      	mov	r2, r5
 801d212:	4649      	mov	r1, r9
 801d214:	4640      	mov	r0, r8
 801d216:	47d0      	blx	sl
 801d218:	3001      	adds	r0, #1
 801d21a:	d0ab      	beq.n	801d174 <_printf_i+0x164>
 801d21c:	6823      	ldr	r3, [r4, #0]
 801d21e:	079b      	lsls	r3, r3, #30
 801d220:	d413      	bmi.n	801d24a <_printf_i+0x23a>
 801d222:	68e0      	ldr	r0, [r4, #12]
 801d224:	9b03      	ldr	r3, [sp, #12]
 801d226:	4298      	cmp	r0, r3
 801d228:	bfb8      	it	lt
 801d22a:	4618      	movlt	r0, r3
 801d22c:	e7a4      	b.n	801d178 <_printf_i+0x168>
 801d22e:	2301      	movs	r3, #1
 801d230:	4632      	mov	r2, r6
 801d232:	4649      	mov	r1, r9
 801d234:	4640      	mov	r0, r8
 801d236:	47d0      	blx	sl
 801d238:	3001      	adds	r0, #1
 801d23a:	d09b      	beq.n	801d174 <_printf_i+0x164>
 801d23c:	3501      	adds	r5, #1
 801d23e:	68e3      	ldr	r3, [r4, #12]
 801d240:	9903      	ldr	r1, [sp, #12]
 801d242:	1a5b      	subs	r3, r3, r1
 801d244:	42ab      	cmp	r3, r5
 801d246:	dcf2      	bgt.n	801d22e <_printf_i+0x21e>
 801d248:	e7eb      	b.n	801d222 <_printf_i+0x212>
 801d24a:	2500      	movs	r5, #0
 801d24c:	f104 0619 	add.w	r6, r4, #25
 801d250:	e7f5      	b.n	801d23e <_printf_i+0x22e>
 801d252:	bf00      	nop
 801d254:	08022d6a 	.word	0x08022d6a
 801d258:	08022d7b 	.word	0x08022d7b

0801d25c <_sbrk_r>:
 801d25c:	b538      	push	{r3, r4, r5, lr}
 801d25e:	4d06      	ldr	r5, [pc, #24]	; (801d278 <_sbrk_r+0x1c>)
 801d260:	2300      	movs	r3, #0
 801d262:	4604      	mov	r4, r0
 801d264:	4608      	mov	r0, r1
 801d266:	602b      	str	r3, [r5, #0]
 801d268:	f7eb fec2 	bl	8008ff0 <_sbrk>
 801d26c:	1c43      	adds	r3, r0, #1
 801d26e:	d102      	bne.n	801d276 <_sbrk_r+0x1a>
 801d270:	682b      	ldr	r3, [r5, #0]
 801d272:	b103      	cbz	r3, 801d276 <_sbrk_r+0x1a>
 801d274:	6023      	str	r3, [r4, #0]
 801d276:	bd38      	pop	{r3, r4, r5, pc}
 801d278:	20007e6c 	.word	0x20007e6c

0801d27c <sniprintf>:
 801d27c:	b40c      	push	{r2, r3}
 801d27e:	b530      	push	{r4, r5, lr}
 801d280:	4b17      	ldr	r3, [pc, #92]	; (801d2e0 <sniprintf+0x64>)
 801d282:	1e0c      	subs	r4, r1, #0
 801d284:	681d      	ldr	r5, [r3, #0]
 801d286:	b09d      	sub	sp, #116	; 0x74
 801d288:	da08      	bge.n	801d29c <sniprintf+0x20>
 801d28a:	238b      	movs	r3, #139	; 0x8b
 801d28c:	602b      	str	r3, [r5, #0]
 801d28e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d292:	b01d      	add	sp, #116	; 0x74
 801d294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d298:	b002      	add	sp, #8
 801d29a:	4770      	bx	lr
 801d29c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801d2a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d2a4:	bf14      	ite	ne
 801d2a6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801d2aa:	4623      	moveq	r3, r4
 801d2ac:	9304      	str	r3, [sp, #16]
 801d2ae:	9307      	str	r3, [sp, #28]
 801d2b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d2b4:	9002      	str	r0, [sp, #8]
 801d2b6:	9006      	str	r0, [sp, #24]
 801d2b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d2bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d2be:	ab21      	add	r3, sp, #132	; 0x84
 801d2c0:	a902      	add	r1, sp, #8
 801d2c2:	4628      	mov	r0, r5
 801d2c4:	9301      	str	r3, [sp, #4]
 801d2c6:	f002 feed 	bl	80200a4 <_svfiprintf_r>
 801d2ca:	1c43      	adds	r3, r0, #1
 801d2cc:	bfbc      	itt	lt
 801d2ce:	238b      	movlt	r3, #139	; 0x8b
 801d2d0:	602b      	strlt	r3, [r5, #0]
 801d2d2:	2c00      	cmp	r4, #0
 801d2d4:	d0dd      	beq.n	801d292 <sniprintf+0x16>
 801d2d6:	9b02      	ldr	r3, [sp, #8]
 801d2d8:	2200      	movs	r2, #0
 801d2da:	701a      	strb	r2, [r3, #0]
 801d2dc:	e7d9      	b.n	801d292 <sniprintf+0x16>
 801d2de:	bf00      	nop
 801d2e0:	200003a4 	.word	0x200003a4

0801d2e4 <siprintf>:
 801d2e4:	b40e      	push	{r1, r2, r3}
 801d2e6:	b500      	push	{lr}
 801d2e8:	b09c      	sub	sp, #112	; 0x70
 801d2ea:	ab1d      	add	r3, sp, #116	; 0x74
 801d2ec:	9002      	str	r0, [sp, #8]
 801d2ee:	9006      	str	r0, [sp, #24]
 801d2f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801d2f4:	4809      	ldr	r0, [pc, #36]	; (801d31c <siprintf+0x38>)
 801d2f6:	9107      	str	r1, [sp, #28]
 801d2f8:	9104      	str	r1, [sp, #16]
 801d2fa:	4909      	ldr	r1, [pc, #36]	; (801d320 <siprintf+0x3c>)
 801d2fc:	f853 2b04 	ldr.w	r2, [r3], #4
 801d300:	9105      	str	r1, [sp, #20]
 801d302:	6800      	ldr	r0, [r0, #0]
 801d304:	9301      	str	r3, [sp, #4]
 801d306:	a902      	add	r1, sp, #8
 801d308:	f002 fecc 	bl	80200a4 <_svfiprintf_r>
 801d30c:	9b02      	ldr	r3, [sp, #8]
 801d30e:	2200      	movs	r2, #0
 801d310:	701a      	strb	r2, [r3, #0]
 801d312:	b01c      	add	sp, #112	; 0x70
 801d314:	f85d eb04 	ldr.w	lr, [sp], #4
 801d318:	b003      	add	sp, #12
 801d31a:	4770      	bx	lr
 801d31c:	200003a4 	.word	0x200003a4
 801d320:	ffff0208 	.word	0xffff0208

0801d324 <strchr>:
 801d324:	b2c9      	uxtb	r1, r1
 801d326:	4603      	mov	r3, r0
 801d328:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d32c:	b11a      	cbz	r2, 801d336 <strchr+0x12>
 801d32e:	428a      	cmp	r2, r1
 801d330:	d1f9      	bne.n	801d326 <strchr+0x2>
 801d332:	4618      	mov	r0, r3
 801d334:	4770      	bx	lr
 801d336:	2900      	cmp	r1, #0
 801d338:	bf18      	it	ne
 801d33a:	2300      	movne	r3, #0
 801d33c:	e7f9      	b.n	801d332 <strchr+0xe>

0801d33e <strcpy>:
 801d33e:	4603      	mov	r3, r0
 801d340:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d344:	f803 2b01 	strb.w	r2, [r3], #1
 801d348:	2a00      	cmp	r2, #0
 801d34a:	d1f9      	bne.n	801d340 <strcpy+0x2>
 801d34c:	4770      	bx	lr

0801d34e <strncat>:
 801d34e:	b530      	push	{r4, r5, lr}
 801d350:	4604      	mov	r4, r0
 801d352:	7825      	ldrb	r5, [r4, #0]
 801d354:	4623      	mov	r3, r4
 801d356:	3401      	adds	r4, #1
 801d358:	2d00      	cmp	r5, #0
 801d35a:	d1fa      	bne.n	801d352 <strncat+0x4>
 801d35c:	3a01      	subs	r2, #1
 801d35e:	d304      	bcc.n	801d36a <strncat+0x1c>
 801d360:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d364:	f803 4b01 	strb.w	r4, [r3], #1
 801d368:	b904      	cbnz	r4, 801d36c <strncat+0x1e>
 801d36a:	bd30      	pop	{r4, r5, pc}
 801d36c:	2a00      	cmp	r2, #0
 801d36e:	d1f5      	bne.n	801d35c <strncat+0xe>
 801d370:	701a      	strb	r2, [r3, #0]
 801d372:	e7f3      	b.n	801d35c <strncat+0xe>

0801d374 <strncpy>:
 801d374:	b510      	push	{r4, lr}
 801d376:	3901      	subs	r1, #1
 801d378:	4603      	mov	r3, r0
 801d37a:	b132      	cbz	r2, 801d38a <strncpy+0x16>
 801d37c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d380:	f803 4b01 	strb.w	r4, [r3], #1
 801d384:	3a01      	subs	r2, #1
 801d386:	2c00      	cmp	r4, #0
 801d388:	d1f7      	bne.n	801d37a <strncpy+0x6>
 801d38a:	441a      	add	r2, r3
 801d38c:	2100      	movs	r1, #0
 801d38e:	4293      	cmp	r3, r2
 801d390:	d100      	bne.n	801d394 <strncpy+0x20>
 801d392:	bd10      	pop	{r4, pc}
 801d394:	f803 1b01 	strb.w	r1, [r3], #1
 801d398:	e7f9      	b.n	801d38e <strncpy+0x1a>

0801d39a <sulp>:
 801d39a:	b570      	push	{r4, r5, r6, lr}
 801d39c:	4604      	mov	r4, r0
 801d39e:	460d      	mov	r5, r1
 801d3a0:	ec45 4b10 	vmov	d0, r4, r5
 801d3a4:	4616      	mov	r6, r2
 801d3a6:	f002 fcbd 	bl	801fd24 <__ulp>
 801d3aa:	ec51 0b10 	vmov	r0, r1, d0
 801d3ae:	b17e      	cbz	r6, 801d3d0 <sulp+0x36>
 801d3b0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801d3b4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d3b8:	2b00      	cmp	r3, #0
 801d3ba:	dd09      	ble.n	801d3d0 <sulp+0x36>
 801d3bc:	051b      	lsls	r3, r3, #20
 801d3be:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801d3c2:	2400      	movs	r4, #0
 801d3c4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801d3c8:	4622      	mov	r2, r4
 801d3ca:	462b      	mov	r3, r5
 801d3cc:	f7e3 f94c 	bl	8000668 <__aeabi_dmul>
 801d3d0:	bd70      	pop	{r4, r5, r6, pc}
 801d3d2:	0000      	movs	r0, r0
 801d3d4:	0000      	movs	r0, r0
	...

0801d3d8 <_strtod_l>:
 801d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3dc:	ed2d 8b02 	vpush	{d8}
 801d3e0:	b09d      	sub	sp, #116	; 0x74
 801d3e2:	461f      	mov	r7, r3
 801d3e4:	2300      	movs	r3, #0
 801d3e6:	9318      	str	r3, [sp, #96]	; 0x60
 801d3e8:	4ba2      	ldr	r3, [pc, #648]	; (801d674 <_strtod_l+0x29c>)
 801d3ea:	9213      	str	r2, [sp, #76]	; 0x4c
 801d3ec:	681b      	ldr	r3, [r3, #0]
 801d3ee:	9305      	str	r3, [sp, #20]
 801d3f0:	4604      	mov	r4, r0
 801d3f2:	4618      	mov	r0, r3
 801d3f4:	4688      	mov	r8, r1
 801d3f6:	f7e2 ff1d 	bl	8000234 <strlen>
 801d3fa:	f04f 0a00 	mov.w	sl, #0
 801d3fe:	4605      	mov	r5, r0
 801d400:	f04f 0b00 	mov.w	fp, #0
 801d404:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801d408:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d40a:	781a      	ldrb	r2, [r3, #0]
 801d40c:	2a2b      	cmp	r2, #43	; 0x2b
 801d40e:	d04e      	beq.n	801d4ae <_strtod_l+0xd6>
 801d410:	d83b      	bhi.n	801d48a <_strtod_l+0xb2>
 801d412:	2a0d      	cmp	r2, #13
 801d414:	d834      	bhi.n	801d480 <_strtod_l+0xa8>
 801d416:	2a08      	cmp	r2, #8
 801d418:	d834      	bhi.n	801d484 <_strtod_l+0xac>
 801d41a:	2a00      	cmp	r2, #0
 801d41c:	d03e      	beq.n	801d49c <_strtod_l+0xc4>
 801d41e:	2300      	movs	r3, #0
 801d420:	930a      	str	r3, [sp, #40]	; 0x28
 801d422:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801d424:	7833      	ldrb	r3, [r6, #0]
 801d426:	2b30      	cmp	r3, #48	; 0x30
 801d428:	f040 80b0 	bne.w	801d58c <_strtod_l+0x1b4>
 801d42c:	7873      	ldrb	r3, [r6, #1]
 801d42e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d432:	2b58      	cmp	r3, #88	; 0x58
 801d434:	d168      	bne.n	801d508 <_strtod_l+0x130>
 801d436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d438:	9301      	str	r3, [sp, #4]
 801d43a:	ab18      	add	r3, sp, #96	; 0x60
 801d43c:	9702      	str	r7, [sp, #8]
 801d43e:	9300      	str	r3, [sp, #0]
 801d440:	4a8d      	ldr	r2, [pc, #564]	; (801d678 <_strtod_l+0x2a0>)
 801d442:	ab19      	add	r3, sp, #100	; 0x64
 801d444:	a917      	add	r1, sp, #92	; 0x5c
 801d446:	4620      	mov	r0, r4
 801d448:	f001 fdd0 	bl	801efec <__gethex>
 801d44c:	f010 0707 	ands.w	r7, r0, #7
 801d450:	4605      	mov	r5, r0
 801d452:	d005      	beq.n	801d460 <_strtod_l+0x88>
 801d454:	2f06      	cmp	r7, #6
 801d456:	d12c      	bne.n	801d4b2 <_strtod_l+0xda>
 801d458:	3601      	adds	r6, #1
 801d45a:	2300      	movs	r3, #0
 801d45c:	9617      	str	r6, [sp, #92]	; 0x5c
 801d45e:	930a      	str	r3, [sp, #40]	; 0x28
 801d460:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d462:	2b00      	cmp	r3, #0
 801d464:	f040 8590 	bne.w	801df88 <_strtod_l+0xbb0>
 801d468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d46a:	b1eb      	cbz	r3, 801d4a8 <_strtod_l+0xd0>
 801d46c:	4652      	mov	r2, sl
 801d46e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801d472:	ec43 2b10 	vmov	d0, r2, r3
 801d476:	b01d      	add	sp, #116	; 0x74
 801d478:	ecbd 8b02 	vpop	{d8}
 801d47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d480:	2a20      	cmp	r2, #32
 801d482:	d1cc      	bne.n	801d41e <_strtod_l+0x46>
 801d484:	3301      	adds	r3, #1
 801d486:	9317      	str	r3, [sp, #92]	; 0x5c
 801d488:	e7be      	b.n	801d408 <_strtod_l+0x30>
 801d48a:	2a2d      	cmp	r2, #45	; 0x2d
 801d48c:	d1c7      	bne.n	801d41e <_strtod_l+0x46>
 801d48e:	2201      	movs	r2, #1
 801d490:	920a      	str	r2, [sp, #40]	; 0x28
 801d492:	1c5a      	adds	r2, r3, #1
 801d494:	9217      	str	r2, [sp, #92]	; 0x5c
 801d496:	785b      	ldrb	r3, [r3, #1]
 801d498:	2b00      	cmp	r3, #0
 801d49a:	d1c2      	bne.n	801d422 <_strtod_l+0x4a>
 801d49c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d49e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801d4a2:	2b00      	cmp	r3, #0
 801d4a4:	f040 856e 	bne.w	801df84 <_strtod_l+0xbac>
 801d4a8:	4652      	mov	r2, sl
 801d4aa:	465b      	mov	r3, fp
 801d4ac:	e7e1      	b.n	801d472 <_strtod_l+0x9a>
 801d4ae:	2200      	movs	r2, #0
 801d4b0:	e7ee      	b.n	801d490 <_strtod_l+0xb8>
 801d4b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d4b4:	b13a      	cbz	r2, 801d4c6 <_strtod_l+0xee>
 801d4b6:	2135      	movs	r1, #53	; 0x35
 801d4b8:	a81a      	add	r0, sp, #104	; 0x68
 801d4ba:	f002 fd3e 	bl	801ff3a <__copybits>
 801d4be:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d4c0:	4620      	mov	r0, r4
 801d4c2:	f002 f8fd 	bl	801f6c0 <_Bfree>
 801d4c6:	3f01      	subs	r7, #1
 801d4c8:	2f04      	cmp	r7, #4
 801d4ca:	d806      	bhi.n	801d4da <_strtod_l+0x102>
 801d4cc:	e8df f007 	tbb	[pc, r7]
 801d4d0:	1714030a 	.word	0x1714030a
 801d4d4:	0a          	.byte	0x0a
 801d4d5:	00          	.byte	0x00
 801d4d6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801d4da:	0728      	lsls	r0, r5, #28
 801d4dc:	d5c0      	bpl.n	801d460 <_strtod_l+0x88>
 801d4de:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801d4e2:	e7bd      	b.n	801d460 <_strtod_l+0x88>
 801d4e4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801d4e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801d4ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801d4ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801d4f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801d4f6:	e7f0      	b.n	801d4da <_strtod_l+0x102>
 801d4f8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801d67c <_strtod_l+0x2a4>
 801d4fc:	e7ed      	b.n	801d4da <_strtod_l+0x102>
 801d4fe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801d502:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801d506:	e7e8      	b.n	801d4da <_strtod_l+0x102>
 801d508:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d50a:	1c5a      	adds	r2, r3, #1
 801d50c:	9217      	str	r2, [sp, #92]	; 0x5c
 801d50e:	785b      	ldrb	r3, [r3, #1]
 801d510:	2b30      	cmp	r3, #48	; 0x30
 801d512:	d0f9      	beq.n	801d508 <_strtod_l+0x130>
 801d514:	2b00      	cmp	r3, #0
 801d516:	d0a3      	beq.n	801d460 <_strtod_l+0x88>
 801d518:	2301      	movs	r3, #1
 801d51a:	f04f 0900 	mov.w	r9, #0
 801d51e:	9304      	str	r3, [sp, #16]
 801d520:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d522:	9308      	str	r3, [sp, #32]
 801d524:	f8cd 901c 	str.w	r9, [sp, #28]
 801d528:	464f      	mov	r7, r9
 801d52a:	220a      	movs	r2, #10
 801d52c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801d52e:	7806      	ldrb	r6, [r0, #0]
 801d530:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801d534:	b2d9      	uxtb	r1, r3
 801d536:	2909      	cmp	r1, #9
 801d538:	d92a      	bls.n	801d590 <_strtod_l+0x1b8>
 801d53a:	9905      	ldr	r1, [sp, #20]
 801d53c:	462a      	mov	r2, r5
 801d53e:	f002 fec1 	bl	80202c4 <strncmp>
 801d542:	b398      	cbz	r0, 801d5ac <_strtod_l+0x1d4>
 801d544:	2000      	movs	r0, #0
 801d546:	4632      	mov	r2, r6
 801d548:	463d      	mov	r5, r7
 801d54a:	9005      	str	r0, [sp, #20]
 801d54c:	4603      	mov	r3, r0
 801d54e:	2a65      	cmp	r2, #101	; 0x65
 801d550:	d001      	beq.n	801d556 <_strtod_l+0x17e>
 801d552:	2a45      	cmp	r2, #69	; 0x45
 801d554:	d118      	bne.n	801d588 <_strtod_l+0x1b0>
 801d556:	b91d      	cbnz	r5, 801d560 <_strtod_l+0x188>
 801d558:	9a04      	ldr	r2, [sp, #16]
 801d55a:	4302      	orrs	r2, r0
 801d55c:	d09e      	beq.n	801d49c <_strtod_l+0xc4>
 801d55e:	2500      	movs	r5, #0
 801d560:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801d564:	f108 0201 	add.w	r2, r8, #1
 801d568:	9217      	str	r2, [sp, #92]	; 0x5c
 801d56a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d56e:	2a2b      	cmp	r2, #43	; 0x2b
 801d570:	d075      	beq.n	801d65e <_strtod_l+0x286>
 801d572:	2a2d      	cmp	r2, #45	; 0x2d
 801d574:	d07b      	beq.n	801d66e <_strtod_l+0x296>
 801d576:	f04f 0c00 	mov.w	ip, #0
 801d57a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801d57e:	2909      	cmp	r1, #9
 801d580:	f240 8082 	bls.w	801d688 <_strtod_l+0x2b0>
 801d584:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801d588:	2600      	movs	r6, #0
 801d58a:	e09d      	b.n	801d6c8 <_strtod_l+0x2f0>
 801d58c:	2300      	movs	r3, #0
 801d58e:	e7c4      	b.n	801d51a <_strtod_l+0x142>
 801d590:	2f08      	cmp	r7, #8
 801d592:	bfd8      	it	le
 801d594:	9907      	ldrle	r1, [sp, #28]
 801d596:	f100 0001 	add.w	r0, r0, #1
 801d59a:	bfda      	itte	le
 801d59c:	fb02 3301 	mlale	r3, r2, r1, r3
 801d5a0:	9307      	strle	r3, [sp, #28]
 801d5a2:	fb02 3909 	mlagt	r9, r2, r9, r3
 801d5a6:	3701      	adds	r7, #1
 801d5a8:	9017      	str	r0, [sp, #92]	; 0x5c
 801d5aa:	e7bf      	b.n	801d52c <_strtod_l+0x154>
 801d5ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d5ae:	195a      	adds	r2, r3, r5
 801d5b0:	9217      	str	r2, [sp, #92]	; 0x5c
 801d5b2:	5d5a      	ldrb	r2, [r3, r5]
 801d5b4:	2f00      	cmp	r7, #0
 801d5b6:	d037      	beq.n	801d628 <_strtod_l+0x250>
 801d5b8:	9005      	str	r0, [sp, #20]
 801d5ba:	463d      	mov	r5, r7
 801d5bc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801d5c0:	2b09      	cmp	r3, #9
 801d5c2:	d912      	bls.n	801d5ea <_strtod_l+0x212>
 801d5c4:	2301      	movs	r3, #1
 801d5c6:	e7c2      	b.n	801d54e <_strtod_l+0x176>
 801d5c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d5ca:	1c5a      	adds	r2, r3, #1
 801d5cc:	9217      	str	r2, [sp, #92]	; 0x5c
 801d5ce:	785a      	ldrb	r2, [r3, #1]
 801d5d0:	3001      	adds	r0, #1
 801d5d2:	2a30      	cmp	r2, #48	; 0x30
 801d5d4:	d0f8      	beq.n	801d5c8 <_strtod_l+0x1f0>
 801d5d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801d5da:	2b08      	cmp	r3, #8
 801d5dc:	f200 84d9 	bhi.w	801df92 <_strtod_l+0xbba>
 801d5e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d5e2:	9005      	str	r0, [sp, #20]
 801d5e4:	2000      	movs	r0, #0
 801d5e6:	9308      	str	r3, [sp, #32]
 801d5e8:	4605      	mov	r5, r0
 801d5ea:	3a30      	subs	r2, #48	; 0x30
 801d5ec:	f100 0301 	add.w	r3, r0, #1
 801d5f0:	d014      	beq.n	801d61c <_strtod_l+0x244>
 801d5f2:	9905      	ldr	r1, [sp, #20]
 801d5f4:	4419      	add	r1, r3
 801d5f6:	9105      	str	r1, [sp, #20]
 801d5f8:	462b      	mov	r3, r5
 801d5fa:	eb00 0e05 	add.w	lr, r0, r5
 801d5fe:	210a      	movs	r1, #10
 801d600:	4573      	cmp	r3, lr
 801d602:	d113      	bne.n	801d62c <_strtod_l+0x254>
 801d604:	182b      	adds	r3, r5, r0
 801d606:	2b08      	cmp	r3, #8
 801d608:	f105 0501 	add.w	r5, r5, #1
 801d60c:	4405      	add	r5, r0
 801d60e:	dc1c      	bgt.n	801d64a <_strtod_l+0x272>
 801d610:	9907      	ldr	r1, [sp, #28]
 801d612:	230a      	movs	r3, #10
 801d614:	fb03 2301 	mla	r3, r3, r1, r2
 801d618:	9307      	str	r3, [sp, #28]
 801d61a:	2300      	movs	r3, #0
 801d61c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801d61e:	1c51      	adds	r1, r2, #1
 801d620:	9117      	str	r1, [sp, #92]	; 0x5c
 801d622:	7852      	ldrb	r2, [r2, #1]
 801d624:	4618      	mov	r0, r3
 801d626:	e7c9      	b.n	801d5bc <_strtod_l+0x1e4>
 801d628:	4638      	mov	r0, r7
 801d62a:	e7d2      	b.n	801d5d2 <_strtod_l+0x1fa>
 801d62c:	2b08      	cmp	r3, #8
 801d62e:	dc04      	bgt.n	801d63a <_strtod_l+0x262>
 801d630:	9e07      	ldr	r6, [sp, #28]
 801d632:	434e      	muls	r6, r1
 801d634:	9607      	str	r6, [sp, #28]
 801d636:	3301      	adds	r3, #1
 801d638:	e7e2      	b.n	801d600 <_strtod_l+0x228>
 801d63a:	f103 0c01 	add.w	ip, r3, #1
 801d63e:	f1bc 0f10 	cmp.w	ip, #16
 801d642:	bfd8      	it	le
 801d644:	fb01 f909 	mulle.w	r9, r1, r9
 801d648:	e7f5      	b.n	801d636 <_strtod_l+0x25e>
 801d64a:	2d10      	cmp	r5, #16
 801d64c:	bfdc      	itt	le
 801d64e:	230a      	movle	r3, #10
 801d650:	fb03 2909 	mlale	r9, r3, r9, r2
 801d654:	e7e1      	b.n	801d61a <_strtod_l+0x242>
 801d656:	2300      	movs	r3, #0
 801d658:	9305      	str	r3, [sp, #20]
 801d65a:	2301      	movs	r3, #1
 801d65c:	e77c      	b.n	801d558 <_strtod_l+0x180>
 801d65e:	f04f 0c00 	mov.w	ip, #0
 801d662:	f108 0202 	add.w	r2, r8, #2
 801d666:	9217      	str	r2, [sp, #92]	; 0x5c
 801d668:	f898 2002 	ldrb.w	r2, [r8, #2]
 801d66c:	e785      	b.n	801d57a <_strtod_l+0x1a2>
 801d66e:	f04f 0c01 	mov.w	ip, #1
 801d672:	e7f6      	b.n	801d662 <_strtod_l+0x28a>
 801d674:	08022fd8 	.word	0x08022fd8
 801d678:	08022d8c 	.word	0x08022d8c
 801d67c:	7ff00000 	.word	0x7ff00000
 801d680:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801d682:	1c51      	adds	r1, r2, #1
 801d684:	9117      	str	r1, [sp, #92]	; 0x5c
 801d686:	7852      	ldrb	r2, [r2, #1]
 801d688:	2a30      	cmp	r2, #48	; 0x30
 801d68a:	d0f9      	beq.n	801d680 <_strtod_l+0x2a8>
 801d68c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801d690:	2908      	cmp	r1, #8
 801d692:	f63f af79 	bhi.w	801d588 <_strtod_l+0x1b0>
 801d696:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801d69a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801d69c:	9206      	str	r2, [sp, #24]
 801d69e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801d6a0:	1c51      	adds	r1, r2, #1
 801d6a2:	9117      	str	r1, [sp, #92]	; 0x5c
 801d6a4:	7852      	ldrb	r2, [r2, #1]
 801d6a6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801d6aa:	2e09      	cmp	r6, #9
 801d6ac:	d937      	bls.n	801d71e <_strtod_l+0x346>
 801d6ae:	9e06      	ldr	r6, [sp, #24]
 801d6b0:	1b89      	subs	r1, r1, r6
 801d6b2:	2908      	cmp	r1, #8
 801d6b4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801d6b8:	dc02      	bgt.n	801d6c0 <_strtod_l+0x2e8>
 801d6ba:	4576      	cmp	r6, lr
 801d6bc:	bfa8      	it	ge
 801d6be:	4676      	movge	r6, lr
 801d6c0:	f1bc 0f00 	cmp.w	ip, #0
 801d6c4:	d000      	beq.n	801d6c8 <_strtod_l+0x2f0>
 801d6c6:	4276      	negs	r6, r6
 801d6c8:	2d00      	cmp	r5, #0
 801d6ca:	d14d      	bne.n	801d768 <_strtod_l+0x390>
 801d6cc:	9904      	ldr	r1, [sp, #16]
 801d6ce:	4301      	orrs	r1, r0
 801d6d0:	f47f aec6 	bne.w	801d460 <_strtod_l+0x88>
 801d6d4:	2b00      	cmp	r3, #0
 801d6d6:	f47f aee1 	bne.w	801d49c <_strtod_l+0xc4>
 801d6da:	2a69      	cmp	r2, #105	; 0x69
 801d6dc:	d027      	beq.n	801d72e <_strtod_l+0x356>
 801d6de:	dc24      	bgt.n	801d72a <_strtod_l+0x352>
 801d6e0:	2a49      	cmp	r2, #73	; 0x49
 801d6e2:	d024      	beq.n	801d72e <_strtod_l+0x356>
 801d6e4:	2a4e      	cmp	r2, #78	; 0x4e
 801d6e6:	f47f aed9 	bne.w	801d49c <_strtod_l+0xc4>
 801d6ea:	499f      	ldr	r1, [pc, #636]	; (801d968 <_strtod_l+0x590>)
 801d6ec:	a817      	add	r0, sp, #92	; 0x5c
 801d6ee:	f001 fed5 	bl	801f49c <__match>
 801d6f2:	2800      	cmp	r0, #0
 801d6f4:	f43f aed2 	beq.w	801d49c <_strtod_l+0xc4>
 801d6f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d6fa:	781b      	ldrb	r3, [r3, #0]
 801d6fc:	2b28      	cmp	r3, #40	; 0x28
 801d6fe:	d12d      	bne.n	801d75c <_strtod_l+0x384>
 801d700:	499a      	ldr	r1, [pc, #616]	; (801d96c <_strtod_l+0x594>)
 801d702:	aa1a      	add	r2, sp, #104	; 0x68
 801d704:	a817      	add	r0, sp, #92	; 0x5c
 801d706:	f001 fedd 	bl	801f4c4 <__hexnan>
 801d70a:	2805      	cmp	r0, #5
 801d70c:	d126      	bne.n	801d75c <_strtod_l+0x384>
 801d70e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801d710:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801d714:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801d718:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801d71c:	e6a0      	b.n	801d460 <_strtod_l+0x88>
 801d71e:	210a      	movs	r1, #10
 801d720:	fb01 2e0e 	mla	lr, r1, lr, r2
 801d724:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801d728:	e7b9      	b.n	801d69e <_strtod_l+0x2c6>
 801d72a:	2a6e      	cmp	r2, #110	; 0x6e
 801d72c:	e7db      	b.n	801d6e6 <_strtod_l+0x30e>
 801d72e:	4990      	ldr	r1, [pc, #576]	; (801d970 <_strtod_l+0x598>)
 801d730:	a817      	add	r0, sp, #92	; 0x5c
 801d732:	f001 feb3 	bl	801f49c <__match>
 801d736:	2800      	cmp	r0, #0
 801d738:	f43f aeb0 	beq.w	801d49c <_strtod_l+0xc4>
 801d73c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d73e:	498d      	ldr	r1, [pc, #564]	; (801d974 <_strtod_l+0x59c>)
 801d740:	3b01      	subs	r3, #1
 801d742:	a817      	add	r0, sp, #92	; 0x5c
 801d744:	9317      	str	r3, [sp, #92]	; 0x5c
 801d746:	f001 fea9 	bl	801f49c <__match>
 801d74a:	b910      	cbnz	r0, 801d752 <_strtod_l+0x37a>
 801d74c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d74e:	3301      	adds	r3, #1
 801d750:	9317      	str	r3, [sp, #92]	; 0x5c
 801d752:	f8df b230 	ldr.w	fp, [pc, #560]	; 801d984 <_strtod_l+0x5ac>
 801d756:	f04f 0a00 	mov.w	sl, #0
 801d75a:	e681      	b.n	801d460 <_strtod_l+0x88>
 801d75c:	4886      	ldr	r0, [pc, #536]	; (801d978 <_strtod_l+0x5a0>)
 801d75e:	f002 fda3 	bl	80202a8 <nan>
 801d762:	ec5b ab10 	vmov	sl, fp, d0
 801d766:	e67b      	b.n	801d460 <_strtod_l+0x88>
 801d768:	9b05      	ldr	r3, [sp, #20]
 801d76a:	9807      	ldr	r0, [sp, #28]
 801d76c:	1af3      	subs	r3, r6, r3
 801d76e:	2f00      	cmp	r7, #0
 801d770:	bf08      	it	eq
 801d772:	462f      	moveq	r7, r5
 801d774:	2d10      	cmp	r5, #16
 801d776:	9306      	str	r3, [sp, #24]
 801d778:	46a8      	mov	r8, r5
 801d77a:	bfa8      	it	ge
 801d77c:	f04f 0810 	movge.w	r8, #16
 801d780:	f7e2 fef8 	bl	8000574 <__aeabi_ui2d>
 801d784:	2d09      	cmp	r5, #9
 801d786:	4682      	mov	sl, r0
 801d788:	468b      	mov	fp, r1
 801d78a:	dd13      	ble.n	801d7b4 <_strtod_l+0x3dc>
 801d78c:	4b7b      	ldr	r3, [pc, #492]	; (801d97c <_strtod_l+0x5a4>)
 801d78e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801d792:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801d796:	f7e2 ff67 	bl	8000668 <__aeabi_dmul>
 801d79a:	4682      	mov	sl, r0
 801d79c:	4648      	mov	r0, r9
 801d79e:	468b      	mov	fp, r1
 801d7a0:	f7e2 fee8 	bl	8000574 <__aeabi_ui2d>
 801d7a4:	4602      	mov	r2, r0
 801d7a6:	460b      	mov	r3, r1
 801d7a8:	4650      	mov	r0, sl
 801d7aa:	4659      	mov	r1, fp
 801d7ac:	f7e2 fda6 	bl	80002fc <__adddf3>
 801d7b0:	4682      	mov	sl, r0
 801d7b2:	468b      	mov	fp, r1
 801d7b4:	2d0f      	cmp	r5, #15
 801d7b6:	dc38      	bgt.n	801d82a <_strtod_l+0x452>
 801d7b8:	9b06      	ldr	r3, [sp, #24]
 801d7ba:	2b00      	cmp	r3, #0
 801d7bc:	f43f ae50 	beq.w	801d460 <_strtod_l+0x88>
 801d7c0:	dd24      	ble.n	801d80c <_strtod_l+0x434>
 801d7c2:	2b16      	cmp	r3, #22
 801d7c4:	dc0b      	bgt.n	801d7de <_strtod_l+0x406>
 801d7c6:	496d      	ldr	r1, [pc, #436]	; (801d97c <_strtod_l+0x5a4>)
 801d7c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d7cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d7d0:	4652      	mov	r2, sl
 801d7d2:	465b      	mov	r3, fp
 801d7d4:	f7e2 ff48 	bl	8000668 <__aeabi_dmul>
 801d7d8:	4682      	mov	sl, r0
 801d7da:	468b      	mov	fp, r1
 801d7dc:	e640      	b.n	801d460 <_strtod_l+0x88>
 801d7de:	9a06      	ldr	r2, [sp, #24]
 801d7e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801d7e4:	4293      	cmp	r3, r2
 801d7e6:	db20      	blt.n	801d82a <_strtod_l+0x452>
 801d7e8:	4c64      	ldr	r4, [pc, #400]	; (801d97c <_strtod_l+0x5a4>)
 801d7ea:	f1c5 050f 	rsb	r5, r5, #15
 801d7ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801d7f2:	4652      	mov	r2, sl
 801d7f4:	465b      	mov	r3, fp
 801d7f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d7fa:	f7e2 ff35 	bl	8000668 <__aeabi_dmul>
 801d7fe:	9b06      	ldr	r3, [sp, #24]
 801d800:	1b5d      	subs	r5, r3, r5
 801d802:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801d806:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d80a:	e7e3      	b.n	801d7d4 <_strtod_l+0x3fc>
 801d80c:	9b06      	ldr	r3, [sp, #24]
 801d80e:	3316      	adds	r3, #22
 801d810:	db0b      	blt.n	801d82a <_strtod_l+0x452>
 801d812:	9b05      	ldr	r3, [sp, #20]
 801d814:	1b9e      	subs	r6, r3, r6
 801d816:	4b59      	ldr	r3, [pc, #356]	; (801d97c <_strtod_l+0x5a4>)
 801d818:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801d81c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d820:	4650      	mov	r0, sl
 801d822:	4659      	mov	r1, fp
 801d824:	f7e3 f84a 	bl	80008bc <__aeabi_ddiv>
 801d828:	e7d6      	b.n	801d7d8 <_strtod_l+0x400>
 801d82a:	9b06      	ldr	r3, [sp, #24]
 801d82c:	eba5 0808 	sub.w	r8, r5, r8
 801d830:	4498      	add	r8, r3
 801d832:	f1b8 0f00 	cmp.w	r8, #0
 801d836:	dd74      	ble.n	801d922 <_strtod_l+0x54a>
 801d838:	f018 030f 	ands.w	r3, r8, #15
 801d83c:	d00a      	beq.n	801d854 <_strtod_l+0x47c>
 801d83e:	494f      	ldr	r1, [pc, #316]	; (801d97c <_strtod_l+0x5a4>)
 801d840:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d844:	4652      	mov	r2, sl
 801d846:	465b      	mov	r3, fp
 801d848:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d84c:	f7e2 ff0c 	bl	8000668 <__aeabi_dmul>
 801d850:	4682      	mov	sl, r0
 801d852:	468b      	mov	fp, r1
 801d854:	f038 080f 	bics.w	r8, r8, #15
 801d858:	d04f      	beq.n	801d8fa <_strtod_l+0x522>
 801d85a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801d85e:	dd22      	ble.n	801d8a6 <_strtod_l+0x4ce>
 801d860:	2500      	movs	r5, #0
 801d862:	462e      	mov	r6, r5
 801d864:	9507      	str	r5, [sp, #28]
 801d866:	9505      	str	r5, [sp, #20]
 801d868:	2322      	movs	r3, #34	; 0x22
 801d86a:	f8df b118 	ldr.w	fp, [pc, #280]	; 801d984 <_strtod_l+0x5ac>
 801d86e:	6023      	str	r3, [r4, #0]
 801d870:	f04f 0a00 	mov.w	sl, #0
 801d874:	9b07      	ldr	r3, [sp, #28]
 801d876:	2b00      	cmp	r3, #0
 801d878:	f43f adf2 	beq.w	801d460 <_strtod_l+0x88>
 801d87c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d87e:	4620      	mov	r0, r4
 801d880:	f001 ff1e 	bl	801f6c0 <_Bfree>
 801d884:	9905      	ldr	r1, [sp, #20]
 801d886:	4620      	mov	r0, r4
 801d888:	f001 ff1a 	bl	801f6c0 <_Bfree>
 801d88c:	4631      	mov	r1, r6
 801d88e:	4620      	mov	r0, r4
 801d890:	f001 ff16 	bl	801f6c0 <_Bfree>
 801d894:	9907      	ldr	r1, [sp, #28]
 801d896:	4620      	mov	r0, r4
 801d898:	f001 ff12 	bl	801f6c0 <_Bfree>
 801d89c:	4629      	mov	r1, r5
 801d89e:	4620      	mov	r0, r4
 801d8a0:	f001 ff0e 	bl	801f6c0 <_Bfree>
 801d8a4:	e5dc      	b.n	801d460 <_strtod_l+0x88>
 801d8a6:	4b36      	ldr	r3, [pc, #216]	; (801d980 <_strtod_l+0x5a8>)
 801d8a8:	9304      	str	r3, [sp, #16]
 801d8aa:	2300      	movs	r3, #0
 801d8ac:	ea4f 1828 	mov.w	r8, r8, asr #4
 801d8b0:	4650      	mov	r0, sl
 801d8b2:	4659      	mov	r1, fp
 801d8b4:	4699      	mov	r9, r3
 801d8b6:	f1b8 0f01 	cmp.w	r8, #1
 801d8ba:	dc21      	bgt.n	801d900 <_strtod_l+0x528>
 801d8bc:	b10b      	cbz	r3, 801d8c2 <_strtod_l+0x4ea>
 801d8be:	4682      	mov	sl, r0
 801d8c0:	468b      	mov	fp, r1
 801d8c2:	4b2f      	ldr	r3, [pc, #188]	; (801d980 <_strtod_l+0x5a8>)
 801d8c4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801d8c8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801d8cc:	4652      	mov	r2, sl
 801d8ce:	465b      	mov	r3, fp
 801d8d0:	e9d9 0100 	ldrd	r0, r1, [r9]
 801d8d4:	f7e2 fec8 	bl	8000668 <__aeabi_dmul>
 801d8d8:	4b2a      	ldr	r3, [pc, #168]	; (801d984 <_strtod_l+0x5ac>)
 801d8da:	460a      	mov	r2, r1
 801d8dc:	400b      	ands	r3, r1
 801d8de:	492a      	ldr	r1, [pc, #168]	; (801d988 <_strtod_l+0x5b0>)
 801d8e0:	428b      	cmp	r3, r1
 801d8e2:	4682      	mov	sl, r0
 801d8e4:	d8bc      	bhi.n	801d860 <_strtod_l+0x488>
 801d8e6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801d8ea:	428b      	cmp	r3, r1
 801d8ec:	bf86      	itte	hi
 801d8ee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801d98c <_strtod_l+0x5b4>
 801d8f2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801d8f6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801d8fa:	2300      	movs	r3, #0
 801d8fc:	9304      	str	r3, [sp, #16]
 801d8fe:	e084      	b.n	801da0a <_strtod_l+0x632>
 801d900:	f018 0f01 	tst.w	r8, #1
 801d904:	d005      	beq.n	801d912 <_strtod_l+0x53a>
 801d906:	9b04      	ldr	r3, [sp, #16]
 801d908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d90c:	f7e2 feac 	bl	8000668 <__aeabi_dmul>
 801d910:	2301      	movs	r3, #1
 801d912:	9a04      	ldr	r2, [sp, #16]
 801d914:	3208      	adds	r2, #8
 801d916:	f109 0901 	add.w	r9, r9, #1
 801d91a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801d91e:	9204      	str	r2, [sp, #16]
 801d920:	e7c9      	b.n	801d8b6 <_strtod_l+0x4de>
 801d922:	d0ea      	beq.n	801d8fa <_strtod_l+0x522>
 801d924:	f1c8 0800 	rsb	r8, r8, #0
 801d928:	f018 020f 	ands.w	r2, r8, #15
 801d92c:	d00a      	beq.n	801d944 <_strtod_l+0x56c>
 801d92e:	4b13      	ldr	r3, [pc, #76]	; (801d97c <_strtod_l+0x5a4>)
 801d930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d934:	4650      	mov	r0, sl
 801d936:	4659      	mov	r1, fp
 801d938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d93c:	f7e2 ffbe 	bl	80008bc <__aeabi_ddiv>
 801d940:	4682      	mov	sl, r0
 801d942:	468b      	mov	fp, r1
 801d944:	ea5f 1828 	movs.w	r8, r8, asr #4
 801d948:	d0d7      	beq.n	801d8fa <_strtod_l+0x522>
 801d94a:	f1b8 0f1f 	cmp.w	r8, #31
 801d94e:	dd1f      	ble.n	801d990 <_strtod_l+0x5b8>
 801d950:	2500      	movs	r5, #0
 801d952:	462e      	mov	r6, r5
 801d954:	9507      	str	r5, [sp, #28]
 801d956:	9505      	str	r5, [sp, #20]
 801d958:	2322      	movs	r3, #34	; 0x22
 801d95a:	f04f 0a00 	mov.w	sl, #0
 801d95e:	f04f 0b00 	mov.w	fp, #0
 801d962:	6023      	str	r3, [r4, #0]
 801d964:	e786      	b.n	801d874 <_strtod_l+0x49c>
 801d966:	bf00      	nop
 801d968:	08022d65 	.word	0x08022d65
 801d96c:	08022da0 	.word	0x08022da0
 801d970:	08022d5d 	.word	0x08022d5d
 801d974:	08022ee4 	.word	0x08022ee4
 801d978:	08023190 	.word	0x08023190
 801d97c:	08023070 	.word	0x08023070
 801d980:	08023048 	.word	0x08023048
 801d984:	7ff00000 	.word	0x7ff00000
 801d988:	7ca00000 	.word	0x7ca00000
 801d98c:	7fefffff 	.word	0x7fefffff
 801d990:	f018 0310 	ands.w	r3, r8, #16
 801d994:	bf18      	it	ne
 801d996:	236a      	movne	r3, #106	; 0x6a
 801d998:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801dd48 <_strtod_l+0x970>
 801d99c:	9304      	str	r3, [sp, #16]
 801d99e:	4650      	mov	r0, sl
 801d9a0:	4659      	mov	r1, fp
 801d9a2:	2300      	movs	r3, #0
 801d9a4:	f018 0f01 	tst.w	r8, #1
 801d9a8:	d004      	beq.n	801d9b4 <_strtod_l+0x5dc>
 801d9aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 801d9ae:	f7e2 fe5b 	bl	8000668 <__aeabi_dmul>
 801d9b2:	2301      	movs	r3, #1
 801d9b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801d9b8:	f109 0908 	add.w	r9, r9, #8
 801d9bc:	d1f2      	bne.n	801d9a4 <_strtod_l+0x5cc>
 801d9be:	b10b      	cbz	r3, 801d9c4 <_strtod_l+0x5ec>
 801d9c0:	4682      	mov	sl, r0
 801d9c2:	468b      	mov	fp, r1
 801d9c4:	9b04      	ldr	r3, [sp, #16]
 801d9c6:	b1c3      	cbz	r3, 801d9fa <_strtod_l+0x622>
 801d9c8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801d9cc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801d9d0:	2b00      	cmp	r3, #0
 801d9d2:	4659      	mov	r1, fp
 801d9d4:	dd11      	ble.n	801d9fa <_strtod_l+0x622>
 801d9d6:	2b1f      	cmp	r3, #31
 801d9d8:	f340 8124 	ble.w	801dc24 <_strtod_l+0x84c>
 801d9dc:	2b34      	cmp	r3, #52	; 0x34
 801d9de:	bfde      	ittt	le
 801d9e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801d9e4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 801d9e8:	fa03 f202 	lslle.w	r2, r3, r2
 801d9ec:	f04f 0a00 	mov.w	sl, #0
 801d9f0:	bfcc      	ite	gt
 801d9f2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801d9f6:	ea02 0b01 	andle.w	fp, r2, r1
 801d9fa:	2200      	movs	r2, #0
 801d9fc:	2300      	movs	r3, #0
 801d9fe:	4650      	mov	r0, sl
 801da00:	4659      	mov	r1, fp
 801da02:	f7e3 f899 	bl	8000b38 <__aeabi_dcmpeq>
 801da06:	2800      	cmp	r0, #0
 801da08:	d1a2      	bne.n	801d950 <_strtod_l+0x578>
 801da0a:	9b07      	ldr	r3, [sp, #28]
 801da0c:	9300      	str	r3, [sp, #0]
 801da0e:	9908      	ldr	r1, [sp, #32]
 801da10:	462b      	mov	r3, r5
 801da12:	463a      	mov	r2, r7
 801da14:	4620      	mov	r0, r4
 801da16:	f001 febb 	bl	801f790 <__s2b>
 801da1a:	9007      	str	r0, [sp, #28]
 801da1c:	2800      	cmp	r0, #0
 801da1e:	f43f af1f 	beq.w	801d860 <_strtod_l+0x488>
 801da22:	9b05      	ldr	r3, [sp, #20]
 801da24:	1b9e      	subs	r6, r3, r6
 801da26:	9b06      	ldr	r3, [sp, #24]
 801da28:	2b00      	cmp	r3, #0
 801da2a:	bfb4      	ite	lt
 801da2c:	4633      	movlt	r3, r6
 801da2e:	2300      	movge	r3, #0
 801da30:	930c      	str	r3, [sp, #48]	; 0x30
 801da32:	9b06      	ldr	r3, [sp, #24]
 801da34:	2500      	movs	r5, #0
 801da36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801da3a:	9312      	str	r3, [sp, #72]	; 0x48
 801da3c:	462e      	mov	r6, r5
 801da3e:	9b07      	ldr	r3, [sp, #28]
 801da40:	4620      	mov	r0, r4
 801da42:	6859      	ldr	r1, [r3, #4]
 801da44:	f001 fdfc 	bl	801f640 <_Balloc>
 801da48:	9005      	str	r0, [sp, #20]
 801da4a:	2800      	cmp	r0, #0
 801da4c:	f43f af0c 	beq.w	801d868 <_strtod_l+0x490>
 801da50:	9b07      	ldr	r3, [sp, #28]
 801da52:	691a      	ldr	r2, [r3, #16]
 801da54:	3202      	adds	r2, #2
 801da56:	f103 010c 	add.w	r1, r3, #12
 801da5a:	0092      	lsls	r2, r2, #2
 801da5c:	300c      	adds	r0, #12
 801da5e:	f7fe fe9d 	bl	801c79c <memcpy>
 801da62:	ec4b ab10 	vmov	d0, sl, fp
 801da66:	aa1a      	add	r2, sp, #104	; 0x68
 801da68:	a919      	add	r1, sp, #100	; 0x64
 801da6a:	4620      	mov	r0, r4
 801da6c:	f002 f9d6 	bl	801fe1c <__d2b>
 801da70:	ec4b ab18 	vmov	d8, sl, fp
 801da74:	9018      	str	r0, [sp, #96]	; 0x60
 801da76:	2800      	cmp	r0, #0
 801da78:	f43f aef6 	beq.w	801d868 <_strtod_l+0x490>
 801da7c:	2101      	movs	r1, #1
 801da7e:	4620      	mov	r0, r4
 801da80:	f001 ff20 	bl	801f8c4 <__i2b>
 801da84:	4606      	mov	r6, r0
 801da86:	2800      	cmp	r0, #0
 801da88:	f43f aeee 	beq.w	801d868 <_strtod_l+0x490>
 801da8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801da8e:	9904      	ldr	r1, [sp, #16]
 801da90:	2b00      	cmp	r3, #0
 801da92:	bfab      	itete	ge
 801da94:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801da96:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801da98:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801da9a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801da9e:	bfac      	ite	ge
 801daa0:	eb03 0902 	addge.w	r9, r3, r2
 801daa4:	1ad7      	sublt	r7, r2, r3
 801daa6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801daa8:	eba3 0801 	sub.w	r8, r3, r1
 801daac:	4490      	add	r8, r2
 801daae:	4ba1      	ldr	r3, [pc, #644]	; (801dd34 <_strtod_l+0x95c>)
 801dab0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801dab4:	4598      	cmp	r8, r3
 801dab6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801daba:	f280 80c7 	bge.w	801dc4c <_strtod_l+0x874>
 801dabe:	eba3 0308 	sub.w	r3, r3, r8
 801dac2:	2b1f      	cmp	r3, #31
 801dac4:	eba2 0203 	sub.w	r2, r2, r3
 801dac8:	f04f 0101 	mov.w	r1, #1
 801dacc:	f300 80b1 	bgt.w	801dc32 <_strtod_l+0x85a>
 801dad0:	fa01 f303 	lsl.w	r3, r1, r3
 801dad4:	930d      	str	r3, [sp, #52]	; 0x34
 801dad6:	2300      	movs	r3, #0
 801dad8:	9308      	str	r3, [sp, #32]
 801dada:	eb09 0802 	add.w	r8, r9, r2
 801dade:	9b04      	ldr	r3, [sp, #16]
 801dae0:	45c1      	cmp	r9, r8
 801dae2:	4417      	add	r7, r2
 801dae4:	441f      	add	r7, r3
 801dae6:	464b      	mov	r3, r9
 801dae8:	bfa8      	it	ge
 801daea:	4643      	movge	r3, r8
 801daec:	42bb      	cmp	r3, r7
 801daee:	bfa8      	it	ge
 801daf0:	463b      	movge	r3, r7
 801daf2:	2b00      	cmp	r3, #0
 801daf4:	bfc2      	ittt	gt
 801daf6:	eba8 0803 	subgt.w	r8, r8, r3
 801dafa:	1aff      	subgt	r7, r7, r3
 801dafc:	eba9 0903 	subgt.w	r9, r9, r3
 801db00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801db02:	2b00      	cmp	r3, #0
 801db04:	dd17      	ble.n	801db36 <_strtod_l+0x75e>
 801db06:	4631      	mov	r1, r6
 801db08:	461a      	mov	r2, r3
 801db0a:	4620      	mov	r0, r4
 801db0c:	f001 ff9a 	bl	801fa44 <__pow5mult>
 801db10:	4606      	mov	r6, r0
 801db12:	2800      	cmp	r0, #0
 801db14:	f43f aea8 	beq.w	801d868 <_strtod_l+0x490>
 801db18:	4601      	mov	r1, r0
 801db1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801db1c:	4620      	mov	r0, r4
 801db1e:	f001 fee7 	bl	801f8f0 <__multiply>
 801db22:	900b      	str	r0, [sp, #44]	; 0x2c
 801db24:	2800      	cmp	r0, #0
 801db26:	f43f ae9f 	beq.w	801d868 <_strtod_l+0x490>
 801db2a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801db2c:	4620      	mov	r0, r4
 801db2e:	f001 fdc7 	bl	801f6c0 <_Bfree>
 801db32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801db34:	9318      	str	r3, [sp, #96]	; 0x60
 801db36:	f1b8 0f00 	cmp.w	r8, #0
 801db3a:	f300 808c 	bgt.w	801dc56 <_strtod_l+0x87e>
 801db3e:	9b06      	ldr	r3, [sp, #24]
 801db40:	2b00      	cmp	r3, #0
 801db42:	dd08      	ble.n	801db56 <_strtod_l+0x77e>
 801db44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801db46:	9905      	ldr	r1, [sp, #20]
 801db48:	4620      	mov	r0, r4
 801db4a:	f001 ff7b 	bl	801fa44 <__pow5mult>
 801db4e:	9005      	str	r0, [sp, #20]
 801db50:	2800      	cmp	r0, #0
 801db52:	f43f ae89 	beq.w	801d868 <_strtod_l+0x490>
 801db56:	2f00      	cmp	r7, #0
 801db58:	dd08      	ble.n	801db6c <_strtod_l+0x794>
 801db5a:	9905      	ldr	r1, [sp, #20]
 801db5c:	463a      	mov	r2, r7
 801db5e:	4620      	mov	r0, r4
 801db60:	f001 ffca 	bl	801faf8 <__lshift>
 801db64:	9005      	str	r0, [sp, #20]
 801db66:	2800      	cmp	r0, #0
 801db68:	f43f ae7e 	beq.w	801d868 <_strtod_l+0x490>
 801db6c:	f1b9 0f00 	cmp.w	r9, #0
 801db70:	dd08      	ble.n	801db84 <_strtod_l+0x7ac>
 801db72:	4631      	mov	r1, r6
 801db74:	464a      	mov	r2, r9
 801db76:	4620      	mov	r0, r4
 801db78:	f001 ffbe 	bl	801faf8 <__lshift>
 801db7c:	4606      	mov	r6, r0
 801db7e:	2800      	cmp	r0, #0
 801db80:	f43f ae72 	beq.w	801d868 <_strtod_l+0x490>
 801db84:	9a05      	ldr	r2, [sp, #20]
 801db86:	9918      	ldr	r1, [sp, #96]	; 0x60
 801db88:	4620      	mov	r0, r4
 801db8a:	f002 f841 	bl	801fc10 <__mdiff>
 801db8e:	4605      	mov	r5, r0
 801db90:	2800      	cmp	r0, #0
 801db92:	f43f ae69 	beq.w	801d868 <_strtod_l+0x490>
 801db96:	68c3      	ldr	r3, [r0, #12]
 801db98:	930b      	str	r3, [sp, #44]	; 0x2c
 801db9a:	2300      	movs	r3, #0
 801db9c:	60c3      	str	r3, [r0, #12]
 801db9e:	4631      	mov	r1, r6
 801dba0:	f002 f81a 	bl	801fbd8 <__mcmp>
 801dba4:	2800      	cmp	r0, #0
 801dba6:	da60      	bge.n	801dc6a <_strtod_l+0x892>
 801dba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dbaa:	ea53 030a 	orrs.w	r3, r3, sl
 801dbae:	f040 8082 	bne.w	801dcb6 <_strtod_l+0x8de>
 801dbb2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801dbb6:	2b00      	cmp	r3, #0
 801dbb8:	d17d      	bne.n	801dcb6 <_strtod_l+0x8de>
 801dbba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801dbbe:	0d1b      	lsrs	r3, r3, #20
 801dbc0:	051b      	lsls	r3, r3, #20
 801dbc2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801dbc6:	d976      	bls.n	801dcb6 <_strtod_l+0x8de>
 801dbc8:	696b      	ldr	r3, [r5, #20]
 801dbca:	b913      	cbnz	r3, 801dbd2 <_strtod_l+0x7fa>
 801dbcc:	692b      	ldr	r3, [r5, #16]
 801dbce:	2b01      	cmp	r3, #1
 801dbd0:	dd71      	ble.n	801dcb6 <_strtod_l+0x8de>
 801dbd2:	4629      	mov	r1, r5
 801dbd4:	2201      	movs	r2, #1
 801dbd6:	4620      	mov	r0, r4
 801dbd8:	f001 ff8e 	bl	801faf8 <__lshift>
 801dbdc:	4631      	mov	r1, r6
 801dbde:	4605      	mov	r5, r0
 801dbe0:	f001 fffa 	bl	801fbd8 <__mcmp>
 801dbe4:	2800      	cmp	r0, #0
 801dbe6:	dd66      	ble.n	801dcb6 <_strtod_l+0x8de>
 801dbe8:	9904      	ldr	r1, [sp, #16]
 801dbea:	4a53      	ldr	r2, [pc, #332]	; (801dd38 <_strtod_l+0x960>)
 801dbec:	465b      	mov	r3, fp
 801dbee:	2900      	cmp	r1, #0
 801dbf0:	f000 8081 	beq.w	801dcf6 <_strtod_l+0x91e>
 801dbf4:	ea02 010b 	and.w	r1, r2, fp
 801dbf8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801dbfc:	dc7b      	bgt.n	801dcf6 <_strtod_l+0x91e>
 801dbfe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801dc02:	f77f aea9 	ble.w	801d958 <_strtod_l+0x580>
 801dc06:	4b4d      	ldr	r3, [pc, #308]	; (801dd3c <_strtod_l+0x964>)
 801dc08:	4650      	mov	r0, sl
 801dc0a:	4659      	mov	r1, fp
 801dc0c:	2200      	movs	r2, #0
 801dc0e:	f7e2 fd2b 	bl	8000668 <__aeabi_dmul>
 801dc12:	460b      	mov	r3, r1
 801dc14:	4303      	orrs	r3, r0
 801dc16:	bf08      	it	eq
 801dc18:	2322      	moveq	r3, #34	; 0x22
 801dc1a:	4682      	mov	sl, r0
 801dc1c:	468b      	mov	fp, r1
 801dc1e:	bf08      	it	eq
 801dc20:	6023      	streq	r3, [r4, #0]
 801dc22:	e62b      	b.n	801d87c <_strtod_l+0x4a4>
 801dc24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801dc28:	fa02 f303 	lsl.w	r3, r2, r3
 801dc2c:	ea03 0a0a 	and.w	sl, r3, sl
 801dc30:	e6e3      	b.n	801d9fa <_strtod_l+0x622>
 801dc32:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801dc36:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801dc3a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801dc3e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801dc42:	fa01 f308 	lsl.w	r3, r1, r8
 801dc46:	9308      	str	r3, [sp, #32]
 801dc48:	910d      	str	r1, [sp, #52]	; 0x34
 801dc4a:	e746      	b.n	801dada <_strtod_l+0x702>
 801dc4c:	2300      	movs	r3, #0
 801dc4e:	9308      	str	r3, [sp, #32]
 801dc50:	2301      	movs	r3, #1
 801dc52:	930d      	str	r3, [sp, #52]	; 0x34
 801dc54:	e741      	b.n	801dada <_strtod_l+0x702>
 801dc56:	9918      	ldr	r1, [sp, #96]	; 0x60
 801dc58:	4642      	mov	r2, r8
 801dc5a:	4620      	mov	r0, r4
 801dc5c:	f001 ff4c 	bl	801faf8 <__lshift>
 801dc60:	9018      	str	r0, [sp, #96]	; 0x60
 801dc62:	2800      	cmp	r0, #0
 801dc64:	f47f af6b 	bne.w	801db3e <_strtod_l+0x766>
 801dc68:	e5fe      	b.n	801d868 <_strtod_l+0x490>
 801dc6a:	465f      	mov	r7, fp
 801dc6c:	d16e      	bne.n	801dd4c <_strtod_l+0x974>
 801dc6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801dc70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801dc74:	b342      	cbz	r2, 801dcc8 <_strtod_l+0x8f0>
 801dc76:	4a32      	ldr	r2, [pc, #200]	; (801dd40 <_strtod_l+0x968>)
 801dc78:	4293      	cmp	r3, r2
 801dc7a:	d128      	bne.n	801dcce <_strtod_l+0x8f6>
 801dc7c:	9b04      	ldr	r3, [sp, #16]
 801dc7e:	4651      	mov	r1, sl
 801dc80:	b1eb      	cbz	r3, 801dcbe <_strtod_l+0x8e6>
 801dc82:	4b2d      	ldr	r3, [pc, #180]	; (801dd38 <_strtod_l+0x960>)
 801dc84:	403b      	ands	r3, r7
 801dc86:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801dc8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801dc8e:	d819      	bhi.n	801dcc4 <_strtod_l+0x8ec>
 801dc90:	0d1b      	lsrs	r3, r3, #20
 801dc92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801dc96:	fa02 f303 	lsl.w	r3, r2, r3
 801dc9a:	4299      	cmp	r1, r3
 801dc9c:	d117      	bne.n	801dcce <_strtod_l+0x8f6>
 801dc9e:	4b29      	ldr	r3, [pc, #164]	; (801dd44 <_strtod_l+0x96c>)
 801dca0:	429f      	cmp	r7, r3
 801dca2:	d102      	bne.n	801dcaa <_strtod_l+0x8d2>
 801dca4:	3101      	adds	r1, #1
 801dca6:	f43f addf 	beq.w	801d868 <_strtod_l+0x490>
 801dcaa:	4b23      	ldr	r3, [pc, #140]	; (801dd38 <_strtod_l+0x960>)
 801dcac:	403b      	ands	r3, r7
 801dcae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801dcb2:	f04f 0a00 	mov.w	sl, #0
 801dcb6:	9b04      	ldr	r3, [sp, #16]
 801dcb8:	2b00      	cmp	r3, #0
 801dcba:	d1a4      	bne.n	801dc06 <_strtod_l+0x82e>
 801dcbc:	e5de      	b.n	801d87c <_strtod_l+0x4a4>
 801dcbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dcc2:	e7ea      	b.n	801dc9a <_strtod_l+0x8c2>
 801dcc4:	4613      	mov	r3, r2
 801dcc6:	e7e8      	b.n	801dc9a <_strtod_l+0x8c2>
 801dcc8:	ea53 030a 	orrs.w	r3, r3, sl
 801dccc:	d08c      	beq.n	801dbe8 <_strtod_l+0x810>
 801dcce:	9b08      	ldr	r3, [sp, #32]
 801dcd0:	b1db      	cbz	r3, 801dd0a <_strtod_l+0x932>
 801dcd2:	423b      	tst	r3, r7
 801dcd4:	d0ef      	beq.n	801dcb6 <_strtod_l+0x8de>
 801dcd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dcd8:	9a04      	ldr	r2, [sp, #16]
 801dcda:	4650      	mov	r0, sl
 801dcdc:	4659      	mov	r1, fp
 801dcde:	b1c3      	cbz	r3, 801dd12 <_strtod_l+0x93a>
 801dce0:	f7ff fb5b 	bl	801d39a <sulp>
 801dce4:	4602      	mov	r2, r0
 801dce6:	460b      	mov	r3, r1
 801dce8:	ec51 0b18 	vmov	r0, r1, d8
 801dcec:	f7e2 fb06 	bl	80002fc <__adddf3>
 801dcf0:	4682      	mov	sl, r0
 801dcf2:	468b      	mov	fp, r1
 801dcf4:	e7df      	b.n	801dcb6 <_strtod_l+0x8de>
 801dcf6:	4013      	ands	r3, r2
 801dcf8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801dcfc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801dd00:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801dd04:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801dd08:	e7d5      	b.n	801dcb6 <_strtod_l+0x8de>
 801dd0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dd0c:	ea13 0f0a 	tst.w	r3, sl
 801dd10:	e7e0      	b.n	801dcd4 <_strtod_l+0x8fc>
 801dd12:	f7ff fb42 	bl	801d39a <sulp>
 801dd16:	4602      	mov	r2, r0
 801dd18:	460b      	mov	r3, r1
 801dd1a:	ec51 0b18 	vmov	r0, r1, d8
 801dd1e:	f7e2 faeb 	bl	80002f8 <__aeabi_dsub>
 801dd22:	2200      	movs	r2, #0
 801dd24:	2300      	movs	r3, #0
 801dd26:	4682      	mov	sl, r0
 801dd28:	468b      	mov	fp, r1
 801dd2a:	f7e2 ff05 	bl	8000b38 <__aeabi_dcmpeq>
 801dd2e:	2800      	cmp	r0, #0
 801dd30:	d0c1      	beq.n	801dcb6 <_strtod_l+0x8de>
 801dd32:	e611      	b.n	801d958 <_strtod_l+0x580>
 801dd34:	fffffc02 	.word	0xfffffc02
 801dd38:	7ff00000 	.word	0x7ff00000
 801dd3c:	39500000 	.word	0x39500000
 801dd40:	000fffff 	.word	0x000fffff
 801dd44:	7fefffff 	.word	0x7fefffff
 801dd48:	08022db8 	.word	0x08022db8
 801dd4c:	4631      	mov	r1, r6
 801dd4e:	4628      	mov	r0, r5
 801dd50:	f002 f8c0 	bl	801fed4 <__ratio>
 801dd54:	ec59 8b10 	vmov	r8, r9, d0
 801dd58:	ee10 0a10 	vmov	r0, s0
 801dd5c:	2200      	movs	r2, #0
 801dd5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801dd62:	4649      	mov	r1, r9
 801dd64:	f7e2 fefc 	bl	8000b60 <__aeabi_dcmple>
 801dd68:	2800      	cmp	r0, #0
 801dd6a:	d07a      	beq.n	801de62 <_strtod_l+0xa8a>
 801dd6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dd6e:	2b00      	cmp	r3, #0
 801dd70:	d04a      	beq.n	801de08 <_strtod_l+0xa30>
 801dd72:	4b95      	ldr	r3, [pc, #596]	; (801dfc8 <_strtod_l+0xbf0>)
 801dd74:	2200      	movs	r2, #0
 801dd76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801dd7a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801dfc8 <_strtod_l+0xbf0>
 801dd7e:	f04f 0800 	mov.w	r8, #0
 801dd82:	4b92      	ldr	r3, [pc, #584]	; (801dfcc <_strtod_l+0xbf4>)
 801dd84:	403b      	ands	r3, r7
 801dd86:	930d      	str	r3, [sp, #52]	; 0x34
 801dd88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dd8a:	4b91      	ldr	r3, [pc, #580]	; (801dfd0 <_strtod_l+0xbf8>)
 801dd8c:	429a      	cmp	r2, r3
 801dd8e:	f040 80b0 	bne.w	801def2 <_strtod_l+0xb1a>
 801dd92:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801dd96:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801dd9a:	ec4b ab10 	vmov	d0, sl, fp
 801dd9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801dda2:	f001 ffbf 	bl	801fd24 <__ulp>
 801dda6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ddaa:	ec53 2b10 	vmov	r2, r3, d0
 801ddae:	f7e2 fc5b 	bl	8000668 <__aeabi_dmul>
 801ddb2:	4652      	mov	r2, sl
 801ddb4:	465b      	mov	r3, fp
 801ddb6:	f7e2 faa1 	bl	80002fc <__adddf3>
 801ddba:	460b      	mov	r3, r1
 801ddbc:	4983      	ldr	r1, [pc, #524]	; (801dfcc <_strtod_l+0xbf4>)
 801ddbe:	4a85      	ldr	r2, [pc, #532]	; (801dfd4 <_strtod_l+0xbfc>)
 801ddc0:	4019      	ands	r1, r3
 801ddc2:	4291      	cmp	r1, r2
 801ddc4:	4682      	mov	sl, r0
 801ddc6:	d960      	bls.n	801de8a <_strtod_l+0xab2>
 801ddc8:	ee18 3a90 	vmov	r3, s17
 801ddcc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801ddd0:	4293      	cmp	r3, r2
 801ddd2:	d104      	bne.n	801ddde <_strtod_l+0xa06>
 801ddd4:	ee18 3a10 	vmov	r3, s16
 801ddd8:	3301      	adds	r3, #1
 801ddda:	f43f ad45 	beq.w	801d868 <_strtod_l+0x490>
 801ddde:	f8df b200 	ldr.w	fp, [pc, #512]	; 801dfe0 <_strtod_l+0xc08>
 801dde2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801dde6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801dde8:	4620      	mov	r0, r4
 801ddea:	f001 fc69 	bl	801f6c0 <_Bfree>
 801ddee:	9905      	ldr	r1, [sp, #20]
 801ddf0:	4620      	mov	r0, r4
 801ddf2:	f001 fc65 	bl	801f6c0 <_Bfree>
 801ddf6:	4631      	mov	r1, r6
 801ddf8:	4620      	mov	r0, r4
 801ddfa:	f001 fc61 	bl	801f6c0 <_Bfree>
 801ddfe:	4629      	mov	r1, r5
 801de00:	4620      	mov	r0, r4
 801de02:	f001 fc5d 	bl	801f6c0 <_Bfree>
 801de06:	e61a      	b.n	801da3e <_strtod_l+0x666>
 801de08:	f1ba 0f00 	cmp.w	sl, #0
 801de0c:	d11b      	bne.n	801de46 <_strtod_l+0xa6e>
 801de0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801de12:	b9f3      	cbnz	r3, 801de52 <_strtod_l+0xa7a>
 801de14:	4b6c      	ldr	r3, [pc, #432]	; (801dfc8 <_strtod_l+0xbf0>)
 801de16:	2200      	movs	r2, #0
 801de18:	4640      	mov	r0, r8
 801de1a:	4649      	mov	r1, r9
 801de1c:	f7e2 fe96 	bl	8000b4c <__aeabi_dcmplt>
 801de20:	b9d0      	cbnz	r0, 801de58 <_strtod_l+0xa80>
 801de22:	4640      	mov	r0, r8
 801de24:	4649      	mov	r1, r9
 801de26:	4b6c      	ldr	r3, [pc, #432]	; (801dfd8 <_strtod_l+0xc00>)
 801de28:	2200      	movs	r2, #0
 801de2a:	f7e2 fc1d 	bl	8000668 <__aeabi_dmul>
 801de2e:	4680      	mov	r8, r0
 801de30:	4689      	mov	r9, r1
 801de32:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801de36:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801de3a:	9315      	str	r3, [sp, #84]	; 0x54
 801de3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801de40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801de44:	e79d      	b.n	801dd82 <_strtod_l+0x9aa>
 801de46:	f1ba 0f01 	cmp.w	sl, #1
 801de4a:	d102      	bne.n	801de52 <_strtod_l+0xa7a>
 801de4c:	2f00      	cmp	r7, #0
 801de4e:	f43f ad83 	beq.w	801d958 <_strtod_l+0x580>
 801de52:	4b62      	ldr	r3, [pc, #392]	; (801dfdc <_strtod_l+0xc04>)
 801de54:	2200      	movs	r2, #0
 801de56:	e78e      	b.n	801dd76 <_strtod_l+0x99e>
 801de58:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801dfd8 <_strtod_l+0xc00>
 801de5c:	f04f 0800 	mov.w	r8, #0
 801de60:	e7e7      	b.n	801de32 <_strtod_l+0xa5a>
 801de62:	4b5d      	ldr	r3, [pc, #372]	; (801dfd8 <_strtod_l+0xc00>)
 801de64:	4640      	mov	r0, r8
 801de66:	4649      	mov	r1, r9
 801de68:	2200      	movs	r2, #0
 801de6a:	f7e2 fbfd 	bl	8000668 <__aeabi_dmul>
 801de6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801de70:	4680      	mov	r8, r0
 801de72:	4689      	mov	r9, r1
 801de74:	b933      	cbnz	r3, 801de84 <_strtod_l+0xaac>
 801de76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801de7a:	900e      	str	r0, [sp, #56]	; 0x38
 801de7c:	930f      	str	r3, [sp, #60]	; 0x3c
 801de7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801de82:	e7dd      	b.n	801de40 <_strtod_l+0xa68>
 801de84:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801de88:	e7f9      	b.n	801de7e <_strtod_l+0xaa6>
 801de8a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801de8e:	9b04      	ldr	r3, [sp, #16]
 801de90:	2b00      	cmp	r3, #0
 801de92:	d1a8      	bne.n	801dde6 <_strtod_l+0xa0e>
 801de94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801de98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801de9a:	0d1b      	lsrs	r3, r3, #20
 801de9c:	051b      	lsls	r3, r3, #20
 801de9e:	429a      	cmp	r2, r3
 801dea0:	d1a1      	bne.n	801dde6 <_strtod_l+0xa0e>
 801dea2:	4640      	mov	r0, r8
 801dea4:	4649      	mov	r1, r9
 801dea6:	f7e2 ff3f 	bl	8000d28 <__aeabi_d2lz>
 801deaa:	f7e2 fbaf 	bl	800060c <__aeabi_l2d>
 801deae:	4602      	mov	r2, r0
 801deb0:	460b      	mov	r3, r1
 801deb2:	4640      	mov	r0, r8
 801deb4:	4649      	mov	r1, r9
 801deb6:	f7e2 fa1f 	bl	80002f8 <__aeabi_dsub>
 801deba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801debc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801dec0:	ea43 030a 	orr.w	r3, r3, sl
 801dec4:	4313      	orrs	r3, r2
 801dec6:	4680      	mov	r8, r0
 801dec8:	4689      	mov	r9, r1
 801deca:	d055      	beq.n	801df78 <_strtod_l+0xba0>
 801decc:	a336      	add	r3, pc, #216	; (adr r3, 801dfa8 <_strtod_l+0xbd0>)
 801dece:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ded2:	f7e2 fe3b 	bl	8000b4c <__aeabi_dcmplt>
 801ded6:	2800      	cmp	r0, #0
 801ded8:	f47f acd0 	bne.w	801d87c <_strtod_l+0x4a4>
 801dedc:	a334      	add	r3, pc, #208	; (adr r3, 801dfb0 <_strtod_l+0xbd8>)
 801dede:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dee2:	4640      	mov	r0, r8
 801dee4:	4649      	mov	r1, r9
 801dee6:	f7e2 fe4f 	bl	8000b88 <__aeabi_dcmpgt>
 801deea:	2800      	cmp	r0, #0
 801deec:	f43f af7b 	beq.w	801dde6 <_strtod_l+0xa0e>
 801def0:	e4c4      	b.n	801d87c <_strtod_l+0x4a4>
 801def2:	9b04      	ldr	r3, [sp, #16]
 801def4:	b333      	cbz	r3, 801df44 <_strtod_l+0xb6c>
 801def6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801def8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801defc:	d822      	bhi.n	801df44 <_strtod_l+0xb6c>
 801defe:	a32e      	add	r3, pc, #184	; (adr r3, 801dfb8 <_strtod_l+0xbe0>)
 801df00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df04:	4640      	mov	r0, r8
 801df06:	4649      	mov	r1, r9
 801df08:	f7e2 fe2a 	bl	8000b60 <__aeabi_dcmple>
 801df0c:	b1a0      	cbz	r0, 801df38 <_strtod_l+0xb60>
 801df0e:	4649      	mov	r1, r9
 801df10:	4640      	mov	r0, r8
 801df12:	f7e2 fe81 	bl	8000c18 <__aeabi_d2uiz>
 801df16:	2801      	cmp	r0, #1
 801df18:	bf38      	it	cc
 801df1a:	2001      	movcc	r0, #1
 801df1c:	f7e2 fb2a 	bl	8000574 <__aeabi_ui2d>
 801df20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801df22:	4680      	mov	r8, r0
 801df24:	4689      	mov	r9, r1
 801df26:	bb23      	cbnz	r3, 801df72 <_strtod_l+0xb9a>
 801df28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801df2c:	9010      	str	r0, [sp, #64]	; 0x40
 801df2e:	9311      	str	r3, [sp, #68]	; 0x44
 801df30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801df34:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801df38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801df3c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801df40:	1a9b      	subs	r3, r3, r2
 801df42:	9309      	str	r3, [sp, #36]	; 0x24
 801df44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801df48:	eeb0 0a48 	vmov.f32	s0, s16
 801df4c:	eef0 0a68 	vmov.f32	s1, s17
 801df50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801df54:	f001 fee6 	bl	801fd24 <__ulp>
 801df58:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801df5c:	ec53 2b10 	vmov	r2, r3, d0
 801df60:	f7e2 fb82 	bl	8000668 <__aeabi_dmul>
 801df64:	ec53 2b18 	vmov	r2, r3, d8
 801df68:	f7e2 f9c8 	bl	80002fc <__adddf3>
 801df6c:	4682      	mov	sl, r0
 801df6e:	468b      	mov	fp, r1
 801df70:	e78d      	b.n	801de8e <_strtod_l+0xab6>
 801df72:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801df76:	e7db      	b.n	801df30 <_strtod_l+0xb58>
 801df78:	a311      	add	r3, pc, #68	; (adr r3, 801dfc0 <_strtod_l+0xbe8>)
 801df7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df7e:	f7e2 fde5 	bl	8000b4c <__aeabi_dcmplt>
 801df82:	e7b2      	b.n	801deea <_strtod_l+0xb12>
 801df84:	2300      	movs	r3, #0
 801df86:	930a      	str	r3, [sp, #40]	; 0x28
 801df88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801df8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801df8c:	6013      	str	r3, [r2, #0]
 801df8e:	f7ff ba6b 	b.w	801d468 <_strtod_l+0x90>
 801df92:	2a65      	cmp	r2, #101	; 0x65
 801df94:	f43f ab5f 	beq.w	801d656 <_strtod_l+0x27e>
 801df98:	2a45      	cmp	r2, #69	; 0x45
 801df9a:	f43f ab5c 	beq.w	801d656 <_strtod_l+0x27e>
 801df9e:	2301      	movs	r3, #1
 801dfa0:	f7ff bb94 	b.w	801d6cc <_strtod_l+0x2f4>
 801dfa4:	f3af 8000 	nop.w
 801dfa8:	94a03595 	.word	0x94a03595
 801dfac:	3fdfffff 	.word	0x3fdfffff
 801dfb0:	35afe535 	.word	0x35afe535
 801dfb4:	3fe00000 	.word	0x3fe00000
 801dfb8:	ffc00000 	.word	0xffc00000
 801dfbc:	41dfffff 	.word	0x41dfffff
 801dfc0:	94a03595 	.word	0x94a03595
 801dfc4:	3fcfffff 	.word	0x3fcfffff
 801dfc8:	3ff00000 	.word	0x3ff00000
 801dfcc:	7ff00000 	.word	0x7ff00000
 801dfd0:	7fe00000 	.word	0x7fe00000
 801dfd4:	7c9fffff 	.word	0x7c9fffff
 801dfd8:	3fe00000 	.word	0x3fe00000
 801dfdc:	bff00000 	.word	0xbff00000
 801dfe0:	7fefffff 	.word	0x7fefffff

0801dfe4 <strtof>:
 801dfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dfe8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 801e098 <strtof+0xb4>
 801dfec:	4b26      	ldr	r3, [pc, #152]	; (801e088 <strtof+0xa4>)
 801dfee:	460a      	mov	r2, r1
 801dff0:	ed2d 8b02 	vpush	{d8}
 801dff4:	4601      	mov	r1, r0
 801dff6:	f8d8 0000 	ldr.w	r0, [r8]
 801dffa:	f7ff f9ed 	bl	801d3d8 <_strtod_l>
 801dffe:	ec55 4b10 	vmov	r4, r5, d0
 801e002:	ee10 2a10 	vmov	r2, s0
 801e006:	ee10 0a10 	vmov	r0, s0
 801e00a:	462b      	mov	r3, r5
 801e00c:	4629      	mov	r1, r5
 801e00e:	f7e2 fdc5 	bl	8000b9c <__aeabi_dcmpun>
 801e012:	b190      	cbz	r0, 801e03a <strtof+0x56>
 801e014:	2d00      	cmp	r5, #0
 801e016:	481d      	ldr	r0, [pc, #116]	; (801e08c <strtof+0xa8>)
 801e018:	da09      	bge.n	801e02e <strtof+0x4a>
 801e01a:	f002 f94d 	bl	80202b8 <nanf>
 801e01e:	eeb1 8a40 	vneg.f32	s16, s0
 801e022:	eeb0 0a48 	vmov.f32	s0, s16
 801e026:	ecbd 8b02 	vpop	{d8}
 801e02a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e02e:	ecbd 8b02 	vpop	{d8}
 801e032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e036:	f002 b93f 	b.w	80202b8 <nanf>
 801e03a:	4620      	mov	r0, r4
 801e03c:	4629      	mov	r1, r5
 801e03e:	f7e2 fe0b 	bl	8000c58 <__aeabi_d2f>
 801e042:	ee08 0a10 	vmov	s16, r0
 801e046:	eddf 7a12 	vldr	s15, [pc, #72]	; 801e090 <strtof+0xac>
 801e04a:	eeb0 7ac8 	vabs.f32	s14, s16
 801e04e:	eeb4 7a67 	vcmp.f32	s14, s15
 801e052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e056:	dde4      	ble.n	801e022 <strtof+0x3e>
 801e058:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 801e05c:	4b0d      	ldr	r3, [pc, #52]	; (801e094 <strtof+0xb0>)
 801e05e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e062:	4620      	mov	r0, r4
 801e064:	4639      	mov	r1, r7
 801e066:	f7e2 fd99 	bl	8000b9c <__aeabi_dcmpun>
 801e06a:	b940      	cbnz	r0, 801e07e <strtof+0x9a>
 801e06c:	4b09      	ldr	r3, [pc, #36]	; (801e094 <strtof+0xb0>)
 801e06e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e072:	4620      	mov	r0, r4
 801e074:	4639      	mov	r1, r7
 801e076:	f7e2 fd73 	bl	8000b60 <__aeabi_dcmple>
 801e07a:	2800      	cmp	r0, #0
 801e07c:	d0d1      	beq.n	801e022 <strtof+0x3e>
 801e07e:	f8d8 3000 	ldr.w	r3, [r8]
 801e082:	2222      	movs	r2, #34	; 0x22
 801e084:	601a      	str	r2, [r3, #0]
 801e086:	e7cc      	b.n	801e022 <strtof+0x3e>
 801e088:	2000040c 	.word	0x2000040c
 801e08c:	08023190 	.word	0x08023190
 801e090:	7f7fffff 	.word	0x7f7fffff
 801e094:	7fefffff 	.word	0x7fefffff
 801e098:	200003a4 	.word	0x200003a4

0801e09c <_strtol_l.constprop.0>:
 801e09c:	2b01      	cmp	r3, #1
 801e09e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e0a2:	d001      	beq.n	801e0a8 <_strtol_l.constprop.0+0xc>
 801e0a4:	2b24      	cmp	r3, #36	; 0x24
 801e0a6:	d906      	bls.n	801e0b6 <_strtol_l.constprop.0+0x1a>
 801e0a8:	f7fe fb3e 	bl	801c728 <__errno>
 801e0ac:	2316      	movs	r3, #22
 801e0ae:	6003      	str	r3, [r0, #0]
 801e0b0:	2000      	movs	r0, #0
 801e0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e0b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801e19c <_strtol_l.constprop.0+0x100>
 801e0ba:	460d      	mov	r5, r1
 801e0bc:	462e      	mov	r6, r5
 801e0be:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e0c2:	f814 700c 	ldrb.w	r7, [r4, ip]
 801e0c6:	f017 0708 	ands.w	r7, r7, #8
 801e0ca:	d1f7      	bne.n	801e0bc <_strtol_l.constprop.0+0x20>
 801e0cc:	2c2d      	cmp	r4, #45	; 0x2d
 801e0ce:	d132      	bne.n	801e136 <_strtol_l.constprop.0+0x9a>
 801e0d0:	782c      	ldrb	r4, [r5, #0]
 801e0d2:	2701      	movs	r7, #1
 801e0d4:	1cb5      	adds	r5, r6, #2
 801e0d6:	2b00      	cmp	r3, #0
 801e0d8:	d05b      	beq.n	801e192 <_strtol_l.constprop.0+0xf6>
 801e0da:	2b10      	cmp	r3, #16
 801e0dc:	d109      	bne.n	801e0f2 <_strtol_l.constprop.0+0x56>
 801e0de:	2c30      	cmp	r4, #48	; 0x30
 801e0e0:	d107      	bne.n	801e0f2 <_strtol_l.constprop.0+0x56>
 801e0e2:	782c      	ldrb	r4, [r5, #0]
 801e0e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801e0e8:	2c58      	cmp	r4, #88	; 0x58
 801e0ea:	d14d      	bne.n	801e188 <_strtol_l.constprop.0+0xec>
 801e0ec:	786c      	ldrb	r4, [r5, #1]
 801e0ee:	2310      	movs	r3, #16
 801e0f0:	3502      	adds	r5, #2
 801e0f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801e0f6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801e0fa:	f04f 0c00 	mov.w	ip, #0
 801e0fe:	fbb8 f9f3 	udiv	r9, r8, r3
 801e102:	4666      	mov	r6, ip
 801e104:	fb03 8a19 	mls	sl, r3, r9, r8
 801e108:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801e10c:	f1be 0f09 	cmp.w	lr, #9
 801e110:	d816      	bhi.n	801e140 <_strtol_l.constprop.0+0xa4>
 801e112:	4674      	mov	r4, lr
 801e114:	42a3      	cmp	r3, r4
 801e116:	dd24      	ble.n	801e162 <_strtol_l.constprop.0+0xc6>
 801e118:	f1bc 0f00 	cmp.w	ip, #0
 801e11c:	db1e      	blt.n	801e15c <_strtol_l.constprop.0+0xc0>
 801e11e:	45b1      	cmp	r9, r6
 801e120:	d31c      	bcc.n	801e15c <_strtol_l.constprop.0+0xc0>
 801e122:	d101      	bne.n	801e128 <_strtol_l.constprop.0+0x8c>
 801e124:	45a2      	cmp	sl, r4
 801e126:	db19      	blt.n	801e15c <_strtol_l.constprop.0+0xc0>
 801e128:	fb06 4603 	mla	r6, r6, r3, r4
 801e12c:	f04f 0c01 	mov.w	ip, #1
 801e130:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e134:	e7e8      	b.n	801e108 <_strtol_l.constprop.0+0x6c>
 801e136:	2c2b      	cmp	r4, #43	; 0x2b
 801e138:	bf04      	itt	eq
 801e13a:	782c      	ldrbeq	r4, [r5, #0]
 801e13c:	1cb5      	addeq	r5, r6, #2
 801e13e:	e7ca      	b.n	801e0d6 <_strtol_l.constprop.0+0x3a>
 801e140:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801e144:	f1be 0f19 	cmp.w	lr, #25
 801e148:	d801      	bhi.n	801e14e <_strtol_l.constprop.0+0xb2>
 801e14a:	3c37      	subs	r4, #55	; 0x37
 801e14c:	e7e2      	b.n	801e114 <_strtol_l.constprop.0+0x78>
 801e14e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801e152:	f1be 0f19 	cmp.w	lr, #25
 801e156:	d804      	bhi.n	801e162 <_strtol_l.constprop.0+0xc6>
 801e158:	3c57      	subs	r4, #87	; 0x57
 801e15a:	e7db      	b.n	801e114 <_strtol_l.constprop.0+0x78>
 801e15c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801e160:	e7e6      	b.n	801e130 <_strtol_l.constprop.0+0x94>
 801e162:	f1bc 0f00 	cmp.w	ip, #0
 801e166:	da05      	bge.n	801e174 <_strtol_l.constprop.0+0xd8>
 801e168:	2322      	movs	r3, #34	; 0x22
 801e16a:	6003      	str	r3, [r0, #0]
 801e16c:	4646      	mov	r6, r8
 801e16e:	b942      	cbnz	r2, 801e182 <_strtol_l.constprop.0+0xe6>
 801e170:	4630      	mov	r0, r6
 801e172:	e79e      	b.n	801e0b2 <_strtol_l.constprop.0+0x16>
 801e174:	b107      	cbz	r7, 801e178 <_strtol_l.constprop.0+0xdc>
 801e176:	4276      	negs	r6, r6
 801e178:	2a00      	cmp	r2, #0
 801e17a:	d0f9      	beq.n	801e170 <_strtol_l.constprop.0+0xd4>
 801e17c:	f1bc 0f00 	cmp.w	ip, #0
 801e180:	d000      	beq.n	801e184 <_strtol_l.constprop.0+0xe8>
 801e182:	1e69      	subs	r1, r5, #1
 801e184:	6011      	str	r1, [r2, #0]
 801e186:	e7f3      	b.n	801e170 <_strtol_l.constprop.0+0xd4>
 801e188:	2430      	movs	r4, #48	; 0x30
 801e18a:	2b00      	cmp	r3, #0
 801e18c:	d1b1      	bne.n	801e0f2 <_strtol_l.constprop.0+0x56>
 801e18e:	2308      	movs	r3, #8
 801e190:	e7af      	b.n	801e0f2 <_strtol_l.constprop.0+0x56>
 801e192:	2c30      	cmp	r4, #48	; 0x30
 801e194:	d0a5      	beq.n	801e0e2 <_strtol_l.constprop.0+0x46>
 801e196:	230a      	movs	r3, #10
 801e198:	e7ab      	b.n	801e0f2 <_strtol_l.constprop.0+0x56>
 801e19a:	bf00      	nop
 801e19c:	08022de1 	.word	0x08022de1

0801e1a0 <strtol>:
 801e1a0:	4613      	mov	r3, r2
 801e1a2:	460a      	mov	r2, r1
 801e1a4:	4601      	mov	r1, r0
 801e1a6:	4802      	ldr	r0, [pc, #8]	; (801e1b0 <strtol+0x10>)
 801e1a8:	6800      	ldr	r0, [r0, #0]
 801e1aa:	f7ff bf77 	b.w	801e09c <_strtol_l.constprop.0>
 801e1ae:	bf00      	nop
 801e1b0:	200003a4 	.word	0x200003a4

0801e1b4 <_vsniprintf_r>:
 801e1b4:	b530      	push	{r4, r5, lr}
 801e1b6:	4614      	mov	r4, r2
 801e1b8:	2c00      	cmp	r4, #0
 801e1ba:	b09b      	sub	sp, #108	; 0x6c
 801e1bc:	4605      	mov	r5, r0
 801e1be:	461a      	mov	r2, r3
 801e1c0:	da05      	bge.n	801e1ce <_vsniprintf_r+0x1a>
 801e1c2:	238b      	movs	r3, #139	; 0x8b
 801e1c4:	6003      	str	r3, [r0, #0]
 801e1c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e1ca:	b01b      	add	sp, #108	; 0x6c
 801e1cc:	bd30      	pop	{r4, r5, pc}
 801e1ce:	f44f 7302 	mov.w	r3, #520	; 0x208
 801e1d2:	f8ad 300c 	strh.w	r3, [sp, #12]
 801e1d6:	bf14      	ite	ne
 801e1d8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801e1dc:	4623      	moveq	r3, r4
 801e1de:	9302      	str	r3, [sp, #8]
 801e1e0:	9305      	str	r3, [sp, #20]
 801e1e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e1e6:	9100      	str	r1, [sp, #0]
 801e1e8:	9104      	str	r1, [sp, #16]
 801e1ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e1ee:	4669      	mov	r1, sp
 801e1f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e1f2:	f001 ff57 	bl	80200a4 <_svfiprintf_r>
 801e1f6:	1c43      	adds	r3, r0, #1
 801e1f8:	bfbc      	itt	lt
 801e1fa:	238b      	movlt	r3, #139	; 0x8b
 801e1fc:	602b      	strlt	r3, [r5, #0]
 801e1fe:	2c00      	cmp	r4, #0
 801e200:	d0e3      	beq.n	801e1ca <_vsniprintf_r+0x16>
 801e202:	9b00      	ldr	r3, [sp, #0]
 801e204:	2200      	movs	r2, #0
 801e206:	701a      	strb	r2, [r3, #0]
 801e208:	e7df      	b.n	801e1ca <_vsniprintf_r+0x16>
	...

0801e20c <vsniprintf>:
 801e20c:	b507      	push	{r0, r1, r2, lr}
 801e20e:	9300      	str	r3, [sp, #0]
 801e210:	4613      	mov	r3, r2
 801e212:	460a      	mov	r2, r1
 801e214:	4601      	mov	r1, r0
 801e216:	4803      	ldr	r0, [pc, #12]	; (801e224 <vsniprintf+0x18>)
 801e218:	6800      	ldr	r0, [r0, #0]
 801e21a:	f7ff ffcb 	bl	801e1b4 <_vsniprintf_r>
 801e21e:	b003      	add	sp, #12
 801e220:	f85d fb04 	ldr.w	pc, [sp], #4
 801e224:	200003a4 	.word	0x200003a4

0801e228 <quorem>:
 801e228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e22c:	6903      	ldr	r3, [r0, #16]
 801e22e:	690c      	ldr	r4, [r1, #16]
 801e230:	42a3      	cmp	r3, r4
 801e232:	4607      	mov	r7, r0
 801e234:	f2c0 8081 	blt.w	801e33a <quorem+0x112>
 801e238:	3c01      	subs	r4, #1
 801e23a:	f101 0814 	add.w	r8, r1, #20
 801e23e:	f100 0514 	add.w	r5, r0, #20
 801e242:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e246:	9301      	str	r3, [sp, #4]
 801e248:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e24c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e250:	3301      	adds	r3, #1
 801e252:	429a      	cmp	r2, r3
 801e254:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801e258:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e25c:	fbb2 f6f3 	udiv	r6, r2, r3
 801e260:	d331      	bcc.n	801e2c6 <quorem+0x9e>
 801e262:	f04f 0e00 	mov.w	lr, #0
 801e266:	4640      	mov	r0, r8
 801e268:	46ac      	mov	ip, r5
 801e26a:	46f2      	mov	sl, lr
 801e26c:	f850 2b04 	ldr.w	r2, [r0], #4
 801e270:	b293      	uxth	r3, r2
 801e272:	fb06 e303 	mla	r3, r6, r3, lr
 801e276:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801e27a:	b29b      	uxth	r3, r3
 801e27c:	ebaa 0303 	sub.w	r3, sl, r3
 801e280:	f8dc a000 	ldr.w	sl, [ip]
 801e284:	0c12      	lsrs	r2, r2, #16
 801e286:	fa13 f38a 	uxtah	r3, r3, sl
 801e28a:	fb06 e202 	mla	r2, r6, r2, lr
 801e28e:	9300      	str	r3, [sp, #0]
 801e290:	9b00      	ldr	r3, [sp, #0]
 801e292:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801e296:	b292      	uxth	r2, r2
 801e298:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801e29c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e2a0:	f8bd 3000 	ldrh.w	r3, [sp]
 801e2a4:	4581      	cmp	r9, r0
 801e2a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e2aa:	f84c 3b04 	str.w	r3, [ip], #4
 801e2ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801e2b2:	d2db      	bcs.n	801e26c <quorem+0x44>
 801e2b4:	f855 300b 	ldr.w	r3, [r5, fp]
 801e2b8:	b92b      	cbnz	r3, 801e2c6 <quorem+0x9e>
 801e2ba:	9b01      	ldr	r3, [sp, #4]
 801e2bc:	3b04      	subs	r3, #4
 801e2be:	429d      	cmp	r5, r3
 801e2c0:	461a      	mov	r2, r3
 801e2c2:	d32e      	bcc.n	801e322 <quorem+0xfa>
 801e2c4:	613c      	str	r4, [r7, #16]
 801e2c6:	4638      	mov	r0, r7
 801e2c8:	f001 fc86 	bl	801fbd8 <__mcmp>
 801e2cc:	2800      	cmp	r0, #0
 801e2ce:	db24      	blt.n	801e31a <quorem+0xf2>
 801e2d0:	3601      	adds	r6, #1
 801e2d2:	4628      	mov	r0, r5
 801e2d4:	f04f 0c00 	mov.w	ip, #0
 801e2d8:	f858 2b04 	ldr.w	r2, [r8], #4
 801e2dc:	f8d0 e000 	ldr.w	lr, [r0]
 801e2e0:	b293      	uxth	r3, r2
 801e2e2:	ebac 0303 	sub.w	r3, ip, r3
 801e2e6:	0c12      	lsrs	r2, r2, #16
 801e2e8:	fa13 f38e 	uxtah	r3, r3, lr
 801e2ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801e2f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e2f4:	b29b      	uxth	r3, r3
 801e2f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e2fa:	45c1      	cmp	r9, r8
 801e2fc:	f840 3b04 	str.w	r3, [r0], #4
 801e300:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e304:	d2e8      	bcs.n	801e2d8 <quorem+0xb0>
 801e306:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e30a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e30e:	b922      	cbnz	r2, 801e31a <quorem+0xf2>
 801e310:	3b04      	subs	r3, #4
 801e312:	429d      	cmp	r5, r3
 801e314:	461a      	mov	r2, r3
 801e316:	d30a      	bcc.n	801e32e <quorem+0x106>
 801e318:	613c      	str	r4, [r7, #16]
 801e31a:	4630      	mov	r0, r6
 801e31c:	b003      	add	sp, #12
 801e31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e322:	6812      	ldr	r2, [r2, #0]
 801e324:	3b04      	subs	r3, #4
 801e326:	2a00      	cmp	r2, #0
 801e328:	d1cc      	bne.n	801e2c4 <quorem+0x9c>
 801e32a:	3c01      	subs	r4, #1
 801e32c:	e7c7      	b.n	801e2be <quorem+0x96>
 801e32e:	6812      	ldr	r2, [r2, #0]
 801e330:	3b04      	subs	r3, #4
 801e332:	2a00      	cmp	r2, #0
 801e334:	d1f0      	bne.n	801e318 <quorem+0xf0>
 801e336:	3c01      	subs	r4, #1
 801e338:	e7eb      	b.n	801e312 <quorem+0xea>
 801e33a:	2000      	movs	r0, #0
 801e33c:	e7ee      	b.n	801e31c <quorem+0xf4>
	...

0801e340 <_dtoa_r>:
 801e340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e344:	ed2d 8b04 	vpush	{d8-d9}
 801e348:	ec57 6b10 	vmov	r6, r7, d0
 801e34c:	b093      	sub	sp, #76	; 0x4c
 801e34e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801e350:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801e354:	9106      	str	r1, [sp, #24]
 801e356:	ee10 aa10 	vmov	sl, s0
 801e35a:	4604      	mov	r4, r0
 801e35c:	9209      	str	r2, [sp, #36]	; 0x24
 801e35e:	930c      	str	r3, [sp, #48]	; 0x30
 801e360:	46bb      	mov	fp, r7
 801e362:	b975      	cbnz	r5, 801e382 <_dtoa_r+0x42>
 801e364:	2010      	movs	r0, #16
 801e366:	f7fe fa09 	bl	801c77c <malloc>
 801e36a:	4602      	mov	r2, r0
 801e36c:	6260      	str	r0, [r4, #36]	; 0x24
 801e36e:	b920      	cbnz	r0, 801e37a <_dtoa_r+0x3a>
 801e370:	4ba7      	ldr	r3, [pc, #668]	; (801e610 <_dtoa_r+0x2d0>)
 801e372:	21ea      	movs	r1, #234	; 0xea
 801e374:	48a7      	ldr	r0, [pc, #668]	; (801e614 <_dtoa_r+0x2d4>)
 801e376:	f001 ffc7 	bl	8020308 <__assert_func>
 801e37a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801e37e:	6005      	str	r5, [r0, #0]
 801e380:	60c5      	str	r5, [r0, #12]
 801e382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e384:	6819      	ldr	r1, [r3, #0]
 801e386:	b151      	cbz	r1, 801e39e <_dtoa_r+0x5e>
 801e388:	685a      	ldr	r2, [r3, #4]
 801e38a:	604a      	str	r2, [r1, #4]
 801e38c:	2301      	movs	r3, #1
 801e38e:	4093      	lsls	r3, r2
 801e390:	608b      	str	r3, [r1, #8]
 801e392:	4620      	mov	r0, r4
 801e394:	f001 f994 	bl	801f6c0 <_Bfree>
 801e398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e39a:	2200      	movs	r2, #0
 801e39c:	601a      	str	r2, [r3, #0]
 801e39e:	1e3b      	subs	r3, r7, #0
 801e3a0:	bfaa      	itet	ge
 801e3a2:	2300      	movge	r3, #0
 801e3a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801e3a8:	f8c8 3000 	strge.w	r3, [r8]
 801e3ac:	4b9a      	ldr	r3, [pc, #616]	; (801e618 <_dtoa_r+0x2d8>)
 801e3ae:	bfbc      	itt	lt
 801e3b0:	2201      	movlt	r2, #1
 801e3b2:	f8c8 2000 	strlt.w	r2, [r8]
 801e3b6:	ea33 030b 	bics.w	r3, r3, fp
 801e3ba:	d11b      	bne.n	801e3f4 <_dtoa_r+0xb4>
 801e3bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e3be:	f242 730f 	movw	r3, #9999	; 0x270f
 801e3c2:	6013      	str	r3, [r2, #0]
 801e3c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e3c8:	4333      	orrs	r3, r6
 801e3ca:	f000 8592 	beq.w	801eef2 <_dtoa_r+0xbb2>
 801e3ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e3d0:	b963      	cbnz	r3, 801e3ec <_dtoa_r+0xac>
 801e3d2:	4b92      	ldr	r3, [pc, #584]	; (801e61c <_dtoa_r+0x2dc>)
 801e3d4:	e022      	b.n	801e41c <_dtoa_r+0xdc>
 801e3d6:	4b92      	ldr	r3, [pc, #584]	; (801e620 <_dtoa_r+0x2e0>)
 801e3d8:	9301      	str	r3, [sp, #4]
 801e3da:	3308      	adds	r3, #8
 801e3dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e3de:	6013      	str	r3, [r2, #0]
 801e3e0:	9801      	ldr	r0, [sp, #4]
 801e3e2:	b013      	add	sp, #76	; 0x4c
 801e3e4:	ecbd 8b04 	vpop	{d8-d9}
 801e3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3ec:	4b8b      	ldr	r3, [pc, #556]	; (801e61c <_dtoa_r+0x2dc>)
 801e3ee:	9301      	str	r3, [sp, #4]
 801e3f0:	3303      	adds	r3, #3
 801e3f2:	e7f3      	b.n	801e3dc <_dtoa_r+0x9c>
 801e3f4:	2200      	movs	r2, #0
 801e3f6:	2300      	movs	r3, #0
 801e3f8:	4650      	mov	r0, sl
 801e3fa:	4659      	mov	r1, fp
 801e3fc:	f7e2 fb9c 	bl	8000b38 <__aeabi_dcmpeq>
 801e400:	ec4b ab19 	vmov	d9, sl, fp
 801e404:	4680      	mov	r8, r0
 801e406:	b158      	cbz	r0, 801e420 <_dtoa_r+0xe0>
 801e408:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e40a:	2301      	movs	r3, #1
 801e40c:	6013      	str	r3, [r2, #0]
 801e40e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e410:	2b00      	cmp	r3, #0
 801e412:	f000 856b 	beq.w	801eeec <_dtoa_r+0xbac>
 801e416:	4883      	ldr	r0, [pc, #524]	; (801e624 <_dtoa_r+0x2e4>)
 801e418:	6018      	str	r0, [r3, #0]
 801e41a:	1e43      	subs	r3, r0, #1
 801e41c:	9301      	str	r3, [sp, #4]
 801e41e:	e7df      	b.n	801e3e0 <_dtoa_r+0xa0>
 801e420:	ec4b ab10 	vmov	d0, sl, fp
 801e424:	aa10      	add	r2, sp, #64	; 0x40
 801e426:	a911      	add	r1, sp, #68	; 0x44
 801e428:	4620      	mov	r0, r4
 801e42a:	f001 fcf7 	bl	801fe1c <__d2b>
 801e42e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801e432:	ee08 0a10 	vmov	s16, r0
 801e436:	2d00      	cmp	r5, #0
 801e438:	f000 8084 	beq.w	801e544 <_dtoa_r+0x204>
 801e43c:	ee19 3a90 	vmov	r3, s19
 801e440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e444:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801e448:	4656      	mov	r6, sl
 801e44a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801e44e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801e452:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801e456:	4b74      	ldr	r3, [pc, #464]	; (801e628 <_dtoa_r+0x2e8>)
 801e458:	2200      	movs	r2, #0
 801e45a:	4630      	mov	r0, r6
 801e45c:	4639      	mov	r1, r7
 801e45e:	f7e1 ff4b 	bl	80002f8 <__aeabi_dsub>
 801e462:	a365      	add	r3, pc, #404	; (adr r3, 801e5f8 <_dtoa_r+0x2b8>)
 801e464:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e468:	f7e2 f8fe 	bl	8000668 <__aeabi_dmul>
 801e46c:	a364      	add	r3, pc, #400	; (adr r3, 801e600 <_dtoa_r+0x2c0>)
 801e46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e472:	f7e1 ff43 	bl	80002fc <__adddf3>
 801e476:	4606      	mov	r6, r0
 801e478:	4628      	mov	r0, r5
 801e47a:	460f      	mov	r7, r1
 801e47c:	f7e2 f88a 	bl	8000594 <__aeabi_i2d>
 801e480:	a361      	add	r3, pc, #388	; (adr r3, 801e608 <_dtoa_r+0x2c8>)
 801e482:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e486:	f7e2 f8ef 	bl	8000668 <__aeabi_dmul>
 801e48a:	4602      	mov	r2, r0
 801e48c:	460b      	mov	r3, r1
 801e48e:	4630      	mov	r0, r6
 801e490:	4639      	mov	r1, r7
 801e492:	f7e1 ff33 	bl	80002fc <__adddf3>
 801e496:	4606      	mov	r6, r0
 801e498:	460f      	mov	r7, r1
 801e49a:	f7e2 fb95 	bl	8000bc8 <__aeabi_d2iz>
 801e49e:	2200      	movs	r2, #0
 801e4a0:	9000      	str	r0, [sp, #0]
 801e4a2:	2300      	movs	r3, #0
 801e4a4:	4630      	mov	r0, r6
 801e4a6:	4639      	mov	r1, r7
 801e4a8:	f7e2 fb50 	bl	8000b4c <__aeabi_dcmplt>
 801e4ac:	b150      	cbz	r0, 801e4c4 <_dtoa_r+0x184>
 801e4ae:	9800      	ldr	r0, [sp, #0]
 801e4b0:	f7e2 f870 	bl	8000594 <__aeabi_i2d>
 801e4b4:	4632      	mov	r2, r6
 801e4b6:	463b      	mov	r3, r7
 801e4b8:	f7e2 fb3e 	bl	8000b38 <__aeabi_dcmpeq>
 801e4bc:	b910      	cbnz	r0, 801e4c4 <_dtoa_r+0x184>
 801e4be:	9b00      	ldr	r3, [sp, #0]
 801e4c0:	3b01      	subs	r3, #1
 801e4c2:	9300      	str	r3, [sp, #0]
 801e4c4:	9b00      	ldr	r3, [sp, #0]
 801e4c6:	2b16      	cmp	r3, #22
 801e4c8:	d85a      	bhi.n	801e580 <_dtoa_r+0x240>
 801e4ca:	9a00      	ldr	r2, [sp, #0]
 801e4cc:	4b57      	ldr	r3, [pc, #348]	; (801e62c <_dtoa_r+0x2ec>)
 801e4ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4d6:	ec51 0b19 	vmov	r0, r1, d9
 801e4da:	f7e2 fb37 	bl	8000b4c <__aeabi_dcmplt>
 801e4de:	2800      	cmp	r0, #0
 801e4e0:	d050      	beq.n	801e584 <_dtoa_r+0x244>
 801e4e2:	9b00      	ldr	r3, [sp, #0]
 801e4e4:	3b01      	subs	r3, #1
 801e4e6:	9300      	str	r3, [sp, #0]
 801e4e8:	2300      	movs	r3, #0
 801e4ea:	930b      	str	r3, [sp, #44]	; 0x2c
 801e4ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e4ee:	1b5d      	subs	r5, r3, r5
 801e4f0:	1e6b      	subs	r3, r5, #1
 801e4f2:	9305      	str	r3, [sp, #20]
 801e4f4:	bf45      	ittet	mi
 801e4f6:	f1c5 0301 	rsbmi	r3, r5, #1
 801e4fa:	9304      	strmi	r3, [sp, #16]
 801e4fc:	2300      	movpl	r3, #0
 801e4fe:	2300      	movmi	r3, #0
 801e500:	bf4c      	ite	mi
 801e502:	9305      	strmi	r3, [sp, #20]
 801e504:	9304      	strpl	r3, [sp, #16]
 801e506:	9b00      	ldr	r3, [sp, #0]
 801e508:	2b00      	cmp	r3, #0
 801e50a:	db3d      	blt.n	801e588 <_dtoa_r+0x248>
 801e50c:	9b05      	ldr	r3, [sp, #20]
 801e50e:	9a00      	ldr	r2, [sp, #0]
 801e510:	920a      	str	r2, [sp, #40]	; 0x28
 801e512:	4413      	add	r3, r2
 801e514:	9305      	str	r3, [sp, #20]
 801e516:	2300      	movs	r3, #0
 801e518:	9307      	str	r3, [sp, #28]
 801e51a:	9b06      	ldr	r3, [sp, #24]
 801e51c:	2b09      	cmp	r3, #9
 801e51e:	f200 8089 	bhi.w	801e634 <_dtoa_r+0x2f4>
 801e522:	2b05      	cmp	r3, #5
 801e524:	bfc4      	itt	gt
 801e526:	3b04      	subgt	r3, #4
 801e528:	9306      	strgt	r3, [sp, #24]
 801e52a:	9b06      	ldr	r3, [sp, #24]
 801e52c:	f1a3 0302 	sub.w	r3, r3, #2
 801e530:	bfcc      	ite	gt
 801e532:	2500      	movgt	r5, #0
 801e534:	2501      	movle	r5, #1
 801e536:	2b03      	cmp	r3, #3
 801e538:	f200 8087 	bhi.w	801e64a <_dtoa_r+0x30a>
 801e53c:	e8df f003 	tbb	[pc, r3]
 801e540:	59383a2d 	.word	0x59383a2d
 801e544:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801e548:	441d      	add	r5, r3
 801e54a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801e54e:	2b20      	cmp	r3, #32
 801e550:	bfc1      	itttt	gt
 801e552:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801e556:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801e55a:	fa0b f303 	lslgt.w	r3, fp, r3
 801e55e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801e562:	bfda      	itte	le
 801e564:	f1c3 0320 	rsble	r3, r3, #32
 801e568:	fa06 f003 	lslle.w	r0, r6, r3
 801e56c:	4318      	orrgt	r0, r3
 801e56e:	f7e2 f801 	bl	8000574 <__aeabi_ui2d>
 801e572:	2301      	movs	r3, #1
 801e574:	4606      	mov	r6, r0
 801e576:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801e57a:	3d01      	subs	r5, #1
 801e57c:	930e      	str	r3, [sp, #56]	; 0x38
 801e57e:	e76a      	b.n	801e456 <_dtoa_r+0x116>
 801e580:	2301      	movs	r3, #1
 801e582:	e7b2      	b.n	801e4ea <_dtoa_r+0x1aa>
 801e584:	900b      	str	r0, [sp, #44]	; 0x2c
 801e586:	e7b1      	b.n	801e4ec <_dtoa_r+0x1ac>
 801e588:	9b04      	ldr	r3, [sp, #16]
 801e58a:	9a00      	ldr	r2, [sp, #0]
 801e58c:	1a9b      	subs	r3, r3, r2
 801e58e:	9304      	str	r3, [sp, #16]
 801e590:	4253      	negs	r3, r2
 801e592:	9307      	str	r3, [sp, #28]
 801e594:	2300      	movs	r3, #0
 801e596:	930a      	str	r3, [sp, #40]	; 0x28
 801e598:	e7bf      	b.n	801e51a <_dtoa_r+0x1da>
 801e59a:	2300      	movs	r3, #0
 801e59c:	9308      	str	r3, [sp, #32]
 801e59e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5a0:	2b00      	cmp	r3, #0
 801e5a2:	dc55      	bgt.n	801e650 <_dtoa_r+0x310>
 801e5a4:	2301      	movs	r3, #1
 801e5a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801e5aa:	461a      	mov	r2, r3
 801e5ac:	9209      	str	r2, [sp, #36]	; 0x24
 801e5ae:	e00c      	b.n	801e5ca <_dtoa_r+0x28a>
 801e5b0:	2301      	movs	r3, #1
 801e5b2:	e7f3      	b.n	801e59c <_dtoa_r+0x25c>
 801e5b4:	2300      	movs	r3, #0
 801e5b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e5b8:	9308      	str	r3, [sp, #32]
 801e5ba:	9b00      	ldr	r3, [sp, #0]
 801e5bc:	4413      	add	r3, r2
 801e5be:	9302      	str	r3, [sp, #8]
 801e5c0:	3301      	adds	r3, #1
 801e5c2:	2b01      	cmp	r3, #1
 801e5c4:	9303      	str	r3, [sp, #12]
 801e5c6:	bfb8      	it	lt
 801e5c8:	2301      	movlt	r3, #1
 801e5ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801e5cc:	2200      	movs	r2, #0
 801e5ce:	6042      	str	r2, [r0, #4]
 801e5d0:	2204      	movs	r2, #4
 801e5d2:	f102 0614 	add.w	r6, r2, #20
 801e5d6:	429e      	cmp	r6, r3
 801e5d8:	6841      	ldr	r1, [r0, #4]
 801e5da:	d93d      	bls.n	801e658 <_dtoa_r+0x318>
 801e5dc:	4620      	mov	r0, r4
 801e5de:	f001 f82f 	bl	801f640 <_Balloc>
 801e5e2:	9001      	str	r0, [sp, #4]
 801e5e4:	2800      	cmp	r0, #0
 801e5e6:	d13b      	bne.n	801e660 <_dtoa_r+0x320>
 801e5e8:	4b11      	ldr	r3, [pc, #68]	; (801e630 <_dtoa_r+0x2f0>)
 801e5ea:	4602      	mov	r2, r0
 801e5ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801e5f0:	e6c0      	b.n	801e374 <_dtoa_r+0x34>
 801e5f2:	2301      	movs	r3, #1
 801e5f4:	e7df      	b.n	801e5b6 <_dtoa_r+0x276>
 801e5f6:	bf00      	nop
 801e5f8:	636f4361 	.word	0x636f4361
 801e5fc:	3fd287a7 	.word	0x3fd287a7
 801e600:	8b60c8b3 	.word	0x8b60c8b3
 801e604:	3fc68a28 	.word	0x3fc68a28
 801e608:	509f79fb 	.word	0x509f79fb
 801e60c:	3fd34413 	.word	0x3fd34413
 801e610:	08022eee 	.word	0x08022eee
 801e614:	08022f05 	.word	0x08022f05
 801e618:	7ff00000 	.word	0x7ff00000
 801e61c:	08022eea 	.word	0x08022eea
 801e620:	08022ee1 	.word	0x08022ee1
 801e624:	08022d69 	.word	0x08022d69
 801e628:	3ff80000 	.word	0x3ff80000
 801e62c:	08023070 	.word	0x08023070
 801e630:	08022f60 	.word	0x08022f60
 801e634:	2501      	movs	r5, #1
 801e636:	2300      	movs	r3, #0
 801e638:	9306      	str	r3, [sp, #24]
 801e63a:	9508      	str	r5, [sp, #32]
 801e63c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e640:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801e644:	2200      	movs	r2, #0
 801e646:	2312      	movs	r3, #18
 801e648:	e7b0      	b.n	801e5ac <_dtoa_r+0x26c>
 801e64a:	2301      	movs	r3, #1
 801e64c:	9308      	str	r3, [sp, #32]
 801e64e:	e7f5      	b.n	801e63c <_dtoa_r+0x2fc>
 801e650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e652:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801e656:	e7b8      	b.n	801e5ca <_dtoa_r+0x28a>
 801e658:	3101      	adds	r1, #1
 801e65a:	6041      	str	r1, [r0, #4]
 801e65c:	0052      	lsls	r2, r2, #1
 801e65e:	e7b8      	b.n	801e5d2 <_dtoa_r+0x292>
 801e660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e662:	9a01      	ldr	r2, [sp, #4]
 801e664:	601a      	str	r2, [r3, #0]
 801e666:	9b03      	ldr	r3, [sp, #12]
 801e668:	2b0e      	cmp	r3, #14
 801e66a:	f200 809d 	bhi.w	801e7a8 <_dtoa_r+0x468>
 801e66e:	2d00      	cmp	r5, #0
 801e670:	f000 809a 	beq.w	801e7a8 <_dtoa_r+0x468>
 801e674:	9b00      	ldr	r3, [sp, #0]
 801e676:	2b00      	cmp	r3, #0
 801e678:	dd32      	ble.n	801e6e0 <_dtoa_r+0x3a0>
 801e67a:	4ab7      	ldr	r2, [pc, #732]	; (801e958 <_dtoa_r+0x618>)
 801e67c:	f003 030f 	and.w	r3, r3, #15
 801e680:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801e684:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e688:	9b00      	ldr	r3, [sp, #0]
 801e68a:	05d8      	lsls	r0, r3, #23
 801e68c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801e690:	d516      	bpl.n	801e6c0 <_dtoa_r+0x380>
 801e692:	4bb2      	ldr	r3, [pc, #712]	; (801e95c <_dtoa_r+0x61c>)
 801e694:	ec51 0b19 	vmov	r0, r1, d9
 801e698:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e69c:	f7e2 f90e 	bl	80008bc <__aeabi_ddiv>
 801e6a0:	f007 070f 	and.w	r7, r7, #15
 801e6a4:	4682      	mov	sl, r0
 801e6a6:	468b      	mov	fp, r1
 801e6a8:	2503      	movs	r5, #3
 801e6aa:	4eac      	ldr	r6, [pc, #688]	; (801e95c <_dtoa_r+0x61c>)
 801e6ac:	b957      	cbnz	r7, 801e6c4 <_dtoa_r+0x384>
 801e6ae:	4642      	mov	r2, r8
 801e6b0:	464b      	mov	r3, r9
 801e6b2:	4650      	mov	r0, sl
 801e6b4:	4659      	mov	r1, fp
 801e6b6:	f7e2 f901 	bl	80008bc <__aeabi_ddiv>
 801e6ba:	4682      	mov	sl, r0
 801e6bc:	468b      	mov	fp, r1
 801e6be:	e028      	b.n	801e712 <_dtoa_r+0x3d2>
 801e6c0:	2502      	movs	r5, #2
 801e6c2:	e7f2      	b.n	801e6aa <_dtoa_r+0x36a>
 801e6c4:	07f9      	lsls	r1, r7, #31
 801e6c6:	d508      	bpl.n	801e6da <_dtoa_r+0x39a>
 801e6c8:	4640      	mov	r0, r8
 801e6ca:	4649      	mov	r1, r9
 801e6cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801e6d0:	f7e1 ffca 	bl	8000668 <__aeabi_dmul>
 801e6d4:	3501      	adds	r5, #1
 801e6d6:	4680      	mov	r8, r0
 801e6d8:	4689      	mov	r9, r1
 801e6da:	107f      	asrs	r7, r7, #1
 801e6dc:	3608      	adds	r6, #8
 801e6de:	e7e5      	b.n	801e6ac <_dtoa_r+0x36c>
 801e6e0:	f000 809b 	beq.w	801e81a <_dtoa_r+0x4da>
 801e6e4:	9b00      	ldr	r3, [sp, #0]
 801e6e6:	4f9d      	ldr	r7, [pc, #628]	; (801e95c <_dtoa_r+0x61c>)
 801e6e8:	425e      	negs	r6, r3
 801e6ea:	4b9b      	ldr	r3, [pc, #620]	; (801e958 <_dtoa_r+0x618>)
 801e6ec:	f006 020f 	and.w	r2, r6, #15
 801e6f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6f8:	ec51 0b19 	vmov	r0, r1, d9
 801e6fc:	f7e1 ffb4 	bl	8000668 <__aeabi_dmul>
 801e700:	1136      	asrs	r6, r6, #4
 801e702:	4682      	mov	sl, r0
 801e704:	468b      	mov	fp, r1
 801e706:	2300      	movs	r3, #0
 801e708:	2502      	movs	r5, #2
 801e70a:	2e00      	cmp	r6, #0
 801e70c:	d17a      	bne.n	801e804 <_dtoa_r+0x4c4>
 801e70e:	2b00      	cmp	r3, #0
 801e710:	d1d3      	bne.n	801e6ba <_dtoa_r+0x37a>
 801e712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e714:	2b00      	cmp	r3, #0
 801e716:	f000 8082 	beq.w	801e81e <_dtoa_r+0x4de>
 801e71a:	4b91      	ldr	r3, [pc, #580]	; (801e960 <_dtoa_r+0x620>)
 801e71c:	2200      	movs	r2, #0
 801e71e:	4650      	mov	r0, sl
 801e720:	4659      	mov	r1, fp
 801e722:	f7e2 fa13 	bl	8000b4c <__aeabi_dcmplt>
 801e726:	2800      	cmp	r0, #0
 801e728:	d079      	beq.n	801e81e <_dtoa_r+0x4de>
 801e72a:	9b03      	ldr	r3, [sp, #12]
 801e72c:	2b00      	cmp	r3, #0
 801e72e:	d076      	beq.n	801e81e <_dtoa_r+0x4de>
 801e730:	9b02      	ldr	r3, [sp, #8]
 801e732:	2b00      	cmp	r3, #0
 801e734:	dd36      	ble.n	801e7a4 <_dtoa_r+0x464>
 801e736:	9b00      	ldr	r3, [sp, #0]
 801e738:	4650      	mov	r0, sl
 801e73a:	4659      	mov	r1, fp
 801e73c:	1e5f      	subs	r7, r3, #1
 801e73e:	2200      	movs	r2, #0
 801e740:	4b88      	ldr	r3, [pc, #544]	; (801e964 <_dtoa_r+0x624>)
 801e742:	f7e1 ff91 	bl	8000668 <__aeabi_dmul>
 801e746:	9e02      	ldr	r6, [sp, #8]
 801e748:	4682      	mov	sl, r0
 801e74a:	468b      	mov	fp, r1
 801e74c:	3501      	adds	r5, #1
 801e74e:	4628      	mov	r0, r5
 801e750:	f7e1 ff20 	bl	8000594 <__aeabi_i2d>
 801e754:	4652      	mov	r2, sl
 801e756:	465b      	mov	r3, fp
 801e758:	f7e1 ff86 	bl	8000668 <__aeabi_dmul>
 801e75c:	4b82      	ldr	r3, [pc, #520]	; (801e968 <_dtoa_r+0x628>)
 801e75e:	2200      	movs	r2, #0
 801e760:	f7e1 fdcc 	bl	80002fc <__adddf3>
 801e764:	46d0      	mov	r8, sl
 801e766:	46d9      	mov	r9, fp
 801e768:	4682      	mov	sl, r0
 801e76a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801e76e:	2e00      	cmp	r6, #0
 801e770:	d158      	bne.n	801e824 <_dtoa_r+0x4e4>
 801e772:	4b7e      	ldr	r3, [pc, #504]	; (801e96c <_dtoa_r+0x62c>)
 801e774:	2200      	movs	r2, #0
 801e776:	4640      	mov	r0, r8
 801e778:	4649      	mov	r1, r9
 801e77a:	f7e1 fdbd 	bl	80002f8 <__aeabi_dsub>
 801e77e:	4652      	mov	r2, sl
 801e780:	465b      	mov	r3, fp
 801e782:	4680      	mov	r8, r0
 801e784:	4689      	mov	r9, r1
 801e786:	f7e2 f9ff 	bl	8000b88 <__aeabi_dcmpgt>
 801e78a:	2800      	cmp	r0, #0
 801e78c:	f040 8295 	bne.w	801ecba <_dtoa_r+0x97a>
 801e790:	4652      	mov	r2, sl
 801e792:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801e796:	4640      	mov	r0, r8
 801e798:	4649      	mov	r1, r9
 801e79a:	f7e2 f9d7 	bl	8000b4c <__aeabi_dcmplt>
 801e79e:	2800      	cmp	r0, #0
 801e7a0:	f040 8289 	bne.w	801ecb6 <_dtoa_r+0x976>
 801e7a4:	ec5b ab19 	vmov	sl, fp, d9
 801e7a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e7aa:	2b00      	cmp	r3, #0
 801e7ac:	f2c0 8148 	blt.w	801ea40 <_dtoa_r+0x700>
 801e7b0:	9a00      	ldr	r2, [sp, #0]
 801e7b2:	2a0e      	cmp	r2, #14
 801e7b4:	f300 8144 	bgt.w	801ea40 <_dtoa_r+0x700>
 801e7b8:	4b67      	ldr	r3, [pc, #412]	; (801e958 <_dtoa_r+0x618>)
 801e7ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e7be:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e7c4:	2b00      	cmp	r3, #0
 801e7c6:	f280 80d5 	bge.w	801e974 <_dtoa_r+0x634>
 801e7ca:	9b03      	ldr	r3, [sp, #12]
 801e7cc:	2b00      	cmp	r3, #0
 801e7ce:	f300 80d1 	bgt.w	801e974 <_dtoa_r+0x634>
 801e7d2:	f040 826f 	bne.w	801ecb4 <_dtoa_r+0x974>
 801e7d6:	4b65      	ldr	r3, [pc, #404]	; (801e96c <_dtoa_r+0x62c>)
 801e7d8:	2200      	movs	r2, #0
 801e7da:	4640      	mov	r0, r8
 801e7dc:	4649      	mov	r1, r9
 801e7de:	f7e1 ff43 	bl	8000668 <__aeabi_dmul>
 801e7e2:	4652      	mov	r2, sl
 801e7e4:	465b      	mov	r3, fp
 801e7e6:	f7e2 f9c5 	bl	8000b74 <__aeabi_dcmpge>
 801e7ea:	9e03      	ldr	r6, [sp, #12]
 801e7ec:	4637      	mov	r7, r6
 801e7ee:	2800      	cmp	r0, #0
 801e7f0:	f040 8245 	bne.w	801ec7e <_dtoa_r+0x93e>
 801e7f4:	9d01      	ldr	r5, [sp, #4]
 801e7f6:	2331      	movs	r3, #49	; 0x31
 801e7f8:	f805 3b01 	strb.w	r3, [r5], #1
 801e7fc:	9b00      	ldr	r3, [sp, #0]
 801e7fe:	3301      	adds	r3, #1
 801e800:	9300      	str	r3, [sp, #0]
 801e802:	e240      	b.n	801ec86 <_dtoa_r+0x946>
 801e804:	07f2      	lsls	r2, r6, #31
 801e806:	d505      	bpl.n	801e814 <_dtoa_r+0x4d4>
 801e808:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e80c:	f7e1 ff2c 	bl	8000668 <__aeabi_dmul>
 801e810:	3501      	adds	r5, #1
 801e812:	2301      	movs	r3, #1
 801e814:	1076      	asrs	r6, r6, #1
 801e816:	3708      	adds	r7, #8
 801e818:	e777      	b.n	801e70a <_dtoa_r+0x3ca>
 801e81a:	2502      	movs	r5, #2
 801e81c:	e779      	b.n	801e712 <_dtoa_r+0x3d2>
 801e81e:	9f00      	ldr	r7, [sp, #0]
 801e820:	9e03      	ldr	r6, [sp, #12]
 801e822:	e794      	b.n	801e74e <_dtoa_r+0x40e>
 801e824:	9901      	ldr	r1, [sp, #4]
 801e826:	4b4c      	ldr	r3, [pc, #304]	; (801e958 <_dtoa_r+0x618>)
 801e828:	4431      	add	r1, r6
 801e82a:	910d      	str	r1, [sp, #52]	; 0x34
 801e82c:	9908      	ldr	r1, [sp, #32]
 801e82e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801e832:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801e836:	2900      	cmp	r1, #0
 801e838:	d043      	beq.n	801e8c2 <_dtoa_r+0x582>
 801e83a:	494d      	ldr	r1, [pc, #308]	; (801e970 <_dtoa_r+0x630>)
 801e83c:	2000      	movs	r0, #0
 801e83e:	f7e2 f83d 	bl	80008bc <__aeabi_ddiv>
 801e842:	4652      	mov	r2, sl
 801e844:	465b      	mov	r3, fp
 801e846:	f7e1 fd57 	bl	80002f8 <__aeabi_dsub>
 801e84a:	9d01      	ldr	r5, [sp, #4]
 801e84c:	4682      	mov	sl, r0
 801e84e:	468b      	mov	fp, r1
 801e850:	4649      	mov	r1, r9
 801e852:	4640      	mov	r0, r8
 801e854:	f7e2 f9b8 	bl	8000bc8 <__aeabi_d2iz>
 801e858:	4606      	mov	r6, r0
 801e85a:	f7e1 fe9b 	bl	8000594 <__aeabi_i2d>
 801e85e:	4602      	mov	r2, r0
 801e860:	460b      	mov	r3, r1
 801e862:	4640      	mov	r0, r8
 801e864:	4649      	mov	r1, r9
 801e866:	f7e1 fd47 	bl	80002f8 <__aeabi_dsub>
 801e86a:	3630      	adds	r6, #48	; 0x30
 801e86c:	f805 6b01 	strb.w	r6, [r5], #1
 801e870:	4652      	mov	r2, sl
 801e872:	465b      	mov	r3, fp
 801e874:	4680      	mov	r8, r0
 801e876:	4689      	mov	r9, r1
 801e878:	f7e2 f968 	bl	8000b4c <__aeabi_dcmplt>
 801e87c:	2800      	cmp	r0, #0
 801e87e:	d163      	bne.n	801e948 <_dtoa_r+0x608>
 801e880:	4642      	mov	r2, r8
 801e882:	464b      	mov	r3, r9
 801e884:	4936      	ldr	r1, [pc, #216]	; (801e960 <_dtoa_r+0x620>)
 801e886:	2000      	movs	r0, #0
 801e888:	f7e1 fd36 	bl	80002f8 <__aeabi_dsub>
 801e88c:	4652      	mov	r2, sl
 801e88e:	465b      	mov	r3, fp
 801e890:	f7e2 f95c 	bl	8000b4c <__aeabi_dcmplt>
 801e894:	2800      	cmp	r0, #0
 801e896:	f040 80b5 	bne.w	801ea04 <_dtoa_r+0x6c4>
 801e89a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e89c:	429d      	cmp	r5, r3
 801e89e:	d081      	beq.n	801e7a4 <_dtoa_r+0x464>
 801e8a0:	4b30      	ldr	r3, [pc, #192]	; (801e964 <_dtoa_r+0x624>)
 801e8a2:	2200      	movs	r2, #0
 801e8a4:	4650      	mov	r0, sl
 801e8a6:	4659      	mov	r1, fp
 801e8a8:	f7e1 fede 	bl	8000668 <__aeabi_dmul>
 801e8ac:	4b2d      	ldr	r3, [pc, #180]	; (801e964 <_dtoa_r+0x624>)
 801e8ae:	4682      	mov	sl, r0
 801e8b0:	468b      	mov	fp, r1
 801e8b2:	4640      	mov	r0, r8
 801e8b4:	4649      	mov	r1, r9
 801e8b6:	2200      	movs	r2, #0
 801e8b8:	f7e1 fed6 	bl	8000668 <__aeabi_dmul>
 801e8bc:	4680      	mov	r8, r0
 801e8be:	4689      	mov	r9, r1
 801e8c0:	e7c6      	b.n	801e850 <_dtoa_r+0x510>
 801e8c2:	4650      	mov	r0, sl
 801e8c4:	4659      	mov	r1, fp
 801e8c6:	f7e1 fecf 	bl	8000668 <__aeabi_dmul>
 801e8ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e8cc:	9d01      	ldr	r5, [sp, #4]
 801e8ce:	930f      	str	r3, [sp, #60]	; 0x3c
 801e8d0:	4682      	mov	sl, r0
 801e8d2:	468b      	mov	fp, r1
 801e8d4:	4649      	mov	r1, r9
 801e8d6:	4640      	mov	r0, r8
 801e8d8:	f7e2 f976 	bl	8000bc8 <__aeabi_d2iz>
 801e8dc:	4606      	mov	r6, r0
 801e8de:	f7e1 fe59 	bl	8000594 <__aeabi_i2d>
 801e8e2:	3630      	adds	r6, #48	; 0x30
 801e8e4:	4602      	mov	r2, r0
 801e8e6:	460b      	mov	r3, r1
 801e8e8:	4640      	mov	r0, r8
 801e8ea:	4649      	mov	r1, r9
 801e8ec:	f7e1 fd04 	bl	80002f8 <__aeabi_dsub>
 801e8f0:	f805 6b01 	strb.w	r6, [r5], #1
 801e8f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e8f6:	429d      	cmp	r5, r3
 801e8f8:	4680      	mov	r8, r0
 801e8fa:	4689      	mov	r9, r1
 801e8fc:	f04f 0200 	mov.w	r2, #0
 801e900:	d124      	bne.n	801e94c <_dtoa_r+0x60c>
 801e902:	4b1b      	ldr	r3, [pc, #108]	; (801e970 <_dtoa_r+0x630>)
 801e904:	4650      	mov	r0, sl
 801e906:	4659      	mov	r1, fp
 801e908:	f7e1 fcf8 	bl	80002fc <__adddf3>
 801e90c:	4602      	mov	r2, r0
 801e90e:	460b      	mov	r3, r1
 801e910:	4640      	mov	r0, r8
 801e912:	4649      	mov	r1, r9
 801e914:	f7e2 f938 	bl	8000b88 <__aeabi_dcmpgt>
 801e918:	2800      	cmp	r0, #0
 801e91a:	d173      	bne.n	801ea04 <_dtoa_r+0x6c4>
 801e91c:	4652      	mov	r2, sl
 801e91e:	465b      	mov	r3, fp
 801e920:	4913      	ldr	r1, [pc, #76]	; (801e970 <_dtoa_r+0x630>)
 801e922:	2000      	movs	r0, #0
 801e924:	f7e1 fce8 	bl	80002f8 <__aeabi_dsub>
 801e928:	4602      	mov	r2, r0
 801e92a:	460b      	mov	r3, r1
 801e92c:	4640      	mov	r0, r8
 801e92e:	4649      	mov	r1, r9
 801e930:	f7e2 f90c 	bl	8000b4c <__aeabi_dcmplt>
 801e934:	2800      	cmp	r0, #0
 801e936:	f43f af35 	beq.w	801e7a4 <_dtoa_r+0x464>
 801e93a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801e93c:	1e6b      	subs	r3, r5, #1
 801e93e:	930f      	str	r3, [sp, #60]	; 0x3c
 801e940:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801e944:	2b30      	cmp	r3, #48	; 0x30
 801e946:	d0f8      	beq.n	801e93a <_dtoa_r+0x5fa>
 801e948:	9700      	str	r7, [sp, #0]
 801e94a:	e049      	b.n	801e9e0 <_dtoa_r+0x6a0>
 801e94c:	4b05      	ldr	r3, [pc, #20]	; (801e964 <_dtoa_r+0x624>)
 801e94e:	f7e1 fe8b 	bl	8000668 <__aeabi_dmul>
 801e952:	4680      	mov	r8, r0
 801e954:	4689      	mov	r9, r1
 801e956:	e7bd      	b.n	801e8d4 <_dtoa_r+0x594>
 801e958:	08023070 	.word	0x08023070
 801e95c:	08023048 	.word	0x08023048
 801e960:	3ff00000 	.word	0x3ff00000
 801e964:	40240000 	.word	0x40240000
 801e968:	401c0000 	.word	0x401c0000
 801e96c:	40140000 	.word	0x40140000
 801e970:	3fe00000 	.word	0x3fe00000
 801e974:	9d01      	ldr	r5, [sp, #4]
 801e976:	4656      	mov	r6, sl
 801e978:	465f      	mov	r7, fp
 801e97a:	4642      	mov	r2, r8
 801e97c:	464b      	mov	r3, r9
 801e97e:	4630      	mov	r0, r6
 801e980:	4639      	mov	r1, r7
 801e982:	f7e1 ff9b 	bl	80008bc <__aeabi_ddiv>
 801e986:	f7e2 f91f 	bl	8000bc8 <__aeabi_d2iz>
 801e98a:	4682      	mov	sl, r0
 801e98c:	f7e1 fe02 	bl	8000594 <__aeabi_i2d>
 801e990:	4642      	mov	r2, r8
 801e992:	464b      	mov	r3, r9
 801e994:	f7e1 fe68 	bl	8000668 <__aeabi_dmul>
 801e998:	4602      	mov	r2, r0
 801e99a:	460b      	mov	r3, r1
 801e99c:	4630      	mov	r0, r6
 801e99e:	4639      	mov	r1, r7
 801e9a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801e9a4:	f7e1 fca8 	bl	80002f8 <__aeabi_dsub>
 801e9a8:	f805 6b01 	strb.w	r6, [r5], #1
 801e9ac:	9e01      	ldr	r6, [sp, #4]
 801e9ae:	9f03      	ldr	r7, [sp, #12]
 801e9b0:	1bae      	subs	r6, r5, r6
 801e9b2:	42b7      	cmp	r7, r6
 801e9b4:	4602      	mov	r2, r0
 801e9b6:	460b      	mov	r3, r1
 801e9b8:	d135      	bne.n	801ea26 <_dtoa_r+0x6e6>
 801e9ba:	f7e1 fc9f 	bl	80002fc <__adddf3>
 801e9be:	4642      	mov	r2, r8
 801e9c0:	464b      	mov	r3, r9
 801e9c2:	4606      	mov	r6, r0
 801e9c4:	460f      	mov	r7, r1
 801e9c6:	f7e2 f8df 	bl	8000b88 <__aeabi_dcmpgt>
 801e9ca:	b9d0      	cbnz	r0, 801ea02 <_dtoa_r+0x6c2>
 801e9cc:	4642      	mov	r2, r8
 801e9ce:	464b      	mov	r3, r9
 801e9d0:	4630      	mov	r0, r6
 801e9d2:	4639      	mov	r1, r7
 801e9d4:	f7e2 f8b0 	bl	8000b38 <__aeabi_dcmpeq>
 801e9d8:	b110      	cbz	r0, 801e9e0 <_dtoa_r+0x6a0>
 801e9da:	f01a 0f01 	tst.w	sl, #1
 801e9de:	d110      	bne.n	801ea02 <_dtoa_r+0x6c2>
 801e9e0:	4620      	mov	r0, r4
 801e9e2:	ee18 1a10 	vmov	r1, s16
 801e9e6:	f000 fe6b 	bl	801f6c0 <_Bfree>
 801e9ea:	2300      	movs	r3, #0
 801e9ec:	9800      	ldr	r0, [sp, #0]
 801e9ee:	702b      	strb	r3, [r5, #0]
 801e9f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e9f2:	3001      	adds	r0, #1
 801e9f4:	6018      	str	r0, [r3, #0]
 801e9f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e9f8:	2b00      	cmp	r3, #0
 801e9fa:	f43f acf1 	beq.w	801e3e0 <_dtoa_r+0xa0>
 801e9fe:	601d      	str	r5, [r3, #0]
 801ea00:	e4ee      	b.n	801e3e0 <_dtoa_r+0xa0>
 801ea02:	9f00      	ldr	r7, [sp, #0]
 801ea04:	462b      	mov	r3, r5
 801ea06:	461d      	mov	r5, r3
 801ea08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ea0c:	2a39      	cmp	r2, #57	; 0x39
 801ea0e:	d106      	bne.n	801ea1e <_dtoa_r+0x6de>
 801ea10:	9a01      	ldr	r2, [sp, #4]
 801ea12:	429a      	cmp	r2, r3
 801ea14:	d1f7      	bne.n	801ea06 <_dtoa_r+0x6c6>
 801ea16:	9901      	ldr	r1, [sp, #4]
 801ea18:	2230      	movs	r2, #48	; 0x30
 801ea1a:	3701      	adds	r7, #1
 801ea1c:	700a      	strb	r2, [r1, #0]
 801ea1e:	781a      	ldrb	r2, [r3, #0]
 801ea20:	3201      	adds	r2, #1
 801ea22:	701a      	strb	r2, [r3, #0]
 801ea24:	e790      	b.n	801e948 <_dtoa_r+0x608>
 801ea26:	4ba6      	ldr	r3, [pc, #664]	; (801ecc0 <_dtoa_r+0x980>)
 801ea28:	2200      	movs	r2, #0
 801ea2a:	f7e1 fe1d 	bl	8000668 <__aeabi_dmul>
 801ea2e:	2200      	movs	r2, #0
 801ea30:	2300      	movs	r3, #0
 801ea32:	4606      	mov	r6, r0
 801ea34:	460f      	mov	r7, r1
 801ea36:	f7e2 f87f 	bl	8000b38 <__aeabi_dcmpeq>
 801ea3a:	2800      	cmp	r0, #0
 801ea3c:	d09d      	beq.n	801e97a <_dtoa_r+0x63a>
 801ea3e:	e7cf      	b.n	801e9e0 <_dtoa_r+0x6a0>
 801ea40:	9a08      	ldr	r2, [sp, #32]
 801ea42:	2a00      	cmp	r2, #0
 801ea44:	f000 80d7 	beq.w	801ebf6 <_dtoa_r+0x8b6>
 801ea48:	9a06      	ldr	r2, [sp, #24]
 801ea4a:	2a01      	cmp	r2, #1
 801ea4c:	f300 80ba 	bgt.w	801ebc4 <_dtoa_r+0x884>
 801ea50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ea52:	2a00      	cmp	r2, #0
 801ea54:	f000 80b2 	beq.w	801ebbc <_dtoa_r+0x87c>
 801ea58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801ea5c:	9e07      	ldr	r6, [sp, #28]
 801ea5e:	9d04      	ldr	r5, [sp, #16]
 801ea60:	9a04      	ldr	r2, [sp, #16]
 801ea62:	441a      	add	r2, r3
 801ea64:	9204      	str	r2, [sp, #16]
 801ea66:	9a05      	ldr	r2, [sp, #20]
 801ea68:	2101      	movs	r1, #1
 801ea6a:	441a      	add	r2, r3
 801ea6c:	4620      	mov	r0, r4
 801ea6e:	9205      	str	r2, [sp, #20]
 801ea70:	f000 ff28 	bl	801f8c4 <__i2b>
 801ea74:	4607      	mov	r7, r0
 801ea76:	2d00      	cmp	r5, #0
 801ea78:	dd0c      	ble.n	801ea94 <_dtoa_r+0x754>
 801ea7a:	9b05      	ldr	r3, [sp, #20]
 801ea7c:	2b00      	cmp	r3, #0
 801ea7e:	dd09      	ble.n	801ea94 <_dtoa_r+0x754>
 801ea80:	42ab      	cmp	r3, r5
 801ea82:	9a04      	ldr	r2, [sp, #16]
 801ea84:	bfa8      	it	ge
 801ea86:	462b      	movge	r3, r5
 801ea88:	1ad2      	subs	r2, r2, r3
 801ea8a:	9204      	str	r2, [sp, #16]
 801ea8c:	9a05      	ldr	r2, [sp, #20]
 801ea8e:	1aed      	subs	r5, r5, r3
 801ea90:	1ad3      	subs	r3, r2, r3
 801ea92:	9305      	str	r3, [sp, #20]
 801ea94:	9b07      	ldr	r3, [sp, #28]
 801ea96:	b31b      	cbz	r3, 801eae0 <_dtoa_r+0x7a0>
 801ea98:	9b08      	ldr	r3, [sp, #32]
 801ea9a:	2b00      	cmp	r3, #0
 801ea9c:	f000 80af 	beq.w	801ebfe <_dtoa_r+0x8be>
 801eaa0:	2e00      	cmp	r6, #0
 801eaa2:	dd13      	ble.n	801eacc <_dtoa_r+0x78c>
 801eaa4:	4639      	mov	r1, r7
 801eaa6:	4632      	mov	r2, r6
 801eaa8:	4620      	mov	r0, r4
 801eaaa:	f000 ffcb 	bl	801fa44 <__pow5mult>
 801eaae:	ee18 2a10 	vmov	r2, s16
 801eab2:	4601      	mov	r1, r0
 801eab4:	4607      	mov	r7, r0
 801eab6:	4620      	mov	r0, r4
 801eab8:	f000 ff1a 	bl	801f8f0 <__multiply>
 801eabc:	ee18 1a10 	vmov	r1, s16
 801eac0:	4680      	mov	r8, r0
 801eac2:	4620      	mov	r0, r4
 801eac4:	f000 fdfc 	bl	801f6c0 <_Bfree>
 801eac8:	ee08 8a10 	vmov	s16, r8
 801eacc:	9b07      	ldr	r3, [sp, #28]
 801eace:	1b9a      	subs	r2, r3, r6
 801ead0:	d006      	beq.n	801eae0 <_dtoa_r+0x7a0>
 801ead2:	ee18 1a10 	vmov	r1, s16
 801ead6:	4620      	mov	r0, r4
 801ead8:	f000 ffb4 	bl	801fa44 <__pow5mult>
 801eadc:	ee08 0a10 	vmov	s16, r0
 801eae0:	2101      	movs	r1, #1
 801eae2:	4620      	mov	r0, r4
 801eae4:	f000 feee 	bl	801f8c4 <__i2b>
 801eae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eaea:	2b00      	cmp	r3, #0
 801eaec:	4606      	mov	r6, r0
 801eaee:	f340 8088 	ble.w	801ec02 <_dtoa_r+0x8c2>
 801eaf2:	461a      	mov	r2, r3
 801eaf4:	4601      	mov	r1, r0
 801eaf6:	4620      	mov	r0, r4
 801eaf8:	f000 ffa4 	bl	801fa44 <__pow5mult>
 801eafc:	9b06      	ldr	r3, [sp, #24]
 801eafe:	2b01      	cmp	r3, #1
 801eb00:	4606      	mov	r6, r0
 801eb02:	f340 8081 	ble.w	801ec08 <_dtoa_r+0x8c8>
 801eb06:	f04f 0800 	mov.w	r8, #0
 801eb0a:	6933      	ldr	r3, [r6, #16]
 801eb0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801eb10:	6918      	ldr	r0, [r3, #16]
 801eb12:	f000 fe87 	bl	801f824 <__hi0bits>
 801eb16:	f1c0 0020 	rsb	r0, r0, #32
 801eb1a:	9b05      	ldr	r3, [sp, #20]
 801eb1c:	4418      	add	r0, r3
 801eb1e:	f010 001f 	ands.w	r0, r0, #31
 801eb22:	f000 8092 	beq.w	801ec4a <_dtoa_r+0x90a>
 801eb26:	f1c0 0320 	rsb	r3, r0, #32
 801eb2a:	2b04      	cmp	r3, #4
 801eb2c:	f340 808a 	ble.w	801ec44 <_dtoa_r+0x904>
 801eb30:	f1c0 001c 	rsb	r0, r0, #28
 801eb34:	9b04      	ldr	r3, [sp, #16]
 801eb36:	4403      	add	r3, r0
 801eb38:	9304      	str	r3, [sp, #16]
 801eb3a:	9b05      	ldr	r3, [sp, #20]
 801eb3c:	4403      	add	r3, r0
 801eb3e:	4405      	add	r5, r0
 801eb40:	9305      	str	r3, [sp, #20]
 801eb42:	9b04      	ldr	r3, [sp, #16]
 801eb44:	2b00      	cmp	r3, #0
 801eb46:	dd07      	ble.n	801eb58 <_dtoa_r+0x818>
 801eb48:	ee18 1a10 	vmov	r1, s16
 801eb4c:	461a      	mov	r2, r3
 801eb4e:	4620      	mov	r0, r4
 801eb50:	f000 ffd2 	bl	801faf8 <__lshift>
 801eb54:	ee08 0a10 	vmov	s16, r0
 801eb58:	9b05      	ldr	r3, [sp, #20]
 801eb5a:	2b00      	cmp	r3, #0
 801eb5c:	dd05      	ble.n	801eb6a <_dtoa_r+0x82a>
 801eb5e:	4631      	mov	r1, r6
 801eb60:	461a      	mov	r2, r3
 801eb62:	4620      	mov	r0, r4
 801eb64:	f000 ffc8 	bl	801faf8 <__lshift>
 801eb68:	4606      	mov	r6, r0
 801eb6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eb6c:	2b00      	cmp	r3, #0
 801eb6e:	d06e      	beq.n	801ec4e <_dtoa_r+0x90e>
 801eb70:	ee18 0a10 	vmov	r0, s16
 801eb74:	4631      	mov	r1, r6
 801eb76:	f001 f82f 	bl	801fbd8 <__mcmp>
 801eb7a:	2800      	cmp	r0, #0
 801eb7c:	da67      	bge.n	801ec4e <_dtoa_r+0x90e>
 801eb7e:	9b00      	ldr	r3, [sp, #0]
 801eb80:	3b01      	subs	r3, #1
 801eb82:	ee18 1a10 	vmov	r1, s16
 801eb86:	9300      	str	r3, [sp, #0]
 801eb88:	220a      	movs	r2, #10
 801eb8a:	2300      	movs	r3, #0
 801eb8c:	4620      	mov	r0, r4
 801eb8e:	f000 fdb9 	bl	801f704 <__multadd>
 801eb92:	9b08      	ldr	r3, [sp, #32]
 801eb94:	ee08 0a10 	vmov	s16, r0
 801eb98:	2b00      	cmp	r3, #0
 801eb9a:	f000 81b1 	beq.w	801ef00 <_dtoa_r+0xbc0>
 801eb9e:	2300      	movs	r3, #0
 801eba0:	4639      	mov	r1, r7
 801eba2:	220a      	movs	r2, #10
 801eba4:	4620      	mov	r0, r4
 801eba6:	f000 fdad 	bl	801f704 <__multadd>
 801ebaa:	9b02      	ldr	r3, [sp, #8]
 801ebac:	2b00      	cmp	r3, #0
 801ebae:	4607      	mov	r7, r0
 801ebb0:	f300 808e 	bgt.w	801ecd0 <_dtoa_r+0x990>
 801ebb4:	9b06      	ldr	r3, [sp, #24]
 801ebb6:	2b02      	cmp	r3, #2
 801ebb8:	dc51      	bgt.n	801ec5e <_dtoa_r+0x91e>
 801ebba:	e089      	b.n	801ecd0 <_dtoa_r+0x990>
 801ebbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ebbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801ebc2:	e74b      	b.n	801ea5c <_dtoa_r+0x71c>
 801ebc4:	9b03      	ldr	r3, [sp, #12]
 801ebc6:	1e5e      	subs	r6, r3, #1
 801ebc8:	9b07      	ldr	r3, [sp, #28]
 801ebca:	42b3      	cmp	r3, r6
 801ebcc:	bfbf      	itttt	lt
 801ebce:	9b07      	ldrlt	r3, [sp, #28]
 801ebd0:	9607      	strlt	r6, [sp, #28]
 801ebd2:	1af2      	sublt	r2, r6, r3
 801ebd4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801ebd6:	bfb6      	itet	lt
 801ebd8:	189b      	addlt	r3, r3, r2
 801ebda:	1b9e      	subge	r6, r3, r6
 801ebdc:	930a      	strlt	r3, [sp, #40]	; 0x28
 801ebde:	9b03      	ldr	r3, [sp, #12]
 801ebe0:	bfb8      	it	lt
 801ebe2:	2600      	movlt	r6, #0
 801ebe4:	2b00      	cmp	r3, #0
 801ebe6:	bfb7      	itett	lt
 801ebe8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801ebec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801ebf0:	1a9d      	sublt	r5, r3, r2
 801ebf2:	2300      	movlt	r3, #0
 801ebf4:	e734      	b.n	801ea60 <_dtoa_r+0x720>
 801ebf6:	9e07      	ldr	r6, [sp, #28]
 801ebf8:	9d04      	ldr	r5, [sp, #16]
 801ebfa:	9f08      	ldr	r7, [sp, #32]
 801ebfc:	e73b      	b.n	801ea76 <_dtoa_r+0x736>
 801ebfe:	9a07      	ldr	r2, [sp, #28]
 801ec00:	e767      	b.n	801ead2 <_dtoa_r+0x792>
 801ec02:	9b06      	ldr	r3, [sp, #24]
 801ec04:	2b01      	cmp	r3, #1
 801ec06:	dc18      	bgt.n	801ec3a <_dtoa_r+0x8fa>
 801ec08:	f1ba 0f00 	cmp.w	sl, #0
 801ec0c:	d115      	bne.n	801ec3a <_dtoa_r+0x8fa>
 801ec0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ec12:	b993      	cbnz	r3, 801ec3a <_dtoa_r+0x8fa>
 801ec14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ec18:	0d1b      	lsrs	r3, r3, #20
 801ec1a:	051b      	lsls	r3, r3, #20
 801ec1c:	b183      	cbz	r3, 801ec40 <_dtoa_r+0x900>
 801ec1e:	9b04      	ldr	r3, [sp, #16]
 801ec20:	3301      	adds	r3, #1
 801ec22:	9304      	str	r3, [sp, #16]
 801ec24:	9b05      	ldr	r3, [sp, #20]
 801ec26:	3301      	adds	r3, #1
 801ec28:	9305      	str	r3, [sp, #20]
 801ec2a:	f04f 0801 	mov.w	r8, #1
 801ec2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ec30:	2b00      	cmp	r3, #0
 801ec32:	f47f af6a 	bne.w	801eb0a <_dtoa_r+0x7ca>
 801ec36:	2001      	movs	r0, #1
 801ec38:	e76f      	b.n	801eb1a <_dtoa_r+0x7da>
 801ec3a:	f04f 0800 	mov.w	r8, #0
 801ec3e:	e7f6      	b.n	801ec2e <_dtoa_r+0x8ee>
 801ec40:	4698      	mov	r8, r3
 801ec42:	e7f4      	b.n	801ec2e <_dtoa_r+0x8ee>
 801ec44:	f43f af7d 	beq.w	801eb42 <_dtoa_r+0x802>
 801ec48:	4618      	mov	r0, r3
 801ec4a:	301c      	adds	r0, #28
 801ec4c:	e772      	b.n	801eb34 <_dtoa_r+0x7f4>
 801ec4e:	9b03      	ldr	r3, [sp, #12]
 801ec50:	2b00      	cmp	r3, #0
 801ec52:	dc37      	bgt.n	801ecc4 <_dtoa_r+0x984>
 801ec54:	9b06      	ldr	r3, [sp, #24]
 801ec56:	2b02      	cmp	r3, #2
 801ec58:	dd34      	ble.n	801ecc4 <_dtoa_r+0x984>
 801ec5a:	9b03      	ldr	r3, [sp, #12]
 801ec5c:	9302      	str	r3, [sp, #8]
 801ec5e:	9b02      	ldr	r3, [sp, #8]
 801ec60:	b96b      	cbnz	r3, 801ec7e <_dtoa_r+0x93e>
 801ec62:	4631      	mov	r1, r6
 801ec64:	2205      	movs	r2, #5
 801ec66:	4620      	mov	r0, r4
 801ec68:	f000 fd4c 	bl	801f704 <__multadd>
 801ec6c:	4601      	mov	r1, r0
 801ec6e:	4606      	mov	r6, r0
 801ec70:	ee18 0a10 	vmov	r0, s16
 801ec74:	f000 ffb0 	bl	801fbd8 <__mcmp>
 801ec78:	2800      	cmp	r0, #0
 801ec7a:	f73f adbb 	bgt.w	801e7f4 <_dtoa_r+0x4b4>
 801ec7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec80:	9d01      	ldr	r5, [sp, #4]
 801ec82:	43db      	mvns	r3, r3
 801ec84:	9300      	str	r3, [sp, #0]
 801ec86:	f04f 0800 	mov.w	r8, #0
 801ec8a:	4631      	mov	r1, r6
 801ec8c:	4620      	mov	r0, r4
 801ec8e:	f000 fd17 	bl	801f6c0 <_Bfree>
 801ec92:	2f00      	cmp	r7, #0
 801ec94:	f43f aea4 	beq.w	801e9e0 <_dtoa_r+0x6a0>
 801ec98:	f1b8 0f00 	cmp.w	r8, #0
 801ec9c:	d005      	beq.n	801ecaa <_dtoa_r+0x96a>
 801ec9e:	45b8      	cmp	r8, r7
 801eca0:	d003      	beq.n	801ecaa <_dtoa_r+0x96a>
 801eca2:	4641      	mov	r1, r8
 801eca4:	4620      	mov	r0, r4
 801eca6:	f000 fd0b 	bl	801f6c0 <_Bfree>
 801ecaa:	4639      	mov	r1, r7
 801ecac:	4620      	mov	r0, r4
 801ecae:	f000 fd07 	bl	801f6c0 <_Bfree>
 801ecb2:	e695      	b.n	801e9e0 <_dtoa_r+0x6a0>
 801ecb4:	2600      	movs	r6, #0
 801ecb6:	4637      	mov	r7, r6
 801ecb8:	e7e1      	b.n	801ec7e <_dtoa_r+0x93e>
 801ecba:	9700      	str	r7, [sp, #0]
 801ecbc:	4637      	mov	r7, r6
 801ecbe:	e599      	b.n	801e7f4 <_dtoa_r+0x4b4>
 801ecc0:	40240000 	.word	0x40240000
 801ecc4:	9b08      	ldr	r3, [sp, #32]
 801ecc6:	2b00      	cmp	r3, #0
 801ecc8:	f000 80ca 	beq.w	801ee60 <_dtoa_r+0xb20>
 801eccc:	9b03      	ldr	r3, [sp, #12]
 801ecce:	9302      	str	r3, [sp, #8]
 801ecd0:	2d00      	cmp	r5, #0
 801ecd2:	dd05      	ble.n	801ece0 <_dtoa_r+0x9a0>
 801ecd4:	4639      	mov	r1, r7
 801ecd6:	462a      	mov	r2, r5
 801ecd8:	4620      	mov	r0, r4
 801ecda:	f000 ff0d 	bl	801faf8 <__lshift>
 801ecde:	4607      	mov	r7, r0
 801ece0:	f1b8 0f00 	cmp.w	r8, #0
 801ece4:	d05b      	beq.n	801ed9e <_dtoa_r+0xa5e>
 801ece6:	6879      	ldr	r1, [r7, #4]
 801ece8:	4620      	mov	r0, r4
 801ecea:	f000 fca9 	bl	801f640 <_Balloc>
 801ecee:	4605      	mov	r5, r0
 801ecf0:	b928      	cbnz	r0, 801ecfe <_dtoa_r+0x9be>
 801ecf2:	4b87      	ldr	r3, [pc, #540]	; (801ef10 <_dtoa_r+0xbd0>)
 801ecf4:	4602      	mov	r2, r0
 801ecf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801ecfa:	f7ff bb3b 	b.w	801e374 <_dtoa_r+0x34>
 801ecfe:	693a      	ldr	r2, [r7, #16]
 801ed00:	3202      	adds	r2, #2
 801ed02:	0092      	lsls	r2, r2, #2
 801ed04:	f107 010c 	add.w	r1, r7, #12
 801ed08:	300c      	adds	r0, #12
 801ed0a:	f7fd fd47 	bl	801c79c <memcpy>
 801ed0e:	2201      	movs	r2, #1
 801ed10:	4629      	mov	r1, r5
 801ed12:	4620      	mov	r0, r4
 801ed14:	f000 fef0 	bl	801faf8 <__lshift>
 801ed18:	9b01      	ldr	r3, [sp, #4]
 801ed1a:	f103 0901 	add.w	r9, r3, #1
 801ed1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801ed22:	4413      	add	r3, r2
 801ed24:	9305      	str	r3, [sp, #20]
 801ed26:	f00a 0301 	and.w	r3, sl, #1
 801ed2a:	46b8      	mov	r8, r7
 801ed2c:	9304      	str	r3, [sp, #16]
 801ed2e:	4607      	mov	r7, r0
 801ed30:	4631      	mov	r1, r6
 801ed32:	ee18 0a10 	vmov	r0, s16
 801ed36:	f7ff fa77 	bl	801e228 <quorem>
 801ed3a:	4641      	mov	r1, r8
 801ed3c:	9002      	str	r0, [sp, #8]
 801ed3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801ed42:	ee18 0a10 	vmov	r0, s16
 801ed46:	f000 ff47 	bl	801fbd8 <__mcmp>
 801ed4a:	463a      	mov	r2, r7
 801ed4c:	9003      	str	r0, [sp, #12]
 801ed4e:	4631      	mov	r1, r6
 801ed50:	4620      	mov	r0, r4
 801ed52:	f000 ff5d 	bl	801fc10 <__mdiff>
 801ed56:	68c2      	ldr	r2, [r0, #12]
 801ed58:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 801ed5c:	4605      	mov	r5, r0
 801ed5e:	bb02      	cbnz	r2, 801eda2 <_dtoa_r+0xa62>
 801ed60:	4601      	mov	r1, r0
 801ed62:	ee18 0a10 	vmov	r0, s16
 801ed66:	f000 ff37 	bl	801fbd8 <__mcmp>
 801ed6a:	4602      	mov	r2, r0
 801ed6c:	4629      	mov	r1, r5
 801ed6e:	4620      	mov	r0, r4
 801ed70:	9207      	str	r2, [sp, #28]
 801ed72:	f000 fca5 	bl	801f6c0 <_Bfree>
 801ed76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801ed7a:	ea43 0102 	orr.w	r1, r3, r2
 801ed7e:	9b04      	ldr	r3, [sp, #16]
 801ed80:	430b      	orrs	r3, r1
 801ed82:	464d      	mov	r5, r9
 801ed84:	d10f      	bne.n	801eda6 <_dtoa_r+0xa66>
 801ed86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801ed8a:	d02a      	beq.n	801ede2 <_dtoa_r+0xaa2>
 801ed8c:	9b03      	ldr	r3, [sp, #12]
 801ed8e:	2b00      	cmp	r3, #0
 801ed90:	dd02      	ble.n	801ed98 <_dtoa_r+0xa58>
 801ed92:	9b02      	ldr	r3, [sp, #8]
 801ed94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801ed98:	f88b a000 	strb.w	sl, [fp]
 801ed9c:	e775      	b.n	801ec8a <_dtoa_r+0x94a>
 801ed9e:	4638      	mov	r0, r7
 801eda0:	e7ba      	b.n	801ed18 <_dtoa_r+0x9d8>
 801eda2:	2201      	movs	r2, #1
 801eda4:	e7e2      	b.n	801ed6c <_dtoa_r+0xa2c>
 801eda6:	9b03      	ldr	r3, [sp, #12]
 801eda8:	2b00      	cmp	r3, #0
 801edaa:	db04      	blt.n	801edb6 <_dtoa_r+0xa76>
 801edac:	9906      	ldr	r1, [sp, #24]
 801edae:	430b      	orrs	r3, r1
 801edb0:	9904      	ldr	r1, [sp, #16]
 801edb2:	430b      	orrs	r3, r1
 801edb4:	d122      	bne.n	801edfc <_dtoa_r+0xabc>
 801edb6:	2a00      	cmp	r2, #0
 801edb8:	ddee      	ble.n	801ed98 <_dtoa_r+0xa58>
 801edba:	ee18 1a10 	vmov	r1, s16
 801edbe:	2201      	movs	r2, #1
 801edc0:	4620      	mov	r0, r4
 801edc2:	f000 fe99 	bl	801faf8 <__lshift>
 801edc6:	4631      	mov	r1, r6
 801edc8:	ee08 0a10 	vmov	s16, r0
 801edcc:	f000 ff04 	bl	801fbd8 <__mcmp>
 801edd0:	2800      	cmp	r0, #0
 801edd2:	dc03      	bgt.n	801eddc <_dtoa_r+0xa9c>
 801edd4:	d1e0      	bne.n	801ed98 <_dtoa_r+0xa58>
 801edd6:	f01a 0f01 	tst.w	sl, #1
 801edda:	d0dd      	beq.n	801ed98 <_dtoa_r+0xa58>
 801eddc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801ede0:	d1d7      	bne.n	801ed92 <_dtoa_r+0xa52>
 801ede2:	2339      	movs	r3, #57	; 0x39
 801ede4:	f88b 3000 	strb.w	r3, [fp]
 801ede8:	462b      	mov	r3, r5
 801edea:	461d      	mov	r5, r3
 801edec:	3b01      	subs	r3, #1
 801edee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801edf2:	2a39      	cmp	r2, #57	; 0x39
 801edf4:	d071      	beq.n	801eeda <_dtoa_r+0xb9a>
 801edf6:	3201      	adds	r2, #1
 801edf8:	701a      	strb	r2, [r3, #0]
 801edfa:	e746      	b.n	801ec8a <_dtoa_r+0x94a>
 801edfc:	2a00      	cmp	r2, #0
 801edfe:	dd07      	ble.n	801ee10 <_dtoa_r+0xad0>
 801ee00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801ee04:	d0ed      	beq.n	801ede2 <_dtoa_r+0xaa2>
 801ee06:	f10a 0301 	add.w	r3, sl, #1
 801ee0a:	f88b 3000 	strb.w	r3, [fp]
 801ee0e:	e73c      	b.n	801ec8a <_dtoa_r+0x94a>
 801ee10:	9b05      	ldr	r3, [sp, #20]
 801ee12:	f809 ac01 	strb.w	sl, [r9, #-1]
 801ee16:	4599      	cmp	r9, r3
 801ee18:	d047      	beq.n	801eeaa <_dtoa_r+0xb6a>
 801ee1a:	ee18 1a10 	vmov	r1, s16
 801ee1e:	2300      	movs	r3, #0
 801ee20:	220a      	movs	r2, #10
 801ee22:	4620      	mov	r0, r4
 801ee24:	f000 fc6e 	bl	801f704 <__multadd>
 801ee28:	45b8      	cmp	r8, r7
 801ee2a:	ee08 0a10 	vmov	s16, r0
 801ee2e:	f04f 0300 	mov.w	r3, #0
 801ee32:	f04f 020a 	mov.w	r2, #10
 801ee36:	4641      	mov	r1, r8
 801ee38:	4620      	mov	r0, r4
 801ee3a:	d106      	bne.n	801ee4a <_dtoa_r+0xb0a>
 801ee3c:	f000 fc62 	bl	801f704 <__multadd>
 801ee40:	4680      	mov	r8, r0
 801ee42:	4607      	mov	r7, r0
 801ee44:	f109 0901 	add.w	r9, r9, #1
 801ee48:	e772      	b.n	801ed30 <_dtoa_r+0x9f0>
 801ee4a:	f000 fc5b 	bl	801f704 <__multadd>
 801ee4e:	4639      	mov	r1, r7
 801ee50:	4680      	mov	r8, r0
 801ee52:	2300      	movs	r3, #0
 801ee54:	220a      	movs	r2, #10
 801ee56:	4620      	mov	r0, r4
 801ee58:	f000 fc54 	bl	801f704 <__multadd>
 801ee5c:	4607      	mov	r7, r0
 801ee5e:	e7f1      	b.n	801ee44 <_dtoa_r+0xb04>
 801ee60:	9b03      	ldr	r3, [sp, #12]
 801ee62:	9302      	str	r3, [sp, #8]
 801ee64:	9d01      	ldr	r5, [sp, #4]
 801ee66:	ee18 0a10 	vmov	r0, s16
 801ee6a:	4631      	mov	r1, r6
 801ee6c:	f7ff f9dc 	bl	801e228 <quorem>
 801ee70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801ee74:	9b01      	ldr	r3, [sp, #4]
 801ee76:	f805 ab01 	strb.w	sl, [r5], #1
 801ee7a:	1aea      	subs	r2, r5, r3
 801ee7c:	9b02      	ldr	r3, [sp, #8]
 801ee7e:	4293      	cmp	r3, r2
 801ee80:	dd09      	ble.n	801ee96 <_dtoa_r+0xb56>
 801ee82:	ee18 1a10 	vmov	r1, s16
 801ee86:	2300      	movs	r3, #0
 801ee88:	220a      	movs	r2, #10
 801ee8a:	4620      	mov	r0, r4
 801ee8c:	f000 fc3a 	bl	801f704 <__multadd>
 801ee90:	ee08 0a10 	vmov	s16, r0
 801ee94:	e7e7      	b.n	801ee66 <_dtoa_r+0xb26>
 801ee96:	9b02      	ldr	r3, [sp, #8]
 801ee98:	2b00      	cmp	r3, #0
 801ee9a:	bfc8      	it	gt
 801ee9c:	461d      	movgt	r5, r3
 801ee9e:	9b01      	ldr	r3, [sp, #4]
 801eea0:	bfd8      	it	le
 801eea2:	2501      	movle	r5, #1
 801eea4:	441d      	add	r5, r3
 801eea6:	f04f 0800 	mov.w	r8, #0
 801eeaa:	ee18 1a10 	vmov	r1, s16
 801eeae:	2201      	movs	r2, #1
 801eeb0:	4620      	mov	r0, r4
 801eeb2:	f000 fe21 	bl	801faf8 <__lshift>
 801eeb6:	4631      	mov	r1, r6
 801eeb8:	ee08 0a10 	vmov	s16, r0
 801eebc:	f000 fe8c 	bl	801fbd8 <__mcmp>
 801eec0:	2800      	cmp	r0, #0
 801eec2:	dc91      	bgt.n	801ede8 <_dtoa_r+0xaa8>
 801eec4:	d102      	bne.n	801eecc <_dtoa_r+0xb8c>
 801eec6:	f01a 0f01 	tst.w	sl, #1
 801eeca:	d18d      	bne.n	801ede8 <_dtoa_r+0xaa8>
 801eecc:	462b      	mov	r3, r5
 801eece:	461d      	mov	r5, r3
 801eed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801eed4:	2a30      	cmp	r2, #48	; 0x30
 801eed6:	d0fa      	beq.n	801eece <_dtoa_r+0xb8e>
 801eed8:	e6d7      	b.n	801ec8a <_dtoa_r+0x94a>
 801eeda:	9a01      	ldr	r2, [sp, #4]
 801eedc:	429a      	cmp	r2, r3
 801eede:	d184      	bne.n	801edea <_dtoa_r+0xaaa>
 801eee0:	9b00      	ldr	r3, [sp, #0]
 801eee2:	3301      	adds	r3, #1
 801eee4:	9300      	str	r3, [sp, #0]
 801eee6:	2331      	movs	r3, #49	; 0x31
 801eee8:	7013      	strb	r3, [r2, #0]
 801eeea:	e6ce      	b.n	801ec8a <_dtoa_r+0x94a>
 801eeec:	4b09      	ldr	r3, [pc, #36]	; (801ef14 <_dtoa_r+0xbd4>)
 801eeee:	f7ff ba95 	b.w	801e41c <_dtoa_r+0xdc>
 801eef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801eef4:	2b00      	cmp	r3, #0
 801eef6:	f47f aa6e 	bne.w	801e3d6 <_dtoa_r+0x96>
 801eefa:	4b07      	ldr	r3, [pc, #28]	; (801ef18 <_dtoa_r+0xbd8>)
 801eefc:	f7ff ba8e 	b.w	801e41c <_dtoa_r+0xdc>
 801ef00:	9b02      	ldr	r3, [sp, #8]
 801ef02:	2b00      	cmp	r3, #0
 801ef04:	dcae      	bgt.n	801ee64 <_dtoa_r+0xb24>
 801ef06:	9b06      	ldr	r3, [sp, #24]
 801ef08:	2b02      	cmp	r3, #2
 801ef0a:	f73f aea8 	bgt.w	801ec5e <_dtoa_r+0x91e>
 801ef0e:	e7a9      	b.n	801ee64 <_dtoa_r+0xb24>
 801ef10:	08022f60 	.word	0x08022f60
 801ef14:	08022d68 	.word	0x08022d68
 801ef18:	08022ee1 	.word	0x08022ee1

0801ef1c <rshift>:
 801ef1c:	6903      	ldr	r3, [r0, #16]
 801ef1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ef22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ef26:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ef2a:	f100 0414 	add.w	r4, r0, #20
 801ef2e:	dd45      	ble.n	801efbc <rshift+0xa0>
 801ef30:	f011 011f 	ands.w	r1, r1, #31
 801ef34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ef38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ef3c:	d10c      	bne.n	801ef58 <rshift+0x3c>
 801ef3e:	f100 0710 	add.w	r7, r0, #16
 801ef42:	4629      	mov	r1, r5
 801ef44:	42b1      	cmp	r1, r6
 801ef46:	d334      	bcc.n	801efb2 <rshift+0x96>
 801ef48:	1a9b      	subs	r3, r3, r2
 801ef4a:	009b      	lsls	r3, r3, #2
 801ef4c:	1eea      	subs	r2, r5, #3
 801ef4e:	4296      	cmp	r6, r2
 801ef50:	bf38      	it	cc
 801ef52:	2300      	movcc	r3, #0
 801ef54:	4423      	add	r3, r4
 801ef56:	e015      	b.n	801ef84 <rshift+0x68>
 801ef58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ef5c:	f1c1 0820 	rsb	r8, r1, #32
 801ef60:	40cf      	lsrs	r7, r1
 801ef62:	f105 0e04 	add.w	lr, r5, #4
 801ef66:	46a1      	mov	r9, r4
 801ef68:	4576      	cmp	r6, lr
 801ef6a:	46f4      	mov	ip, lr
 801ef6c:	d815      	bhi.n	801ef9a <rshift+0x7e>
 801ef6e:	1a9a      	subs	r2, r3, r2
 801ef70:	0092      	lsls	r2, r2, #2
 801ef72:	3a04      	subs	r2, #4
 801ef74:	3501      	adds	r5, #1
 801ef76:	42ae      	cmp	r6, r5
 801ef78:	bf38      	it	cc
 801ef7a:	2200      	movcc	r2, #0
 801ef7c:	18a3      	adds	r3, r4, r2
 801ef7e:	50a7      	str	r7, [r4, r2]
 801ef80:	b107      	cbz	r7, 801ef84 <rshift+0x68>
 801ef82:	3304      	adds	r3, #4
 801ef84:	1b1a      	subs	r2, r3, r4
 801ef86:	42a3      	cmp	r3, r4
 801ef88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801ef8c:	bf08      	it	eq
 801ef8e:	2300      	moveq	r3, #0
 801ef90:	6102      	str	r2, [r0, #16]
 801ef92:	bf08      	it	eq
 801ef94:	6143      	streq	r3, [r0, #20]
 801ef96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ef9a:	f8dc c000 	ldr.w	ip, [ip]
 801ef9e:	fa0c fc08 	lsl.w	ip, ip, r8
 801efa2:	ea4c 0707 	orr.w	r7, ip, r7
 801efa6:	f849 7b04 	str.w	r7, [r9], #4
 801efaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 801efae:	40cf      	lsrs	r7, r1
 801efb0:	e7da      	b.n	801ef68 <rshift+0x4c>
 801efb2:	f851 cb04 	ldr.w	ip, [r1], #4
 801efb6:	f847 cf04 	str.w	ip, [r7, #4]!
 801efba:	e7c3      	b.n	801ef44 <rshift+0x28>
 801efbc:	4623      	mov	r3, r4
 801efbe:	e7e1      	b.n	801ef84 <rshift+0x68>

0801efc0 <__hexdig_fun>:
 801efc0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801efc4:	2b09      	cmp	r3, #9
 801efc6:	d802      	bhi.n	801efce <__hexdig_fun+0xe>
 801efc8:	3820      	subs	r0, #32
 801efca:	b2c0      	uxtb	r0, r0
 801efcc:	4770      	bx	lr
 801efce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801efd2:	2b05      	cmp	r3, #5
 801efd4:	d801      	bhi.n	801efda <__hexdig_fun+0x1a>
 801efd6:	3847      	subs	r0, #71	; 0x47
 801efd8:	e7f7      	b.n	801efca <__hexdig_fun+0xa>
 801efda:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801efde:	2b05      	cmp	r3, #5
 801efe0:	d801      	bhi.n	801efe6 <__hexdig_fun+0x26>
 801efe2:	3827      	subs	r0, #39	; 0x27
 801efe4:	e7f1      	b.n	801efca <__hexdig_fun+0xa>
 801efe6:	2000      	movs	r0, #0
 801efe8:	4770      	bx	lr
	...

0801efec <__gethex>:
 801efec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eff0:	ed2d 8b02 	vpush	{d8}
 801eff4:	b089      	sub	sp, #36	; 0x24
 801eff6:	ee08 0a10 	vmov	s16, r0
 801effa:	9304      	str	r3, [sp, #16]
 801effc:	4bb4      	ldr	r3, [pc, #720]	; (801f2d0 <__gethex+0x2e4>)
 801effe:	681b      	ldr	r3, [r3, #0]
 801f000:	9301      	str	r3, [sp, #4]
 801f002:	4618      	mov	r0, r3
 801f004:	468b      	mov	fp, r1
 801f006:	4690      	mov	r8, r2
 801f008:	f7e1 f914 	bl	8000234 <strlen>
 801f00c:	9b01      	ldr	r3, [sp, #4]
 801f00e:	f8db 2000 	ldr.w	r2, [fp]
 801f012:	4403      	add	r3, r0
 801f014:	4682      	mov	sl, r0
 801f016:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801f01a:	9305      	str	r3, [sp, #20]
 801f01c:	1c93      	adds	r3, r2, #2
 801f01e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801f022:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801f026:	32fe      	adds	r2, #254	; 0xfe
 801f028:	18d1      	adds	r1, r2, r3
 801f02a:	461f      	mov	r7, r3
 801f02c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801f030:	9100      	str	r1, [sp, #0]
 801f032:	2830      	cmp	r0, #48	; 0x30
 801f034:	d0f8      	beq.n	801f028 <__gethex+0x3c>
 801f036:	f7ff ffc3 	bl	801efc0 <__hexdig_fun>
 801f03a:	4604      	mov	r4, r0
 801f03c:	2800      	cmp	r0, #0
 801f03e:	d13a      	bne.n	801f0b6 <__gethex+0xca>
 801f040:	9901      	ldr	r1, [sp, #4]
 801f042:	4652      	mov	r2, sl
 801f044:	4638      	mov	r0, r7
 801f046:	f001 f93d 	bl	80202c4 <strncmp>
 801f04a:	4605      	mov	r5, r0
 801f04c:	2800      	cmp	r0, #0
 801f04e:	d168      	bne.n	801f122 <__gethex+0x136>
 801f050:	f817 000a 	ldrb.w	r0, [r7, sl]
 801f054:	eb07 060a 	add.w	r6, r7, sl
 801f058:	f7ff ffb2 	bl	801efc0 <__hexdig_fun>
 801f05c:	2800      	cmp	r0, #0
 801f05e:	d062      	beq.n	801f126 <__gethex+0x13a>
 801f060:	4633      	mov	r3, r6
 801f062:	7818      	ldrb	r0, [r3, #0]
 801f064:	2830      	cmp	r0, #48	; 0x30
 801f066:	461f      	mov	r7, r3
 801f068:	f103 0301 	add.w	r3, r3, #1
 801f06c:	d0f9      	beq.n	801f062 <__gethex+0x76>
 801f06e:	f7ff ffa7 	bl	801efc0 <__hexdig_fun>
 801f072:	2301      	movs	r3, #1
 801f074:	fab0 f480 	clz	r4, r0
 801f078:	0964      	lsrs	r4, r4, #5
 801f07a:	4635      	mov	r5, r6
 801f07c:	9300      	str	r3, [sp, #0]
 801f07e:	463a      	mov	r2, r7
 801f080:	4616      	mov	r6, r2
 801f082:	3201      	adds	r2, #1
 801f084:	7830      	ldrb	r0, [r6, #0]
 801f086:	f7ff ff9b 	bl	801efc0 <__hexdig_fun>
 801f08a:	2800      	cmp	r0, #0
 801f08c:	d1f8      	bne.n	801f080 <__gethex+0x94>
 801f08e:	9901      	ldr	r1, [sp, #4]
 801f090:	4652      	mov	r2, sl
 801f092:	4630      	mov	r0, r6
 801f094:	f001 f916 	bl	80202c4 <strncmp>
 801f098:	b980      	cbnz	r0, 801f0bc <__gethex+0xd0>
 801f09a:	b94d      	cbnz	r5, 801f0b0 <__gethex+0xc4>
 801f09c:	eb06 050a 	add.w	r5, r6, sl
 801f0a0:	462a      	mov	r2, r5
 801f0a2:	4616      	mov	r6, r2
 801f0a4:	3201      	adds	r2, #1
 801f0a6:	7830      	ldrb	r0, [r6, #0]
 801f0a8:	f7ff ff8a 	bl	801efc0 <__hexdig_fun>
 801f0ac:	2800      	cmp	r0, #0
 801f0ae:	d1f8      	bne.n	801f0a2 <__gethex+0xb6>
 801f0b0:	1bad      	subs	r5, r5, r6
 801f0b2:	00ad      	lsls	r5, r5, #2
 801f0b4:	e004      	b.n	801f0c0 <__gethex+0xd4>
 801f0b6:	2400      	movs	r4, #0
 801f0b8:	4625      	mov	r5, r4
 801f0ba:	e7e0      	b.n	801f07e <__gethex+0x92>
 801f0bc:	2d00      	cmp	r5, #0
 801f0be:	d1f7      	bne.n	801f0b0 <__gethex+0xc4>
 801f0c0:	7833      	ldrb	r3, [r6, #0]
 801f0c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f0c6:	2b50      	cmp	r3, #80	; 0x50
 801f0c8:	d13b      	bne.n	801f142 <__gethex+0x156>
 801f0ca:	7873      	ldrb	r3, [r6, #1]
 801f0cc:	2b2b      	cmp	r3, #43	; 0x2b
 801f0ce:	d02c      	beq.n	801f12a <__gethex+0x13e>
 801f0d0:	2b2d      	cmp	r3, #45	; 0x2d
 801f0d2:	d02e      	beq.n	801f132 <__gethex+0x146>
 801f0d4:	1c71      	adds	r1, r6, #1
 801f0d6:	f04f 0900 	mov.w	r9, #0
 801f0da:	7808      	ldrb	r0, [r1, #0]
 801f0dc:	f7ff ff70 	bl	801efc0 <__hexdig_fun>
 801f0e0:	1e43      	subs	r3, r0, #1
 801f0e2:	b2db      	uxtb	r3, r3
 801f0e4:	2b18      	cmp	r3, #24
 801f0e6:	d82c      	bhi.n	801f142 <__gethex+0x156>
 801f0e8:	f1a0 0210 	sub.w	r2, r0, #16
 801f0ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801f0f0:	f7ff ff66 	bl	801efc0 <__hexdig_fun>
 801f0f4:	1e43      	subs	r3, r0, #1
 801f0f6:	b2db      	uxtb	r3, r3
 801f0f8:	2b18      	cmp	r3, #24
 801f0fa:	d91d      	bls.n	801f138 <__gethex+0x14c>
 801f0fc:	f1b9 0f00 	cmp.w	r9, #0
 801f100:	d000      	beq.n	801f104 <__gethex+0x118>
 801f102:	4252      	negs	r2, r2
 801f104:	4415      	add	r5, r2
 801f106:	f8cb 1000 	str.w	r1, [fp]
 801f10a:	b1e4      	cbz	r4, 801f146 <__gethex+0x15a>
 801f10c:	9b00      	ldr	r3, [sp, #0]
 801f10e:	2b00      	cmp	r3, #0
 801f110:	bf14      	ite	ne
 801f112:	2700      	movne	r7, #0
 801f114:	2706      	moveq	r7, #6
 801f116:	4638      	mov	r0, r7
 801f118:	b009      	add	sp, #36	; 0x24
 801f11a:	ecbd 8b02 	vpop	{d8}
 801f11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f122:	463e      	mov	r6, r7
 801f124:	4625      	mov	r5, r4
 801f126:	2401      	movs	r4, #1
 801f128:	e7ca      	b.n	801f0c0 <__gethex+0xd4>
 801f12a:	f04f 0900 	mov.w	r9, #0
 801f12e:	1cb1      	adds	r1, r6, #2
 801f130:	e7d3      	b.n	801f0da <__gethex+0xee>
 801f132:	f04f 0901 	mov.w	r9, #1
 801f136:	e7fa      	b.n	801f12e <__gethex+0x142>
 801f138:	230a      	movs	r3, #10
 801f13a:	fb03 0202 	mla	r2, r3, r2, r0
 801f13e:	3a10      	subs	r2, #16
 801f140:	e7d4      	b.n	801f0ec <__gethex+0x100>
 801f142:	4631      	mov	r1, r6
 801f144:	e7df      	b.n	801f106 <__gethex+0x11a>
 801f146:	1bf3      	subs	r3, r6, r7
 801f148:	3b01      	subs	r3, #1
 801f14a:	4621      	mov	r1, r4
 801f14c:	2b07      	cmp	r3, #7
 801f14e:	dc0b      	bgt.n	801f168 <__gethex+0x17c>
 801f150:	ee18 0a10 	vmov	r0, s16
 801f154:	f000 fa74 	bl	801f640 <_Balloc>
 801f158:	4604      	mov	r4, r0
 801f15a:	b940      	cbnz	r0, 801f16e <__gethex+0x182>
 801f15c:	4b5d      	ldr	r3, [pc, #372]	; (801f2d4 <__gethex+0x2e8>)
 801f15e:	4602      	mov	r2, r0
 801f160:	21de      	movs	r1, #222	; 0xde
 801f162:	485d      	ldr	r0, [pc, #372]	; (801f2d8 <__gethex+0x2ec>)
 801f164:	f001 f8d0 	bl	8020308 <__assert_func>
 801f168:	3101      	adds	r1, #1
 801f16a:	105b      	asrs	r3, r3, #1
 801f16c:	e7ee      	b.n	801f14c <__gethex+0x160>
 801f16e:	f100 0914 	add.w	r9, r0, #20
 801f172:	f04f 0b00 	mov.w	fp, #0
 801f176:	f1ca 0301 	rsb	r3, sl, #1
 801f17a:	f8cd 9008 	str.w	r9, [sp, #8]
 801f17e:	f8cd b000 	str.w	fp, [sp]
 801f182:	9306      	str	r3, [sp, #24]
 801f184:	42b7      	cmp	r7, r6
 801f186:	d340      	bcc.n	801f20a <__gethex+0x21e>
 801f188:	9802      	ldr	r0, [sp, #8]
 801f18a:	9b00      	ldr	r3, [sp, #0]
 801f18c:	f840 3b04 	str.w	r3, [r0], #4
 801f190:	eba0 0009 	sub.w	r0, r0, r9
 801f194:	1080      	asrs	r0, r0, #2
 801f196:	0146      	lsls	r6, r0, #5
 801f198:	6120      	str	r0, [r4, #16]
 801f19a:	4618      	mov	r0, r3
 801f19c:	f000 fb42 	bl	801f824 <__hi0bits>
 801f1a0:	1a30      	subs	r0, r6, r0
 801f1a2:	f8d8 6000 	ldr.w	r6, [r8]
 801f1a6:	42b0      	cmp	r0, r6
 801f1a8:	dd63      	ble.n	801f272 <__gethex+0x286>
 801f1aa:	1b87      	subs	r7, r0, r6
 801f1ac:	4639      	mov	r1, r7
 801f1ae:	4620      	mov	r0, r4
 801f1b0:	f000 fee6 	bl	801ff80 <__any_on>
 801f1b4:	4682      	mov	sl, r0
 801f1b6:	b1a8      	cbz	r0, 801f1e4 <__gethex+0x1f8>
 801f1b8:	1e7b      	subs	r3, r7, #1
 801f1ba:	1159      	asrs	r1, r3, #5
 801f1bc:	f003 021f 	and.w	r2, r3, #31
 801f1c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801f1c4:	f04f 0a01 	mov.w	sl, #1
 801f1c8:	fa0a f202 	lsl.w	r2, sl, r2
 801f1cc:	420a      	tst	r2, r1
 801f1ce:	d009      	beq.n	801f1e4 <__gethex+0x1f8>
 801f1d0:	4553      	cmp	r3, sl
 801f1d2:	dd05      	ble.n	801f1e0 <__gethex+0x1f4>
 801f1d4:	1eb9      	subs	r1, r7, #2
 801f1d6:	4620      	mov	r0, r4
 801f1d8:	f000 fed2 	bl	801ff80 <__any_on>
 801f1dc:	2800      	cmp	r0, #0
 801f1de:	d145      	bne.n	801f26c <__gethex+0x280>
 801f1e0:	f04f 0a02 	mov.w	sl, #2
 801f1e4:	4639      	mov	r1, r7
 801f1e6:	4620      	mov	r0, r4
 801f1e8:	f7ff fe98 	bl	801ef1c <rshift>
 801f1ec:	443d      	add	r5, r7
 801f1ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f1f2:	42ab      	cmp	r3, r5
 801f1f4:	da4c      	bge.n	801f290 <__gethex+0x2a4>
 801f1f6:	ee18 0a10 	vmov	r0, s16
 801f1fa:	4621      	mov	r1, r4
 801f1fc:	f000 fa60 	bl	801f6c0 <_Bfree>
 801f200:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f202:	2300      	movs	r3, #0
 801f204:	6013      	str	r3, [r2, #0]
 801f206:	27a3      	movs	r7, #163	; 0xa3
 801f208:	e785      	b.n	801f116 <__gethex+0x12a>
 801f20a:	1e73      	subs	r3, r6, #1
 801f20c:	9a05      	ldr	r2, [sp, #20]
 801f20e:	9303      	str	r3, [sp, #12]
 801f210:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f214:	4293      	cmp	r3, r2
 801f216:	d019      	beq.n	801f24c <__gethex+0x260>
 801f218:	f1bb 0f20 	cmp.w	fp, #32
 801f21c:	d107      	bne.n	801f22e <__gethex+0x242>
 801f21e:	9b02      	ldr	r3, [sp, #8]
 801f220:	9a00      	ldr	r2, [sp, #0]
 801f222:	f843 2b04 	str.w	r2, [r3], #4
 801f226:	9302      	str	r3, [sp, #8]
 801f228:	2300      	movs	r3, #0
 801f22a:	9300      	str	r3, [sp, #0]
 801f22c:	469b      	mov	fp, r3
 801f22e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801f232:	f7ff fec5 	bl	801efc0 <__hexdig_fun>
 801f236:	9b00      	ldr	r3, [sp, #0]
 801f238:	f000 000f 	and.w	r0, r0, #15
 801f23c:	fa00 f00b 	lsl.w	r0, r0, fp
 801f240:	4303      	orrs	r3, r0
 801f242:	9300      	str	r3, [sp, #0]
 801f244:	f10b 0b04 	add.w	fp, fp, #4
 801f248:	9b03      	ldr	r3, [sp, #12]
 801f24a:	e00d      	b.n	801f268 <__gethex+0x27c>
 801f24c:	9b03      	ldr	r3, [sp, #12]
 801f24e:	9a06      	ldr	r2, [sp, #24]
 801f250:	4413      	add	r3, r2
 801f252:	42bb      	cmp	r3, r7
 801f254:	d3e0      	bcc.n	801f218 <__gethex+0x22c>
 801f256:	4618      	mov	r0, r3
 801f258:	9901      	ldr	r1, [sp, #4]
 801f25a:	9307      	str	r3, [sp, #28]
 801f25c:	4652      	mov	r2, sl
 801f25e:	f001 f831 	bl	80202c4 <strncmp>
 801f262:	9b07      	ldr	r3, [sp, #28]
 801f264:	2800      	cmp	r0, #0
 801f266:	d1d7      	bne.n	801f218 <__gethex+0x22c>
 801f268:	461e      	mov	r6, r3
 801f26a:	e78b      	b.n	801f184 <__gethex+0x198>
 801f26c:	f04f 0a03 	mov.w	sl, #3
 801f270:	e7b8      	b.n	801f1e4 <__gethex+0x1f8>
 801f272:	da0a      	bge.n	801f28a <__gethex+0x29e>
 801f274:	1a37      	subs	r7, r6, r0
 801f276:	4621      	mov	r1, r4
 801f278:	ee18 0a10 	vmov	r0, s16
 801f27c:	463a      	mov	r2, r7
 801f27e:	f000 fc3b 	bl	801faf8 <__lshift>
 801f282:	1bed      	subs	r5, r5, r7
 801f284:	4604      	mov	r4, r0
 801f286:	f100 0914 	add.w	r9, r0, #20
 801f28a:	f04f 0a00 	mov.w	sl, #0
 801f28e:	e7ae      	b.n	801f1ee <__gethex+0x202>
 801f290:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801f294:	42a8      	cmp	r0, r5
 801f296:	dd72      	ble.n	801f37e <__gethex+0x392>
 801f298:	1b45      	subs	r5, r0, r5
 801f29a:	42ae      	cmp	r6, r5
 801f29c:	dc36      	bgt.n	801f30c <__gethex+0x320>
 801f29e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f2a2:	2b02      	cmp	r3, #2
 801f2a4:	d02a      	beq.n	801f2fc <__gethex+0x310>
 801f2a6:	2b03      	cmp	r3, #3
 801f2a8:	d02c      	beq.n	801f304 <__gethex+0x318>
 801f2aa:	2b01      	cmp	r3, #1
 801f2ac:	d11c      	bne.n	801f2e8 <__gethex+0x2fc>
 801f2ae:	42ae      	cmp	r6, r5
 801f2b0:	d11a      	bne.n	801f2e8 <__gethex+0x2fc>
 801f2b2:	2e01      	cmp	r6, #1
 801f2b4:	d112      	bne.n	801f2dc <__gethex+0x2f0>
 801f2b6:	9a04      	ldr	r2, [sp, #16]
 801f2b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801f2bc:	6013      	str	r3, [r2, #0]
 801f2be:	2301      	movs	r3, #1
 801f2c0:	6123      	str	r3, [r4, #16]
 801f2c2:	f8c9 3000 	str.w	r3, [r9]
 801f2c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f2c8:	2762      	movs	r7, #98	; 0x62
 801f2ca:	601c      	str	r4, [r3, #0]
 801f2cc:	e723      	b.n	801f116 <__gethex+0x12a>
 801f2ce:	bf00      	nop
 801f2d0:	08022fd8 	.word	0x08022fd8
 801f2d4:	08022f60 	.word	0x08022f60
 801f2d8:	08022f71 	.word	0x08022f71
 801f2dc:	1e71      	subs	r1, r6, #1
 801f2de:	4620      	mov	r0, r4
 801f2e0:	f000 fe4e 	bl	801ff80 <__any_on>
 801f2e4:	2800      	cmp	r0, #0
 801f2e6:	d1e6      	bne.n	801f2b6 <__gethex+0x2ca>
 801f2e8:	ee18 0a10 	vmov	r0, s16
 801f2ec:	4621      	mov	r1, r4
 801f2ee:	f000 f9e7 	bl	801f6c0 <_Bfree>
 801f2f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f2f4:	2300      	movs	r3, #0
 801f2f6:	6013      	str	r3, [r2, #0]
 801f2f8:	2750      	movs	r7, #80	; 0x50
 801f2fa:	e70c      	b.n	801f116 <__gethex+0x12a>
 801f2fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f2fe:	2b00      	cmp	r3, #0
 801f300:	d1f2      	bne.n	801f2e8 <__gethex+0x2fc>
 801f302:	e7d8      	b.n	801f2b6 <__gethex+0x2ca>
 801f304:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f306:	2b00      	cmp	r3, #0
 801f308:	d1d5      	bne.n	801f2b6 <__gethex+0x2ca>
 801f30a:	e7ed      	b.n	801f2e8 <__gethex+0x2fc>
 801f30c:	1e6f      	subs	r7, r5, #1
 801f30e:	f1ba 0f00 	cmp.w	sl, #0
 801f312:	d131      	bne.n	801f378 <__gethex+0x38c>
 801f314:	b127      	cbz	r7, 801f320 <__gethex+0x334>
 801f316:	4639      	mov	r1, r7
 801f318:	4620      	mov	r0, r4
 801f31a:	f000 fe31 	bl	801ff80 <__any_on>
 801f31e:	4682      	mov	sl, r0
 801f320:	117b      	asrs	r3, r7, #5
 801f322:	2101      	movs	r1, #1
 801f324:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801f328:	f007 071f 	and.w	r7, r7, #31
 801f32c:	fa01 f707 	lsl.w	r7, r1, r7
 801f330:	421f      	tst	r7, r3
 801f332:	4629      	mov	r1, r5
 801f334:	4620      	mov	r0, r4
 801f336:	bf18      	it	ne
 801f338:	f04a 0a02 	orrne.w	sl, sl, #2
 801f33c:	1b76      	subs	r6, r6, r5
 801f33e:	f7ff fded 	bl	801ef1c <rshift>
 801f342:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801f346:	2702      	movs	r7, #2
 801f348:	f1ba 0f00 	cmp.w	sl, #0
 801f34c:	d048      	beq.n	801f3e0 <__gethex+0x3f4>
 801f34e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f352:	2b02      	cmp	r3, #2
 801f354:	d015      	beq.n	801f382 <__gethex+0x396>
 801f356:	2b03      	cmp	r3, #3
 801f358:	d017      	beq.n	801f38a <__gethex+0x39e>
 801f35a:	2b01      	cmp	r3, #1
 801f35c:	d109      	bne.n	801f372 <__gethex+0x386>
 801f35e:	f01a 0f02 	tst.w	sl, #2
 801f362:	d006      	beq.n	801f372 <__gethex+0x386>
 801f364:	f8d9 0000 	ldr.w	r0, [r9]
 801f368:	ea4a 0a00 	orr.w	sl, sl, r0
 801f36c:	f01a 0f01 	tst.w	sl, #1
 801f370:	d10e      	bne.n	801f390 <__gethex+0x3a4>
 801f372:	f047 0710 	orr.w	r7, r7, #16
 801f376:	e033      	b.n	801f3e0 <__gethex+0x3f4>
 801f378:	f04f 0a01 	mov.w	sl, #1
 801f37c:	e7d0      	b.n	801f320 <__gethex+0x334>
 801f37e:	2701      	movs	r7, #1
 801f380:	e7e2      	b.n	801f348 <__gethex+0x35c>
 801f382:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f384:	f1c3 0301 	rsb	r3, r3, #1
 801f388:	9315      	str	r3, [sp, #84]	; 0x54
 801f38a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f38c:	2b00      	cmp	r3, #0
 801f38e:	d0f0      	beq.n	801f372 <__gethex+0x386>
 801f390:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801f394:	f104 0314 	add.w	r3, r4, #20
 801f398:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801f39c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801f3a0:	f04f 0c00 	mov.w	ip, #0
 801f3a4:	4618      	mov	r0, r3
 801f3a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801f3aa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801f3ae:	d01c      	beq.n	801f3ea <__gethex+0x3fe>
 801f3b0:	3201      	adds	r2, #1
 801f3b2:	6002      	str	r2, [r0, #0]
 801f3b4:	2f02      	cmp	r7, #2
 801f3b6:	f104 0314 	add.w	r3, r4, #20
 801f3ba:	d13f      	bne.n	801f43c <__gethex+0x450>
 801f3bc:	f8d8 2000 	ldr.w	r2, [r8]
 801f3c0:	3a01      	subs	r2, #1
 801f3c2:	42b2      	cmp	r2, r6
 801f3c4:	d10a      	bne.n	801f3dc <__gethex+0x3f0>
 801f3c6:	1171      	asrs	r1, r6, #5
 801f3c8:	2201      	movs	r2, #1
 801f3ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801f3ce:	f006 061f 	and.w	r6, r6, #31
 801f3d2:	fa02 f606 	lsl.w	r6, r2, r6
 801f3d6:	421e      	tst	r6, r3
 801f3d8:	bf18      	it	ne
 801f3da:	4617      	movne	r7, r2
 801f3dc:	f047 0720 	orr.w	r7, r7, #32
 801f3e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f3e2:	601c      	str	r4, [r3, #0]
 801f3e4:	9b04      	ldr	r3, [sp, #16]
 801f3e6:	601d      	str	r5, [r3, #0]
 801f3e8:	e695      	b.n	801f116 <__gethex+0x12a>
 801f3ea:	4299      	cmp	r1, r3
 801f3ec:	f843 cc04 	str.w	ip, [r3, #-4]
 801f3f0:	d8d8      	bhi.n	801f3a4 <__gethex+0x3b8>
 801f3f2:	68a3      	ldr	r3, [r4, #8]
 801f3f4:	459b      	cmp	fp, r3
 801f3f6:	db19      	blt.n	801f42c <__gethex+0x440>
 801f3f8:	6861      	ldr	r1, [r4, #4]
 801f3fa:	ee18 0a10 	vmov	r0, s16
 801f3fe:	3101      	adds	r1, #1
 801f400:	f000 f91e 	bl	801f640 <_Balloc>
 801f404:	4681      	mov	r9, r0
 801f406:	b918      	cbnz	r0, 801f410 <__gethex+0x424>
 801f408:	4b1a      	ldr	r3, [pc, #104]	; (801f474 <__gethex+0x488>)
 801f40a:	4602      	mov	r2, r0
 801f40c:	2184      	movs	r1, #132	; 0x84
 801f40e:	e6a8      	b.n	801f162 <__gethex+0x176>
 801f410:	6922      	ldr	r2, [r4, #16]
 801f412:	3202      	adds	r2, #2
 801f414:	f104 010c 	add.w	r1, r4, #12
 801f418:	0092      	lsls	r2, r2, #2
 801f41a:	300c      	adds	r0, #12
 801f41c:	f7fd f9be 	bl	801c79c <memcpy>
 801f420:	4621      	mov	r1, r4
 801f422:	ee18 0a10 	vmov	r0, s16
 801f426:	f000 f94b 	bl	801f6c0 <_Bfree>
 801f42a:	464c      	mov	r4, r9
 801f42c:	6923      	ldr	r3, [r4, #16]
 801f42e:	1c5a      	adds	r2, r3, #1
 801f430:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f434:	6122      	str	r2, [r4, #16]
 801f436:	2201      	movs	r2, #1
 801f438:	615a      	str	r2, [r3, #20]
 801f43a:	e7bb      	b.n	801f3b4 <__gethex+0x3c8>
 801f43c:	6922      	ldr	r2, [r4, #16]
 801f43e:	455a      	cmp	r2, fp
 801f440:	dd0b      	ble.n	801f45a <__gethex+0x46e>
 801f442:	2101      	movs	r1, #1
 801f444:	4620      	mov	r0, r4
 801f446:	f7ff fd69 	bl	801ef1c <rshift>
 801f44a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f44e:	3501      	adds	r5, #1
 801f450:	42ab      	cmp	r3, r5
 801f452:	f6ff aed0 	blt.w	801f1f6 <__gethex+0x20a>
 801f456:	2701      	movs	r7, #1
 801f458:	e7c0      	b.n	801f3dc <__gethex+0x3f0>
 801f45a:	f016 061f 	ands.w	r6, r6, #31
 801f45e:	d0fa      	beq.n	801f456 <__gethex+0x46a>
 801f460:	4453      	add	r3, sl
 801f462:	f1c6 0620 	rsb	r6, r6, #32
 801f466:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801f46a:	f000 f9db 	bl	801f824 <__hi0bits>
 801f46e:	42b0      	cmp	r0, r6
 801f470:	dbe7      	blt.n	801f442 <__gethex+0x456>
 801f472:	e7f0      	b.n	801f456 <__gethex+0x46a>
 801f474:	08022f60 	.word	0x08022f60

0801f478 <L_shift>:
 801f478:	f1c2 0208 	rsb	r2, r2, #8
 801f47c:	0092      	lsls	r2, r2, #2
 801f47e:	b570      	push	{r4, r5, r6, lr}
 801f480:	f1c2 0620 	rsb	r6, r2, #32
 801f484:	6843      	ldr	r3, [r0, #4]
 801f486:	6804      	ldr	r4, [r0, #0]
 801f488:	fa03 f506 	lsl.w	r5, r3, r6
 801f48c:	432c      	orrs	r4, r5
 801f48e:	40d3      	lsrs	r3, r2
 801f490:	6004      	str	r4, [r0, #0]
 801f492:	f840 3f04 	str.w	r3, [r0, #4]!
 801f496:	4288      	cmp	r0, r1
 801f498:	d3f4      	bcc.n	801f484 <L_shift+0xc>
 801f49a:	bd70      	pop	{r4, r5, r6, pc}

0801f49c <__match>:
 801f49c:	b530      	push	{r4, r5, lr}
 801f49e:	6803      	ldr	r3, [r0, #0]
 801f4a0:	3301      	adds	r3, #1
 801f4a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f4a6:	b914      	cbnz	r4, 801f4ae <__match+0x12>
 801f4a8:	6003      	str	r3, [r0, #0]
 801f4aa:	2001      	movs	r0, #1
 801f4ac:	bd30      	pop	{r4, r5, pc}
 801f4ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f4b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801f4b6:	2d19      	cmp	r5, #25
 801f4b8:	bf98      	it	ls
 801f4ba:	3220      	addls	r2, #32
 801f4bc:	42a2      	cmp	r2, r4
 801f4be:	d0f0      	beq.n	801f4a2 <__match+0x6>
 801f4c0:	2000      	movs	r0, #0
 801f4c2:	e7f3      	b.n	801f4ac <__match+0x10>

0801f4c4 <__hexnan>:
 801f4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4c8:	680b      	ldr	r3, [r1, #0]
 801f4ca:	115e      	asrs	r6, r3, #5
 801f4cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801f4d0:	f013 031f 	ands.w	r3, r3, #31
 801f4d4:	b087      	sub	sp, #28
 801f4d6:	bf18      	it	ne
 801f4d8:	3604      	addne	r6, #4
 801f4da:	2500      	movs	r5, #0
 801f4dc:	1f37      	subs	r7, r6, #4
 801f4de:	4690      	mov	r8, r2
 801f4e0:	6802      	ldr	r2, [r0, #0]
 801f4e2:	9301      	str	r3, [sp, #4]
 801f4e4:	4682      	mov	sl, r0
 801f4e6:	f846 5c04 	str.w	r5, [r6, #-4]
 801f4ea:	46b9      	mov	r9, r7
 801f4ec:	463c      	mov	r4, r7
 801f4ee:	9502      	str	r5, [sp, #8]
 801f4f0:	46ab      	mov	fp, r5
 801f4f2:	7851      	ldrb	r1, [r2, #1]
 801f4f4:	1c53      	adds	r3, r2, #1
 801f4f6:	9303      	str	r3, [sp, #12]
 801f4f8:	b341      	cbz	r1, 801f54c <__hexnan+0x88>
 801f4fa:	4608      	mov	r0, r1
 801f4fc:	9205      	str	r2, [sp, #20]
 801f4fe:	9104      	str	r1, [sp, #16]
 801f500:	f7ff fd5e 	bl	801efc0 <__hexdig_fun>
 801f504:	2800      	cmp	r0, #0
 801f506:	d14f      	bne.n	801f5a8 <__hexnan+0xe4>
 801f508:	9904      	ldr	r1, [sp, #16]
 801f50a:	9a05      	ldr	r2, [sp, #20]
 801f50c:	2920      	cmp	r1, #32
 801f50e:	d818      	bhi.n	801f542 <__hexnan+0x7e>
 801f510:	9b02      	ldr	r3, [sp, #8]
 801f512:	459b      	cmp	fp, r3
 801f514:	dd13      	ble.n	801f53e <__hexnan+0x7a>
 801f516:	454c      	cmp	r4, r9
 801f518:	d206      	bcs.n	801f528 <__hexnan+0x64>
 801f51a:	2d07      	cmp	r5, #7
 801f51c:	dc04      	bgt.n	801f528 <__hexnan+0x64>
 801f51e:	462a      	mov	r2, r5
 801f520:	4649      	mov	r1, r9
 801f522:	4620      	mov	r0, r4
 801f524:	f7ff ffa8 	bl	801f478 <L_shift>
 801f528:	4544      	cmp	r4, r8
 801f52a:	d950      	bls.n	801f5ce <__hexnan+0x10a>
 801f52c:	2300      	movs	r3, #0
 801f52e:	f1a4 0904 	sub.w	r9, r4, #4
 801f532:	f844 3c04 	str.w	r3, [r4, #-4]
 801f536:	f8cd b008 	str.w	fp, [sp, #8]
 801f53a:	464c      	mov	r4, r9
 801f53c:	461d      	mov	r5, r3
 801f53e:	9a03      	ldr	r2, [sp, #12]
 801f540:	e7d7      	b.n	801f4f2 <__hexnan+0x2e>
 801f542:	2929      	cmp	r1, #41	; 0x29
 801f544:	d156      	bne.n	801f5f4 <__hexnan+0x130>
 801f546:	3202      	adds	r2, #2
 801f548:	f8ca 2000 	str.w	r2, [sl]
 801f54c:	f1bb 0f00 	cmp.w	fp, #0
 801f550:	d050      	beq.n	801f5f4 <__hexnan+0x130>
 801f552:	454c      	cmp	r4, r9
 801f554:	d206      	bcs.n	801f564 <__hexnan+0xa0>
 801f556:	2d07      	cmp	r5, #7
 801f558:	dc04      	bgt.n	801f564 <__hexnan+0xa0>
 801f55a:	462a      	mov	r2, r5
 801f55c:	4649      	mov	r1, r9
 801f55e:	4620      	mov	r0, r4
 801f560:	f7ff ff8a 	bl	801f478 <L_shift>
 801f564:	4544      	cmp	r4, r8
 801f566:	d934      	bls.n	801f5d2 <__hexnan+0x10e>
 801f568:	f1a8 0204 	sub.w	r2, r8, #4
 801f56c:	4623      	mov	r3, r4
 801f56e:	f853 1b04 	ldr.w	r1, [r3], #4
 801f572:	f842 1f04 	str.w	r1, [r2, #4]!
 801f576:	429f      	cmp	r7, r3
 801f578:	d2f9      	bcs.n	801f56e <__hexnan+0xaa>
 801f57a:	1b3b      	subs	r3, r7, r4
 801f57c:	f023 0303 	bic.w	r3, r3, #3
 801f580:	3304      	adds	r3, #4
 801f582:	3401      	adds	r4, #1
 801f584:	3e03      	subs	r6, #3
 801f586:	42b4      	cmp	r4, r6
 801f588:	bf88      	it	hi
 801f58a:	2304      	movhi	r3, #4
 801f58c:	4443      	add	r3, r8
 801f58e:	2200      	movs	r2, #0
 801f590:	f843 2b04 	str.w	r2, [r3], #4
 801f594:	429f      	cmp	r7, r3
 801f596:	d2fb      	bcs.n	801f590 <__hexnan+0xcc>
 801f598:	683b      	ldr	r3, [r7, #0]
 801f59a:	b91b      	cbnz	r3, 801f5a4 <__hexnan+0xe0>
 801f59c:	4547      	cmp	r7, r8
 801f59e:	d127      	bne.n	801f5f0 <__hexnan+0x12c>
 801f5a0:	2301      	movs	r3, #1
 801f5a2:	603b      	str	r3, [r7, #0]
 801f5a4:	2005      	movs	r0, #5
 801f5a6:	e026      	b.n	801f5f6 <__hexnan+0x132>
 801f5a8:	3501      	adds	r5, #1
 801f5aa:	2d08      	cmp	r5, #8
 801f5ac:	f10b 0b01 	add.w	fp, fp, #1
 801f5b0:	dd06      	ble.n	801f5c0 <__hexnan+0xfc>
 801f5b2:	4544      	cmp	r4, r8
 801f5b4:	d9c3      	bls.n	801f53e <__hexnan+0x7a>
 801f5b6:	2300      	movs	r3, #0
 801f5b8:	f844 3c04 	str.w	r3, [r4, #-4]
 801f5bc:	2501      	movs	r5, #1
 801f5be:	3c04      	subs	r4, #4
 801f5c0:	6822      	ldr	r2, [r4, #0]
 801f5c2:	f000 000f 	and.w	r0, r0, #15
 801f5c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801f5ca:	6022      	str	r2, [r4, #0]
 801f5cc:	e7b7      	b.n	801f53e <__hexnan+0x7a>
 801f5ce:	2508      	movs	r5, #8
 801f5d0:	e7b5      	b.n	801f53e <__hexnan+0x7a>
 801f5d2:	9b01      	ldr	r3, [sp, #4]
 801f5d4:	2b00      	cmp	r3, #0
 801f5d6:	d0df      	beq.n	801f598 <__hexnan+0xd4>
 801f5d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f5dc:	f1c3 0320 	rsb	r3, r3, #32
 801f5e0:	fa22 f303 	lsr.w	r3, r2, r3
 801f5e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801f5e8:	401a      	ands	r2, r3
 801f5ea:	f846 2c04 	str.w	r2, [r6, #-4]
 801f5ee:	e7d3      	b.n	801f598 <__hexnan+0xd4>
 801f5f0:	3f04      	subs	r7, #4
 801f5f2:	e7d1      	b.n	801f598 <__hexnan+0xd4>
 801f5f4:	2004      	movs	r0, #4
 801f5f6:	b007      	add	sp, #28
 801f5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f5fc <_localeconv_r>:
 801f5fc:	4800      	ldr	r0, [pc, #0]	; (801f600 <_localeconv_r+0x4>)
 801f5fe:	4770      	bx	lr
 801f600:	200004fc 	.word	0x200004fc

0801f604 <__ascii_mbtowc>:
 801f604:	b082      	sub	sp, #8
 801f606:	b901      	cbnz	r1, 801f60a <__ascii_mbtowc+0x6>
 801f608:	a901      	add	r1, sp, #4
 801f60a:	b142      	cbz	r2, 801f61e <__ascii_mbtowc+0x1a>
 801f60c:	b14b      	cbz	r3, 801f622 <__ascii_mbtowc+0x1e>
 801f60e:	7813      	ldrb	r3, [r2, #0]
 801f610:	600b      	str	r3, [r1, #0]
 801f612:	7812      	ldrb	r2, [r2, #0]
 801f614:	1e10      	subs	r0, r2, #0
 801f616:	bf18      	it	ne
 801f618:	2001      	movne	r0, #1
 801f61a:	b002      	add	sp, #8
 801f61c:	4770      	bx	lr
 801f61e:	4610      	mov	r0, r2
 801f620:	e7fb      	b.n	801f61a <__ascii_mbtowc+0x16>
 801f622:	f06f 0001 	mvn.w	r0, #1
 801f626:	e7f8      	b.n	801f61a <__ascii_mbtowc+0x16>

0801f628 <__malloc_lock>:
 801f628:	4801      	ldr	r0, [pc, #4]	; (801f630 <__malloc_lock+0x8>)
 801f62a:	f000 be9e 	b.w	802036a <__retarget_lock_acquire_recursive>
 801f62e:	bf00      	nop
 801f630:	20007e70 	.word	0x20007e70

0801f634 <__malloc_unlock>:
 801f634:	4801      	ldr	r0, [pc, #4]	; (801f63c <__malloc_unlock+0x8>)
 801f636:	f000 be99 	b.w	802036c <__retarget_lock_release_recursive>
 801f63a:	bf00      	nop
 801f63c:	20007e70 	.word	0x20007e70

0801f640 <_Balloc>:
 801f640:	b570      	push	{r4, r5, r6, lr}
 801f642:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801f644:	4604      	mov	r4, r0
 801f646:	460d      	mov	r5, r1
 801f648:	b976      	cbnz	r6, 801f668 <_Balloc+0x28>
 801f64a:	2010      	movs	r0, #16
 801f64c:	f7fd f896 	bl	801c77c <malloc>
 801f650:	4602      	mov	r2, r0
 801f652:	6260      	str	r0, [r4, #36]	; 0x24
 801f654:	b920      	cbnz	r0, 801f660 <_Balloc+0x20>
 801f656:	4b18      	ldr	r3, [pc, #96]	; (801f6b8 <_Balloc+0x78>)
 801f658:	4818      	ldr	r0, [pc, #96]	; (801f6bc <_Balloc+0x7c>)
 801f65a:	2166      	movs	r1, #102	; 0x66
 801f65c:	f000 fe54 	bl	8020308 <__assert_func>
 801f660:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f664:	6006      	str	r6, [r0, #0]
 801f666:	60c6      	str	r6, [r0, #12]
 801f668:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801f66a:	68f3      	ldr	r3, [r6, #12]
 801f66c:	b183      	cbz	r3, 801f690 <_Balloc+0x50>
 801f66e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f670:	68db      	ldr	r3, [r3, #12]
 801f672:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f676:	b9b8      	cbnz	r0, 801f6a8 <_Balloc+0x68>
 801f678:	2101      	movs	r1, #1
 801f67a:	fa01 f605 	lsl.w	r6, r1, r5
 801f67e:	1d72      	adds	r2, r6, #5
 801f680:	0092      	lsls	r2, r2, #2
 801f682:	4620      	mov	r0, r4
 801f684:	f000 fc9d 	bl	801ffc2 <_calloc_r>
 801f688:	b160      	cbz	r0, 801f6a4 <_Balloc+0x64>
 801f68a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801f68e:	e00e      	b.n	801f6ae <_Balloc+0x6e>
 801f690:	2221      	movs	r2, #33	; 0x21
 801f692:	2104      	movs	r1, #4
 801f694:	4620      	mov	r0, r4
 801f696:	f000 fc94 	bl	801ffc2 <_calloc_r>
 801f69a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f69c:	60f0      	str	r0, [r6, #12]
 801f69e:	68db      	ldr	r3, [r3, #12]
 801f6a0:	2b00      	cmp	r3, #0
 801f6a2:	d1e4      	bne.n	801f66e <_Balloc+0x2e>
 801f6a4:	2000      	movs	r0, #0
 801f6a6:	bd70      	pop	{r4, r5, r6, pc}
 801f6a8:	6802      	ldr	r2, [r0, #0]
 801f6aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f6ae:	2300      	movs	r3, #0
 801f6b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f6b4:	e7f7      	b.n	801f6a6 <_Balloc+0x66>
 801f6b6:	bf00      	nop
 801f6b8:	08022eee 	.word	0x08022eee
 801f6bc:	08022fec 	.word	0x08022fec

0801f6c0 <_Bfree>:
 801f6c0:	b570      	push	{r4, r5, r6, lr}
 801f6c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801f6c4:	4605      	mov	r5, r0
 801f6c6:	460c      	mov	r4, r1
 801f6c8:	b976      	cbnz	r6, 801f6e8 <_Bfree+0x28>
 801f6ca:	2010      	movs	r0, #16
 801f6cc:	f7fd f856 	bl	801c77c <malloc>
 801f6d0:	4602      	mov	r2, r0
 801f6d2:	6268      	str	r0, [r5, #36]	; 0x24
 801f6d4:	b920      	cbnz	r0, 801f6e0 <_Bfree+0x20>
 801f6d6:	4b09      	ldr	r3, [pc, #36]	; (801f6fc <_Bfree+0x3c>)
 801f6d8:	4809      	ldr	r0, [pc, #36]	; (801f700 <_Bfree+0x40>)
 801f6da:	218a      	movs	r1, #138	; 0x8a
 801f6dc:	f000 fe14 	bl	8020308 <__assert_func>
 801f6e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f6e4:	6006      	str	r6, [r0, #0]
 801f6e6:	60c6      	str	r6, [r0, #12]
 801f6e8:	b13c      	cbz	r4, 801f6fa <_Bfree+0x3a>
 801f6ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801f6ec:	6862      	ldr	r2, [r4, #4]
 801f6ee:	68db      	ldr	r3, [r3, #12]
 801f6f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f6f4:	6021      	str	r1, [r4, #0]
 801f6f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f6fa:	bd70      	pop	{r4, r5, r6, pc}
 801f6fc:	08022eee 	.word	0x08022eee
 801f700:	08022fec 	.word	0x08022fec

0801f704 <__multadd>:
 801f704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f708:	690d      	ldr	r5, [r1, #16]
 801f70a:	4607      	mov	r7, r0
 801f70c:	460c      	mov	r4, r1
 801f70e:	461e      	mov	r6, r3
 801f710:	f101 0c14 	add.w	ip, r1, #20
 801f714:	2000      	movs	r0, #0
 801f716:	f8dc 3000 	ldr.w	r3, [ip]
 801f71a:	b299      	uxth	r1, r3
 801f71c:	fb02 6101 	mla	r1, r2, r1, r6
 801f720:	0c1e      	lsrs	r6, r3, #16
 801f722:	0c0b      	lsrs	r3, r1, #16
 801f724:	fb02 3306 	mla	r3, r2, r6, r3
 801f728:	b289      	uxth	r1, r1
 801f72a:	3001      	adds	r0, #1
 801f72c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f730:	4285      	cmp	r5, r0
 801f732:	f84c 1b04 	str.w	r1, [ip], #4
 801f736:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f73a:	dcec      	bgt.n	801f716 <__multadd+0x12>
 801f73c:	b30e      	cbz	r6, 801f782 <__multadd+0x7e>
 801f73e:	68a3      	ldr	r3, [r4, #8]
 801f740:	42ab      	cmp	r3, r5
 801f742:	dc19      	bgt.n	801f778 <__multadd+0x74>
 801f744:	6861      	ldr	r1, [r4, #4]
 801f746:	4638      	mov	r0, r7
 801f748:	3101      	adds	r1, #1
 801f74a:	f7ff ff79 	bl	801f640 <_Balloc>
 801f74e:	4680      	mov	r8, r0
 801f750:	b928      	cbnz	r0, 801f75e <__multadd+0x5a>
 801f752:	4602      	mov	r2, r0
 801f754:	4b0c      	ldr	r3, [pc, #48]	; (801f788 <__multadd+0x84>)
 801f756:	480d      	ldr	r0, [pc, #52]	; (801f78c <__multadd+0x88>)
 801f758:	21b5      	movs	r1, #181	; 0xb5
 801f75a:	f000 fdd5 	bl	8020308 <__assert_func>
 801f75e:	6922      	ldr	r2, [r4, #16]
 801f760:	3202      	adds	r2, #2
 801f762:	f104 010c 	add.w	r1, r4, #12
 801f766:	0092      	lsls	r2, r2, #2
 801f768:	300c      	adds	r0, #12
 801f76a:	f7fd f817 	bl	801c79c <memcpy>
 801f76e:	4621      	mov	r1, r4
 801f770:	4638      	mov	r0, r7
 801f772:	f7ff ffa5 	bl	801f6c0 <_Bfree>
 801f776:	4644      	mov	r4, r8
 801f778:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f77c:	3501      	adds	r5, #1
 801f77e:	615e      	str	r6, [r3, #20]
 801f780:	6125      	str	r5, [r4, #16]
 801f782:	4620      	mov	r0, r4
 801f784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f788:	08022f60 	.word	0x08022f60
 801f78c:	08022fec 	.word	0x08022fec

0801f790 <__s2b>:
 801f790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f794:	460c      	mov	r4, r1
 801f796:	4615      	mov	r5, r2
 801f798:	461f      	mov	r7, r3
 801f79a:	2209      	movs	r2, #9
 801f79c:	3308      	adds	r3, #8
 801f79e:	4606      	mov	r6, r0
 801f7a0:	fb93 f3f2 	sdiv	r3, r3, r2
 801f7a4:	2100      	movs	r1, #0
 801f7a6:	2201      	movs	r2, #1
 801f7a8:	429a      	cmp	r2, r3
 801f7aa:	db09      	blt.n	801f7c0 <__s2b+0x30>
 801f7ac:	4630      	mov	r0, r6
 801f7ae:	f7ff ff47 	bl	801f640 <_Balloc>
 801f7b2:	b940      	cbnz	r0, 801f7c6 <__s2b+0x36>
 801f7b4:	4602      	mov	r2, r0
 801f7b6:	4b19      	ldr	r3, [pc, #100]	; (801f81c <__s2b+0x8c>)
 801f7b8:	4819      	ldr	r0, [pc, #100]	; (801f820 <__s2b+0x90>)
 801f7ba:	21ce      	movs	r1, #206	; 0xce
 801f7bc:	f000 fda4 	bl	8020308 <__assert_func>
 801f7c0:	0052      	lsls	r2, r2, #1
 801f7c2:	3101      	adds	r1, #1
 801f7c4:	e7f0      	b.n	801f7a8 <__s2b+0x18>
 801f7c6:	9b08      	ldr	r3, [sp, #32]
 801f7c8:	6143      	str	r3, [r0, #20]
 801f7ca:	2d09      	cmp	r5, #9
 801f7cc:	f04f 0301 	mov.w	r3, #1
 801f7d0:	6103      	str	r3, [r0, #16]
 801f7d2:	dd16      	ble.n	801f802 <__s2b+0x72>
 801f7d4:	f104 0909 	add.w	r9, r4, #9
 801f7d8:	46c8      	mov	r8, r9
 801f7da:	442c      	add	r4, r5
 801f7dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 801f7e0:	4601      	mov	r1, r0
 801f7e2:	3b30      	subs	r3, #48	; 0x30
 801f7e4:	220a      	movs	r2, #10
 801f7e6:	4630      	mov	r0, r6
 801f7e8:	f7ff ff8c 	bl	801f704 <__multadd>
 801f7ec:	45a0      	cmp	r8, r4
 801f7ee:	d1f5      	bne.n	801f7dc <__s2b+0x4c>
 801f7f0:	f1a5 0408 	sub.w	r4, r5, #8
 801f7f4:	444c      	add	r4, r9
 801f7f6:	1b2d      	subs	r5, r5, r4
 801f7f8:	1963      	adds	r3, r4, r5
 801f7fa:	42bb      	cmp	r3, r7
 801f7fc:	db04      	blt.n	801f808 <__s2b+0x78>
 801f7fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f802:	340a      	adds	r4, #10
 801f804:	2509      	movs	r5, #9
 801f806:	e7f6      	b.n	801f7f6 <__s2b+0x66>
 801f808:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f80c:	4601      	mov	r1, r0
 801f80e:	3b30      	subs	r3, #48	; 0x30
 801f810:	220a      	movs	r2, #10
 801f812:	4630      	mov	r0, r6
 801f814:	f7ff ff76 	bl	801f704 <__multadd>
 801f818:	e7ee      	b.n	801f7f8 <__s2b+0x68>
 801f81a:	bf00      	nop
 801f81c:	08022f60 	.word	0x08022f60
 801f820:	08022fec 	.word	0x08022fec

0801f824 <__hi0bits>:
 801f824:	0c03      	lsrs	r3, r0, #16
 801f826:	041b      	lsls	r3, r3, #16
 801f828:	b9d3      	cbnz	r3, 801f860 <__hi0bits+0x3c>
 801f82a:	0400      	lsls	r0, r0, #16
 801f82c:	2310      	movs	r3, #16
 801f82e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801f832:	bf04      	itt	eq
 801f834:	0200      	lsleq	r0, r0, #8
 801f836:	3308      	addeq	r3, #8
 801f838:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801f83c:	bf04      	itt	eq
 801f83e:	0100      	lsleq	r0, r0, #4
 801f840:	3304      	addeq	r3, #4
 801f842:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801f846:	bf04      	itt	eq
 801f848:	0080      	lsleq	r0, r0, #2
 801f84a:	3302      	addeq	r3, #2
 801f84c:	2800      	cmp	r0, #0
 801f84e:	db05      	blt.n	801f85c <__hi0bits+0x38>
 801f850:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801f854:	f103 0301 	add.w	r3, r3, #1
 801f858:	bf08      	it	eq
 801f85a:	2320      	moveq	r3, #32
 801f85c:	4618      	mov	r0, r3
 801f85e:	4770      	bx	lr
 801f860:	2300      	movs	r3, #0
 801f862:	e7e4      	b.n	801f82e <__hi0bits+0xa>

0801f864 <__lo0bits>:
 801f864:	6803      	ldr	r3, [r0, #0]
 801f866:	f013 0207 	ands.w	r2, r3, #7
 801f86a:	4601      	mov	r1, r0
 801f86c:	d00b      	beq.n	801f886 <__lo0bits+0x22>
 801f86e:	07da      	lsls	r2, r3, #31
 801f870:	d423      	bmi.n	801f8ba <__lo0bits+0x56>
 801f872:	0798      	lsls	r0, r3, #30
 801f874:	bf49      	itett	mi
 801f876:	085b      	lsrmi	r3, r3, #1
 801f878:	089b      	lsrpl	r3, r3, #2
 801f87a:	2001      	movmi	r0, #1
 801f87c:	600b      	strmi	r3, [r1, #0]
 801f87e:	bf5c      	itt	pl
 801f880:	600b      	strpl	r3, [r1, #0]
 801f882:	2002      	movpl	r0, #2
 801f884:	4770      	bx	lr
 801f886:	b298      	uxth	r0, r3
 801f888:	b9a8      	cbnz	r0, 801f8b6 <__lo0bits+0x52>
 801f88a:	0c1b      	lsrs	r3, r3, #16
 801f88c:	2010      	movs	r0, #16
 801f88e:	b2da      	uxtb	r2, r3
 801f890:	b90a      	cbnz	r2, 801f896 <__lo0bits+0x32>
 801f892:	3008      	adds	r0, #8
 801f894:	0a1b      	lsrs	r3, r3, #8
 801f896:	071a      	lsls	r2, r3, #28
 801f898:	bf04      	itt	eq
 801f89a:	091b      	lsreq	r3, r3, #4
 801f89c:	3004      	addeq	r0, #4
 801f89e:	079a      	lsls	r2, r3, #30
 801f8a0:	bf04      	itt	eq
 801f8a2:	089b      	lsreq	r3, r3, #2
 801f8a4:	3002      	addeq	r0, #2
 801f8a6:	07da      	lsls	r2, r3, #31
 801f8a8:	d403      	bmi.n	801f8b2 <__lo0bits+0x4e>
 801f8aa:	085b      	lsrs	r3, r3, #1
 801f8ac:	f100 0001 	add.w	r0, r0, #1
 801f8b0:	d005      	beq.n	801f8be <__lo0bits+0x5a>
 801f8b2:	600b      	str	r3, [r1, #0]
 801f8b4:	4770      	bx	lr
 801f8b6:	4610      	mov	r0, r2
 801f8b8:	e7e9      	b.n	801f88e <__lo0bits+0x2a>
 801f8ba:	2000      	movs	r0, #0
 801f8bc:	4770      	bx	lr
 801f8be:	2020      	movs	r0, #32
 801f8c0:	4770      	bx	lr
	...

0801f8c4 <__i2b>:
 801f8c4:	b510      	push	{r4, lr}
 801f8c6:	460c      	mov	r4, r1
 801f8c8:	2101      	movs	r1, #1
 801f8ca:	f7ff feb9 	bl	801f640 <_Balloc>
 801f8ce:	4602      	mov	r2, r0
 801f8d0:	b928      	cbnz	r0, 801f8de <__i2b+0x1a>
 801f8d2:	4b05      	ldr	r3, [pc, #20]	; (801f8e8 <__i2b+0x24>)
 801f8d4:	4805      	ldr	r0, [pc, #20]	; (801f8ec <__i2b+0x28>)
 801f8d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801f8da:	f000 fd15 	bl	8020308 <__assert_func>
 801f8de:	2301      	movs	r3, #1
 801f8e0:	6144      	str	r4, [r0, #20]
 801f8e2:	6103      	str	r3, [r0, #16]
 801f8e4:	bd10      	pop	{r4, pc}
 801f8e6:	bf00      	nop
 801f8e8:	08022f60 	.word	0x08022f60
 801f8ec:	08022fec 	.word	0x08022fec

0801f8f0 <__multiply>:
 801f8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8f4:	4691      	mov	r9, r2
 801f8f6:	690a      	ldr	r2, [r1, #16]
 801f8f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f8fc:	429a      	cmp	r2, r3
 801f8fe:	bfb8      	it	lt
 801f900:	460b      	movlt	r3, r1
 801f902:	460c      	mov	r4, r1
 801f904:	bfbc      	itt	lt
 801f906:	464c      	movlt	r4, r9
 801f908:	4699      	movlt	r9, r3
 801f90a:	6927      	ldr	r7, [r4, #16]
 801f90c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801f910:	68a3      	ldr	r3, [r4, #8]
 801f912:	6861      	ldr	r1, [r4, #4]
 801f914:	eb07 060a 	add.w	r6, r7, sl
 801f918:	42b3      	cmp	r3, r6
 801f91a:	b085      	sub	sp, #20
 801f91c:	bfb8      	it	lt
 801f91e:	3101      	addlt	r1, #1
 801f920:	f7ff fe8e 	bl	801f640 <_Balloc>
 801f924:	b930      	cbnz	r0, 801f934 <__multiply+0x44>
 801f926:	4602      	mov	r2, r0
 801f928:	4b44      	ldr	r3, [pc, #272]	; (801fa3c <__multiply+0x14c>)
 801f92a:	4845      	ldr	r0, [pc, #276]	; (801fa40 <__multiply+0x150>)
 801f92c:	f240 115d 	movw	r1, #349	; 0x15d
 801f930:	f000 fcea 	bl	8020308 <__assert_func>
 801f934:	f100 0514 	add.w	r5, r0, #20
 801f938:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f93c:	462b      	mov	r3, r5
 801f93e:	2200      	movs	r2, #0
 801f940:	4543      	cmp	r3, r8
 801f942:	d321      	bcc.n	801f988 <__multiply+0x98>
 801f944:	f104 0314 	add.w	r3, r4, #20
 801f948:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801f94c:	f109 0314 	add.w	r3, r9, #20
 801f950:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801f954:	9202      	str	r2, [sp, #8]
 801f956:	1b3a      	subs	r2, r7, r4
 801f958:	3a15      	subs	r2, #21
 801f95a:	f022 0203 	bic.w	r2, r2, #3
 801f95e:	3204      	adds	r2, #4
 801f960:	f104 0115 	add.w	r1, r4, #21
 801f964:	428f      	cmp	r7, r1
 801f966:	bf38      	it	cc
 801f968:	2204      	movcc	r2, #4
 801f96a:	9201      	str	r2, [sp, #4]
 801f96c:	9a02      	ldr	r2, [sp, #8]
 801f96e:	9303      	str	r3, [sp, #12]
 801f970:	429a      	cmp	r2, r3
 801f972:	d80c      	bhi.n	801f98e <__multiply+0x9e>
 801f974:	2e00      	cmp	r6, #0
 801f976:	dd03      	ble.n	801f980 <__multiply+0x90>
 801f978:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f97c:	2b00      	cmp	r3, #0
 801f97e:	d05a      	beq.n	801fa36 <__multiply+0x146>
 801f980:	6106      	str	r6, [r0, #16]
 801f982:	b005      	add	sp, #20
 801f984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f988:	f843 2b04 	str.w	r2, [r3], #4
 801f98c:	e7d8      	b.n	801f940 <__multiply+0x50>
 801f98e:	f8b3 a000 	ldrh.w	sl, [r3]
 801f992:	f1ba 0f00 	cmp.w	sl, #0
 801f996:	d024      	beq.n	801f9e2 <__multiply+0xf2>
 801f998:	f104 0e14 	add.w	lr, r4, #20
 801f99c:	46a9      	mov	r9, r5
 801f99e:	f04f 0c00 	mov.w	ip, #0
 801f9a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 801f9a6:	f8d9 1000 	ldr.w	r1, [r9]
 801f9aa:	fa1f fb82 	uxth.w	fp, r2
 801f9ae:	b289      	uxth	r1, r1
 801f9b0:	fb0a 110b 	mla	r1, sl, fp, r1
 801f9b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801f9b8:	f8d9 2000 	ldr.w	r2, [r9]
 801f9bc:	4461      	add	r1, ip
 801f9be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f9c2:	fb0a c20b 	mla	r2, sl, fp, ip
 801f9c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801f9ca:	b289      	uxth	r1, r1
 801f9cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801f9d0:	4577      	cmp	r7, lr
 801f9d2:	f849 1b04 	str.w	r1, [r9], #4
 801f9d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f9da:	d8e2      	bhi.n	801f9a2 <__multiply+0xb2>
 801f9dc:	9a01      	ldr	r2, [sp, #4]
 801f9de:	f845 c002 	str.w	ip, [r5, r2]
 801f9e2:	9a03      	ldr	r2, [sp, #12]
 801f9e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801f9e8:	3304      	adds	r3, #4
 801f9ea:	f1b9 0f00 	cmp.w	r9, #0
 801f9ee:	d020      	beq.n	801fa32 <__multiply+0x142>
 801f9f0:	6829      	ldr	r1, [r5, #0]
 801f9f2:	f104 0c14 	add.w	ip, r4, #20
 801f9f6:	46ae      	mov	lr, r5
 801f9f8:	f04f 0a00 	mov.w	sl, #0
 801f9fc:	f8bc b000 	ldrh.w	fp, [ip]
 801fa00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801fa04:	fb09 220b 	mla	r2, r9, fp, r2
 801fa08:	4492      	add	sl, r2
 801fa0a:	b289      	uxth	r1, r1
 801fa0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801fa10:	f84e 1b04 	str.w	r1, [lr], #4
 801fa14:	f85c 2b04 	ldr.w	r2, [ip], #4
 801fa18:	f8be 1000 	ldrh.w	r1, [lr]
 801fa1c:	0c12      	lsrs	r2, r2, #16
 801fa1e:	fb09 1102 	mla	r1, r9, r2, r1
 801fa22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801fa26:	4567      	cmp	r7, ip
 801fa28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801fa2c:	d8e6      	bhi.n	801f9fc <__multiply+0x10c>
 801fa2e:	9a01      	ldr	r2, [sp, #4]
 801fa30:	50a9      	str	r1, [r5, r2]
 801fa32:	3504      	adds	r5, #4
 801fa34:	e79a      	b.n	801f96c <__multiply+0x7c>
 801fa36:	3e01      	subs	r6, #1
 801fa38:	e79c      	b.n	801f974 <__multiply+0x84>
 801fa3a:	bf00      	nop
 801fa3c:	08022f60 	.word	0x08022f60
 801fa40:	08022fec 	.word	0x08022fec

0801fa44 <__pow5mult>:
 801fa44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fa48:	4615      	mov	r5, r2
 801fa4a:	f012 0203 	ands.w	r2, r2, #3
 801fa4e:	4606      	mov	r6, r0
 801fa50:	460f      	mov	r7, r1
 801fa52:	d007      	beq.n	801fa64 <__pow5mult+0x20>
 801fa54:	4c25      	ldr	r4, [pc, #148]	; (801faec <__pow5mult+0xa8>)
 801fa56:	3a01      	subs	r2, #1
 801fa58:	2300      	movs	r3, #0
 801fa5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801fa5e:	f7ff fe51 	bl	801f704 <__multadd>
 801fa62:	4607      	mov	r7, r0
 801fa64:	10ad      	asrs	r5, r5, #2
 801fa66:	d03d      	beq.n	801fae4 <__pow5mult+0xa0>
 801fa68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801fa6a:	b97c      	cbnz	r4, 801fa8c <__pow5mult+0x48>
 801fa6c:	2010      	movs	r0, #16
 801fa6e:	f7fc fe85 	bl	801c77c <malloc>
 801fa72:	4602      	mov	r2, r0
 801fa74:	6270      	str	r0, [r6, #36]	; 0x24
 801fa76:	b928      	cbnz	r0, 801fa84 <__pow5mult+0x40>
 801fa78:	4b1d      	ldr	r3, [pc, #116]	; (801faf0 <__pow5mult+0xac>)
 801fa7a:	481e      	ldr	r0, [pc, #120]	; (801faf4 <__pow5mult+0xb0>)
 801fa7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801fa80:	f000 fc42 	bl	8020308 <__assert_func>
 801fa84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801fa88:	6004      	str	r4, [r0, #0]
 801fa8a:	60c4      	str	r4, [r0, #12]
 801fa8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801fa90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801fa94:	b94c      	cbnz	r4, 801faaa <__pow5mult+0x66>
 801fa96:	f240 2171 	movw	r1, #625	; 0x271
 801fa9a:	4630      	mov	r0, r6
 801fa9c:	f7ff ff12 	bl	801f8c4 <__i2b>
 801faa0:	2300      	movs	r3, #0
 801faa2:	f8c8 0008 	str.w	r0, [r8, #8]
 801faa6:	4604      	mov	r4, r0
 801faa8:	6003      	str	r3, [r0, #0]
 801faaa:	f04f 0900 	mov.w	r9, #0
 801faae:	07eb      	lsls	r3, r5, #31
 801fab0:	d50a      	bpl.n	801fac8 <__pow5mult+0x84>
 801fab2:	4639      	mov	r1, r7
 801fab4:	4622      	mov	r2, r4
 801fab6:	4630      	mov	r0, r6
 801fab8:	f7ff ff1a 	bl	801f8f0 <__multiply>
 801fabc:	4639      	mov	r1, r7
 801fabe:	4680      	mov	r8, r0
 801fac0:	4630      	mov	r0, r6
 801fac2:	f7ff fdfd 	bl	801f6c0 <_Bfree>
 801fac6:	4647      	mov	r7, r8
 801fac8:	106d      	asrs	r5, r5, #1
 801faca:	d00b      	beq.n	801fae4 <__pow5mult+0xa0>
 801facc:	6820      	ldr	r0, [r4, #0]
 801face:	b938      	cbnz	r0, 801fae0 <__pow5mult+0x9c>
 801fad0:	4622      	mov	r2, r4
 801fad2:	4621      	mov	r1, r4
 801fad4:	4630      	mov	r0, r6
 801fad6:	f7ff ff0b 	bl	801f8f0 <__multiply>
 801fada:	6020      	str	r0, [r4, #0]
 801fadc:	f8c0 9000 	str.w	r9, [r0]
 801fae0:	4604      	mov	r4, r0
 801fae2:	e7e4      	b.n	801faae <__pow5mult+0x6a>
 801fae4:	4638      	mov	r0, r7
 801fae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801faea:	bf00      	nop
 801faec:	08023138 	.word	0x08023138
 801faf0:	08022eee 	.word	0x08022eee
 801faf4:	08022fec 	.word	0x08022fec

0801faf8 <__lshift>:
 801faf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fafc:	460c      	mov	r4, r1
 801fafe:	6849      	ldr	r1, [r1, #4]
 801fb00:	6923      	ldr	r3, [r4, #16]
 801fb02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801fb06:	68a3      	ldr	r3, [r4, #8]
 801fb08:	4607      	mov	r7, r0
 801fb0a:	4691      	mov	r9, r2
 801fb0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801fb10:	f108 0601 	add.w	r6, r8, #1
 801fb14:	42b3      	cmp	r3, r6
 801fb16:	db0b      	blt.n	801fb30 <__lshift+0x38>
 801fb18:	4638      	mov	r0, r7
 801fb1a:	f7ff fd91 	bl	801f640 <_Balloc>
 801fb1e:	4605      	mov	r5, r0
 801fb20:	b948      	cbnz	r0, 801fb36 <__lshift+0x3e>
 801fb22:	4602      	mov	r2, r0
 801fb24:	4b2a      	ldr	r3, [pc, #168]	; (801fbd0 <__lshift+0xd8>)
 801fb26:	482b      	ldr	r0, [pc, #172]	; (801fbd4 <__lshift+0xdc>)
 801fb28:	f240 11d9 	movw	r1, #473	; 0x1d9
 801fb2c:	f000 fbec 	bl	8020308 <__assert_func>
 801fb30:	3101      	adds	r1, #1
 801fb32:	005b      	lsls	r3, r3, #1
 801fb34:	e7ee      	b.n	801fb14 <__lshift+0x1c>
 801fb36:	2300      	movs	r3, #0
 801fb38:	f100 0114 	add.w	r1, r0, #20
 801fb3c:	f100 0210 	add.w	r2, r0, #16
 801fb40:	4618      	mov	r0, r3
 801fb42:	4553      	cmp	r3, sl
 801fb44:	db37      	blt.n	801fbb6 <__lshift+0xbe>
 801fb46:	6920      	ldr	r0, [r4, #16]
 801fb48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801fb4c:	f104 0314 	add.w	r3, r4, #20
 801fb50:	f019 091f 	ands.w	r9, r9, #31
 801fb54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801fb58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801fb5c:	d02f      	beq.n	801fbbe <__lshift+0xc6>
 801fb5e:	f1c9 0e20 	rsb	lr, r9, #32
 801fb62:	468a      	mov	sl, r1
 801fb64:	f04f 0c00 	mov.w	ip, #0
 801fb68:	681a      	ldr	r2, [r3, #0]
 801fb6a:	fa02 f209 	lsl.w	r2, r2, r9
 801fb6e:	ea42 020c 	orr.w	r2, r2, ip
 801fb72:	f84a 2b04 	str.w	r2, [sl], #4
 801fb76:	f853 2b04 	ldr.w	r2, [r3], #4
 801fb7a:	4298      	cmp	r0, r3
 801fb7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 801fb80:	d8f2      	bhi.n	801fb68 <__lshift+0x70>
 801fb82:	1b03      	subs	r3, r0, r4
 801fb84:	3b15      	subs	r3, #21
 801fb86:	f023 0303 	bic.w	r3, r3, #3
 801fb8a:	3304      	adds	r3, #4
 801fb8c:	f104 0215 	add.w	r2, r4, #21
 801fb90:	4290      	cmp	r0, r2
 801fb92:	bf38      	it	cc
 801fb94:	2304      	movcc	r3, #4
 801fb96:	f841 c003 	str.w	ip, [r1, r3]
 801fb9a:	f1bc 0f00 	cmp.w	ip, #0
 801fb9e:	d001      	beq.n	801fba4 <__lshift+0xac>
 801fba0:	f108 0602 	add.w	r6, r8, #2
 801fba4:	3e01      	subs	r6, #1
 801fba6:	4638      	mov	r0, r7
 801fba8:	612e      	str	r6, [r5, #16]
 801fbaa:	4621      	mov	r1, r4
 801fbac:	f7ff fd88 	bl	801f6c0 <_Bfree>
 801fbb0:	4628      	mov	r0, r5
 801fbb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fbb6:	f842 0f04 	str.w	r0, [r2, #4]!
 801fbba:	3301      	adds	r3, #1
 801fbbc:	e7c1      	b.n	801fb42 <__lshift+0x4a>
 801fbbe:	3904      	subs	r1, #4
 801fbc0:	f853 2b04 	ldr.w	r2, [r3], #4
 801fbc4:	f841 2f04 	str.w	r2, [r1, #4]!
 801fbc8:	4298      	cmp	r0, r3
 801fbca:	d8f9      	bhi.n	801fbc0 <__lshift+0xc8>
 801fbcc:	e7ea      	b.n	801fba4 <__lshift+0xac>
 801fbce:	bf00      	nop
 801fbd0:	08022f60 	.word	0x08022f60
 801fbd4:	08022fec 	.word	0x08022fec

0801fbd8 <__mcmp>:
 801fbd8:	b530      	push	{r4, r5, lr}
 801fbda:	6902      	ldr	r2, [r0, #16]
 801fbdc:	690c      	ldr	r4, [r1, #16]
 801fbde:	1b12      	subs	r2, r2, r4
 801fbe0:	d10e      	bne.n	801fc00 <__mcmp+0x28>
 801fbe2:	f100 0314 	add.w	r3, r0, #20
 801fbe6:	3114      	adds	r1, #20
 801fbe8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801fbec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801fbf0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801fbf4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801fbf8:	42a5      	cmp	r5, r4
 801fbfa:	d003      	beq.n	801fc04 <__mcmp+0x2c>
 801fbfc:	d305      	bcc.n	801fc0a <__mcmp+0x32>
 801fbfe:	2201      	movs	r2, #1
 801fc00:	4610      	mov	r0, r2
 801fc02:	bd30      	pop	{r4, r5, pc}
 801fc04:	4283      	cmp	r3, r0
 801fc06:	d3f3      	bcc.n	801fbf0 <__mcmp+0x18>
 801fc08:	e7fa      	b.n	801fc00 <__mcmp+0x28>
 801fc0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801fc0e:	e7f7      	b.n	801fc00 <__mcmp+0x28>

0801fc10 <__mdiff>:
 801fc10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc14:	460c      	mov	r4, r1
 801fc16:	4606      	mov	r6, r0
 801fc18:	4611      	mov	r1, r2
 801fc1a:	4620      	mov	r0, r4
 801fc1c:	4690      	mov	r8, r2
 801fc1e:	f7ff ffdb 	bl	801fbd8 <__mcmp>
 801fc22:	1e05      	subs	r5, r0, #0
 801fc24:	d110      	bne.n	801fc48 <__mdiff+0x38>
 801fc26:	4629      	mov	r1, r5
 801fc28:	4630      	mov	r0, r6
 801fc2a:	f7ff fd09 	bl	801f640 <_Balloc>
 801fc2e:	b930      	cbnz	r0, 801fc3e <__mdiff+0x2e>
 801fc30:	4b3a      	ldr	r3, [pc, #232]	; (801fd1c <__mdiff+0x10c>)
 801fc32:	4602      	mov	r2, r0
 801fc34:	f240 2132 	movw	r1, #562	; 0x232
 801fc38:	4839      	ldr	r0, [pc, #228]	; (801fd20 <__mdiff+0x110>)
 801fc3a:	f000 fb65 	bl	8020308 <__assert_func>
 801fc3e:	2301      	movs	r3, #1
 801fc40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801fc44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc48:	bfa4      	itt	ge
 801fc4a:	4643      	movge	r3, r8
 801fc4c:	46a0      	movge	r8, r4
 801fc4e:	4630      	mov	r0, r6
 801fc50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801fc54:	bfa6      	itte	ge
 801fc56:	461c      	movge	r4, r3
 801fc58:	2500      	movge	r5, #0
 801fc5a:	2501      	movlt	r5, #1
 801fc5c:	f7ff fcf0 	bl	801f640 <_Balloc>
 801fc60:	b920      	cbnz	r0, 801fc6c <__mdiff+0x5c>
 801fc62:	4b2e      	ldr	r3, [pc, #184]	; (801fd1c <__mdiff+0x10c>)
 801fc64:	4602      	mov	r2, r0
 801fc66:	f44f 7110 	mov.w	r1, #576	; 0x240
 801fc6a:	e7e5      	b.n	801fc38 <__mdiff+0x28>
 801fc6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801fc70:	6926      	ldr	r6, [r4, #16]
 801fc72:	60c5      	str	r5, [r0, #12]
 801fc74:	f104 0914 	add.w	r9, r4, #20
 801fc78:	f108 0514 	add.w	r5, r8, #20
 801fc7c:	f100 0e14 	add.w	lr, r0, #20
 801fc80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801fc84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801fc88:	f108 0210 	add.w	r2, r8, #16
 801fc8c:	46f2      	mov	sl, lr
 801fc8e:	2100      	movs	r1, #0
 801fc90:	f859 3b04 	ldr.w	r3, [r9], #4
 801fc94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801fc98:	fa1f f883 	uxth.w	r8, r3
 801fc9c:	fa11 f18b 	uxtah	r1, r1, fp
 801fca0:	0c1b      	lsrs	r3, r3, #16
 801fca2:	eba1 0808 	sub.w	r8, r1, r8
 801fca6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801fcaa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801fcae:	fa1f f888 	uxth.w	r8, r8
 801fcb2:	1419      	asrs	r1, r3, #16
 801fcb4:	454e      	cmp	r6, r9
 801fcb6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801fcba:	f84a 3b04 	str.w	r3, [sl], #4
 801fcbe:	d8e7      	bhi.n	801fc90 <__mdiff+0x80>
 801fcc0:	1b33      	subs	r3, r6, r4
 801fcc2:	3b15      	subs	r3, #21
 801fcc4:	f023 0303 	bic.w	r3, r3, #3
 801fcc8:	3304      	adds	r3, #4
 801fcca:	3415      	adds	r4, #21
 801fccc:	42a6      	cmp	r6, r4
 801fcce:	bf38      	it	cc
 801fcd0:	2304      	movcc	r3, #4
 801fcd2:	441d      	add	r5, r3
 801fcd4:	4473      	add	r3, lr
 801fcd6:	469e      	mov	lr, r3
 801fcd8:	462e      	mov	r6, r5
 801fcda:	4566      	cmp	r6, ip
 801fcdc:	d30e      	bcc.n	801fcfc <__mdiff+0xec>
 801fcde:	f10c 0203 	add.w	r2, ip, #3
 801fce2:	1b52      	subs	r2, r2, r5
 801fce4:	f022 0203 	bic.w	r2, r2, #3
 801fce8:	3d03      	subs	r5, #3
 801fcea:	45ac      	cmp	ip, r5
 801fcec:	bf38      	it	cc
 801fcee:	2200      	movcc	r2, #0
 801fcf0:	441a      	add	r2, r3
 801fcf2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801fcf6:	b17b      	cbz	r3, 801fd18 <__mdiff+0x108>
 801fcf8:	6107      	str	r7, [r0, #16]
 801fcfa:	e7a3      	b.n	801fc44 <__mdiff+0x34>
 801fcfc:	f856 8b04 	ldr.w	r8, [r6], #4
 801fd00:	fa11 f288 	uxtah	r2, r1, r8
 801fd04:	1414      	asrs	r4, r2, #16
 801fd06:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801fd0a:	b292      	uxth	r2, r2
 801fd0c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801fd10:	f84e 2b04 	str.w	r2, [lr], #4
 801fd14:	1421      	asrs	r1, r4, #16
 801fd16:	e7e0      	b.n	801fcda <__mdiff+0xca>
 801fd18:	3f01      	subs	r7, #1
 801fd1a:	e7ea      	b.n	801fcf2 <__mdiff+0xe2>
 801fd1c:	08022f60 	.word	0x08022f60
 801fd20:	08022fec 	.word	0x08022fec

0801fd24 <__ulp>:
 801fd24:	b082      	sub	sp, #8
 801fd26:	ed8d 0b00 	vstr	d0, [sp]
 801fd2a:	9b01      	ldr	r3, [sp, #4]
 801fd2c:	4912      	ldr	r1, [pc, #72]	; (801fd78 <__ulp+0x54>)
 801fd2e:	4019      	ands	r1, r3
 801fd30:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801fd34:	2900      	cmp	r1, #0
 801fd36:	dd05      	ble.n	801fd44 <__ulp+0x20>
 801fd38:	2200      	movs	r2, #0
 801fd3a:	460b      	mov	r3, r1
 801fd3c:	ec43 2b10 	vmov	d0, r2, r3
 801fd40:	b002      	add	sp, #8
 801fd42:	4770      	bx	lr
 801fd44:	4249      	negs	r1, r1
 801fd46:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801fd4a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801fd4e:	f04f 0200 	mov.w	r2, #0
 801fd52:	f04f 0300 	mov.w	r3, #0
 801fd56:	da04      	bge.n	801fd62 <__ulp+0x3e>
 801fd58:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801fd5c:	fa41 f300 	asr.w	r3, r1, r0
 801fd60:	e7ec      	b.n	801fd3c <__ulp+0x18>
 801fd62:	f1a0 0114 	sub.w	r1, r0, #20
 801fd66:	291e      	cmp	r1, #30
 801fd68:	bfda      	itte	le
 801fd6a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801fd6e:	fa20 f101 	lsrle.w	r1, r0, r1
 801fd72:	2101      	movgt	r1, #1
 801fd74:	460a      	mov	r2, r1
 801fd76:	e7e1      	b.n	801fd3c <__ulp+0x18>
 801fd78:	7ff00000 	.word	0x7ff00000

0801fd7c <__b2d>:
 801fd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd7e:	6905      	ldr	r5, [r0, #16]
 801fd80:	f100 0714 	add.w	r7, r0, #20
 801fd84:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801fd88:	1f2e      	subs	r6, r5, #4
 801fd8a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801fd8e:	4620      	mov	r0, r4
 801fd90:	f7ff fd48 	bl	801f824 <__hi0bits>
 801fd94:	f1c0 0320 	rsb	r3, r0, #32
 801fd98:	280a      	cmp	r0, #10
 801fd9a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801fe18 <__b2d+0x9c>
 801fd9e:	600b      	str	r3, [r1, #0]
 801fda0:	dc14      	bgt.n	801fdcc <__b2d+0x50>
 801fda2:	f1c0 0e0b 	rsb	lr, r0, #11
 801fda6:	fa24 f10e 	lsr.w	r1, r4, lr
 801fdaa:	42b7      	cmp	r7, r6
 801fdac:	ea41 030c 	orr.w	r3, r1, ip
 801fdb0:	bf34      	ite	cc
 801fdb2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801fdb6:	2100      	movcs	r1, #0
 801fdb8:	3015      	adds	r0, #21
 801fdba:	fa04 f000 	lsl.w	r0, r4, r0
 801fdbe:	fa21 f10e 	lsr.w	r1, r1, lr
 801fdc2:	ea40 0201 	orr.w	r2, r0, r1
 801fdc6:	ec43 2b10 	vmov	d0, r2, r3
 801fdca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fdcc:	42b7      	cmp	r7, r6
 801fdce:	bf3a      	itte	cc
 801fdd0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801fdd4:	f1a5 0608 	subcc.w	r6, r5, #8
 801fdd8:	2100      	movcs	r1, #0
 801fdda:	380b      	subs	r0, #11
 801fddc:	d017      	beq.n	801fe0e <__b2d+0x92>
 801fdde:	f1c0 0c20 	rsb	ip, r0, #32
 801fde2:	fa04 f500 	lsl.w	r5, r4, r0
 801fde6:	42be      	cmp	r6, r7
 801fde8:	fa21 f40c 	lsr.w	r4, r1, ip
 801fdec:	ea45 0504 	orr.w	r5, r5, r4
 801fdf0:	bf8c      	ite	hi
 801fdf2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801fdf6:	2400      	movls	r4, #0
 801fdf8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801fdfc:	fa01 f000 	lsl.w	r0, r1, r0
 801fe00:	fa24 f40c 	lsr.w	r4, r4, ip
 801fe04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801fe08:	ea40 0204 	orr.w	r2, r0, r4
 801fe0c:	e7db      	b.n	801fdc6 <__b2d+0x4a>
 801fe0e:	ea44 030c 	orr.w	r3, r4, ip
 801fe12:	460a      	mov	r2, r1
 801fe14:	e7d7      	b.n	801fdc6 <__b2d+0x4a>
 801fe16:	bf00      	nop
 801fe18:	3ff00000 	.word	0x3ff00000

0801fe1c <__d2b>:
 801fe1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801fe20:	4689      	mov	r9, r1
 801fe22:	2101      	movs	r1, #1
 801fe24:	ec57 6b10 	vmov	r6, r7, d0
 801fe28:	4690      	mov	r8, r2
 801fe2a:	f7ff fc09 	bl	801f640 <_Balloc>
 801fe2e:	4604      	mov	r4, r0
 801fe30:	b930      	cbnz	r0, 801fe40 <__d2b+0x24>
 801fe32:	4602      	mov	r2, r0
 801fe34:	4b25      	ldr	r3, [pc, #148]	; (801fecc <__d2b+0xb0>)
 801fe36:	4826      	ldr	r0, [pc, #152]	; (801fed0 <__d2b+0xb4>)
 801fe38:	f240 310a 	movw	r1, #778	; 0x30a
 801fe3c:	f000 fa64 	bl	8020308 <__assert_func>
 801fe40:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801fe44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801fe48:	bb35      	cbnz	r5, 801fe98 <__d2b+0x7c>
 801fe4a:	2e00      	cmp	r6, #0
 801fe4c:	9301      	str	r3, [sp, #4]
 801fe4e:	d028      	beq.n	801fea2 <__d2b+0x86>
 801fe50:	4668      	mov	r0, sp
 801fe52:	9600      	str	r6, [sp, #0]
 801fe54:	f7ff fd06 	bl	801f864 <__lo0bits>
 801fe58:	9900      	ldr	r1, [sp, #0]
 801fe5a:	b300      	cbz	r0, 801fe9e <__d2b+0x82>
 801fe5c:	9a01      	ldr	r2, [sp, #4]
 801fe5e:	f1c0 0320 	rsb	r3, r0, #32
 801fe62:	fa02 f303 	lsl.w	r3, r2, r3
 801fe66:	430b      	orrs	r3, r1
 801fe68:	40c2      	lsrs	r2, r0
 801fe6a:	6163      	str	r3, [r4, #20]
 801fe6c:	9201      	str	r2, [sp, #4]
 801fe6e:	9b01      	ldr	r3, [sp, #4]
 801fe70:	61a3      	str	r3, [r4, #24]
 801fe72:	2b00      	cmp	r3, #0
 801fe74:	bf14      	ite	ne
 801fe76:	2202      	movne	r2, #2
 801fe78:	2201      	moveq	r2, #1
 801fe7a:	6122      	str	r2, [r4, #16]
 801fe7c:	b1d5      	cbz	r5, 801feb4 <__d2b+0x98>
 801fe7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801fe82:	4405      	add	r5, r0
 801fe84:	f8c9 5000 	str.w	r5, [r9]
 801fe88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801fe8c:	f8c8 0000 	str.w	r0, [r8]
 801fe90:	4620      	mov	r0, r4
 801fe92:	b003      	add	sp, #12
 801fe94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fe98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801fe9c:	e7d5      	b.n	801fe4a <__d2b+0x2e>
 801fe9e:	6161      	str	r1, [r4, #20]
 801fea0:	e7e5      	b.n	801fe6e <__d2b+0x52>
 801fea2:	a801      	add	r0, sp, #4
 801fea4:	f7ff fcde 	bl	801f864 <__lo0bits>
 801fea8:	9b01      	ldr	r3, [sp, #4]
 801feaa:	6163      	str	r3, [r4, #20]
 801feac:	2201      	movs	r2, #1
 801feae:	6122      	str	r2, [r4, #16]
 801feb0:	3020      	adds	r0, #32
 801feb2:	e7e3      	b.n	801fe7c <__d2b+0x60>
 801feb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801feb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801febc:	f8c9 0000 	str.w	r0, [r9]
 801fec0:	6918      	ldr	r0, [r3, #16]
 801fec2:	f7ff fcaf 	bl	801f824 <__hi0bits>
 801fec6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801feca:	e7df      	b.n	801fe8c <__d2b+0x70>
 801fecc:	08022f60 	.word	0x08022f60
 801fed0:	08022fec 	.word	0x08022fec

0801fed4 <__ratio>:
 801fed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fed8:	4688      	mov	r8, r1
 801feda:	4669      	mov	r1, sp
 801fedc:	4681      	mov	r9, r0
 801fede:	f7ff ff4d 	bl	801fd7c <__b2d>
 801fee2:	a901      	add	r1, sp, #4
 801fee4:	4640      	mov	r0, r8
 801fee6:	ec55 4b10 	vmov	r4, r5, d0
 801feea:	f7ff ff47 	bl	801fd7c <__b2d>
 801feee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801fef2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801fef6:	eba3 0c02 	sub.w	ip, r3, r2
 801fefa:	e9dd 3200 	ldrd	r3, r2, [sp]
 801fefe:	1a9b      	subs	r3, r3, r2
 801ff00:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801ff04:	ec51 0b10 	vmov	r0, r1, d0
 801ff08:	2b00      	cmp	r3, #0
 801ff0a:	bfd6      	itet	le
 801ff0c:	460a      	movle	r2, r1
 801ff0e:	462a      	movgt	r2, r5
 801ff10:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801ff14:	468b      	mov	fp, r1
 801ff16:	462f      	mov	r7, r5
 801ff18:	bfd4      	ite	le
 801ff1a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801ff1e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801ff22:	4620      	mov	r0, r4
 801ff24:	ee10 2a10 	vmov	r2, s0
 801ff28:	465b      	mov	r3, fp
 801ff2a:	4639      	mov	r1, r7
 801ff2c:	f7e0 fcc6 	bl	80008bc <__aeabi_ddiv>
 801ff30:	ec41 0b10 	vmov	d0, r0, r1
 801ff34:	b003      	add	sp, #12
 801ff36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ff3a <__copybits>:
 801ff3a:	3901      	subs	r1, #1
 801ff3c:	b570      	push	{r4, r5, r6, lr}
 801ff3e:	1149      	asrs	r1, r1, #5
 801ff40:	6914      	ldr	r4, [r2, #16]
 801ff42:	3101      	adds	r1, #1
 801ff44:	f102 0314 	add.w	r3, r2, #20
 801ff48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ff4c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ff50:	1f05      	subs	r5, r0, #4
 801ff52:	42a3      	cmp	r3, r4
 801ff54:	d30c      	bcc.n	801ff70 <__copybits+0x36>
 801ff56:	1aa3      	subs	r3, r4, r2
 801ff58:	3b11      	subs	r3, #17
 801ff5a:	f023 0303 	bic.w	r3, r3, #3
 801ff5e:	3211      	adds	r2, #17
 801ff60:	42a2      	cmp	r2, r4
 801ff62:	bf88      	it	hi
 801ff64:	2300      	movhi	r3, #0
 801ff66:	4418      	add	r0, r3
 801ff68:	2300      	movs	r3, #0
 801ff6a:	4288      	cmp	r0, r1
 801ff6c:	d305      	bcc.n	801ff7a <__copybits+0x40>
 801ff6e:	bd70      	pop	{r4, r5, r6, pc}
 801ff70:	f853 6b04 	ldr.w	r6, [r3], #4
 801ff74:	f845 6f04 	str.w	r6, [r5, #4]!
 801ff78:	e7eb      	b.n	801ff52 <__copybits+0x18>
 801ff7a:	f840 3b04 	str.w	r3, [r0], #4
 801ff7e:	e7f4      	b.n	801ff6a <__copybits+0x30>

0801ff80 <__any_on>:
 801ff80:	f100 0214 	add.w	r2, r0, #20
 801ff84:	6900      	ldr	r0, [r0, #16]
 801ff86:	114b      	asrs	r3, r1, #5
 801ff88:	4298      	cmp	r0, r3
 801ff8a:	b510      	push	{r4, lr}
 801ff8c:	db11      	blt.n	801ffb2 <__any_on+0x32>
 801ff8e:	dd0a      	ble.n	801ffa6 <__any_on+0x26>
 801ff90:	f011 011f 	ands.w	r1, r1, #31
 801ff94:	d007      	beq.n	801ffa6 <__any_on+0x26>
 801ff96:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ff9a:	fa24 f001 	lsr.w	r0, r4, r1
 801ff9e:	fa00 f101 	lsl.w	r1, r0, r1
 801ffa2:	428c      	cmp	r4, r1
 801ffa4:	d10b      	bne.n	801ffbe <__any_on+0x3e>
 801ffa6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ffaa:	4293      	cmp	r3, r2
 801ffac:	d803      	bhi.n	801ffb6 <__any_on+0x36>
 801ffae:	2000      	movs	r0, #0
 801ffb0:	bd10      	pop	{r4, pc}
 801ffb2:	4603      	mov	r3, r0
 801ffb4:	e7f7      	b.n	801ffa6 <__any_on+0x26>
 801ffb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ffba:	2900      	cmp	r1, #0
 801ffbc:	d0f5      	beq.n	801ffaa <__any_on+0x2a>
 801ffbe:	2001      	movs	r0, #1
 801ffc0:	e7f6      	b.n	801ffb0 <__any_on+0x30>

0801ffc2 <_calloc_r>:
 801ffc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ffc4:	fba1 2402 	umull	r2, r4, r1, r2
 801ffc8:	b94c      	cbnz	r4, 801ffde <_calloc_r+0x1c>
 801ffca:	4611      	mov	r1, r2
 801ffcc:	9201      	str	r2, [sp, #4]
 801ffce:	f7fc fc67 	bl	801c8a0 <_malloc_r>
 801ffd2:	9a01      	ldr	r2, [sp, #4]
 801ffd4:	4605      	mov	r5, r0
 801ffd6:	b930      	cbnz	r0, 801ffe6 <_calloc_r+0x24>
 801ffd8:	4628      	mov	r0, r5
 801ffda:	b003      	add	sp, #12
 801ffdc:	bd30      	pop	{r4, r5, pc}
 801ffde:	220c      	movs	r2, #12
 801ffe0:	6002      	str	r2, [r0, #0]
 801ffe2:	2500      	movs	r5, #0
 801ffe4:	e7f8      	b.n	801ffd8 <_calloc_r+0x16>
 801ffe6:	4621      	mov	r1, r4
 801ffe8:	f7fc fbe6 	bl	801c7b8 <memset>
 801ffec:	e7f4      	b.n	801ffd8 <_calloc_r+0x16>

0801ffee <__ssputs_r>:
 801ffee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fff2:	688e      	ldr	r6, [r1, #8]
 801fff4:	429e      	cmp	r6, r3
 801fff6:	4682      	mov	sl, r0
 801fff8:	460c      	mov	r4, r1
 801fffa:	4690      	mov	r8, r2
 801fffc:	461f      	mov	r7, r3
 801fffe:	d838      	bhi.n	8020072 <__ssputs_r+0x84>
 8020000:	898a      	ldrh	r2, [r1, #12]
 8020002:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020006:	d032      	beq.n	802006e <__ssputs_r+0x80>
 8020008:	6825      	ldr	r5, [r4, #0]
 802000a:	6909      	ldr	r1, [r1, #16]
 802000c:	eba5 0901 	sub.w	r9, r5, r1
 8020010:	6965      	ldr	r5, [r4, #20]
 8020012:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020016:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802001a:	3301      	adds	r3, #1
 802001c:	444b      	add	r3, r9
 802001e:	106d      	asrs	r5, r5, #1
 8020020:	429d      	cmp	r5, r3
 8020022:	bf38      	it	cc
 8020024:	461d      	movcc	r5, r3
 8020026:	0553      	lsls	r3, r2, #21
 8020028:	d531      	bpl.n	802008e <__ssputs_r+0xa0>
 802002a:	4629      	mov	r1, r5
 802002c:	f7fc fc38 	bl	801c8a0 <_malloc_r>
 8020030:	4606      	mov	r6, r0
 8020032:	b950      	cbnz	r0, 802004a <__ssputs_r+0x5c>
 8020034:	230c      	movs	r3, #12
 8020036:	f8ca 3000 	str.w	r3, [sl]
 802003a:	89a3      	ldrh	r3, [r4, #12]
 802003c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020040:	81a3      	strh	r3, [r4, #12]
 8020042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802004a:	6921      	ldr	r1, [r4, #16]
 802004c:	464a      	mov	r2, r9
 802004e:	f7fc fba5 	bl	801c79c <memcpy>
 8020052:	89a3      	ldrh	r3, [r4, #12]
 8020054:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802005c:	81a3      	strh	r3, [r4, #12]
 802005e:	6126      	str	r6, [r4, #16]
 8020060:	6165      	str	r5, [r4, #20]
 8020062:	444e      	add	r6, r9
 8020064:	eba5 0509 	sub.w	r5, r5, r9
 8020068:	6026      	str	r6, [r4, #0]
 802006a:	60a5      	str	r5, [r4, #8]
 802006c:	463e      	mov	r6, r7
 802006e:	42be      	cmp	r6, r7
 8020070:	d900      	bls.n	8020074 <__ssputs_r+0x86>
 8020072:	463e      	mov	r6, r7
 8020074:	6820      	ldr	r0, [r4, #0]
 8020076:	4632      	mov	r2, r6
 8020078:	4641      	mov	r1, r8
 802007a:	f000 f978 	bl	802036e <memmove>
 802007e:	68a3      	ldr	r3, [r4, #8]
 8020080:	1b9b      	subs	r3, r3, r6
 8020082:	60a3      	str	r3, [r4, #8]
 8020084:	6823      	ldr	r3, [r4, #0]
 8020086:	4433      	add	r3, r6
 8020088:	6023      	str	r3, [r4, #0]
 802008a:	2000      	movs	r0, #0
 802008c:	e7db      	b.n	8020046 <__ssputs_r+0x58>
 802008e:	462a      	mov	r2, r5
 8020090:	f000 f987 	bl	80203a2 <_realloc_r>
 8020094:	4606      	mov	r6, r0
 8020096:	2800      	cmp	r0, #0
 8020098:	d1e1      	bne.n	802005e <__ssputs_r+0x70>
 802009a:	6921      	ldr	r1, [r4, #16]
 802009c:	4650      	mov	r0, sl
 802009e:	f7fc fb93 	bl	801c7c8 <_free_r>
 80200a2:	e7c7      	b.n	8020034 <__ssputs_r+0x46>

080200a4 <_svfiprintf_r>:
 80200a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200a8:	4698      	mov	r8, r3
 80200aa:	898b      	ldrh	r3, [r1, #12]
 80200ac:	061b      	lsls	r3, r3, #24
 80200ae:	b09d      	sub	sp, #116	; 0x74
 80200b0:	4607      	mov	r7, r0
 80200b2:	460d      	mov	r5, r1
 80200b4:	4614      	mov	r4, r2
 80200b6:	d50e      	bpl.n	80200d6 <_svfiprintf_r+0x32>
 80200b8:	690b      	ldr	r3, [r1, #16]
 80200ba:	b963      	cbnz	r3, 80200d6 <_svfiprintf_r+0x32>
 80200bc:	2140      	movs	r1, #64	; 0x40
 80200be:	f7fc fbef 	bl	801c8a0 <_malloc_r>
 80200c2:	6028      	str	r0, [r5, #0]
 80200c4:	6128      	str	r0, [r5, #16]
 80200c6:	b920      	cbnz	r0, 80200d2 <_svfiprintf_r+0x2e>
 80200c8:	230c      	movs	r3, #12
 80200ca:	603b      	str	r3, [r7, #0]
 80200cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80200d0:	e0d1      	b.n	8020276 <_svfiprintf_r+0x1d2>
 80200d2:	2340      	movs	r3, #64	; 0x40
 80200d4:	616b      	str	r3, [r5, #20]
 80200d6:	2300      	movs	r3, #0
 80200d8:	9309      	str	r3, [sp, #36]	; 0x24
 80200da:	2320      	movs	r3, #32
 80200dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80200e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80200e4:	2330      	movs	r3, #48	; 0x30
 80200e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020290 <_svfiprintf_r+0x1ec>
 80200ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80200ee:	f04f 0901 	mov.w	r9, #1
 80200f2:	4623      	mov	r3, r4
 80200f4:	469a      	mov	sl, r3
 80200f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80200fa:	b10a      	cbz	r2, 8020100 <_svfiprintf_r+0x5c>
 80200fc:	2a25      	cmp	r2, #37	; 0x25
 80200fe:	d1f9      	bne.n	80200f4 <_svfiprintf_r+0x50>
 8020100:	ebba 0b04 	subs.w	fp, sl, r4
 8020104:	d00b      	beq.n	802011e <_svfiprintf_r+0x7a>
 8020106:	465b      	mov	r3, fp
 8020108:	4622      	mov	r2, r4
 802010a:	4629      	mov	r1, r5
 802010c:	4638      	mov	r0, r7
 802010e:	f7ff ff6e 	bl	801ffee <__ssputs_r>
 8020112:	3001      	adds	r0, #1
 8020114:	f000 80aa 	beq.w	802026c <_svfiprintf_r+0x1c8>
 8020118:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802011a:	445a      	add	r2, fp
 802011c:	9209      	str	r2, [sp, #36]	; 0x24
 802011e:	f89a 3000 	ldrb.w	r3, [sl]
 8020122:	2b00      	cmp	r3, #0
 8020124:	f000 80a2 	beq.w	802026c <_svfiprintf_r+0x1c8>
 8020128:	2300      	movs	r3, #0
 802012a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802012e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020132:	f10a 0a01 	add.w	sl, sl, #1
 8020136:	9304      	str	r3, [sp, #16]
 8020138:	9307      	str	r3, [sp, #28]
 802013a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802013e:	931a      	str	r3, [sp, #104]	; 0x68
 8020140:	4654      	mov	r4, sl
 8020142:	2205      	movs	r2, #5
 8020144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020148:	4851      	ldr	r0, [pc, #324]	; (8020290 <_svfiprintf_r+0x1ec>)
 802014a:	f7e0 f881 	bl	8000250 <memchr>
 802014e:	9a04      	ldr	r2, [sp, #16]
 8020150:	b9d8      	cbnz	r0, 802018a <_svfiprintf_r+0xe6>
 8020152:	06d0      	lsls	r0, r2, #27
 8020154:	bf44      	itt	mi
 8020156:	2320      	movmi	r3, #32
 8020158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802015c:	0711      	lsls	r1, r2, #28
 802015e:	bf44      	itt	mi
 8020160:	232b      	movmi	r3, #43	; 0x2b
 8020162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020166:	f89a 3000 	ldrb.w	r3, [sl]
 802016a:	2b2a      	cmp	r3, #42	; 0x2a
 802016c:	d015      	beq.n	802019a <_svfiprintf_r+0xf6>
 802016e:	9a07      	ldr	r2, [sp, #28]
 8020170:	4654      	mov	r4, sl
 8020172:	2000      	movs	r0, #0
 8020174:	f04f 0c0a 	mov.w	ip, #10
 8020178:	4621      	mov	r1, r4
 802017a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802017e:	3b30      	subs	r3, #48	; 0x30
 8020180:	2b09      	cmp	r3, #9
 8020182:	d94e      	bls.n	8020222 <_svfiprintf_r+0x17e>
 8020184:	b1b0      	cbz	r0, 80201b4 <_svfiprintf_r+0x110>
 8020186:	9207      	str	r2, [sp, #28]
 8020188:	e014      	b.n	80201b4 <_svfiprintf_r+0x110>
 802018a:	eba0 0308 	sub.w	r3, r0, r8
 802018e:	fa09 f303 	lsl.w	r3, r9, r3
 8020192:	4313      	orrs	r3, r2
 8020194:	9304      	str	r3, [sp, #16]
 8020196:	46a2      	mov	sl, r4
 8020198:	e7d2      	b.n	8020140 <_svfiprintf_r+0x9c>
 802019a:	9b03      	ldr	r3, [sp, #12]
 802019c:	1d19      	adds	r1, r3, #4
 802019e:	681b      	ldr	r3, [r3, #0]
 80201a0:	9103      	str	r1, [sp, #12]
 80201a2:	2b00      	cmp	r3, #0
 80201a4:	bfbb      	ittet	lt
 80201a6:	425b      	neglt	r3, r3
 80201a8:	f042 0202 	orrlt.w	r2, r2, #2
 80201ac:	9307      	strge	r3, [sp, #28]
 80201ae:	9307      	strlt	r3, [sp, #28]
 80201b0:	bfb8      	it	lt
 80201b2:	9204      	strlt	r2, [sp, #16]
 80201b4:	7823      	ldrb	r3, [r4, #0]
 80201b6:	2b2e      	cmp	r3, #46	; 0x2e
 80201b8:	d10c      	bne.n	80201d4 <_svfiprintf_r+0x130>
 80201ba:	7863      	ldrb	r3, [r4, #1]
 80201bc:	2b2a      	cmp	r3, #42	; 0x2a
 80201be:	d135      	bne.n	802022c <_svfiprintf_r+0x188>
 80201c0:	9b03      	ldr	r3, [sp, #12]
 80201c2:	1d1a      	adds	r2, r3, #4
 80201c4:	681b      	ldr	r3, [r3, #0]
 80201c6:	9203      	str	r2, [sp, #12]
 80201c8:	2b00      	cmp	r3, #0
 80201ca:	bfb8      	it	lt
 80201cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80201d0:	3402      	adds	r4, #2
 80201d2:	9305      	str	r3, [sp, #20]
 80201d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80202a0 <_svfiprintf_r+0x1fc>
 80201d8:	7821      	ldrb	r1, [r4, #0]
 80201da:	2203      	movs	r2, #3
 80201dc:	4650      	mov	r0, sl
 80201de:	f7e0 f837 	bl	8000250 <memchr>
 80201e2:	b140      	cbz	r0, 80201f6 <_svfiprintf_r+0x152>
 80201e4:	2340      	movs	r3, #64	; 0x40
 80201e6:	eba0 000a 	sub.w	r0, r0, sl
 80201ea:	fa03 f000 	lsl.w	r0, r3, r0
 80201ee:	9b04      	ldr	r3, [sp, #16]
 80201f0:	4303      	orrs	r3, r0
 80201f2:	3401      	adds	r4, #1
 80201f4:	9304      	str	r3, [sp, #16]
 80201f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80201fa:	4826      	ldr	r0, [pc, #152]	; (8020294 <_svfiprintf_r+0x1f0>)
 80201fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020200:	2206      	movs	r2, #6
 8020202:	f7e0 f825 	bl	8000250 <memchr>
 8020206:	2800      	cmp	r0, #0
 8020208:	d038      	beq.n	802027c <_svfiprintf_r+0x1d8>
 802020a:	4b23      	ldr	r3, [pc, #140]	; (8020298 <_svfiprintf_r+0x1f4>)
 802020c:	bb1b      	cbnz	r3, 8020256 <_svfiprintf_r+0x1b2>
 802020e:	9b03      	ldr	r3, [sp, #12]
 8020210:	3307      	adds	r3, #7
 8020212:	f023 0307 	bic.w	r3, r3, #7
 8020216:	3308      	adds	r3, #8
 8020218:	9303      	str	r3, [sp, #12]
 802021a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802021c:	4433      	add	r3, r6
 802021e:	9309      	str	r3, [sp, #36]	; 0x24
 8020220:	e767      	b.n	80200f2 <_svfiprintf_r+0x4e>
 8020222:	fb0c 3202 	mla	r2, ip, r2, r3
 8020226:	460c      	mov	r4, r1
 8020228:	2001      	movs	r0, #1
 802022a:	e7a5      	b.n	8020178 <_svfiprintf_r+0xd4>
 802022c:	2300      	movs	r3, #0
 802022e:	3401      	adds	r4, #1
 8020230:	9305      	str	r3, [sp, #20]
 8020232:	4619      	mov	r1, r3
 8020234:	f04f 0c0a 	mov.w	ip, #10
 8020238:	4620      	mov	r0, r4
 802023a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802023e:	3a30      	subs	r2, #48	; 0x30
 8020240:	2a09      	cmp	r2, #9
 8020242:	d903      	bls.n	802024c <_svfiprintf_r+0x1a8>
 8020244:	2b00      	cmp	r3, #0
 8020246:	d0c5      	beq.n	80201d4 <_svfiprintf_r+0x130>
 8020248:	9105      	str	r1, [sp, #20]
 802024a:	e7c3      	b.n	80201d4 <_svfiprintf_r+0x130>
 802024c:	fb0c 2101 	mla	r1, ip, r1, r2
 8020250:	4604      	mov	r4, r0
 8020252:	2301      	movs	r3, #1
 8020254:	e7f0      	b.n	8020238 <_svfiprintf_r+0x194>
 8020256:	ab03      	add	r3, sp, #12
 8020258:	9300      	str	r3, [sp, #0]
 802025a:	462a      	mov	r2, r5
 802025c:	4b0f      	ldr	r3, [pc, #60]	; (802029c <_svfiprintf_r+0x1f8>)
 802025e:	a904      	add	r1, sp, #16
 8020260:	4638      	mov	r0, r7
 8020262:	f7fc fc31 	bl	801cac8 <_printf_float>
 8020266:	1c42      	adds	r2, r0, #1
 8020268:	4606      	mov	r6, r0
 802026a:	d1d6      	bne.n	802021a <_svfiprintf_r+0x176>
 802026c:	89ab      	ldrh	r3, [r5, #12]
 802026e:	065b      	lsls	r3, r3, #25
 8020270:	f53f af2c 	bmi.w	80200cc <_svfiprintf_r+0x28>
 8020274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020276:	b01d      	add	sp, #116	; 0x74
 8020278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802027c:	ab03      	add	r3, sp, #12
 802027e:	9300      	str	r3, [sp, #0]
 8020280:	462a      	mov	r2, r5
 8020282:	4b06      	ldr	r3, [pc, #24]	; (802029c <_svfiprintf_r+0x1f8>)
 8020284:	a904      	add	r1, sp, #16
 8020286:	4638      	mov	r0, r7
 8020288:	f7fc fec2 	bl	801d010 <_printf_i>
 802028c:	e7eb      	b.n	8020266 <_svfiprintf_r+0x1c2>
 802028e:	bf00      	nop
 8020290:	08023144 	.word	0x08023144
 8020294:	0802314e 	.word	0x0802314e
 8020298:	0801cac9 	.word	0x0801cac9
 802029c:	0801ffef 	.word	0x0801ffef
 80202a0:	0802314a 	.word	0x0802314a
 80202a4:	00000000 	.word	0x00000000

080202a8 <nan>:
 80202a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80202b0 <nan+0x8>
 80202ac:	4770      	bx	lr
 80202ae:	bf00      	nop
 80202b0:	00000000 	.word	0x00000000
 80202b4:	7ff80000 	.word	0x7ff80000

080202b8 <nanf>:
 80202b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80202c0 <nanf+0x8>
 80202bc:	4770      	bx	lr
 80202be:	bf00      	nop
 80202c0:	7fc00000 	.word	0x7fc00000

080202c4 <strncmp>:
 80202c4:	b510      	push	{r4, lr}
 80202c6:	b17a      	cbz	r2, 80202e8 <strncmp+0x24>
 80202c8:	4603      	mov	r3, r0
 80202ca:	3901      	subs	r1, #1
 80202cc:	1884      	adds	r4, r0, r2
 80202ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 80202d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80202d6:	4290      	cmp	r0, r2
 80202d8:	d101      	bne.n	80202de <strncmp+0x1a>
 80202da:	42a3      	cmp	r3, r4
 80202dc:	d101      	bne.n	80202e2 <strncmp+0x1e>
 80202de:	1a80      	subs	r0, r0, r2
 80202e0:	bd10      	pop	{r4, pc}
 80202e2:	2800      	cmp	r0, #0
 80202e4:	d1f3      	bne.n	80202ce <strncmp+0xa>
 80202e6:	e7fa      	b.n	80202de <strncmp+0x1a>
 80202e8:	4610      	mov	r0, r2
 80202ea:	e7f9      	b.n	80202e0 <strncmp+0x1c>

080202ec <__ascii_wctomb>:
 80202ec:	b149      	cbz	r1, 8020302 <__ascii_wctomb+0x16>
 80202ee:	2aff      	cmp	r2, #255	; 0xff
 80202f0:	bf85      	ittet	hi
 80202f2:	238a      	movhi	r3, #138	; 0x8a
 80202f4:	6003      	strhi	r3, [r0, #0]
 80202f6:	700a      	strbls	r2, [r1, #0]
 80202f8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80202fc:	bf98      	it	ls
 80202fe:	2001      	movls	r0, #1
 8020300:	4770      	bx	lr
 8020302:	4608      	mov	r0, r1
 8020304:	4770      	bx	lr
	...

08020308 <__assert_func>:
 8020308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802030a:	4614      	mov	r4, r2
 802030c:	461a      	mov	r2, r3
 802030e:	4b09      	ldr	r3, [pc, #36]	; (8020334 <__assert_func+0x2c>)
 8020310:	681b      	ldr	r3, [r3, #0]
 8020312:	4605      	mov	r5, r0
 8020314:	68d8      	ldr	r0, [r3, #12]
 8020316:	b14c      	cbz	r4, 802032c <__assert_func+0x24>
 8020318:	4b07      	ldr	r3, [pc, #28]	; (8020338 <__assert_func+0x30>)
 802031a:	9100      	str	r1, [sp, #0]
 802031c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020320:	4906      	ldr	r1, [pc, #24]	; (802033c <__assert_func+0x34>)
 8020322:	462b      	mov	r3, r5
 8020324:	f000 f80e 	bl	8020344 <fiprintf>
 8020328:	f000 fa84 	bl	8020834 <abort>
 802032c:	4b04      	ldr	r3, [pc, #16]	; (8020340 <__assert_func+0x38>)
 802032e:	461c      	mov	r4, r3
 8020330:	e7f3      	b.n	802031a <__assert_func+0x12>
 8020332:	bf00      	nop
 8020334:	200003a4 	.word	0x200003a4
 8020338:	08023155 	.word	0x08023155
 802033c:	08023162 	.word	0x08023162
 8020340:	08023190 	.word	0x08023190

08020344 <fiprintf>:
 8020344:	b40e      	push	{r1, r2, r3}
 8020346:	b503      	push	{r0, r1, lr}
 8020348:	4601      	mov	r1, r0
 802034a:	ab03      	add	r3, sp, #12
 802034c:	4805      	ldr	r0, [pc, #20]	; (8020364 <fiprintf+0x20>)
 802034e:	f853 2b04 	ldr.w	r2, [r3], #4
 8020352:	6800      	ldr	r0, [r0, #0]
 8020354:	9301      	str	r3, [sp, #4]
 8020356:	f000 f87d 	bl	8020454 <_vfiprintf_r>
 802035a:	b002      	add	sp, #8
 802035c:	f85d eb04 	ldr.w	lr, [sp], #4
 8020360:	b003      	add	sp, #12
 8020362:	4770      	bx	lr
 8020364:	200003a4 	.word	0x200003a4

08020368 <__retarget_lock_init_recursive>:
 8020368:	4770      	bx	lr

0802036a <__retarget_lock_acquire_recursive>:
 802036a:	4770      	bx	lr

0802036c <__retarget_lock_release_recursive>:
 802036c:	4770      	bx	lr

0802036e <memmove>:
 802036e:	4288      	cmp	r0, r1
 8020370:	b510      	push	{r4, lr}
 8020372:	eb01 0402 	add.w	r4, r1, r2
 8020376:	d902      	bls.n	802037e <memmove+0x10>
 8020378:	4284      	cmp	r4, r0
 802037a:	4623      	mov	r3, r4
 802037c:	d807      	bhi.n	802038e <memmove+0x20>
 802037e:	1e43      	subs	r3, r0, #1
 8020380:	42a1      	cmp	r1, r4
 8020382:	d008      	beq.n	8020396 <memmove+0x28>
 8020384:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020388:	f803 2f01 	strb.w	r2, [r3, #1]!
 802038c:	e7f8      	b.n	8020380 <memmove+0x12>
 802038e:	4402      	add	r2, r0
 8020390:	4601      	mov	r1, r0
 8020392:	428a      	cmp	r2, r1
 8020394:	d100      	bne.n	8020398 <memmove+0x2a>
 8020396:	bd10      	pop	{r4, pc}
 8020398:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802039c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80203a0:	e7f7      	b.n	8020392 <memmove+0x24>

080203a2 <_realloc_r>:
 80203a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80203a6:	4680      	mov	r8, r0
 80203a8:	4614      	mov	r4, r2
 80203aa:	460e      	mov	r6, r1
 80203ac:	b921      	cbnz	r1, 80203b8 <_realloc_r+0x16>
 80203ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80203b2:	4611      	mov	r1, r2
 80203b4:	f7fc ba74 	b.w	801c8a0 <_malloc_r>
 80203b8:	b92a      	cbnz	r2, 80203c6 <_realloc_r+0x24>
 80203ba:	f7fc fa05 	bl	801c7c8 <_free_r>
 80203be:	4625      	mov	r5, r4
 80203c0:	4628      	mov	r0, r5
 80203c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80203c6:	f000 fc59 	bl	8020c7c <_malloc_usable_size_r>
 80203ca:	4284      	cmp	r4, r0
 80203cc:	4607      	mov	r7, r0
 80203ce:	d802      	bhi.n	80203d6 <_realloc_r+0x34>
 80203d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80203d4:	d812      	bhi.n	80203fc <_realloc_r+0x5a>
 80203d6:	4621      	mov	r1, r4
 80203d8:	4640      	mov	r0, r8
 80203da:	f7fc fa61 	bl	801c8a0 <_malloc_r>
 80203de:	4605      	mov	r5, r0
 80203e0:	2800      	cmp	r0, #0
 80203e2:	d0ed      	beq.n	80203c0 <_realloc_r+0x1e>
 80203e4:	42bc      	cmp	r4, r7
 80203e6:	4622      	mov	r2, r4
 80203e8:	4631      	mov	r1, r6
 80203ea:	bf28      	it	cs
 80203ec:	463a      	movcs	r2, r7
 80203ee:	f7fc f9d5 	bl	801c79c <memcpy>
 80203f2:	4631      	mov	r1, r6
 80203f4:	4640      	mov	r0, r8
 80203f6:	f7fc f9e7 	bl	801c7c8 <_free_r>
 80203fa:	e7e1      	b.n	80203c0 <_realloc_r+0x1e>
 80203fc:	4635      	mov	r5, r6
 80203fe:	e7df      	b.n	80203c0 <_realloc_r+0x1e>

08020400 <__sfputc_r>:
 8020400:	6893      	ldr	r3, [r2, #8]
 8020402:	3b01      	subs	r3, #1
 8020404:	2b00      	cmp	r3, #0
 8020406:	b410      	push	{r4}
 8020408:	6093      	str	r3, [r2, #8]
 802040a:	da08      	bge.n	802041e <__sfputc_r+0x1e>
 802040c:	6994      	ldr	r4, [r2, #24]
 802040e:	42a3      	cmp	r3, r4
 8020410:	db01      	blt.n	8020416 <__sfputc_r+0x16>
 8020412:	290a      	cmp	r1, #10
 8020414:	d103      	bne.n	802041e <__sfputc_r+0x1e>
 8020416:	f85d 4b04 	ldr.w	r4, [sp], #4
 802041a:	f000 b94b 	b.w	80206b4 <__swbuf_r>
 802041e:	6813      	ldr	r3, [r2, #0]
 8020420:	1c58      	adds	r0, r3, #1
 8020422:	6010      	str	r0, [r2, #0]
 8020424:	7019      	strb	r1, [r3, #0]
 8020426:	4608      	mov	r0, r1
 8020428:	f85d 4b04 	ldr.w	r4, [sp], #4
 802042c:	4770      	bx	lr

0802042e <__sfputs_r>:
 802042e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020430:	4606      	mov	r6, r0
 8020432:	460f      	mov	r7, r1
 8020434:	4614      	mov	r4, r2
 8020436:	18d5      	adds	r5, r2, r3
 8020438:	42ac      	cmp	r4, r5
 802043a:	d101      	bne.n	8020440 <__sfputs_r+0x12>
 802043c:	2000      	movs	r0, #0
 802043e:	e007      	b.n	8020450 <__sfputs_r+0x22>
 8020440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020444:	463a      	mov	r2, r7
 8020446:	4630      	mov	r0, r6
 8020448:	f7ff ffda 	bl	8020400 <__sfputc_r>
 802044c:	1c43      	adds	r3, r0, #1
 802044e:	d1f3      	bne.n	8020438 <__sfputs_r+0xa>
 8020450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020454 <_vfiprintf_r>:
 8020454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020458:	460d      	mov	r5, r1
 802045a:	b09d      	sub	sp, #116	; 0x74
 802045c:	4614      	mov	r4, r2
 802045e:	4698      	mov	r8, r3
 8020460:	4606      	mov	r6, r0
 8020462:	b118      	cbz	r0, 802046c <_vfiprintf_r+0x18>
 8020464:	6983      	ldr	r3, [r0, #24]
 8020466:	b90b      	cbnz	r3, 802046c <_vfiprintf_r+0x18>
 8020468:	f000 fb06 	bl	8020a78 <__sinit>
 802046c:	4b89      	ldr	r3, [pc, #548]	; (8020694 <_vfiprintf_r+0x240>)
 802046e:	429d      	cmp	r5, r3
 8020470:	d11b      	bne.n	80204aa <_vfiprintf_r+0x56>
 8020472:	6875      	ldr	r5, [r6, #4]
 8020474:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020476:	07d9      	lsls	r1, r3, #31
 8020478:	d405      	bmi.n	8020486 <_vfiprintf_r+0x32>
 802047a:	89ab      	ldrh	r3, [r5, #12]
 802047c:	059a      	lsls	r2, r3, #22
 802047e:	d402      	bmi.n	8020486 <_vfiprintf_r+0x32>
 8020480:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020482:	f7ff ff72 	bl	802036a <__retarget_lock_acquire_recursive>
 8020486:	89ab      	ldrh	r3, [r5, #12]
 8020488:	071b      	lsls	r3, r3, #28
 802048a:	d501      	bpl.n	8020490 <_vfiprintf_r+0x3c>
 802048c:	692b      	ldr	r3, [r5, #16]
 802048e:	b9eb      	cbnz	r3, 80204cc <_vfiprintf_r+0x78>
 8020490:	4629      	mov	r1, r5
 8020492:	4630      	mov	r0, r6
 8020494:	f000 f960 	bl	8020758 <__swsetup_r>
 8020498:	b1c0      	cbz	r0, 80204cc <_vfiprintf_r+0x78>
 802049a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802049c:	07dc      	lsls	r4, r3, #31
 802049e:	d50e      	bpl.n	80204be <_vfiprintf_r+0x6a>
 80204a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80204a4:	b01d      	add	sp, #116	; 0x74
 80204a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204aa:	4b7b      	ldr	r3, [pc, #492]	; (8020698 <_vfiprintf_r+0x244>)
 80204ac:	429d      	cmp	r5, r3
 80204ae:	d101      	bne.n	80204b4 <_vfiprintf_r+0x60>
 80204b0:	68b5      	ldr	r5, [r6, #8]
 80204b2:	e7df      	b.n	8020474 <_vfiprintf_r+0x20>
 80204b4:	4b79      	ldr	r3, [pc, #484]	; (802069c <_vfiprintf_r+0x248>)
 80204b6:	429d      	cmp	r5, r3
 80204b8:	bf08      	it	eq
 80204ba:	68f5      	ldreq	r5, [r6, #12]
 80204bc:	e7da      	b.n	8020474 <_vfiprintf_r+0x20>
 80204be:	89ab      	ldrh	r3, [r5, #12]
 80204c0:	0598      	lsls	r0, r3, #22
 80204c2:	d4ed      	bmi.n	80204a0 <_vfiprintf_r+0x4c>
 80204c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80204c6:	f7ff ff51 	bl	802036c <__retarget_lock_release_recursive>
 80204ca:	e7e9      	b.n	80204a0 <_vfiprintf_r+0x4c>
 80204cc:	2300      	movs	r3, #0
 80204ce:	9309      	str	r3, [sp, #36]	; 0x24
 80204d0:	2320      	movs	r3, #32
 80204d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80204d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80204da:	2330      	movs	r3, #48	; 0x30
 80204dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80206a0 <_vfiprintf_r+0x24c>
 80204e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80204e4:	f04f 0901 	mov.w	r9, #1
 80204e8:	4623      	mov	r3, r4
 80204ea:	469a      	mov	sl, r3
 80204ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80204f0:	b10a      	cbz	r2, 80204f6 <_vfiprintf_r+0xa2>
 80204f2:	2a25      	cmp	r2, #37	; 0x25
 80204f4:	d1f9      	bne.n	80204ea <_vfiprintf_r+0x96>
 80204f6:	ebba 0b04 	subs.w	fp, sl, r4
 80204fa:	d00b      	beq.n	8020514 <_vfiprintf_r+0xc0>
 80204fc:	465b      	mov	r3, fp
 80204fe:	4622      	mov	r2, r4
 8020500:	4629      	mov	r1, r5
 8020502:	4630      	mov	r0, r6
 8020504:	f7ff ff93 	bl	802042e <__sfputs_r>
 8020508:	3001      	adds	r0, #1
 802050a:	f000 80aa 	beq.w	8020662 <_vfiprintf_r+0x20e>
 802050e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020510:	445a      	add	r2, fp
 8020512:	9209      	str	r2, [sp, #36]	; 0x24
 8020514:	f89a 3000 	ldrb.w	r3, [sl]
 8020518:	2b00      	cmp	r3, #0
 802051a:	f000 80a2 	beq.w	8020662 <_vfiprintf_r+0x20e>
 802051e:	2300      	movs	r3, #0
 8020520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020524:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020528:	f10a 0a01 	add.w	sl, sl, #1
 802052c:	9304      	str	r3, [sp, #16]
 802052e:	9307      	str	r3, [sp, #28]
 8020530:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020534:	931a      	str	r3, [sp, #104]	; 0x68
 8020536:	4654      	mov	r4, sl
 8020538:	2205      	movs	r2, #5
 802053a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802053e:	4858      	ldr	r0, [pc, #352]	; (80206a0 <_vfiprintf_r+0x24c>)
 8020540:	f7df fe86 	bl	8000250 <memchr>
 8020544:	9a04      	ldr	r2, [sp, #16]
 8020546:	b9d8      	cbnz	r0, 8020580 <_vfiprintf_r+0x12c>
 8020548:	06d1      	lsls	r1, r2, #27
 802054a:	bf44      	itt	mi
 802054c:	2320      	movmi	r3, #32
 802054e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020552:	0713      	lsls	r3, r2, #28
 8020554:	bf44      	itt	mi
 8020556:	232b      	movmi	r3, #43	; 0x2b
 8020558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802055c:	f89a 3000 	ldrb.w	r3, [sl]
 8020560:	2b2a      	cmp	r3, #42	; 0x2a
 8020562:	d015      	beq.n	8020590 <_vfiprintf_r+0x13c>
 8020564:	9a07      	ldr	r2, [sp, #28]
 8020566:	4654      	mov	r4, sl
 8020568:	2000      	movs	r0, #0
 802056a:	f04f 0c0a 	mov.w	ip, #10
 802056e:	4621      	mov	r1, r4
 8020570:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020574:	3b30      	subs	r3, #48	; 0x30
 8020576:	2b09      	cmp	r3, #9
 8020578:	d94e      	bls.n	8020618 <_vfiprintf_r+0x1c4>
 802057a:	b1b0      	cbz	r0, 80205aa <_vfiprintf_r+0x156>
 802057c:	9207      	str	r2, [sp, #28]
 802057e:	e014      	b.n	80205aa <_vfiprintf_r+0x156>
 8020580:	eba0 0308 	sub.w	r3, r0, r8
 8020584:	fa09 f303 	lsl.w	r3, r9, r3
 8020588:	4313      	orrs	r3, r2
 802058a:	9304      	str	r3, [sp, #16]
 802058c:	46a2      	mov	sl, r4
 802058e:	e7d2      	b.n	8020536 <_vfiprintf_r+0xe2>
 8020590:	9b03      	ldr	r3, [sp, #12]
 8020592:	1d19      	adds	r1, r3, #4
 8020594:	681b      	ldr	r3, [r3, #0]
 8020596:	9103      	str	r1, [sp, #12]
 8020598:	2b00      	cmp	r3, #0
 802059a:	bfbb      	ittet	lt
 802059c:	425b      	neglt	r3, r3
 802059e:	f042 0202 	orrlt.w	r2, r2, #2
 80205a2:	9307      	strge	r3, [sp, #28]
 80205a4:	9307      	strlt	r3, [sp, #28]
 80205a6:	bfb8      	it	lt
 80205a8:	9204      	strlt	r2, [sp, #16]
 80205aa:	7823      	ldrb	r3, [r4, #0]
 80205ac:	2b2e      	cmp	r3, #46	; 0x2e
 80205ae:	d10c      	bne.n	80205ca <_vfiprintf_r+0x176>
 80205b0:	7863      	ldrb	r3, [r4, #1]
 80205b2:	2b2a      	cmp	r3, #42	; 0x2a
 80205b4:	d135      	bne.n	8020622 <_vfiprintf_r+0x1ce>
 80205b6:	9b03      	ldr	r3, [sp, #12]
 80205b8:	1d1a      	adds	r2, r3, #4
 80205ba:	681b      	ldr	r3, [r3, #0]
 80205bc:	9203      	str	r2, [sp, #12]
 80205be:	2b00      	cmp	r3, #0
 80205c0:	bfb8      	it	lt
 80205c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80205c6:	3402      	adds	r4, #2
 80205c8:	9305      	str	r3, [sp, #20]
 80205ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80206b0 <_vfiprintf_r+0x25c>
 80205ce:	7821      	ldrb	r1, [r4, #0]
 80205d0:	2203      	movs	r2, #3
 80205d2:	4650      	mov	r0, sl
 80205d4:	f7df fe3c 	bl	8000250 <memchr>
 80205d8:	b140      	cbz	r0, 80205ec <_vfiprintf_r+0x198>
 80205da:	2340      	movs	r3, #64	; 0x40
 80205dc:	eba0 000a 	sub.w	r0, r0, sl
 80205e0:	fa03 f000 	lsl.w	r0, r3, r0
 80205e4:	9b04      	ldr	r3, [sp, #16]
 80205e6:	4303      	orrs	r3, r0
 80205e8:	3401      	adds	r4, #1
 80205ea:	9304      	str	r3, [sp, #16]
 80205ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80205f0:	482c      	ldr	r0, [pc, #176]	; (80206a4 <_vfiprintf_r+0x250>)
 80205f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80205f6:	2206      	movs	r2, #6
 80205f8:	f7df fe2a 	bl	8000250 <memchr>
 80205fc:	2800      	cmp	r0, #0
 80205fe:	d03f      	beq.n	8020680 <_vfiprintf_r+0x22c>
 8020600:	4b29      	ldr	r3, [pc, #164]	; (80206a8 <_vfiprintf_r+0x254>)
 8020602:	bb1b      	cbnz	r3, 802064c <_vfiprintf_r+0x1f8>
 8020604:	9b03      	ldr	r3, [sp, #12]
 8020606:	3307      	adds	r3, #7
 8020608:	f023 0307 	bic.w	r3, r3, #7
 802060c:	3308      	adds	r3, #8
 802060e:	9303      	str	r3, [sp, #12]
 8020610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020612:	443b      	add	r3, r7
 8020614:	9309      	str	r3, [sp, #36]	; 0x24
 8020616:	e767      	b.n	80204e8 <_vfiprintf_r+0x94>
 8020618:	fb0c 3202 	mla	r2, ip, r2, r3
 802061c:	460c      	mov	r4, r1
 802061e:	2001      	movs	r0, #1
 8020620:	e7a5      	b.n	802056e <_vfiprintf_r+0x11a>
 8020622:	2300      	movs	r3, #0
 8020624:	3401      	adds	r4, #1
 8020626:	9305      	str	r3, [sp, #20]
 8020628:	4619      	mov	r1, r3
 802062a:	f04f 0c0a 	mov.w	ip, #10
 802062e:	4620      	mov	r0, r4
 8020630:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020634:	3a30      	subs	r2, #48	; 0x30
 8020636:	2a09      	cmp	r2, #9
 8020638:	d903      	bls.n	8020642 <_vfiprintf_r+0x1ee>
 802063a:	2b00      	cmp	r3, #0
 802063c:	d0c5      	beq.n	80205ca <_vfiprintf_r+0x176>
 802063e:	9105      	str	r1, [sp, #20]
 8020640:	e7c3      	b.n	80205ca <_vfiprintf_r+0x176>
 8020642:	fb0c 2101 	mla	r1, ip, r1, r2
 8020646:	4604      	mov	r4, r0
 8020648:	2301      	movs	r3, #1
 802064a:	e7f0      	b.n	802062e <_vfiprintf_r+0x1da>
 802064c:	ab03      	add	r3, sp, #12
 802064e:	9300      	str	r3, [sp, #0]
 8020650:	462a      	mov	r2, r5
 8020652:	4b16      	ldr	r3, [pc, #88]	; (80206ac <_vfiprintf_r+0x258>)
 8020654:	a904      	add	r1, sp, #16
 8020656:	4630      	mov	r0, r6
 8020658:	f7fc fa36 	bl	801cac8 <_printf_float>
 802065c:	4607      	mov	r7, r0
 802065e:	1c78      	adds	r0, r7, #1
 8020660:	d1d6      	bne.n	8020610 <_vfiprintf_r+0x1bc>
 8020662:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020664:	07d9      	lsls	r1, r3, #31
 8020666:	d405      	bmi.n	8020674 <_vfiprintf_r+0x220>
 8020668:	89ab      	ldrh	r3, [r5, #12]
 802066a:	059a      	lsls	r2, r3, #22
 802066c:	d402      	bmi.n	8020674 <_vfiprintf_r+0x220>
 802066e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020670:	f7ff fe7c 	bl	802036c <__retarget_lock_release_recursive>
 8020674:	89ab      	ldrh	r3, [r5, #12]
 8020676:	065b      	lsls	r3, r3, #25
 8020678:	f53f af12 	bmi.w	80204a0 <_vfiprintf_r+0x4c>
 802067c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802067e:	e711      	b.n	80204a4 <_vfiprintf_r+0x50>
 8020680:	ab03      	add	r3, sp, #12
 8020682:	9300      	str	r3, [sp, #0]
 8020684:	462a      	mov	r2, r5
 8020686:	4b09      	ldr	r3, [pc, #36]	; (80206ac <_vfiprintf_r+0x258>)
 8020688:	a904      	add	r1, sp, #16
 802068a:	4630      	mov	r0, r6
 802068c:	f7fc fcc0 	bl	801d010 <_printf_i>
 8020690:	e7e4      	b.n	802065c <_vfiprintf_r+0x208>
 8020692:	bf00      	nop
 8020694:	080231b4 	.word	0x080231b4
 8020698:	080231d4 	.word	0x080231d4
 802069c:	08023194 	.word	0x08023194
 80206a0:	08023144 	.word	0x08023144
 80206a4:	0802314e 	.word	0x0802314e
 80206a8:	0801cac9 	.word	0x0801cac9
 80206ac:	0802042f 	.word	0x0802042f
 80206b0:	0802314a 	.word	0x0802314a

080206b4 <__swbuf_r>:
 80206b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80206b6:	460e      	mov	r6, r1
 80206b8:	4614      	mov	r4, r2
 80206ba:	4605      	mov	r5, r0
 80206bc:	b118      	cbz	r0, 80206c6 <__swbuf_r+0x12>
 80206be:	6983      	ldr	r3, [r0, #24]
 80206c0:	b90b      	cbnz	r3, 80206c6 <__swbuf_r+0x12>
 80206c2:	f000 f9d9 	bl	8020a78 <__sinit>
 80206c6:	4b21      	ldr	r3, [pc, #132]	; (802074c <__swbuf_r+0x98>)
 80206c8:	429c      	cmp	r4, r3
 80206ca:	d12b      	bne.n	8020724 <__swbuf_r+0x70>
 80206cc:	686c      	ldr	r4, [r5, #4]
 80206ce:	69a3      	ldr	r3, [r4, #24]
 80206d0:	60a3      	str	r3, [r4, #8]
 80206d2:	89a3      	ldrh	r3, [r4, #12]
 80206d4:	071a      	lsls	r2, r3, #28
 80206d6:	d52f      	bpl.n	8020738 <__swbuf_r+0x84>
 80206d8:	6923      	ldr	r3, [r4, #16]
 80206da:	b36b      	cbz	r3, 8020738 <__swbuf_r+0x84>
 80206dc:	6923      	ldr	r3, [r4, #16]
 80206de:	6820      	ldr	r0, [r4, #0]
 80206e0:	1ac0      	subs	r0, r0, r3
 80206e2:	6963      	ldr	r3, [r4, #20]
 80206e4:	b2f6      	uxtb	r6, r6
 80206e6:	4283      	cmp	r3, r0
 80206e8:	4637      	mov	r7, r6
 80206ea:	dc04      	bgt.n	80206f6 <__swbuf_r+0x42>
 80206ec:	4621      	mov	r1, r4
 80206ee:	4628      	mov	r0, r5
 80206f0:	f000 f92e 	bl	8020950 <_fflush_r>
 80206f4:	bb30      	cbnz	r0, 8020744 <__swbuf_r+0x90>
 80206f6:	68a3      	ldr	r3, [r4, #8]
 80206f8:	3b01      	subs	r3, #1
 80206fa:	60a3      	str	r3, [r4, #8]
 80206fc:	6823      	ldr	r3, [r4, #0]
 80206fe:	1c5a      	adds	r2, r3, #1
 8020700:	6022      	str	r2, [r4, #0]
 8020702:	701e      	strb	r6, [r3, #0]
 8020704:	6963      	ldr	r3, [r4, #20]
 8020706:	3001      	adds	r0, #1
 8020708:	4283      	cmp	r3, r0
 802070a:	d004      	beq.n	8020716 <__swbuf_r+0x62>
 802070c:	89a3      	ldrh	r3, [r4, #12]
 802070e:	07db      	lsls	r3, r3, #31
 8020710:	d506      	bpl.n	8020720 <__swbuf_r+0x6c>
 8020712:	2e0a      	cmp	r6, #10
 8020714:	d104      	bne.n	8020720 <__swbuf_r+0x6c>
 8020716:	4621      	mov	r1, r4
 8020718:	4628      	mov	r0, r5
 802071a:	f000 f919 	bl	8020950 <_fflush_r>
 802071e:	b988      	cbnz	r0, 8020744 <__swbuf_r+0x90>
 8020720:	4638      	mov	r0, r7
 8020722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020724:	4b0a      	ldr	r3, [pc, #40]	; (8020750 <__swbuf_r+0x9c>)
 8020726:	429c      	cmp	r4, r3
 8020728:	d101      	bne.n	802072e <__swbuf_r+0x7a>
 802072a:	68ac      	ldr	r4, [r5, #8]
 802072c:	e7cf      	b.n	80206ce <__swbuf_r+0x1a>
 802072e:	4b09      	ldr	r3, [pc, #36]	; (8020754 <__swbuf_r+0xa0>)
 8020730:	429c      	cmp	r4, r3
 8020732:	bf08      	it	eq
 8020734:	68ec      	ldreq	r4, [r5, #12]
 8020736:	e7ca      	b.n	80206ce <__swbuf_r+0x1a>
 8020738:	4621      	mov	r1, r4
 802073a:	4628      	mov	r0, r5
 802073c:	f000 f80c 	bl	8020758 <__swsetup_r>
 8020740:	2800      	cmp	r0, #0
 8020742:	d0cb      	beq.n	80206dc <__swbuf_r+0x28>
 8020744:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8020748:	e7ea      	b.n	8020720 <__swbuf_r+0x6c>
 802074a:	bf00      	nop
 802074c:	080231b4 	.word	0x080231b4
 8020750:	080231d4 	.word	0x080231d4
 8020754:	08023194 	.word	0x08023194

08020758 <__swsetup_r>:
 8020758:	4b32      	ldr	r3, [pc, #200]	; (8020824 <__swsetup_r+0xcc>)
 802075a:	b570      	push	{r4, r5, r6, lr}
 802075c:	681d      	ldr	r5, [r3, #0]
 802075e:	4606      	mov	r6, r0
 8020760:	460c      	mov	r4, r1
 8020762:	b125      	cbz	r5, 802076e <__swsetup_r+0x16>
 8020764:	69ab      	ldr	r3, [r5, #24]
 8020766:	b913      	cbnz	r3, 802076e <__swsetup_r+0x16>
 8020768:	4628      	mov	r0, r5
 802076a:	f000 f985 	bl	8020a78 <__sinit>
 802076e:	4b2e      	ldr	r3, [pc, #184]	; (8020828 <__swsetup_r+0xd0>)
 8020770:	429c      	cmp	r4, r3
 8020772:	d10f      	bne.n	8020794 <__swsetup_r+0x3c>
 8020774:	686c      	ldr	r4, [r5, #4]
 8020776:	89a3      	ldrh	r3, [r4, #12]
 8020778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802077c:	0719      	lsls	r1, r3, #28
 802077e:	d42c      	bmi.n	80207da <__swsetup_r+0x82>
 8020780:	06dd      	lsls	r5, r3, #27
 8020782:	d411      	bmi.n	80207a8 <__swsetup_r+0x50>
 8020784:	2309      	movs	r3, #9
 8020786:	6033      	str	r3, [r6, #0]
 8020788:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802078c:	81a3      	strh	r3, [r4, #12]
 802078e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020792:	e03e      	b.n	8020812 <__swsetup_r+0xba>
 8020794:	4b25      	ldr	r3, [pc, #148]	; (802082c <__swsetup_r+0xd4>)
 8020796:	429c      	cmp	r4, r3
 8020798:	d101      	bne.n	802079e <__swsetup_r+0x46>
 802079a:	68ac      	ldr	r4, [r5, #8]
 802079c:	e7eb      	b.n	8020776 <__swsetup_r+0x1e>
 802079e:	4b24      	ldr	r3, [pc, #144]	; (8020830 <__swsetup_r+0xd8>)
 80207a0:	429c      	cmp	r4, r3
 80207a2:	bf08      	it	eq
 80207a4:	68ec      	ldreq	r4, [r5, #12]
 80207a6:	e7e6      	b.n	8020776 <__swsetup_r+0x1e>
 80207a8:	0758      	lsls	r0, r3, #29
 80207aa:	d512      	bpl.n	80207d2 <__swsetup_r+0x7a>
 80207ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80207ae:	b141      	cbz	r1, 80207c2 <__swsetup_r+0x6a>
 80207b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80207b4:	4299      	cmp	r1, r3
 80207b6:	d002      	beq.n	80207be <__swsetup_r+0x66>
 80207b8:	4630      	mov	r0, r6
 80207ba:	f7fc f805 	bl	801c7c8 <_free_r>
 80207be:	2300      	movs	r3, #0
 80207c0:	6363      	str	r3, [r4, #52]	; 0x34
 80207c2:	89a3      	ldrh	r3, [r4, #12]
 80207c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80207c8:	81a3      	strh	r3, [r4, #12]
 80207ca:	2300      	movs	r3, #0
 80207cc:	6063      	str	r3, [r4, #4]
 80207ce:	6923      	ldr	r3, [r4, #16]
 80207d0:	6023      	str	r3, [r4, #0]
 80207d2:	89a3      	ldrh	r3, [r4, #12]
 80207d4:	f043 0308 	orr.w	r3, r3, #8
 80207d8:	81a3      	strh	r3, [r4, #12]
 80207da:	6923      	ldr	r3, [r4, #16]
 80207dc:	b94b      	cbnz	r3, 80207f2 <__swsetup_r+0x9a>
 80207de:	89a3      	ldrh	r3, [r4, #12]
 80207e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80207e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80207e8:	d003      	beq.n	80207f2 <__swsetup_r+0x9a>
 80207ea:	4621      	mov	r1, r4
 80207ec:	4630      	mov	r0, r6
 80207ee:	f000 fa05 	bl	8020bfc <__smakebuf_r>
 80207f2:	89a0      	ldrh	r0, [r4, #12]
 80207f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80207f8:	f010 0301 	ands.w	r3, r0, #1
 80207fc:	d00a      	beq.n	8020814 <__swsetup_r+0xbc>
 80207fe:	2300      	movs	r3, #0
 8020800:	60a3      	str	r3, [r4, #8]
 8020802:	6963      	ldr	r3, [r4, #20]
 8020804:	425b      	negs	r3, r3
 8020806:	61a3      	str	r3, [r4, #24]
 8020808:	6923      	ldr	r3, [r4, #16]
 802080a:	b943      	cbnz	r3, 802081e <__swsetup_r+0xc6>
 802080c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020810:	d1ba      	bne.n	8020788 <__swsetup_r+0x30>
 8020812:	bd70      	pop	{r4, r5, r6, pc}
 8020814:	0781      	lsls	r1, r0, #30
 8020816:	bf58      	it	pl
 8020818:	6963      	ldrpl	r3, [r4, #20]
 802081a:	60a3      	str	r3, [r4, #8]
 802081c:	e7f4      	b.n	8020808 <__swsetup_r+0xb0>
 802081e:	2000      	movs	r0, #0
 8020820:	e7f7      	b.n	8020812 <__swsetup_r+0xba>
 8020822:	bf00      	nop
 8020824:	200003a4 	.word	0x200003a4
 8020828:	080231b4 	.word	0x080231b4
 802082c:	080231d4 	.word	0x080231d4
 8020830:	08023194 	.word	0x08023194

08020834 <abort>:
 8020834:	b508      	push	{r3, lr}
 8020836:	2006      	movs	r0, #6
 8020838:	f000 fa50 	bl	8020cdc <raise>
 802083c:	2001      	movs	r0, #1
 802083e:	f7e8 fb5f 	bl	8008f00 <_exit>
	...

08020844 <__sflush_r>:
 8020844:	898a      	ldrh	r2, [r1, #12]
 8020846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802084a:	4605      	mov	r5, r0
 802084c:	0710      	lsls	r0, r2, #28
 802084e:	460c      	mov	r4, r1
 8020850:	d458      	bmi.n	8020904 <__sflush_r+0xc0>
 8020852:	684b      	ldr	r3, [r1, #4]
 8020854:	2b00      	cmp	r3, #0
 8020856:	dc05      	bgt.n	8020864 <__sflush_r+0x20>
 8020858:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802085a:	2b00      	cmp	r3, #0
 802085c:	dc02      	bgt.n	8020864 <__sflush_r+0x20>
 802085e:	2000      	movs	r0, #0
 8020860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020864:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020866:	2e00      	cmp	r6, #0
 8020868:	d0f9      	beq.n	802085e <__sflush_r+0x1a>
 802086a:	2300      	movs	r3, #0
 802086c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020870:	682f      	ldr	r7, [r5, #0]
 8020872:	602b      	str	r3, [r5, #0]
 8020874:	d032      	beq.n	80208dc <__sflush_r+0x98>
 8020876:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020878:	89a3      	ldrh	r3, [r4, #12]
 802087a:	075a      	lsls	r2, r3, #29
 802087c:	d505      	bpl.n	802088a <__sflush_r+0x46>
 802087e:	6863      	ldr	r3, [r4, #4]
 8020880:	1ac0      	subs	r0, r0, r3
 8020882:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020884:	b10b      	cbz	r3, 802088a <__sflush_r+0x46>
 8020886:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020888:	1ac0      	subs	r0, r0, r3
 802088a:	2300      	movs	r3, #0
 802088c:	4602      	mov	r2, r0
 802088e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020890:	6a21      	ldr	r1, [r4, #32]
 8020892:	4628      	mov	r0, r5
 8020894:	47b0      	blx	r6
 8020896:	1c43      	adds	r3, r0, #1
 8020898:	89a3      	ldrh	r3, [r4, #12]
 802089a:	d106      	bne.n	80208aa <__sflush_r+0x66>
 802089c:	6829      	ldr	r1, [r5, #0]
 802089e:	291d      	cmp	r1, #29
 80208a0:	d82c      	bhi.n	80208fc <__sflush_r+0xb8>
 80208a2:	4a2a      	ldr	r2, [pc, #168]	; (802094c <__sflush_r+0x108>)
 80208a4:	40ca      	lsrs	r2, r1
 80208a6:	07d6      	lsls	r6, r2, #31
 80208a8:	d528      	bpl.n	80208fc <__sflush_r+0xb8>
 80208aa:	2200      	movs	r2, #0
 80208ac:	6062      	str	r2, [r4, #4]
 80208ae:	04d9      	lsls	r1, r3, #19
 80208b0:	6922      	ldr	r2, [r4, #16]
 80208b2:	6022      	str	r2, [r4, #0]
 80208b4:	d504      	bpl.n	80208c0 <__sflush_r+0x7c>
 80208b6:	1c42      	adds	r2, r0, #1
 80208b8:	d101      	bne.n	80208be <__sflush_r+0x7a>
 80208ba:	682b      	ldr	r3, [r5, #0]
 80208bc:	b903      	cbnz	r3, 80208c0 <__sflush_r+0x7c>
 80208be:	6560      	str	r0, [r4, #84]	; 0x54
 80208c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80208c2:	602f      	str	r7, [r5, #0]
 80208c4:	2900      	cmp	r1, #0
 80208c6:	d0ca      	beq.n	802085e <__sflush_r+0x1a>
 80208c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80208cc:	4299      	cmp	r1, r3
 80208ce:	d002      	beq.n	80208d6 <__sflush_r+0x92>
 80208d0:	4628      	mov	r0, r5
 80208d2:	f7fb ff79 	bl	801c7c8 <_free_r>
 80208d6:	2000      	movs	r0, #0
 80208d8:	6360      	str	r0, [r4, #52]	; 0x34
 80208da:	e7c1      	b.n	8020860 <__sflush_r+0x1c>
 80208dc:	6a21      	ldr	r1, [r4, #32]
 80208de:	2301      	movs	r3, #1
 80208e0:	4628      	mov	r0, r5
 80208e2:	47b0      	blx	r6
 80208e4:	1c41      	adds	r1, r0, #1
 80208e6:	d1c7      	bne.n	8020878 <__sflush_r+0x34>
 80208e8:	682b      	ldr	r3, [r5, #0]
 80208ea:	2b00      	cmp	r3, #0
 80208ec:	d0c4      	beq.n	8020878 <__sflush_r+0x34>
 80208ee:	2b1d      	cmp	r3, #29
 80208f0:	d001      	beq.n	80208f6 <__sflush_r+0xb2>
 80208f2:	2b16      	cmp	r3, #22
 80208f4:	d101      	bne.n	80208fa <__sflush_r+0xb6>
 80208f6:	602f      	str	r7, [r5, #0]
 80208f8:	e7b1      	b.n	802085e <__sflush_r+0x1a>
 80208fa:	89a3      	ldrh	r3, [r4, #12]
 80208fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020900:	81a3      	strh	r3, [r4, #12]
 8020902:	e7ad      	b.n	8020860 <__sflush_r+0x1c>
 8020904:	690f      	ldr	r7, [r1, #16]
 8020906:	2f00      	cmp	r7, #0
 8020908:	d0a9      	beq.n	802085e <__sflush_r+0x1a>
 802090a:	0793      	lsls	r3, r2, #30
 802090c:	680e      	ldr	r6, [r1, #0]
 802090e:	bf08      	it	eq
 8020910:	694b      	ldreq	r3, [r1, #20]
 8020912:	600f      	str	r7, [r1, #0]
 8020914:	bf18      	it	ne
 8020916:	2300      	movne	r3, #0
 8020918:	eba6 0807 	sub.w	r8, r6, r7
 802091c:	608b      	str	r3, [r1, #8]
 802091e:	f1b8 0f00 	cmp.w	r8, #0
 8020922:	dd9c      	ble.n	802085e <__sflush_r+0x1a>
 8020924:	6a21      	ldr	r1, [r4, #32]
 8020926:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020928:	4643      	mov	r3, r8
 802092a:	463a      	mov	r2, r7
 802092c:	4628      	mov	r0, r5
 802092e:	47b0      	blx	r6
 8020930:	2800      	cmp	r0, #0
 8020932:	dc06      	bgt.n	8020942 <__sflush_r+0xfe>
 8020934:	89a3      	ldrh	r3, [r4, #12]
 8020936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802093a:	81a3      	strh	r3, [r4, #12]
 802093c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020940:	e78e      	b.n	8020860 <__sflush_r+0x1c>
 8020942:	4407      	add	r7, r0
 8020944:	eba8 0800 	sub.w	r8, r8, r0
 8020948:	e7e9      	b.n	802091e <__sflush_r+0xda>
 802094a:	bf00      	nop
 802094c:	20400001 	.word	0x20400001

08020950 <_fflush_r>:
 8020950:	b538      	push	{r3, r4, r5, lr}
 8020952:	690b      	ldr	r3, [r1, #16]
 8020954:	4605      	mov	r5, r0
 8020956:	460c      	mov	r4, r1
 8020958:	b913      	cbnz	r3, 8020960 <_fflush_r+0x10>
 802095a:	2500      	movs	r5, #0
 802095c:	4628      	mov	r0, r5
 802095e:	bd38      	pop	{r3, r4, r5, pc}
 8020960:	b118      	cbz	r0, 802096a <_fflush_r+0x1a>
 8020962:	6983      	ldr	r3, [r0, #24]
 8020964:	b90b      	cbnz	r3, 802096a <_fflush_r+0x1a>
 8020966:	f000 f887 	bl	8020a78 <__sinit>
 802096a:	4b14      	ldr	r3, [pc, #80]	; (80209bc <_fflush_r+0x6c>)
 802096c:	429c      	cmp	r4, r3
 802096e:	d11b      	bne.n	80209a8 <_fflush_r+0x58>
 8020970:	686c      	ldr	r4, [r5, #4]
 8020972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020976:	2b00      	cmp	r3, #0
 8020978:	d0ef      	beq.n	802095a <_fflush_r+0xa>
 802097a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802097c:	07d0      	lsls	r0, r2, #31
 802097e:	d404      	bmi.n	802098a <_fflush_r+0x3a>
 8020980:	0599      	lsls	r1, r3, #22
 8020982:	d402      	bmi.n	802098a <_fflush_r+0x3a>
 8020984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020986:	f7ff fcf0 	bl	802036a <__retarget_lock_acquire_recursive>
 802098a:	4628      	mov	r0, r5
 802098c:	4621      	mov	r1, r4
 802098e:	f7ff ff59 	bl	8020844 <__sflush_r>
 8020992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020994:	07da      	lsls	r2, r3, #31
 8020996:	4605      	mov	r5, r0
 8020998:	d4e0      	bmi.n	802095c <_fflush_r+0xc>
 802099a:	89a3      	ldrh	r3, [r4, #12]
 802099c:	059b      	lsls	r3, r3, #22
 802099e:	d4dd      	bmi.n	802095c <_fflush_r+0xc>
 80209a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80209a2:	f7ff fce3 	bl	802036c <__retarget_lock_release_recursive>
 80209a6:	e7d9      	b.n	802095c <_fflush_r+0xc>
 80209a8:	4b05      	ldr	r3, [pc, #20]	; (80209c0 <_fflush_r+0x70>)
 80209aa:	429c      	cmp	r4, r3
 80209ac:	d101      	bne.n	80209b2 <_fflush_r+0x62>
 80209ae:	68ac      	ldr	r4, [r5, #8]
 80209b0:	e7df      	b.n	8020972 <_fflush_r+0x22>
 80209b2:	4b04      	ldr	r3, [pc, #16]	; (80209c4 <_fflush_r+0x74>)
 80209b4:	429c      	cmp	r4, r3
 80209b6:	bf08      	it	eq
 80209b8:	68ec      	ldreq	r4, [r5, #12]
 80209ba:	e7da      	b.n	8020972 <_fflush_r+0x22>
 80209bc:	080231b4 	.word	0x080231b4
 80209c0:	080231d4 	.word	0x080231d4
 80209c4:	08023194 	.word	0x08023194

080209c8 <std>:
 80209c8:	2300      	movs	r3, #0
 80209ca:	b510      	push	{r4, lr}
 80209cc:	4604      	mov	r4, r0
 80209ce:	e9c0 3300 	strd	r3, r3, [r0]
 80209d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80209d6:	6083      	str	r3, [r0, #8]
 80209d8:	8181      	strh	r1, [r0, #12]
 80209da:	6643      	str	r3, [r0, #100]	; 0x64
 80209dc:	81c2      	strh	r2, [r0, #14]
 80209de:	6183      	str	r3, [r0, #24]
 80209e0:	4619      	mov	r1, r3
 80209e2:	2208      	movs	r2, #8
 80209e4:	305c      	adds	r0, #92	; 0x5c
 80209e6:	f7fb fee7 	bl	801c7b8 <memset>
 80209ea:	4b05      	ldr	r3, [pc, #20]	; (8020a00 <std+0x38>)
 80209ec:	6263      	str	r3, [r4, #36]	; 0x24
 80209ee:	4b05      	ldr	r3, [pc, #20]	; (8020a04 <std+0x3c>)
 80209f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80209f2:	4b05      	ldr	r3, [pc, #20]	; (8020a08 <std+0x40>)
 80209f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80209f6:	4b05      	ldr	r3, [pc, #20]	; (8020a0c <std+0x44>)
 80209f8:	6224      	str	r4, [r4, #32]
 80209fa:	6323      	str	r3, [r4, #48]	; 0x30
 80209fc:	bd10      	pop	{r4, pc}
 80209fe:	bf00      	nop
 8020a00:	08020d15 	.word	0x08020d15
 8020a04:	08020d37 	.word	0x08020d37
 8020a08:	08020d6f 	.word	0x08020d6f
 8020a0c:	08020d93 	.word	0x08020d93

08020a10 <_cleanup_r>:
 8020a10:	4901      	ldr	r1, [pc, #4]	; (8020a18 <_cleanup_r+0x8>)
 8020a12:	f000 b8af 	b.w	8020b74 <_fwalk_reent>
 8020a16:	bf00      	nop
 8020a18:	08020951 	.word	0x08020951

08020a1c <__sfmoreglue>:
 8020a1c:	b570      	push	{r4, r5, r6, lr}
 8020a1e:	2268      	movs	r2, #104	; 0x68
 8020a20:	1e4d      	subs	r5, r1, #1
 8020a22:	4355      	muls	r5, r2
 8020a24:	460e      	mov	r6, r1
 8020a26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8020a2a:	f7fb ff39 	bl	801c8a0 <_malloc_r>
 8020a2e:	4604      	mov	r4, r0
 8020a30:	b140      	cbz	r0, 8020a44 <__sfmoreglue+0x28>
 8020a32:	2100      	movs	r1, #0
 8020a34:	e9c0 1600 	strd	r1, r6, [r0]
 8020a38:	300c      	adds	r0, #12
 8020a3a:	60a0      	str	r0, [r4, #8]
 8020a3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020a40:	f7fb feba 	bl	801c7b8 <memset>
 8020a44:	4620      	mov	r0, r4
 8020a46:	bd70      	pop	{r4, r5, r6, pc}

08020a48 <__sfp_lock_acquire>:
 8020a48:	4801      	ldr	r0, [pc, #4]	; (8020a50 <__sfp_lock_acquire+0x8>)
 8020a4a:	f7ff bc8e 	b.w	802036a <__retarget_lock_acquire_recursive>
 8020a4e:	bf00      	nop
 8020a50:	20007e71 	.word	0x20007e71

08020a54 <__sfp_lock_release>:
 8020a54:	4801      	ldr	r0, [pc, #4]	; (8020a5c <__sfp_lock_release+0x8>)
 8020a56:	f7ff bc89 	b.w	802036c <__retarget_lock_release_recursive>
 8020a5a:	bf00      	nop
 8020a5c:	20007e71 	.word	0x20007e71

08020a60 <__sinit_lock_acquire>:
 8020a60:	4801      	ldr	r0, [pc, #4]	; (8020a68 <__sinit_lock_acquire+0x8>)
 8020a62:	f7ff bc82 	b.w	802036a <__retarget_lock_acquire_recursive>
 8020a66:	bf00      	nop
 8020a68:	20007e72 	.word	0x20007e72

08020a6c <__sinit_lock_release>:
 8020a6c:	4801      	ldr	r0, [pc, #4]	; (8020a74 <__sinit_lock_release+0x8>)
 8020a6e:	f7ff bc7d 	b.w	802036c <__retarget_lock_release_recursive>
 8020a72:	bf00      	nop
 8020a74:	20007e72 	.word	0x20007e72

08020a78 <__sinit>:
 8020a78:	b510      	push	{r4, lr}
 8020a7a:	4604      	mov	r4, r0
 8020a7c:	f7ff fff0 	bl	8020a60 <__sinit_lock_acquire>
 8020a80:	69a3      	ldr	r3, [r4, #24]
 8020a82:	b11b      	cbz	r3, 8020a8c <__sinit+0x14>
 8020a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020a88:	f7ff bff0 	b.w	8020a6c <__sinit_lock_release>
 8020a8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8020a90:	6523      	str	r3, [r4, #80]	; 0x50
 8020a92:	4b13      	ldr	r3, [pc, #76]	; (8020ae0 <__sinit+0x68>)
 8020a94:	4a13      	ldr	r2, [pc, #76]	; (8020ae4 <__sinit+0x6c>)
 8020a96:	681b      	ldr	r3, [r3, #0]
 8020a98:	62a2      	str	r2, [r4, #40]	; 0x28
 8020a9a:	42a3      	cmp	r3, r4
 8020a9c:	bf04      	itt	eq
 8020a9e:	2301      	moveq	r3, #1
 8020aa0:	61a3      	streq	r3, [r4, #24]
 8020aa2:	4620      	mov	r0, r4
 8020aa4:	f000 f820 	bl	8020ae8 <__sfp>
 8020aa8:	6060      	str	r0, [r4, #4]
 8020aaa:	4620      	mov	r0, r4
 8020aac:	f000 f81c 	bl	8020ae8 <__sfp>
 8020ab0:	60a0      	str	r0, [r4, #8]
 8020ab2:	4620      	mov	r0, r4
 8020ab4:	f000 f818 	bl	8020ae8 <__sfp>
 8020ab8:	2200      	movs	r2, #0
 8020aba:	60e0      	str	r0, [r4, #12]
 8020abc:	2104      	movs	r1, #4
 8020abe:	6860      	ldr	r0, [r4, #4]
 8020ac0:	f7ff ff82 	bl	80209c8 <std>
 8020ac4:	68a0      	ldr	r0, [r4, #8]
 8020ac6:	2201      	movs	r2, #1
 8020ac8:	2109      	movs	r1, #9
 8020aca:	f7ff ff7d 	bl	80209c8 <std>
 8020ace:	68e0      	ldr	r0, [r4, #12]
 8020ad0:	2202      	movs	r2, #2
 8020ad2:	2112      	movs	r1, #18
 8020ad4:	f7ff ff78 	bl	80209c8 <std>
 8020ad8:	2301      	movs	r3, #1
 8020ada:	61a3      	str	r3, [r4, #24]
 8020adc:	e7d2      	b.n	8020a84 <__sinit+0xc>
 8020ade:	bf00      	nop
 8020ae0:	08022d54 	.word	0x08022d54
 8020ae4:	08020a11 	.word	0x08020a11

08020ae8 <__sfp>:
 8020ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020aea:	4607      	mov	r7, r0
 8020aec:	f7ff ffac 	bl	8020a48 <__sfp_lock_acquire>
 8020af0:	4b1e      	ldr	r3, [pc, #120]	; (8020b6c <__sfp+0x84>)
 8020af2:	681e      	ldr	r6, [r3, #0]
 8020af4:	69b3      	ldr	r3, [r6, #24]
 8020af6:	b913      	cbnz	r3, 8020afe <__sfp+0x16>
 8020af8:	4630      	mov	r0, r6
 8020afa:	f7ff ffbd 	bl	8020a78 <__sinit>
 8020afe:	3648      	adds	r6, #72	; 0x48
 8020b00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020b04:	3b01      	subs	r3, #1
 8020b06:	d503      	bpl.n	8020b10 <__sfp+0x28>
 8020b08:	6833      	ldr	r3, [r6, #0]
 8020b0a:	b30b      	cbz	r3, 8020b50 <__sfp+0x68>
 8020b0c:	6836      	ldr	r6, [r6, #0]
 8020b0e:	e7f7      	b.n	8020b00 <__sfp+0x18>
 8020b10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020b14:	b9d5      	cbnz	r5, 8020b4c <__sfp+0x64>
 8020b16:	4b16      	ldr	r3, [pc, #88]	; (8020b70 <__sfp+0x88>)
 8020b18:	60e3      	str	r3, [r4, #12]
 8020b1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8020b1e:	6665      	str	r5, [r4, #100]	; 0x64
 8020b20:	f7ff fc22 	bl	8020368 <__retarget_lock_init_recursive>
 8020b24:	f7ff ff96 	bl	8020a54 <__sfp_lock_release>
 8020b28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8020b2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8020b30:	6025      	str	r5, [r4, #0]
 8020b32:	61a5      	str	r5, [r4, #24]
 8020b34:	2208      	movs	r2, #8
 8020b36:	4629      	mov	r1, r5
 8020b38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020b3c:	f7fb fe3c 	bl	801c7b8 <memset>
 8020b40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020b44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020b48:	4620      	mov	r0, r4
 8020b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020b4c:	3468      	adds	r4, #104	; 0x68
 8020b4e:	e7d9      	b.n	8020b04 <__sfp+0x1c>
 8020b50:	2104      	movs	r1, #4
 8020b52:	4638      	mov	r0, r7
 8020b54:	f7ff ff62 	bl	8020a1c <__sfmoreglue>
 8020b58:	4604      	mov	r4, r0
 8020b5a:	6030      	str	r0, [r6, #0]
 8020b5c:	2800      	cmp	r0, #0
 8020b5e:	d1d5      	bne.n	8020b0c <__sfp+0x24>
 8020b60:	f7ff ff78 	bl	8020a54 <__sfp_lock_release>
 8020b64:	230c      	movs	r3, #12
 8020b66:	603b      	str	r3, [r7, #0]
 8020b68:	e7ee      	b.n	8020b48 <__sfp+0x60>
 8020b6a:	bf00      	nop
 8020b6c:	08022d54 	.word	0x08022d54
 8020b70:	ffff0001 	.word	0xffff0001

08020b74 <_fwalk_reent>:
 8020b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020b78:	4606      	mov	r6, r0
 8020b7a:	4688      	mov	r8, r1
 8020b7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020b80:	2700      	movs	r7, #0
 8020b82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020b86:	f1b9 0901 	subs.w	r9, r9, #1
 8020b8a:	d505      	bpl.n	8020b98 <_fwalk_reent+0x24>
 8020b8c:	6824      	ldr	r4, [r4, #0]
 8020b8e:	2c00      	cmp	r4, #0
 8020b90:	d1f7      	bne.n	8020b82 <_fwalk_reent+0xe>
 8020b92:	4638      	mov	r0, r7
 8020b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020b98:	89ab      	ldrh	r3, [r5, #12]
 8020b9a:	2b01      	cmp	r3, #1
 8020b9c:	d907      	bls.n	8020bae <_fwalk_reent+0x3a>
 8020b9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020ba2:	3301      	adds	r3, #1
 8020ba4:	d003      	beq.n	8020bae <_fwalk_reent+0x3a>
 8020ba6:	4629      	mov	r1, r5
 8020ba8:	4630      	mov	r0, r6
 8020baa:	47c0      	blx	r8
 8020bac:	4307      	orrs	r7, r0
 8020bae:	3568      	adds	r5, #104	; 0x68
 8020bb0:	e7e9      	b.n	8020b86 <_fwalk_reent+0x12>

08020bb2 <__swhatbuf_r>:
 8020bb2:	b570      	push	{r4, r5, r6, lr}
 8020bb4:	460e      	mov	r6, r1
 8020bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020bba:	2900      	cmp	r1, #0
 8020bbc:	b096      	sub	sp, #88	; 0x58
 8020bbe:	4614      	mov	r4, r2
 8020bc0:	461d      	mov	r5, r3
 8020bc2:	da08      	bge.n	8020bd6 <__swhatbuf_r+0x24>
 8020bc4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8020bc8:	2200      	movs	r2, #0
 8020bca:	602a      	str	r2, [r5, #0]
 8020bcc:	061a      	lsls	r2, r3, #24
 8020bce:	d410      	bmi.n	8020bf2 <__swhatbuf_r+0x40>
 8020bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020bd4:	e00e      	b.n	8020bf4 <__swhatbuf_r+0x42>
 8020bd6:	466a      	mov	r2, sp
 8020bd8:	f000 f902 	bl	8020de0 <_fstat_r>
 8020bdc:	2800      	cmp	r0, #0
 8020bde:	dbf1      	blt.n	8020bc4 <__swhatbuf_r+0x12>
 8020be0:	9a01      	ldr	r2, [sp, #4]
 8020be2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020be6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020bea:	425a      	negs	r2, r3
 8020bec:	415a      	adcs	r2, r3
 8020bee:	602a      	str	r2, [r5, #0]
 8020bf0:	e7ee      	b.n	8020bd0 <__swhatbuf_r+0x1e>
 8020bf2:	2340      	movs	r3, #64	; 0x40
 8020bf4:	2000      	movs	r0, #0
 8020bf6:	6023      	str	r3, [r4, #0]
 8020bf8:	b016      	add	sp, #88	; 0x58
 8020bfa:	bd70      	pop	{r4, r5, r6, pc}

08020bfc <__smakebuf_r>:
 8020bfc:	898b      	ldrh	r3, [r1, #12]
 8020bfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020c00:	079d      	lsls	r5, r3, #30
 8020c02:	4606      	mov	r6, r0
 8020c04:	460c      	mov	r4, r1
 8020c06:	d507      	bpl.n	8020c18 <__smakebuf_r+0x1c>
 8020c08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020c0c:	6023      	str	r3, [r4, #0]
 8020c0e:	6123      	str	r3, [r4, #16]
 8020c10:	2301      	movs	r3, #1
 8020c12:	6163      	str	r3, [r4, #20]
 8020c14:	b002      	add	sp, #8
 8020c16:	bd70      	pop	{r4, r5, r6, pc}
 8020c18:	ab01      	add	r3, sp, #4
 8020c1a:	466a      	mov	r2, sp
 8020c1c:	f7ff ffc9 	bl	8020bb2 <__swhatbuf_r>
 8020c20:	9900      	ldr	r1, [sp, #0]
 8020c22:	4605      	mov	r5, r0
 8020c24:	4630      	mov	r0, r6
 8020c26:	f7fb fe3b 	bl	801c8a0 <_malloc_r>
 8020c2a:	b948      	cbnz	r0, 8020c40 <__smakebuf_r+0x44>
 8020c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020c30:	059a      	lsls	r2, r3, #22
 8020c32:	d4ef      	bmi.n	8020c14 <__smakebuf_r+0x18>
 8020c34:	f023 0303 	bic.w	r3, r3, #3
 8020c38:	f043 0302 	orr.w	r3, r3, #2
 8020c3c:	81a3      	strh	r3, [r4, #12]
 8020c3e:	e7e3      	b.n	8020c08 <__smakebuf_r+0xc>
 8020c40:	4b0d      	ldr	r3, [pc, #52]	; (8020c78 <__smakebuf_r+0x7c>)
 8020c42:	62b3      	str	r3, [r6, #40]	; 0x28
 8020c44:	89a3      	ldrh	r3, [r4, #12]
 8020c46:	6020      	str	r0, [r4, #0]
 8020c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c4c:	81a3      	strh	r3, [r4, #12]
 8020c4e:	9b00      	ldr	r3, [sp, #0]
 8020c50:	6163      	str	r3, [r4, #20]
 8020c52:	9b01      	ldr	r3, [sp, #4]
 8020c54:	6120      	str	r0, [r4, #16]
 8020c56:	b15b      	cbz	r3, 8020c70 <__smakebuf_r+0x74>
 8020c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020c5c:	4630      	mov	r0, r6
 8020c5e:	f000 f8d1 	bl	8020e04 <_isatty_r>
 8020c62:	b128      	cbz	r0, 8020c70 <__smakebuf_r+0x74>
 8020c64:	89a3      	ldrh	r3, [r4, #12]
 8020c66:	f023 0303 	bic.w	r3, r3, #3
 8020c6a:	f043 0301 	orr.w	r3, r3, #1
 8020c6e:	81a3      	strh	r3, [r4, #12]
 8020c70:	89a0      	ldrh	r0, [r4, #12]
 8020c72:	4305      	orrs	r5, r0
 8020c74:	81a5      	strh	r5, [r4, #12]
 8020c76:	e7cd      	b.n	8020c14 <__smakebuf_r+0x18>
 8020c78:	08020a11 	.word	0x08020a11

08020c7c <_malloc_usable_size_r>:
 8020c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020c80:	1f18      	subs	r0, r3, #4
 8020c82:	2b00      	cmp	r3, #0
 8020c84:	bfbc      	itt	lt
 8020c86:	580b      	ldrlt	r3, [r1, r0]
 8020c88:	18c0      	addlt	r0, r0, r3
 8020c8a:	4770      	bx	lr

08020c8c <_raise_r>:
 8020c8c:	291f      	cmp	r1, #31
 8020c8e:	b538      	push	{r3, r4, r5, lr}
 8020c90:	4604      	mov	r4, r0
 8020c92:	460d      	mov	r5, r1
 8020c94:	d904      	bls.n	8020ca0 <_raise_r+0x14>
 8020c96:	2316      	movs	r3, #22
 8020c98:	6003      	str	r3, [r0, #0]
 8020c9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020c9e:	bd38      	pop	{r3, r4, r5, pc}
 8020ca0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020ca2:	b112      	cbz	r2, 8020caa <_raise_r+0x1e>
 8020ca4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020ca8:	b94b      	cbnz	r3, 8020cbe <_raise_r+0x32>
 8020caa:	4620      	mov	r0, r4
 8020cac:	f000 f830 	bl	8020d10 <_getpid_r>
 8020cb0:	462a      	mov	r2, r5
 8020cb2:	4601      	mov	r1, r0
 8020cb4:	4620      	mov	r0, r4
 8020cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020cba:	f000 b817 	b.w	8020cec <_kill_r>
 8020cbe:	2b01      	cmp	r3, #1
 8020cc0:	d00a      	beq.n	8020cd8 <_raise_r+0x4c>
 8020cc2:	1c59      	adds	r1, r3, #1
 8020cc4:	d103      	bne.n	8020cce <_raise_r+0x42>
 8020cc6:	2316      	movs	r3, #22
 8020cc8:	6003      	str	r3, [r0, #0]
 8020cca:	2001      	movs	r0, #1
 8020ccc:	e7e7      	b.n	8020c9e <_raise_r+0x12>
 8020cce:	2400      	movs	r4, #0
 8020cd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020cd4:	4628      	mov	r0, r5
 8020cd6:	4798      	blx	r3
 8020cd8:	2000      	movs	r0, #0
 8020cda:	e7e0      	b.n	8020c9e <_raise_r+0x12>

08020cdc <raise>:
 8020cdc:	4b02      	ldr	r3, [pc, #8]	; (8020ce8 <raise+0xc>)
 8020cde:	4601      	mov	r1, r0
 8020ce0:	6818      	ldr	r0, [r3, #0]
 8020ce2:	f7ff bfd3 	b.w	8020c8c <_raise_r>
 8020ce6:	bf00      	nop
 8020ce8:	200003a4 	.word	0x200003a4

08020cec <_kill_r>:
 8020cec:	b538      	push	{r3, r4, r5, lr}
 8020cee:	4d07      	ldr	r5, [pc, #28]	; (8020d0c <_kill_r+0x20>)
 8020cf0:	2300      	movs	r3, #0
 8020cf2:	4604      	mov	r4, r0
 8020cf4:	4608      	mov	r0, r1
 8020cf6:	4611      	mov	r1, r2
 8020cf8:	602b      	str	r3, [r5, #0]
 8020cfa:	f7e8 f8f1 	bl	8008ee0 <_kill>
 8020cfe:	1c43      	adds	r3, r0, #1
 8020d00:	d102      	bne.n	8020d08 <_kill_r+0x1c>
 8020d02:	682b      	ldr	r3, [r5, #0]
 8020d04:	b103      	cbz	r3, 8020d08 <_kill_r+0x1c>
 8020d06:	6023      	str	r3, [r4, #0]
 8020d08:	bd38      	pop	{r3, r4, r5, pc}
 8020d0a:	bf00      	nop
 8020d0c:	20007e6c 	.word	0x20007e6c

08020d10 <_getpid_r>:
 8020d10:	f7e8 b8de 	b.w	8008ed0 <_getpid>

08020d14 <__sread>:
 8020d14:	b510      	push	{r4, lr}
 8020d16:	460c      	mov	r4, r1
 8020d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d1c:	f000 f894 	bl	8020e48 <_read_r>
 8020d20:	2800      	cmp	r0, #0
 8020d22:	bfab      	itete	ge
 8020d24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020d26:	89a3      	ldrhlt	r3, [r4, #12]
 8020d28:	181b      	addge	r3, r3, r0
 8020d2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020d2e:	bfac      	ite	ge
 8020d30:	6563      	strge	r3, [r4, #84]	; 0x54
 8020d32:	81a3      	strhlt	r3, [r4, #12]
 8020d34:	bd10      	pop	{r4, pc}

08020d36 <__swrite>:
 8020d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d3a:	461f      	mov	r7, r3
 8020d3c:	898b      	ldrh	r3, [r1, #12]
 8020d3e:	05db      	lsls	r3, r3, #23
 8020d40:	4605      	mov	r5, r0
 8020d42:	460c      	mov	r4, r1
 8020d44:	4616      	mov	r6, r2
 8020d46:	d505      	bpl.n	8020d54 <__swrite+0x1e>
 8020d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d4c:	2302      	movs	r3, #2
 8020d4e:	2200      	movs	r2, #0
 8020d50:	f000 f868 	bl	8020e24 <_lseek_r>
 8020d54:	89a3      	ldrh	r3, [r4, #12]
 8020d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020d5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020d5e:	81a3      	strh	r3, [r4, #12]
 8020d60:	4632      	mov	r2, r6
 8020d62:	463b      	mov	r3, r7
 8020d64:	4628      	mov	r0, r5
 8020d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020d6a:	f000 b817 	b.w	8020d9c <_write_r>

08020d6e <__sseek>:
 8020d6e:	b510      	push	{r4, lr}
 8020d70:	460c      	mov	r4, r1
 8020d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d76:	f000 f855 	bl	8020e24 <_lseek_r>
 8020d7a:	1c43      	adds	r3, r0, #1
 8020d7c:	89a3      	ldrh	r3, [r4, #12]
 8020d7e:	bf15      	itete	ne
 8020d80:	6560      	strne	r0, [r4, #84]	; 0x54
 8020d82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020d86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020d8a:	81a3      	strheq	r3, [r4, #12]
 8020d8c:	bf18      	it	ne
 8020d8e:	81a3      	strhne	r3, [r4, #12]
 8020d90:	bd10      	pop	{r4, pc}

08020d92 <__sclose>:
 8020d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d96:	f000 b813 	b.w	8020dc0 <_close_r>
	...

08020d9c <_write_r>:
 8020d9c:	b538      	push	{r3, r4, r5, lr}
 8020d9e:	4d07      	ldr	r5, [pc, #28]	; (8020dbc <_write_r+0x20>)
 8020da0:	4604      	mov	r4, r0
 8020da2:	4608      	mov	r0, r1
 8020da4:	4611      	mov	r1, r2
 8020da6:	2200      	movs	r2, #0
 8020da8:	602a      	str	r2, [r5, #0]
 8020daa:	461a      	mov	r2, r3
 8020dac:	f7e8 f8cf 	bl	8008f4e <_write>
 8020db0:	1c43      	adds	r3, r0, #1
 8020db2:	d102      	bne.n	8020dba <_write_r+0x1e>
 8020db4:	682b      	ldr	r3, [r5, #0]
 8020db6:	b103      	cbz	r3, 8020dba <_write_r+0x1e>
 8020db8:	6023      	str	r3, [r4, #0]
 8020dba:	bd38      	pop	{r3, r4, r5, pc}
 8020dbc:	20007e6c 	.word	0x20007e6c

08020dc0 <_close_r>:
 8020dc0:	b538      	push	{r3, r4, r5, lr}
 8020dc2:	4d06      	ldr	r5, [pc, #24]	; (8020ddc <_close_r+0x1c>)
 8020dc4:	2300      	movs	r3, #0
 8020dc6:	4604      	mov	r4, r0
 8020dc8:	4608      	mov	r0, r1
 8020dca:	602b      	str	r3, [r5, #0]
 8020dcc:	f7e8 f8db 	bl	8008f86 <_close>
 8020dd0:	1c43      	adds	r3, r0, #1
 8020dd2:	d102      	bne.n	8020dda <_close_r+0x1a>
 8020dd4:	682b      	ldr	r3, [r5, #0]
 8020dd6:	b103      	cbz	r3, 8020dda <_close_r+0x1a>
 8020dd8:	6023      	str	r3, [r4, #0]
 8020dda:	bd38      	pop	{r3, r4, r5, pc}
 8020ddc:	20007e6c 	.word	0x20007e6c

08020de0 <_fstat_r>:
 8020de0:	b538      	push	{r3, r4, r5, lr}
 8020de2:	4d07      	ldr	r5, [pc, #28]	; (8020e00 <_fstat_r+0x20>)
 8020de4:	2300      	movs	r3, #0
 8020de6:	4604      	mov	r4, r0
 8020de8:	4608      	mov	r0, r1
 8020dea:	4611      	mov	r1, r2
 8020dec:	602b      	str	r3, [r5, #0]
 8020dee:	f7e8 f8d6 	bl	8008f9e <_fstat>
 8020df2:	1c43      	adds	r3, r0, #1
 8020df4:	d102      	bne.n	8020dfc <_fstat_r+0x1c>
 8020df6:	682b      	ldr	r3, [r5, #0]
 8020df8:	b103      	cbz	r3, 8020dfc <_fstat_r+0x1c>
 8020dfa:	6023      	str	r3, [r4, #0]
 8020dfc:	bd38      	pop	{r3, r4, r5, pc}
 8020dfe:	bf00      	nop
 8020e00:	20007e6c 	.word	0x20007e6c

08020e04 <_isatty_r>:
 8020e04:	b538      	push	{r3, r4, r5, lr}
 8020e06:	4d06      	ldr	r5, [pc, #24]	; (8020e20 <_isatty_r+0x1c>)
 8020e08:	2300      	movs	r3, #0
 8020e0a:	4604      	mov	r4, r0
 8020e0c:	4608      	mov	r0, r1
 8020e0e:	602b      	str	r3, [r5, #0]
 8020e10:	f7e8 f8d5 	bl	8008fbe <_isatty>
 8020e14:	1c43      	adds	r3, r0, #1
 8020e16:	d102      	bne.n	8020e1e <_isatty_r+0x1a>
 8020e18:	682b      	ldr	r3, [r5, #0]
 8020e1a:	b103      	cbz	r3, 8020e1e <_isatty_r+0x1a>
 8020e1c:	6023      	str	r3, [r4, #0]
 8020e1e:	bd38      	pop	{r3, r4, r5, pc}
 8020e20:	20007e6c 	.word	0x20007e6c

08020e24 <_lseek_r>:
 8020e24:	b538      	push	{r3, r4, r5, lr}
 8020e26:	4d07      	ldr	r5, [pc, #28]	; (8020e44 <_lseek_r+0x20>)
 8020e28:	4604      	mov	r4, r0
 8020e2a:	4608      	mov	r0, r1
 8020e2c:	4611      	mov	r1, r2
 8020e2e:	2200      	movs	r2, #0
 8020e30:	602a      	str	r2, [r5, #0]
 8020e32:	461a      	mov	r2, r3
 8020e34:	f7e8 f8ce 	bl	8008fd4 <_lseek>
 8020e38:	1c43      	adds	r3, r0, #1
 8020e3a:	d102      	bne.n	8020e42 <_lseek_r+0x1e>
 8020e3c:	682b      	ldr	r3, [r5, #0]
 8020e3e:	b103      	cbz	r3, 8020e42 <_lseek_r+0x1e>
 8020e40:	6023      	str	r3, [r4, #0]
 8020e42:	bd38      	pop	{r3, r4, r5, pc}
 8020e44:	20007e6c 	.word	0x20007e6c

08020e48 <_read_r>:
 8020e48:	b538      	push	{r3, r4, r5, lr}
 8020e4a:	4d07      	ldr	r5, [pc, #28]	; (8020e68 <_read_r+0x20>)
 8020e4c:	4604      	mov	r4, r0
 8020e4e:	4608      	mov	r0, r1
 8020e50:	4611      	mov	r1, r2
 8020e52:	2200      	movs	r2, #0
 8020e54:	602a      	str	r2, [r5, #0]
 8020e56:	461a      	mov	r2, r3
 8020e58:	f7e8 f85c 	bl	8008f14 <_read>
 8020e5c:	1c43      	adds	r3, r0, #1
 8020e5e:	d102      	bne.n	8020e66 <_read_r+0x1e>
 8020e60:	682b      	ldr	r3, [r5, #0]
 8020e62:	b103      	cbz	r3, 8020e66 <_read_r+0x1e>
 8020e64:	6023      	str	r3, [r4, #0]
 8020e66:	bd38      	pop	{r3, r4, r5, pc}
 8020e68:	20007e6c 	.word	0x20007e6c

08020e6c <_init>:
 8020e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e6e:	bf00      	nop
 8020e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020e72:	bc08      	pop	{r3}
 8020e74:	469e      	mov	lr, r3
 8020e76:	4770      	bx	lr

08020e78 <_fini>:
 8020e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e7a:	bf00      	nop
 8020e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020e7e:	bc08      	pop	{r3}
 8020e80:	469e      	mov	lr, r3
 8020e82:	4770      	bx	lr
